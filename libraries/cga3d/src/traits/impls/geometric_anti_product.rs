// Note on Operative Statistics:
// Operative Statistics are not a precise predictor of performance or performance comparisons.
// This is due to varying hardware capabilities and compiler optimizations.
// As always, where performance is a concern, there is no substitute for
// real measurements on real work-loads on real hardware.
// Disclaimer aside, enjoy the fun information =)
//
// Total Implementations: 1225
//
// Yes SIMD:   add/sub     mul     div
//  Minimum:         0       1       0
//   Median:         8      20       0
//  Average:        20      31       0
//  Maximum:       551     579       0
//
//  No SIMD:   add/sub     mul     div
//  Minimum:         0       1       0
//   Median:        12      29       0
//  Average:        36      51       0
//  Maximum:       992    1024       0
impl InfixGeometricAntiProduct for AntiCircleRotor {}
impl GeometricAntiProduct<AntiCircleRotor> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       45       61        0
    //    simd4       15       15        0
    // Totals...
    // yes simd       60       76        0
    //  no simd      105      121        0
    fn geometric_anti_product(self, other: AntiCircleRotor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (-(other.group0()[2] * self.group1()[1]) - (self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group1()[2])),
                (-(other.group0()[1] * self.group1()[3]) - (self.group0()[1] * other.group2()[3]) - (self.group0()[2] * other.group1()[0])),
                (-(other.group0()[2] * self.group1()[3]) - (self.group0()[0] * other.group1()[1]) - (self.group0()[2] * other.group2()[3])),
                ((other.group0()[0] * self.group2()[0])
                    + (other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])
                    + (self.group0()[0] * other.group2()[0])
                    + (self.group0()[1] * other.group2()[1])
                    + (self.group0()[2] * other.group2()[2])),
            ]) - (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group1()[3]]) * swizzle!(self.group1(), 3, 2, 0, 3))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group1()[1]]) * swizzle!(other.group1(), 3, 2, 0, 1))
                + (Simd32x4::from([self.group0()[2], self.group0()[1], self.group0()[2], self.group1()[2]]) * swizzle!(other.group1(), 1, 3, 3, 2))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[2] * self.group2()[1]) - (other.group1()[0] * self.group2()[3]) - (other.group1()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group1()[0] * self.group1()[2]) - (other.group1()[1] * self.group2()[3])),
                (-(other.group0()[1] * self.group2()[0]) - (other.group1()[1] * self.group1()[0]) - (other.group1()[2] * self.group2()[3])),
                ((other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2]) - (self.group0()[2] * other.group2()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[3]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[1]]) * swizzle!(other.group2(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[3]]) * swizzle!(other.group1(), 1, 2, 0, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(other.group1()[2] * self.group2()[1])
                    - (other.group1()[3] * self.group2()[0])
                    - (other.group2()[0] * self.group2()[3])
                    - (other.group2()[2] * self.group1()[1])
                    - (other.group2()[3] * self.group2()[0])),
                (-(other.group1()[0] * self.group2()[2])
                    - (other.group1()[3] * self.group2()[1])
                    - (other.group2()[0] * self.group1()[2])
                    - (other.group2()[1] * self.group2()[3])
                    - (other.group2()[3] * self.group2()[1])),
                (-(other.group1()[1] * self.group2()[0])
                    - (other.group1()[3] * self.group2()[2])
                    - (other.group2()[1] * self.group1()[0])
                    - (other.group2()[2] * self.group2()[3])
                    - (other.group2()[3] * self.group2()[2])),
                ((other.group1()[1] * self.group2()[1]) + (other.group1()[2] * self.group2()[2]) + (other.group2()[2] * self.group1()[2])),
            ]) + (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group2(), 2, 0, 1, 0))
                + (swizzle!(other.group2(), 0, 1, 0, 0) * swizzle!(self.group1(), 3, 3, 1, 0))
                + (swizzle!(other.group2(), 1, 2, 2, 1) * swizzle!(self.group1(), 2, 0, 3, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1]) + (self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group0()[2] * self.group2()[0]) - (self.group0()[0] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[0])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) + (self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0])),
                ((other.group0()[2] * self.group1()[2]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1]) + (self.group0()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[1]]) * swizzle!(self.group1(), 0, 1, 2, 1))),
        );
    }
}
impl GeometricAntiProduct<AntiDipoleInversion> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       49       65        0
    //    simd4       25       25        0
    // Totals...
    // yes simd       74       90        0
    //  no simd      149      165        0
    fn geometric_anti_product(self, other: AntiDipoleInversion) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) + (self.group0()[1] * other.group3()[2]) - (self.group0()[2] * other.group3()[1])
                    + (other.group0()[0] * self.group1()[3])
                    + (other.group0()[0] * self.group2()[3])
                    + (other.group0()[2] * self.group1()[1])
                    + (self.group1()[0] * other.group2()[3])),
                (-(self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group0()[2] * other.group3()[0])
                    + (other.group0()[0] * self.group1()[2])
                    + (other.group0()[1] * self.group1()[3])
                    + (other.group0()[1] * self.group2()[3])
                    + (self.group1()[1] * other.group2()[3])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (other.group0()[2] * self.group2()[3])
                    + (self.group1()[2] * other.group2()[3])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[1]]) * swizzle!(self.group1(), 2, 0, 1, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) - (self.group1()[2] * other.group1()[1]) - (self.group1()[3] * other.group3()[0])),
                ((self.group0()[2] * other.group2()[0]) - (self.group1()[0] * other.group1()[2]) - (self.group1()[3] * other.group3()[1])),
                ((self.group0()[0] * other.group2()[1]) - (self.group1()[1] * other.group1()[0]) - (self.group1()[3] * other.group3()[2])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2]) + (self.group1()[2] * other.group3()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group2(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]) * swizzle!(self.group2(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group3()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[1]]) * swizzle!(self.group2(), 0, 1, 2, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group2()[1] * other.group1()[2]) + (self.group2()[2] * other.group3()[1]) + (self.group2()[3] * other.group2()[0])),
                ((self.group2()[0] * other.group3()[2]) + (self.group2()[2] * other.group1()[0]) + (self.group2()[3] * other.group2()[1])),
                ((self.group1()[2] * other.group3()[3]) + (self.group2()[0] * other.group1()[1]) + (self.group2()[1] * other.group3()[0])),
                (-(self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])
                    - (other.group0()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group2()[3], self.group2()[3]]) * swizzle!(other.group2(), 2, 0, 2, 3))
                - (Simd32x4::from([self.group2()[0], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 3, 2, 0, 0))
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group3(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group1(), 1, 3, 3, 1))
                - (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[1]]) * swizzle!(self.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group2()[1], other.group2()[3]]) * swizzle!(self.group1(), 0, 1, 0, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) + (self.group1()[3] * other.group1()[0])),
                ((self.group0()[2] * other.group2()[0]) + (self.group1()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[1]) + (self.group1()[3] * other.group1()[2])),
                (-(self.group2()[2] * other.group1()[2]) + (self.group2()[3] * other.group3()[3])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[1]]) * swizzle!(self.group2(), 2, 0, 1, 1))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]) * swizzle!(other.group3(), 1, 2, 0, 2))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group1()[3]]) * other.group3())
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group2()[1]]) * swizzle!(self.group1(), 0, 1, 0, 1))
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group1()[1]]) * swizzle!(self.group2(), 0, 1, 2, 1))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[3], other.group2()[2]]) * swizzle!(self.group1(), 1, 2, 2, 2))),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum321> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       17        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        5       20        0
    //  no simd        8       29        0
    fn geometric_anti_product(self, other: AntiDualNum321) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(other.group0()[0])
                * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other.group0()[1] * self.group1()[0] * -1.0),
                (other.group0()[1] * self.group1()[1] * -1.0),
                (other.group0()[1] * self.group1()[2] * -1.0),
                ((other.group0()[0] * self.group2()[3]) + (other.group0()[1] * self.group1()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(other.group0()[0] * self.group2()[0]) - (other.group0()[1] * self.group2()[0])),
                (-(other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[1])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group2()[2])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[0] * self.group1()[0]),
                (other.group0()[0] * self.group1()[1]),
                (other.group0()[0] * self.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum4> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        7       29        0
    fn geometric_anti_product(self, other: AntiDualNum4) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group0()[2])),
                (other.group0()[1] * self.group2()[3] * -1.0),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group2()[0]) - (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other.group0()[1] * self.group2()[0] * -1.0),
                (other.group0()[1] * self.group2()[1] * -1.0),
                (other.group0()[1] * self.group2()[2] * -1.0),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[0] * self.group2()[0] * -1.0),
                (other.group0()[0] * self.group2()[1] * -1.0),
                (other.group0()[0] * self.group2()[2] * -1.0),
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[0] * self.group2()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum5> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       14        0
    //    simd4        1        4        0
    // Totals...
    // yes simd        4       18        0
    //  no simd        7       30        0
    fn geometric_anti_product(self, other: AntiDualNum5) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]) * Simd32x4::from(-1.0)),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group1()[1])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3]),
            ]),
            // e235, e315, e125, e5
            ((Simd32x4::from([
                (other.group0()[1] * self.group2()[0]),
                (other.group0()[1] * self.group2()[1]),
                (other.group0()[1] * self.group2()[2]),
                (other.group0()[0] * self.group1()[3]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiFlatPoint> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       28        0
    //    simd4        3        5        0
    // Totals...
    // yes simd       20       33        0
    //  no simd       29       48        0
    fn geometric_anti_product(self, other: AntiFlatPoint) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[2] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]) - (self.group2()[3] * other.group0()[3])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1]) - (self.group1()[3] * other.group0()[0]) - (self.group2()[0] * other.group0()[3])
                    + (self.group2()[3] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0])
                    - (self.group1()[3] * other.group0()[1])
                    - (self.group2()[1] * other.group0()[3])
                    + (self.group2()[3] * other.group0()[1])),
                ((self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0]) - (self.group1()[3] * other.group0()[2]) - (self.group2()[2] * other.group0()[3])
                    + (self.group2()[3] * other.group0()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[2]])
                * swizzle!(other.group0(), 2, 0, 1, 2)
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (swizzle!(self.group1(), 0, 1, 2, 1) * swizzle!(other.group0(), 3, 3, 3, 1))),
        );
    }
}
impl GeometricAntiProduct<AntiFlector> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       52        0
    //    simd4        9        9        0
    // Totals...
    // yes simd       45       61        0
    //  no simd       72       88        0
    fn geometric_anti_product(self, other: AntiFlector) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[3]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group1()[3] * other.group1()[0])),
                ((self.group0()[2] * other.group0()[0]) - (self.group1()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[1]) - (self.group1()[3] * other.group1()[2])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[2] * other.group1()[2])
                    - (self.group2()[3] * other.group0()[3])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group1()[0] * other.group1()[3]) + (self.group1()[1] * other.group0()[2])
                    - (self.group1()[2] * other.group0()[1])
                    - (self.group1()[3] * other.group0()[0])
                    - (self.group2()[0] * other.group0()[3])
                    + (self.group2()[2] * other.group1()[1])
                    + (self.group2()[3] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[2]) + (self.group1()[1] * other.group1()[3]) + (self.group1()[2] * other.group0()[0])
                    - (self.group1()[3] * other.group0()[1])
                    + (self.group2()[0] * other.group1()[2])
                    - (self.group2()[1] * other.group0()[3])
                    + (self.group2()[3] * other.group0()[1])),
                ((self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0]) + (self.group1()[2] * other.group1()[3]) - (self.group1()[3] * other.group0()[2])
                    + (self.group2()[1] * other.group1()[0])
                    - (self.group2()[2] * other.group0()[3])
                    + (self.group2()[3] * other.group0()[2])),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[2] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                ((self.group2()[2] * other.group1()[2]) + (self.group2()[3] * other.group1()[3])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group1()[3]]) * other.group1())
                - (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group0()[1]]) * swizzle!(self.group1(), 0, 1, 0, 1))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group0()[2]]) * swizzle!(self.group1(), 1, 2, 2, 2))),
        );
    }
}
impl GeometricAntiProduct<AntiLine> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       38       54        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       41       57        0
    //  no simd       50       66        0
    fn geometric_anti_product(self, other: AntiLine) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[2])
                    + (other.group0()[0] * self.group1()[0])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1]) - (other.group0()[0] * self.group2()[3])
                    + (other.group0()[1] * self.group1()[2])
                    - (other.group0()[2] * self.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0]) - (other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group2()[3])
                    + (other.group0()[2] * self.group1()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) + (other.group0()[0] * self.group1()[1])
                    - (other.group0()[1] * self.group1()[0])
                    - (other.group0()[2] * self.group2()[3])),
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(other.group0()[2] * self.group2()[1]) - (other.group1()[0] * self.group2()[3]) - (other.group1()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group1()[0] * self.group1()[2]) - (other.group1()[1] * self.group2()[3])),
                (-(other.group0()[1] * self.group2()[0]) - (other.group1()[1] * self.group1()[0]) - (other.group1()[2] * self.group2()[3])),
                ((other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2]) + (other.group1()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[0], other.group1()[0]]) * swizzle!(self.group1(), 3, 3, 1, 0))
                + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[2], other.group1()[1]]) * swizzle!(self.group1(), 2, 0, 3, 1))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) + (other.group0()[0] * self.group1()[3])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0]) + (other.group0()[1] * self.group1()[3])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (other.group0()[2] * self.group1()[3])),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiMotor> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       52        0
    //    simd4       10       10        0
    // Totals...
    // yes simd       42       62        0
    //  no simd       72       92        0
    fn geometric_anti_product(self, other: AntiMotor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) * -1.0),
                ((self.group0()[2] * other.group0()[0]) * -1.0),
                ((self.group0()[2] * other.group0()[3]) * -1.0),
                ((self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[2])
                    + (self.group1()[1] * other.group0()[1])
                    + (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group2()[3]]) * swizzle!(other.group0(), 3, 3, 1, 3))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group1()[1]) - (self.group1()[0] * other.group0()[3]) - (self.group1()[1] * other.group0()[2]) - (self.group2()[3] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[2]) - (self.group1()[1] * other.group0()[3]) - (self.group1()[2] * other.group0()[0]) - (self.group2()[3] * other.group0()[1])),
                ((self.group0()[1] * other.group1()[0]) - (self.group1()[0] * other.group0()[1]) - (self.group1()[2] * other.group0()[3]) - (self.group2()[3] * other.group0()[2])),
                ((self.group0()[2] * other.group1()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group0()[0]]) * swizzle!(other.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[2], self.group0()[1]]) * swizzle!(other.group1(), 2, 0, 3, 1))
                + (swizzle!(self.group1(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group1()[1] * other.group1()[2])
                    - (self.group2()[0] * other.group0()[3])
                    - (self.group2()[1] * other.group0()[2])
                    - (self.group2()[3] * other.group1()[0])),
                (-(self.group1()[2] * other.group1()[0])
                    - (self.group2()[1] * other.group0()[3])
                    - (self.group2()[2] * other.group0()[0])
                    - (self.group2()[3] * other.group1()[1])),
                (-(self.group1()[2] * other.group1()[3])
                    - (self.group2()[0] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[3])
                    - (self.group2()[3] * other.group1()[2])),
                ((self.group1()[2] * other.group1()[2]) + (self.group1()[3] * other.group1()[3]) + (self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[0], self.group2()[3]]) * swizzle!(other.group1(), 3, 3, 1, 3))
                + (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group1(), 0, 1, 2, 1))
                + (swizzle!(self.group2(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[3])),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[0]]) * swizzle!(other.group0(), 0, 1, 2, 0))),
        );
    }
}
impl GeometricAntiProduct<AntiPlane> for AntiCircleRotor {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       24        0
    //    simd3        1        2        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       12       31        0
    //  no simd       29       50        0
    fn geometric_anti_product(self, other: AntiPlane) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (-(Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group1()[3] * other.group0()[0]) * -1.0),
                ((self.group1()[3] * other.group0()[1]) * -1.0),
                ((self.group1()[3] * other.group0()[2]) * -1.0),
                ((self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group2()[2] * other.group0()[1])),
                ((self.group1()[1] * other.group0()[3]) + (self.group2()[0] * other.group0()[2])),
                ((self.group1()[2] * other.group0()[3]) + (self.group2()[1] * other.group0()[0])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group2()[3] * other.group0()[0]) * -1.0),
                ((self.group2()[3] * other.group0()[1]) * -1.0),
                ((self.group2()[3] * other.group0()[2]) * -1.0),
                ((self.group2()[2] * other.group0()[2]) + (self.group2()[3] * other.group0()[3])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))
                - (swizzle!(self.group1(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))),
        );
    }
}
impl GeometricAntiProduct<AntiQuadNum> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       29        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       17       33        0
    //  no simd       29       45        0
    fn geometric_anti_product(self, other: AntiQuadNum) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (self.group0()[0] * other.group0()[2]),
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[2] * other.group0()[2]),
                0.0,
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]) * swizzle!(other.group0(), 0, 0, 0, 3))),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[1]) - (self.group1()[0] * other.group0()[3]) - (self.group2()[0] * other.group0()[0])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group1()[1] * other.group0()[3]) - (self.group2()[1] * other.group0()[0])),
                (-(self.group0()[2] * other.group0()[1]) - (self.group1()[2] * other.group0()[3]) - (self.group2()[2] * other.group0()[0])),
                ((self.group1()[3] * other.group0()[3]) + (self.group2()[3] * other.group0()[2])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group2()[0] * other.group0()[2]) - (self.group2()[0] * other.group0()[3])),
                (-(self.group2()[1] * other.group0()[2]) - (self.group2()[1] * other.group0()[3])),
                (-(self.group2()[2] * other.group0()[2]) - (self.group2()[2] * other.group0()[3])),
                (self.group1()[3] * other.group0()[1]),
            ]) - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[1]) + (self.group1()[0] * other.group0()[2])),
                ((self.group0()[1] * other.group0()[1]) + (self.group1()[1] * other.group0()[2])),
                ((self.group0()[2] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
                ((self.group2()[3] * other.group0()[0]) * -1.0),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))),
        );
    }
}
impl GeometricAntiProduct<AntiScalar> for AntiCircleRotor {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        1        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0       11        0
    fn geometric_anti_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiCircleRotor::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other[e12345]) * self.group0()),
            // e23, e31, e12, e45
            (Simd32x4::from(other[e12345]) * self.group1()),
            // e15, e25, e35, scalar
            (Simd32x4::from(other[e12345]) * self.group2()),
        );
    }
}
impl GeometricAntiProduct<AntiTripleNum> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       26        0
    //    simd4        2        4        0
    // Totals...
    // yes simd       11       30        0
    //  no simd       17       42        0
    fn geometric_anti_product(self, other: AntiTripleNum) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[2]) - (other.group0()[0] * self.group1()[0])),
                (-(self.group0()[1] * other.group0()[2]) - (other.group0()[0] * self.group1()[1])),
                (-(self.group0()[2] * other.group0()[2]) - (other.group0()[0] * self.group1()[2])),
                (other.group0()[2] * self.group2()[3] * -1.0),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[1]) - (other.group0()[0] * self.group2()[0]) - (other.group0()[2] * self.group1()[0])),
                (-(self.group0()[1] * other.group0()[1]) - (other.group0()[0] * self.group2()[1]) - (other.group0()[2] * self.group1()[1])),
                (-(self.group0()[2] * other.group0()[1]) - (other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group1()[2])),
                (other.group0()[2] * self.group1()[3]),
            ]),
            // e235, e315, e125, e5
            ((Simd32x4::from([
                (other.group0()[2] * self.group2()[0]),
                (other.group0()[2] * self.group2()[1]),
                (other.group0()[2] * self.group2()[2]),
                (other.group0()[1] * self.group1()[3]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))),
            // e1, e2, e3, e4
            ((Simd32x4::from([
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[2] * other.group0()[1]),
                (other.group0()[0] * self.group2()[3]),
            ]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))),
        );
    }
}
impl GeometricAntiProduct<Circle> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       50       66        0
    //    simd4       11       11        0
    // Totals...
    // yes simd       61       77        0
    //  no simd       94      110        0
    fn geometric_anti_product(self, other: Circle) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3])
                    + (self.group0()[1] * other.group1()[2])
                    + (other.group0()[0] * self.group1()[3])
                    + (other.group0()[0] * self.group2()[3])
                    + (other.group0()[2] * self.group1()[1])),
                ((self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (other.group0()[0] * self.group1()[2])
                    + (other.group0()[1] * self.group1()[3])
                    + (other.group0()[1] * self.group2()[3])),
                ((self.group0()[0] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[3])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (other.group0()[2] * self.group2()[3])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[1]]) * swizzle!(self.group1(), 2, 0, 1, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1]) + (self.group1()[1] * other.group1()[2]) - (self.group1()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[2] * other.group2()[0]) - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) + (self.group1()[0] * other.group1()[1]) - (self.group1()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])
                    + (other.group0()[2] * self.group2()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group2(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group2()[0] * self.group2()[3]) + (other.group2()[2] * self.group1()[1]) + (self.group2()[1] * other.group1()[2])),
                ((other.group2()[0] * self.group1()[2]) + (other.group2()[1] * self.group2()[3]) + (self.group2()[2] * other.group1()[0])),
                ((other.group2()[1] * self.group1()[0]) + (other.group2()[2] * self.group2()[3]) + (self.group2()[0] * other.group1()[1])),
                (-(self.group0()[2] * other.group1()[2]) - (other.group0()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[0], other.group0()[0]]) * swizzle!(self.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[2], other.group0()[1]]) * swizzle!(self.group1(), 2, 0, 3, 1))
                - (Simd32x4::from([self.group2()[0], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 3, 2, 0, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group1(), 1, 3, 3, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1]) + (other.group0()[1] * self.group2()[2]) + (self.group1()[3] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[0])
                    + (other.group0()[2] * self.group2()[0])
                    + (self.group1()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) + (other.group0()[0] * self.group2()[1]) + (self.group1()[3] * other.group1()[2])),
                (-(other.group2()[1] * self.group1()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (self.group2()[1] * other.group1()[1])
                    - (self.group2()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))),
        );
    }
}
impl GeometricAntiProduct<CircleRotor> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       45       61        0
    //    simd4       15       15        0
    // Totals...
    // yes simd       60       76        0
    //  no simd      105      121        0
    fn geometric_anti_product(self, other: CircleRotor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3])
                    + (self.group0()[1] * other.group1()[2])
                    + (other.group0()[0] * self.group1()[3])
                    + (other.group0()[0] * self.group2()[3])
                    + (other.group0()[2] * self.group1()[1])),
                ((self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (other.group0()[0] * self.group1()[2])
                    + (other.group0()[1] * self.group1()[3])
                    + (other.group0()[1] * self.group2()[3])),
                ((self.group0()[0] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[3])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (other.group0()[2] * self.group2()[3])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]) + (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[1]]) * swizzle!(self.group1(), 2, 0, 1, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group1()[0] * other.group2()[3]) + (self.group1()[1] * other.group1()[2]) - (self.group1()[2] * other.group1()[1])),
                (-(self.group1()[0] * other.group1()[2]) + (self.group1()[1] * other.group2()[3]) + (self.group1()[2] * other.group1()[0])),
                ((self.group1()[0] * other.group1()[1]) - (self.group1()[1] * other.group1()[0]) + (self.group1()[2] * other.group2()[3])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2]) + (other.group0()[2] * self.group2()[2])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[3]]) * swizzle!(other.group2(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group2(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group1()[1] * other.group2()[2]) + (self.group2()[0] * other.group2()[3]) + (self.group2()[1] * other.group1()[2]) + (self.group2()[3] * other.group2()[0])),
                ((self.group1()[2] * other.group2()[0]) + (self.group2()[1] * other.group2()[3]) + (self.group2()[2] * other.group1()[0]) + (self.group2()[3] * other.group2()[1])),
                ((self.group1()[0] * other.group2()[1]) + (self.group2()[0] * other.group1()[1]) + (self.group2()[2] * other.group2()[3]) + (self.group2()[3] * other.group2()[2])),
                (-(self.group0()[2] * other.group1()[2]) - (other.group0()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([self.group2()[0], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 3, 2, 0, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group1(), 1, 3, 3, 1))
                - (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[1]]) * swizzle!(self.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) + (other.group0()[1] * self.group2()[2]) + (self.group1()[3] * other.group1()[0])),
                ((self.group0()[2] * other.group2()[0]) + (other.group0()[2] * self.group2()[0]) + (self.group1()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[1]) + (other.group0()[0] * self.group2()[1]) + (self.group1()[3] * other.group1()[2])),
                (-(self.group1()[2] * other.group2()[2]) - (self.group2()[1] * other.group1()[1]) - (self.group2()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[1]]) * swizzle!(self.group1(), 0, 1, 2, 1))),
        );
    }
}
impl GeometricAntiProduct<Dipole> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       50       66        0
    //    simd4       11       11        0
    // Totals...
    // yes simd       61       77        0
    //  no simd       94      110        0
    fn geometric_anti_product(self, other: Dipole) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[0] * self.group2()[3]) - (other.group0()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group1()[3]) - (other.group0()[1] * self.group2()[3])),
                (-(other.group0()[1] * self.group1()[0]) - (other.group0()[2] * self.group1()[3]) - (other.group0()[2] * self.group2()[3])),
                ((self.group0()[0] * other.group2()[0])
                    + (self.group0()[1] * other.group2()[1])
                    + (self.group0()[2] * other.group2()[2])
                    + (other.group0()[0] * self.group2()[0])
                    + (other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 3, 2, 0, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[3]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group0()[2], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group1(), 1, 3, 3, 1))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[2]]) * swizzle!(self.group1(), 2, 0, 1, 2))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(self.group0()[1] * other.group2()[2]) + (self.group0()[2] * other.group2()[1])
                    - (other.group0()[2] * self.group2()[1])
                    - (self.group1()[1] * other.group1()[2])
                    - (self.group2()[3] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[2])
                    - (self.group0()[2] * other.group2()[0])
                    - (other.group0()[0] * self.group2()[2])
                    - (self.group1()[2] * other.group1()[0])
                    - (self.group2()[3] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[0])
                    - (other.group0()[1] * self.group2()[0])
                    - (self.group1()[0] * other.group1()[1])
                    - (self.group2()[3] * other.group1()[2])),
                (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])
                    + (other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[3]]) * swizzle!(other.group1(), 1, 2, 0, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(other.group2()[0] * self.group2()[3])
                    - (other.group2()[2] * self.group1()[1])
                    - (self.group2()[0] * other.group1()[3])
                    - (self.group2()[1] * other.group1()[2])),
                (-(other.group2()[0] * self.group1()[2])
                    - (other.group2()[1] * self.group2()[3])
                    - (self.group2()[1] * other.group1()[3])
                    - (self.group2()[2] * other.group1()[0])),
                (-(other.group2()[1] * self.group1()[0])
                    - (other.group2()[2] * self.group2()[3])
                    - (self.group2()[0] * other.group1()[1])
                    - (self.group2()[2] * other.group1()[3])),
                ((other.group2()[2] * self.group1()[2]) + (self.group2()[1] * other.group1()[1]) + (self.group2()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[0], other.group2()[0]]) * swizzle!(self.group1(), 3, 3, 1, 0))
                + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[2], other.group2()[1]]) * swizzle!(self.group1(), 2, 0, 3, 1))
                + (swizzle!(self.group2(), 2, 0, 1, 0) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1]) + (other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[2] * other.group2()[0]) - (other.group0()[0] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) + (other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0])),
                ((self.group0()[2] * other.group1()[2]) + (other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[1]]) * swizzle!(other.group1(), 0, 1, 2, 1))),
        );
    }
}
impl GeometricAntiProduct<DipoleInversion> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       57       73        0
    //    simd4       23       23        0
    // Totals...
    // yes simd       80       96        0
    //  no simd      149      165        0
    fn geometric_anti_product(self, other: DipoleInversion) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (-(self.group0()[2] * other.group3()[1])
                    - (other.group0()[0] * self.group1()[3])
                    - (other.group0()[0] * self.group2()[3])
                    - (other.group0()[2] * self.group1()[1])
                    - (self.group1()[0] * other.group2()[3])),
                (-(self.group0()[0] * other.group3()[2])
                    - (other.group0()[0] * self.group1()[2])
                    - (other.group0()[1] * self.group1()[3])
                    - (other.group0()[1] * self.group2()[3])
                    - (self.group1()[1] * other.group2()[3])),
                (-(self.group0()[1] * other.group3()[0])
                    - (other.group0()[1] * self.group1()[0])
                    - (other.group0()[2] * self.group1()[3])
                    - (other.group0()[2] * self.group2()[3])
                    - (self.group1()[2] * other.group2()[3])),
                ((other.group0()[0] * self.group2()[0])
                    + (other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[2] * other.group1()[2])),
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group1()[2], other.group3()[1], other.group2()[0]]))
                + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group3()[2], other.group1()[3], other.group1()[0], other.group2()[1]]))
                + (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[3], other.group2()[2]]))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[3]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group2()[1]) - (other.group0()[2] * self.group2()[1]) - (self.group2()[3] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[2]) - (other.group0()[0] * self.group2()[2]) - (self.group2()[3] * other.group1()[1])),
                ((self.group0()[1] * other.group2()[0]) - (other.group0()[1] * self.group2()[0]) - (self.group2()[3] * other.group1()[2])),
                (-(self.group0()[2] * other.group2()[2]) + (other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[3]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group2(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group3()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group3(), 0, 1, 2, 2))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group1()[1] * other.group2()[2])
                    - (self.group2()[0] * other.group1()[3])
                    - (self.group2()[1] * other.group1()[2])
                    - (self.group2()[1] * other.group3()[2])
                    - (self.group2()[3] * other.group2()[0])),
                (-(self.group1()[2] * other.group2()[0])
                    - (self.group2()[1] * other.group1()[3])
                    - (self.group2()[2] * other.group1()[0])
                    - (self.group2()[2] * other.group3()[0])
                    - (self.group2()[3] * other.group2()[1])),
                (-(self.group1()[0] * other.group2()[1])
                    - (self.group2()[0] * other.group1()[1])
                    - (self.group2()[0] * other.group3()[1])
                    - (self.group2()[2] * other.group1()[3])
                    - (self.group2()[3] * other.group2()[2])),
                ((self.group1()[2] * other.group2()[2])
                    + (self.group2()[0] * other.group3()[0])
                    + (self.group2()[1] * other.group1()[1])
                    + (self.group2()[1] * other.group3()[1])
                    + (self.group2()[2] * other.group1()[2])
                    + (self.group2()[2] * other.group3()[2])),
            ]) - (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))
                + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]) * swizzle!(other.group3(), 1, 2, 0, 3))
                + (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group2(), 0, 1, 2, 1))
                + (swizzle!(self.group2(), 2, 0, 1, 0) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group2()[2]) + (other.group0()[1] * self.group2()[2]) - (self.group2()[0] * other.group2()[3])
                    + (self.group2()[3] * other.group3()[0])),
                ((self.group0()[1] * other.group3()[3]) + (self.group0()[2] * other.group2()[0]) + (other.group0()[2] * self.group2()[0]) - (self.group2()[1] * other.group2()[3])
                    + (self.group2()[3] * other.group3()[1])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[2] * other.group3()[3]) + (other.group0()[0] * self.group2()[1]) - (self.group2()[2] * other.group2()[3])
                    + (self.group2()[3] * other.group3()[2])),
                ((self.group0()[1] * other.group1()[1]) - (self.group0()[1] * other.group3()[1]) + (self.group0()[2] * other.group1()[2]) - (self.group0()[2] * other.group3()[2])
                    + (other.group0()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[3]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group2(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[0]]) * swizzle!(other.group1(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group0()[0]]) * swizzle!(self.group1(), 0, 1, 0, 0))
                + (Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[3], other.group0()[1]]) * swizzle!(self.group1(), 1, 2, 2, 1))),
        );
    }
}
impl GeometricAntiProduct<DualNum321> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       17        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        5       20        0
    //  no simd        8       29        0
    fn geometric_anti_product(self, other: DualNum321) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((Simd32x4::from(other.group0()[0])
                * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other.group0()[1] * self.group1()[0]),
                (other.group0()[1] * self.group1()[1]),
                (other.group0()[1] * self.group1()[2]),
                (-(other.group0()[0] * self.group2()[3]) + (other.group0()[1] * self.group1()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group2()[0])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[1])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group2()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group1()[0] * -1.0),
                (other.group0()[0] * self.group1()[1] * -1.0),
                (other.group0()[0] * self.group1()[2] * -1.0),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<DualNum4> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        7       25        0
    fn geometric_anti_product(self, other: DualNum4) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[2])),
                (other.group0()[1] * self.group2()[3]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[1] * self.group2()[0]),
                (other.group0()[1] * self.group2()[1]),
                (other.group0()[1] * self.group2()[2]),
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[0] * self.group2()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group2()[0] * -1.0),
                (other.group0()[0] * self.group2()[1] * -1.0),
                (other.group0()[0] * self.group2()[2] * -1.0),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<DualNum5> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       18        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        7       19        0
    //  no simd        7       22        0
    fn geometric_anti_product(self, other: DualNum5) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group1()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group2()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group2()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group2()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[0] * self.group2()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<FlatPoint> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       28        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       20       32        0
    //  no simd       32       44        0
    fn geometric_anti_product(self, other: FlatPoint) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]))])
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group1()[1] * other.group0()[2]) - (self.group2()[0] * other.group0()[3]) - (self.group2()[3] * other.group0()[0])),
                (-(self.group1()[2] * other.group0()[0]) - (self.group2()[1] * other.group0()[3]) - (self.group2()[3] * other.group0()[1])),
                (-(self.group1()[0] * other.group0()[1]) - (self.group2()[2] * other.group0()[3]) - (self.group2()[3] * other.group0()[2])),
                (self.group1()[2] * other.group0()[2]),
            ]) + (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (self.group1()[0] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[3])),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<Flector> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       35       48        0
    //    simd4       10       10        0
    // Totals...
    // yes simd       45       58        0
    //  no simd       75       88        0
    fn geometric_anti_product(self, other: Flector) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other.group0()[3])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]) - (self.group1()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group1(), 0, 1, 2, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group1()[1] * other.group0()[2])
                    - (self.group2()[0] * other.group0()[3])
                    - (self.group2()[1] * other.group1()[2])
                    - (self.group2()[3] * other.group0()[0])),
                (-(self.group1()[2] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[3])
                    - (self.group2()[2] * other.group1()[0])
                    - (self.group2()[3] * other.group0()[1])),
                (-(self.group1()[0] * other.group0()[1])
                    - (self.group2()[0] * other.group1()[1])
                    - (self.group2()[2] * other.group0()[3])
                    - (self.group2()[3] * other.group0()[2])),
                ((self.group1()[2] * other.group0()[2]) + (self.group2()[0] * other.group1()[0]) + (self.group2()[1] * other.group1()[1]) + (self.group2()[2] * other.group1()[2])),
            ]) - (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))
                + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                + (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])
                    + (self.group1()[0] * other.group0()[3])
                    + (self.group1()[1] * other.group1()[2])
                    + (self.group2()[3] * other.group1()[0])),
                (-(self.group0()[0] * other.group0()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group0()[0])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group1()[2] * other.group1()[0])
                    + (self.group2()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group1()[0] * other.group1()[1])
                    + (self.group1()[2] * other.group0()[3])
                    + (self.group2()[3] * other.group1()[2])),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<Line> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       50       66        0
    fn geometric_anti_product(self, other: Line) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) + (other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[1])),
                (-(self.group0()[0] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[0])
                    + (other.group0()[0] * self.group1()[2])
                    + (other.group0()[1] * self.group2()[3])
                    - (other.group0()[2] * self.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) - (other.group0()[0] * self.group1()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group2()[3])),
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1]) - (other.group1()[0] * self.group1()[3])
                    + (other.group1()[0] * self.group2()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group2()[0]) + (other.group1()[0] * self.group1()[2]) - (other.group1()[1] * self.group1()[3])
                    + (other.group1()[1] * self.group2()[3])
                    - (other.group1()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    - (other.group1()[2] * self.group1()[3])
                    + (other.group1()[2] * self.group2()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) + (other.group0()[0] * self.group1()[3])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0]) + (other.group0()[1] * self.group1()[3])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (other.group0()[2] * self.group1()[3])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Motor> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       44       60        0
    //    simd4        7        7        0
    // Totals...
    // yes simd       51       67        0
    //  no simd       72       88        0
    fn geometric_anti_product(self, other: Motor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[2] * other.group0()[0]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group2()[3]]) * swizzle!(other.group0(), 3, 3, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])
                    + (self.group2()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group1()[0]) - (self.group1()[0] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[0])
                    + (self.group2()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[2] * other.group1()[3]) - (self.group1()[1] * other.group0()[0])
                    + (self.group1()[2] * other.group0()[3])
                    + (self.group2()[3] * other.group0()[2])),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (swizzle!(self.group1(), 0, 1, 0, 3) * swizzle!(other.group0(), 3, 3, 1, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group1()[0] * other.group1()[3]) + (self.group1()[1] * other.group1()[2]) - (self.group1()[2] * other.group1()[1]) - (self.group1()[3] * other.group1()[0])
                    + (self.group2()[0] * other.group0()[3])
                    + (self.group2()[1] * other.group0()[2])
                    + (self.group2()[3] * other.group1()[0])),
                (-(self.group1()[0] * other.group1()[2]) + (self.group1()[1] * other.group1()[3]) + (self.group1()[2] * other.group1()[0])
                    - (self.group1()[3] * other.group1()[1])
                    + (self.group2()[1] * other.group0()[3])
                    + (self.group2()[2] * other.group0()[0])
                    + (self.group2()[3] * other.group1()[1])),
                ((self.group1()[0] * other.group1()[1]) - (self.group1()[1] * other.group1()[0]) + (self.group1()[2] * other.group1()[3]) - (self.group1()[3] * other.group1()[2])
                    + (self.group2()[0] * other.group0()[1])
                    + (self.group2()[2] * other.group0()[3])
                    + (self.group2()[3] * other.group1()[2])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) + (self.group1()[3] * other.group0()[0])),
                ((self.group0()[2] * other.group1()[0]) + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group1()[3]) + (self.group1()[3] * other.group0()[2])),
                (-(self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group2()[3]]) * swizzle!(other.group1(), 3, 3, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<MultiVector> for AntiCircleRotor {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       98      124        0
    //    simd2        1        1        0
    //    simd3       36       38        0
    //    simd4       28       28        0
    // Totals...
    // yes simd      163      191        0
    //  no simd      320      352        0
    fn geometric_anti_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                ((other.group0()[1] * self.group2()[3])
                    - (self.group0()[0] * other.group8()[0])
                    - (self.group0()[1] * other.group8()[1])
                    - (self.group0()[2] * other.group8()[2])
                    - (other.group7()[0] * self.group2()[0])
                    - (other.group7()[1] * self.group2()[1])
                    - (other.group7()[2] * self.group2()[2])
                    - (self.group1()[0] * other.group6()[0])
                    - (self.group1()[1] * other.group6()[1])
                    - (self.group1()[2] * other.group6()[2])),
                (-(other.group0()[0] * self.group2()[3])
                    + (self.group0()[0] * other.group3()[0])
                    + (self.group0()[1] * other.group3()[1])
                    + (self.group0()[2] * other.group3()[2])
                    + (other.group4()[0] * self.group2()[0])
                    + (other.group4()[1] * self.group2()[1])
                    + (other.group4()[2] * self.group2()[2])
                    + (other.group5()[0] * self.group1()[0])
                    + (other.group5()[1] * self.group1()[1])
                    + (other.group5()[2] * self.group1()[2])),
            ]) - (Simd32x2::from(self.group1()[3]) * Simd32x2::from([other.group6()[3], other.group3()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group9()[3]) + (self.group0()[1] * other.group3()[2]) - (self.group0()[2] * other.group3()[1])
                    + (other.group4()[1] * self.group2()[2])
                    + (self.group2()[3] * other.group9()[0])),
                (-(self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group9()[3])
                    + (self.group0()[2] * other.group3()[0])
                    + (other.group4()[2] * self.group2()[0])
                    + (self.group2()[3] * other.group9()[1])),
                ((self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group9()[3])
                    + (other.group4()[0] * self.group2()[1])
                    + (self.group2()[3] * other.group9()[2])),
                ((self.group0()[0] * other.group5()[0]) + (self.group0()[1] * other.group5()[1]) - (self.group0()[1] * other.group9()[1]) + (self.group0()[2] * other.group5()[2])
                    - (self.group0()[2] * other.group9()[2])),
            ]) - (Simd32x4::from(other[e45]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                - (Simd32x4::from([other.group4()[2], other.group4()[0], other.group4()[1], other[e45]]) * swizzle!(self.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other.group4()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group9(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group9()[1], other.group4()[1]]) * swizzle!(self.group1(), 0, 1, 0, 1))
                + (Simd32x4::from([other.group9()[2], other.group9()[0], other.group3()[3], other.group4()[2]]) * swizzle!(self.group1(), 1, 2, 2, 2))),
            // e5
            ((other.group5()[0] * self.group2()[0])
                + (other.group5()[1] * self.group2()[1])
                + (other.group5()[2] * self.group2()[2])
                + (self.group1()[0] * other.group3()[0])
                + (self.group1()[1] * other.group3()[1])
                + (self.group1()[2] * other.group3()[2])
                + (self.group1()[3] * other.group9()[3])
                + (self.group2()[0] * other.group9()[0])
                + (self.group2()[1] * other.group9()[1])
                + (self.group2()[2] * other.group9()[2])
                - (self.group2()[3] * other.group9()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                (-(other.group8()[0] * self.group1()[3])
                    - (other.group8()[1] * self.group1()[2])
                    - (self.group2()[1] * other.group1()[2])
                    - (self.group2()[2] * other.group6()[1])),
                (-(other.group8()[1] * self.group1()[3])
                    - (other.group8()[2] * self.group1()[0])
                    - (self.group2()[1] * other.group6()[3])
                    - (self.group2()[2] * other.group1()[0])),
                (-(other.group8()[0] * self.group1()[1])
                    - (other.group8()[2] * self.group1()[3])
                    - (self.group2()[1] * other.group6()[0])
                    - (self.group2()[2] * other.group6()[3])),
                (-(self.group0()[0] * other.group8()[0]) - (self.group0()[1] * other.group8()[1]) - (self.group0()[2] * other.group8()[2])
                    + (self.group1()[2] * other.group1()[2])),
            ]) + (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                + (Simd32x4::from([other.group8()[0], other.group8()[1], other.group8()[2], other.group7()[0]]) * swizzle!(self.group2(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group8()[2], other.group8()[0], other.group8()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[1], other.group6()[0], other.group1()[0], other.group7()[2]]) * swizzle!(self.group2(), 2, 2, 1, 2))
                + (Simd32x4::from([other.group6()[2], other.group1()[2], other.group6()[1], other.group7()[1]]) * swizzle!(self.group2(), 1, 0, 0, 1))
                - (Simd32x4::from([other.group6()[3], other.group6()[2], other.group1()[1], other.group6()[3]]) * swizzle!(self.group2(), 0, 0, 0, 3))
                + (Simd32x4::from([other[e1], other[e1], other[e1], other.group1()[1]]) * swizzle!(self.group1(), 0, 1, 2, 1))),
            // e41, e42, e43
            ((Simd32x3::from(other.group0()[1]) * self.group0())
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from([self.group1()[1], self.group2()[3], self.group2()[3]]) * swizzle!(other.group7(), 2, 1, 2))
                - (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]) * swizzle!(other.group7(), 1, 2, 0))
                + (Simd32x3::from([self.group1()[3], self.group1()[2], self.group1()[0]]) * swizzle!(other.group7(), 0, 0, 1))
                + (Simd32x3::from([self.group2()[3], self.group1()[3], self.group1()[3]]) * other.group7())
                - (Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group1()[2], other.group1()[0], other.group6()[1]]) * swizzle!(self.group0(), 1, 2, 0))
                - (Simd32x3::from([other.group6()[1], other.group6()[2], other.group6()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group6()[2], other.group6()[0], other.group6()[3]]) * swizzle!(self.group0(), 1, 2, 2))
                + (Simd32x3::from([other.group6()[3], other.group6()[3], other.group1()[1]]) * swizzle!(self.group0(), 0, 1, 0))),
            // e23, e31, e12
            (Simd32x3::from([
                ((self.group1()[1] * other.group6()[2]) - (self.group1()[2] * other.group6()[1])),
                (-(self.group1()[0] * other.group6()[2]) + (self.group1()[2] * other.group6()[0])),
                ((self.group1()[0] * other.group6()[1]) - (self.group1()[1] * other.group6()[0])),
            ]) + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                + (Simd32x3::from([other.group8()[2], other.group8()[0], other[e1]]) * swizzle!(self.group0(), 1, 2, 2))
                + (Simd32x3::from([self.group2()[1], self.group2()[2], self.group2()[0]]) * swizzle!(other.group7(), 2, 0, 1))
                - (Simd32x3::from([self.group2()[2], self.group2()[0], self.group2()[1]]) * swizzle!(other.group7(), 1, 2, 0))
                + (Simd32x3::from([other[e1], other[e1], other.group8()[1]]) * swizzle!(self.group0(), 0, 1, 0))
                - (swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group8(), 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group4()[2] * self.group2()[1]) - (other.group5()[0] * self.group2()[3]) - (self.group1()[3] * other.group9()[0]) - (self.group2()[0] * other[e45])),
                (-(other.group4()[0] * self.group2()[2]) - (other.group5()[1] * self.group2()[3]) - (self.group1()[3] * other.group9()[1]) - (self.group2()[1] * other[e45])),
                (-(other.group4()[1] * self.group2()[0]) - (other.group5()[2] * self.group2()[3]) - (self.group1()[3] * other.group9()[2]) - (self.group2()[2] * other[e45])),
                (-(self.group0()[1] * other.group3()[1]) - (self.group0()[2] * other.group3()[2])
                    + (other.group4()[1] * self.group2()[1])
                    + (other.group4()[2] * self.group2()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group9()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group9(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group3(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group3(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group4()[1], other.group4()[2], other.group4()[0], other.group4()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group5()[1], other.group5()[2], other.group5()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group9()[2]]) * swizzle!(self.group1(), 1, 2, 0, 2))),
            // e423, e431, e412
            (-(Simd32x3::from(other.group0()[0]) * self.group0())
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group3()[3], other.group5()[2], other.group9()[1]]))
                + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group9()[2], other.group3()[3], other.group5()[0]]))
                + (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group5()[1], other.group9()[0], other.group3()[3]]))
                - (Simd32x3::from(other[e45]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from([other.group5()[2], other.group9()[2], other.group5()[1]]) * swizzle!(self.group0(), 1, 0, 0))
                - (Simd32x3::from([self.group1()[1], self.group2()[3], self.group2()[3]]) * swizzle!(other.group4(), 2, 1, 2))
                + (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]) * swizzle!(other.group4(), 1, 2, 0))
                - (Simd32x3::from([self.group1()[3], self.group1()[2], self.group1()[0]]) * swizzle!(other.group4(), 0, 0, 1))
                - (Simd32x3::from([self.group2()[3], self.group1()[3], self.group1()[3]]) * other.group4())
                - (Simd32x3::from([other.group9()[1], other.group5()[0], other.group9()[0]]) * swizzle!(self.group0(), 2, 2, 1))),
            // e235, e315, e125
            (Simd32x3::from([
                (-(self.group1()[1] * other.group3()[2]) + (self.group1()[2] * other.group3()[1]) - (self.group2()[1] * other.group9()[2])
                    + (self.group2()[2] * other.group9()[1])),
                ((self.group1()[0] * other.group3()[2]) - (self.group1()[2] * other.group3()[0]) + (self.group2()[0] * other.group9()[2]) - (self.group2()[2] * other.group9()[0])),
                (-(self.group1()[0] * other.group3()[1]) + (self.group1()[1] * other.group3()[0]) - (self.group2()[0] * other.group9()[1])
                    + (self.group2()[1] * other.group9()[0])),
            ]) - (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                - (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                - (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                - (Simd32x3::from(other.group9()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from([self.group2()[1], self.group2()[2], self.group2()[0]]) * swizzle!(other.group5(), 2, 0, 1))
                + (Simd32x3::from([self.group2()[2], self.group2()[0], self.group2()[1]]) * swizzle!(other.group5(), 1, 2, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group8()[2]) - (self.group0()[2] * other.group8()[1]) + (self.group1()[3] * other.group6()[0])),
                (-(self.group0()[0] * other.group8()[2]) + (self.group0()[2] * other.group8()[0]) + (self.group1()[3] * other.group6()[1])),
                ((self.group0()[0] * other.group8()[1]) - (self.group0()[1] * other.group8()[0]) + (self.group1()[3] * other.group6()[2])),
                (-(other.group8()[2] * self.group1()[2]) - (self.group1()[3] * other[e1]) + (self.group2()[2] * other.group1()[2])),
            ]) + (Simd32x4::from(other[e1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))
                + (Simd32x4::from([other.group7()[1], other.group7()[2], other.group7()[0], other.group1()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group7()[2], other.group7()[0], other.group7()[1], other.group6()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))
                - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group6()[2]]) * swizzle!(self.group2(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group6()[3], other.group8()[1]]) * swizzle!(self.group1(), 1, 2, 2, 1))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group6()[1]]) * swizzle!(self.group2(), 0, 1, 2, 1))
                - (Simd32x4::from([other.group6()[3], other.group6()[3], other.group1()[1], other.group8()[0]]) * swizzle!(self.group1(), 0, 1, 0, 0))),
            // e1234
            (-(self.group0()[0] * other.group1()[0])
                - (self.group0()[0] * other.group6()[0])
                - (self.group0()[1] * other.group1()[1])
                - (self.group0()[1] * other.group6()[1])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[2] * other.group6()[2])
                - (other.group7()[0] * self.group1()[0])
                - (other.group7()[1] * self.group1()[1])
                - (other.group7()[2] * self.group1()[2])
                + (self.group1()[3] * other.group1()[3])
                + (self.group2()[3] * other.group1()[3])),
        );
    }
}
impl GeometricAntiProduct<Plane> for AntiCircleRotor {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd3        1        2        0
    //    simd4        8       10        0
    // Totals...
    // yes simd        9       15        0
    //  no simd       35       49        0
    fn geometric_anti_product(self, other: Plane) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (-(Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([0.0, 0.0, 0.0, ((self.group1()[2] * other.group0()[2]) * -1.0)])
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e235, e315, e125, e4
            ((Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[2]])
                * swizzle!(other.group0(), 1, 2, 0, 2)
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[1]]) * swizzle!(other.group0(), 2, 0, 1, 1))),
            // e1, e2, e3, e5
            (Simd32x4::from([0.0, 0.0, 0.0, (self.group2()[2] * other.group0()[2])])
                + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                + (swizzle!(self.group2(), 3, 3, 3, 1) * swizzle!(other.group0(), 0, 1, 2, 1))),
        );
    }
}
impl GeometricAntiProduct<QuadNum> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       28        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       12       34        0
    //  no simd       30       52        0
    fn geometric_anti_product(self, other: QuadNum) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[0] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group1()[1] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[2] * other.group0()[0])),
                ((self.group1()[3] * other.group0()[2]) * -1.0),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]) * swizzle!(other.group0(), 2, 2, 2, 3))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group2()[0] * other.group0()[0])),
                ((self.group1()[1] * other.group0()[3]) + (self.group2()[1] * other.group0()[0])),
                ((self.group1()[2] * other.group0()[3]) + (self.group2()[2] * other.group0()[0])),
                ((self.group2()[3] * other.group0()[2]) * -1.0),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]) * swizzle!(other.group0(), 1, 1, 1, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group2()[0] * other.group0()[2]) * -1.0),
                ((self.group2()[1] * other.group0()[2]) * -1.0),
                ((self.group2()[2] * other.group0()[2]) * -1.0),
                0.0,
            ]) + (swizzle!(other.group0(), 1, 1, 1, 0) * self.group1())
                + (swizzle!(other.group0(), 3, 3, 3, 0) * self.group2())),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group2()[0] * other.group0()[0]) * -1.0),
                ((self.group2()[1] * other.group0()[0]) * -1.0),
                ((self.group2()[2] * other.group0()[0]) * -1.0),
                0.0,
            ]) + (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))
                - (swizzle!(other.group0(), 2, 2, 2, 1) * self.group1())),
        );
    }
}
impl GeometricAntiProduct<RoundPoint> for AntiCircleRotor {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       18        0
    //    simd3        2        3        0
    //    simd4        7        7        0
    // Totals...
    // yes simd       18       28        0
    //  no simd       43       55        0
    fn geometric_anti_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[0] * other[e2]) - (self.group1()[3] * other.group0()[0])),
                ((self.group0()[1] * other[e2]) - (self.group1()[3] * other.group0()[1])),
                ((self.group0()[2] * other[e2]) - (self.group1()[3] * other.group0()[2])),
                ((self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]))])
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other[e2], other[e2], other[e2], other.group0()[3]]) * self.group1())
                + (swizzle!(self.group2(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group2()[0] * other.group0()[3]) - (self.group2()[3] * other.group0()[0])),
                (-(self.group2()[1] * other.group0()[3]) - (self.group2()[3] * other.group0()[1])),
                (-(self.group2()[2] * other.group0()[3]) - (self.group2()[3] * other.group0()[2])),
                ((self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other[e2]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other[e2]]) * swizzle!(self.group1(), 1, 2, 0, 3))),
        );
    }
}
impl GeometricAntiProduct<Scalar> for AntiCircleRotor {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        2        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0       22        0
    fn geometric_anti_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return CircleRotor::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other[scalar]) * self.group0() * Simd32x3::from(-1.0)),
            // e415, e425, e435, e321
            (Simd32x4::from(other[scalar]) * self.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e235, e315, e125, e12345
            (Simd32x4::from(other[scalar]) * self.group2() * Simd32x4::from(-1.0)),
        );
    }
}
impl GeometricAntiProduct<Sphere> for AntiCircleRotor {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2       10        0
    //    simd3        2        3        0
    //    simd4        8       10        0
    // Totals...
    // yes simd       12       23        0
    //  no simd       40       59        0
    fn geometric_anti_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (-(Simd32x3::from(other[e4315]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0))),
            // e415, e425, e435, e321
            (-Simd32x4::from([
                (self.group2()[0] * other[e4315]),
                (self.group2()[1] * other[e4315]),
                (self.group2()[2] * other[e4315]),
                (self.group1()[2] * other.group0()[2]),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e235, e315, e125, e4
            (Simd32x4::from([
                (self.group2()[2] * other.group0()[1]),
                (self.group2()[0] * other.group0()[2]),
                (self.group2()[1] * other.group0()[0]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other[e4315]) - (self.group2()[3] * other[e4315])),
            ]) - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[1]]) * swizzle!(other.group0(), 2, 0, 1, 1))),
            // e1, e2, e3, e5
            ((Simd32x4::from([other[e4315], other[e4315], other[e4315], other.group0()[2]]) * swizzle!(self.group2(), 0, 1, 2, 2) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                + (swizzle!(self.group2(), 3, 3, 3, 1) * swizzle!(other.group0(), 0, 1, 2, 1))),
        );
    }
}
impl GeometricAntiProduct<TripleNum> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       21        0
    //    simd4        2        3        0
    // Totals...
    // yes simd       11       24        0
    //  no simd       17       33        0
    fn geometric_anti_product(self, other: TripleNum) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[2]) + (other.group0()[0] * self.group1()[0])),
                ((self.group0()[1] * other.group0()[2]) + (other.group0()[0] * self.group1()[1])),
                ((self.group0()[2] * other.group0()[2]) + (other.group0()[0] * self.group1()[2])),
                (other.group0()[2] * self.group2()[3]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[1]) + (other.group0()[0] * self.group2()[0]) + (other.group0()[2] * self.group1()[0])),
                ((self.group0()[1] * other.group0()[1]) + (other.group0()[0] * self.group2()[1]) + (other.group0()[2] * self.group1()[1])),
                ((self.group0()[2] * other.group0()[1]) + (other.group0()[0] * self.group2()[2]) + (other.group0()[2] * self.group1()[2])),
                (other.group0()[2] * self.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            ((Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group0()[0]]) * self.group1())
                + (Simd32x4::from([other.group0()[2], other.group0()[2], other.group0()[2], other.group0()[0]]) * self.group2())),
            // e4235, e4315, e4125, e3215
            (-Simd32x4::from([
                (other.group0()[0] * self.group2()[0]),
                (other.group0()[0] * self.group2()[1]),
                (other.group0()[0] * self.group2()[2]),
                (other.group0()[1] * self.group1()[3]),
            ]) + (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))),
        );
    }
}
impl GeometricAntiProduct<VersorEven> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       72        0
    //    simd4       26       26        0
    // Totals...
    // yes simd       82       98        0
    //  no simd      160      176        0
    fn geometric_anti_product(self, other: VersorEven) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) + (self.group0()[1] * other.group3()[2]) - (self.group0()[2] * other.group3()[1])
                    + (self.group1()[0] * other.group3()[3])
                    + (self.group1()[1] * other.group0()[2])
                    + (self.group1()[3] * other.group0()[0])
                    + (self.group2()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group0()[2] * other.group3()[0])
                    + (self.group1()[1] * other.group3()[3])
                    + (self.group1()[2] * other.group0()[0])
                    + (self.group1()[3] * other.group0()[1])
                    + (self.group2()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group1()[0] * other.group0()[1])
                    + (self.group1()[2] * other.group3()[3])
                    + (self.group1()[3] * other.group0()[2])
                    + (self.group2()[3] * other.group0()[2])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[1]]) * swizzle!(self.group1(), 2, 0, 1, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group2()[2]) - (self.group1()[3] * other.group3()[0]) - (self.group2()[2] * other.group0()[1])),
                ((self.group0()[1] * other.group2()[3]) + (self.group0()[2] * other.group2()[0]) - (self.group1()[3] * other.group3()[1]) - (self.group2()[0] * other.group0()[2])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[2] * other.group2()[3]) - (self.group1()[3] * other.group3()[2]) - (self.group2()[1] * other.group0()[0])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])
                    + (self.group1()[2] * other.group3()[2])
                    + (self.group1()[3] * other.group0()[3])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[3]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group3()[3], other.group0()[1]]) * swizzle!(self.group2(), 1, 2, 2, 1))
                + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group3()[0]]) * swizzle!(self.group1(), 0, 1, 0, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]) * swizzle!(self.group2(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group3()[1]]) * swizzle!(self.group1(), 1, 2, 2, 1))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 0, 1, 0, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group1()[1] * other.group2()[2]) + (self.group2()[1] * other.group1()[2]) + (self.group2()[2] * other.group3()[1]) + (self.group2()[3] * other.group2()[0])),
                ((self.group1()[2] * other.group2()[0]) + (self.group2()[1] * other.group0()[3]) + (self.group2()[2] * other.group1()[0]) + (self.group2()[3] * other.group2()[1])),
                ((self.group1()[2] * other.group2()[3]) + (self.group2()[1] * other.group3()[0]) + (self.group2()[2] * other.group0()[3]) + (self.group2()[3] * other.group2()[2])),
                (-(self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])
                    - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group2()[0], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 3, 2, 0, 0))
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group3(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group1(), 1, 3, 3, 1))
                + (Simd32x4::from([other.group0()[3], other.group3()[2], other.group1()[1], other.group3()[3]]) * swizzle!(self.group2(), 0, 0, 0, 3))
                - (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[1]]) * swizzle!(self.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[1], other.group3()[3]]) * swizzle!(self.group1(), 0, 1, 0, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) + (self.group1()[3] * other.group1()[0])),
                ((self.group0()[2] * other.group2()[0]) + (self.group1()[3] * other.group1()[1])),
                ((self.group0()[2] * other.group2()[3]) + (self.group1()[3] * other.group1()[2])),
                (-(self.group1()[3] * other.group2()[3]) + (self.group2()[2] * other.group3()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group2()[3]]) * swizzle!(other.group2(), 3, 3, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[1]]) * swizzle!(self.group2(), 2, 0, 1, 1))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group3()[3], other.group1()[1]]) * swizzle!(self.group2(), 1, 2, 2, 1))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group2()[1]]) * swizzle!(self.group1(), 0, 1, 0, 1))
                - (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[2]]) * swizzle!(self.group2(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[3], other.group2()[2]]) * swizzle!(self.group1(), 1, 2, 2, 2))
                - (Simd32x4::from([other.group3()[3], other.group3()[3], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 0, 1, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<VersorOdd> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       60       76        0
    //    simd4       25       25        0
    // Totals...
    // yes simd       85      101        0
    //  no simd      160      176        0
    fn geometric_anti_product(self, other: VersorOdd) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (-(self.group0()[2] * other.group3()[1])
                    - (self.group1()[0] * other.group2()[3])
                    - (self.group1()[1] * other.group0()[2])
                    - (self.group1()[3] * other.group0()[0])
                    - (self.group2()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group3()[2])
                    - (self.group1()[1] * other.group2()[3])
                    - (self.group1()[2] * other.group0()[0])
                    - (self.group1()[3] * other.group0()[1])
                    - (self.group2()[3] * other.group0()[1])),
                (-(self.group0()[1] * other.group3()[0])
                    - (self.group1()[0] * other.group0()[1])
                    - (self.group1()[2] * other.group2()[3])
                    - (self.group1()[3] * other.group0()[2])
                    - (self.group2()[3] * other.group0()[2])),
                ((self.group1()[1] * other.group1()[1])
                    + (self.group1()[2] * other.group1()[2])
                    + (self.group2()[0] * other.group0()[0])
                    + (self.group2()[1] * other.group0()[1])
                    + (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group1()[2], other.group3()[1], other.group2()[0]]))
                + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group3()[2], other.group1()[3], other.group1()[0], other.group2()[1]]))
                + (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[3], other.group2()[2]]))
                - (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[3]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group2()[1]) - (self.group1()[3] * other.group3()[0]) - (self.group2()[1] * other.group0()[2]) - (self.group2()[3] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[2]) - (self.group1()[3] * other.group3()[1]) - (self.group2()[2] * other.group0()[0]) - (self.group2()[3] * other.group1()[1])),
                ((self.group0()[1] * other.group2()[0]) - (self.group1()[3] * other.group3()[2]) - (self.group2()[0] * other.group0()[1]) - (self.group2()[3] * other.group1()[2])),
                (-(self.group0()[2] * other.group2()[2])
                    + (self.group2()[1] * other.group0()[1])
                    + (self.group2()[2] * other.group0()[2])
                    + (self.group2()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group2(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group3()[1]]) * swizzle!(self.group1(), 0, 1, 0, 1))
                + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group3()[2]]) * swizzle!(self.group1(), 1, 2, 2, 2))
                + (swizzle!(self.group2(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group1()[1] * other.group2()[2])
                    - (self.group2()[0] * other.group0()[3])
                    - (self.group2()[0] * other.group1()[3])
                    - (self.group2()[1] * other.group1()[2])
                    - (self.group2()[1] * other.group3()[2])
                    - (self.group2()[3] * other.group2()[0])),
                (-(self.group1()[2] * other.group2()[0])
                    - (self.group2()[1] * other.group0()[3])
                    - (self.group2()[1] * other.group1()[3])
                    - (self.group2()[2] * other.group1()[0])
                    - (self.group2()[2] * other.group3()[0])
                    - (self.group2()[3] * other.group2()[1])),
                (-(self.group1()[0] * other.group2()[1])
                    - (self.group2()[0] * other.group1()[1])
                    - (self.group2()[0] * other.group3()[1])
                    - (self.group2()[2] * other.group0()[3])
                    - (self.group2()[2] * other.group1()[3])
                    - (self.group2()[3] * other.group2()[2])),
                ((self.group1()[2] * other.group2()[2])
                    + (self.group2()[0] * other.group3()[0])
                    + (self.group2()[1] * other.group1()[1])
                    + (self.group2()[1] * other.group3()[1])
                    + (self.group2()[2] * other.group1()[2])
                    + (self.group2()[2] * other.group3()[2])),
            ]) - (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))
                + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]) * swizzle!(other.group3(), 1, 2, 0, 3))
                + (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group2(), 0, 1, 2, 1))
                + (swizzle!(self.group2(), 2, 0, 1, 0) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group2()[2]) - (self.group2()[1] * other.group0()[2]) + (self.group2()[3] * other.group3()[0])),
                ((self.group0()[1] * other.group3()[3]) + (self.group0()[2] * other.group2()[0]) - (self.group2()[2] * other.group0()[0]) + (self.group2()[3] * other.group3()[1])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[2] * other.group3()[3]) - (self.group2()[2] * other.group2()[3]) + (self.group2()[3] * other.group3()[2])),
                ((self.group0()[1] * other.group1()[1]) - (self.group0()[1] * other.group3()[1]) + (self.group0()[2] * other.group1()[2]) - (self.group0()[2] * other.group3()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[3]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[0]]) * swizzle!(other.group1(), 0, 1, 2, 0))
                + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[2]]) * swizzle!(other.group0(), 1, 2, 0, 2))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group0()[0]]) * swizzle!(self.group1(), 0, 1, 0, 0))
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[1], other.group2()[3]]) * swizzle!(self.group2(), 0, 1, 0, 3))
                + (Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[3], other.group0()[1]]) * swizzle!(self.group1(), 1, 2, 2, 1))),
        );
    }
}
impl GeometricAntiProduct<VersorRoundPoint> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       34        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       26       42        0
    //  no simd       50       66        0
    fn geometric_anti_product(self, other: VersorRoundPoint) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((other.group1()[1] * self.group0()[0]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (self.group1()[0] * other.group0()[3])),
                ((other.group1()[1] * self.group0()[1]) - (self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3])),
                ((other.group1()[1] * self.group0()[2]) + (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[3])),
                (other.group1()[1] * self.group2()[3]),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group1()[0] * self.group0()[0]) - (self.group1()[3] * other.group0()[0])),
                ((other.group1()[0] * self.group0()[1]) - (self.group1()[3] * other.group0()[1])),
                ((other.group1()[0] * self.group0()[2]) - (self.group1()[3] * other.group0()[2])),
                ((self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group1()[1]) * self.group1())
                + (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (self.group2()[2] * other.group0()[1]),
                (self.group2()[0] * other.group0()[2]),
                (self.group2()[1] * other.group0()[0]),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[0], other.group1()[0], other.group0()[3]]) * self.group1())
                + (Simd32x4::from([other.group1()[1], other.group1()[1], other.group1()[1], other.group0()[3]]) * self.group2())
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group2()[0] * other.group0()[3]) - (self.group2()[3] * other.group0()[0])),
                (-(self.group2()[1] * other.group0()[3]) - (self.group2()[3] * other.group0()[1])),
                (-(self.group2()[2] * other.group0()[3]) - (self.group2()[3] * other.group0()[2])),
                ((self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group1()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 3))),
        );
    }
}
impl GeometricAntiProduct<VersorSphere> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       22       39        0
    //    simd4        7        8        0
    // Totals...
    // yes simd       29       47        0
    //  no simd       50       71        0
    fn geometric_anti_product(self, other: VersorSphere) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(other.group1()[0] * self.group1()[0]) - (other.group1()[1] * self.group0()[0]) + (self.group0()[1] * other.group0()[2])
                    - (self.group0()[2] * other.group0()[1])),
                (-(other.group1()[0] * self.group1()[1]) - (other.group1()[1] * self.group0()[1]) - (self.group0()[0] * other.group0()[2])
                    + (self.group0()[2] * other.group0()[0])),
                (-(other.group1()[0] * self.group1()[2]) - (other.group1()[1] * self.group0()[2]) + (self.group0()[0] * other.group0()[1])
                    - (self.group0()[1] * other.group0()[0])),
                (other.group1()[1] * self.group2()[3] * -1.0),
            ]),
            // e415, e425, e435, e321
            ((Simd32x4::from([
                (other.group1()[0] * self.group2()[0]),
                (other.group1()[0] * self.group2()[1]),
                (other.group1()[0] * self.group2()[2]),
                (other.group1()[1] * self.group1()[3]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                - (Simd32x4::from([other.group1()[1], other.group1()[1], other.group1()[1], other.group0()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group0(), 0, 1, 2, 2))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group1()[0] * other.group0()[3]) - (self.group2()[1] * other.group0()[2])),
                (-(self.group1()[1] * other.group0()[3]) - (self.group2()[2] * other.group0()[0])),
                (-(self.group1()[2] * other.group0()[3]) - (self.group2()[0] * other.group0()[1])),
                ((self.group2()[0] * other.group0()[0]) + (self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([other.group1()[1], other.group1()[1], other.group1()[1], other.group0()[3]]) * self.group2())
                + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2]) + (self.group2()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group1()[2] * other.group0()[0]) + (self.group2()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1]) + (self.group2()[3] * other.group0()[2])),
                (-(other.group1()[0] * self.group2()[3]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from(other.group1()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
    }
}
impl InfixGeometricAntiProduct for AntiDipoleInversion {}
impl GeometricAntiProduct<AntiCircleRotor> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       53       69        0
    //    simd4       24       24        0
    // Totals...
    // yes simd       77       93        0
    //  no simd      149      165        0
    fn geometric_anti_product(self, other: AntiCircleRotor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (self.group0()[0] * other.group2()[3])
                    + (self.group0()[1] * other.group1()[2])
                    + (other.group1()[0] * self.group2()[3])),
                ((other.group0()[0] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[0])
                    + (self.group0()[1] * other.group2()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (other.group1()[1] * self.group2()[3])),
                ((other.group0()[0] * self.group3()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (self.group0()[0] * other.group1()[1])
                    + (self.group0()[2] * other.group2()[3])
                    + (other.group1()[2] * self.group2()[3])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group3()[2], self.group1()[1], self.group2()[0]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group1()[2], self.group1()[3], self.group3()[0], self.group2()[1]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group1()[3], self.group2()[2]]))
                - (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 3, 2, 0, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group1(), 1, 3, 3, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) + (self.group0()[1] * other.group2()[2]) - (other.group1()[3] * self.group3()[0])
                    + (other.group2()[3] * self.group1()[0])),
                (-(other.group0()[2] * self.group2()[0]) + (self.group0()[2] * other.group2()[0]) - (other.group1()[3] * self.group3()[1])
                    + (other.group2()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[1]) + (self.group0()[0] * other.group2()[1]) - (other.group1()[3] * self.group3()[2])
                    + (other.group2()[3] * self.group1()[2])),
                ((other.group0()[2] * self.group2()[2]) - (self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2]) + (other.group1()[2] * self.group3()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group1()[3] * self.group2()[0]) + (other.group2()[0] * self.group1()[3]) - (other.group2()[1] * self.group3()[2])
                    + (other.group2()[2] * self.group1()[1])
                    + (other.group2()[3] * self.group2()[0])),
                ((other.group1()[3] * self.group2()[1]) + (other.group2()[0] * self.group1()[2]) + (other.group2()[1] * self.group1()[3]) - (other.group2()[2] * self.group3()[0])
                    + (other.group2()[3] * self.group2()[1])),
                ((other.group1()[3] * self.group2()[2]) - (other.group2()[0] * self.group3()[1])
                    + (other.group2()[1] * self.group1()[0])
                    + (other.group2()[2] * self.group1()[3])
                    + (other.group2()[3] * self.group2()[2])),
                (-(other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2]) + (other.group0()[2] * self.group3()[2])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group1()[3] * self.group2()[3])),
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[3]]) * swizzle!(self.group2(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[1]]) * swizzle!(self.group3(), 1, 2, 0, 1))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) + (other.group1()[3] * self.group1()[0]) + (other.group2()[0] * self.group2()[3])),
                ((other.group0()[2] * self.group2()[0]) + (other.group1()[3] * self.group1()[1]) + (other.group2()[1] * self.group2()[3])),
                ((other.group0()[0] * self.group2()[1]) + (other.group1()[3] * self.group1()[2]) + (other.group2()[2] * self.group2()[3])),
                (-(other.group2()[1] * self.group3()[1]) - (other.group2()[2] * self.group1()[2]) - (other.group2()[2] * self.group3()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[3]]) * swizzle!(other.group2(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[3], self.group3()[2], self.group3()[0], self.group2()[1]]) * swizzle!(other.group1(), 0, 0, 1, 1))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group1()[1]]) * swizzle!(other.group2(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group3()[1], self.group1()[3], self.group1()[3], self.group2()[2]]) * swizzle!(other.group1(), 2, 1, 2, 2))
                + (swizzle!(other.group1(), 1, 2, 0, 3) * swizzle!(self.group3(), 2, 0, 1, 3))),
        );
    }
}
impl GeometricAntiProduct<AntiDipoleInversion> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       77       93        0
    //    simd4       33       33        0
    // Totals...
    // yes simd      110      126        0
    //  no simd      209      225        0
    fn geometric_anti_product(self, other: AntiDipoleInversion) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3])
                    + (self.group0()[1] * other.group1()[2])
                    + (other.group1()[0] * self.group2()[3])
                    + (other.group2()[3] * self.group1()[0])
                    + (other.group3()[0] * self.group2()[3])),
                ((self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (other.group1()[1] * self.group2()[3])
                    + (other.group2()[3] * self.group1()[1])
                    + (other.group3()[1] * self.group2()[3])),
                ((self.group0()[0] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[3])
                    + (other.group1()[2] * self.group2()[3])
                    + (other.group2()[3] * self.group1()[2])
                    + (other.group3()[2] * self.group2()[3])),
                (-(self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group3()[1] * self.group3()[1])
                    - (other.group3()[2] * self.group3()[2])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group3()[2], self.group1()[1], self.group2()[0]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group1()[2], self.group1()[3], self.group3()[0], self.group2()[1]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group1()[3], self.group2()[2]]))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group2()[3]]) * swizzle!(self.group3(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]) * swizzle!(self.group1(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group2()[3]]) * swizzle!(other.group3(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[0]]) * swizzle!(other.group2(), 3, 3, 3, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[2] * self.group2()[1]) + (self.group0()[0] * other.group3()[3]) - (self.group0()[2] * other.group2()[1])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group1()[3] * self.group3()[0])
                    + (other.group3()[0] * self.group1()[3])
                    + (other.group3()[2] * self.group3()[1])),
                ((other.group0()[0] * self.group2()[2]) - (self.group0()[0] * other.group2()[2])
                    + (self.group0()[1] * other.group3()[3])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[3] * self.group3()[1])
                    + (other.group3()[0] * self.group3()[2])
                    + (other.group3()[1] * self.group1()[3])),
                ((other.group0()[1] * self.group2()[0]) - (self.group0()[1] * other.group2()[0])
                    + (self.group0()[2] * other.group3()[3])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[3] * self.group3()[2])
                    + (other.group3()[1] * self.group3()[0])
                    + (other.group3()[2] * self.group1()[3])),
                (-(other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[2] * self.group3()[2])
                    - (other.group3()[0] * self.group1()[0])
                    - (other.group3()[1] * self.group1()[1])
                    - (other.group3()[2] * self.group1()[2])
                    - (other.group3()[3] * self.group2()[3])),
            ]) + (Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[1]]) * swizzle!(self.group3(), 2, 0, 1, 1))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[2]]) * swizzle!(other.group2(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[1]]) * swizzle!(other.group2(), 0, 1, 2, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group1()[0] * self.group3()[3]) + (other.group2()[2] * self.group1()[1]) + (other.group2()[2] * self.group3()[1]) + (other.group3()[3] * self.group3()[0])),
                ((other.group1()[1] * self.group3()[3]) + (other.group2()[0] * self.group3()[2]) + (other.group2()[1] * self.group1()[3]) + (other.group3()[3] * self.group3()[1])),
                ((other.group1()[2] * self.group3()[3]) + (other.group2()[1] * self.group3()[0]) + (other.group2()[2] * self.group1()[3]) + (other.group3()[3] * self.group3()[2])),
                (-(other.group2()[1] * self.group1()[1])
                    - (other.group2()[1] * self.group3()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[2])),
            ]) + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group3()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group2()[0], other.group2()[0], other.group2()[1], other.group3()[3]]) * swizzle!(self.group1(), 3, 2, 0, 3))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]) * swizzle!(self.group3(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[2]]) * swizzle!(self.group2(), 1, 2, 0, 2))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[2]]) * swizzle!(other.group3(), 3, 3, 3, 2))
                - (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group2(), 0, 1, 2, 1))
                - (swizzle!(other.group2(), 1, 2, 0, 0) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (swizzle!(other.group3(), 1, 2, 0, 1) * swizzle!(self.group2(), 2, 0, 1, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2])
                    + (self.group0()[2] * other.group2()[1])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[0])
                    - (other.group2()[0] * self.group2()[3])
                    + (other.group2()[3] * self.group2()[0])
                    + (other.group3()[2] * self.group1()[1])),
                (-(other.group0()[2] * self.group2()[0])
                    + (self.group0()[0] * other.group2()[2])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[1])
                    - (other.group2()[1] * self.group2()[3])
                    + (other.group2()[3] * self.group2()[1])
                    + (other.group3()[0] * self.group1()[2])),
                (-(other.group0()[0] * self.group2()[1])
                    + (self.group0()[1] * other.group2()[0])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])
                    - (other.group2()[2] * self.group2()[3])
                    + (other.group2()[3] * self.group2()[2])
                    + (other.group3()[1] * self.group1()[0])),
                (-(other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2]) + (other.group0()[2] * self.group3()[2])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]) * swizzle!(self.group2(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[3]]) * swizzle!(other.group2(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[1]]) * swizzle!(self.group3(), 1, 2, 0, 1))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum321> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       16        0
    //    simd4        2        6        0
    // Totals...
    // yes simd        8       22        0
    //  no simd       14       40        0
    fn geometric_anti_product(self, other: AntiDualNum321) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[2])),
                (other.group0()[0] * self.group1()[3] * -1.0),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(other.group0()[0] * self.group3()[0]) + (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group1()[1])),
                (-(other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            ((Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group0()[0]]) * self.group2() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]]) * self.group2())),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(other.group0()[1]) * self.group3() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum4> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       14       30        0
    fn geometric_anti_product(self, other: AntiDualNum4) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) - (other.group0()[0] * self.group3()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group0()[2])),
                (other.group0()[0] * self.group3()[3]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group1()[2])),
                (-(other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self.group1()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[1] * self.group2()[0]),
                (other.group0()[1] * self.group2()[1]),
                (other.group0()[1] * self.group2()[2]),
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group2()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group2()[0]) - (other.group0()[1] * self.group3()[0])),
                (-(other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group3()[1])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group3()[2])),
                (other.group0()[1] * self.group3()[3]),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum5> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       14        0
    //    simd4        2        6        0
    // Totals...
    // yes simd        8       20        0
    //  no simd       14       38        0
    fn geometric_anti_product(self, other: AntiDualNum5) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                (other.group0()[0] * self.group2()[3]),
            ]),
            // e23, e31, e12, e45
            ((Simd32x4::from(other.group0()[1]) * self.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[0] * self.group3()[0]) + (other.group0()[1] * self.group2()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group2()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group2()[2])),
                (other.group0()[1] * self.group2()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(other.group0()[1]) * self.group3() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))),
        );
    }
}
impl GeometricAntiProduct<AntiFlatPoint> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       21       39        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       27       45        0
    //  no simd       45       63        0
    fn geometric_anti_product(self, other: AntiFlatPoint) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group1()[3] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group0()[1]) * -1.0),
                ((self.group0()[0] * other.group0()[2]) * -1.0),
                ((self.group0()[1] * other.group0()[0]) * -1.0),
                0.0,
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))
                + (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group1()[1] * other.group0()[2]) + (self.group1()[3] * other.group0()[0]) + (self.group3()[1] * other.group0()[2])),
                ((self.group1()[2] * other.group0()[0]) + (self.group1()[3] * other.group0()[1]) + (self.group3()[2] * other.group0()[0])),
                ((self.group1()[0] * other.group0()[1]) + (self.group1()[3] * other.group0()[2]) + (self.group3()[0] * other.group0()[1])),
                (-(self.group3()[0] * other.group0()[0])
                    - (self.group3()[1] * other.group0()[1])
                    - (self.group3()[2] * other.group0()[2])
                    - (self.group3()[3] * other.group0()[3])),
            ]) - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[2]]) * swizzle!(other.group0(), 1, 2, 0, 2))
                - (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1]) + (self.group1()[0] * other.group0()[3])
                    - (self.group2()[3] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3]) - (self.group2()[3] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[3])
                    - (self.group2()[3] * other.group0()[2])),
                (self.group2()[3] * other.group0()[3]),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiFlector> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       53        0
    //    simd4       17       17        0
    // Totals...
    // yes simd       53       70        0
    //  no simd      104      121        0
    fn geometric_anti_product(self, other: AntiFlector) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (self.group2()[3] * other.group1()[0]),
                (self.group2()[3] * other.group1()[1]),
                (self.group2()[3] * other.group1()[2]),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group3()[1] * other.group1()[1])
                    - (self.group3()[2] * other.group1()[2])),
            ]) + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group2()[3]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[2] * other.group0()[1]) + (self.group1()[3] * other.group1()[0]) + (self.group3()[1] * other.group1()[2])),
                (-(self.group0()[0] * other.group0()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[1])
                    + (self.group3()[2] * other.group1()[0])),
                (-(self.group0()[1] * other.group0()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])
                    + (self.group3()[0] * other.group1()[1])),
                (-(self.group1()[1] * other.group1()[1]) - (self.group1()[2] * other.group1()[2]) - (self.group2()[3] * other.group1()[3])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))
                + (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group1()[1] * other.group0()[2]) + (self.group1()[3] * other.group0()[0]) - (self.group2()[1] * other.group1()[2]) + (self.group3()[1] * other.group0()[2])),
                ((self.group1()[2] * other.group0()[0]) + (self.group1()[3] * other.group0()[1]) - (self.group2()[2] * other.group1()[0]) + (self.group3()[2] * other.group0()[0])),
                ((self.group1()[3] * other.group0()[2]) - (self.group2()[0] * other.group1()[1]) + (self.group3()[0] * other.group0()[1]) + (self.group3()[2] * other.group1()[3])),
                ((self.group2()[2] * other.group1()[2]) - (self.group3()[1] * other.group0()[1]) - (self.group3()[2] * other.group0()[2]) - (self.group3()[3] * other.group0()[3])),
            ]) - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group1()[2], self.group2()[0]]) * swizzle!(other.group1(), 1, 2, 3, 0))
                + (Simd32x4::from([self.group3()[0], self.group3()[1], self.group2()[1], self.group2()[1]]) * swizzle!(other.group1(), 3, 3, 0, 1))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[2]]) * swizzle!(other.group0(), 1, 2, 0, 2))
                - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group0()[1], other.group1()[3]]) * swizzle!(self.group1(), 0, 1, 0, 3))
                - (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group1()[0] * other.group0()[3]) + (self.group1()[1] * other.group1()[2])
                    - (self.group2()[3] * other.group0()[0])),
                (-(self.group0()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3]) + (self.group1()[2] * other.group1()[0])
                    - (self.group2()[3] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group1()[0] * other.group1()[1]) + (self.group1()[2] * other.group0()[3])
                    - (self.group2()[3] * other.group0()[2])),
                ((self.group0()[2] * other.group1()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))),
        );
    }
}
impl GeometricAntiProduct<AntiLine> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       66       82        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       68       84        0
    //  no simd       74       90        0
    fn geometric_anti_product(self, other: AntiLine) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (other.group0()[0] * self.group2()[3])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0]) + (other.group0()[1] * self.group2()[3])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (other.group0()[2] * self.group2()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (other.group1()[0] * self.group2()[3])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0]) + (other.group0()[0] * self.group1()[2])
                    - (other.group0()[2] * self.group1()[0])
                    + (other.group1()[1] * self.group2()[3])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) - (other.group0()[0] * self.group1()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group2()[3])),
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])
                    + (other.group0()[0] * self.group3()[0])
                    + (other.group0()[1] * self.group3()[1])
                    + (other.group0()[2] * self.group3()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1]) + (other.group1()[0] * self.group1()[3])
                    - (other.group1()[1] * self.group1()[2])
                    - (other.group1()[1] * self.group3()[2])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group1()[2] * self.group3()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group3()[3]) - (other.group0()[2] * self.group2()[0])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[0] * self.group3()[2])
                    + (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group1()[0])
                    - (other.group1()[2] * self.group3()[0])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) + (other.group0()[2] * self.group3()[3])
                    - (other.group1()[0] * self.group1()[1])
                    - (other.group1()[0] * self.group3()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[1] * self.group3()[0])
                    + (other.group1()[2] * self.group1()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) + (other.group0()[1] * self.group3()[2]) + (other.group1()[0] * self.group2()[3])),
                (-(self.group0()[0] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[0])
                    + (other.group0()[2] * self.group3()[0])
                    + (other.group1()[1] * self.group2()[3])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (other.group0()[0] * self.group3()[1]) + (other.group1()[2] * self.group2()[3])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[2] * self.group3()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<AntiMotor> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       44       60        0
    //    simd4       15       15        0
    // Totals...
    // yes simd       59       75        0
    //  no simd      104      120        0
    fn geometric_anti_product(self, other: AntiMotor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) + (self.group2()[3] * other.group1()[0])),
                ((self.group0()[2] * other.group1()[0]) + (self.group2()[3] * other.group1()[1])),
                ((self.group0()[2] * other.group1()[3]) + (self.group2()[3] * other.group1()[2])),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2]) + (self.group3()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group2()[3]]) * swizzle!(other.group1(), 3, 3, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[0], self.group3()[0]]) * swizzle!(other.group0(), 3, 3, 1, 0))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[2], self.group3()[1]]) * swizzle!(other.group0(), 2, 0, 3, 1))
                - (swizzle!(self.group1(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group1()[0] * other.group1()[3]) + (self.group1()[1] * other.group1()[2]) - (self.group1()[2] * other.group1()[1])
                    + (self.group1()[3] * other.group1()[0])
                    + (self.group2()[1] * other.group0()[2])
                    + (self.group3()[0] * other.group1()[3])
                    + (self.group3()[1] * other.group1()[2])
                    - (self.group3()[2] * other.group1()[1])
                    + (self.group3()[3] * other.group0()[0])),
                (-(self.group1()[0] * other.group1()[2])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group1()[0])
                    + (self.group1()[3] * other.group1()[1])
                    + (self.group2()[2] * other.group0()[0])
                    - (self.group3()[0] * other.group1()[2])
                    + (self.group3()[1] * other.group1()[3])
                    + (self.group3()[2] * other.group1()[0])
                    + (self.group3()[3] * other.group0()[1])),
                ((self.group1()[0] * other.group1()[1]) - (self.group1()[1] * other.group1()[0])
                    + (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])
                    + (self.group2()[2] * other.group0()[3])
                    + (self.group3()[0] * other.group1()[1])
                    - (self.group3()[1] * other.group1()[0])
                    + (self.group3()[2] * other.group1()[3])
                    + (self.group3()[3] * other.group0()[2])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (swizzle!(self.group2(), 0, 1, 0, 3) * swizzle!(other.group0(), 3, 3, 1, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) + (self.group2()[3] * other.group1()[0])),
                ((self.group0()[2] * other.group1()[0]) + (self.group2()[3] * other.group1()[1])),
                ((self.group0()[2] * other.group1()[3]) + (self.group2()[3] * other.group1()[2])),
                (-(self.group1()[2] * other.group1()[2])
                    - (self.group2()[2] * other.group0()[2])
                    - (self.group3()[0] * other.group1()[0])
                    - (self.group3()[1] * other.group1()[1])
                    - (self.group3()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group1()[3]]) * swizzle!(other.group1(), 3, 3, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[0], self.group2()[0]]) * swizzle!(other.group0(), 3, 3, 1, 0))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[2], self.group2()[1]]) * swizzle!(other.group0(), 2, 0, 3, 1))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group1(), 3, 3, 3, 1))
                + (swizzle!(self.group3(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))),
        );
    }
}
impl GeometricAntiProduct<AntiPlane> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       24        0
    //    simd4        8       10        0
    // Totals...
    // yes simd       20       34        0
    //  no simd       44       64        0
    fn geometric_anti_product(self, other: AntiPlane) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (self.group2()[3] * other.group0()[0]),
                (self.group2()[3] * other.group0()[1]),
                (self.group2()[3] * other.group0()[2]),
                (-(self.group3()[1] * other.group0()[1]) - (self.group3()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group2()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[3] * other.group0()[0]) + (self.group3()[1] * other.group0()[2])),
                ((self.group0()[1] * other.group0()[3]) + (self.group1()[3] * other.group0()[1]) + (self.group3()[2] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[3] * other.group0()[2]) + (self.group3()[0] * other.group0()[1])),
                (-(self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2]) - (self.group2()[3] * other.group0()[3])),
            ]) - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group2()[1] * other.group0()[2]) - (self.group3()[3] * other.group0()[0])),
                (-(self.group2()[2] * other.group0()[0]) - (self.group3()[3] * other.group0()[1])),
                (-(self.group2()[0] * other.group0()[1]) - (self.group3()[3] * other.group0()[2])),
                (self.group2()[2] * other.group0()[2]),
            ]) + (Simd32x4::from(other.group0()[3]) * self.group1())
                + (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                + (swizzle!(self.group2(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            ((Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[2]])
                * swizzle!(other.group0(), 2, 0, 1, 2)
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))),
        );
    }
}
impl GeometricAntiProduct<AntiQuadNum> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       32        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       21       40        0
    //  no simd       45       64        0
    fn geometric_anti_product(self, other: AntiQuadNum) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group3()[0] * other.group0()[0]) * -1.0),
                ((self.group3()[1] * other.group0()[0]) * -1.0),
                ((self.group3()[2] * other.group0()[0]) * -1.0),
                0.0,
            ]) + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]) * swizzle!(other.group0(), 3, 3, 3, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group2()[0] * other.group0()[0])),
                ((self.group1()[1] * other.group0()[3]) + (self.group2()[1] * other.group0()[0])),
                ((self.group1()[2] * other.group0()[3]) + (self.group2()[2] * other.group0()[0])),
                ((self.group3()[3] * other.group0()[0]) * -1.0),
            ]) + (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group1()[3]]) * swizzle!(other.group0(), 2, 2, 2, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group2()[0] * other.group0()[2]) + (self.group2()[0] * other.group0()[3]) + (self.group3()[0] * other.group0()[1])),
                ((self.group2()[1] * other.group0()[2]) + (self.group2()[1] * other.group0()[3]) + (self.group3()[1] * other.group0()[1])),
                ((self.group2()[2] * other.group0()[2]) + (self.group2()[2] * other.group0()[3]) + (self.group3()[2] * other.group0()[1])),
                (-(self.group1()[3] * other.group0()[0]) - (self.group2()[3] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]) * swizzle!(other.group0(), 1, 1, 1, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group2()[0] * other.group0()[0]) - (self.group3()[0] * other.group0()[3])),
                (-(self.group2()[1] * other.group0()[0]) - (self.group3()[1] * other.group0()[3])),
                (-(self.group2()[2] * other.group0()[0]) - (self.group3()[2] * other.group0()[3])),
                (self.group3()[3] * other.group0()[3]),
            ]) + (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))),
        );
    }
}
impl GeometricAntiProduct<AntiScalar> for AntiDipoleInversion {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        1        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0       15        0
    fn geometric_anti_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other[e12345]) * self.group0()),
            // e415, e425, e435, e321
            (Simd32x4::from(other[e12345]) * self.group1()),
            // e235, e315, e125, e4
            (Simd32x4::from(other[e12345]) * self.group2()),
            // e1, e2, e3, e5
            (Simd32x4::from(other[e12345]) * self.group3()),
        );
    }
}
impl GeometricAntiProduct<AntiTripleNum> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       30        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       17       34        0
    //  no simd       29       46        0
    fn geometric_anti_product(self, other: AntiTripleNum) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[2]) - (other.group0()[0] * self.group3()[0])),
                ((self.group0()[1] * other.group0()[2]) - (other.group0()[0] * self.group3()[1])),
                ((self.group0()[2] * other.group0()[2]) - (other.group0()[0] * self.group3()[2])),
                (other.group0()[1] * self.group2()[3]),
            ]) + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[2] * self.group1()[2])),
                (-(other.group0()[0] * self.group3()[3]) - (other.group0()[2] * self.group1()[3])),
            ]) + (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[0]) + (other.group0()[1] * self.group3()[0])),
                ((other.group0()[1] * self.group1()[1]) + (other.group0()[1] * self.group3()[1])),
                ((other.group0()[1] * self.group1()[2]) + (other.group0()[1] * self.group3()[2])),
                ((other.group0()[0] * self.group1()[3]) * -1.0),
            ]) + (Simd32x4::from(other.group0()[2]) * self.group2())),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group0()[0] * self.group2()[0]) - (other.group0()[2] * self.group3()[0])),
                (-(other.group0()[0] * self.group2()[1]) - (other.group0()[2] * self.group3()[1])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group3()[2])),
                (other.group0()[2] * self.group3()[3]),
            ]) + (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))),
        );
    }
}
impl GeometricAntiProduct<Circle> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       74       90        0
    //    simd4       15       15        0
    // Totals...
    // yes simd       89      105        0
    //  no simd      134      150        0
    fn geometric_anti_product(self, other: Circle) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) + (other.group0()[1] * self.group3()[2]) + (other.group0()[2] * self.group1()[1]) + (self.group2()[3] * other.group1()[0])),
                ((self.group0()[2] * other.group1()[0]) + (other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group3()[0]) + (self.group2()[3] * other.group1()[1])),
                ((self.group0()[2] * other.group1()[3]) + (other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group1()[0]) + (self.group2()[3] * other.group1()[2])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group3()[2], self.group1()[1], self.group2()[0]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group1()[2], self.group1()[3], self.group3()[0], self.group2()[1]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group1()[3], self.group2()[2]]))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group1()[3]]) * swizzle!(other.group1(), 3, 3, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])
                    + (other.group0()[0] * self.group3()[3])
                    + (other.group0()[2] * self.group2()[1])
                    + (other.group2()[0] * self.group2()[3])
                    + (self.group1()[1] * other.group1()[2])
                    + (self.group3()[0] * other.group1()[3])),
                (-(self.group0()[0] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[0])
                    + (other.group0()[0] * self.group2()[2])
                    + (other.group0()[1] * self.group3()[3])
                    + (other.group2()[1] * self.group2()[3])
                    + (self.group1()[2] * other.group1()[0])
                    + (self.group3()[1] * other.group1()[3])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0])
                    + (other.group0()[1] * self.group2()[0])
                    + (other.group0()[2] * self.group3()[3])
                    + (other.group2()[2] * self.group2()[3])
                    + (self.group1()[0] * other.group1()[1])
                    + (self.group3()[2] * other.group1()[3])),
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group2()[1]) + (self.group0()[2] * other.group2()[2])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (self.group3()[1] * other.group1()[1])
                    - (self.group3()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group2()[0] * self.group1()[3])
                    + (other.group2()[2] * self.group1()[1])
                    + (other.group2()[2] * self.group3()[1])
                    + (self.group2()[1] * other.group1()[2])
                    + (self.group3()[3] * other.group1()[0])),
                ((other.group2()[0] * self.group1()[2])
                    + (other.group2()[0] * self.group3()[2])
                    + (other.group2()[1] * self.group1()[3])
                    + (self.group2()[2] * other.group1()[0])
                    + (self.group3()[3] * other.group1()[1])),
                ((other.group2()[1] * self.group1()[0])
                    + (other.group2()[1] * self.group3()[0])
                    + (other.group2()[2] * self.group1()[3])
                    + (self.group2()[0] * other.group1()[1])
                    + (self.group3()[3] * other.group1()[2])),
                (-(other.group2()[1] * self.group1()[1])
                    - (other.group2()[1] * self.group3()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[2])
                    - (self.group2()[2] * other.group1()[2])
                    - (self.group3()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group2()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group2()[0]]) * swizzle!(self.group3(), 2, 0, 1, 0))
                - (swizzle!(self.group2(), 0, 0, 1, 0) * swizzle!(other.group1(), 3, 2, 0, 0))
                - (swizzle!(self.group2(), 2, 1, 2, 1) * swizzle!(other.group1(), 1, 3, 3, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(self.group0()[1] * other.group2()[2]) + (self.group0()[2] * other.group2()[1])
                    - (other.group0()[1] * self.group2()[2])
                    - (other.group2()[0] * self.group2()[3])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[2] * other.group2()[0]) - (other.group0()[2] * self.group2()[0]) - (other.group2()[1] * self.group2()[3])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[0])
                    - (other.group0()[0] * self.group2()[1])
                    - (other.group2()[2] * self.group2()[3])
                    + (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])),
                (-(self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]) * swizzle!(self.group2(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[1]]) * swizzle!(self.group3(), 1, 2, 0, 1))),
        );
    }
}
impl GeometricAntiProduct<CircleRotor> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       65       81        0
    //    simd4       21       21        0
    // Totals...
    // yes simd       86      102        0
    //  no simd      149      165        0
    fn geometric_anti_product(self, other: CircleRotor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[0] * other.group2()[3])
                    + (self.group0()[1] * other.group1()[2])
                    + (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (self.group2()[3] * other.group1()[0])),
                ((self.group0()[1] * other.group2()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (other.group0()[0] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[0])
                    + (self.group2()[3] * other.group1()[1])),
                ((self.group0()[2] * other.group1()[3])
                    + (self.group0()[2] * other.group2()[3])
                    + (other.group0()[0] * self.group3()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (self.group2()[3] * other.group1()[2])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group3()[2], self.group1()[1], self.group2()[0]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group1()[2], self.group1()[3], self.group3()[0], self.group2()[1]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group1()[3], self.group2()[2]]))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group1()[3]]) * swizzle!(other.group1(), 3, 3, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(self.group0()[2] * other.group2()[1])
                    + (other.group0()[0] * self.group3()[3])
                    + (other.group0()[2] * self.group2()[1])
                    + (self.group1()[1] * other.group1()[2])
                    + (self.group3()[0] * other.group1()[3])),
                (-(self.group0()[0] * other.group2()[2])
                    + (other.group0()[0] * self.group2()[2])
                    + (other.group0()[1] * self.group3()[3])
                    + (self.group1()[2] * other.group1()[0])
                    + (self.group3()[1] * other.group1()[3])),
                (-(self.group0()[1] * other.group2()[0])
                    + (other.group0()[1] * self.group2()[0])
                    + (other.group0()[2] * self.group3()[3])
                    + (self.group2()[3] * other.group2()[2])
                    + (self.group3()[2] * other.group1()[3])),
                ((self.group0()[2] * other.group2()[2])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (self.group3()[1] * other.group1()[1])
                    - (self.group3()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group1()[2], self.group0()[1]]) * swizzle!(other.group2(), 0, 1, 3, 1))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group1()[1], other.group2()[3]]) * swizzle!(self.group1(), 0, 1, 0, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group1()[3] * other.group2()[0])
                    + (self.group2()[0] * other.group2()[3])
                    + (self.group2()[1] * other.group1()[2])
                    + (self.group3()[1] * other.group2()[2])
                    + (self.group3()[3] * other.group1()[0])),
                ((self.group1()[3] * other.group2()[1])
                    + (self.group2()[1] * other.group2()[3])
                    + (self.group2()[2] * other.group1()[0])
                    + (self.group3()[2] * other.group2()[0])
                    + (self.group3()[3] * other.group1()[1])),
                ((self.group1()[3] * other.group2()[2])
                    + (self.group2()[0] * other.group1()[1])
                    + (self.group2()[2] * other.group2()[3])
                    + (self.group3()[0] * other.group2()[1])
                    + (self.group3()[3] * other.group1()[2])),
                (-(self.group1()[2] * other.group2()[2])
                    - (self.group2()[2] * other.group1()[2])
                    - (self.group3()[0] * other.group2()[0])
                    - (self.group3()[1] * other.group2()[1])
                    - (self.group3()[2] * other.group2()[2])
                    - (self.group3()[3] * other.group1()[3])),
            ]) + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[3]]) * swizzle!(other.group2(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[1]]) * swizzle!(other.group2(), 1, 2, 0, 1))
                - (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (swizzle!(self.group2(), 0, 0, 1, 0) * swizzle!(other.group1(), 3, 2, 0, 0))
                - (swizzle!(self.group2(), 2, 1, 2, 1) * swizzle!(other.group1(), 1, 3, 3, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(self.group0()[1] * other.group2()[2]) - (other.group0()[1] * self.group2()[2])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[0])
                    - (self.group2()[3] * other.group2()[0])),
                (-(self.group0()[2] * other.group2()[0]) - (other.group0()[2] * self.group2()[0])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[1])
                    - (self.group2()[3] * other.group2()[1])),
                (-(self.group0()[0] * other.group2()[1]) - (other.group0()[0] * self.group2()[1])
                    + (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])
                    - (self.group2()[3] * other.group2()[2])),
                (-(self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]) * swizzle!(self.group2(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group2()[3], other.group0()[2]]) * swizzle!(self.group3(), 1, 2, 2, 2))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group1()[1], other.group0()[1]]) * swizzle!(self.group3(), 0, 1, 0, 1))),
        );
    }
}
impl GeometricAntiProduct<Dipole> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       62       78        0
    //    simd4       18       18        0
    // Totals...
    // yes simd       80       96        0
    //  no simd      134      150        0
    fn geometric_anti_product(self, other: Dipole) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) + (other.group0()[1] * self.group3()[2]) + (other.group0()[2] * self.group1()[1]) + (self.group2()[3] * other.group1()[0])),
                ((self.group0()[2] * other.group1()[0]) + (other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group3()[0]) + (self.group2()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[1]) + (other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group1()[0]) + (self.group2()[3] * other.group1()[2])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group3()[2], self.group1()[1], self.group2()[0]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group1()[2], self.group1()[3], self.group3()[0], self.group2()[1]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group1()[3], self.group2()[2]]))
                - (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 3, 2, 0, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group1(), 1, 3, 3, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[1] * other.group2()[2])
                    - (self.group0()[2] * other.group2()[1])
                    - (other.group0()[1] * self.group2()[2])
                    - (self.group1()[2] * other.group1()[1])
                    - (self.group3()[0] * other.group1()[3])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[2] * other.group2()[0])
                    - (other.group0()[2] * self.group2()[0])
                    - (self.group1()[0] * other.group1()[2])
                    - (self.group3()[1] * other.group1()[3])),
                ((self.group0()[0] * other.group2()[1])
                    - (self.group0()[1] * other.group2()[0])
                    - (other.group0()[0] * self.group2()[1])
                    - (self.group1()[1] * other.group1()[0])
                    - (self.group3()[2] * other.group1()[3])),
                (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])
                    + (other.group0()[2] * self.group2()[2])
                    + (self.group3()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group2()[0] * self.group1()[3]) - (other.group2()[1] * self.group3()[2])
                    + (other.group2()[2] * self.group1()[1])
                    + (self.group2()[0] * other.group1()[3])
                    + (self.group2()[1] * other.group1()[2])),
                ((other.group2()[0] * self.group1()[2]) + (other.group2()[1] * self.group1()[3]) - (other.group2()[2] * self.group3()[0])
                    + (self.group2()[1] * other.group1()[3])
                    + (self.group2()[2] * other.group1()[0])),
                (-(other.group2()[0] * self.group3()[1])
                    + (other.group2()[1] * self.group1()[0])
                    + (other.group2()[2] * self.group1()[3])
                    + (self.group2()[0] * other.group1()[1])
                    + (self.group2()[2] * other.group1()[3])),
                (-(self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])
                    - (self.group2()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[1]]) * swizzle!(self.group3(), 3, 3, 3, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])
                    + (other.group0()[1] * self.group2()[2])
                    + (other.group2()[0] * self.group2()[3])
                    + (self.group3()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[0])
                    + (other.group0()[2] * self.group2()[0])
                    + (other.group2()[1] * self.group2()[3])
                    + (self.group3()[0] * other.group1()[2])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0])
                    + (other.group0()[0] * self.group2()[1])
                    + (other.group2()[2] * self.group2()[3])
                    + (self.group3()[1] * other.group1()[0])),
                (-(other.group2()[1] * self.group1()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[2])
                    - (self.group2()[1] * other.group1()[1])
                    - (self.group2()[2] * other.group1()[2])),
            ]) + (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[1]]) * swizzle!(self.group3(), 1, 2, 0, 1))),
        );
    }
}
impl GeometricAntiProduct<DipoleInversion> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       53       69        0
    //    simd4       39       39        0
    // Totals...
    // yes simd       92      108        0
    //  no simd      209      225        0
    fn geometric_anti_product(self, other: DipoleInversion) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) + (other.group0()[2] * self.group1()[1]) + (self.group2()[3] * other.group1()[0])
                    - (self.group2()[3] * other.group3()[0])
                    - (self.group3()[0] * other.group2()[3])),
                ((self.group0()[2] * other.group1()[0]) + (other.group0()[0] * self.group1()[2]) + (self.group2()[3] * other.group1()[1])
                    - (self.group2()[3] * other.group3()[1])
                    - (self.group3()[1] * other.group2()[3])),
                ((self.group0()[0] * other.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (self.group2()[3] * other.group1()[2])
                    - (self.group2()[3] * other.group3()[2])
                    - (self.group3()[2] * other.group2()[3])),
                (-(self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])
                    + (self.group3()[1] * other.group3()[1])
                    + (self.group3()[2] * other.group3()[2])),
            ]) - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group1()[2], other.group3()[1], other.group2()[0]]))
                - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group3()[2], other.group1()[3], other.group1()[0], other.group2()[1]]))
                - (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[3], other.group2()[2]]))
                - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group3()[2], self.group1()[1], self.group2()[0]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group1()[2], self.group1()[3], self.group3()[0], self.group2()[1]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group1()[3], self.group2()[2]]))
                + (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group3(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group3(), 2, 0, 1, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) - (other.group0()[1] * self.group2()[2]) - (self.group3()[1] * other.group3()[2])),
                ((self.group0()[2] * other.group2()[0]) - (other.group0()[2] * self.group2()[0]) - (self.group3()[2] * other.group3()[0])),
                ((self.group0()[0] * other.group2()[1]) - (other.group0()[0] * self.group2()[1]) - (self.group3()[2] * other.group1()[3])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2]) - (self.group1()[2] * other.group3()[2])),
            ]) + (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group2()[3]]) * swizzle!(self.group3(), 0, 1, 0, 3))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[2]]) * swizzle!(self.group2(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[1]]) * swizzle!(self.group2(), 0, 1, 2, 1))
                + (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[2]]) * swizzle!(self.group3(), 2, 0, 1, 2))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group3(), 0, 1, 2, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group1()[1] * other.group2()[2]) + (self.group1()[3] * other.group2()[0]) + (self.group2()[0] * other.group1()[3]) + (self.group2()[1] * other.group1()[2])),
                ((self.group1()[2] * other.group2()[0]) + (self.group1()[3] * other.group2()[1]) + (self.group2()[1] * other.group1()[3]) + (self.group2()[2] * other.group1()[0])),
                ((self.group1()[0] * other.group2()[1]) + (self.group1()[3] * other.group2()[2]) + (self.group2()[0] * other.group1()[1]) + (self.group2()[2] * other.group1()[3])),
                (-(self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[1]]) * swizzle!(other.group3(), 2, 0, 1, 1))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[3]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group0()[2]]) * swizzle!(other.group3(), 0, 1, 2, 2))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]) * swizzle!(self.group3(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group3()[3], other.group0()[1]]) * swizzle!(self.group3(), 1, 2, 2, 1))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[3]]) * swizzle!(self.group2(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group2()[1], other.group0()[0]]) * swizzle!(self.group3(), 0, 1, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group2()[2])
                    + (other.group0()[1] * self.group2()[2])
                    + (self.group1()[1] * other.group3()[2])
                    + (self.group2()[3] * other.group2()[0])
                    + (self.group3()[2] * other.group1()[1])),
                ((self.group0()[2] * other.group2()[0])
                    + (other.group0()[2] * self.group2()[0])
                    + (self.group1()[2] * other.group3()[0])
                    + (self.group2()[3] * other.group2()[1])
                    + (self.group3()[0] * other.group1()[2])),
                ((self.group0()[0] * other.group2()[1])
                    + (other.group0()[0] * self.group2()[1])
                    + (self.group1()[0] * other.group3()[1])
                    + (self.group2()[3] * other.group2()[2])
                    + (self.group3()[1] * other.group1()[0])),
                (-(self.group2()[1] * other.group3()[1])
                    - (self.group2()[2] * other.group1()[2])
                    - (self.group2()[2] * other.group3()[2])
                    - (self.group3()[1] * other.group2()[1])
                    - (self.group3()[2] * other.group2()[2])),
            ]) + (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                + (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))
                - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[2]]) * swizzle!(self.group1(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group3()[0]]) * swizzle!(self.group2(), 0, 1, 2, 0))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group2()[1]]) * swizzle!(self.group1(), 2, 0, 1, 1))),
        );
    }
}
impl GeometricAntiProduct<DualNum321> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       14        0
    //    simd4        2        4        0
    // Totals...
    // yes simd        8       18        0
    //  no simd       14       30        0
    fn geometric_anti_product(self, other: DualNum321) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[2])),
                (other.group0()[0] * self.group1()[3]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group3()[0]) + (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group1()[1])),
                ((other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3]),
            ]),
            // e235, e315, e125, e5
            (-(Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))
                + (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))),
            // e1, e2, e3, e4
            ((Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))
                + (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[3]]))),
        );
    }
}
impl GeometricAntiProduct<DualNum4> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       14        0
    //    simd4        2        5        0
    // Totals...
    // yes simd        8       19        0
    //  no simd       14       34        0
    fn geometric_anti_product(self, other: DualNum4) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) - (other.group0()[0] * self.group3()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group0()[2])),
                (other.group0()[0] * self.group3()[3]),
            ]),
            // e415, e425, e435, e321
            ((Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))
                + (Simd32x4::from(other.group0()[1]) * self.group1())),
            // e235, e315, e125, e5
            (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]])),
            // e1, e2, e3, e4
            ((Simd32x4::from([
                (other.group0()[1] * self.group3()[0]),
                (other.group0()[1] * self.group3()[1]),
                (other.group0()[1] * self.group3()[2]),
                (other.group0()[0] * self.group1()[3]),
            ]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]]) * self.group2())),
        );
    }
}
impl GeometricAntiProduct<DualNum5> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       14        0
    //    simd4        3        5        0
    // Totals...
    // yes simd        6       19        0
    //  no simd       15       34        0
    fn geometric_anti_product(self, other: DualNum5) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                (other.group0()[0] * self.group2()[3]),
            ]),
            // e415, e425, e435, e321
            ((Simd32x4::from(other.group0()[0])
                * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(other.group0()[1]) * self.group1())),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (other.group0()[1] * self.group2()[0]),
                (other.group0()[1] * self.group2()[1]),
                (other.group0()[1] * self.group2()[2]),
                0.0,
            ]) + (Simd32x4::from(other.group0()[0]) * self.group1())
                + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]]) * self.group3())),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group3()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group3()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group3()[2])),
                (other.group0()[1] * self.group2()[3]),
            ]),
        );
    }
}
impl GeometricAntiProduct<FlatPoint> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       49        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       32       53        0
    //  no simd       44       65        0
    fn geometric_anti_product(self, other: FlatPoint) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) + (self.group2()[3] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[0]) + (self.group2()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[1]) + (self.group2()[3] * other.group0()[2])),
                ((self.group0()[2] * other.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])
                    + (self.group1()[3] * other.group0()[0])
                    + (self.group2()[0] * other.group0()[3])
                    + (self.group3()[1] * other.group0()[2])
                    - (self.group3()[2] * other.group0()[1])),
                (-(self.group1()[0] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[0])
                    + (self.group1()[3] * other.group0()[1])
                    + (self.group2()[1] * other.group0()[3])
                    - (self.group3()[0] * other.group0()[2])
                    + (self.group3()[2] * other.group0()[0])),
                ((self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])
                    + (self.group1()[3] * other.group0()[2])
                    + (self.group2()[2] * other.group0()[3])
                    + (self.group3()[0] * other.group0()[1])
                    - (self.group3()[1] * other.group0()[0])),
                (self.group2()[3] * other.group0()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group2()[3] * other.group0()[0])),
                ((self.group1()[1] * other.group0()[3]) + (self.group2()[3] * other.group0()[1])),
                ((self.group1()[2] * other.group0()[3]) + (self.group2()[3] * other.group0()[2])),
                (-(self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])
                    - (self.group3()[0] * other.group0()[0])
                    - (self.group3()[1] * other.group0()[1])
                    - (self.group3()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<Flector> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       45       60        0
    //    simd4       15       15        0
    // Totals...
    // yes simd       60       75        0
    //  no simd      105      120        0
    fn geometric_anti_product(self, other: Flector) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) - (self.group2()[3] * other.group1()[0])),
                (-(self.group0()[2] * other.group1()[0]) - (self.group2()[3] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[1]) - (self.group2()[3] * other.group1()[2])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other.group0()[3])
                    + (self.group3()[0] * other.group1()[0])
                    + (self.group3()[1] * other.group1()[1])
                    + (self.group3()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group1(), 1, 2, 0, 3))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) + (self.group2()[3] * other.group0()[0]) + (self.group3()[2] * other.group1()[1])),
                ((self.group0()[2] * other.group0()[0]) + (self.group2()[3] * other.group0()[1]) + (self.group3()[0] * other.group1()[2])),
                ((self.group0()[0] * other.group0()[1]) + (self.group2()[3] * other.group0()[2]) + (self.group3()[1] * other.group1()[0])),
                (-(self.group0()[2] * other.group0()[2]) - (self.group1()[2] * other.group1()[2])),
            ]) + (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))
                - (swizzle!(self.group1(), 3, 3, 3, 0) * swizzle!(other.group1(), 0, 1, 2, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group1()[1] * other.group0()[2]) + (self.group1()[3] * other.group0()[0]) + (self.group2()[0] * other.group0()[3]) - (self.group2()[2] * other.group1()[1])
                    + (self.group3()[1] * other.group0()[2])
                    - (self.group3()[2] * other.group0()[1])
                    + (self.group3()[3] * other.group1()[0])),
                ((self.group1()[2] * other.group0()[0]) + (self.group1()[3] * other.group0()[1]) - (self.group2()[0] * other.group1()[2]) + (self.group2()[1] * other.group0()[3])
                    - (self.group3()[0] * other.group0()[2])
                    + (self.group3()[2] * other.group0()[0])
                    + (self.group3()[3] * other.group1()[1])),
                ((self.group1()[0] * other.group0()[1]) + (self.group1()[3] * other.group0()[2]) - (self.group2()[1] * other.group1()[0])
                    + (self.group2()[2] * other.group0()[3])
                    + (self.group3()[0] * other.group0()[1])
                    - (self.group3()[1] * other.group0()[0])
                    + (self.group3()[3] * other.group1()[2])),
                0.0,
            ]) + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))
                + (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[2]]) * swizzle!(other.group1(), 3, 3, 3, 2))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group1()[1] * other.group1()[2]) + (self.group2()[3] * other.group0()[0])),
                ((self.group1()[1] * other.group0()[3]) + (self.group1()[2] * other.group1()[0]) + (self.group2()[3] * other.group0()[1])),
                ((self.group1()[0] * other.group1()[1]) + (self.group1()[2] * other.group0()[3]) + (self.group2()[3] * other.group0()[2])),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group2()[0] * other.group1()[0])
                    - (self.group2()[1] * other.group1()[1])
                    - (self.group2()[2] * other.group1()[2])
                    - (self.group3()[0] * other.group0()[0])
                    - (self.group3()[1] * other.group0()[1])
                    - (self.group3()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[1]]) * swizzle!(self.group1(), 2, 0, 1, 1))),
        );
    }
}
impl GeometricAntiProduct<Line> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       62       78        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       65       81        0
    //  no simd       74       90        0
    fn geometric_anti_product(self, other: Line) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (other.group0()[0] * self.group2()[3])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0]) + (other.group0()[1] * self.group2()[3])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (other.group0()[2] * self.group2()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (other.group1()[0] * self.group2()[3])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0]) + (other.group0()[0] * self.group1()[2])
                    - (other.group0()[2] * self.group1()[0])
                    + (other.group1()[1] * self.group2()[3])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) - (other.group0()[0] * self.group1()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group2()[3])),
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1]) + (self.group0()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group3()[0])
                    - (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group3()[2])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[0] * self.group3()[3])
                    + (other.group0()[2] * self.group2()[1])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group1()[2] * self.group3()[1])),
                ((other.group0()[0] * self.group2()[2])
                    + (other.group0()[1] * self.group3()[3])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[0] * self.group3()[2])
                    + (other.group1()[1] * self.group1()[3])),
                ((other.group0()[1] * self.group2()[0])
                    + (other.group0()[2] * self.group3()[3])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[1] * self.group3()[0])
                    + (other.group1()[2] * self.group1()[3])),
                (-(other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[2] * self.group3()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group1()[0]]) * swizzle!(self.group3(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1]) + (other.group0()[0] * self.group1()[3])
                    - (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group3()[1])
                    - (other.group1()[0] * self.group2()[3])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0]) + (other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group3()[0])
                    - (other.group1()[1] * self.group2()[3])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) - (other.group0()[0] * self.group3()[1])
                    + (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group1()[3])
                    - (other.group1()[2] * self.group2()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Motor> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       44       60        0
    //    simd4       15       15        0
    // Totals...
    // yes simd       59       75        0
    //  no simd      104      120        0
    fn geometric_anti_product(self, other: Motor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (self.group1()[1] * other.group0()[2]),
                (self.group1()[2] * other.group0()[0]),
                (self.group1()[2] * other.group0()[3]),
                (-(self.group3()[1] * other.group0()[1]) - (self.group3()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group0()[0]]) * swizzle!(other.group1(), 3, 3, 1, 0))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[2], self.group0()[1]]) * swizzle!(other.group1(), 2, 0, 3, 1))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[2]]) * swizzle!(other.group1(), 0, 1, 2, 2))
                + (swizzle!(self.group1(), 0, 1, 0, 3) * swizzle!(other.group0(), 3, 3, 1, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group1()[1] * other.group1()[2])
                    + (self.group1()[3] * other.group1()[0])
                    + (self.group2()[1] * other.group0()[2])
                    + (self.group3()[0] * other.group1()[3])
                    + (self.group3()[1] * other.group1()[2])
                    + (self.group3()[3] * other.group0()[0])),
                ((self.group1()[2] * other.group1()[0])
                    + (self.group1()[3] * other.group1()[1])
                    + (self.group2()[2] * other.group0()[0])
                    + (self.group3()[1] * other.group1()[3])
                    + (self.group3()[2] * other.group1()[0])
                    + (self.group3()[3] * other.group0()[1])),
                ((self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])
                    + (self.group2()[2] * other.group0()[3])
                    + (self.group3()[0] * other.group1()[1])
                    + (self.group3()[2] * other.group1()[3])
                    + (self.group3()[3] * other.group0()[2])),
                (-(self.group1()[2] * other.group1()[2])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])
                    - (self.group3()[0] * other.group1()[0])
                    - (self.group3()[1] * other.group1()[1])
                    - (self.group3()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[0], self.group3()[3]]) * swizzle!(other.group0(), 3, 3, 1, 3))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))
                + (swizzle!(self.group1(), 0, 1, 0, 3) * swizzle!(other.group1(), 3, 3, 1, 3))
                - (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (swizzle!(self.group2(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])
                    - (self.group2()[3] * other.group1()[0])
                    + (self.group3()[0] * other.group0()[3])
                    + (self.group3()[1] * other.group0()[2])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group1()[0]) - (self.group2()[3] * other.group1()[1])
                    + (self.group3()[1] * other.group0()[3])
                    + (self.group3()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])
                    - (self.group0()[2] * other.group1()[3])
                    - (self.group2()[3] * other.group1()[2])
                    + (self.group3()[0] * other.group0()[1])
                    + (self.group3()[2] * other.group0()[3])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[3]]) * other.group0())
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<MultiVector> for AntiDipoleInversion {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      136      162        0
    //    simd2       11       11        0
    //    simd3       54       56        0
    //    simd4       32       32        0
    // Totals...
    // yes simd      233      261        0
    //  no simd      448      480        0
    fn geometric_anti_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                (-(self.group1()[3] * other.group3()[3])
                    + (self.group3()[0] * other.group9()[0])
                    + (self.group3()[1] * other.group9()[1])
                    + (self.group3()[2] * other.group9()[2])),
                ((self.group1()[3] * other.group6()[3]) - (self.group3()[0] * other.group1()[0]) - (self.group3()[1] * other.group1()[1]) - (self.group3()[2] * other.group1()[2])),
            ]) - (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group3()[0], other.group8()[0]]))
                - (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group3()[1], other.group8()[1]]))
                - (Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group3()[2], other.group8()[2]]))
                - (Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group5()[0], other.group6()[0]]))
                - (Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group5()[1], other.group6()[1]]))
                - (Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group5()[2], other.group6()[2]]))
                - (Simd32x2::from(self.group2()[0]) * Simd32x2::from([other.group4()[0], other.group7()[0]]))
                - (Simd32x2::from(self.group2()[1]) * Simd32x2::from([other.group4()[1], other.group7()[1]]))
                - (Simd32x2::from(self.group2()[2]) * Simd32x2::from([other.group4()[2], other.group7()[2]]))
                + (Simd32x2::from(self.group2()[3]) * Simd32x2::from([other.group9()[3], other[e1]]))
                + (Simd32x2::from(self.group3()[3]) * Simd32x2::from([other[e45], other.group1()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(self.group0()[0] * other[e1]) - (self.group0()[1] * other.group8()[2]) + (self.group0()[2] * other.group8()[1])
                    - (other.group7()[1] * self.group2()[2])
                    - (other.group8()[0] * self.group2()[3])
                    + (self.group1()[0] * other.group6()[3])
                    + (self.group1()[1] * other.group1()[2])
                    + (self.group1()[3] * other.group6()[0])
                    + (self.group2()[0] * other.group1()[3])),
                ((self.group0()[0] * other.group8()[2])
                    - (self.group0()[1] * other[e1])
                    - (self.group0()[2] * other.group8()[0])
                    - (other.group7()[2] * self.group2()[0])
                    - (other.group8()[1] * self.group2()[3])
                    + (self.group1()[1] * other.group6()[3])
                    + (self.group1()[2] * other.group1()[0])
                    + (self.group1()[3] * other.group6()[1])
                    + (self.group2()[1] * other.group1()[3])),
                (-(self.group0()[0] * other.group8()[1]) + (self.group0()[1] * other.group8()[0])
                    - (self.group0()[2] * other[e1])
                    - (other.group7()[0] * self.group2()[1])
                    - (other.group8()[2] * self.group2()[3])
                    + (self.group1()[0] * other.group1()[1])
                    + (self.group1()[2] * other.group6()[3])
                    + (self.group1()[3] * other.group6()[2])
                    + (self.group2()[2] * other.group1()[3])),
                (-(self.group0()[1] * other.group1()[1])
                    - (self.group0()[1] * other.group6()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group6()[2])
                    - (other.group7()[0] * self.group1()[0])
                    - (other.group7()[1] * self.group1()[1])
                    - (other.group7()[2] * self.group1()[2])
                    + (other.group7()[2] * self.group3()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]) + (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[3]]))
                + (Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group7()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group7()[2], other.group7()[0], other.group7()[1], other.group6()[3]]) * swizzle!(self.group2(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group0()[0]]) * swizzle!(other.group6(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group7()[1]]) * swizzle!(self.group3(), 1, 2, 0, 1))),
            // e5
            ((other.group0()[1] * self.group3()[3])
                - (other.group8()[0] * self.group1()[0])
                - (other.group8()[0] * self.group3()[0])
                - (other.group8()[1] * self.group1()[1])
                - (other.group8()[1] * self.group3()[1])
                - (other.group8()[2] * self.group1()[2])
                - (other.group8()[2] * self.group3()[2])
                + (self.group1()[3] * other[e1])
                + (self.group2()[0] * other.group1()[0])
                - (self.group2()[0] * other.group6()[0])
                + (self.group2()[1] * other.group1()[1])
                - (self.group2()[1] * other.group6()[1])
                + (self.group2()[2] * other.group1()[2])
                - (self.group2()[2] * other.group6()[2])
                - (self.group3()[3] * other.group6()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                (-(other.group5()[1] * self.group2()[2])
                    + (self.group1()[1] * other.group3()[2])
                    + (self.group1()[3] * other.group3()[0])
                    + (self.group2()[1] * other.group9()[2])
                    + (self.group3()[3] * other.group9()[0])),
                (-(other.group5()[2] * self.group2()[0])
                    + (self.group1()[2] * other.group3()[0])
                    + (self.group1()[3] * other.group3()[1])
                    + (self.group2()[2] * other.group9()[0])
                    + (self.group3()[3] * other.group9()[1])),
                (-(other.group5()[0] * self.group2()[1])
                    + (self.group1()[0] * other.group3()[1])
                    + (self.group1()[3] * other.group3()[2])
                    + (self.group2()[2] * other.group3()[3])
                    + (self.group3()[3] * other.group9()[2])),
                (-(self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group3()[2])
                    - (self.group1()[1] * other.group9()[1])
                    - (self.group1()[2] * other.group9()[2])
                    - (self.group3()[3] * other[e45])),
            ]) + (Simd32x4::from(other.group9()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))
                + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group4()[0]]) * swizzle!(self.group2(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other.group5()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group4()[1]]) * swizzle!(self.group2(), 1, 2, 0, 1))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[0]]) * swizzle!(other.group9(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group0()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group3()[2], other.group3()[0], other.group9()[3], other.group5()[2]]) * swizzle!(self.group3(), 1, 2, 2, 2))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group9()[1], other.group4()[2]]) * swizzle!(self.group2(), 0, 1, 0, 2))
                + (Simd32x4::from([other.group9()[3], other.group9()[3], other.group3()[1], other.group5()[1]]) * swizzle!(self.group3(), 0, 1, 0, 1))),
            // e41, e42, e43
            ((Simd32x3::from(other.group0()[0]) * self.group0())
                - (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group3()[3], other.group5()[2], other.group9()[1]]))
                - (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group9()[2], other.group3()[3], other.group5()[0]]))
                - (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group5()[1], other.group9()[0], other.group3()[3]]))
                - (Simd32x3::from(other.group4()[0]) * Simd32x3::from([self.group1()[3], self.group3()[2], self.group1()[1]]))
                - (Simd32x3::from(other.group4()[1]) * Simd32x3::from([self.group1()[2], self.group1()[3], self.group3()[0]]))
                - (Simd32x3::from(other.group4()[2]) * Simd32x3::from([self.group3()[1], self.group1()[0], self.group1()[3]]))
                - (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                + (Simd32x3::from(self.group2()[3]) * other.group5())
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(other[e45]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from([other.group5()[2], other.group9()[2], other.group5()[1]]) * swizzle!(self.group0(), 1, 0, 0))
                + (Simd32x3::from([self.group1()[1], self.group3()[0], self.group1()[0]]) * swizzle!(other.group4(), 2, 2, 1))
                + (Simd32x3::from([self.group3()[2], self.group1()[2], self.group3()[1]]) * swizzle!(other.group4(), 1, 0, 0))
                + (Simd32x3::from([other.group9()[1], other.group5()[0], other.group9()[0]]) * swizzle!(self.group0(), 2, 2, 1))),
            // e23, e31, e12
            (Simd32x3::from([
                (-(self.group3()[1] * other.group9()[2]) + (self.group3()[2] * other.group9()[1])),
                ((self.group3()[0] * other.group9()[2]) - (self.group3()[2] * other.group9()[0])),
                (-(self.group3()[0] * other.group9()[1]) + (self.group3()[1] * other.group9()[0])),
            ]) + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                + (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                - (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                + (Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]) * swizzle!(other.group5(), 2, 0, 1))
                - (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]) * swizzle!(other.group5(), 1, 2, 0))
                + (Simd32x3::from([self.group2()[1], self.group3()[3], self.group3()[3]]) * swizzle!(other.group4(), 2, 1, 2))
                - (Simd32x3::from([self.group2()[2], self.group2()[0], self.group2()[1]]) * swizzle!(other.group4(), 1, 2, 0))
                + (Simd32x3::from([self.group3()[3], self.group2()[2], self.group2()[0]]) * swizzle!(other.group4(), 0, 0, 1))
                - (Simd32x3::from([other.group3()[1], other.group3()[2], other.group3()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group3()[2], other.group3()[0], other.group9()[3]]) * swizzle!(self.group0(), 1, 2, 2))
                + (Simd32x3::from([other.group9()[3], other.group9()[3], other.group3()[1]]) * swizzle!(self.group0(), 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[0] * other[e1]) + (self.group0()[1] * other.group8()[2]) - (self.group0()[2] * other.group8()[1])
                    + (other.group7()[2] * self.group2()[1])
                    + (other.group8()[0] * self.group2()[3])
                    + (self.group1()[1] * other.group6()[2])
                    + (self.group1()[3] * other.group1()[0])
                    + (self.group2()[0] * other.group1()[3])
                    + (self.group3()[0] * other.group6()[3])
                    + (self.group3()[1] * other.group1()[2])),
                (-(self.group0()[0] * other.group8()[2])
                    + (self.group0()[1] * other[e1])
                    + (self.group0()[2] * other.group8()[0])
                    + (other.group7()[0] * self.group2()[2])
                    + (other.group8()[1] * self.group2()[3])
                    + (self.group1()[2] * other.group6()[0])
                    + (self.group1()[3] * other.group1()[1])
                    + (self.group2()[1] * other.group1()[3])
                    + (self.group3()[1] * other.group6()[3])
                    + (self.group3()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group8()[1]) - (self.group0()[1] * other.group8()[0])
                    + (self.group0()[2] * other[e1])
                    + (other.group7()[1] * self.group2()[0])
                    + (other.group8()[2] * self.group2()[3])
                    + (self.group1()[0] * other.group6()[1])
                    + (self.group1()[3] * other.group1()[2])
                    + (self.group2()[2] * other.group1()[3])
                    + (self.group3()[0] * other.group1()[1])
                    + (self.group3()[2] * other.group6()[3])),
                ((self.group0()[0] * other.group8()[0]) + (self.group0()[1] * other.group8()[1]) + (self.group0()[2] * other.group8()[2])
                    - (other.group7()[1] * self.group2()[1])
                    - (other.group7()[2] * self.group2()[2])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group2()[3] * other[e1])
                    - (self.group3()[0] * other.group6()[0])
                    - (self.group3()[1] * other.group6()[1])
                    - (self.group3()[2] * other.group6()[2])),
            ]) + (Simd32x4::from(other.group0()[1]) * self.group1())
                + (Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group1()[3]]))
                - (Simd32x4::from([other.group7()[1], other.group7()[2], other.group7()[0], other.group7()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))
                - (Simd32x4::from([other.group6()[1], other.group6()[2], other.group6()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))),
            // e423, e431, e412
            ((Simd32x3::from(other.group0()[1]) * self.group0())
                - (Simd32x3::from(other.group7()[0]) * Simd32x3::from([self.group1()[3], self.group3()[2], self.group1()[1]]))
                - (Simd32x3::from(other.group7()[1]) * Simd32x3::from([self.group1()[2], self.group1()[3], self.group3()[0]]))
                - (Simd32x3::from(other.group7()[2]) * Simd32x3::from([self.group3()[1], self.group1()[0], self.group1()[3]]))
                + (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from([self.group1()[1], self.group3()[0], self.group1()[0]]) * swizzle!(other.group7(), 2, 2, 1))
                + (Simd32x3::from([self.group3()[2], self.group1()[2], self.group3()[1]]) * swizzle!(other.group7(), 1, 0, 0))
                - (Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group1()[2], other.group1()[0], other.group6()[1]]) * swizzle!(self.group0(), 1, 2, 0))
                - (Simd32x3::from([other.group6()[1], other.group6()[2], other.group6()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group6()[2], other.group6()[0], other.group6()[3]]) * swizzle!(self.group0(), 1, 2, 2))
                + (Simd32x3::from([other.group6()[3], other.group6()[3], other.group1()[1]]) * swizzle!(self.group0(), 0, 1, 0))),
            // e235, e315, e125
            (Simd32x3::from([
                ((self.group2()[1] * other.group6()[2]) + (self.group2()[2] * other.group1()[1])),
                ((self.group2()[0] * other.group1()[2]) + (self.group2()[2] * other.group6()[0])),
                ((self.group2()[0] * other.group6()[1]) + (self.group2()[1] * other.group1()[0])),
            ]) + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                - (Simd32x3::from(self.group2()[0]) * Simd32x3::from([other.group6()[3], other.group6()[2], other.group1()[1]]))
                - (Simd32x3::from(self.group2()[1]) * Simd32x3::from([other.group1()[2], other.group6()[3], other.group6()[0]]))
                - (Simd32x3::from(self.group2()[2]) * Simd32x3::from([other.group6()[1], other.group1()[0], other.group6()[3]]))
                - (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from([self.group1()[1], self.group3()[2], self.group3()[0]]) * swizzle!(other.group8(), 2, 0, 1))
                - (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]) * swizzle!(other.group8(), 1, 2, 0))
                + (Simd32x3::from([self.group1()[3], self.group1()[2], self.group1()[0]]) * swizzle!(other.group8(), 0, 0, 1))
                + (Simd32x3::from([self.group3()[1], self.group1()[3], self.group1()[3]]) * swizzle!(other.group8(), 2, 1, 2))
                - (Simd32x3::from([self.group3()[2], self.group3()[0], self.group3()[1]]) * swizzle!(other.group8(), 1, 2, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group4()[1] * self.group2()[2]) + (self.group1()[0] * other.group3()[3]) + (self.group1()[1] * other.group9()[2]) + (self.group2()[3] * other.group3()[0])),
                ((other.group4()[2] * self.group2()[0]) + (self.group1()[1] * other.group3()[3]) + (self.group1()[2] * other.group9()[0]) + (self.group2()[3] * other.group3()[1])),
                ((other.group4()[0] * self.group2()[1]) + (self.group1()[0] * other.group9()[1]) + (self.group1()[2] * other.group3()[3]) + (self.group2()[3] * other.group3()[2])),
                (-(other.group5()[2] * self.group2()[2])
                    - (self.group2()[0] * other.group9()[0])
                    - (self.group2()[1] * other.group9()[1])
                    - (self.group2()[2] * other.group9()[2])),
            ]) + (Simd32x4::from(other.group9()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group3()[0]]) * swizzle!(self.group3(), 0, 1, 2, 0))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[3]]) * swizzle!(other.group3(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[2], other.group3()[1]]) * swizzle!(self.group3(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group4()[2], other.group4()[0], other.group4()[1], other.group5()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other.group3()[1]]) * swizzle!(self.group1(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group5()[1], other.group5()[2], other.group5()[0], other.group0()[0]]) * swizzle!(self.group3(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group3()[2]]) * swizzle!(self.group3(), 1, 2, 0, 2))
                - (Simd32x4::from([other.group9()[1], other.group9()[2], other.group9()[0], other.group3()[2]]) * swizzle!(self.group1(), 2, 0, 1, 2))
                - (Simd32x4::from([other[e45], other[e45], other[e45], other.group5()[1]]) * swizzle!(self.group2(), 0, 1, 2, 1))),
            // e1234
            ((other.group0()[0] * self.group2()[3]) - (self.group0()[0] * other.group5()[0]) + (self.group0()[0] * other.group9()[0]) - (self.group0()[1] * other.group5()[1])
                + (self.group0()[1] * other.group9()[1])
                - (self.group0()[2] * other.group5()[2])
                + (self.group0()[2] * other.group9()[2])
                - (other.group4()[0] * self.group1()[0])
                + (other.group4()[0] * self.group3()[0])
                - (other.group4()[1] * self.group1()[1])
                + (other.group4()[1] * self.group3()[1])
                - (other.group4()[2] * self.group1()[2])
                + (other.group4()[2] * self.group3()[2])
                - (self.group1()[3] * other[e45])
                - (self.group2()[3] * other.group3()[3])),
        );
    }
}
impl GeometricAntiProduct<Plane> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       20        0
    //    simd4        9       11        0
    // Totals...
    // yes simd       18       31        0
    //  no simd       45       64        0
    fn geometric_anti_product(self, other: Plane) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) - (self.group2()[3] * other.group0()[0])),
                (-(self.group0()[2] * other.group0()[0]) - (self.group2()[3] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[1]) - (self.group2()[3] * other.group0()[2])),
                ((self.group3()[0] * other.group0()[0]) + (self.group3()[1] * other.group0()[1]) + (self.group3()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))),
            // e23, e31, e12, e45
            ((Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[2]])
                * swizzle!(other.group0(), 1, 2, 0, 2)
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[1]]) * swizzle!(other.group0(), 2, 0, 1, 1))
                - (swizzle!(self.group1(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(self.group2()[2] * other.group0()[1]) + (self.group3()[3] * other.group0()[0])),
                (-(self.group2()[0] * other.group0()[2]) + (self.group3()[3] * other.group0()[1])),
                (-(self.group2()[1] * other.group0()[0]) + (self.group3()[3] * other.group0()[2])),
                0.0,
            ]) + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[1]]) * swizzle!(other.group0(), 2, 0, 1, 1))
                + (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (self.group1()[1] * other.group0()[2]),
                (self.group1()[2] * other.group0()[0]),
                (self.group1()[0] * other.group0()[1]),
                (-(self.group2()[1] * other.group0()[1]) - (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<QuadNum> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       20        0
    //    simd4       11       11        0
    // Totals...
    // yes simd       14       31        0
    //  no simd       47       64        0
    fn geometric_anti_product(self, other: QuadNum) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group3()[0] * other.group0()[0]) * -1.0),
                ((self.group3()[1] * other.group0()[0]) * -1.0),
                ((self.group3()[2] * other.group0()[0]) * -1.0),
                0.0,
            ]) + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                + (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]) * swizzle!(other.group0(), 3, 3, 3, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group2()[0] * other.group0()[0]) + (self.group3()[0] * other.group0()[2])),
                ((self.group2()[1] * other.group0()[0]) + (self.group3()[1] * other.group0()[2])),
                ((self.group2()[2] * other.group0()[0]) + (self.group3()[2] * other.group0()[2])),
                ((self.group2()[3] * other.group0()[1]) * -1.0),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]) * swizzle!(other.group0(), 1, 1, 1, 3))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]) * swizzle!(other.group0(), 3, 3, 3, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (self.group3()[0] * other.group0()[1]),
                (self.group3()[1] * other.group0()[1]),
                (self.group3()[2] * other.group0()[1]),
                0.0,
            ]) + (Simd32x4::from(other.group0()[1]) * self.group1())
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))
                + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (self.group3()[0] * other.group0()[3]),
                (self.group3()[1] * other.group0()[3]),
                (self.group3()[2] * other.group0()[3]),
                0.0,
            ]) + (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]) * swizzle!(other.group0(), 1, 1, 1, 0))
                + (swizzle!(other.group0(), 0, 0, 0, 3) * self.group2())),
        );
    }
}
impl GeometricAntiProduct<RoundPoint> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       23       35        0
    //    simd4        9       11        0
    // Totals...
    // yes simd       32       46        0
    //  no simd       59       79        0
    fn geometric_anti_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[2]])
                * swizzle!(other.group0(), 3, 3, 3, 2)
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other[e2]]))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (swizzle!(self.group3(), 0, 1, 2, 1) * swizzle!(other.group0(), 3, 3, 3, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[0] * other[e2]) + (self.group2()[0] * other.group0()[3]) + (self.group3()[1] * other.group0()[2])),
                ((self.group0()[1] * other[e2]) + (self.group2()[1] * other.group0()[3]) + (self.group3()[2] * other.group0()[0])),
                ((self.group0()[2] * other[e2]) + (self.group2()[2] * other.group0()[3]) + (self.group3()[0] * other.group0()[1])),
                (-(self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2]) - (self.group2()[3] * other[e2])),
            ]) + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group3()[3]]) * other.group0())
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group2()[1] * other.group0()[2]) + (self.group3()[0] * other[e2]) - (self.group3()[3] * other.group0()[0])),
                (-(self.group2()[2] * other.group0()[0]) + (self.group3()[1] * other[e2]) - (self.group3()[3] * other.group0()[1])),
                (-(self.group2()[0] * other.group0()[1]) + (self.group3()[2] * other[e2]) - (self.group3()[3] * other.group0()[2])),
                ((self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other[e2]) * self.group1())
                + (swizzle!(self.group2(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(self.group0()[0] * other[e2]) + (self.group1()[1] * other.group0()[2]) + (self.group2()[0] * other.group0()[3])),
                (-(self.group0()[1] * other[e2]) + (self.group1()[2] * other.group0()[0]) + (self.group2()[1] * other.group0()[3])),
                (-(self.group0()[2] * other[e2]) + (self.group1()[0] * other.group0()[1]) + (self.group2()[2] * other.group0()[3])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other.group0()[3])),
            ]) - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<Scalar> for AntiDipoleInversion {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        1        0
    //    simd4        0        5        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0       23        0
    fn geometric_anti_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other[scalar]) * self.group0()),
            // e23, e31, e12, e45
            (Simd32x4::from(other[scalar]) * self.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e15, e25, e35, e1234
            (Simd32x4::from(other[scalar]) * self.group2()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other[scalar]) * self.group3() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
    }
}
impl GeometricAntiProduct<Sphere> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       28        0
    //    simd4       11       13        0
    // Totals...
    // yes simd       26       41        0
    //  no simd       59       80        0
    fn geometric_anti_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) - (self.group2()[3] * other.group0()[0]) - (self.group3()[0] * other[e4315])),
                (-(self.group0()[2] * other.group0()[0]) - (self.group2()[3] * other.group0()[1]) - (self.group3()[1] * other[e4315])),
                (-(self.group0()[0] * other.group0()[1]) - (self.group2()[3] * other.group0()[2]) - (self.group3()[2] * other[e4315])),
                ((self.group3()[0] * other.group0()[0]) + (self.group3()[1] * other.group0()[1]) + (self.group3()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other[e4315]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group2()[0] * other[e4315]) + (self.group3()[2] * other.group0()[1])),
                ((self.group2()[1] * other[e4315]) + (self.group3()[0] * other.group0()[2])),
                ((self.group2()[2] * other[e4315]) + (self.group3()[1] * other.group0()[0])),
                (-(self.group1()[2] * other.group0()[2]) - (self.group3()[3] * other[e4315])),
            ]) + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[1]]) * swizzle!(other.group0(), 2, 0, 1, 1))
                - (swizzle!(self.group1(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(self.group2()[2] * other.group0()[1]) + (self.group3()[3] * other.group0()[0])),
                (-(self.group2()[0] * other.group0()[2]) + (self.group3()[3] * other.group0()[1])),
                (-(self.group2()[1] * other.group0()[0]) + (self.group3()[3] * other.group0()[2])),
                ((self.group1()[3] * other[e4315]) * -1.0),
            ]) + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[1]]) * swizzle!(other.group0(), 2, 0, 1, 1))
                + (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[2]])
                * swizzle!(other.group0(), 2, 0, 1, 2)
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other[e4315], other[e4315], other[e4315], other.group0()[1]]) * swizzle!(self.group2(), 0, 1, 2, 1))),
        );
    }
}
impl GeometricAntiProduct<TripleNum> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       18        0
    //    simd4        6        8        0
    // Totals...
    // yes simd       12       26        0
    //  no simd       30       50        0
    fn geometric_anti_product(self, other: TripleNum) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[2]) - (other.group0()[0] * self.group3()[0])),
                ((self.group0()[1] * other.group0()[2]) - (other.group0()[0] * self.group3()[1])),
                ((self.group0()[2] * other.group0()[2]) - (other.group0()[0] * self.group3()[2])),
                (other.group0()[1] * self.group2()[3]),
            ]) + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))),
            // e415, e425, e435, e321
            ((Simd32x4::from(other.group0()[1])
                * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))
                + (Simd32x4::from(other.group0()[2]) * self.group1())),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (other.group0()[2] * self.group2()[0]),
                (other.group0()[2] * self.group2()[1]),
                (other.group0()[2] * self.group2()[2]),
                0.0,
            ]) + (Simd32x4::from(other.group0()[1]) * self.group1())
                + (Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group0()[2]]) * self.group3())),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(self.group0()[0] * other.group0()[1]) + (other.group0()[2] * self.group3()[0])),
                (-(self.group0()[1] * other.group0()[1]) + (other.group0()[2] * self.group3()[1])),
                (-(self.group0()[2] * other.group0()[1]) + (other.group0()[2] * self.group3()[2])),
                ((other.group0()[0] * self.group1()[3]) * -1.0),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[2]]) * self.group2())),
        );
    }
}
impl GeometricAntiProduct<VersorEven> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       76       92        0
    //    simd4       37       37        0
    // Totals...
    // yes simd      113      129        0
    //  no simd      224      240        0
    fn geometric_anti_product(self, other: VersorEven) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3])
                    + (self.group0()[1] * other.group1()[2])
                    + (self.group1()[0] * other.group3()[3])
                    + (self.group1()[1] * other.group0()[2])
                    + (self.group2()[3] * other.group3()[0])
                    + (self.group3()[2] * other.group0()[1])),
                ((self.group0()[1] * other.group0()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group1()[1] * other.group3()[3])
                    + (self.group1()[2] * other.group0()[0])
                    + (self.group2()[3] * other.group3()[1])
                    + (self.group3()[0] * other.group0()[2])),
                ((self.group0()[2] * other.group0()[3])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group1()[0] * other.group0()[1])
                    + (self.group1()[2] * other.group3()[3])
                    + (self.group2()[3] * other.group3()[2])
                    + (self.group3()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group1()[3]]) * swizzle!(other.group1(), 3, 3, 1, 3))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[3]]) * swizzle!(other.group3(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]) * swizzle!(self.group1(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[1]]) * swizzle!(self.group1(), 2, 0, 1, 1))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group3()[3], other.group3()[2]]) * swizzle!(self.group3(), 1, 2, 2, 2))
                - (Simd32x4::from([other.group3()[3], other.group3()[3], other.group0()[1], other.group3()[1]]) * swizzle!(self.group3(), 0, 1, 0, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group1()[1] * other.group1()[2])
                    + (self.group2()[0] * other.group3()[3])
                    + (self.group2()[1] * other.group0()[2])
                    + (self.group3()[0] * other.group1()[3])
                    + (self.group3()[1] * other.group3()[2])
                    + (self.group3()[3] * other.group0()[0])),
                ((self.group1()[2] * other.group1()[0])
                    + (self.group2()[1] * other.group3()[3])
                    + (self.group2()[2] * other.group0()[0])
                    + (self.group3()[1] * other.group1()[3])
                    + (self.group3()[2] * other.group3()[0])
                    + (self.group3()[3] * other.group0()[1])),
                ((self.group1()[2] * other.group0()[3])
                    + (self.group2()[0] * other.group0()[1])
                    + (self.group2()[2] * other.group3()[3])
                    + (self.group3()[0] * other.group3()[1])
                    + (self.group3()[2] * other.group1()[3])
                    + (self.group3()[3] * other.group0()[2])),
                (-(self.group1()[2] * other.group3()[2])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])
                    - (self.group3()[0] * other.group1()[0])
                    - (self.group3()[1] * other.group1()[1])
                    - (self.group3()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 3, 3, 1, 0))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[2], self.group0()[1]]) * swizzle!(other.group2(), 2, 0, 3, 1))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group3()[3]]) * other.group3())
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[2]]) * swizzle!(other.group2(), 0, 1, 2, 2))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[1]]) * swizzle!(other.group3(), 1, 2, 0, 1))
                + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group0()[3]]) * swizzle!(self.group1(), 0, 1, 0, 3))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (swizzle!(self.group2(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group1()[1] * other.group2()[2]) + (self.group1()[3] * other.group2()[0]) + (self.group3()[1] * other.group2()[2]) + (self.group3()[3] * other.group1()[0])),
                ((self.group1()[2] * other.group2()[0]) + (self.group1()[3] * other.group2()[1]) + (self.group3()[2] * other.group2()[0]) + (self.group3()[3] * other.group1()[1])),
                ((self.group1()[2] * other.group2()[3]) + (self.group1()[3] * other.group2()[2]) + (self.group3()[2] * other.group2()[3]) + (self.group3()[3] * other.group1()[2])),
                (-(self.group1()[2] * other.group2()[2])
                    - (self.group3()[1] * other.group2()[1])
                    - (self.group3()[2] * other.group2()[2])
                    - (self.group3()[3] * other.group1()[3])),
            ]) + (Simd32x4::from(self.group2()[0]) * Simd32x4::from([other.group0()[3], other.group3()[2], other.group1()[1], other.group3()[0]]))
                - (Simd32x4::from(self.group2()[0]) * Simd32x4::from([other.group1()[3], other.group1()[2], other.group3()[1], other.group1()[0]]))
                + (Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group1()[2], other.group0()[3], other.group3()[0], other.group3()[1]]))
                - (Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group3()[2], other.group1()[3], other.group1()[0], other.group1()[1]]))
                - (Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[3], other.group1()[2]]))
                + (Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group0()[3], other.group3()[2]]))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[1]]) * swizzle!(other.group2(), 1, 2, 0, 1))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[1], other.group0()[3]]) * swizzle!(self.group3(), 0, 1, 0, 3))
                - (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                + (swizzle!(self.group1(), 0, 1, 0, 3) * swizzle!(other.group2(), 3, 3, 1, 3))
                - (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group2(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[1])
                    + (self.group1()[1] * other.group3()[2])
                    + (self.group1()[3] * other.group1()[0])
                    - (self.group2()[3] * other.group2()[0])
                    + (self.group3()[3] * other.group0()[0])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[1] * other.group2()[3]) - (self.group0()[2] * other.group2()[0])
                    + (self.group1()[2] * other.group3()[0])
                    + (self.group1()[3] * other.group1()[1])
                    - (self.group2()[3] * other.group2()[1])
                    + (self.group3()[3] * other.group0()[1])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[0]) - (self.group0()[2] * other.group2()[3])
                    + (self.group1()[0] * other.group3()[1])
                    + (self.group1()[3] * other.group1()[2])
                    + (self.group2()[2] * other.group3()[3])
                    - (self.group2()[3] * other.group2()[2])),
                (-(self.group0()[1] * other.group1()[1])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group3()[3])),
            ]) + (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group3()[2], self.group3()[0]]) * swizzle!(other.group0(), 2, 0, 3, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group0()[1]]) * swizzle!(self.group3(), 0, 1, 0, 1))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[2], other.group0()[2]]) * swizzle!(self.group3(), 1, 2, 3, 2))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group0()[1], other.group0()[3]]) * swizzle!(self.group2(), 0, 1, 0, 3))),
        );
    }
}
impl GeometricAntiProduct<VersorOdd> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       48       64        0
    //    simd4       44       44        0
    // Totals...
    // yes simd       92      108        0
    //  no simd      224      240        0
    fn geometric_anti_product(self, other: VersorOdd) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[2]) + (self.group1()[1] * other.group0()[2]) + (self.group2()[3] * other.group1()[0])
                    - (self.group3()[0] * other.group2()[3])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[2] * other.group1()[0]) + (self.group1()[2] * other.group0()[0]) + (self.group2()[3] * other.group1()[1])
                    - (self.group3()[1] * other.group2()[3])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1]) + (self.group2()[3] * other.group1()[2])
                    - (self.group3()[2] * other.group2()[3])),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[3] * other.group1()[3]) - (self.group2()[2] * other.group0()[2])
                    + (self.group3()[1] * other.group3()[1])
                    + (self.group3()[2] * other.group3()[2])),
            ]) - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group1()[2], other.group3()[1], other.group2()[0]]))
                - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group3()[2], other.group1()[3], other.group1()[0], other.group2()[1]]))
                - (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[3], other.group2()[2]]))
                + (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group3(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[1]]) * swizzle!(other.group0(), 2, 0, 1, 1))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group3(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group0()[0]]) * swizzle!(self.group2(), 3, 3, 3, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) + (self.group2()[3] * other.group2()[0]) - (self.group3()[1] * other.group3()[2])),
                ((self.group0()[2] * other.group2()[0]) + (self.group2()[3] * other.group2()[1]) - (self.group3()[2] * other.group3()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group2()[3] * other.group2()[2]) - (self.group3()[2] * other.group1()[3])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2]) - (self.group1()[2] * other.group3()[2])),
            ]) + (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]) * swizzle!(self.group3(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group2()[3], other.group0()[2]]) * swizzle!(self.group2(), 1, 2, 2, 2))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group2()[3]]) * swizzle!(self.group3(), 0, 1, 0, 3))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[1], other.group0()[1]]) * swizzle!(self.group2(), 0, 1, 0, 1))
                + (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[1]]) * swizzle!(self.group3(), 2, 0, 1, 1))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group3(), 0, 1, 2, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group1()[1] * other.group2()[2]) + (self.group1()[3] * other.group2()[0]) + (self.group2()[0] * other.group1()[3]) + (self.group2()[1] * other.group1()[2])),
                ((self.group1()[2] * other.group2()[0]) + (self.group1()[3] * other.group2()[1]) + (self.group2()[1] * other.group1()[3]) + (self.group2()[2] * other.group1()[0])),
                ((self.group1()[0] * other.group2()[1]) + (self.group1()[3] * other.group2()[2]) + (self.group2()[2] * other.group0()[3]) + (self.group2()[2] * other.group1()[3])),
                (-(self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[1]]) * swizzle!(other.group3(), 2, 0, 1, 1))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[3]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group0()[2]]) * swizzle!(other.group3(), 0, 1, 2, 2))
                + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group0()[3]]) * swizzle!(self.group2(), 0, 1, 0, 3))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]) * swizzle!(self.group3(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group3()[3], other.group0()[1]]) * swizzle!(self.group3(), 1, 2, 2, 1))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[3]]) * swizzle!(self.group2(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group2()[1], other.group0()[0]]) * swizzle!(self.group3(), 0, 1, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) + (self.group1()[1] * other.group3()[2]) + (self.group2()[3] * other.group2()[0]) + (self.group3()[2] * other.group1()[1])),
                ((self.group0()[2] * other.group2()[0]) + (self.group1()[2] * other.group3()[0]) + (self.group2()[3] * other.group2()[1]) + (self.group3()[0] * other.group1()[2])),
                ((self.group0()[0] * other.group2()[1]) + (self.group1()[0] * other.group3()[1]) + (self.group2()[3] * other.group2()[2]) + (self.group3()[1] * other.group1()[0])),
                (-(self.group2()[1] * other.group1()[1])
                    - (self.group2()[1] * other.group3()[1])
                    - (self.group2()[2] * other.group1()[2])
                    - (self.group2()[2] * other.group3()[2])),
            ]) + (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                + (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group3()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[2]]) * swizzle!(self.group3(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group2()[3], other.group3()[0]]) * swizzle!(self.group2(), 1, 2, 2, 0))
                - (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group2()[0]]) * swizzle!(self.group3(), 0, 1, 0, 0))
                - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[2]]) * swizzle!(self.group1(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group2()[1]]) * swizzle!(self.group3(), 1, 2, 2, 1))
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 0, 1, 0, 0))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group2()[1]]) * swizzle!(self.group1(), 2, 0, 1, 1))),
        );
    }
}
impl GeometricAntiProduct<VersorRoundPoint> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       22       39        0
    //    simd4       13       13        0
    // Totals...
    // yes simd       35       52        0
    //  no simd       74       91        0
    fn geometric_anti_product(self, other: VersorRoundPoint) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group1()[1] * self.group0()[0]) + (self.group1()[0] * other.group0()[3])),
                ((other.group1()[1] * self.group0()[1]) + (self.group1()[1] * other.group0()[3])),
                ((other.group1()[1] * self.group0()[2]) + (self.group1()[2] * other.group0()[3])),
                ((self.group3()[2] * other.group0()[2]) * -1.0),
            ]) + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (swizzle!(self.group3(), 0, 1, 2, 1) * swizzle!(other.group0(), 3, 3, 3, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group1()[0] * self.group0()[0]) + (self.group2()[0] * other.group0()[3]) + (self.group3()[1] * other.group0()[2])),
                ((other.group1()[0] * self.group0()[1]) + (self.group2()[1] * other.group0()[3]) + (self.group3()[2] * other.group0()[0])),
                ((other.group1()[0] * self.group0()[2]) + (self.group2()[2] * other.group0()[3]) + (self.group3()[0] * other.group0()[1])),
                (-(other.group1()[0] * self.group2()[3]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group1()[1]) * self.group1())
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group3()[3]]) * other.group0())
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group2()[1] * other.group0()[2]) - (self.group3()[3] * other.group0()[0])),
                (-(self.group2()[2] * other.group0()[0]) - (self.group3()[3] * other.group0()[1])),
                (-(self.group2()[0] * other.group0()[1]) - (self.group3()[3] * other.group0()[2])),
                (self.group2()[2] * other.group0()[2]),
            ]) + (Simd32x4::from(other.group1()[0]) * self.group1())
                + (Simd32x4::from([other.group1()[0], other.group1()[0], other.group1()[0], other.group1()[1]]) * self.group3())
                + (Simd32x4::from([other.group1()[1], other.group1()[1], other.group1()[1], other.group0()[0]]) * swizzle!(self.group2(), 0, 1, 2, 0))
                + (swizzle!(self.group2(), 2, 0, 1, 1) * swizzle!(other.group0(), 1, 2, 0, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group1()[0] * self.group0()[0]) + (self.group1()[1] * other.group0()[2]) + (self.group2()[0] * other.group0()[3])),
                (-(other.group1()[0] * self.group0()[1]) + (self.group1()[2] * other.group0()[0]) + (self.group2()[1] * other.group0()[3])),
                (-(other.group1()[0] * self.group0()[2]) + (self.group1()[0] * other.group0()[1]) + (self.group2()[2] * other.group0()[3])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other.group0()[3])),
            ]) + (Simd32x4::from(other.group1()[1]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[3]]))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<VersorSphere> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       26       43        0
    //    simd4       12       12        0
    // Totals...
    // yes simd       38       55        0
    //  no simd       74       91        0
    fn geometric_anti_product(self, other: VersorSphere) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(other.group1()[0] * self.group3()[0]) + (other.group1()[1] * self.group0()[0])
                    - (self.group0()[1] * other.group0()[2])
                    - (self.group2()[3] * other.group0()[0])),
                (-(other.group1()[0] * self.group3()[1]) + (other.group1()[1] * self.group0()[1])
                    - (self.group0()[2] * other.group0()[0])
                    - (self.group2()[3] * other.group0()[1])),
                (-(other.group1()[0] * self.group3()[2]) + (other.group1()[1] * self.group0()[2])
                    - (self.group0()[0] * other.group0()[1])
                    - (self.group2()[3] * other.group0()[2])),
                ((self.group3()[0] * other.group0()[0]) + (self.group3()[1] * other.group0()[1]) + (self.group3()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group1()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group1()[1] * self.group1()[0]) + (self.group0()[0] * other.group0()[3]) + (self.group3()[2] * other.group0()[1])),
                ((other.group1()[1] * self.group1()[1]) + (self.group0()[1] * other.group0()[3]) + (self.group3()[0] * other.group0()[2])),
                ((other.group1()[1] * self.group1()[2]) + (self.group0()[2] * other.group0()[3]) + (self.group3()[1] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]]))
                + (Simd32x4::from([other.group1()[0], other.group1()[0], other.group1()[0], other.group0()[3]]) * self.group2())
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group3(), 1, 2, 0, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(self.group2()[2] * other.group0()[1]) + (self.group3()[3] * other.group0()[0])),
                (-(self.group2()[0] * other.group0()[2]) + (self.group3()[3] * other.group0()[1])),
                (-(self.group2()[1] * other.group0()[0]) + (self.group3()[3] * other.group0()[2])),
                ((other.group1()[0] * self.group1()[3]) * -1.0),
            ]) + (Simd32x4::from(other.group1()[1]) * self.group2())
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[1]]) * swizzle!(other.group0(), 2, 0, 1, 1))
                + (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group1()[1] * self.group3()[0]) + (self.group1()[1] * other.group0()[2])),
                (-(other.group1()[1] * self.group3()[1]) + (self.group1()[2] * other.group0()[0])),
                (-(other.group1()[1] * self.group3()[2]) + (self.group1()[0] * other.group0()[1])),
                ((other.group1()[1] * self.group3()[3]) - (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([other.group1()[0], other.group1()[0], other.group1()[0], other.group0()[0]]) * swizzle!(self.group2(), 0, 1, 2, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))),
        );
    }
}
impl InfixGeometricAntiProduct for AntiDualNum321 {}
impl GeometricAntiProduct<AntiCircleRotor> for AntiDualNum321 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       17        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        5       19        0
    //  no simd        8       25        0
    fn geometric_anti_product(self, other: AntiCircleRotor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (-(Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[1] * other.group1()[0] * -1.0),
                (self.group0()[1] * other.group1()[1] * -1.0),
                (self.group0()[1] * other.group1()[2] * -1.0),
                ((self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group1()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[1])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[1] * other.group2()[2])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDipoleInversion> for AntiDualNum321 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       20        0
    //    simd4        2        4        0
    // Totals...
    // yes simd        8       24        0
    //  no simd       14       36        0
    fn geometric_anti_product(self, other: AntiDipoleInversion) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[2])),
                (self.group0()[0] * other.group1()[3] * -1.0),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group1()[1])),
                (-(self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            ((Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * other.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]]) * other.group2())),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                (self.group0()[1] * other.group3()[3]),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]]) * other.group3())),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum321> for AntiDualNum321 {
    type Output = DualNum321;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        4        0
    fn geometric_anti_product(self, other: AntiDualNum321) -> Self::Output {
        return DualNum321::from_groups(/* e321, e12345 */ Simd32x2::from([
            ((other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
            (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1])),
        ]));
    }
}
impl GeometricAntiProduct<AntiDualNum4> for AntiDualNum321 {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        1        5        0
    fn geometric_anti_product(self, other: AntiDualNum4) -> Self::Output {
        return QuadNum::from_groups(/* e4, e5, e321, e12345 */ Simd32x4::from([
            (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[0])),
            0.0,
            (self.group0()[0] * other.group0()[1]),
            (self.group0()[1] * other.group0()[1] * -1.0),
        ]));
    }
}
impl GeometricAntiProduct<AntiDualNum5> for AntiDualNum321 {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        1        5        0
    fn geometric_anti_product(self, other: AntiDualNum5) -> Self::Output {
        return QuadNum::from_groups(/* e4, e5, e321, e12345 */ Simd32x4::from([
            0.0,
            ((self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[0])),
            (self.group0()[0] * other.group0()[1]),
            (self.group0()[1] * other.group0()[1] * -1.0),
        ]));
    }
}
impl GeometricAntiProduct<AntiFlatPoint> for AntiDualNum321 {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3       10        0
    fn geometric_anti_product(self, other: AntiFlatPoint) -> Self::Output {
        return AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other.group0()[3] * -1.0)]),
            // e15, e25, e35, scalar
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[2])),
                (self.group0()[0] * other.group0()[3] * -1.0),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiFlector> for AntiDualNum321 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       20        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        4       21        0
    //  no simd        4       24        0
    fn geometric_anti_product(self, other: AntiFlector) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3] * -1.0)]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                (self.group0()[1] * other.group0()[3]),
            ]) * Simd32x4::from(-1.0)),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[1] * other.group1()[0] * -1.0),
                (self.group0()[1] * other.group1()[1] * -1.0),
                (self.group0()[1] * other.group1()[2] * -1.0),
                (-(self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiLine> for AntiDualNum321 {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3       15        0
    fn geometric_anti_product(self, other: AntiLine) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0] * -1.0),
                (self.group0()[1] * other.group0()[1] * -1.0),
                (self.group0()[1] * other.group0()[2] * -1.0),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group1()[2])),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiMotor> for AntiDualNum321 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        5        0
    //    simd4        1        4        0
    // Totals...
    // yes simd        1        9        0
    //  no simd        4       21        0
    fn geometric_anti_product(self, other: AntiMotor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other.group0()[3] * -1.0)]),
            // e415, e425, e435, e321
            (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group0()[0]) * other.group1()) - (Simd32x4::from(self.group0()[1]) * other.group1())),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiPlane> for AntiDualNum321 {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        1       14        0
    fn geometric_anti_product(self, other: AntiPlane) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0] * -1.0),
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[0] * other.group0()[2] * -1.0),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0] * -1.0),
                (self.group0()[1] * other.group0()[1] * -1.0),
                (self.group0()[1] * other.group0()[2] * -1.0),
                (-(self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiQuadNum> for AntiDualNum321 {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4        8        0
    fn geometric_anti_product(self, other: AntiQuadNum) -> Self::Output {
        return QuadNum::from_groups(/* e4, e5, e321, e12345 */ Simd32x4::from([
            (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[0])),
            ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[1])),
            ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2])),
            (-(self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group0()[3])),
        ]));
    }
}
impl GeometricAntiProduct<AntiScalar> for AntiDualNum321 {
    type Output = AntiDualNum321;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        1        0
    // no simd        0        2        0
    fn geometric_anti_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiDualNum321::from_groups(/* e45, scalar */ (Simd32x2::from(other[e12345]) * self.group0()));
    }
}
impl GeometricAntiProduct<AntiTripleNum> for AntiDualNum321 {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        7        0
    fn geometric_anti_product(self, other: AntiTripleNum) -> Self::Output {
        return QuadNum::from_groups(/* e4, e5, e321, e12345 */ Simd32x4::from([
            (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[0])),
            ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[1])),
            (self.group0()[0] * other.group0()[2]),
            (self.group0()[1] * other.group0()[2] * -1.0),
        ]));
    }
}
impl GeometricAntiProduct<Circle> for AntiDualNum321 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       17        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        6       19        0
    //  no simd        6       25        0
    fn geometric_anti_product(self, other: Circle) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[2])),
                (self.group0()[0] * other.group1()[3] * -1.0),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from(self.group0()[1]) * other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group2()[0])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[1])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group2()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<CircleRotor> for AntiDualNum321 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       14        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        5       17        0
    //  no simd        8       26        0
    fn geometric_anti_product(self, other: CircleRotor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((Simd32x4::from(self.group0()[0])
                * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[1] * other.group1()[0]),
                (self.group0()[1] * other.group1()[1]),
                (self.group0()[1] * other.group1()[2]),
                ((self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group1()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group2()[0])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[1])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group2()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<Dipole> for AntiDualNum321 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       17        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        6       19        0
    //  no simd        6       25        0
    fn geometric_anti_product(self, other: Dipole) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group0()[2])),
                (self.group0()[0] * other.group1()[3] * -1.0),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from(self.group0()[1]) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[1])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[1] * other.group2()[2])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<DipoleInversion> for AntiDualNum321 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       23        0
    //    simd4        1        2        0
    // Totals...
    // yes simd       11       25        0
    //  no simd       14       31        0
    fn geometric_anti_product(self, other: DipoleInversion) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group0()[2])),
                (self.group0()[0] * other.group1()[3] * -1.0),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group1()[1])),
                (-(self.group0()[0] * other.group3()[2]) - (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3]),
            ]),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group3()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group3()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group3()[2])),
                (-(self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group2()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<DualNum321> for AntiDualNum321 {
    type Output = AntiDualNum321;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        1        2        0
    // no simd        2        4        0
    fn geometric_anti_product(self, other: DualNum321) -> Self::Output {
        return AntiDualNum321::from_groups(
            // e45, scalar
            (-(Simd32x2::from(other.group0()[0]) * swizzle!(self.group0(), 1, 0)) + (Simd32x2::from(other.group0()[1]) * self.group0())),
        );
    }
}
impl GeometricAntiProduct<DualNum4> for AntiDualNum321 {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        1        4        0
    fn geometric_anti_product(self, other: DualNum4) -> Self::Output {
        return AntiQuadNum::from_groups(/* e1234, e3215, e45, scalar */ Simd32x4::from([
            ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[0])),
            0.0,
            (self.group0()[0] * other.group0()[1]),
            (self.group0()[1] * other.group0()[1]),
        ]));
    }
}
impl GeometricAntiProduct<DualNum5> for AntiDualNum321 {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        1        4        0
    fn geometric_anti_product(self, other: DualNum5) -> Self::Output {
        return AntiQuadNum::from_groups(/* e1234, e3215, e45, scalar */ Simd32x4::from([
            0.0,
            (-(self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[0])),
            (self.group0()[0] * other.group0()[1]),
            (self.group0()[1] * other.group0()[1]),
        ]));
    }
}
impl GeometricAntiProduct<FlatPoint> for AntiDualNum321 {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        9        0
    fn geometric_anti_product(self, other: FlatPoint) -> Self::Output {
        return CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other.group0()[3])]),
            // e235, e315, e125, e12345
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group0()[2])),
                (self.group0()[0] * other.group0()[3] * -1.0),
            ]),
        );
    }
}
impl GeometricAntiProduct<Flector> for AntiDualNum321 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        9        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        1       12        0
    //  no simd        4       21        0
    fn geometric_anti_product(self, other: Flector) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3] * -1.0)]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                (self.group0()[1] * other.group0()[3]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[1] * other.group1()[0]),
                (self.group0()[1] * other.group1()[1]),
                (self.group0()[1] * other.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<Line> for AntiDualNum321 {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3       12        0
    fn geometric_anti_product(self, other: Line) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<Motor> for AntiDualNum321 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       12        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        4       13        0
    //  no simd        4       16        0
    fn geometric_anti_product(self, other: Motor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other.group0()[3])]),
            // e23, e31, e12, e45
            (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]]) * other.group0()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (-(self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<MultiVector> for AntiDualNum321 {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       36        0
    //    simd2        1        3        0
    //    simd3        4        8        0
    // Totals...
    // yes simd       23       47        0
    //  no simd       32       66        0
    fn geometric_anti_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from(self.group0()[1]) * swizzle!(other.group0(), 1, 0) * Simd32x2::from([1.0, -1.0]))
                - (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group6()[3], other.group3()[3]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group5()[0]) + (self.group0()[1] * other.group9()[0])),
                ((self.group0()[0] * other.group5()[1]) + (self.group0()[1] * other.group9()[1])),
                ((self.group0()[0] * other.group5()[2]) + (self.group0()[1] * other.group9()[2])),
                (-(self.group0()[0] * other[e45]) - (self.group0()[1] * other[e45])),
            ]),
            // e5
            ((self.group0()[0] * other.group9()[3]) - (self.group0()[1] * other.group9()[3])),
            // e15, e25, e35, e45
            Simd32x4::from([
                (-(self.group0()[0] * other.group8()[0]) + (self.group0()[1] * other.group8()[0])),
                (-(self.group0()[0] * other.group8()[1]) + (self.group0()[1] * other.group8()[1])),
                (-(self.group0()[0] * other.group8()[2]) + (self.group0()[1] * other.group8()[2])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group6()[3])),
            ]),
            // e41, e42, e43
            ((Simd32x3::from(self.group0()[0]) * other.group7()) + (Simd32x3::from(self.group0()[1]) * other.group7())),
            // e23, e31, e12
            (-(Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group9()[0]) - (self.group0()[1] * other.group5()[0])),
                (-(self.group0()[0] * other.group9()[1]) - (self.group0()[1] * other.group5()[1])),
                (-(self.group0()[0] * other.group9()[2]) - (self.group0()[1] * other.group5()[2])),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group3()[3])),
            ]),
            // e423, e431, e412
            (-(Simd32x3::from(self.group0()[0]) * other.group4()) - (Simd32x3::from(self.group0()[1]) * other.group4())),
            // e235, e315, e125
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                - (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group6()[0]) - (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group6()[1]) - (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group6()[2]) - (self.group0()[1] * other.group1()[2])),
                (-(self.group0()[0] * other[e1]) + (self.group0()[1] * other[e1])),
            ]),
            // e1234
            ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[3])),
        );
    }
}
impl GeometricAntiProduct<Plane> for AntiDualNum321 {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        1       11        0
    fn geometric_anti_product(self, other: Plane) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0] * -1.0),
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[0] * other.group0()[2] * -1.0),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from(0.0),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<QuadNum> for AntiDualNum321 {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        1        3        0
    // no simd        4       12        0
    fn geometric_anti_product(self, other: QuadNum) -> Self::Output {
        return AntiQuadNum::from_groups(
            // e1234, e3215, e45, scalar
            ((Simd32x4::from([self.group0()[1], self.group0()[0], self.group0()[1], self.group0()[0]])
                * swizzle!(other.group0(), 0, 1, 2, 2)
                * Simd32x4::from([1.0, -1.0, -1.0, -1.0]))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group0()[1]]) * swizzle!(other.group0(), 0, 1, 3, 3))),
        );
    }
}
impl GeometricAntiProduct<RoundPoint> for AntiDualNum321 {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2       16        0
    fn geometric_anti_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0] * -1.0),
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[0] * other.group0()[2] * -1.0),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([0.0, 0.0, 0.0, ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[3]))]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0] * -1.0),
                (self.group0()[1] * other.group0()[1] * -1.0),
                (self.group0()[1] * other.group0()[2] * -1.0),
                (-(self.group0()[0] * other[e2]) + (self.group0()[1] * other[e2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Scalar> for AntiDualNum321 {
    type Output = DualNum321;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        2        0
    // no simd        0        4        0
    fn geometric_anti_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return DualNum321::from_groups(/* e321, e12345 */ (Simd32x2::from(other[scalar]) * self.group0() * Simd32x2::from([1.0, -1.0])));
    }
}
impl GeometricAntiProduct<Sphere> for AntiDualNum321 {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2       13        0
    fn geometric_anti_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0] * -1.0),
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[0] * other.group0()[2] * -1.0),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[0] * other[e4315]) - (self.group0()[1] * other[e4315]))]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<TripleNum> for AntiDualNum321 {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn geometric_anti_product(self, other: TripleNum) -> Self::Output {
        return AntiQuadNum::from_groups(/* e1234, e3215, e45, scalar */ Simd32x4::from([
            ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[0])),
            (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[1])),
            (self.group0()[0] * other.group0()[2]),
            (self.group0()[1] * other.group0()[2]),
        ]));
    }
}
impl GeometricAntiProduct<VersorEven> for AntiDualNum321 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       20        0
    //    simd4        2        5        0
    // Totals...
    // yes simd       10       25        0
    //  no simd       16       40        0
    fn geometric_anti_product(self, other: VersorEven) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[0] * other.group1()[3]),
            ]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * other.group0())),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group1()[1])),
                (-(self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group1()[2])),
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group1()[3])),
            ]),
            // e15, e25, e35, e1234
            ((Simd32x4::from(self.group0()[0])
                * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]])
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group3()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group3()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group3()[2])),
                (-(self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group2()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorOdd> for AntiDualNum321 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       16        0
    //    simd4        2        4        0
    // Totals...
    // yes simd       10       20        0
    //  no simd       16       32        0
    fn geometric_anti_product(self, other: VersorOdd) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (-(Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (Simd32x4::from(self.group0()[1]) * other.group0())),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group1()[1])),
                (-(self.group0()[0] * other.group3()[2]) - (self.group0()[1] * other.group1()[2])),
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[3])),
            ]),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group3()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group3()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group3()[2])),
                (-(self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group2()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorRoundPoint> for AntiDualNum321 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2       11        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        2       13        0
    //  no simd        2       19        0
    fn geometric_anti_product(self, other: VersorRoundPoint) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other.group1()[1])]),
            // e23, e31, e12, e45
            (Simd32x4::from(self.group0()[0])
                * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]])
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e15, e25, e35, e1234
            Simd32x4::from([0.0, 0.0, 0.0, ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[3]))]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0] * -1.0),
                (self.group0()[1] * other.group0()[1] * -1.0),
                (self.group0()[1] * other.group0()[2] * -1.0),
                (-(self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[0])),
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorSphere> for AntiDualNum321 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        9        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        2       11        0
    //  no simd        2       17        0
    fn geometric_anti_product(self, other: VersorSphere) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other.group1()[1] * -1.0)]),
            // e415, e425, e435, e321
            (Simd32x4::from(self.group0()[0])
                * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]])
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e235, e315, e125, e5
            Simd32x4::from([0.0, 0.0, 0.0, ((self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group0()[3]))]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[0])),
            ]),
        );
    }
}
impl InfixGeometricAntiProduct for AntiDualNum4 {}
impl GeometricAntiProduct<AntiCircleRotor> for AntiDualNum4 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        7       26        0
    fn geometric_anti_product(self, other: AntiCircleRotor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group0()[2])),
                (self.group0()[1] * other.group2()[3] * -1.0),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[2]) - (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[1] * other.group2()[0] * -1.0),
                (self.group0()[1] * other.group2()[1] * -1.0),
                (self.group0()[1] * other.group2()[2] * -1.0),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other.group2()[0]),
                (self.group0()[0] * other.group2()[1]),
                (self.group0()[0] * other.group2()[2]),
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[0] * other.group2()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDipoleInversion> for AntiDualNum4 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       22        0
    //    simd4        1        3        0
    // Totals...
    // yes simd       11       25        0
    //  no simd       14       34        0
    fn geometric_anti_product(self, other: AntiDipoleInversion) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group0()[2])),
                (self.group0()[0] * other.group3()[3]),
            ]),
            // e23, e31, e12, e45
            ((Simd32x4::from(self.group0()[1]) * other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group2()[0]),
                (self.group0()[1] * other.group2()[1]),
                (self.group0()[1] * other.group2()[2]),
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group2()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group3()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group3()[1])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[1] * other.group3()[2])),
                (self.group0()[1] * other.group3()[3]),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum321> for AntiDualNum4 {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        1        5        0
    fn geometric_anti_product(self, other: AntiDualNum321) -> Self::Output {
        return QuadNum::from_groups(/* e4, e5, e321, e12345 */ Simd32x4::from([
            ((other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[0])),
            0.0,
            (other.group0()[0] * self.group0()[1]),
            (other.group0()[1] * self.group0()[1] * -1.0),
        ]));
    }
}
impl GeometricAntiProduct<AntiDualNum4> for AntiDualNum4 {
    type Output = DualNum4;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        1        4        0
    fn geometric_anti_product(self, other: AntiDualNum4) -> Self::Output {
        return DualNum4::from_groups(/* e4, e12345 */ Simd32x2::from([
            (-(other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
            (other.group0()[1] * self.group0()[1] * -1.0),
        ]));
    }
}
impl GeometricAntiProduct<AntiDualNum5> for AntiDualNum4 {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        1        7        0
    fn geometric_anti_product(self, other: AntiDualNum5) -> Self::Output {
        return QuadNum::from_groups(/* e4, e5, e321, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[1] * -1.0),
            (self.group0()[1] * other.group0()[0] * -1.0),
            (self.group0()[0] * other.group0()[0]),
            (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl GeometricAntiProduct<AntiFlatPoint> for AntiDualNum4 {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0       15        0
    fn geometric_anti_product(self, other: AntiFlatPoint) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e15, e25, e35, e1234
            (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]]) * other.group0()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiFlector> for AntiDualNum4 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       12        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        4       14        0
    //  no simd        4       20        0
    fn geometric_anti_product(self, other: AntiFlector) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self.group0()[0]) * other.group1()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]]) * other.group0()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3]),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiLine> for AntiDualNum4 {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       15        0
    //    simd3        0        2        0
    // Totals...
    // yes simd        3       17        0
    //  no simd        3       21        0
    fn geometric_anti_product(self, other: AntiLine) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self.group0()[0]) * other.group0() * Simd32x3::from(-1.0)),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group0()[2])),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (self.group0()[1] * other.group1()[0] * -1.0),
                (self.group0()[1] * other.group1()[1] * -1.0),
                (self.group0()[1] * other.group1()[2] * -1.0),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiMotor> for AntiDualNum4 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       15        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        4       19        0
    //  no simd        4       31        0
    fn geometric_anti_product(self, other: AntiMotor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0] * -1.0),
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[0] * other.group0()[2] * -1.0),
                (-(self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group0()[2])),
                (self.group0()[0] * other.group1()[3]),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from(self.group0()[1]) * other.group1() * Simd32x4::from(-1.0)),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[0])
                * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
    }
}
impl GeometricAntiProduct<AntiPlane> for AntiDualNum4 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0       13        0
    fn geometric_anti_product(self, other: AntiPlane) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self.group0()[0]) * other.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3])]),
            // e15, e25, e35, e1234
            Simd32x4::from(0.0),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group0()[1]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
    }
}
impl GeometricAntiProduct<AntiQuadNum> for AntiDualNum4 {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4        9        0
    fn geometric_anti_product(self, other: AntiQuadNum) -> Self::Output {
        return QuadNum::from_groups(/* e4, e5, e321, e12345 */ Simd32x4::from([
            ((self.group0()[0] * other.group0()[2]) - (self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group0()[0])),
            (self.group0()[1] * other.group0()[1] * -1.0),
            ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[2])),
            (-(self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[3])),
        ]));
    }
}
impl GeometricAntiProduct<AntiScalar> for AntiDualNum4 {
    type Output = AntiDualNum4;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        1        0
    // no simd        0        2        0
    fn geometric_anti_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiDualNum4::from_groups(/* e1234, scalar */ (Simd32x2::from(other[e12345]) * self.group0()));
    }
}
impl GeometricAntiProduct<AntiTripleNum> for AntiDualNum4 {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        7        0
    fn geometric_anti_product(self, other: AntiTripleNum) -> Self::Output {
        return QuadNum::from_groups(/* e4, e5, e321, e12345 */ Simd32x4::from([
            (-(self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group0()[0])),
            (self.group0()[1] * other.group0()[1] * -1.0),
            (self.group0()[0] * other.group0()[1]),
            (-(self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
        ]));
    }
}
impl GeometricAntiProduct<Circle> for AntiDualNum4 {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       15        0
    //    simd3        1        2        0
    // Totals...
    // yes simd        4       17        0
    //  no simd        6       21        0
    fn geometric_anti_product(self, other: Circle) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])) + (Simd32x3::from(self.group0()[1]) * other.group0())),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group2()[0]),
                (self.group0()[1] * other.group2()[1]),
                (self.group0()[1] * other.group2()[2]),
                (self.group0()[0] * other.group1()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group2()[0]),
                (self.group0()[0] * other.group2()[1]),
                (self.group0()[0] * other.group2()[2]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<CircleRotor> for AntiDualNum4 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        7       23        0
    fn geometric_anti_product(self, other: CircleRotor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[2])),
                (self.group0()[1] * other.group2()[3]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group2()[0]),
                (self.group0()[1] * other.group2()[1]),
                (self.group0()[1] * other.group2()[2]),
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[0] * other.group2()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group2()[0]),
                (self.group0()[0] * other.group2()[1]),
                (self.group0()[0] * other.group2()[2]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<Dipole> for AntiDualNum4 {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       14        0
    //    simd3        1        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        4       17        0
    //  no simd        6       24        0
    fn geometric_anti_product(self, other: Dipole) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (-(Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])) - (Simd32x3::from(self.group0()[1]) * other.group0())),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[2]) - (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3]),
            ]),
            // e235, e315, e125, e4
            (Simd32x4::from([
                (self.group0()[1] * other.group2()[0]),
                (self.group0()[1] * other.group2()[1]),
                (self.group0()[1] * other.group2()[2]),
                (self.group0()[0] * other.group1()[3]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[0] * other.group2()[0]),
                (self.group0()[0] * other.group2()[1]),
                (self.group0()[0] * other.group2()[2]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<DipoleInversion> for AntiDualNum4 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       19        0
    //    simd4        1        5        0
    // Totals...
    // yes simd       11       24        0
    //  no simd       14       39        0
    fn geometric_anti_product(self, other: DipoleInversion) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[0]) + (self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[0] * other.group3()[2]) - (self.group0()[1] * other.group0()[2])),
                (self.group0()[0] * other.group3()[3] * -1.0),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[2]) - (self.group0()[1] * other.group1()[2])),
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group1()[3])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]) * Simd32x4::from(-1.0)),
            // e1, e2, e3, e4
            ((Simd32x4::from(self.group0()[1])
                * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))),
        );
    }
}
impl GeometricAntiProduct<DualNum321> for AntiDualNum4 {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        1        5        0
    fn geometric_anti_product(self, other: DualNum321) -> Self::Output {
        return AntiQuadNum::from_groups(/* e1234, e3215, e45, scalar */ Simd32x4::from([
            ((self.group0()[0] * other.group0()[0]) + (self.group0()[0] * other.group0()[1])),
            0.0,
            (self.group0()[1] * other.group0()[0] * -1.0),
            (self.group0()[1] * other.group0()[1]),
        ]));
    }
}
impl GeometricAntiProduct<DualNum4> for AntiDualNum4 {
    type Output = AntiDualNum4;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        1        3        0
    fn geometric_anti_product(self, other: DualNum4) -> Self::Output {
        return AntiDualNum4::from_groups(/* e1234, scalar */ Simd32x2::from([
            ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
            (self.group0()[1] * other.group0()[1]),
        ]));
    }
}
impl GeometricAntiProduct<DualNum5> for AntiDualNum4 {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        1        5        0
    fn geometric_anti_product(self, other: DualNum5) -> Self::Output {
        return AntiQuadNum::from_groups(/* e1234, e3215, e45, scalar */ Simd32x4::from([
            (self.group0()[0] * other.group0()[1]),
            (self.group0()[1] * other.group0()[0]),
            (self.group0()[0] * other.group0()[0]),
            ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl GeometricAntiProduct<FlatPoint> for AntiDualNum4 {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0        7        0
    //  no simd        0       19        0
    fn geometric_anti_product(self, other: FlatPoint) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e235, e315, e125, e4
            (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<Flector> for AntiDualNum4 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       15        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        4       19        0
    //  no simd        4       31        0
    fn geometric_anti_product(self, other: Flector) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self.group0()[0]) * other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0] * -1.0),
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[0] * other.group0()[2] * -1.0),
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[3])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]) * Simd32x4::from(-1.0)),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[0] * other.group0()[3]),
            ]),
        );
    }
}
impl GeometricAntiProduct<Line> for AntiDualNum4 {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       12        0
    //    simd3        0        1        0
    // Totals...
    // yes simd        3       13        0
    //  no simd        3       15        0
    fn geometric_anti_product(self, other: Line) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group0()[0]) * other.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[2])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group1()[0]),
                (self.group0()[1] * other.group1()[1]),
                (self.group0()[1] * other.group1()[2]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<Motor> for AntiDualNum4 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       16        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        4       17        0
    //  no simd        4       20        0
    fn geometric_anti_product(self, other: Motor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[2])),
                (self.group0()[0] * other.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group1()[0]),
                (self.group0()[1] * other.group1()[1]),
                (self.group0()[1] * other.group1()[2]),
                (self.group0()[0] * other.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * other.group1()),
        );
    }
}
impl GeometricAntiProduct<MultiVector> for AntiDualNum4 {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       34        0
    //    simd3        5       10        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       19       45        0
    //  no simd       32       68        0
    fn geometric_anti_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((self.group0()[0] * other[e1]) + (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[0] * other.group9()[3]) - (self.group0()[1] * other.group0()[0])),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (self.group0()[1] * other.group9()[0]),
                (self.group0()[1] * other.group9()[1]),
                (self.group0()[1] * other.group9()[2]),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other[e45])),
            ]) + (Simd32x4::from(self.group0()[0]) * other.group3())),
            // e5
            (self.group0()[1] * other.group9()[3] * -1.0),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group0()[1] * other.group8()[0]),
                (self.group0()[1] * other.group8()[1]),
                (self.group0()[1] * other.group8()[2]),
                ((self.group0()[0] * other[e1]) - (self.group0()[1] * other.group6()[3])),
            ]),
            // e41, e42, e43
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                + (Simd32x3::from(self.group0()[1]) * other.group7())),
            // e23, e31, e12
            ((Simd32x3::from(self.group0()[0]) * other.group8()) + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group5()[0])),
                (-(self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group5()[1])),
                (-(self.group0()[0] * other.group3()[2]) - (self.group0()[1] * other.group5()[2])),
                ((self.group0()[0] * other.group9()[3]) + (self.group0()[1] * other.group3()[3])),
            ]),
            // e423, e431, e412
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                - (Simd32x3::from(self.group0()[0]) * other.group5())
                - (Simd32x3::from(self.group0()[1]) * other.group4())),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]) * Simd32x3::from(-1.0)),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group8()[0]) - (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group8()[1]) - (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group8()[2]) - (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other[e1]),
            ]),
            // e1234
            ((self.group0()[0] * other.group0()[1]) + (self.group0()[0] * other.group6()[3]) + (self.group0()[1] * other.group1()[3])),
        );
    }
}
impl GeometricAntiProduct<Plane> for AntiDualNum4 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        6        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        8        0
    //  no simd        0       14        0
    fn geometric_anti_product(self, other: Plane) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self.group0()[0]) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3])]),
            // e235, e315, e125, e5
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other.group0()[3] * -1.0)]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<QuadNum> for AntiDualNum4 {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4        8        0
    fn geometric_anti_product(self, other: QuadNum) -> Self::Output {
        return AntiQuadNum::from_groups(/* e1234, e3215, e45, scalar */ Simd32x4::from([
            ((self.group0()[0] * other.group0()[2]) + (self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[0])),
            (self.group0()[1] * other.group0()[1]),
            ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
            ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[3])),
        ]));
    }
}
impl GeometricAntiProduct<RoundPoint> for AntiDualNum4 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        0        5        0
    //  no simd        0       14        0
    fn geometric_anti_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other[e2]])),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other[e2])]),
            // e15, e25, e35, e1234
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other.group0()[3])]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other[e2]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
    }
}
impl GeometricAntiProduct<Scalar> for AntiDualNum4 {
    type Output = DualNum4;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        2        0
    // no simd        0        4        0
    fn geometric_anti_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return DualNum4::from_groups(/* e4, e12345 */ (Simd32x2::from(other[scalar]) * self.group0() * Simd32x2::from(-1.0)));
    }
}
impl GeometricAntiProduct<Sphere> for AntiDualNum4 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0        7        0
    //  no simd        0       19        0
    fn geometric_anti_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self.group0()[0]) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3])]),
            // e235, e315, e125, e5
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other.group0()[3] * -1.0)]),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other[e4315]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
    }
}
impl GeometricAntiProduct<TripleNum> for AntiDualNum4 {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn geometric_anti_product(self, other: TripleNum) -> Self::Output {
        return AntiQuadNum::from_groups(/* e1234, e3215, e45, scalar */ Simd32x4::from([
            ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[0])),
            (self.group0()[1] * other.group0()[1]),
            (self.group0()[0] * other.group0()[1]),
            ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[2])),
        ]));
    }
}
impl GeometricAntiProduct<VersorEven> for AntiDualNum4 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       16        0
    //    simd4        3        5        0
    // Totals...
    // yes simd        8       21        0
    //  no simd       17       36        0
    fn geometric_anti_product(self, other: VersorEven) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (self.group0()[0] * other.group3()[0]),
                (self.group0()[0] * other.group3()[1]),
                (self.group0()[0] * other.group3()[2]),
                0.0,
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                + (Simd32x4::from(self.group0()[1]) * other.group0())),
            // e23, e31, e12, e45
            ((Simd32x4::from(self.group0()[1]) * other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])) + (Simd32x4::from(self.group0()[0]) * other.group2())),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group2()[0]),
                (self.group0()[1] * other.group2()[1]),
                (self.group0()[1] * other.group2()[2]),
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group3()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group3()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group3()[1])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[1] * other.group3()[2])),
                (self.group0()[1] * other.group2()[3]),
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorOdd> for AntiDualNum4 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       16        0
    //    simd4        3        5        0
    // Totals...
    // yes simd        8       21        0
    //  no simd       17       36        0
    fn geometric_anti_product(self, other: VersorOdd) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (self.group0()[0] * other.group3()[0]),
                (self.group0()[0] * other.group3()[1]),
                (self.group0()[0] * other.group3()[2]),
                0.0,
            ]) - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                - (Simd32x4::from(self.group0()[1]) * other.group0())),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[2]) - (self.group0()[1] * other.group1()[2])),
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group1()[3])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]) * Simd32x4::from(-1.0)),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (self.group0()[1] * other.group3()[0]),
                (self.group0()[1] * other.group3()[1]),
                (self.group0()[1] * other.group3()[2]),
                (-(self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group2()[3])),
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))),
        );
    }
}
impl GeometricAntiProduct<VersorRoundPoint> for AntiDualNum4 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        8        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        2       10        0
    //  no simd        2       16        0
    fn geometric_anti_product(self, other: VersorRoundPoint) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group1()[0])]),
            // e15, e25, e35, e1234
            Simd32x4::from([0.0, 0.0, 0.0, ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group0()[3]))]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group0()[1])
                * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]])
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
    }
}
impl GeometricAntiProduct<VersorSphere> for AntiDualNum4 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2       13        0
    fn geometric_anti_product(self, other: VersorSphere) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (-(self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3])]),
            // e235, e315, e125, e5
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other.group0()[3] * -1.0)]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                (-(self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
            ]),
        );
    }
}
impl InfixGeometricAntiProduct for AntiDualNum5 {}
impl GeometricAntiProduct<AntiCircleRotor> for AntiDualNum5 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       13        0
    //    simd4        1        4        0
    // Totals...
    // yes simd        4       17        0
    //  no simd        7       29        0
    fn geometric_anti_product(self, other: AntiCircleRotor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]) * Simd32x4::from(-1.0)),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group1()[1])),
                (-(self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3]),
            ]),
            // e235, e315, e125, e5
            (-(Simd32x4::from(self.group0()[0]) * other.group1()) - (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]]) * other.group2())),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0] * -1.0),
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[0] * other.group0()[2] * -1.0),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDipoleInversion> for AntiDualNum5 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       22        0
    //    simd4        1        3        0
    // Totals...
    // yes simd       11       25        0
    //  no simd       14       34        0
    fn geometric_anti_product(self, other: AntiDipoleInversion) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[0] * other.group2()[3]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group1()[2])),
                (-(self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group1()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) - (self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group2()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group2()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group2()[2])),
                (self.group0()[1] * other.group2()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(self.group0()[1]) * other.group3() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum321> for AntiDualNum5 {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        1        5        0
    fn geometric_anti_product(self, other: AntiDualNum321) -> Self::Output {
        return QuadNum::from_groups(/* e4, e5, e321, e12345 */ Simd32x4::from([
            0.0,
            (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[0])),
            (other.group0()[0] * self.group0()[1]),
            (other.group0()[1] * self.group0()[1] * -1.0),
        ]));
    }
}
impl GeometricAntiProduct<AntiDualNum4> for AntiDualNum5 {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        1        8        0
    fn geometric_anti_product(self, other: AntiDualNum4) -> Self::Output {
        return QuadNum::from_groups(/* e4, e5, e321, e12345 */ Simd32x4::from([
            (other.group0()[0] * self.group0()[1] * -1.0),
            (other.group0()[1] * self.group0()[0] * -1.0),
            (other.group0()[0] * self.group0()[0] * -1.0),
            (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1])),
        ]));
    }
}
impl GeometricAntiProduct<AntiDualNum5> for AntiDualNum5 {
    type Output = DualNum5;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        1        4        0
    fn geometric_anti_product(self, other: AntiDualNum5) -> Self::Output {
        return DualNum5::from_groups(/* e5, e12345 */ Simd32x2::from([
            (-(other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
            (other.group0()[1] * self.group0()[1] * -1.0),
        ]));
    }
}
impl GeometricAntiProduct<AntiFlatPoint> for AntiDualNum5 {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0       10        0
    fn geometric_anti_product(self, other: AntiFlatPoint) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from(self.group0()[1]) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3] * -1.0)]),
        );
    }
}
impl GeometricAntiProduct<AntiFlector> for AntiDualNum5 {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4       16        0
    fn geometric_anti_product(self, other: AntiFlector) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[2])),
                (self.group0()[1] * other.group0()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[1] * other.group1()[0] * -1.0),
                (self.group0()[1] * other.group1()[1] * -1.0),
                (self.group0()[1] * other.group1()[2] * -1.0),
                (-(self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiLine> for AntiDualNum5 {
    type Output = Line;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        4        0
    // no simd        3       12        0
    fn geometric_anti_product(self, other: AntiLine) -> Self::Output {
        return Line::from_groups(
            // e415, e425, e435
            (Simd32x3::from(self.group0()[1]) * other.group0() * Simd32x3::from(-1.0)),
            // e235, e315, e125
            (-(Simd32x3::from(self.group0()[0]) * other.group0()) - (Simd32x3::from(self.group0()[1]) * other.group1())),
        );
    }
}
impl GeometricAntiProduct<AntiMotor> for AntiDualNum5 {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        1        4        0
    // no simd        4       16        0
    fn geometric_anti_product(self, other: AntiMotor) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(self.group0()[1]) * other.group0() * Simd32x4::from(-1.0)),
            // e235, e315, e125, e5
            (-(Simd32x4::from(self.group0()[0]) * other.group0()) - (Simd32x4::from(self.group0()[1]) * other.group1())),
        );
    }
}
impl GeometricAntiProduct<AntiPlane> for AntiDualNum5 {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        6        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        8        0
    //  no simd        0       14        0
    fn geometric_anti_product(self, other: AntiPlane) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0] * -1.0),
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[0] * other.group0()[2] * -1.0),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group0()[1]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
    }
}
impl GeometricAntiProduct<AntiQuadNum> for AntiDualNum5 {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4        9        0
    fn geometric_anti_product(self, other: AntiQuadNum) -> Self::Output {
        return QuadNum::from_groups(/* e4, e5, e321, e12345 */ Simd32x4::from([
            (self.group0()[1] * other.group0()[0] * -1.0),
            (-(self.group0()[0] * other.group0()[2]) - (self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group0()[1])),
            (-(self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[2])),
            (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[3])),
        ]));
    }
}
impl GeometricAntiProduct<AntiScalar> for AntiDualNum5 {
    type Output = AntiDualNum5;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        1        0
    // no simd        0        2        0
    fn geometric_anti_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiDualNum5::from_groups(/* e3215, scalar */ (Simd32x2::from(other[e12345]) * self.group0()));
    }
}
impl GeometricAntiProduct<AntiTripleNum> for AntiDualNum5 {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        8        0
    fn geometric_anti_product(self, other: AntiTripleNum) -> Self::Output {
        return QuadNum::from_groups(/* e4, e5, e321, e12345 */ Simd32x4::from([
            (self.group0()[1] * other.group0()[0] * -1.0),
            (-(self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group0()[1])),
            (self.group0()[0] * other.group0()[0] * -1.0),
            (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[2])),
        ]));
    }
}
impl GeometricAntiProduct<Circle> for AntiDualNum5 {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       14        0
    //    simd3        0        1        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        6       17        0
    //  no simd        6       25        0
    fn geometric_anti_product(self, other: Circle) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group0()[1]) * other.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group2()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group2()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group2()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]) * Simd32x4::from(-1.0)),
        );
    }
}
impl GeometricAntiProduct<CircleRotor> for AntiDualNum5 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       22        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        7       23        0
    //  no simd        7       26        0
    fn geometric_anti_product(self, other: CircleRotor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group2()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group2()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group2()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0] * -1.0),
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[0] * other.group0()[2] * -1.0),
                (-(self.group0()[0] * other.group1()[3]) + (self.group0()[0] * other.group2()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Dipole> for AntiDualNum5 {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       13        0
    //    simd3        0        2        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        6       17        0
    //  no simd        6       27        0
    fn geometric_anti_product(self, other: Dipole) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self.group0()[1]) * other.group0() * Simd32x3::from(-1.0)),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group1()[1])),
                (-(self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group2()[0])),
                (-(self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group2()[1])),
                (-(self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group2()[2])),
                0.0,
            ]),
            // e1, e2, e3, e5
            (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]) * Simd32x4::from(-1.0)),
        );
    }
}
impl GeometricAntiProduct<DipoleInversion> for AntiDualNum5 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       18        0
    //    simd4        3        6        0
    // Totals...
    // yes simd        6       24        0
    //  no simd       15       42        0
    fn geometric_anti_product(self, other: DipoleInversion) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[0] * other.group2()[3]),
            ]) * Simd32x4::from(-1.0)),
            // e415, e425, e435, e321
            ((Simd32x4::from(self.group0()[1]) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group0()[1] * other.group2()[0]) * -1.0),
                ((self.group0()[1] * other.group2()[1]) * -1.0),
                ((self.group0()[1] * other.group2()[2]) * -1.0),
                0.0,
            ]) - (Simd32x4::from(self.group0()[0]) * other.group1())
                - (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * other.group3())),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group3()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group3()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group3()[2])),
                (self.group0()[1] * other.group2()[3] * -1.0),
            ]),
        );
    }
}
impl GeometricAntiProduct<DualNum321> for AntiDualNum5 {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        1        5        0
    fn geometric_anti_product(self, other: DualNum321) -> Self::Output {
        return AntiQuadNum::from_groups(/* e1234, e3215, e45, scalar */ Simd32x4::from([
            0.0,
            (-(self.group0()[0] * other.group0()[0]) + (self.group0()[0] * other.group0()[1])),
            (self.group0()[1] * other.group0()[0] * -1.0),
            (self.group0()[1] * other.group0()[1]),
        ]));
    }
}
impl GeometricAntiProduct<DualNum4> for AntiDualNum5 {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        1        6        0
    fn geometric_anti_product(self, other: DualNum4) -> Self::Output {
        return AntiQuadNum::from_groups(/* e1234, e3215, e45, scalar */ Simd32x4::from([
            (self.group0()[1] * other.group0()[0]),
            (self.group0()[0] * other.group0()[1]),
            (self.group0()[0] * other.group0()[0] * -1.0),
            ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl GeometricAntiProduct<DualNum5> for AntiDualNum5 {
    type Output = AntiDualNum5;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        1        3        0
    fn geometric_anti_product(self, other: DualNum5) -> Self::Output {
        return AntiDualNum5::from_groups(/* e3215, scalar */ Simd32x2::from([
            ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
            (self.group0()[1] * other.group0()[1]),
        ]));
    }
}
impl GeometricAntiProduct<FlatPoint> for AntiDualNum5 {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0       10        0
    fn geometric_anti_product(self, other: FlatPoint) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from(self.group0()[1]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e1, e2, e3, e5
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3] * -1.0)]),
        );
    }
}
impl GeometricAntiProduct<Flector> for AntiDualNum5 {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4       12        0
    fn geometric_anti_product(self, other: Flector) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group0()[2])),
                (self.group0()[1] * other.group0()[3]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[1] * other.group1()[0]),
                (self.group0()[1] * other.group1()[1]),
                (self.group0()[1] * other.group1()[2]),
                (-(self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Line> for AntiDualNum5 {
    type Output = AntiLine;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        3        0
    // no simd        3        9        0
    fn geometric_anti_product(self, other: Line) -> Self::Output {
        return AntiLine::from_groups(
            // e23, e31, e12
            (Simd32x3::from(self.group0()[1]) * other.group0()),
            // e15, e25, e35
            ((Simd32x3::from(self.group0()[0]) * other.group0()) + (Simd32x3::from(self.group0()[1]) * other.group1())),
        );
    }
}
impl GeometricAntiProduct<Motor> for AntiDualNum5 {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        1        3        0
    // no simd        4       12        0
    fn geometric_anti_product(self, other: Motor) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from(self.group0()[1]) * other.group0()),
            // e15, e25, e35, e3215
            ((Simd32x4::from(self.group0()[0]) * other.group0()) + (Simd32x4::from(self.group0()[1]) * other.group1())),
        );
    }
}
impl GeometricAntiProduct<MultiVector> for AntiDualNum5 {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       32        0
    //    simd3        3        8        0
    //    simd4        3        5        0
    // Totals...
    // yes simd       17       45        0
    //  no simd       32       76        0
    fn geometric_anti_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[0] * other[e45]) - (self.group0()[1] * other.group0()[0])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[0] * other.group4()[0]) + (self.group0()[1] * other.group9()[0])),
                (-(self.group0()[0] * other.group4()[1]) + (self.group0()[1] * other.group9()[1])),
                (-(self.group0()[0] * other.group4()[2]) + (self.group0()[1] * other.group9()[2])),
                (self.group0()[1] * other[e45] * -1.0),
            ]),
            // e5
            (-(self.group0()[0] * other.group0()[0]) - (self.group0()[0] * other.group3()[3]) - (self.group0()[1] * other.group9()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group6()[0]) + (self.group0()[1] * other.group8()[0])),
                ((self.group0()[0] * other.group6()[1]) + (self.group0()[1] * other.group8()[1])),
                ((self.group0()[0] * other.group6()[2]) + (self.group0()[1] * other.group8()[2])),
                ((self.group0()[1] * other.group6()[3]) * -1.0),
            ]) - (Simd32x4::from(self.group0()[0]) * other.group1())),
            // e41, e42, e43
            (Simd32x3::from(self.group0()[1]) * other.group7()),
            // e23, e31, e12
            ((Simd32x3::from(self.group0()[0]) * other.group7()) + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))),
            // e415, e425, e435, e321
            ((Simd32x4::from(self.group0()[1])
                * Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other.group3()[3]])
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[2], other[e45]]))),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[1]) * other.group4() * Simd32x3::from(-1.0)),
            // e235, e315, e125
            (-(Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                - (Simd32x3::from(self.group0()[0]) * other.group5())
                - (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[0]) * -1.0),
                ((self.group0()[1] * other.group1()[1]) * -1.0),
                ((self.group0()[1] * other.group1()[2]) * -1.0),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other[e1])),
            ]) - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group6()[3]]))),
            // e1234
            (self.group0()[1] * other.group1()[3]),
        );
    }
}
impl GeometricAntiProduct<Plane> for AntiDualNum5 {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        6        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        8        0
    //  no simd        0       14        0
    fn geometric_anti_product(self, other: Plane) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0] * -1.0),
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[0] * other.group0()[2] * -1.0),
                0.0,
            ]),
            // e1, e2, e3, e5
            (Simd32x4::from(self.group0()[1]) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
    }
}
impl GeometricAntiProduct<QuadNum> for AntiDualNum5 {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4        8        0
    fn geometric_anti_product(self, other: QuadNum) -> Self::Output {
        return AntiQuadNum::from_groups(/* e1234, e3215, e45, scalar */ Simd32x4::from([
            (self.group0()[1] * other.group0()[0]),
            (-(self.group0()[0] * other.group0()[2]) + (self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[1])),
            (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[2])),
            ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[3])),
        ]));
    }
}
impl GeometricAntiProduct<RoundPoint> for AntiDualNum5 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0        7        0
    //  no simd        0       19        0
    fn geometric_anti_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3])]),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3] * -1.0)]),
            // e15, e25, e35, e1234
            (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other[e2]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
    }
}
impl GeometricAntiProduct<Scalar> for AntiDualNum5 {
    type Output = DualNum5;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        2        0
    // no simd        0        4        0
    fn geometric_anti_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return DualNum5::from_groups(/* e5, e12345 */ (Simd32x2::from(other[scalar]) * self.group0() * Simd32x2::from(-1.0)));
    }
}
impl GeometricAntiProduct<Sphere> for AntiDualNum5 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        4        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0        8        0
    //  no simd        0       20        0
    fn geometric_anti_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other[e4315] * -1.0)]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other[e4315] * -1.0)]),
            // e235, e315, e125, e5
            (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * other.group0() * Simd32x4::from(-1.0)),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other[e4315]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
    }
}
impl GeometricAntiProduct<TripleNum> for AntiDualNum5 {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        7        0
    fn geometric_anti_product(self, other: TripleNum) -> Self::Output {
        return AntiQuadNum::from_groups(/* e1234, e3215, e45, scalar */ Simd32x4::from([
            (self.group0()[1] * other.group0()[0]),
            ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[1])),
            (self.group0()[0] * other.group0()[0] * -1.0),
            ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[2])),
        ]));
    }
}
impl GeometricAntiProduct<VersorEven> for AntiDualNum5 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       31        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       13       32        0
    //  no simd       16       35        0
    fn geometric_anti_product(self, other: VersorEven) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group1()[2])),
                (-(self.group0()[0] * other.group3()[3]) - (self.group0()[1] * other.group1()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) - (self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group2()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group2()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group2()[2])),
                (self.group0()[1] * other.group3()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group3()[0]) * -1.0),
                ((self.group0()[1] * other.group3()[1]) * -1.0),
                ((self.group0()[1] * other.group3()[2]) * -1.0),
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group2()[3])),
            ]) - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))),
        );
    }
}
impl GeometricAntiProduct<VersorOdd> for AntiDualNum5 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       16        0
    //    simd4        3        6        0
    // Totals...
    // yes simd        7       22        0
    //  no simd       16       40        0
    fn geometric_anti_product(self, other: VersorOdd) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0] * -1.0),
                (self.group0()[1] * other.group0()[1] * -1.0),
                (self.group0()[1] * other.group0()[2] * -1.0),
                (-(self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            ((Simd32x4::from(self.group0()[1]) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))),
            // e235, e315, e125, e5
            (-(Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))
                - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group3()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group3()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group3()[2])),
                (self.group0()[1] * other.group2()[3] * -1.0),
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorRoundPoint> for AntiDualNum5 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2       12        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        2       14        0
    //  no simd        2       20        0
    fn geometric_anti_product(self, other: VersorRoundPoint) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[1]))]),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3] * -1.0)]),
            // e15, e25, e35, e1234
            (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0] * -1.0),
                (self.group0()[1] * other.group0()[1] * -1.0),
                (self.group0()[1] * other.group0()[2] * -1.0),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorSphere> for AntiDualNum5 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2       12        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        2       14        0
    //  no simd        2       20        0
    fn geometric_anti_product(self, other: VersorSphere) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1]))]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group1()[0] * -1.0)]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0] * -1.0),
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[0] * other.group0()[2] * -1.0),
                (-(self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group0()[3])),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[1])
                * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
    }
}
impl InfixGeometricAntiProduct for AntiFlatPoint {}
impl GeometricAntiProduct<AntiCircleRotor> for AntiFlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       27        0
    //    simd4        4        6        0
    // Totals...
    // yes simd       20       33        0
    //  no simd       32       51        0
    fn geometric_anti_product(self, other: AntiCircleRotor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3] * -1.0),
                (other.group0()[1] * self.group0()[3] * -1.0),
                (other.group0()[2] * self.group0()[3] * -1.0),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group1()[3] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([0.0, 0.0, 0.0, ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]))])
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group2()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])
                    + (other.group1()[3] * self.group0()[0])
                    + (other.group2()[0] * self.group0()[3])
                    + (other.group2()[3] * self.group0()[0])),
                ((other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])
                    + (other.group1()[3] * self.group0()[1])
                    + (other.group2()[1] * self.group0()[3])
                    + (other.group2()[3] * self.group0()[1])),
                (-(other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[3] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[3])
                    + (other.group2()[3] * self.group0()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[2]])
                * swizzle!(self.group0(), 2, 0, 1, 2)
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (swizzle!(other.group1(), 0, 1, 2, 1) * swizzle!(self.group0(), 3, 3, 3, 1))),
        );
    }
}
impl GeometricAntiProduct<AntiDipoleInversion> for AntiFlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       36        0
    //    simd4        7        7        0
    // Totals...
    // yes simd       26       43        0
    //  no simd       47       64        0
    fn geometric_anti_product(self, other: AntiDipoleInversion) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3] * -1.0),
                (other.group0()[1] * self.group0()[3] * -1.0),
                (other.group0()[2] * self.group0()[3] * -1.0),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])
                    + (other.group1()[3] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) + (other.group2()[3] * self.group0()[0]) + (other.group3()[0] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[2]) + (other.group2()[3] * self.group0()[1]) + (other.group3()[1] * self.group0()[3])),
                ((other.group0()[1] * self.group0()[0]) + (other.group2()[3] * self.group0()[2]) + (other.group3()[2] * self.group0()[3])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([0.0, 0.0, 0.0, (other.group3()[3] * self.group0()[3])])
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group3()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[2]]) * swizzle!(self.group0(), 1, 2, 0, 2))
                - (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group0(), 0, 1, 2, 1))
                + (swizzle!(other.group3(), 1, 2, 0, 2) * swizzle!(self.group0(), 2, 0, 1, 2))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2])
                    + (other.group0()[2] * self.group0()[1])
                    + (other.group1()[0] * self.group0()[3])
                    + (other.group2()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3]) + (other.group2()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[1])
                    + (other.group0()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group0()[3])
                    + (other.group2()[3] * self.group0()[2])),
                (other.group2()[3] * self.group0()[3] * -1.0),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum321> for AntiFlatPoint {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3       10        0
    fn geometric_anti_product(self, other: AntiDualNum321) -> Self::Output {
        return AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[1] * self.group0()[3] * -1.0)]),
            // e15, e25, e35, scalar
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[2])),
                (other.group0()[0] * self.group0()[3] * -1.0),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum4> for AntiFlatPoint {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        6        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0       10        0
    //  no simd        0       22        0
    fn geometric_anti_product(self, other: AntiDualNum4) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e15, e25, e35, e1234
            (Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group0()[0]]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum5> for AntiFlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0        9        0
    fn geometric_anti_product(self, other: AntiDualNum5) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from(other.group0()[1]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group0()[3])]),
        );
    }
}
impl GeometricAntiProduct<AntiFlatPoint> for AntiFlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn geometric_anti_product(self, other: AntiFlatPoint) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[3] * self.group0()[3])]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[3]) - (other.group0()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group0()[3]) - (other.group0()[3] * self.group0()[2])),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiFlector> for AntiFlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        2        3        0
    // Totals...
    // yes simd        6       11        0
    //  no simd       12       20        0
    fn geometric_anti_product(self, other: AntiFlector) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]])),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group1()[2])),
                (-(self.group0()[1] * other.group0()[3]) - (self.group0()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group1()[1]) - (self.group0()[2] * other.group0()[3])),
                ((self.group0()[2] * other.group1()[2]) + (self.group0()[3] * other.group1()[3])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                + (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group1(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<AntiLine> for AntiFlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       18        0
    fn geometric_anti_product(self, other: AntiLine) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (other.group1()[0] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (other.group1()[2] * self.group0()[3])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3] * -1.0),
                (other.group0()[1] * self.group0()[3] * -1.0),
                (other.group0()[2] * self.group0()[3] * -1.0),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiMotor> for AntiFlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       12       24        0
    fn geometric_anti_product(self, other: AntiMotor) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (self.group0()[3] * other.group1()[0])),
                (-(self.group0()[0] * other.group0()[2])
                    + (self.group0()[1] * other.group0()[3])
                    + (self.group0()[2] * other.group0()[0])
                    + (self.group0()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group1()[2])),
                (self.group0()[3] * other.group0()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group0()[3] * other.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiPlane> for AntiFlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2       12        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        3       13        0
    //  no simd        6       16        0
    fn geometric_anti_product(self, other: AntiPlane) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) * -1.0),
                ((self.group0()[2] * other.group0()[0]) * -1.0),
                ((self.group0()[0] * other.group0()[1]) * -1.0),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])),
            ]) + (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<AntiQuadNum> for AntiFlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       10        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        3       14        0
    //  no simd        3       26        0
    fn geometric_anti_product(self, other: AntiQuadNum) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[2] * -1.0)]),
            // e23, e31, e12, e45
            (swizzle!(other.group0(), 0, 0, 0, 3) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[0] * other.group0()[3])),
                ((self.group0()[1] * other.group0()[2]) + (self.group0()[1] * other.group0()[3])),
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[2] * other.group0()[3])),
                (self.group0()[3] * other.group0()[0] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            (swizzle!(other.group0(), 0, 0, 0, 1) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
    }
}
impl GeometricAntiProduct<AntiScalar> for AntiFlatPoint {
    type Output = AntiFlatPoint;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn geometric_anti_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiFlatPoint::from_groups(/* e235, e315, e125, e321 */ (Simd32x4::from(other[e12345]) * self.group0()));
    }
}
impl GeometricAntiProduct<AntiTripleNum> for AntiFlatPoint {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        6        0
    // no simd        0       24        0
    fn geometric_anti_product(self, other: AntiTripleNum) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[2]]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e15, e25, e35, e1234
            (Simd32x4::from([other.group0()[2], other.group0()[2], other.group0()[2], other.group0()[0]]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
    }
}
impl GeometricAntiProduct<Circle> for AntiFlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       32        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       16       35        0
    //  no simd       25       44        0
    fn geometric_anti_product(self, other: Circle) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3] * -1.0),
                (other.group0()[1] * self.group0()[3] * -1.0),
                (other.group0()[2] * self.group0()[3] * -1.0),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])
                    + (self.group0()[3] * other.group1()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (other.group0()[2] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                (other.group0()[1] * self.group0()[0]),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group2()[0] * self.group0()[3]) + (self.group0()[1] * other.group1()[2])),
                ((other.group2()[1] * self.group0()[3]) + (self.group0()[2] * other.group1()[0])),
                ((other.group2()[2] * self.group0()[3]) + (self.group0()[0] * other.group1()[1])),
                ((self.group0()[2] * other.group1()[2]) * -1.0),
            ]) - (swizzle!(self.group0(), 0, 0, 1, 0) * swizzle!(other.group1(), 3, 2, 0, 0))
                - (swizzle!(self.group0(), 2, 1, 2, 1) * swizzle!(other.group1(), 1, 3, 3, 1))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (self.group0()[3] * other.group1()[0])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) + (self.group0()[3] * other.group1()[1])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (self.group0()[3] * other.group1()[2])),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<CircleRotor> for AntiFlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       32        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       20       36        0
    //  no simd       32       48        0
    fn geometric_anti_product(self, other: CircleRotor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3] * -1.0),
                (other.group0()[1] * self.group0()[3] * -1.0),
                (other.group0()[2] * self.group0()[3] * -1.0),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])
                    + (self.group0()[3] * other.group1()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([0.0, 0.0, 0.0, (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]))])
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group1()[2]) + (self.group0()[3] * other.group2()[0])),
                ((self.group0()[1] * other.group2()[3]) + (self.group0()[2] * other.group1()[0]) + (self.group0()[3] * other.group2()[1])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[2] * other.group2()[3]) + (self.group0()[3] * other.group2()[2])),
                ((self.group0()[2] * other.group1()[2]) * -1.0),
            ]) - (swizzle!(self.group0(), 0, 0, 1, 0) * swizzle!(other.group1(), 3, 2, 0, 0))
                - (swizzle!(self.group0(), 2, 1, 2, 1) * swizzle!(other.group1(), 1, 3, 3, 1))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (self.group0()[3] * other.group1()[0])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) + (self.group0()[3] * other.group1()[1])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (self.group0()[3] * other.group1()[2])),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<Dipole> for AntiFlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       30        0
    //    simd4        3        5        0
    // Totals...
    // yes simd       16       35        0
    //  no simd       25       50        0
    fn geometric_anti_product(self, other: Dipole) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3] * -1.0),
                (other.group0()[1] * self.group0()[3] * -1.0),
                (other.group0()[2] * self.group0()[3] * -1.0),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (self.group0()[3] * other.group1()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) * -1.0),
                ((other.group0()[2] * self.group0()[0]) * -1.0),
                ((other.group0()[0] * self.group0()[1]) * -1.0),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group2()[0] * self.group0()[3]) + (self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                ((other.group2()[1] * self.group0()[3]) - (self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group1()[0])),
                ((other.group2()[2] * self.group0()[3]) + (self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[3])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[2]])
                * swizzle!(self.group0(), 2, 0, 1, 2)
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (swizzle!(self.group0(), 3, 3, 3, 1) * swizzle!(other.group1(), 0, 1, 2, 1))),
        );
    }
}
impl GeometricAntiProduct<DipoleInversion> for AntiFlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       23       40        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       29       46        0
    //  no simd       47       64        0
    fn geometric_anti_product(self, other: DipoleInversion) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3] * -1.0),
                (other.group0()[1] * self.group0()[3] * -1.0),
                (other.group0()[2] * self.group0()[3] * -1.0),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (self.group0()[3] * other.group1()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) - (self.group0()[3] * other.group3()[0])),
                (-(other.group0()[2] * self.group0()[0]) - (self.group0()[3] * other.group3()[1])),
                (-(other.group0()[0] * self.group0()[1]) - (self.group0()[3] * other.group3()[2])),
                (other.group0()[2] * self.group0()[2]),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) + (self.group0()[1] * other.group3()[2])
                    - (self.group0()[2] * other.group1()[1])
                    - (self.group0()[2] * other.group3()[1])
                    + (self.group0()[3] * other.group2()[0])),
                (-(self.group0()[0] * other.group1()[2]) - (self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group0()[2] * other.group3()[0])
                    + (self.group0()[3] * other.group2()[1])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group1()[0]) - (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group0()[3] * other.group2()[2])),
                (self.group0()[3] * other.group2()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[1] * other.group3()[1]) - (self.group0()[2] * other.group1()[2]) - (self.group0()[2] * other.group3()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group3()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))
                - (swizzle!(self.group0(), 3, 3, 3, 1) * swizzle!(other.group1(), 0, 1, 2, 1))),
        );
    }
}
impl GeometricAntiProduct<DualNum321> for AntiFlatPoint {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        8        0
    fn geometric_anti_product(self, other: DualNum321) -> Self::Output {
        return CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[1] * self.group0()[3])]),
            // e235, e315, e125, e12345
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[2])),
                (other.group0()[0] * self.group0()[3]),
            ]),
        );
    }
}
impl GeometricAntiProduct<DualNum4> for AntiFlatPoint {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0       15        0
    fn geometric_anti_product(self, other: DualNum4) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]]) * self.group0()),
            // e235, e315, e125, e4
            (Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group0()[0]]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<DualNum5> for AntiFlatPoint {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        5        0
    fn geometric_anti_product(self, other: DualNum5) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from(other.group0()[1]) * self.group0()),
            // e1, e2, e3, e5
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group0()[3])]),
        );
    }
}
impl GeometricAntiProduct<FlatPoint> for AntiFlatPoint {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        8        0
    fn geometric_anti_product(self, other: FlatPoint) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[3] * -1.0)]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<Flector> for AntiFlatPoint {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        2        4        0
    // Totals...
    // yes simd        6       12        0
    //  no simd       12       24        0
    fn geometric_anti_product(self, other: Flector) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]) * Simd32x4::from(-1.0)),
            // e15, e25, e35, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[2] * other.group1()[0]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group1()[3]]) * swizzle!(self.group0(), 0, 1, 0, 3))
                - (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group1(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<Line> for AntiFlatPoint {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       15        0
    fn geometric_anti_product(self, other: Line) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (other.group1()[0] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (other.group1()[2] * self.group0()[3])),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3]),
                (other.group0()[1] * self.group0()[3]),
                (other.group0()[2] * self.group0()[3]),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Motor> for AntiFlatPoint {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       12       20        0
    fn geometric_anti_product(self, other: Motor) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (self.group0()[3] * other.group1()[0])),
                (-(self.group0()[0] * other.group0()[2])
                    + (self.group0()[1] * other.group0()[3])
                    + (self.group0()[2] * other.group0()[0])
                    + (self.group0()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group1()[2])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group0()[3] * other.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<MultiVector> for AntiFlatPoint {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       30       49        0
    //    simd2        3        5        0
    //    simd3        8       13        0
    //    simd4       10       10        0
    // Totals...
    // yes simd       51       77        0
    //  no simd      100      138        0
    fn geometric_anti_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from(self.group0()[3]) * Simd32x2::from([other.group3()[3], other.group6()[3]]) * Simd32x2::from([-1.0, 1.0]))
                - (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group4()[0], other.group7()[0]]))
                - (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group4()[1], other.group7()[1]]))
                - (Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group4()[2], other.group7()[2]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group7()[1] * self.group0()[2])
                    + (other.group7()[2] * self.group0()[1])
                    + (self.group0()[0] * other.group1()[3])
                    + (self.group0()[3] * other.group6()[0])),
                ((other.group7()[0] * self.group0()[2]) - (other.group7()[2] * self.group0()[0]) + (self.group0()[1] * other.group1()[3]) + (self.group0()[3] * other.group6()[1])),
                (-(other.group7()[0] * self.group0()[1])
                    + (other.group7()[1] * self.group0()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group0()[3] * other.group6()[2])),
                (self.group0()[3] * other.group1()[3] * -1.0),
            ]),
            // e5
            ((self.group0()[0] * other.group1()[0]) - (self.group0()[0] * other.group6()[0]) + (self.group0()[1] * other.group1()[1]) - (self.group0()[1] * other.group6()[1])
                + (self.group0()[2] * other.group1()[2])
                - (self.group0()[2] * other.group6()[2])
                + (self.group0()[3] * other[e1])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group0()[1] * other.group9()[2]) - (self.group0()[2] * other.group9()[1]) + (self.group0()[3] * other.group3()[0])),
                (-(self.group0()[0] * other.group9()[2]) + (self.group0()[2] * other.group9()[0]) + (self.group0()[3] * other.group3()[1])),
                (-(self.group0()[1] * other.group9()[0]) + (self.group0()[2] * other.group3()[3]) + (self.group0()[3] * other.group3()[2])),
                0.0,
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group4()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))
                - (Simd32x4::from([other.group5()[1], other.group5()[2], other.group5()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group4()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group9()[1], other.group4()[2]]) * swizzle!(self.group0(), 0, 1, 0, 2))),
            // e41, e42, e43
            (Simd32x3::from(self.group0()[3]) * other.group4() * Simd32x3::from(-1.0)),
            // e23, e31, e12
            (-(Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group4(), 2, 0, 1))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group4(), 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[3] * other.group1()[0])),
                ((self.group0()[1] * other.group1()[3]) + (self.group0()[3] * other.group1()[1])),
                ((self.group0()[2] * other.group1()[3]) + (self.group0()[3] * other.group1()[2])),
                (-(other.group7()[1] * self.group0()[1]) - (other.group7()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group7()[1], other.group7()[2], other.group7()[0], other.group7()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group7()[2], other.group7()[0], other.group7()[1], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0, 3))),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[3]) * other.group7() * Simd32x3::from(-1.0)),
            // e235, e315, e125
            (Simd32x3::from([
                ((self.group0()[1] * other.group6()[2]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group6()[0])),
                ((self.group0()[0] * other.group6()[1]) + (self.group0()[1] * other.group1()[0])),
            ]) + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group6()[3], other.group6()[2], other.group1()[1]]))
                - (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], other.group6()[3], other.group6()[0]]))
                - (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group6()[1], other.group1()[0], other.group6()[3]]))
                + (Simd32x3::from(self.group0()[3]) * other.group8())),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[0] * other.group9()[0]) - (self.group0()[1] * other.group9()[1]) - (self.group0()[2] * other.group9()[2])),
            ]) + (Simd32x4::from([other.group4()[1], other.group4()[2], other.group4()[0], other.group9()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group4()[2], other.group4()[0], other.group4()[1], other.group5()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other.group5()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([other[e45], other[e45], other[e45], other.group5()[2]]) * swizzle!(self.group0(), 0, 1, 2, 2))),
            // e1234
            (self.group0()[3] * other[e45] * -1.0),
        );
    }
}
impl GeometricAntiProduct<Plane> for AntiFlatPoint {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        8        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        3       10        0
    //  no simd        9       16        0
    fn geometric_anti_product(self, other: Plane) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                0.0,
            ]),
            // e15, e25, e35, e3215
            (Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]))])
                + (swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<QuadNum> for AntiFlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        8        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        3       11        0
    //  no simd        3       20        0
    fn geometric_anti_product(self, other: QuadNum) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[2])]),
            // e415, e425, e435, e321
            (swizzle!(other.group0(), 0, 0, 0, 3) * self.group0()),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[0] * other.group0()[3])),
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[1] * other.group0()[3])),
                (-(self.group0()[2] * other.group0()[2]) + (self.group0()[2] * other.group0()[3])),
                (self.group0()[3] * other.group0()[1]),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(other.group0()[0]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
    }
}
impl GeometricAntiProduct<RoundPoint> for AntiFlatPoint {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        9       21        0
    fn geometric_anti_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other.group0()[3] * -1.0),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other[e2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Scalar> for AntiFlatPoint {
    type Output = FlatPoint;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn geometric_anti_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return FlatPoint::from_groups(/* e15, e25, e35, e45 */ (Simd32x4::from(other[scalar]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])));
    }
}
impl GeometricAntiProduct<Sphere> for AntiFlatPoint {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        9       24        0
    fn geometric_anti_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other[e4315]) - (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other[e4315]) - (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other[e4315]) - (self.group0()[3] * other.group0()[2])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other[e4315] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other[e4315] * -1.0),
                (self.group0()[1] * other[e4315] * -1.0),
                (self.group0()[2] * other[e4315] * -1.0),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group0()[3] * other.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<TripleNum> for AntiFlatPoint {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn geometric_anti_product(self, other: TripleNum) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[2]]) * self.group0()),
            // e235, e315, e125, e4
            (Simd32x4::from([other.group0()[2], other.group0()[2], other.group0()[2], other.group0()[0]]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e1, e2, e3, e5
            (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]]) * self.group0()),
        );
    }
}
impl GeometricAntiProduct<VersorEven> for AntiFlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       32        0
    //    simd4        8        9        0
    // Totals...
    // yes simd       24       41        0
    //  no simd       48       68        0
    fn geometric_anti_product(self, other: VersorEven) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group0()[3] * other.group1()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) + (self.group0()[3] * other.group3()[0])),
                ((self.group0()[2] * other.group0()[0]) + (self.group0()[3] * other.group3()[1])),
                ((self.group0()[2] * other.group3()[3]) + (self.group0()[3] * other.group3()[2])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group0()[1], other.group0()[3]]) * swizzle!(self.group0(), 0, 1, 0, 3))
                - (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[3], other.group3()[2], other.group1()[1], other.group3()[0]]))
                - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group1()[2], other.group3()[1], other.group1()[0]]))
                + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[2], other.group0()[3], other.group3()[0], other.group3()[1]]))
                - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group3()[2], other.group1()[3], other.group1()[0], other.group1()[1]]))
                - (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[3], other.group1()[2]]))
                + (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group0()[3], other.group3()[2]]))
                + (Simd32x4::from(self.group0()[3]) * other.group2())),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (self.group0()[3] * other.group1()[0])),
                (-(self.group0()[0] * other.group0()[2])
                    + (self.group0()[1] * other.group3()[3])
                    + (self.group0()[2] * other.group0()[0])
                    + (self.group0()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group3()[3]) + (self.group0()[3] * other.group1()[2])),
                (self.group0()[3] * other.group3()[3] * -1.0),
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorOdd> for AntiFlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       23       36        0
    //    simd4        7        9        0
    // Totals...
    // yes simd       30       45        0
    //  no simd       51       72        0
    fn geometric_anti_product(self, other: VersorOdd) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[3] * other.group1()[3])),
            ]),
            // e23, e31, e12, e45
            ((Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group0()[2]])
                * swizzle!(self.group0(), 3, 3, 3, 2)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group2()[3], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 2, 1))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[1], other.group0()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))
                - (swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) + (self.group0()[1] * other.group3()[2])
                    - (self.group0()[2] * other.group1()[1])
                    - (self.group0()[2] * other.group3()[1])
                    + (self.group0()[3] * other.group2()[0])),
                (-(self.group0()[0] * other.group1()[2]) - (self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group0()[3])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group0()[2] * other.group3()[0])
                    + (self.group0()[3] * other.group2()[1])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group1()[0]) - (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group0()[3])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group0()[3] * other.group2()[2])),
                (self.group0()[3] * other.group2()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[1] * other.group3()[1]) - (self.group0()[2] * other.group1()[2]) - (self.group0()[2] * other.group3()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group2()[3], other.group3()[0]]) * swizzle!(self.group0(), 1, 2, 2, 0))
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))
                - (swizzle!(self.group0(), 3, 3, 3, 1) * swizzle!(other.group1(), 0, 1, 2, 1))),
        );
    }
}
impl GeometricAntiProduct<VersorRoundPoint> for AntiFlatPoint {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       12       25        0
    fn geometric_anti_product(self, other: VersorRoundPoint) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
                (other.group1()[1] * self.group0()[3]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                ((other.group1()[1] * self.group0()[0]) - (self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((other.group1()[1] * self.group0()[1]) + (self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                ((other.group1()[1] * self.group0()[2]) - (self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other.group0()[3] * -1.0),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                ((other.group1()[0] * self.group0()[3]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorSphere> for AntiFlatPoint {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       12       29        0
    fn geometric_anti_product(self, other: VersorSphere) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group1()[0] * self.group0()[0]) - (self.group0()[3] * other.group0()[0])),
                ((other.group1()[0] * self.group0()[1]) - (self.group0()[3] * other.group0()[1])),
                ((other.group1()[0] * self.group0()[2]) - (self.group0()[3] * other.group0()[2])),
                (other.group1()[1] * self.group0()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group1()[1] * self.group0()[0]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                ((other.group1()[1] * self.group0()[1]) - (self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((other.group1()[1] * self.group0()[2]) + (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (other.group1()[0] * self.group0()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group1()[0] * self.group0()[0] * -1.0),
                (other.group1()[0] * self.group0()[1] * -1.0),
                (other.group1()[0] * self.group0()[2] * -1.0),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group0()[3] * other.group0()[3])),
            ]),
        );
    }
}
impl InfixGeometricAntiProduct for AntiFlector {}
impl GeometricAntiProduct<AntiCircleRotor> for AntiFlector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       43        0
    //    simd4       12       12        0
    // Totals...
    // yes simd       36       55        0
    //  no simd       72       91        0
    fn geometric_anti_product(self, other: AntiCircleRotor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]) - (other.group1()[3] * self.group0()[3])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group1()[3] * self.group1()[0]) * -1.0),
                ((other.group1()[3] * self.group1()[1]) * -1.0),
                ((other.group1()[3] * self.group1()[2]) * -1.0),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) + (other.group1()[1] * self.group1()[1]) + (other.group1()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group2()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])
                    + (other.group1()[3] * self.group0()[0])
                    + (other.group2()[0] * self.group0()[3])
                    - (other.group2()[1] * self.group1()[2])
                    + (other.group2()[3] * self.group0()[0])),
                ((other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0]) + (other.group1()[3] * self.group0()[1]) + (other.group2()[1] * self.group0()[3])
                    - (other.group2()[2] * self.group1()[0])
                    + (other.group2()[3] * self.group0()[1])),
                (-(other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0]) + (other.group1()[3] * self.group0()[2])
                    - (other.group2()[0] * self.group1()[1])
                    + (other.group2()[2] * self.group0()[3])
                    + (other.group2()[3] * self.group0()[2])),
                (other.group0()[2] * self.group1()[2]),
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (other.group0()[1] * self.group0()[2]),
                (other.group0()[2] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (-(other.group2()[2] * self.group1()[2]) + (other.group2()[3] * self.group1()[3])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group0()[3], self.group1()[2], self.group1()[0], self.group0()[1]]) * swizzle!(other.group1(), 0, 0, 1, 1))
                - (Simd32x4::from([self.group1()[1], self.group0()[3], self.group0()[3], self.group0()[2]]) * swizzle!(other.group1(), 2, 1, 2, 2))
                + (swizzle!(other.group1(), 1, 2, 0, 3) * swizzle!(self.group1(), 2, 0, 1, 3))
                - (swizzle!(other.group2(), 3, 3, 3, 1) * swizzle!(self.group1(), 0, 1, 2, 1))),
        );
    }
}
impl GeometricAntiProduct<AntiDipoleInversion> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       31       44        0
    //    simd4       19       19        0
    // Totals...
    // yes simd       50       63        0
    //  no simd      107      120        0
    fn geometric_anti_product(self, other: AntiDipoleInversion) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]) + (other.group1()[3] * self.group0()[3])
                    - (other.group3()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group2()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group3()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group3()[1]]) * swizzle!(self.group1(), 0, 1, 2, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1])
                    + (other.group1()[3] * self.group1()[0])
                    + (other.group2()[3] * self.group0()[0])
                    + (other.group3()[0] * self.group0()[3])
                    + (other.group3()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group0()[2])
                    + (other.group1()[3] * self.group1()[1])
                    + (other.group2()[3] * self.group0()[1])
                    + (other.group3()[0] * self.group1()[2])
                    + (other.group3()[1] * self.group0()[3])),
                ((other.group0()[1] * self.group0()[0])
                    + (other.group1()[3] * self.group1()[2])
                    + (other.group2()[3] * self.group0()[2])
                    + (other.group3()[1] * self.group1()[0])
                    + (other.group3()[2] * self.group0()[3])),
                (-(other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]) + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group1()[0] * self.group1()[3]) + (other.group2()[2] * self.group1()[1])),
                ((other.group1()[1] * self.group1()[3]) + (other.group2()[0] * self.group1()[2])),
                ((other.group1()[2] * self.group1()[3]) + (other.group2()[1] * self.group1()[0])),
                (-(other.group2()[1] * self.group1()[1]) - (other.group2()[2] * self.group1()[2])),
            ]) + (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group3()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[2]]) * swizzle!(self.group0(), 1, 2, 0, 2))
                - (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group0(), 0, 1, 2, 1))
                + (swizzle!(other.group3(), 1, 2, 0, 2) * swizzle!(self.group0(), 2, 0, 1, 2))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) + (other.group1()[0] * self.group0()[3]) - (other.group1()[1] * self.group1()[2]) + (other.group2()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[2]) + (other.group1()[1] * self.group0()[3]) - (other.group1()[2] * self.group1()[0]) + (other.group2()[3] * self.group0()[1])),
                ((other.group0()[1] * self.group0()[0]) - (other.group1()[0] * self.group1()[1]) + (other.group1()[2] * self.group0()[3]) + (other.group2()[3] * self.group0()[2])),
                (other.group0()[2] * self.group1()[2]),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group2()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum321> for AntiFlector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       20        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        4       21        0
    //  no simd        4       24        0
    fn geometric_anti_product(self, other: AntiDualNum321) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group0()[3] * -1.0)]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (other.group0()[0] * self.group1()[0]),
                (other.group0()[0] * self.group1()[1]),
                (other.group0()[0] * self.group1()[2]),
                (other.group0()[1] * self.group0()[3]),
            ]) * Simd32x4::from(-1.0)),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[1] * self.group1()[0] * -1.0),
                (other.group0()[1] * self.group1()[1] * -1.0),
                (other.group0()[1] * self.group1()[2] * -1.0),
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum4> for AntiFlector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       12        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        4       16        0
    //  no simd        4       28        0
    fn geometric_anti_product(self, other: AntiDualNum4) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(other.group0()[0]) * self.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            (Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group0()[0]]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group1()[1])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3]),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum5> for AntiFlector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4       16        0
    fn geometric_anti_product(self, other: AntiDualNum5) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[2])),
                (other.group0()[1] * self.group0()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[1] * self.group1()[0] * -1.0),
                (other.group0()[1] * self.group1()[1] * -1.0),
                (other.group0()[1] * self.group1()[2] * -1.0),
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiFlatPoint> for AntiFlector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        2        3        0
    // Totals...
    // yes simd        6       11        0
    //  no simd       12       20        0
    fn geometric_anti_product(self, other: AntiFlatPoint) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]])),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[3])),
                ((other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[2] * self.group1()[2]) - (other.group0()[3] * self.group1()[3])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group1(), 2, 0, 1, 0))),
        );
    }
}
impl GeometricAntiProduct<AntiFlector> for AntiFlector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       16        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       16       24        0
    //  no simd       40       48        0
    fn geometric_anti_product(self, other: AntiFlector) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from([
                ((other.group1()[0] * self.group0()[3]) + (other.group1()[2] * self.group1()[1])),
                ((other.group1()[0] * self.group1()[2]) + (other.group1()[1] * self.group0()[3])),
                ((other.group1()[1] * self.group1()[0]) + (other.group1()[2] * self.group0()[3])),
                (-(other.group1()[1] * self.group1()[1]) - (other.group1()[2] * self.group1()[2])),
            ]) + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]))
                - (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group1(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[2] * self.group1()[1]) - (other.group1()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group1()[0] * self.group0()[2])),
                ((other.group0()[1] * self.group1()[0]) - (other.group1()[1] * self.group0()[0])),
                (-(other.group0()[3] * self.group1()[3]) + (other.group1()[3] * self.group0()[3])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]) * swizzle!(self.group1(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[2]]) * swizzle!(other.group1(), 3, 3, 3, 2))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (swizzle!(other.group1(), 1, 2, 0, 1) * swizzle!(self.group0(), 2, 0, 1, 1))),
        );
    }
}
impl GeometricAntiProduct<AntiLine> for AntiFlector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       20        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       16       24        0
    //  no simd       28       36        0
    fn geometric_anti_product(self, other: AntiLine) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (other.group1()[0] * self.group0()[3])
                    - (other.group1()[1] * self.group1()[2])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3]) - (other.group1()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[2] * self.group0()[3])),
                (other.group0()[2] * self.group1()[2]),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (other.group0()[1] * self.group1()[2]),
                (other.group0()[2] * self.group1()[0]),
                (other.group0()[0] * self.group1()[1]),
                (-(other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<AntiMotor> for AntiFlector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       16        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       20       24        0
    //  no simd       44       48        0
    fn geometric_anti_product(self, other: AntiMotor) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group0()[3] * other.group1()[0]) + (self.group1()[1] * other.group1()[2]) - (self.group1()[2] * other.group1()[1]) + (self.group1()[3] * other.group0()[0])),
                ((self.group0()[3] * other.group1()[1]) - (self.group1()[0] * other.group1()[2]) + (self.group1()[2] * other.group1()[0]) + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[3] * other.group1()[2]) - (self.group1()[1] * other.group1()[0]) + (self.group1()[2] * other.group1()[3]) + (self.group1()[3] * other.group0()[2])),
                0.0,
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 1, 0))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[2], self.group1()[1]]) * swizzle!(other.group0(), 2, 0, 3, 1))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[1], other.group0()[2]]) * swizzle!(self.group1(), 0, 1, 0, 2))
                - (swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((self.group0()[3] * other.group1()[3]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1]) - (self.group1()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[0], self.group0()[1]]) * swizzle!(other.group0(), 3, 3, 1, 1))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[2], self.group0()[2]]) * swizzle!(other.group0(), 2, 0, 3, 2))
                - (swizzle!(self.group0(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))
                + (swizzle!(self.group1(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))),
        );
    }
}
impl GeometricAntiProduct<AntiPlane> for AntiFlector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       16        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       11       19        0
    //  no simd       20       28        0
    fn geometric_anti_product(self, other: AntiPlane) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from([
                ((self.group0()[3] * other.group0()[0]) + (self.group1()[1] * other.group0()[2])),
                ((self.group0()[3] * other.group0()[1]) + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[3] * other.group0()[2]) + (self.group1()[0] * other.group0()[1])),
                (-(self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]) - (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) - (self.group1()[3] * other.group0()[0])),
                (-(self.group0()[2] * other.group0()[0]) - (self.group1()[3] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[1]) - (self.group1()[3] * other.group0()[2])),
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])),
            ]) + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                + (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<AntiQuadNum> for AntiFlector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       28        0
    //    simd4        1        3        0
    // Totals...
    // yes simd       13       31        0
    //  no simd       16       40        0
    fn geometric_anti_product(self, other: AntiQuadNum) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group1()[0] * other.group0()[0] * -1.0),
                (self.group1()[1] * other.group0()[0] * -1.0),
                (self.group1()[2] * other.group0()[0] * -1.0),
                (-(self.group0()[3] * other.group0()[2]) + (self.group1()[3] * other.group0()[0])),
            ]),
            // e23, e31, e12, e45
            ((Simd32x4::from(other.group0()[0])
                * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]) * swizzle!(other.group0(), 2, 2, 2, 3))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[0] * other.group0()[3]) + (self.group1()[0] * other.group0()[1])),
                ((self.group0()[1] * other.group0()[2]) + (self.group0()[1] * other.group0()[3]) + (self.group1()[1] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[2] * other.group0()[3]) + (self.group1()[2] * other.group0()[1])),
                (self.group0()[3] * other.group0()[0] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[0]) - (self.group1()[0] * other.group0()[3])),
                (-(self.group0()[1] * other.group0()[0]) - (self.group1()[1] * other.group0()[3])),
                (-(self.group0()[2] * other.group0()[0]) - (self.group1()[2] * other.group0()[3])),
                ((self.group0()[3] * other.group0()[1]) + (self.group1()[3] * other.group0()[2]) + (self.group1()[3] * other.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiScalar> for AntiFlector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn geometric_anti_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from(other[e12345]) * self.group0()),
            // e1, e2, e3, e5
            (Simd32x4::from(other[e12345]) * self.group1()),
        );
    }
}
impl GeometricAntiProduct<AntiTripleNum> for AntiFlector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       21        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        8       23        0
    //  no simd        8       29        0
    fn geometric_anti_product(self, other: AntiTripleNum) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(other.group0()[0]) * self.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[2] * self.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group0()[2])),
                (other.group0()[0] * self.group0()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group0()[1]) - (other.group0()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group1()[2])),
                ((other.group0()[1] * self.group0()[3]) + (other.group0()[2] * self.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Circle> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       52        0
    //    simd4        7        7        0
    // Totals...
    // yes simd       43       59        0
    //  no simd       64       80        0
    fn geometric_anti_product(self, other: Circle) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]) + (self.group0()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[2] * self.group0()[1]) + (self.group1()[0] * other.group1()[3])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group1()[3]) + (self.group1()[1] * other.group1()[3])),
                ((other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group1()[3]) + (self.group1()[2] * other.group1()[3])),
                (-(other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group2()[0] * self.group0()[3]) + (other.group2()[2] * self.group1()[1]) + (self.group0()[1] * other.group1()[2]) + (self.group1()[3] * other.group1()[0])),
                ((other.group2()[0] * self.group1()[2]) + (other.group2()[1] * self.group0()[3]) + (self.group0()[2] * other.group1()[0]) + (self.group1()[3] * other.group1()[1])),
                ((other.group2()[1] * self.group1()[0]) + (other.group2()[2] * self.group0()[3]) + (self.group0()[0] * other.group1()[1]) + (self.group1()[3] * other.group1()[2])),
                (-(other.group2()[1] * self.group1()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group2()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (swizzle!(self.group0(), 0, 0, 1, 0) * swizzle!(other.group1(), 3, 2, 0, 0))
                - (swizzle!(self.group0(), 2, 1, 2, 1) * swizzle!(other.group1(), 1, 3, 3, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (self.group0()[3] * other.group1()[0])
                    - (self.group1()[2] * other.group1()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) + (self.group0()[3] * other.group1()[1]) - (self.group1()[0] * other.group1()[2])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (self.group0()[3] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[0])),
                (other.group0()[2] * self.group1()[2]),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))),
        );
    }
}
impl GeometricAntiProduct<CircleRotor> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       33       48        0
    //    simd4       10       10        0
    // Totals...
    // yes simd       43       58        0
    //  no simd       73       88        0
    fn geometric_anti_product(self, other: CircleRotor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]) + (self.group0()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) + (self.group1()[0] * other.group1()[3])),
                ((other.group0()[1] * self.group1()[3]) + (self.group1()[1] * other.group1()[3])),
                ((other.group0()[2] * self.group1()[3]) + (self.group1()[2] * other.group1()[3])),
                (-(other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) + (self.group0()[3] * other.group2()[0]) + (self.group1()[1] * other.group2()[2]) + (self.group1()[3] * other.group1()[0])),
                ((self.group0()[2] * other.group1()[0]) + (self.group0()[3] * other.group2()[1]) + (self.group1()[2] * other.group2()[0]) + (self.group1()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[3] * other.group2()[2]) + (self.group1()[0] * other.group2()[1]) + (self.group1()[3] * other.group1()[2])),
                (-(self.group0()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group2()[1])
                    - (self.group1()[2] * other.group2()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]) + (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (swizzle!(self.group0(), 0, 0, 1, 0) * swizzle!(other.group1(), 3, 2, 0, 0))
                - (swizzle!(self.group0(), 2, 1, 2, 1) * swizzle!(other.group1(), 1, 3, 3, 1))
                - (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group2(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (self.group0()[3] * other.group1()[0])
                    - (self.group1()[2] * other.group1()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) + (self.group0()[3] * other.group1()[1]) - (self.group1()[0] * other.group1()[2])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (self.group0()[3] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[0])),
                0.0,
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group2()[3], other.group0()[2]]) * swizzle!(self.group1(), 1, 2, 2, 2))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group1()[1], other.group0()[1]]) * swizzle!(self.group1(), 0, 1, 0, 1))),
        );
    }
}
impl GeometricAntiProduct<Dipole> for AntiFlector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       40        0
    //    simd4       10       10        0
    // Totals...
    // yes simd       34       50        0
    //  no simd       64       80        0
    fn geometric_anti_product(self, other: Dipole) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]) - (self.group0()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) - (self.group1()[0] * other.group1()[3])),
                (-(other.group0()[2] * self.group0()[0]) - (self.group1()[1] * other.group1()[3])),
                (-(other.group0()[0] * self.group0()[1]) - (self.group1()[2] * other.group1()[3])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) + (self.group1()[1] * other.group1()[1]) + (self.group1()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group2()[0] * self.group0()[3]) - (other.group2()[1] * self.group1()[2]) + (self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])),
                ((other.group2()[1] * self.group0()[3]) - (other.group2()[2] * self.group1()[0]) - (self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])),
                (-(other.group2()[0] * self.group1()[1]) + (other.group2()[2] * self.group0()[3]) + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])
                    + (self.group0()[2] * other.group1()[3])),
                (other.group0()[2] * self.group1()[2]),
            ]) + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[1]]) * swizzle!(self.group1(), 3, 3, 3, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (other.group0()[1] * self.group0()[2]),
                (other.group0()[2] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (-(other.group2()[2] * self.group1()[2]) - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))
                - (swizzle!(self.group0(), 3, 3, 3, 1) * swizzle!(other.group1(), 0, 1, 2, 1))
                + (swizzle!(self.group1(), 2, 0, 1, 3) * swizzle!(other.group1(), 1, 2, 0, 3))),
        );
    }
}
impl GeometricAntiProduct<DipoleInversion> for AntiFlector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       48        0
    //    simd4       18       18        0
    // Totals...
    // yes simd       54       66        0
    //  no simd      108      120        0
    fn geometric_anti_product(self, other: DipoleInversion) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(other.group0()[2] * self.group1()[1]) - (self.group1()[0] * other.group2()[3])),
                (-(other.group0()[0] * self.group1()[2]) - (self.group1()[1] * other.group2()[3])),
                (-(other.group0()[1] * self.group1()[0]) - (self.group1()[2] * other.group2()[3])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]) - (self.group0()[3] * other.group1()[3])
                    + (self.group1()[1] * other.group3()[1])
                    + (self.group1()[2] * other.group3()[2])
                    + (self.group1()[3] * other.group2()[3])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) - (self.group0()[3] * other.group3()[0]) - (self.group1()[1] * other.group3()[2])),
                (-(other.group0()[2] * self.group0()[0]) - (self.group0()[3] * other.group3()[1]) - (self.group1()[2] * other.group3()[0])),
                (-(other.group0()[0] * self.group0()[1]) - (self.group0()[3] * other.group3()[2]) - (self.group1()[2] * other.group1()[3])),
                ((other.group0()[2] * self.group0()[2]) + (self.group1()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group2()[3]]) * swizzle!(self.group1(), 0, 1, 0, 3))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))
                + (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[1]]) * swizzle!(self.group1(), 2, 0, 1, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) + (self.group0()[1] * other.group3()[2]) - (self.group0()[2] * other.group3()[1])
                    + (self.group0()[3] * other.group2()[0])
                    - (self.group1()[2] * other.group2()[1])
                    + (self.group1()[3] * other.group3()[0])),
                (-(self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group0()[2] * other.group3()[0])
                    + (self.group0()[3] * other.group2()[1])
                    - (self.group1()[0] * other.group2()[2])
                    + (self.group1()[3] * other.group3()[1])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group0()[3] * other.group2()[2])
                    - (self.group1()[1] * other.group2()[0])
                    + (self.group1()[3] * other.group3()[2])),
                0.0,
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]) * swizzle!(self.group1(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group3()[3], other.group0()[1]]) * swizzle!(self.group1(), 1, 2, 2, 1))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 0, 1, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group3()[2])
                    - (self.group1()[1] * other.group2()[1])
                    - (self.group1()[2] * other.group2()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[2]]) * swizzle!(other.group1(), 2, 0, 1, 2))
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group3()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))
                - (swizzle!(self.group0(), 3, 3, 3, 1) * swizzle!(other.group1(), 0, 1, 2, 1))
                + (swizzle!(self.group1(), 2, 0, 1, 3) * swizzle!(other.group1(), 1, 2, 0, 3))),
        );
    }
}
impl GeometricAntiProduct<DualNum321> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        8        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        1       10        0
    //  no simd        4       16        0
    fn geometric_anti_product(self, other: DualNum321) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group0()[3])]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other.group0()[0] * self.group1()[0]),
                (other.group0()[0] * self.group1()[1]),
                (other.group0()[0] * self.group1()[2]),
                (other.group0()[1] * self.group0()[3]),
            ]),
            // e235, e315, e125, e5
            (-(Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[1] * self.group1()[0]),
                (other.group0()[1] * self.group1()[1]),
                (other.group0()[1] * self.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<DualNum4> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       13        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        4       16        0
    //  no simd        4       25        0
    fn geometric_anti_product(self, other: DualNum4) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(other.group0()[0]) * self.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group0()[3])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group1()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group1()[2])),
                (other.group0()[0] * self.group0()[3] * -1.0),
            ]),
        );
    }
}
impl GeometricAntiProduct<DualNum5> for AntiFlector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4       12        0
    fn geometric_anti_product(self, other: DualNum5) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[2])),
                (other.group0()[1] * self.group0()[3]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[1] * self.group1()[0]),
                (other.group0()[1] * self.group1()[1]),
                (other.group0()[1] * self.group1()[2]),
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<FlatPoint> for AntiFlector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        2        4        0
    // Totals...
    // yes simd        6       12        0
    //  no simd       12       24        0
    fn geometric_anti_product(self, other: FlatPoint) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]) * Simd32x4::from(-1.0)),
            // e15, e25, e35, e3215
            (Simd32x4::from([
                ((self.group0()[3] * other.group0()[0]) + (self.group1()[1] * other.group0()[2])),
                ((self.group0()[3] * other.group0()[1]) + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[3] * other.group0()[2]) + (self.group1()[0] * other.group0()[1])),
                (-(self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<Flector> for AntiFlector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       24        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       22       30        0
    //  no simd       40       48        0
    fn geometric_anti_product(self, other: Flector) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from([
                (-(self.group1()[0] * other.group0()[3]) - (self.group1()[1] * other.group1()[2])),
                (-(self.group1()[1] * other.group0()[3]) - (self.group1()[2] * other.group1()[0])),
                (-(self.group1()[0] * other.group1()[1]) - (self.group1()[2] * other.group0()[3])),
                ((self.group1()[1] * other.group1()[1]) + (self.group1()[2] * other.group1()[2])),
            ]) - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                + (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e15, e25, e35, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) + (self.group1()[0] * other.group1()[3]) + (self.group1()[1] * other.group0()[2]) + (self.group1()[3] * other.group1()[0])),
                ((self.group0()[2] * other.group1()[0]) + (self.group1()[1] * other.group1()[3]) + (self.group1()[2] * other.group0()[0]) + (self.group1()[3] * other.group1()[1])),
                ((self.group0()[3] * other.group0()[2]) + (self.group1()[0] * other.group0()[1]) + (self.group1()[2] * other.group1()[3]) + (self.group1()[3] * other.group1()[2])),
                (-(self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[2], self.group1()[3]]) * swizzle!(other.group0(), 0, 1, 3, 3))
                + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group1()[3]]) * swizzle!(self.group0(), 0, 1, 0, 3))
                - (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<Line> for AntiFlector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       28        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       22       30        0
    //  no simd       28       36        0
    fn geometric_anti_product(self, other: Line) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group0()[2])
                    + (other.group0()[2] * self.group0()[1])
                    + (other.group1()[0] * self.group0()[3])
                    + (other.group1()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group0()[0])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[1])
                    + (other.group0()[1] * self.group0()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group0()[3])),
                (-(other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[3])),
                ((other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))),
        );
    }
}
impl GeometricAntiProduct<Motor> for AntiFlector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       25        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       22       31        0
    //  no simd       40       49        0
    fn geometric_anti_product(self, other: Motor) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2])
                    + (self.group0()[3] * other.group1()[0])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group1()[2])
                    + (self.group1()[3] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[0])
                    + (self.group0()[3] * other.group1()[1])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group1()[0])
                    + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3])
                    + (self.group0()[3] * other.group1()[2])
                    + (self.group1()[0] * other.group1()[1])
                    + (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group0()[2])),
                ((self.group1()[2] * other.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[1]]) * swizzle!(self.group1(), 2, 0, 1, 1))
                + (swizzle!(self.group0(), 0, 1, 0, 3) * swizzle!(other.group0(), 3, 3, 1, 3))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                (self.group1()[1] * other.group0()[2]),
                (self.group1()[2] * other.group0()[0]),
                (self.group1()[2] * other.group0()[3]),
                (-(self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]) + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (swizzle!(self.group1(), 0, 1, 0, 3) * swizzle!(other.group0(), 3, 3, 1, 3))),
        );
    }
}
impl GeometricAntiProduct<MultiVector> for AntiFlector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       59       80        0
    //    simd2        4        4        0
    //    simd3       22       24        0
    //    simd4       24       24        0
    // Totals...
    // yes simd      109      132        0
    //  no simd      229      256        0
    fn geometric_anti_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                (-(self.group0()[3] * other.group3()[3])
                    + (self.group1()[0] * other.group9()[0])
                    + (self.group1()[1] * other.group9()[1])
                    + (self.group1()[2] * other.group9()[2])),
                ((self.group0()[3] * other.group6()[3]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1]) - (self.group1()[2] * other.group1()[2])),
            ]) - (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group4()[0], other.group7()[0]]))
                - (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group4()[1], other.group7()[1]]))
                - (Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group4()[2], other.group7()[2]]))
                + (Simd32x2::from(self.group1()[3]) * Simd32x2::from([other[e45], other.group1()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group7()[2] * self.group0()[1]) + (self.group0()[0] * other.group1()[3]) + (self.group0()[3] * other.group6()[0]) - (self.group1()[2] * other.group6()[1])),
                ((other.group7()[0] * self.group0()[2]) + (self.group0()[1] * other.group1()[3]) + (self.group0()[3] * other.group6()[1]) - (self.group1()[0] * other.group6()[2])),
                ((other.group7()[1] * self.group0()[0]) + (self.group0()[2] * other.group1()[3]) + (self.group0()[3] * other.group6()[2]) - (self.group1()[1] * other.group6()[0])),
                0.0,
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group7()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group7()[1]]) * swizzle!(self.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group7()[1], other.group7()[2], other.group7()[0], other.group1()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group7()[2]]) * swizzle!(self.group1(), 1, 2, 0, 2))),
            // e5
            ((other.group0()[1] * self.group1()[3]) - (other.group8()[0] * self.group1()[0]) - (other.group8()[1] * self.group1()[1]) - (other.group8()[2] * self.group1()[2])
                + (self.group0()[0] * other.group1()[0])
                - (self.group0()[0] * other.group6()[0])
                + (self.group0()[1] * other.group1()[1])
                - (self.group0()[1] * other.group6()[1])
                + (self.group0()[2] * other.group1()[2])
                - (self.group0()[2] * other.group6()[2])
                + (self.group0()[3] * other[e1])
                - (self.group1()[3] * other.group6()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group0()[1] * other.group9()[2]) - (self.group0()[2] * other.group9()[1]) + (self.group0()[3] * other.group3()[0]) + (self.group1()[3] * other.group9()[0])),
                (-(self.group0()[0] * other.group9()[2])
                    + (self.group0()[2] * other.group9()[0])
                    + (self.group0()[3] * other.group3()[1])
                    + (self.group1()[3] * other.group9()[1])),
                (-(self.group0()[1] * other.group9()[0])
                    + (self.group0()[2] * other.group3()[3])
                    + (self.group0()[3] * other.group3()[2])
                    + (self.group1()[3] * other.group9()[2])),
                0.0,
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group4()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other.group5()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group5()[1], other.group5()[2], other.group5()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group4()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other[e45]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group3()[2], other.group3()[0], other.group9()[3], other.group5()[2]]) * swizzle!(self.group1(), 1, 2, 2, 2))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group9()[1], other.group4()[2]]) * swizzle!(self.group0(), 0, 1, 0, 2))
                + (Simd32x4::from([other.group9()[3], other.group9()[3], other.group3()[1], other.group5()[1]]) * swizzle!(self.group1(), 0, 1, 0, 1))),
            // e41, e42, e43
            (-(Simd32x3::from(other[e45]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from([self.group0()[3], self.group1()[2], self.group1()[0]]) * swizzle!(other.group4(), 0, 0, 1))
                - (Simd32x3::from([self.group1()[1], self.group0()[3], self.group0()[3]]) * swizzle!(other.group4(), 2, 1, 2))
                + (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]) * swizzle!(other.group4(), 1, 2, 0))),
            // e23, e31, e12
            (Simd32x3::from([
                (-(self.group1()[1] * other.group9()[2]) + (self.group1()[2] * other.group9()[1])),
                ((self.group1()[0] * other.group9()[2]) - (self.group1()[2] * other.group9()[0])),
                (-(self.group1()[0] * other.group9()[1]) + (self.group1()[1] * other.group9()[0])),
            ]) - (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                - (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from([self.group0()[1], self.group1()[3], self.group1()[3]]) * swizzle!(other.group4(), 2, 1, 2))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group4(), 1, 2, 0))
                + (Simd32x3::from([self.group1()[3], self.group0()[2], self.group0()[0]]) * swizzle!(other.group4(), 0, 0, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[3] * other.group1()[0]) + (self.group1()[0] * other.group6()[3]) + (self.group1()[1] * other.group1()[2])),
                ((self.group0()[1] * other.group1()[3]) + (self.group0()[3] * other.group1()[1]) + (self.group1()[1] * other.group6()[3]) + (self.group1()[2] * other.group1()[0])),
                ((self.group0()[2] * other.group1()[3]) + (self.group0()[3] * other.group1()[2]) + (self.group1()[0] * other.group1()[1]) + (self.group1()[2] * other.group6()[3])),
                (-(other.group7()[1] * self.group0()[1])
                    - (other.group7()[2] * self.group0()[2])
                    - (self.group1()[1] * other.group6()[1])
                    - (self.group1()[2] * other.group6()[2])),
            ]) + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group1()[3]]))
                - (Simd32x4::from([other.group7()[1], other.group7()[2], other.group7()[0], other.group7()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group7()[2], other.group7()[0], other.group7()[1], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group6()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))),
            // e423, e431, e412
            (-(Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from([self.group0()[3], self.group1()[2], self.group1()[0]]) * swizzle!(other.group7(), 0, 0, 1))
                - (Simd32x3::from([self.group1()[1], self.group0()[3], self.group0()[3]]) * swizzle!(other.group7(), 2, 1, 2))
                + (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]) * swizzle!(other.group7(), 1, 2, 0))),
            // e235, e315, e125
            (Simd32x3::from([
                ((self.group0()[1] * other.group6()[2]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group6()[0])),
                ((self.group0()[0] * other.group6()[1]) + (self.group0()[1] * other.group1()[0])),
            ]) + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group6()[3], other.group6()[2], other.group1()[1]]))
                - (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], other.group6()[3], other.group6()[0]]))
                - (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group6()[1], other.group1()[0], other.group6()[3]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from([self.group0()[3], self.group1()[2], self.group1()[0]]) * swizzle!(other.group8(), 0, 0, 1))
                + (Simd32x3::from([self.group1()[1], self.group0()[3], self.group0()[3]]) * swizzle!(other.group8(), 2, 1, 2))
                - (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]) * swizzle!(other.group8(), 1, 2, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[0] * other.group9()[0]) - (self.group0()[1] * other.group9()[1]) - (self.group0()[2] * other.group9()[2])
                    + (self.group1()[3] * other.group3()[3])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group3()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))
                - (Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[2], other.group3()[1]]) * swizzle!(self.group1(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group4()[1], other.group4()[2], other.group4()[0], other.group9()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group4()[2], other.group4()[0], other.group4()[1], other.group5()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other.group5()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group5()[1], other.group5()[2], other.group5()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group3()[2]]) * swizzle!(self.group1(), 1, 2, 0, 2))
                - (Simd32x4::from([other[e45], other[e45], other[e45], other.group5()[2]]) * swizzle!(self.group0(), 0, 1, 2, 2))),
            // e1234
            ((other.group4()[0] * self.group1()[0]) + (other.group4()[1] * self.group1()[1]) + (other.group4()[2] * self.group1()[2]) - (self.group0()[3] * other[e45])),
        );
    }
}
impl GeometricAntiProduct<Plane> for AntiFlector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       16        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       11       19        0
    //  no simd       20       28        0
    fn geometric_anti_product(self, other: Plane) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from([
                (-(self.group0()[3] * other.group0()[0]) - (self.group1()[1] * other.group0()[2])),
                (-(self.group0()[3] * other.group0()[1]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[3] * other.group0()[2]) - (self.group1()[0] * other.group0()[1])),
                ((self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e3215
            (Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group1()[3] * other.group0()[0])),
                ((self.group1()[1] * other.group0()[3]) + (self.group1()[3] * other.group0()[1])),
                ((self.group1()[2] * other.group0()[3]) + (self.group1()[3] * other.group0()[2])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) + (swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<QuadNum> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       16        0
    //    simd4        3        5        0
    // Totals...
    // yes simd        7       21        0
    //  no simd       16       36        0
    fn geometric_anti_product(self, other: QuadNum) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group1()[0] * other.group0()[0] * -1.0),
                (self.group1()[1] * other.group0()[0] * -1.0),
                (self.group1()[2] * other.group0()[0] * -1.0),
                ((self.group0()[3] * other.group0()[2]) + (self.group1()[3] * other.group0()[0])),
            ]),
            // e415, e425, e435, e321
            ((swizzle!(other.group0(), 0, 0, 0, 3) * self.group0()) + (swizzle!(other.group0(), 2, 2, 2, 0) * self.group1())),
            // e235, e315, e125, e5
            (-(Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (swizzle!(other.group0(), 1, 1, 1, 3) * self.group1())
                + (swizzle!(other.group0(), 3, 3, 3, 1) * self.group0())),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group1()[0] * other.group0()[3])),
                ((self.group0()[1] * other.group0()[0]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[2] * other.group0()[0]) + (self.group1()[2] * other.group0()[3])),
                (self.group0()[3] * other.group0()[0] * -1.0),
            ]),
        );
    }
}
impl GeometricAntiProduct<RoundPoint> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       31        0
    //    simd4        2        4        0
    // Totals...
    // yes simd       18       35        0
    //  no simd       24       47        0
    fn geometric_anti_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3] * -1.0),
                (self.group1()[1] * other.group0()[3] * -1.0),
                (self.group1()[2] * other.group0()[3] * -1.0),
                (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])
                    + (self.group1()[3] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1]) - (self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2]) + (self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])),
                (self.group1()[3] * other.group0()[3]),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) - (self.group1()[3] * other.group0()[0])),
                (-(self.group0()[2] * other.group0()[0]) - (self.group1()[3] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[1]) - (self.group1()[3] * other.group0()[2])),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other[e2]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]))
                + (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from(other.group0()[3]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
    }
}
impl GeometricAntiProduct<Scalar> for AntiFlector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn geometric_anti_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from(other[scalar]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other[scalar]) * self.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
    }
}
impl GeometricAntiProduct<Sphere> for AntiFlector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       24       48        0
    fn geometric_anti_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group1()[0] * other[e4315] * -1.0),
                (self.group1()[1] * other[e4315] * -1.0),
                (self.group1()[2] * other[e4315] * -1.0),
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2]) + (self.group1()[3] * other[e4315])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other[e4315]) - (self.group0()[3] * other.group0()[0]) - (self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group0()[1] * other[e4315]) - (self.group0()[3] * other.group0()[1]) + (self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                ((self.group0()[2] * other[e4315]) - (self.group0()[3] * other.group0()[2]) - (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                (self.group1()[3] * other[e4315] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (self.group1()[0] * other.group0()[3]) + (self.group1()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[2])
                    + (self.group0()[2] * other.group0()[0])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[3]) + (self.group1()[3] * other.group0()[2])),
                (self.group0()[3] * other[e4315] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other[e4315] * -1.0),
                (self.group0()[1] * other[e4315] * -1.0),
                (self.group0()[2] * other[e4315] * -1.0),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group0()[3] * other.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<TripleNum> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       13        0
    //    simd4        1        4        0
    // Totals...
    // yes simd        5       17        0
    //  no simd        8       29        0
    fn geometric_anti_product(self, other: TripleNum) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(other.group0()[0]) * self.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[2] * self.group0()[3])),
            ]),
            // e235, e315, e125, e5
            ((Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]))
                + (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group0()[1]) + (other.group0()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group1()[2])),
                (other.group0()[0] * self.group0()[3] * -1.0),
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorEven> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       40        0
    //    simd4       22       22        0
    // Totals...
    // yes simd       50       62        0
    //  no simd      116      128        0
    fn geometric_anti_product(self, other: VersorEven) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group1()[3])
                    - (self.group1()[2] * other.group3()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group3()[3], other.group3()[1]]) * swizzle!(self.group1(), 1, 2, 2, 1))
                - (Simd32x4::from([other.group3()[3], other.group3()[3], other.group0()[1], other.group3()[0]]) * swizzle!(self.group1(), 0, 1, 0, 0))
                - (swizzle!(self.group0(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) + (self.group1()[0] * other.group1()[3]) + (self.group1()[1] * other.group3()[2]) + (self.group1()[3] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[0]) + (self.group1()[1] * other.group1()[3]) + (self.group1()[2] * other.group3()[0]) + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[3] * other.group3()[2]) + (self.group1()[0] * other.group3()[1]) + (self.group1()[2] * other.group1()[3]) + (self.group1()[3] * other.group0()[2])),
                (-(self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[2], self.group1()[3]]) * swizzle!(other.group3(), 0, 1, 3, 3))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group0()[1], other.group0()[3]]) * swizzle!(self.group0(), 0, 1, 0, 3))
                - (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group1()[1] * other.group2()[2]) + (self.group1()[3] * other.group1()[0])),
                ((self.group1()[2] * other.group2()[0]) + (self.group1()[3] * other.group1()[1])),
                ((self.group1()[2] * other.group2()[3]) + (self.group1()[3] * other.group1()[2])),
                (-(self.group1()[2] * other.group2()[2]) - (self.group1()[3] * other.group1()[3])),
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[3], other.group3()[2], other.group1()[1], other.group3()[0]]))
                - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group1()[2], other.group3()[1], other.group1()[0]]))
                + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[2], other.group0()[3], other.group3()[0], other.group3()[1]]))
                - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group3()[2], other.group1()[3], other.group1()[0], other.group1()[1]]))
                - (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[3], other.group1()[2]]))
                + (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group0()[3], other.group3()[2]]))
                + (Simd32x4::from(self.group0()[3]) * other.group2())
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[1], other.group0()[3]]) * swizzle!(self.group1(), 0, 1, 0, 3))
                - (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[1]]) * swizzle!(self.group1(), 3, 3, 3, 1))
                - (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group2(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[3] * other.group1()[0]) - (self.group1()[2] * other.group1()[1]) + (self.group1()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group3()[3]) + (self.group0()[3] * other.group1()[1]) - (self.group1()[0] * other.group1()[2]) + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group3()[3]) + (self.group0()[3] * other.group1()[2]) - (self.group1()[1] * other.group1()[0]) + (self.group1()[3] * other.group0()[2])),
                0.0,
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group0()[1]]) * swizzle!(self.group1(), 0, 1, 0, 1))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group0()[2]]) * swizzle!(self.group1(), 1, 2, 2, 2))),
        );
    }
}
impl GeometricAntiProduct<VersorOdd> for AntiFlector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       47        0
    //    simd4       21       21        0
    // Totals...
    // yes simd       53       68        0
    //  no simd      116      131        0
    fn geometric_anti_product(self, other: VersorOdd) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group1()[0] * other.group2()[3]) * -1.0),
                ((self.group1()[1] * other.group2()[3]) * -1.0),
                ((self.group1()[2] * other.group2()[3]) * -1.0),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[3] * other.group1()[3])
                    + (self.group1()[1] * other.group3()[1])
                    + (self.group1()[2] * other.group3()[2])
                    + (self.group1()[3] * other.group2()[3])),
            ]) - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[1]]) * swizzle!(other.group0(), 2, 0, 1, 1))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (swizzle!(self.group0(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(self.group0()[3] * other.group3()[0]) - (self.group1()[1] * other.group3()[2])),
                (-(self.group0()[3] * other.group3()[1]) - (self.group1()[2] * other.group3()[0])),
                (-(self.group0()[3] * other.group3()[2]) - (self.group1()[2] * other.group1()[3])),
                ((self.group1()[1] * other.group1()[1]) + (self.group1()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[2]]) * swizzle!(other.group0(), 0, 1, 2, 2))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group2()[3], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 2, 1))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group2()[3]]) * swizzle!(self.group1(), 0, 1, 0, 3))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[1], other.group0()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))
                + (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) + (self.group0()[1] * other.group3()[2]) - (self.group0()[2] * other.group3()[1])
                    + (self.group0()[3] * other.group2()[0])
                    - (self.group1()[2] * other.group2()[1])
                    + (self.group1()[3] * other.group1()[0])
                    + (self.group1()[3] * other.group3()[0])),
                (-(self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group0()[2] * other.group3()[0])
                    + (self.group0()[3] * other.group2()[1])
                    - (self.group1()[0] * other.group2()[2])
                    + (self.group1()[3] * other.group1()[1])
                    + (self.group1()[3] * other.group3()[1])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group0()[3] * other.group2()[2])
                    - (self.group1()[1] * other.group2()[0])
                    + (self.group1()[3] * other.group1()[2])
                    + (self.group1()[3] * other.group3()[2])),
                0.0,
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group3()[3], other.group0()[2]]) * swizzle!(self.group1(), 1, 2, 2, 2))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group2()[1], other.group0()[1]]) * swizzle!(self.group1(), 0, 1, 0, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[1] * other.group3()[1]) - (self.group0()[2] * other.group1()[2]) - (self.group0()[2] * other.group3()[2])
                    + (self.group1()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[2]]) * swizzle!(self.group1(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group2()[3], other.group3()[0]]) * swizzle!(self.group0(), 1, 2, 2, 0))
                - (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group2()[0]]) * swizzle!(self.group1(), 0, 1, 0, 0))
                + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group2()[1]]) * swizzle!(self.group1(), 1, 2, 2, 1))
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))
                - (swizzle!(self.group0(), 3, 3, 3, 1) * swizzle!(other.group1(), 0, 1, 2, 1))),
        );
    }
}
impl GeometricAntiProduct<VersorRoundPoint> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       32        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       18       37        0
    //  no simd       33       52        0
    fn geometric_anti_product(self, other: VersorRoundPoint) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3] * -1.0),
                (self.group1()[1] * other.group0()[3] * -1.0),
                (self.group1()[2] * other.group0()[3] * -1.0),
                (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])
                    + (self.group1()[3] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])),
                (-(self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0])),
                ((self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])),
                0.0,
            ]) + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group1()[3]]) * other.group0())
                + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other.group1()[1]]) * self.group0())),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) - (self.group1()[3] * other.group0()[0])),
                (-(self.group0()[2] * other.group0()[0]) - (self.group1()[3] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[1]) - (self.group1()[3] * other.group0()[2])),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group1()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]))
                + (Simd32x4::from(other.group1()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group1()[1] * self.group1()[0]) + (self.group0()[0] * other.group0()[3])),
                ((other.group1()[1] * self.group1()[1]) + (self.group0()[1] * other.group0()[3])),
                ((other.group1()[1] * self.group1()[2]) + (self.group0()[2] * other.group0()[3])),
                (self.group0()[3] * other.group0()[3] * -1.0),
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorSphere> for AntiFlector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       21       43        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       24       46        0
    //  no simd       33       55        0
    fn geometric_anti_product(self, other: VersorSphere) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group1()[0] * self.group1()[0] * -1.0),
                (other.group1()[0] * self.group1()[1] * -1.0),
                (other.group1()[0] * self.group1()[2] * -1.0),
                ((other.group1()[0] * self.group1()[3]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group1()[0] * self.group0()[0]) + (self.group1()[2] * other.group0()[1])),
                ((other.group1()[0] * self.group0()[1]) + (self.group1()[0] * other.group0()[2])),
                ((other.group1()[0] * self.group0()[2]) + (self.group1()[1] * other.group0()[0])),
                0.0,
            ]) - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]]))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 3))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group1()[1] * self.group0()[0]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])
                    + (self.group1()[0] * other.group0()[3])
                    + (self.group1()[3] * other.group0()[0])),
                ((other.group1()[1] * self.group0()[1]) - (self.group0()[0] * other.group0()[2])
                    + (self.group0()[2] * other.group0()[0])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group1()[3] * other.group0()[1])),
                ((other.group1()[1] * self.group0()[2]) + (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])
                    + (self.group1()[2] * other.group0()[3])
                    + (self.group1()[3] * other.group0()[2])),
                (other.group1()[0] * self.group0()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group1()[1] * self.group1()[0]) * -1.0),
                ((other.group1()[1] * self.group1()[1]) * -1.0),
                ((other.group1()[1] * self.group1()[2]) * -1.0),
                ((other.group1()[1] * self.group1()[3]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])),
            ]) - (Simd32x4::from([other.group1()[0], other.group1()[0], other.group1()[0], other.group0()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))),
        );
    }
}
impl InfixGeometricAntiProduct for AntiLine {}
impl GeometricAntiProduct<AntiCircleRotor> for AntiLine {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       42       58        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       44       60        0
    //  no simd       50       66        0
    fn geometric_anti_product(self, other: AntiCircleRotor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[0])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[2])
                    + (self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1]) - (self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[1])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group1()[0]) + (self.group0()[0] * other.group1()[2])
                    - (self.group0()[1] * other.group2()[3])
                    - (self.group0()[2] * other.group1()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) - (self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])
                    - (self.group0()[2] * other.group2()[3])),
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group0()[1] * other.group2()[2])
                    - (self.group1()[0] * other.group1()[3])
                    - (self.group1()[0] * other.group2()[3])
                    - (self.group1()[1] * other.group1()[2])),
                (-(self.group0()[2] * other.group2()[0])
                    - (self.group1()[1] * other.group1()[3])
                    - (self.group1()[1] * other.group2()[3])
                    - (self.group1()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[1])
                    - (self.group1()[0] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[3])
                    - (self.group1()[2] * other.group2()[3])),
                ((self.group0()[1] * other.group2()[1]) + (self.group0()[2] * other.group2()[2]) + (self.group1()[1] * other.group1()[1]) + (self.group1()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1]) + (self.group0()[0] * other.group1()[3])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group1()[0]) + (self.group0()[1] * other.group1()[3])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) + (self.group0()[2] * other.group1()[3])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDipoleInversion> for AntiLine {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       62       78        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       65       81        0
    //  no simd       74       90        0
    fn geometric_anti_product(self, other: AntiDipoleInversion) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (self.group0()[0] * other.group2()[3])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) + (self.group0()[1] * other.group2()[3])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (self.group0()[2] * other.group2()[3])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])
                    + (self.group1()[0] * other.group2()[3])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0]) - (self.group0()[0] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group1()[1] * other.group2()[3])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])
                    + (self.group1()[2] * other.group2()[3])),
                ((other.group0()[0] * self.group1()[0])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[2])
                    + (self.group0()[0] * other.group3()[0])
                    + (self.group0()[1] * other.group3()[1])
                    + (self.group0()[2] * other.group3()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1]) - (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[1] * other.group3()[2])
                    - (self.group1()[2] * other.group1()[1])
                    + (self.group1()[2] * other.group3()[1])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group3()[3]) + (self.group0()[2] * other.group2()[0])
                    - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[0] * other.group3()[2])
                    - (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group1()[0])
                    - (self.group1()[2] * other.group3()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) + (self.group0()[2] * other.group3()[3]) + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[0] * other.group3()[1])
                    - (self.group1()[1] * other.group1()[0])
                    + (self.group1()[1] * other.group3()[0])
                    - (self.group1()[2] * other.group1()[3])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1]) - (self.group0()[1] * other.group3()[2])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group1()[0]) - (self.group0()[2] * other.group3()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) - (self.group0()[0] * other.group3()[1])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2]) - (self.group1()[1] * other.group1()[1])
                    + (self.group1()[1] * other.group3()[1])
                    - (self.group1()[2] * other.group1()[2])
                    + (self.group1()[2] * other.group3()[2])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[0]]) * swizzle!(other.group2(), 3, 3, 3, 0))),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum321> for AntiLine {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3       15        0
    fn geometric_anti_product(self, other: AntiDualNum321) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0] * -1.0),
                (other.group0()[1] * self.group0()[1] * -1.0),
                (other.group0()[1] * self.group0()[2] * -1.0),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[1])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group1()[2])),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum4> for AntiLine {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       18        0
    //    simd3        0        2        0
    // Totals...
    // yes simd        3       20        0
    //  no simd        3       24        0
    fn geometric_anti_product(self, other: AntiDualNum4) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other.group0()[0]) * self.group0() * Simd32x3::from(-1.0)),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group0()[2])),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (other.group0()[1] * self.group1()[0] * -1.0),
                (other.group0()[1] * self.group1()[1] * -1.0),
                (other.group0()[1] * self.group1()[2] * -1.0),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[0] * self.group1()[0] * -1.0),
                (other.group0()[0] * self.group1()[1] * -1.0),
                (other.group0()[0] * self.group1()[2] * -1.0),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum5> for AntiLine {
    type Output = Line;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        4        0
    // no simd        3       12        0
    fn geometric_anti_product(self, other: AntiDualNum5) -> Self::Output {
        return Line::from_groups(
            // e415, e425, e435
            (Simd32x3::from(other.group0()[1]) * self.group0() * Simd32x3::from(-1.0)),
            // e235, e315, e125
            (-(Simd32x3::from(other.group0()[0]) * self.group0()) - (Simd32x3::from(other.group0()[1]) * self.group1())),
        );
    }
}
impl GeometricAntiProduct<AntiFlatPoint> for AntiLine {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       18        0
    fn geometric_anti_product(self, other: AntiFlatPoint) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) - (self.group1()[0] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0]) - (self.group1()[1] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) - (self.group1()[2] * other.group0()[3])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiFlector> for AntiLine {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       23        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       16       27        0
    //  no simd       28       39        0
    fn geometric_anti_product(self, other: AntiFlector) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) - (self.group1()[0] * other.group0()[3]) - (self.group1()[1] * other.group1()[2])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[3])
                    - (self.group1()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) - (self.group1()[0] * other.group1()[1]) - (self.group1()[2] * other.group0()[3])),
                (self.group0()[2] * other.group1()[2]),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) * -1.0),
                ((self.group0()[2] * other.group1()[0]) * -1.0),
                ((self.group0()[0] * other.group1()[1]) * -1.0),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<AntiLine> for AntiLine {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       19       27        0
    fn geometric_anti_product(self, other: AntiLine) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1]) + (other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group1()[0]) - (other.group1()[0] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) + (other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[0])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[2])
                    + (other.group1()[0] * self.group0()[0])
                    + (other.group1()[1] * self.group0()[1])
                    + (other.group1()[2] * self.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiMotor> for AntiLine {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       24        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       19       27        0
    //  no simd       28       36        0
    fn geometric_anti_product(self, other: AntiMotor) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group0()[2])),
                (-(self.group0()[1] * other.group0()[3]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) - (self.group0()[2] * other.group0()[3])),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group0()[0] * other.group1()[3])
                    - (self.group0()[1] * other.group1()[2])
                    - (self.group1()[0] * other.group0()[3])
                    - (self.group1()[1] * other.group0()[2])),
                (-(self.group0()[1] * other.group1()[3])
                    - (self.group0()[2] * other.group1()[0])
                    - (self.group1()[1] * other.group0()[3])
                    - (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[3])
                    - (self.group1()[0] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[3])),
                ((self.group0()[1] * other.group1()[1]) + (self.group0()[2] * other.group1()[2]) + (self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<AntiPlane> for AntiLine {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        8        0
    //    simd4        3        5        0
    // Totals...
    // yes simd        4       13        0
    //  no simd       13       28        0
    fn geometric_anti_product(self, other: AntiPlane) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            ((Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[2]])
                * swizzle!(other.group0(), 2, 0, 1, 2)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) * -1.0),
                ((self.group0()[2] * other.group0()[0]) * -1.0),
                ((self.group0()[0] * other.group0()[1]) * -1.0),
                ((self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<AntiQuadNum> for AntiLine {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       21        0
    //    simd3        0        2        0
    // Totals...
    // yes simd       12       23        0
    //  no simd       12       27        0
    fn geometric_anti_product(self, other: AntiQuadNum) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other.group0()[0]) * self.group0() * Simd32x3::from(-1.0)),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group1()[0] * other.group0()[0])),
                (-(self.group0()[1] * other.group0()[3]) - (self.group1()[1] * other.group0()[0])),
                (-(self.group0()[2] * other.group0()[3]) - (self.group1()[2] * other.group0()[0])),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[1]) - (self.group1()[0] * other.group0()[2]) - (self.group1()[0] * other.group0()[3])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group1()[1] * other.group0()[2]) - (self.group1()[1] * other.group0()[3])),
                (-(self.group0()[2] * other.group0()[1]) - (self.group1()[2] * other.group0()[2]) - (self.group1()[2] * other.group0()[3])),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[2]) - (self.group1()[0] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[2]) - (self.group1()[1] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiScalar> for AntiLine {
    type Output = AntiLine;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn geometric_anti_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiLine::from_groups(
            // e23, e31, e12
            (Simd32x3::from(other[e12345]) * self.group0()),
            // e15, e25, e35
            (Simd32x3::from(other[e12345]) * self.group1()),
        );
    }
}
impl GeometricAntiProduct<AntiTripleNum> for AntiLine {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       18        0
    //    simd3        0        2        0
    // Totals...
    // yes simd        6       20        0
    //  no simd        6       24        0
    fn geometric_anti_product(self, other: AntiTripleNum) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other.group0()[0]) * self.group0() * Simd32x3::from(-1.0)),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[2]) - (self.group1()[0] * other.group0()[0])),
                (-(self.group0()[1] * other.group0()[2]) - (self.group1()[1] * other.group0()[0])),
                (-(self.group0()[2] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[1]) - (self.group1()[0] * other.group0()[2])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group1()[1] * other.group0()[2])),
                (-(self.group0()[2] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group1()[0] * other.group0()[0] * -1.0),
                (self.group1()[1] * other.group0()[0] * -1.0),
                (self.group1()[2] * other.group0()[0] * -1.0),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<Circle> for AntiLine {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       56        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       41       57        0
    //  no simd       44       60        0
    fn geometric_anti_product(self, other: Circle) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0]) - (self.group1()[0] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])),
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1]) - (self.group1()[0] * other.group1()[3]) + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[2] * other.group2()[0])
                    - (self.group1()[0] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[0])
                    - (self.group1()[2] * other.group1()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))),
        );
    }
}
impl GeometricAntiProduct<CircleRotor> for AntiLine {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       46       62        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       47       63        0
    //  no simd       50       66        0
    fn geometric_anti_product(self, other: CircleRotor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) + (self.group1()[1] * other.group0()[2])
                    - (self.group1()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group2()[3]) + (self.group0()[2] * other.group1()[0])
                    - (self.group1()[0] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group2()[3]) + (self.group1()[0] * other.group0()[1])
                    - (self.group1()[1] * other.group0()[0])),
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1]) - (self.group1()[0] * other.group1()[3])
                    + (self.group1()[0] * other.group2()[3])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[2] * other.group2()[0])
                    - (self.group1()[0] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[3])
                    + (self.group1()[1] * other.group2()[3])
                    + (self.group1()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[0])
                    - (self.group1()[2] * other.group1()[3])
                    + (self.group1()[2] * other.group2()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))),
        );
    }
}
impl GeometricAntiProduct<Dipole> for AntiLine {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       56        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       41       57        0
    //  no simd       44       60        0
    fn geometric_anti_product(self, other: Dipole) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[2])
                    + (self.group1()[0] * other.group0()[0])
                    + (self.group1()[1] * other.group0()[1])
                    + (self.group1()[2] * other.group0()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1]) - (self.group1()[1] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0]) + (self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) - (self.group1()[0] * other.group0()[1])
                    + (self.group1()[1] * other.group0()[0])),
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group0()[1] * other.group2()[2]) + (self.group0()[2] * other.group2()[1])
                    - (self.group1()[0] * other.group1()[3])
                    - (self.group1()[1] * other.group1()[2])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[2] * other.group2()[0]) - (self.group1()[1] * other.group1()[3]) - (self.group1()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[0])
                    - (self.group1()[0] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[3])),
                ((self.group0()[0] * other.group2()[0])
                    + (self.group0()[1] * other.group2()[1])
                    + (self.group0()[2] * other.group2()[2])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) - (self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group0()[1] * other.group1()[3]) + (self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                ((self.group0()[2] * other.group1()[3]) - (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<DipoleInversion> for AntiLine {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       62       78        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       65       81        0
    //  no simd       74       90        0
    fn geometric_anti_product(self, other: DipoleInversion) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group2()[3]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group2()[3])),
                ((self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[2])
                    + (self.group1()[0] * other.group0()[0])
                    + (self.group1()[1] * other.group0()[1])
                    + (self.group1()[2] * other.group0()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])
                    - (self.group1()[0] * other.group2()[3])
                    - (self.group1()[1] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0]) + (self.group1()[0] * other.group0()[2])
                    - (self.group1()[1] * other.group2()[3])
                    - (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) - (self.group1()[0] * other.group0()[1])
                    + (self.group1()[1] * other.group0()[0])
                    - (self.group1()[2] * other.group2()[3])),
                (-(self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group3()[1]) - (self.group0()[2] * other.group3()[2])
                    + (self.group1()[0] * other.group0()[0])
                    + (self.group1()[1] * other.group0()[1])
                    + (self.group1()[2] * other.group0()[2])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group0()[0] * other.group3()[3])
                    - (self.group0()[1] * other.group2()[2])
                    - (self.group1()[0] * other.group1()[3])
                    - (self.group1()[1] * other.group1()[2])
                    - (self.group1()[1] * other.group3()[2])),
                (-(self.group0()[1] * other.group3()[3])
                    - (self.group0()[2] * other.group2()[0])
                    - (self.group1()[1] * other.group1()[3])
                    - (self.group1()[2] * other.group1()[0])
                    - (self.group1()[2] * other.group3()[0])),
                (-(self.group0()[0] * other.group2()[1])
                    - (self.group0()[2] * other.group3()[3])
                    - (self.group1()[0] * other.group1()[1])
                    - (self.group1()[0] * other.group3()[1])
                    - (self.group1()[2] * other.group1()[3])),
                ((self.group0()[1] * other.group2()[1])
                    + (self.group0()[2] * other.group2()[2])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[1] * other.group3()[1])
                    + (self.group1()[2] * other.group1()[2])
                    + (self.group1()[2] * other.group3()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group1()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group3()[2])
                    - (self.group0()[2] * other.group3()[1])
                    - (self.group1()[0] * other.group2()[3])
                    - (self.group1()[1] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group3()[0])
                    + (self.group1()[0] * other.group0()[2])
                    - (self.group1()[1] * other.group2()[3])
                    - (self.group1()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group3()[0]) + (self.group0()[2] * other.group1()[3]) - (self.group1()[0] * other.group0()[1])
                    + (self.group1()[1] * other.group0()[0])
                    - (self.group1()[2] * other.group2()[3])),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<DualNum321> for AntiLine {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3       15        0
    fn geometric_anti_product(self, other: DualNum321) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[1])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group1()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<DualNum4> for AntiLine {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       15        0
    //    simd3        0        1        0
    // Totals...
    // yes simd        3       16        0
    //  no simd        3       18        0
    fn geometric_anti_product(self, other: DualNum4) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other.group0()[0]) * self.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[2])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[1] * self.group1()[0]),
                (other.group0()[1] * self.group1()[1]),
                (other.group0()[1] * self.group1()[2]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group1()[0] * -1.0),
                (other.group0()[0] * self.group1()[1] * -1.0),
                (other.group0()[0] * self.group1()[2] * -1.0),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<DualNum5> for AntiLine {
    type Output = AntiLine;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        3        0
    // no simd        3        9        0
    fn geometric_anti_product(self, other: DualNum5) -> Self::Output {
        return AntiLine::from_groups(
            // e23, e31, e12
            (Simd32x3::from(other.group0()[1]) * self.group0()),
            // e15, e25, e35
            ((Simd32x3::from(other.group0()[0]) * self.group0()) + (Simd32x3::from(other.group0()[1]) * self.group1())),
        );
    }
}
impl GeometricAntiProduct<FlatPoint> for AntiLine {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       15        0
    fn geometric_anti_product(self, other: FlatPoint) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1]) - (self.group1()[0] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0]) - (self.group1()[1] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) - (self.group1()[2] * other.group0()[3])),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Flector> for AntiLine {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       24        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       16       28        0
    //  no simd       28       40        0
    fn geometric_anti_product(self, other: Flector) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1]) - (self.group1()[0] * other.group0()[3])
                    + (self.group1()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0]) + (self.group1()[0] * other.group1()[2]) - (self.group1()[1] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) + (self.group1()[1] * other.group1()[0])
                    - (self.group1()[2] * other.group0()[3])),
                ((self.group0()[2] * other.group1()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                ((self.group0()[2] * other.group1()[1]) * -1.0),
                ((self.group0()[0] * other.group1()[2]) * -1.0),
                ((self.group0()[1] * other.group1()[0]) * -1.0),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) + (self.group1()[1] * other.group1()[1]) + (self.group1()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))),
        );
    }
}
impl GeometricAntiProduct<Line> for AntiLine {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       19       27        0
    fn geometric_anti_product(self, other: Line) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0]) - (self.group1()[0] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Motor> for AntiLine {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       24        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       19       27        0
    //  no simd       28       36        0
    fn geometric_anti_product(self, other: Motor) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e3215
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) + (self.group1()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2])),
                ((self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group1()[0]) + (self.group1()[1] * other.group0()[3]) + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[2] * other.group1()[3]) + (self.group1()[0] * other.group0()[1]) + (self.group1()[2] * other.group0()[3])),
                (-(self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<MultiVector> for AntiLine {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       89      109        0
    //    simd3       17       21        0
    //    simd4        5        5        0
    // Totals...
    // yes simd      111      135        0
    //  no simd      160      192        0
    fn geometric_anti_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group0()[0] * other.group6()[0])
                    - (self.group0()[1] * other.group6()[1])
                    - (self.group0()[2] * other.group6()[2])
                    - (self.group1()[0] * other.group7()[0])
                    - (self.group1()[1] * other.group7()[1])
                    - (self.group1()[2] * other.group7()[2])),
                ((self.group0()[0] * other.group5()[0])
                    + (self.group0()[1] * other.group5()[1])
                    + (self.group0()[2] * other.group5()[2])
                    + (self.group1()[0] * other.group4()[0])
                    + (self.group1()[1] * other.group4()[1])
                    + (self.group1()[2] * other.group4()[2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group9()[2])
                    - (self.group0()[2] * other.group9()[1])
                    - (self.group1()[0] * other[e45])
                    - (self.group1()[1] * other.group4()[2])
                    + (self.group1()[2] * other.group4()[1])),
                (-(self.group0()[0] * other.group9()[2])
                    + (self.group0()[1] * other.group3()[3])
                    + (self.group0()[2] * other.group9()[0])
                    + (self.group1()[0] * other.group4()[2])
                    - (self.group1()[1] * other[e45])
                    - (self.group1()[2] * other.group4()[0])),
                ((self.group0()[0] * other.group9()[1]) - (self.group0()[1] * other.group9()[0]) + (self.group0()[2] * other.group3()[3]) - (self.group1()[0] * other.group4()[1])
                    + (self.group1()[1] * other.group4()[0])
                    - (self.group1()[2] * other[e45])),
                ((self.group0()[0] * other.group4()[0]) + (self.group0()[1] * other.group4()[1]) + (self.group0()[2] * other.group4()[2])),
            ]),
            // e5
            ((self.group0()[0] * other.group3()[0])
                + (self.group0()[1] * other.group3()[1])
                + (self.group0()[2] * other.group3()[2])
                + (self.group1()[0] * other.group5()[0])
                + (self.group1()[0] * other.group9()[0])
                + (self.group1()[1] * other.group5()[1])
                + (self.group1()[1] * other.group9()[1])
                + (self.group1()[2] * other.group5()[2])
                + (self.group1()[2] * other.group9()[2])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group0()[0] * other[e1]) + (self.group0()[1] * other.group8()[2])
                    - (self.group0()[2] * other.group8()[1])
                    - (self.group1()[0] * other.group6()[3])
                    - (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group6()[1])),
                (-(self.group0()[0] * other.group8()[2]) + (self.group0()[1] * other[e1]) + (self.group0()[2] * other.group8()[0])
                    - (self.group1()[0] * other.group6()[2])
                    - (self.group1()[1] * other.group6()[3])
                    - (self.group1()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group8()[1]) - (self.group0()[1] * other.group8()[0]) + (self.group0()[2] * other[e1])
                    - (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group6()[0])
                    - (self.group1()[2] * other.group6()[3])),
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1]) + (self.group0()[2] * other.group1()[2])),
            ]) + (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[1], other.group1()[2], other.group6()[1], other.group7()[0]]))
                + (Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group6()[2], other.group0()[1], other.group1()[0], other.group7()[1]]))
                + (Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group1()[1], other.group6()[0], other.group0()[1], other.group7()[2]]))),
            // e41, e42, e43
            ((Simd32x3::from([other.group7()[2], other.group7()[0], other.group1()[3]]) * swizzle!(self.group0(), 1, 2, 2))
                + (Simd32x3::from([other.group1()[3], other.group1()[3], other.group7()[1]]) * swizzle!(self.group0(), 0, 1, 0))
                - (swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group7(), 1, 2, 0))),
            // e23, e31, e12
            ((Simd32x3::from(other.group0()[1]) * self.group0())
                + (Simd32x3::from([other.group7()[2], other.group7()[0], other.group1()[3]]) * swizzle!(self.group1(), 1, 2, 2))
                + (Simd32x3::from([other.group1()[3], other.group1()[3], other.group7()[1]]) * swizzle!(self.group1(), 0, 1, 0))
                - (Simd32x3::from([other.group6()[1], other.group6()[2], other.group6()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group6()[2], other.group6()[0], other.group6()[1]]) * swizzle!(self.group0(), 1, 2, 0))
                - (swizzle!(self.group1(), 2, 0, 1) * swizzle!(other.group7(), 1, 2, 0))),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[0]) - (self.group0()[1] * other.group5()[2]) + (self.group0()[2] * other.group5()[1])
                    - (self.group1()[0] * other[e45])
                    - (self.group1()[1] * other.group4()[2])
                    + (self.group1()[2] * other.group4()[1])),
                (-(other.group0()[0] * self.group0()[1]) + (self.group0()[0] * other.group5()[2]) - (self.group0()[2] * other.group5()[0])
                    + (self.group1()[0] * other.group4()[2])
                    - (self.group1()[1] * other[e45])
                    - (self.group1()[2] * other.group4()[0])),
                (-(other.group0()[0] * self.group0()[2]) - (self.group0()[0] * other.group5()[1]) + (self.group0()[1] * other.group5()[0])
                    - (self.group1()[0] * other.group4()[1])
                    + (self.group1()[1] * other.group4()[0])
                    - (self.group1()[2] * other[e45])),
                (-(self.group0()[0] * other.group9()[0]) - (self.group0()[1] * other.group9()[1]) - (self.group0()[2] * other.group9()[2])
                    + (self.group1()[0] * other.group4()[0])
                    + (self.group1()[1] * other.group4()[1])
                    + (self.group1()[2] * other.group4()[2])),
            ]),
            // e423, e431, e412
            (-(Simd32x3::from([other.group4()[2], other.group4()[0], other[e45]]) * swizzle!(self.group0(), 1, 2, 2))
                - (Simd32x3::from([other[e45], other[e45], other.group4()[1]]) * swizzle!(self.group0(), 0, 1, 0))
                + (swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group4(), 1, 2, 0))),
            // e235, e315, e125
            (-(Simd32x3::from(other.group0()[0]) * self.group1()) - (Simd32x3::from([other.group5()[2], other.group5()[0], other.group9()[1]]) * swizzle!(self.group1(), 1, 2, 0))
                + (Simd32x3::from([other.group3()[1], other.group3()[2], other.group3()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                - (Simd32x3::from([other.group3()[2], other.group3()[0], other.group9()[3]]) * swizzle!(self.group0(), 1, 2, 2))
                - (Simd32x3::from([other.group3()[3], other.group3()[3], other.group5()[1]]) * swizzle!(self.group1(), 0, 1, 0))
                + (Simd32x3::from([other.group9()[1], other.group9()[2], other.group9()[0]]) * swizzle!(self.group1(), 2, 0, 1))
                - (Simd32x3::from([other.group9()[2], other.group9()[0], other.group3()[3]]) * swizzle!(self.group1(), 1, 2, 2))
                - (Simd32x3::from([other.group9()[3], other.group9()[3], other.group3()[1]]) * swizzle!(self.group0(), 0, 1, 0))
                + (swizzle!(self.group1(), 2, 0, 1) * swizzle!(other.group5(), 1, 2, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) - (self.group1()[0] * other.group1()[3]) - (self.group1()[1] * other.group7()[2])
                    + (self.group1()[2] * other.group7()[1])),
                (-(self.group0()[2] * other.group1()[0]) + (self.group1()[0] * other.group7()[2])
                    - (self.group1()[1] * other.group1()[3])
                    - (self.group1()[2] * other.group7()[0])),
                (-(self.group0()[0] * other.group1()[1]) - (self.group1()[0] * other.group7()[1]) + (self.group1()[1] * other.group7()[0])
                    - (self.group1()[2] * other.group1()[3])),
                (-(self.group0()[0] * other.group8()[0]) - (self.group0()[1] * other.group8()[1]) - (self.group0()[2] * other.group8()[2])
                    + (self.group1()[1] * other.group1()[1])
                    - (self.group1()[1] * other.group6()[1])
                    + (self.group1()[2] * other.group1()[2])
                    - (self.group1()[2] * other.group6()[2])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group6(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e1234
            (-(self.group0()[0] * other.group7()[0]) - (self.group0()[1] * other.group7()[1]) - (self.group0()[2] * other.group7()[2])),
        );
    }
}
impl GeometricAntiProduct<Plane> for AntiLine {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        8        0
    //    simd4        3        5        0
    // Totals...
    // yes simd        4       13        0
    //  no simd       13       28        0
    fn geometric_anti_product(self, other: Plane) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            ((Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[2]])
                * swizzle!(other.group0(), 1, 2, 0, 2)
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[1]]) * swizzle!(other.group0(), 2, 0, 1, 1))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                ((self.group0()[2] * other.group0()[1]) * -1.0),
                ((self.group0()[0] * other.group0()[2]) * -1.0),
                ((self.group0()[1] * other.group0()[0]) * -1.0),
                ((self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
        );
    }
}
impl GeometricAntiProduct<QuadNum> for AntiLine {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       21        0
    //    simd3        0        1        0
    // Totals...
    // yes simd       12       22        0
    //  no simd       12       24        0
    fn geometric_anti_product(self, other: QuadNum) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other.group0()[0]) * self.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[0] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group1()[1] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[2] * other.group0()[0])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[1]) - (self.group1()[0] * other.group0()[2]) + (self.group1()[0] * other.group0()[3])),
                ((self.group0()[1] * other.group0()[1]) - (self.group1()[1] * other.group0()[2]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[2] * other.group0()[1]) - (self.group1()[2] * other.group0()[2]) + (self.group1()[2] * other.group0()[3])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[2]) - (self.group1()[0] * other.group0()[0])),
                (-(self.group0()[1] * other.group0()[2]) - (self.group1()[1] * other.group0()[0])),
                (-(self.group0()[2] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<RoundPoint> for AntiLine {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       23        0
    //    simd3        0        1        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       13       25        0
    //  no simd       16       30        0
    fn geometric_anti_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other.group0()[3]) * self.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other[e2]) - (self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group0()[1] * other[e2]) + (self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                ((self.group0()[2] * other[e2]) - (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) - (self.group1()[0] * other.group0()[3])),
                (-(self.group0()[2] * other.group0()[0]) - (self.group1()[1] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[1]) - (self.group1()[2] * other.group0()[3])),
                ((self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<Scalar> for AntiLine {
    type Output = Line;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        4        0
    // no simd        0       12        0
    fn geometric_anti_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Line::from_groups(
            // e415, e425, e435
            (Simd32x3::from(other[scalar]) * self.group0() * Simd32x3::from(-1.0)),
            // e235, e315, e125
            (Simd32x3::from(other[scalar]) * self.group1() * Simd32x3::from(-1.0)),
        );
    }
}
impl GeometricAntiProduct<Sphere> for AntiLine {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       26        0
    //    simd3        0        2        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       13       29        0
    //  no simd       16       36        0
    fn geometric_anti_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other[e4315]) * self.group0() * Simd32x3::from(-1.0)),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group1()[0] * other[e4315] * -1.0),
                (self.group1()[1] * other[e4315] * -1.0),
                (self.group1()[2] * other[e4315] * -1.0),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                (-(self.group0()[1] * other.group0()[3]) + (self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[2] * other.group0()[3]) - (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                0.0,
            ]),
            // e1, e2, e3, e5
            (Simd32x4::from([
                (-(self.group0()[2] * other.group0()[1]) - (self.group1()[0] * other[e4315])),
                (-(self.group0()[0] * other.group0()[2]) - (self.group1()[1] * other[e4315])),
                (-(self.group0()[1] * other.group0()[0]) - (self.group1()[2] * other[e4315])),
                ((self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
        );
    }
}
impl GeometricAntiProduct<TripleNum> for AntiLine {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       18        0
    //    simd3        0        1        0
    // Totals...
    // yes simd        6       19        0
    //  no simd        6       21        0
    fn geometric_anti_product(self, other: TripleNum) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other.group0()[0]) * self.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[2]) + (self.group1()[0] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[2]) + (self.group1()[1] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[2]) + (self.group1()[2] * other.group0()[0])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[1]) + (self.group1()[0] * other.group0()[2])),
                ((self.group0()[1] * other.group0()[1]) + (self.group1()[1] * other.group0()[2])),
                ((self.group0()[2] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group1()[0] * other.group0()[0] * -1.0),
                (self.group1()[1] * other.group0()[0] * -1.0),
                (self.group1()[2] * other.group0()[0] * -1.0),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorEven> for AntiLine {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       72        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       62       78        0
    //  no simd       80       96        0
    fn geometric_anti_product(self, other: VersorEven) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group0()[2])),
                ((self.group0()[1] * other.group3()[3]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[2] * other.group3()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) - (self.group1()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0]) - (self.group1()[0] * other.group0()[2])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) - (self.group1()[1] * other.group0()[0])),
                ((self.group0()[1] * other.group3()[1]) + (self.group0()[2] * other.group3()[2]) + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group1()[1]]) * swizzle!(other.group0(), 2, 0, 1, 1))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1]) + (self.group1()[0] * other.group0()[3])
                    - (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[1] * other.group3()[2])
                    - (self.group1()[2] * other.group1()[1])
                    + (self.group1()[2] * other.group3()[1])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group2()[3]) + (self.group0()[2] * other.group2()[0])
                    - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[0] * other.group3()[2])
                    + (self.group1()[1] * other.group0()[3])
                    - (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group1()[0])
                    - (self.group1()[2] * other.group3()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) + (self.group0()[2] * other.group2()[3]) + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[0] * other.group3()[1])
                    - (self.group1()[1] * other.group1()[0])
                    + (self.group1()[1] * other.group3()[0])
                    + (self.group1()[2] * other.group0()[3])
                    - (self.group1()[2] * other.group1()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[1] * other.group3()[2]) - (self.group1()[0] * other.group3()[3]) - (self.group1()[1] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[1])),
                (-(self.group0()[2] * other.group3()[0]) + (self.group1()[0] * other.group0()[2])
                    - (self.group1()[1] * other.group3()[3])
                    - (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group3()[1]) - (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])
                    - (self.group1()[2] * other.group3()[3])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group1()[1] * other.group1()[1])
                    + (self.group1()[1] * other.group3()[1])
                    - (self.group1()[2] * other.group1()[2])
                    + (self.group1()[2] * other.group3()[2])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<VersorOdd> for AntiLine {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       72        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       62       78        0
    //  no simd       80       96        0
    fn geometric_anti_product(self, other: VersorOdd) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (-(self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group0()[2])),
                (-(self.group0()[1] * other.group2()[3]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) - (self.group0()[2] * other.group2()[3])),
                ((self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[2])
                    + (self.group1()[1] * other.group0()[1])
                    + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])
                    - (self.group1()[0] * other.group2()[3])
                    - (self.group1()[1] * other.group0()[2])),
                ((self.group0()[0] * other.group1()[2])
                    - (self.group0()[1] * other.group0()[3])
                    - (self.group0()[2] * other.group1()[0])
                    - (self.group1()[1] * other.group2()[3])
                    - (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])
                    - (self.group0()[2] * other.group0()[3])
                    - (self.group1()[0] * other.group0()[1])
                    - (self.group1()[2] * other.group2()[3])),
                (-(self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group3()[1]) - (self.group0()[2] * other.group3()[2])
                    + (self.group1()[1] * other.group0()[1])
                    + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group0()[0] * other.group3()[3])
                    - (self.group0()[1] * other.group2()[2])
                    - (self.group1()[0] * other.group0()[3])
                    - (self.group1()[0] * other.group1()[3])
                    - (self.group1()[1] * other.group1()[2])
                    - (self.group1()[1] * other.group3()[2])),
                (-(self.group0()[1] * other.group3()[3])
                    - (self.group0()[2] * other.group2()[0])
                    - (self.group1()[1] * other.group0()[3])
                    - (self.group1()[1] * other.group1()[3])
                    - (self.group1()[2] * other.group1()[0])
                    - (self.group1()[2] * other.group3()[0])),
                (-(self.group0()[0] * other.group2()[1])
                    - (self.group0()[2] * other.group3()[3])
                    - (self.group1()[0] * other.group1()[1])
                    - (self.group1()[0] * other.group3()[1])
                    - (self.group1()[2] * other.group0()[3])
                    - (self.group1()[2] * other.group1()[3])),
                ((self.group0()[1] * other.group2()[1])
                    + (self.group0()[2] * other.group2()[2])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[1] * other.group3()[1])
                    + (self.group1()[2] * other.group1()[2])
                    + (self.group1()[2] * other.group3()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group1()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group3()[2])
                    - (self.group0()[2] * other.group3()[1])
                    - (self.group1()[0] * other.group2()[3])
                    - (self.group1()[1] * other.group0()[2])),
                (-(self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group3()[0])
                    - (self.group1()[1] * other.group2()[3])
                    - (self.group1()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group3()[0]) + (self.group0()[2] * other.group1()[3])
                    - (self.group1()[0] * other.group0()[1])
                    - (self.group1()[2] * other.group2()[3])),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<VersorRoundPoint> for AntiLine {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       25        0
    //    simd3        0        1        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       16       28        0
    //  no simd       22       36        0
    fn geometric_anti_product(self, other: VersorRoundPoint) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other.group0()[3]) * self.group0()),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (other.group1()[1] * self.group0()[0]),
                (other.group1()[1] * self.group0()[1]),
                (other.group1()[1] * self.group0()[2]),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group1()[0] * self.group0()[0]) + (other.group1()[1] * self.group1()[0]) - (self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group1()[1]) + (self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                ((other.group1()[0] * self.group0()[2]) + (other.group1()[1] * self.group1()[2]) - (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) - (self.group1()[0] * other.group0()[3])),
                (-(self.group0()[2] * other.group0()[0]) - (self.group1()[1] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[1]) - (self.group1()[2] * other.group0()[3])),
                ((self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<VersorSphere> for AntiLine {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       29        0
    //    simd3        0        2        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       19       32        0
    //  no simd       22       39        0
    fn geometric_anti_product(self, other: VersorSphere) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other.group1()[0]) * self.group0() * Simd32x3::from(-1.0)),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group1()[0] * self.group1()[0]) - (other.group1()[1] * self.group0()[0])),
                (-(other.group1()[0] * self.group1()[1]) - (other.group1()[1] * self.group0()[1])),
                (-(other.group1()[0] * self.group1()[2]) - (other.group1()[1] * self.group0()[2])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (-(other.group1()[1] * self.group1()[0]) - (self.group0()[0] * other.group0()[3]) - (self.group1()[1] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[1])),
                (-(other.group1()[1] * self.group1()[1]) - (self.group0()[1] * other.group0()[3]) + (self.group1()[0] * other.group0()[2])
                    - (self.group1()[2] * other.group0()[0])),
                (-(other.group1()[1] * self.group1()[2]) - (self.group0()[2] * other.group0()[3]) - (self.group1()[0] * other.group0()[1])
                    + (self.group1()[1] * other.group0()[0])),
                0.0,
            ]),
            // e1, e2, e3, e5
            (Simd32x4::from([
                (-(other.group1()[0] * self.group1()[0]) - (self.group0()[2] * other.group0()[1])),
                (-(other.group1()[0] * self.group1()[1]) - (self.group0()[0] * other.group0()[2])),
                (-(other.group1()[0] * self.group1()[2]) - (self.group0()[1] * other.group0()[0])),
                ((self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
        );
    }
}
impl InfixGeometricAntiProduct for AntiMotor {}
impl GeometricAntiProduct<AntiCircleRotor> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       55        0
    //    simd4        9        9        0
    // Totals...
    // yes simd       45       64        0
    //  no simd       72       91        0
    fn geometric_anti_product(self, other: AntiCircleRotor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) * -1.0),
                ((other.group0()[1] * self.group0()[3]) * -1.0),
                ((other.group0()[2] * self.group0()[3]) * -1.0),
                ((other.group0()[0] * self.group1()[0])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[2])
                    + (other.group1()[1] * self.group0()[1])
                    + (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group0(), 3, 2, 0, 3))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3])
                    - (other.group0()[2] * self.group1()[1])
                    - (other.group1()[0] * self.group0()[3])
                    - (other.group1()[2] * self.group0()[1])
                    - (other.group2()[3] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[2])
                    - (other.group0()[1] * self.group1()[3])
                    - (other.group1()[0] * self.group0()[2])
                    - (other.group1()[1] * self.group0()[3])
                    - (other.group2()[3] * self.group0()[1])),
                (-(other.group0()[1] * self.group1()[0])
                    - (other.group0()[2] * self.group1()[3])
                    - (other.group1()[1] * self.group0()[0])
                    - (other.group1()[2] * self.group0()[3])
                    - (other.group2()[3] * self.group0()[2])),
                ((other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (swizzle!(other.group1(), 1, 2, 0, 3) * swizzle!(self.group0(), 2, 0, 1, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(other.group1()[3] * self.group1()[0])
                    - (other.group2()[0] * self.group0()[3])
                    - (other.group2()[2] * self.group0()[1])
                    - (other.group2()[3] * self.group1()[0])),
                (-(other.group1()[3] * self.group1()[1])
                    - (other.group2()[0] * self.group0()[2])
                    - (other.group2()[1] * self.group0()[3])
                    - (other.group2()[3] * self.group1()[1])),
                (-(other.group1()[3] * self.group1()[2])
                    - (other.group2()[1] * self.group0()[0])
                    - (other.group2()[2] * self.group0()[3])
                    - (other.group2()[3] * self.group1()[2])),
                ((other.group1()[1] * self.group1()[1]) + (other.group1()[2] * self.group1()[2]) + (other.group2()[1] * self.group0()[1]) + (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group1()[2], other.group1()[1], other.group1()[2], other.group2()[3]]) * swizzle!(self.group1(), 1, 3, 3, 3))
                - (swizzle!(other.group1(), 0, 0, 1, 3) * swizzle!(self.group1(), 3, 2, 0, 3))
                + (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (swizzle!(other.group2(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group1()[3]) + (other.group0()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) - (other.group0()[2] * self.group1()[3])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))),
        );
    }
}
impl GeometricAntiProduct<AntiDipoleInversion> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       34       44        0
    //    simd4       19       19        0
    // Totals...
    // yes simd       53       63        0
    //  no simd      110      120        0
    fn geometric_anti_product(self, other: AntiDipoleInversion) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[3])),
                ((other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([0.0, 0.0, 0.0, (other.group3()[2] * self.group0()[2])])
                + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group1(), 3, 2, 0, 0))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group2()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[1], other.group0()[2], other.group0()[1]]) * swizzle!(self.group1(), 1, 3, 3, 1))
                + (Simd32x4::from([other.group1()[0], other.group1()[0], other.group1()[1], other.group3()[0]]) * swizzle!(self.group0(), 3, 2, 0, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[1], other.group1()[2], other.group3()[1]]) * swizzle!(self.group0(), 1, 3, 3, 1))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[2]]) * swizzle!(self.group1(), 0, 1, 2, 2))
                - (swizzle!(other.group1(), 1, 2, 0, 3) * swizzle!(self.group0(), 2, 0, 1, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group1()[0] * self.group1()[3]) - (other.group1()[1] * self.group1()[2]) + (other.group1()[2] * self.group1()[1]) - (other.group1()[3] * self.group1()[0])
                    + (other.group2()[2] * self.group0()[1])
                    - (other.group3()[0] * self.group1()[3])
                    + (other.group3()[1] * self.group1()[2])
                    - (other.group3()[2] * self.group1()[1])
                    + (other.group3()[3] * self.group0()[0])),
                ((other.group1()[0] * self.group1()[2]) + (other.group1()[1] * self.group1()[3]) - (other.group1()[2] * self.group1()[0]) - (other.group1()[3] * self.group1()[1])
                    + (other.group2()[1] * self.group0()[3])
                    - (other.group3()[0] * self.group1()[2])
                    - (other.group3()[1] * self.group1()[3])
                    + (other.group3()[2] * self.group1()[0])
                    + (other.group3()[3] * self.group0()[1])),
                (-(other.group1()[0] * self.group1()[1]) + (other.group1()[1] * self.group1()[0]) + (other.group1()[2] * self.group1()[3])
                    - (other.group1()[3] * self.group1()[2])
                    + (other.group2()[2] * self.group0()[3])
                    + (other.group3()[0] * self.group1()[1])
                    - (other.group3()[1] * self.group1()[0])
                    - (other.group3()[2] * self.group1()[3])
                    + (other.group3()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (swizzle!(other.group2(), 0, 0, 1, 3) * swizzle!(self.group0(), 3, 2, 0, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(other.group2()[2] * self.group0()[2]) + (other.group3()[2] * self.group1()[2]) + (other.group3()[3] * self.group0()[3])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 3, 2, 0, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group1(), 1, 3, 3, 1))
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group1()[3]]) * self.group1())
                - (Simd32x4::from([other.group3()[0], other.group3()[0], other.group3()[1], other.group2()[0]]) * swizzle!(self.group0(), 3, 2, 0, 0))
                - (Simd32x4::from([other.group3()[2], other.group3()[1], other.group3()[2], other.group2()[1]]) * swizzle!(self.group0(), 1, 3, 3, 1))
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[2]]) * swizzle!(other.group1(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[1]]) * swizzle!(other.group3(), 1, 2, 0, 1))),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum321> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        5        0
    //    simd4        1        4        0
    // Totals...
    // yes simd        1        9        0
    //  no simd        4       21        0
    fn geometric_anti_product(self, other: AntiDualNum321) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[1] * self.group0()[3] * -1.0)]),
            // e415, e425, e435, e321
            (Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group0()[0]]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e235, e315, e125, e5
            (-(Simd32x4::from(other.group0()[0]) * self.group1()) - (Simd32x4::from(other.group0()[1]) * self.group1())),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum4> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       16        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        4       20        0
    //  no simd        4       32        0
    fn geometric_anti_product(self, other: AntiDualNum4) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group0()[2])),
                (other.group0()[0] * self.group1()[3] * -1.0),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from(other.group0()[1]) * self.group1() * Simd32x4::from(-1.0)),
            // e1, e2, e3, e4
            (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]) * Simd32x4::from(-1.0)),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum5> for AntiMotor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        1        4        0
    // no simd        4       16        0
    fn geometric_anti_product(self, other: AntiDualNum5) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(other.group0()[1]) * self.group0() * Simd32x4::from(-1.0)),
            // e235, e315, e125, e5
            (-(Simd32x4::from(other.group0()[0]) * self.group0()) - (Simd32x4::from(other.group0()[1]) * self.group1())),
        );
    }
}
impl GeometricAntiProduct<AntiFlatPoint> for AntiMotor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       12       24        0
    fn geometric_anti_product(self, other: AntiFlatPoint) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) - (other.group0()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[3]) - (other.group0()[2] * self.group0()[0]) - (other.group0()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group0()[3])
                    - (other.group0()[3] * self.group1()[2])),
                (other.group0()[3] * self.group0()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[3] * self.group0()[0] * -1.0),
                (other.group0()[3] * self.group0()[1] * -1.0),
                (other.group0()[3] * self.group0()[2] * -1.0),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group0()[3] * self.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiFlector> for AntiMotor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       16        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       20       24        0
    //  no simd       44       48        0
    fn geometric_anti_product(self, other: AntiFlector) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from([
                (-(other.group0()[3] * self.group1()[0]) - (other.group1()[0] * self.group1()[3]) - (other.group1()[2] * self.group1()[1])
                    + (other.group1()[3] * self.group0()[0])),
                (-(other.group0()[3] * self.group1()[1]) - (other.group1()[0] * self.group1()[2]) - (other.group1()[1] * self.group1()[3])
                    + (other.group1()[3] * self.group0()[1])),
                (-(other.group0()[3] * self.group1()[2]) - (other.group1()[1] * self.group1()[0]) - (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group0()[2])),
                0.0,
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 3, 2, 0, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group0(), 1, 3, 3, 1))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[2]]) * swizzle!(other.group1(), 1, 2, 0, 2))
                - (swizzle!(other.group0(), 1, 2, 0, 3) * swizzle!(self.group0(), 2, 0, 1, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(other.group0()[3] * self.group1()[3])
                    + (other.group1()[1] * self.group1()[1])
                    + (other.group1()[2] * self.group1()[2])
                    + (other.group1()[3] * self.group0()[3])),
            ]) - (Simd32x4::from([other.group1()[0], other.group1()[0], other.group1()[1], other.group0()[1]]) * swizzle!(self.group0(), 3, 2, 0, 1))
                - (Simd32x4::from([other.group1()[2], other.group1()[1], other.group1()[2], other.group0()[2]]) * swizzle!(self.group0(), 1, 3, 3, 2))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (swizzle!(other.group0(), 3, 3, 3, 0) * swizzle!(self.group0(), 0, 1, 2, 0))),
        );
    }
}
impl GeometricAntiProduct<AntiLine> for AntiMotor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       24        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       19       27        0
    //  no simd       28       36        0
    fn geometric_anti_product(self, other: AntiLine) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group0()[3])),
                (-(other.group0()[1] * self.group0()[0]) - (other.group0()[2] * self.group0()[3])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3])
                    - (other.group0()[2] * self.group1()[1])
                    - (other.group1()[0] * self.group0()[3])
                    - (other.group1()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[2])
                    - (other.group0()[1] * self.group1()[3])
                    - (other.group1()[0] * self.group0()[2])
                    - (other.group1()[1] * self.group0()[3])),
                (-(other.group0()[1] * self.group1()[0])
                    - (other.group0()[2] * self.group1()[3])
                    - (other.group1()[1] * self.group0()[0])
                    - (other.group1()[2] * self.group0()[3])),
                ((other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2]) + (other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
        );
    }
}
impl GeometricAntiProduct<AntiMotor> for AntiMotor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       24        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       22       30        0
    //  no simd       40       48        0
    fn geometric_anti_product(self, other: AntiMotor) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from([
                (-(other.group0()[2] * self.group0()[1]) - (other.group0()[3] * self.group0()[0])),
                (-(other.group0()[1] * self.group0()[3]) - (other.group0()[3] * self.group0()[1])),
                (-(other.group0()[2] * self.group0()[3]) - (other.group0()[3] * self.group0()[2])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) - (swizzle!(other.group0(), 0, 0, 1, 3) * swizzle!(self.group0(), 3, 2, 0, 3))
                + (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(other.group0()[2] * self.group1()[1])
                    - (other.group0()[3] * self.group1()[0])
                    - (other.group1()[2] * self.group0()[1])
                    - (other.group1()[3] * self.group0()[0])),
                (-(other.group0()[1] * self.group1()[3])
                    - (other.group0()[3] * self.group1()[1])
                    - (other.group1()[1] * self.group0()[3])
                    - (other.group1()[3] * self.group0()[1])),
                (-(other.group0()[2] * self.group1()[3])
                    - (other.group0()[3] * self.group1()[2])
                    - (other.group1()[2] * self.group0()[3])
                    - (other.group1()[3] * self.group0()[2])),
                ((other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2]) + (other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
            ]) - (swizzle!(other.group0(), 0, 0, 1, 3) * swizzle!(self.group1(), 3, 2, 0, 3))
                + (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (swizzle!(other.group1(), 0, 0, 1, 3) * swizzle!(self.group0(), 3, 2, 0, 3))
                + (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
        );
    }
}
impl GeometricAntiProduct<AntiPlane> for AntiMotor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       16        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       11       19        0
    //  no simd       20       28        0
    fn geometric_anti_product(self, other: AntiPlane) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from([
                (-(self.group1()[1] * other.group0()[2]) - (self.group1()[3] * other.group0()[0])),
                (-(self.group1()[2] * other.group0()[0]) - (self.group1()[3] * other.group0()[1])),
                (-(self.group1()[0] * other.group0()[1]) - (self.group1()[3] * other.group0()[2])),
                (self.group0()[2] * other.group0()[2]),
            ]) + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))
                + (swizzle!(self.group0(), 0, 1, 2, 0) * swizzle!(other.group0(), 3, 3, 3, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) - (self.group0()[3] * other.group0()[0])),
                (-(self.group0()[2] * other.group0()[0]) - (self.group0()[3] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[1]) - (self.group0()[3] * other.group0()[2])),
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))),
        );
    }
}
impl GeometricAntiProduct<AntiQuadNum> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       16        0
    //    simd4        3        6        0
    // Totals...
    // yes simd        7       22        0
    //  no simd       16       40        0
    fn geometric_anti_product(self, other: AntiQuadNum) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0] * -1.0),
                (self.group0()[1] * other.group0()[0] * -1.0),
                (self.group0()[2] * other.group0()[0] * -1.0),
                (-(self.group0()[3] * other.group0()[3]) - (self.group1()[3] * other.group0()[0])),
            ]),
            // e415, e425, e435, e321
            ((Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]])
                * swizzle!(other.group0(), 0, 0, 0, 2)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]) * swizzle!(other.group0(), 3, 3, 3, 0))),
            // e235, e315, e125, e5
            (-(Simd32x4::from(other.group0()[1]) * self.group0()) - (Simd32x4::from(other.group0()[2]) * self.group1()) - (Simd32x4::from(other.group0()[3]) * self.group1())),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[2]) - (self.group1()[0] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[2]) - (self.group1()[1] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (self.group0()[3] * other.group0()[0] * -1.0),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiScalar> for AntiMotor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn geometric_anti_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from(other[e12345]) * self.group0()),
            // e15, e25, e35, e3215
            (Simd32x4::from(other[e12345]) * self.group1()),
        );
    }
}
impl GeometricAntiProduct<AntiTripleNum> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       16        0
    //    simd4        1        4        0
    // Totals...
    // yes simd        5       20        0
    //  no simd        8       32        0
    fn geometric_anti_product(self, other: AntiTripleNum) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[2] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[1]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group0()[2])),
                (other.group0()[0] * self.group1()[3] * -1.0),
            ]),
            // e235, e315, e125, e5
            (-(Simd32x4::from(other.group0()[1]) * self.group0()) - (Simd32x4::from(other.group0()[2]) * self.group1())),
            // e1, e2, e3, e4
            (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]) * Simd32x4::from(-1.0)),
        );
    }
}
impl GeometricAntiProduct<Circle> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       48        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       40       56        0
    //  no simd       64       80        0
    fn geometric_anti_product(self, other: Circle) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[3])),
                ((other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) + (self.group0()[1] * other.group1()[2]) + (self.group0()[3] * other.group1()[0])),
                (-(other.group0()[2] * self.group1()[0]) + (self.group0()[2] * other.group1()[0]) + (self.group0()[3] * other.group1()[1])),
                (-(other.group0()[0] * self.group1()[1]) + (self.group0()[0] * other.group1()[1]) + (self.group0()[3] * other.group1()[2])),
                (other.group0()[2] * self.group1()[2]),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group1(), 3, 2, 0, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[1], other.group0()[2], other.group0()[1]]) * swizzle!(self.group1(), 1, 3, 3, 1))
                - (swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group1(), 1, 2, 0, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group2()[0] * self.group0()[3]) + (other.group2()[2] * self.group0()[1]) - (self.group1()[0] * other.group1()[3]) + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])
                    + (self.group1()[3] * other.group1()[0])),
                ((other.group2()[0] * self.group0()[2]) + (other.group2()[1] * self.group0()[3]) - (self.group1()[0] * other.group1()[2]) - (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group1()[0])
                    + (self.group1()[3] * other.group1()[1])),
                ((other.group2()[1] * self.group0()[0]) + (other.group2()[2] * self.group0()[3]) + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[0])
                    - (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (other.group0()[1] * self.group1()[2]),
                (other.group0()[2] * self.group1()[0]),
                (other.group0()[0] * self.group1()[1]),
                (-(other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 3, 2, 0, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group1(), 1, 3, 3, 1))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))),
        );
    }
}
impl GeometricAntiProduct<CircleRotor> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       35       48        0
    //    simd4       10       10        0
    // Totals...
    // yes simd       45       58        0
    //  no simd       75       88        0
    fn geometric_anti_product(self, other: CircleRotor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (other.group0()[2] * self.group0()[1]),
                (other.group0()[1] * self.group0()[3]),
                (other.group0()[2] * self.group0()[3]),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group0(), 3, 2, 0, 3))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2])
                    + (self.group0()[0] * other.group2()[3])
                    + (self.group0()[1] * other.group1()[2])
                    + (self.group0()[3] * other.group1()[0])),
                (-(other.group0()[2] * self.group1()[0])
                    + (self.group0()[1] * other.group2()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group0()[3] * other.group1()[1])),
                (-(other.group0()[0] * self.group1()[1])
                    + (self.group0()[0] * other.group1()[1])
                    + (self.group0()[2] * other.group2()[3])
                    + (self.group0()[3] * other.group1()[2])),
                (other.group0()[2] * self.group1()[2]),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group1(), 3, 2, 0, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[1], other.group0()[2], other.group0()[1]]) * swizzle!(self.group1(), 1, 3, 3, 1))
                - (swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group1(), 1, 2, 0, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) + (self.group0()[3] * other.group2()[0]) - (self.group1()[0] * other.group1()[3])
                    + (self.group1()[0] * other.group2()[3])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])
                    + (self.group1()[3] * other.group1()[0])),
                ((self.group0()[2] * other.group2()[0]) + (self.group0()[3] * other.group2()[1]) - (self.group1()[0] * other.group1()[2]) - (self.group1()[1] * other.group1()[3])
                    + (self.group1()[1] * other.group2()[3])
                    + (self.group1()[2] * other.group1()[0])
                    + (self.group1()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[3] * other.group2()[2]) + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[0])
                    - (self.group1()[2] * other.group1()[3])
                    + (self.group1()[2] * other.group2()[3])
                    + (self.group1()[3] * other.group1()[2])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 3, 2, 0, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group2()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group1(), 1, 3, 3, 1))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))),
        );
    }
}
impl GeometricAntiProduct<Dipole> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       52        0
    //    simd4        7        7        0
    // Totals...
    // yes simd       43       59        0
    //  no simd       64       80        0
    fn geometric_anti_product(self, other: Dipole) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group0()[3])),
                (-(other.group0()[1] * self.group0()[0]) - (other.group0()[2] * self.group0()[3])),
                ((other.group0()[0] * self.group1()[0])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[2])
                    + (self.group0()[1] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3])
                    - (other.group0()[2] * self.group1()[1])
                    - (self.group0()[1] * other.group1()[2])
                    - (self.group0()[3] * other.group1()[0])),
                (-(other.group0()[0] * self.group1()[2])
                    - (other.group0()[1] * self.group1()[3])
                    - (self.group0()[2] * other.group1()[0])
                    - (self.group0()[3] * other.group1()[1])),
                (-(other.group0()[1] * self.group1()[0])
                    - (other.group0()[2] * self.group1()[3])
                    - (self.group0()[0] * other.group1()[1])
                    - (self.group0()[3] * other.group1()[2])),
                ((other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group1(), 1, 2, 0, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(other.group2()[0] * self.group0()[3])
                    - (other.group2()[2] * self.group0()[1])
                    - (self.group1()[1] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[0])),
                (-(other.group2()[0] * self.group0()[2])
                    - (other.group2()[1] * self.group0()[3])
                    - (self.group1()[2] * other.group1()[0])
                    - (self.group1()[3] * other.group1()[1])),
                (-(other.group2()[1] * self.group0()[0])
                    - (other.group2()[2] * self.group0()[3])
                    - (self.group1()[2] * other.group1()[3])
                    - (self.group1()[3] * other.group1()[2])),
                ((other.group2()[1] * self.group0()[1]) + (other.group2()[2] * self.group0()[2]) + (self.group1()[1] * other.group1()[1]) + (self.group1()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group2()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (swizzle!(self.group1(), 0, 1, 0, 3) * swizzle!(other.group1(), 3, 3, 1, 3))
                + (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group1()[3]) + (other.group0()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) - (other.group0()[2] * self.group1()[3])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))),
        );
    }
}
impl GeometricAntiProduct<DipoleInversion> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       41       56        0
    //    simd4       16       16        0
    // Totals...
    // yes simd       57       72        0
    //  no simd      105      120        0
    fn geometric_anti_product(self, other: DipoleInversion) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group0()[3])),
                (-(other.group0()[1] * self.group0()[0]) - (other.group0()[2] * self.group0()[3])),
                ((other.group0()[0] * self.group1()[0])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[2])
                    + (self.group0()[1] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[2] * self.group1()[1]) - (self.group1()[0] * other.group2()[3])),
                (-(other.group0()[1] * self.group1()[3]) - (self.group1()[1] * other.group2()[3])),
                (-(other.group0()[2] * self.group1()[3]) - (self.group1()[2] * other.group2()[3])),
                ((other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2]) - (self.group0()[2] * other.group3()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group1(), 3, 2, 0, 3))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group3()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group1(), 1, 2, 0, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group0()[1] * other.group2()[2])
                    - (self.group0()[3] * other.group2()[0])
                    - (self.group1()[1] * other.group1()[2])
                    - (self.group1()[1] * other.group3()[2])
                    - (self.group1()[3] * other.group1()[0])
                    - (self.group1()[3] * other.group3()[0])),
                (-(self.group0()[2] * other.group2()[0])
                    - (self.group0()[3] * other.group2()[1])
                    - (self.group1()[2] * other.group1()[0])
                    - (self.group1()[2] * other.group3()[0])
                    - (self.group1()[3] * other.group1()[1])
                    - (self.group1()[3] * other.group3()[1])),
                (-(self.group0()[2] * other.group3()[3])
                    - (self.group0()[3] * other.group2()[2])
                    - (self.group1()[0] * other.group3()[1])
                    - (self.group1()[2] * other.group1()[3])
                    - (self.group1()[3] * other.group1()[2])
                    - (self.group1()[3] * other.group3()[2])),
                ((self.group0()[1] * other.group2()[1])
                    + (self.group0()[2] * other.group2()[2])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[1] * other.group3()[1])
                    + (self.group1()[2] * other.group1()[2])
                    + (self.group1()[2] * other.group3()[2])),
            ]) - (Simd32x4::from([other.group3()[3], other.group3()[3], other.group2()[1], other.group3()[3]]) * swizzle!(self.group0(), 0, 1, 0, 3))
                + (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (swizzle!(self.group1(), 0, 1, 0, 3) * swizzle!(other.group1(), 3, 3, 1, 3))
                + (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group3(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group1()[2])
                    - (other.group0()[2] * self.group1()[1])
                    - (self.group1()[0] * other.group2()[3])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group1()[3]) + (other.group0()[2] * self.group1()[0])
                    - (self.group1()[1] * other.group2()[3])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) - (other.group0()[2] * self.group1()[3]) - (self.group1()[2] * other.group2()[3])),
                0.0,
            ]) + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group0()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))
                + (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group0()[2]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group2()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[3], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 2, 1))),
        );
    }
}
impl GeometricAntiProduct<DualNum321> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       15        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        4       17        0
    //  no simd        4       23        0
    fn geometric_anti_product(self, other: DualNum321) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[1] * self.group0()[3])]),
            // e23, e31, e12, e45
            (Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group0()[0]]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[1])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group1()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<DualNum4> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       17        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        4       19        0
    //  no simd        4       25        0
    fn geometric_anti_product(self, other: DualNum4) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[2])),
                (other.group0()[0] * self.group1()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[1] * self.group1()[0]),
                (other.group0()[1] * self.group1()[1]),
                (other.group0()[1] * self.group1()[2]),
                (other.group0()[0] * self.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]]) * self.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
    }
}
impl GeometricAntiProduct<DualNum5> for AntiMotor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        1        3        0
    // no simd        4       12        0
    fn geometric_anti_product(self, other: DualNum5) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from(other.group0()[1]) * self.group0()),
            // e15, e25, e35, e3215
            ((Simd32x4::from(other.group0()[0]) * self.group0()) + (Simd32x4::from(other.group0()[1]) * self.group1())),
        );
    }
}
impl GeometricAntiProduct<FlatPoint> for AntiMotor {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       12       20        0
    fn geometric_anti_product(self, other: FlatPoint) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])
                    - (self.group0()[3] * other.group0()[0])
                    - (self.group1()[0] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0]) - (self.group0()[3] * other.group0()[1]) - (self.group1()[1] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])
                    - (self.group0()[3] * other.group0()[2])
                    - (self.group1()[2] * other.group0()[3])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Flector> for AntiMotor {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       16        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       20       24        0
    //  no simd       44       48        0
    fn geometric_anti_product(self, other: Flector) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from([
                (-(self.group1()[0] * other.group0()[3]) - (self.group1()[1] * other.group1()[2]) + (self.group1()[2] * other.group1()[1])
                    - (self.group1()[3] * other.group1()[0])),
                ((self.group1()[0] * other.group1()[2]) - (self.group1()[1] * other.group0()[3]) - (self.group1()[2] * other.group1()[0]) - (self.group1()[3] * other.group1()[1])),
                (-(self.group1()[0] * other.group1()[1]) + (self.group1()[1] * other.group1()[0])
                    - (self.group1()[2] * other.group0()[3])
                    - (self.group1()[3] * other.group1()[2])),
                0.0,
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group1()[3], other.group1()[1]]) * swizzle!(self.group0(), 1, 2, 2, 1))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))
                + (swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((self.group1()[0] * other.group1()[0]) + (self.group1()[1] * other.group1()[1]) + (self.group1()[2] * other.group1()[2]) - (self.group1()[3] * other.group0()[3])),
            ]) + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group0()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 2, 1))
                - (swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group1(), 1, 2, 0, 3))),
        );
    }
}
impl GeometricAntiProduct<Line> for AntiMotor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       24        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       19       27        0
    //  no simd       28       36        0
    fn geometric_anti_product(self, other: Line) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[3])),
                ((other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e15, e25, e35, e3215
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[2] * self.group1()[1]) + (other.group1()[0] * self.group0()[3]) + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group1()[3]) + (other.group1()[0] * self.group0()[2]) + (other.group1()[1] * self.group0()[3])),
                ((other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group1()[3]) + (other.group1()[1] * self.group0()[0]) + (other.group1()[2] * self.group0()[3])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
        );
    }
}
impl GeometricAntiProduct<Motor> for AntiMotor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       24        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       22       30        0
    //  no simd       40       48        0
    fn geometric_anti_product(self, other: Motor) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[0]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) + (swizzle!(self.group0(), 0, 1, 0, 3) * swizzle!(other.group0(), 3, 3, 1, 3))
                - (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) + (self.group0()[3] * other.group1()[0]) + (self.group1()[1] * other.group0()[2]) + (self.group1()[3] * other.group0()[0])),
                ((self.group0()[2] * other.group1()[0]) + (self.group0()[3] * other.group1()[1]) + (self.group1()[2] * other.group0()[0]) + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group1()[3]) + (self.group0()[3] * other.group1()[2]) + (self.group1()[2] * other.group0()[3]) + (self.group1()[3] * other.group0()[2])),
                (-(self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]) + (swizzle!(self.group0(), 0, 1, 0, 3) * swizzle!(other.group1(), 3, 3, 1, 3))
                - (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (swizzle!(self.group1(), 0, 1, 0, 3) * swizzle!(other.group0(), 3, 3, 1, 3))
                - (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<MultiVector> for AntiMotor {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       65       86        0
    //    simd3       20       22        0
    //    simd4       26       26        0
    // Totals...
    // yes simd      111      134        0
    //  no simd      229      256        0
    fn geometric_anti_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((other.group0()[1] * self.group0()[3])
                    - (other.group7()[0] * self.group1()[0])
                    - (other.group7()[1] * self.group1()[1])
                    - (other.group7()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group6()[0])
                    - (self.group0()[1] * other.group6()[1])
                    - (self.group0()[2] * other.group6()[2])
                    + (self.group1()[3] * other.group1()[3])),
                (-(other.group0()[0] * self.group0()[3])
                    + (other.group4()[0] * self.group1()[0])
                    + (other.group4()[1] * self.group1()[1])
                    + (other.group4()[2] * self.group1()[2])
                    + (other.group5()[0] * self.group0()[0])
                    + (other.group5()[1] * self.group0()[1])
                    + (other.group5()[2] * self.group0()[2])
                    - (self.group1()[3] * other[e45])),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group4()[0] * self.group1()[3]) + (other.group4()[1] * self.group1()[2]) - (other.group4()[2] * self.group1()[1]) - (self.group1()[0] * other[e45])),
                (-(other.group4()[0] * self.group1()[2]) - (other.group4()[1] * self.group1()[3]) + (other.group4()[2] * self.group1()[0]) - (self.group1()[1] * other[e45])),
                ((other.group4()[0] * self.group1()[1]) - (other.group4()[1] * self.group1()[0]) - (other.group4()[2] * self.group1()[3]) - (self.group1()[2] * other[e45])),
                0.0,
            ]) + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group9()[1], other.group4()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))
                + (Simd32x4::from([other.group9()[0], other.group9()[1], other.group9()[2], other.group4()[2]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group9()[1], other.group9()[2], other.group9()[0], other[e45]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group9()[2], other.group9()[0], other.group3()[3], other.group4()[1]]) * swizzle!(self.group0(), 1, 2, 2, 1))),
            // e5
            (-(other.group0()[0] * self.group1()[3])
                + (other.group5()[0] * self.group1()[0])
                + (other.group5()[1] * self.group1()[1])
                + (other.group5()[2] * self.group1()[2])
                + (self.group0()[0] * other.group3()[0])
                + (self.group0()[1] * other.group3()[1])
                + (self.group0()[2] * other.group3()[2])
                - (self.group0()[3] * other.group9()[3])
                + (self.group1()[0] * other.group9()[0])
                + (self.group1()[1] * other.group9()[1])
                + (self.group1()[2] * other.group9()[2])
                - (self.group1()[3] * other.group3()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                (-(self.group1()[1] * other.group1()[2]) - (self.group1()[2] * other.group6()[1]) - (self.group1()[3] * other.group1()[0])
                    + (self.group1()[3] * other.group6()[0])),
                (-(self.group1()[1] * other.group6()[3]) - (self.group1()[2] * other.group1()[0]) - (self.group1()[3] * other.group1()[1])
                    + (self.group1()[3] * other.group6()[1])),
                (-(self.group1()[1] * other.group6()[0]) - (self.group1()[2] * other.group6()[3]) - (self.group1()[3] * other.group1()[2])
                    + (self.group1()[3] * other.group6()[2])),
                0.0,
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group7()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group8()[0], other.group8()[0], other.group8()[1], other.group1()[0]]) * swizzle!(self.group0(), 3, 2, 0, 0))
                - (Simd32x4::from([other.group8()[1], other.group8()[2], other.group8()[0], other.group6()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group8()[2], other.group8()[1], other.group8()[2], other.group1()[1]]) * swizzle!(self.group0(), 1, 3, 3, 1))
                + (Simd32x4::from([other.group1()[1], other.group6()[0], other.group1()[0], other.group7()[2]]) * swizzle!(self.group1(), 2, 2, 1, 2))
                + (Simd32x4::from([other.group6()[2], other.group1()[2], other.group6()[1], other.group7()[1]]) * swizzle!(self.group1(), 1, 0, 0, 1))
                - (Simd32x4::from([other.group6()[3], other.group6()[2], other.group1()[1], other.group1()[3]]) * swizzle!(self.group1(), 0, 0, 0, 3))
                + (Simd32x4::from([other[e1], other[e1], other[e1], other.group1()[2]]) * swizzle!(self.group0(), 0, 1, 2, 2))),
            // e41, e42, e43
            ((Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from([self.group0()[1], self.group0()[3], self.group0()[3]]) * swizzle!(other.group7(), 2, 1, 2))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group7(), 1, 2, 0))
                + (Simd32x3::from([self.group0()[3], self.group0()[2], self.group0()[0]]) * swizzle!(other.group7(), 0, 0, 1))),
            // e23, e31, e12
            (Simd32x3::from([
                ((self.group0()[1] * other.group6()[2]) - (self.group0()[2] * other.group6()[1])),
                (-(self.group0()[0] * other.group6()[2]) + (self.group0()[2] * other.group6()[0])),
                ((self.group0()[0] * other.group6()[1]) - (self.group0()[1] * other.group6()[0])),
            ]) + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from([self.group1()[1], self.group1()[3], self.group1()[3]]) * swizzle!(other.group7(), 2, 1, 2))
                - (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]) * swizzle!(other.group7(), 1, 2, 0))
                + (Simd32x3::from([self.group1()[3], self.group1()[2], self.group1()[0]]) * swizzle!(other.group7(), 0, 0, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group4()[2] * self.group1()[1]) - (self.group1()[0] * other[e45])),
                (-(other.group4()[1] * self.group1()[3]) - (self.group1()[1] * other[e45])),
                (-(other.group4()[2] * self.group1()[3]) - (self.group1()[2] * other[e45])),
                ((other.group4()[1] * self.group1()[1]) + (other.group4()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group9()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))
                - (Simd32x4::from([other.group4()[0], other.group4()[0], other.group4()[1], other[e45]]) * swizzle!(self.group1(), 3, 2, 0, 3))
                + (Simd32x4::from([other.group4()[1], other.group4()[2], other.group4()[0], other.group4()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group5()[0], other.group5()[0], other.group5()[1], other.group9()[1]]) * swizzle!(self.group0(), 3, 2, 0, 1))
                + (Simd32x4::from([other.group5()[1], other.group5()[2], other.group5()[0], other.group3()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group5()[2], other.group5()[1], other.group5()[2], other.group9()[2]]) * swizzle!(self.group0(), 1, 3, 3, 2))),
            // e423, e431, e412
            (-(Simd32x3::from(other[e45]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from([self.group0()[1], self.group0()[3], self.group0()[3]]) * swizzle!(other.group4(), 2, 1, 2))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group4(), 1, 2, 0))
                - (Simd32x3::from([self.group0()[3], self.group0()[2], self.group0()[0]]) * swizzle!(other.group4(), 0, 0, 1))),
            // e235, e315, e125
            (Simd32x3::from([
                (-(self.group0()[1] * other.group3()[2]) + (self.group0()[2] * other.group3()[1]) - (self.group1()[1] * other.group9()[2])
                    + (self.group1()[2] * other.group9()[1])),
                ((self.group0()[0] * other.group3()[2]) - (self.group0()[2] * other.group3()[0]) + (self.group1()[0] * other.group9()[2]) - (self.group1()[2] * other.group9()[0])),
                (-(self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group3()[0]) - (self.group1()[0] * other.group9()[1])
                    + (self.group1()[1] * other.group9()[0])),
            ]) - (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                - (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(other.group9()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from([self.group1()[1], self.group1()[3], self.group1()[3]]) * swizzle!(other.group5(), 2, 1, 2))
                + (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]) * swizzle!(other.group5(), 1, 2, 0))
                - (Simd32x3::from([self.group1()[3], self.group1()[2], self.group1()[0]]) * swizzle!(other.group5(), 0, 0, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((self.group1()[0] * other.group1()[0]) + (self.group1()[1] * other.group1()[1]) + (self.group1()[2] * other.group1()[2]) - (self.group1()[3] * other.group6()[3])),
            ]) - (Simd32x4::from([other.group7()[0], other.group7()[0], other.group7()[1], other.group6()[0]]) * swizzle!(self.group1(), 3, 2, 0, 0))
                + (Simd32x4::from([other.group7()[1], other.group7()[2], other.group7()[0], other.group0()[1]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group7()[2], other.group7()[1], other.group7()[2], other.group6()[1]]) * swizzle!(self.group1(), 1, 3, 3, 1))
                - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group8()[2]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other[e1]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group6()[3], other.group8()[1]]) * swizzle!(self.group0(), 1, 2, 2, 1))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group6()[2]]) * swizzle!(self.group1(), 0, 1, 2, 2))
                - (Simd32x4::from([other.group6()[3], other.group6()[3], other.group1()[1], other.group8()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))),
            // e1234
            (-(other.group7()[0] * self.group0()[0]) - (other.group7()[1] * self.group0()[1]) - (other.group7()[2] * self.group0()[2]) + (self.group0()[3] * other.group1()[3])),
        );
    }
}
impl GeometricAntiProduct<Plane> for AntiMotor {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        4        0
    //    simd4        6        6        0
    // Totals...
    // yes simd        6       10        0
    //  no simd       24       28        0
    fn geometric_anti_product(self, other: Plane) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from([
                (self.group1()[2] * other.group0()[1]),
                (self.group1()[0] * other.group0()[2]),
                (self.group1()[1] * other.group0()[0]),
                0.0,
            ]) - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[1]]) * swizzle!(other.group0(), 2, 0, 1, 1))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[2]]) * swizzle!(other.group0(), 0, 1, 2, 2))
                - (swizzle!(self.group0(), 0, 1, 2, 0) * swizzle!(other.group0(), 3, 3, 3, 0))),
            // e1, e2, e3, e5
            (Simd32x4::from([0.0, 0.0, 0.0, (self.group1()[2] * other.group0()[2])])
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group1()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))
                - (swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))),
        );
    }
}
impl GeometricAntiProduct<QuadNum> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       31        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       13       32        0
    //  no simd       16       35        0
    fn geometric_anti_product(self, other: QuadNum) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[2] * other.group0()[0]),
                ((self.group0()[3] * other.group0()[3]) + (self.group1()[3] * other.group0()[0])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[0] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group1()[1] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[3] * other.group0()[2]) - (self.group1()[3] * other.group0()[0])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[1]) - (self.group1()[0] * other.group0()[2]) + (self.group1()[0] * other.group0()[3])),
                ((self.group0()[1] * other.group0()[1]) - (self.group1()[1] * other.group0()[2]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[2] * other.group0()[1]) - (self.group1()[2] * other.group0()[2]) + (self.group1()[2] * other.group0()[3])),
                (self.group0()[3] * other.group0()[0]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group1()[0] * other.group0()[0]) * -1.0),
                ((self.group1()[1] * other.group0()[0]) * -1.0),
                ((self.group1()[2] * other.group0()[0]) * -1.0),
                ((self.group0()[3] * other.group0()[1]) + (self.group1()[3] * other.group0()[3])),
            ]) - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))),
        );
    }
}
impl GeometricAntiProduct<RoundPoint> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       32        0
    //    simd4        1        2        0
    // Totals...
    // yes simd       21       34        0
    //  no simd       24       40        0
    fn geometric_anti_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other[e2]) - (self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1]) - (self.group1()[3] * other.group0()[0])),
                ((self.group0()[1] * other[e2]) + (self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0]) - (self.group1()[3] * other.group0()[1])),
                ((self.group0()[2] * other[e2]) - (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0]) - (self.group1()[3] * other.group0()[2])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) - (self.group0()[3] * other.group0()[0]) - (self.group1()[0] * other.group0()[3])),
                (-(self.group0()[2] * other.group0()[0]) - (self.group0()[3] * other.group0()[1]) - (self.group1()[1] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[1]) - (self.group0()[3] * other.group0()[2]) - (self.group1()[2] * other.group0()[3])),
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other[e2]]) * swizzle!(self.group0(), 2, 0, 1, 3))),
        );
    }
}
impl GeometricAntiProduct<Scalar> for AntiMotor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn geometric_anti_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(other[scalar]) * self.group0() * Simd32x4::from(-1.0)),
            // e235, e315, e125, e5
            (Simd32x4::from(other[scalar]) * self.group1() * Simd32x4::from(-1.0)),
        );
    }
}
impl GeometricAntiProduct<Sphere> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       32        0
    //    simd4        2        4        0
    // Totals...
    // yes simd       18       36        0
    //  no simd       24       48        0
    fn geometric_anti_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(other[e4315]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]) * Simd32x4::from(-1.0)),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group1()[0] * other[e4315] * -1.0),
                (self.group1()[1] * other[e4315] * -1.0),
                (self.group1()[2] * other[e4315] * -1.0),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other[e4315])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group1()[1] * other.group0()[2]) - (self.group1()[3] * other.group0()[0])),
                (-(self.group1()[2] * other.group0()[0]) - (self.group1()[3] * other.group0()[1])),
                (-(self.group1()[0] * other.group0()[1]) - (self.group1()[3] * other.group0()[2])),
                ((self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from(other.group0()[3]) * self.group0())
                + (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (self.group0()[3] * other.group0()[0]) - (self.group1()[0] * other[e4315])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0]) + (self.group0()[3] * other.group0()[1]) - (self.group1()[1] * other[e4315])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group0()[3] * other.group0()[2]) - (self.group1()[2] * other[e4315])),
                (self.group0()[3] * other[e4315] * -1.0),
            ]),
        );
    }
}
impl GeometricAntiProduct<TripleNum> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       28        0
    fn geometric_anti_product(self, other: TripleNum) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[2] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group0()[2])),
                (other.group0()[0] * self.group1()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group1()[0])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group1()[1])),
                ((other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group1()[2])),
                (other.group0()[0] * self.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group1()[0] * -1.0),
                (other.group0()[0] * self.group1()[1] * -1.0),
                (other.group0()[0] * self.group1()[2] * -1.0),
                ((other.group0()[1] * self.group0()[3]) + (other.group0()[2] * self.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorEven> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       39       48        0
    //    simd4       19       20        0
    // Totals...
    // yes simd       58       68        0
    //  no simd      115      128        0
    fn geometric_anti_product(self, other: VersorEven) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[0]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group3()[3]) + (self.group0()[3] * other.group0()[2])),
                (-(self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])
                    + (self.group1()[3] * other.group3()[3])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group0()[1], other.group0()[3]]) * swizzle!(self.group0(), 0, 1, 0, 3))),
            // e23, e31, e12, e45
            (-(Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group3()[3], other.group0()[1]]) * swizzle!(self.group1(), 1, 2, 2, 1))
                + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group3()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[2]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group3()[1]]) * swizzle!(self.group0(), 1, 2, 2, 1))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group0()[1], other.group0()[0]]) * swizzle!(self.group1(), 0, 1, 0, 0))
                - (swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group1(), 1, 2, 0, 3))
                + (swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group0(), 0, 1, 2, 2))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) + (self.group0()[3] * other.group2()[0]) + (self.group1()[0] * other.group0()[3]) - (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[1] * other.group3()[2])
                    - (self.group1()[2] * other.group1()[1])
                    + (self.group1()[2] * other.group3()[1])
                    + (self.group1()[3] * other.group1()[0])
                    - (self.group1()[3] * other.group3()[0])),
                ((self.group0()[2] * other.group2()[0]) + (self.group0()[3] * other.group2()[1]) - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[0] * other.group3()[2])
                    + (self.group1()[1] * other.group0()[3])
                    - (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group1()[0])
                    - (self.group1()[2] * other.group3()[0])
                    + (self.group1()[3] * other.group1()[1])
                    - (self.group1()[3] * other.group3()[1])),
                ((self.group0()[2] * other.group2()[3]) + (self.group0()[3] * other.group2()[2]) + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[0] * other.group3()[1])
                    - (self.group1()[1] * other.group1()[0])
                    + (self.group1()[1] * other.group3()[0])
                    + (self.group1()[2] * other.group0()[3])
                    - (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])
                    - (self.group1()[3] * other.group3()[2])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[1], other.group3()[3]]) * swizzle!(self.group0(), 0, 1, 0, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((self.group1()[1] * other.group3()[1]) + (self.group1()[2] * other.group3()[2]) + (self.group1()[3] * other.group0()[3]) - (self.group1()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]) * swizzle!(self.group1(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group3()[3], other.group1()[1]]) * swizzle!(self.group1(), 1, 2, 2, 1))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group2()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))
                - (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[2]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group2()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[3], other.group2()[1]]) * swizzle!(self.group0(), 1, 2, 2, 1))
                - (Simd32x4::from([other.group3()[3], other.group3()[3], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 0, 1, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<VersorOdd> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       41       56        0
    //    simd4       18       18        0
    // Totals...
    // yes simd       59       74        0
    //  no simd      113      128        0
    fn geometric_anti_product(self, other: VersorOdd) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) - (self.group0()[3] * other.group0()[0])),
                (-(self.group0()[2] * other.group0()[0]) - (self.group0()[3] * other.group0()[1])),
                (-(self.group0()[2] * other.group2()[3]) - (self.group0()[3] * other.group0()[2])),
                ((self.group0()[1] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[2])
                    + (self.group1()[0] * other.group0()[0])
                    + (self.group1()[1] * other.group0()[1])
                    + (self.group1()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group2()[3])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[1], other.group0()[3]]) * swizzle!(self.group0(), 0, 1, 0, 3))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(self.group1()[1] * other.group0()[2]) - (self.group1()[3] * other.group0()[0])),
                (-(self.group1()[2] * other.group0()[0]) - (self.group1()[3] * other.group0()[1])),
                (-(self.group1()[2] * other.group2()[3]) - (self.group1()[3] * other.group0()[2])),
                ((self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group3()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))
                - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[2]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group3()[1]]) * swizzle!(self.group0(), 1, 2, 2, 1))
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[1], other.group2()[3]]) * swizzle!(self.group1(), 0, 1, 0, 3))
                + (swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group1(), 1, 2, 0, 3))
                + (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group0()[1] * other.group2()[2])
                    - (self.group0()[3] * other.group2()[0])
                    - (self.group1()[1] * other.group1()[2])
                    - (self.group1()[1] * other.group3()[2])
                    - (self.group1()[3] * other.group1()[0])
                    - (self.group1()[3] * other.group3()[0])),
                (-(self.group0()[2] * other.group2()[0])
                    - (self.group0()[3] * other.group2()[1])
                    - (self.group1()[2] * other.group1()[0])
                    - (self.group1()[2] * other.group3()[0])
                    - (self.group1()[3] * other.group1()[1])
                    - (self.group1()[3] * other.group3()[1])),
                (-(self.group0()[2] * other.group3()[3])
                    - (self.group0()[3] * other.group2()[2])
                    - (self.group1()[2] * other.group0()[3])
                    - (self.group1()[2] * other.group1()[3])
                    - (self.group1()[3] * other.group1()[2])
                    - (self.group1()[3] * other.group3()[2])),
                ((self.group0()[1] * other.group2()[1])
                    + (self.group0()[2] * other.group2()[2])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[1] * other.group3()[1])
                    + (self.group1()[2] * other.group1()[2])
                    + (self.group1()[2] * other.group3()[2])),
            ]) - (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group0()[3]]) * swizzle!(self.group1(), 0, 1, 0, 3))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group1()[3]]) * swizzle!(self.group1(), 0, 1, 0, 3))
                - (Simd32x4::from([other.group3()[3], other.group3()[3], other.group2()[1], other.group3()[3]]) * swizzle!(self.group0(), 0, 1, 0, 3))
                + (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group3(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(self.group1()[0] * other.group2()[3]) - (self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])
                    - (self.group1()[3] * other.group0()[0])),
                ((self.group1()[0] * other.group0()[2]) - (self.group1()[1] * other.group2()[3]) - (self.group1()[2] * other.group0()[0]) - (self.group1()[3] * other.group0()[1])),
                (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])
                    - (self.group1()[2] * other.group2()[3])
                    - (self.group1()[3] * other.group0()[2])),
                0.0,
            ]) + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group0()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))
                + (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group0()[2]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group2()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[3], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 2, 1))),
        );
    }
}
impl GeometricAntiProduct<VersorRoundPoint> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       23       36        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       26       39        0
    //  no simd       35       48        0
    fn geometric_anti_product(self, other: VersorRoundPoint) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                ((other.group1()[1] * self.group0()[3]) + (self.group1()[3] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([0.0, 0.0, 0.0, ((self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other.group0()[3]))])
                + (Simd32x4::from([other.group1()[1], other.group1()[1], other.group1()[1], other.group0()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group1()[0] * self.group0()[0]) + (other.group1()[1] * self.group1()[0]) - (self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])
                    - (self.group1()[3] * other.group0()[0])),
                ((other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group1()[1]) + (self.group1()[0] * other.group0()[2])
                    - (self.group1()[2] * other.group0()[0])
                    - (self.group1()[3] * other.group0()[1])),
                ((other.group1()[0] * self.group0()[2]) + (other.group1()[1] * self.group1()[2]) - (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])
                    - (self.group1()[3] * other.group0()[2])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) - (self.group0()[3] * other.group0()[0]) - (self.group1()[0] * other.group0()[3])),
                (-(self.group0()[2] * other.group0()[0]) - (self.group0()[3] * other.group0()[1]) - (self.group1()[1] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[1]) - (self.group0()[3] * other.group0()[2]) - (self.group1()[2] * other.group0()[3])),
                ((other.group1()[1] * self.group1()[3]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 3))),
        );
    }
}
impl GeometricAntiProduct<VersorSphere> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       32        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       20       37        0
    //  no simd       35       52        0
    fn geometric_anti_product(self, other: VersorSphere) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group1()[0] * self.group0()[0] * -1.0),
                (other.group1()[0] * self.group0()[1] * -1.0),
                (other.group1()[0] * self.group0()[2] * -1.0),
                (-(other.group1()[0] * self.group1()[3]) - (other.group1()[1] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]))])
                - (Simd32x4::from(other.group1()[0]) * self.group1())
                - (Simd32x4::from([other.group1()[1], other.group1()[1], other.group1()[1], other.group0()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group1()[1] * other.group0()[2]) - (self.group1()[3] * other.group0()[0])),
                (-(self.group1()[2] * other.group0()[0]) - (self.group1()[3] * other.group0()[1])),
                (-(self.group1()[0] * other.group0()[1]) - (self.group1()[3] * other.group0()[2])),
                ((self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from(other.group1()[1]) * self.group1())
                - (Simd32x4::from(other.group0()[3]) * self.group0())
                + (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group1()[0] * self.group1()[0]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])
                    + (self.group0()[3] * other.group0()[0])),
                (-(other.group1()[0] * self.group1()[1]) - (self.group0()[0] * other.group0()[2])
                    + (self.group0()[2] * other.group0()[0])
                    + (self.group0()[3] * other.group0()[1])),
                (-(other.group1()[0] * self.group1()[2]) + (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])
                    + (self.group0()[3] * other.group0()[2])),
                (other.group1()[0] * self.group0()[3] * -1.0),
            ]),
        );
    }
}
impl InfixGeometricAntiProduct for AntiPlane {}
impl GeometricAntiProduct<AntiCircleRotor> for AntiPlane {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        9        0
    //    simd3        1        2        0
    //    simd4        7        9        0
    // Totals...
    // yes simd        9       20        0
    //  no simd       32       51        0
    fn geometric_anti_product(self, other: AntiCircleRotor) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (-(Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group1()[3] * self.group0()[0]) * -1.0),
                ((other.group1()[3] * self.group0()[1]) * -1.0),
                ((other.group1()[3] * self.group0()[2]) * -1.0),
                ((other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))),
            // e15, e25, e35, e1234
            ((Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[2]])
                * swizzle!(self.group0(), 2, 0, 1, 2)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([0.0, 0.0, 0.0, (other.group2()[3] * self.group0()[3])])
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))
                + (swizzle!(other.group1(), 1, 2, 0, 3) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (swizzle!(other.group2(), 3, 3, 3, 2) * swizzle!(self.group0(), 0, 1, 2, 2))),
        );
    }
}
impl GeometricAntiProduct<AntiDipoleInversion> for AntiPlane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       21        0
    //    simd4        9       11        0
    // Totals...
    // yes simd       20       32        0
    //  no simd       47       65        0
    fn geometric_anti_product(self, other: AntiDipoleInversion) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([0.0, 0.0, 0.0, ((other.group3()[2] * self.group0()[2]) * -1.0)])
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group2()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group3()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group3()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group1()[3] * self.group0()[0]) + (other.group3()[2] * self.group0()[1])),
                ((other.group1()[3] * self.group0()[1]) + (other.group3()[0] * self.group0()[2])),
                ((other.group1()[3] * self.group0()[2]) + (other.group3()[1] * self.group0()[0])),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group1()[0] * self.group0()[3]) + (other.group2()[2] * self.group0()[1]) + (other.group3()[3] * self.group0()[0])),
                ((other.group1()[1] * self.group0()[3]) + (other.group2()[0] * self.group0()[2]) + (other.group3()[3] * self.group0()[1])),
                ((other.group1()[2] * self.group0()[3]) + (other.group2()[1] * self.group0()[0]) + (other.group3()[3] * self.group0()[2])),
                (-(other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))),
            // e1, e2, e3, e4
            ((Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[2]])
                * swizzle!(self.group0(), 2, 0, 1, 2)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum321> for AntiPlane {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        1       14        0
    fn geometric_anti_product(self, other: AntiDualNum321) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0] * -1.0),
                (other.group0()[1] * self.group0()[1] * -1.0),
                (other.group0()[1] * self.group0()[2] * -1.0),
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum4> for AntiPlane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0       18        0
    fn geometric_anti_product(self, other: AntiDualNum4) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(other.group0()[0]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group0()[3] * -1.0)]),
            // e15, e25, e35, e1234
            Simd32x4::from(0.0),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other.group0()[1]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum5> for AntiPlane {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        5        0
    //  no simd        0       11        0
    fn geometric_anti_product(self, other: AntiDualNum5) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other.group0()[1]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
    }
}
impl GeometricAntiProduct<AntiFlatPoint> for AntiPlane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        9        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        3       10        0
    //  no simd        6       13        0
    fn geometric_anti_product(self, other: AntiFlatPoint) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (other.group0()[3] * self.group0()[0]),
                (other.group0()[3] * self.group0()[1]),
                (other.group0()[3] * self.group0()[2]),
                0.0,
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (other.group0()[2] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                (other.group0()[1] * self.group0()[0]),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self.group0()[3])),
            ]) - (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
        );
    }
}
impl GeometricAntiProduct<AntiFlector> for AntiPlane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       16        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       11       19        0
    //  no simd       20       28        0
    fn geometric_anti_product(self, other: AntiFlector) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from([
                ((other.group0()[3] * self.group0()[0]) + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[3] * self.group0()[1]) + (other.group1()[0] * self.group0()[2])),
                ((other.group0()[3] * self.group0()[2]) + (other.group1()[1] * self.group0()[0])),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) - (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[2]) + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[1] * self.group0()[0]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self.group0()[3])),
            ]) - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
        );
    }
}
impl GeometricAntiProduct<AntiLine> for AntiPlane {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        3        5        0
    // Totals...
    // yes simd        4       10        0
    //  no simd       13       25        0
    fn geometric_anti_product(self, other: AntiLine) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            ((Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[2]])
                * swizzle!(self.group0(), 2, 0, 1, 2)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (other.group0()[1] * self.group0()[2]),
                (other.group0()[2] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<AntiMotor> for AntiPlane {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        8        0
    //    simd4        6        6        0
    // Totals...
    // yes simd        6       14        0
    //  no simd       24       32        0
    fn geometric_anti_product(self, other: AntiMotor) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group1()[1] * self.group0()[2]) * -1.0),
                ((other.group1()[2] * self.group0()[0]) * -1.0),
                ((other.group1()[0] * self.group0()[1]) * -1.0),
                0.0,
            ]) + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[2]]) * swizzle!(self.group0(), 0, 1, 2, 2))
                + (swizzle!(other.group0(), 0, 1, 2, 0) * swizzle!(self.group0(), 3, 3, 3, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([0.0, 0.0, 0.0, ((other.group1()[2] * self.group0()[2]) * -1.0)])
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other.group1()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))
                + (swizzle!(other.group0(), 1, 2, 0, 3) * swizzle!(self.group0(), 2, 0, 1, 3))),
        );
    }
}
impl GeometricAntiProduct<AntiPlane> for AntiPlane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       11        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        5       12        0
    //  no simd        8       15        0
    fn geometric_anti_product(self, other: AntiPlane) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from([
                (other.group0()[2] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                (other.group0()[1] * self.group0()[0]),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) + (other.group0()[3] * self.group0()[0])),
                (-(other.group0()[1] * self.group0()[3]) + (other.group0()[3] * self.group0()[1])),
                (-(other.group0()[2] * self.group0()[3]) + (other.group0()[3] * self.group0()[2])),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiQuadNum> for AntiPlane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1       11        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        1       15        0
    //  no simd        1       27        0
    fn geometric_anti_product(self, other: AntiQuadNum) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(other.group0()[0]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e23, e31, e12, e45
            (swizzle!(other.group0(), 2, 2, 2, 0) * self.group0() * Simd32x4::from(-1.0)),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[2] * other.group0()[1]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                ((self.group0()[3] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiScalar> for AntiPlane {
    type Output = AntiPlane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn geometric_anti_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ (Simd32x4::from(other[e12345]) * self.group0()));
    }
}
impl GeometricAntiProduct<AntiTripleNum> for AntiPlane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        5        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0        9        0
    //  no simd        0       21        0
    fn geometric_anti_product(self, other: AntiTripleNum) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(other.group0()[0]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group0()[3] * -1.0)]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other.group0()[2]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
    }
}
impl GeometricAntiProduct<Circle> for AntiPlane {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       18        0
    //    simd3        1        2        0
    //    simd4        3        5        0
    // Totals...
    // yes simd       14       25        0
    //  no simd       25       44        0
    fn geometric_anti_product(self, other: Circle) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (-(Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0))),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (self.group0()[0] * other.group1()[3])),
                ((other.group0()[1] * self.group0()[3]) + (self.group0()[1] * other.group1()[3])),
                ((other.group0()[2] * self.group0()[3]) + (self.group0()[2] * other.group1()[3])),
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]),
            // e235, e315, e125, e4
            ((Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[2]])
                * swizzle!(self.group0(), 2, 0, 1, 2)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (self.group0()[1] * other.group1()[2])),
                ((other.group0()[1] * self.group0()[3]) + (self.group0()[2] * other.group1()[0])),
                ((other.group0()[2] * self.group0()[3]) + (self.group0()[0] * other.group1()[1])),
                (-(other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2]) - (self.group0()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
        );
    }
}
impl GeometricAntiProduct<CircleRotor> for AntiPlane {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       18        0
    //    simd3        1        2        0
    //    simd4        4        6        0
    // Totals...
    // yes simd       15       26        0
    //  no simd       29       48        0
    fn geometric_anti_product(self, other: CircleRotor) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (-(Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0))),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (self.group0()[0] * other.group1()[3])),
                ((other.group0()[1] * self.group0()[3]) + (self.group0()[1] * other.group1()[3])),
                ((other.group0()[2] * self.group0()[3]) + (self.group0()[2] * other.group1()[3])),
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]),
            // e235, e315, e125, e4
            ((Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[2]])
                * swizzle!(self.group0(), 2, 0, 1, 2)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group1()[2])),
                ((self.group0()[1] * other.group2()[3]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[2] * other.group2()[3])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2]) - (self.group0()[3] * other.group1()[3])),
            ]) + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
        );
    }
}
impl GeometricAntiProduct<Dipole> for AntiPlane {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1       10        0
    //    simd3        1        2        0
    //    simd4        6        8        0
    // Totals...
    // yes simd        8       20        0
    //  no simd       28       48        0
    fn geometric_anti_product(self, other: Dipole) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (-(Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) * -1.0),
                ((self.group0()[1] * other.group1()[3]) * -1.0),
                ((self.group0()[2] * other.group1()[3]) * -1.0),
                ((self.group0()[1] * other.group1()[1]) + (self.group0()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))),
            // e15, e25, e35, e1234
            ((Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[2]])
                * swizzle!(self.group0(), 2, 0, 1, 2)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([0.0, 0.0, 0.0, ((other.group2()[2] * self.group0()[2]) * -1.0)])
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))
                + (swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group1(), 1, 2, 0, 3))),
        );
    }
}
impl GeometricAntiProduct<DipoleInversion> for AntiPlane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       17        0
    //    simd4       10       12        0
    // Totals...
    // yes simd       18       29        0
    //  no simd       48       65        0
    fn geometric_anti_product(self, other: DipoleInversion) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(other.group0()[2] * self.group0()[1]) - (self.group0()[0] * other.group2()[3])),
                (-(other.group0()[0] * self.group0()[2]) - (self.group0()[1] * other.group2()[3])),
                (-(other.group0()[1] * self.group0()[0]) - (self.group0()[2] * other.group2()[3])),
                ((self.group0()[1] * other.group3()[1]) + (self.group0()[2] * other.group3()[2]) + (self.group0()[3] * other.group2()[3])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e23, e31, e12, e45
            ((Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[3], other.group1()[2]])
                * swizzle!(self.group0(), 1, 2, 2, 2)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group2()[3]]) * swizzle!(self.group0(), 0, 1, 0, 3))
                + (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[1]]) * swizzle!(self.group0(), 2, 0, 1, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(self.group0()[2] * other.group2()[1]) + (self.group0()[3] * other.group3()[0])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[3] * other.group3()[1])),
                (-(self.group0()[1] * other.group2()[0]) + (self.group0()[3] * other.group3()[2])),
                0.0,
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group3()[3], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 2, 1))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([0.0, 0.0, 0.0, ((self.group0()[2] * other.group2()[2]) * -1.0)])
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))
                + (swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group1(), 1, 2, 0, 3))),
        );
    }
}
impl GeometricAntiProduct<DualNum321> for AntiPlane {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        1        8        0
    fn geometric_anti_product(self, other: DualNum321) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from(0.0),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                (-(other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<DualNum4> for AntiPlane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        5        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        7        0
    //  no simd        0       13        0
    fn geometric_anti_product(self, other: DualNum4) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(other.group0()[0]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group0()[3])]),
            // e235, e315, e125, e5
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[1] * self.group0()[3])]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<DualNum5> for AntiPlane {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0        7        0
    fn geometric_anti_product(self, other: DualNum5) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                0.0,
            ]),
            // e1, e2, e3, e5
            (Simd32x4::from(other.group0()[1]) * self.group0()),
        );
    }
}
impl GeometricAntiProduct<FlatPoint> for AntiPlane {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        8        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        3       10        0
    //  no simd        9       16        0
    fn geometric_anti_product(self, other: FlatPoint) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                0.0,
            ]),
            // e15, e25, e35, e3215
            (Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]))])
                + (swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<Flector> for AntiPlane {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       16        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       11       19        0
    //  no simd       20       28        0
    fn geometric_anti_product(self, other: Flector) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group1()[2])),
                (-(self.group0()[1] * other.group0()[3]) - (self.group0()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group1()[1]) - (self.group0()[2] * other.group0()[3])),
                ((self.group0()[1] * other.group1()[1]) + (self.group0()[2] * other.group1()[2])),
            ]) + (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e15, e25, e35, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) + (self.group0()[3] * other.group1()[0])),
                ((self.group0()[2] * other.group0()[0]) + (self.group0()[3] * other.group1()[1])),
                ((self.group0()[2] * other.group1()[3]) + (self.group0()[3] * other.group1()[2])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group0()[1], other.group0()[3]]) * swizzle!(self.group0(), 0, 1, 0, 3))
                - (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<Line> for AntiPlane {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       13        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        7       15        0
    //  no simd       13       21        0
    fn geometric_anti_product(self, other: Line) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[1] * self.group0()[3]) + (other.group1()[0] * self.group0()[2])),
                ((other.group0()[2] * self.group0()[3]) + (other.group1()[1] * self.group0()[0])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                (other.group0()[2] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                (other.group0()[1] * self.group0()[0]),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
        );
    }
}
impl GeometricAntiProduct<Motor> for AntiPlane {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       16        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       11       19        0
    //  no simd       20       28        0
    fn geometric_anti_product(self, other: Motor) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group1()[0]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[2] * other.group1()[3]) + (self.group0()[3] * other.group0()[2])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[2] * other.group0()[0]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (swizzle!(self.group0(), 0, 1, 0, 3) * swizzle!(other.group0(), 3, 3, 1, 3))),
        );
    }
}
impl GeometricAntiProduct<MultiVector> for AntiPlane {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       38        0
    //    simd2        1        1        0
    //    simd3       10       13        0
    //    simd4       13       13        0
    // Totals...
    // yes simd       41       65        0
    //  no simd      101      131        0
    fn geometric_anti_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                ((self.group0()[0] * other.group9()[0]) + (self.group0()[1] * other.group9()[1]) + (self.group0()[2] * other.group9()[2])),
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]) + (Simd32x2::from(self.group0()[3]) * Simd32x2::from([other[e45], other.group1()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[2] * other.group6()[1]) * -1.0),
                ((self.group0()[0] * other.group6()[2]) * -1.0),
                ((self.group0()[1] * other.group6()[0]) * -1.0),
                0.0,
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group7()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group7()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group7()[2]]) * swizzle!(self.group0(), 1, 2, 0, 2))),
            // e5
            ((other.group0()[1] * self.group0()[3])
                - (other.group8()[0] * self.group0()[0])
                - (other.group8()[1] * self.group0()[1])
                - (other.group8()[2] * self.group0()[2])
                - (self.group0()[3] * other.group6()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                (self.group0()[3] * other.group9()[0]),
                (self.group0()[3] * other.group9()[1]),
                (self.group0()[3] * other.group9()[2]),
                0.0,
            ]) + (Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other.group5()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other[e45]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group3()[2], other.group3()[0], other.group9()[3], other.group5()[2]]) * swizzle!(self.group0(), 1, 2, 2, 2))
                + (Simd32x4::from([other.group9()[3], other.group9()[3], other.group3()[1], other.group5()[1]]) * swizzle!(self.group0(), 0, 1, 0, 1))),
            // e41, e42, e43
            (-(Simd32x3::from(other[e45]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group4(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group4(), 1, 2, 0))),
            // e23, e31, e12
            (Simd32x3::from([
                (-(self.group0()[1] * other.group9()[2]) + (self.group0()[2] * other.group9()[1])),
                ((self.group0()[0] * other.group9()[2]) - (self.group0()[2] * other.group9()[0])),
                (-(self.group0()[0] * other.group9()[1]) + (self.group0()[1] * other.group9()[0])),
            ]) + (Simd32x3::from(self.group0()[3]) * other.group4())
                - (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[0] * other.group6()[3]) + (self.group0()[1] * other.group1()[2])),
                ((self.group0()[1] * other.group6()[3]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[2] * other.group6()[3])),
                (-(self.group0()[1] * other.group6()[1]) - (self.group0()[2] * other.group6()[2])),
            ]) + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group1()[3]]))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group6()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e423, e431, e412
            (-(Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group7(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group7(), 1, 2, 0))),
            // e235, e315, e125
            (-(Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group8(), 2, 0, 1))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group8(), 1, 2, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group3()[3])])
                - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group3()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))
                - (Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[2], other.group3()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group5()[1], other.group5()[2], other.group5()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group3()[2]]) * swizzle!(self.group0(), 1, 2, 0, 2))),
            // e1234
            ((other.group4()[0] * self.group0()[0]) + (other.group4()[1] * self.group0()[1]) + (other.group4()[2] * self.group0()[2])),
        );
    }
}
impl GeometricAntiProduct<Plane> for AntiPlane {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       14        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        5       15        0
    //  no simd        8       18        0
    fn geometric_anti_product(self, other: Plane) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) * -1.0),
                ((self.group0()[2] * other.group0()[0]) * -1.0),
                ((self.group0()[0] * other.group0()[1]) * -1.0),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]) + (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<QuadNum> for AntiPlane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        8        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        1       11        0
    //  no simd        1       20        0
    fn geometric_anti_product(self, other: QuadNum) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(other.group0()[0]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e415, e425, e435, e321
            (swizzle!(other.group0(), 2, 2, 2, 0) * self.group0()),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[2] * other.group0()[1]),
                (-(self.group0()[3] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<RoundPoint> for AntiPlane {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        9        0
    //    simd3        0        2        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        6       13        0
    //  no simd       12       23        0
    fn geometric_anti_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return CircleRotor::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(-1.0)),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e235, e315, e125, e12345
            (Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]))])
                + (Simd32x4::from([other[e2], other[e2], other[e2], other.group0()[3]]) * self.group0())
                - (swizzle!(self.group0(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))),
        );
    }
}
impl GeometricAntiProduct<Scalar> for AntiPlane {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn geometric_anti_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other[scalar]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
    }
}
impl GeometricAntiProduct<Sphere> for AntiPlane {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       10        0
    //    simd3        0        2        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        6       14        0
    //  no simd       12       24        0
    fn geometric_anti_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return AntiCircleRotor::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other[e4315]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(-1.0)),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other[e4315] * -1.0),
            ]),
            // e15, e25, e35, scalar
            (Simd32x4::from([0.0, 0.0, 0.0, ((self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other[e4315]))])
                + (swizzle!(self.group0(), 0, 1, 2, 0) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (swizzle!(self.group0(), 3, 3, 3, 1) * swizzle!(other.group0(), 0, 1, 2, 1))),
        );
    }
}
impl GeometricAntiProduct<TripleNum> for AntiPlane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        4        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        0        7        0
    //  no simd        0       16        0
    fn geometric_anti_product(self, other: TripleNum) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(other.group0()[0]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group0()[3])]),
            // e235, e315, e125, e5
            (Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group0()[2]]) * self.group0()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[2] * self.group0()[0]),
                (other.group0()[2] * self.group0()[1]),
                (other.group0()[2] * self.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorEven> for AntiPlane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       24        0
    //    simd4       11       11        0
    // Totals...
    // yes simd       19       35        0
    //  no simd       52       68        0
    fn geometric_anti_product(self, other: VersorEven) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([0.0, 0.0, 0.0, ((self.group0()[2] * other.group3()[2]) * -1.0)])
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group3()[3], other.group3()[1]]) * swizzle!(self.group0(), 1, 2, 2, 1))
                - (Simd32x4::from([other.group3()[3], other.group3()[3], other.group0()[1], other.group3()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[1] * other.group3()[2]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[2] * other.group3()[0]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group1()[3]) + (self.group0()[3] * other.group0()[2])),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group3()[3]]) * swizzle!(self.group0(), 0, 1, 0, 3))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) + (self.group0()[3] * other.group1()[0])),
                ((self.group0()[2] * other.group2()[0]) + (self.group0()[3] * other.group1()[1])),
                ((self.group0()[2] * other.group2()[3]) + (self.group0()[3] * other.group1()[2])),
                (-(self.group0()[2] * other.group2()[2]) - (self.group0()[3] * other.group1()[3])),
            ]) + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[1], other.group0()[3]]) * swizzle!(self.group0(), 0, 1, 0, 3))
                - (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group2(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[2] * other.group1()[1]) * -1.0),
                ((self.group0()[0] * other.group1()[2]) * -1.0),
                ((self.group0()[1] * other.group1()[0]) * -1.0),
                0.0,
            ]) + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group0()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 2, 1))
                + (swizzle!(self.group0(), 3, 3, 3, 2) * swizzle!(other.group0(), 0, 1, 2, 2))),
        );
    }
}
impl GeometricAntiProduct<VersorOdd> for AntiPlane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       16        0
    //    simd4       11       13        0
    // Totals...
    // yes simd       19       29        0
    //  no simd       52       68        0
    fn geometric_anti_product(self, other: VersorOdd) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group0()[2])),
                (-(self.group0()[1] * other.group2()[3]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) - (self.group0()[2] * other.group2()[3])),
                ((self.group0()[1] * other.group3()[1]) + (self.group0()[2] * other.group3()[2]) + (self.group0()[3] * other.group2()[3])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e23, e31, e12, e45
            ((Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[3], other.group1()[2]])
                * swizzle!(self.group0(), 1, 2, 2, 2)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group2()[3]]) * swizzle!(self.group0(), 0, 1, 0, 3))
                + (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(self.group0()[2] * other.group2()[1]) + (self.group0()[3] * other.group3()[0])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[3] * other.group3()[1])),
                (-(self.group0()[1] * other.group2()[0]) + (self.group0()[3] * other.group3()[2])),
                0.0,
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group3()[3], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 2, 1))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group1()[3])])
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[2]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group2()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))
                + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group2()[1]]) * swizzle!(self.group0(), 1, 2, 2, 1))),
        );
    }
}
impl GeometricAntiProduct<VersorRoundPoint> for AntiPlane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        9       27        0
    fn geometric_anti_product(self, other: VersorRoundPoint) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group0()[3] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((other.group1()[0] * self.group0()[0]) - (self.group0()[3] * other.group0()[0])),
                ((other.group1()[0] * self.group0()[1]) - (self.group0()[3] * other.group0()[1])),
                ((other.group1()[0] * self.group0()[2]) - (self.group0()[3] * other.group0()[2])),
                (other.group1()[1] * self.group0()[3]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group1()[1] * self.group0()[0]),
                (other.group1()[1] * self.group0()[1]),
                (other.group1()[1] * self.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorSphere> for AntiPlane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       24        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        9       26        0
    //  no simd        9       32        0
    fn geometric_anti_product(self, other: VersorSphere) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group1()[0] * self.group0()[0] * -1.0),
                (other.group1()[0] * self.group0()[1] * -1.0),
                (other.group1()[0] * self.group0()[2] * -1.0),
                ((other.group1()[0] * self.group0()[3]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (other.group1()[0] * self.group0()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other.group1()[1]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
    }
}
impl InfixGeometricAntiProduct for AntiQuadNum {}
impl GeometricAntiProduct<AntiCircleRotor> for AntiQuadNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       23        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       13       29        0
    //  no simd       31       47        0
    fn geometric_anti_product(self, other: AntiCircleRotor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group1()[0] * self.group0()[0]) * -1.0),
                ((other.group1()[1] * self.group0()[0]) * -1.0),
                ((other.group1()[2] * self.group0()[0]) * -1.0),
                0.0,
            ]) - (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[1]) - (other.group1()[0] * self.group0()[3]) - (other.group2()[0] * self.group0()[0])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group1()[1] * self.group0()[3]) - (other.group2()[1] * self.group0()[0])),
                (-(other.group0()[2] * self.group0()[1]) - (other.group1()[2] * self.group0()[3]) - (other.group2()[2] * self.group0()[0])),
                ((other.group1()[3] * self.group0()[3]) + (other.group2()[3] * self.group0()[2])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (other.group2()[0] * self.group0()[2]),
                (other.group2()[1] * self.group0()[2]),
                (other.group2()[2] * self.group0()[2]),
                0.0,
            ]) - (Simd32x4::from(self.group0()[1]) * other.group1())
                - (swizzle!(self.group0(), 3, 3, 3, 1) * other.group2())),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (other.group2()[0] * self.group0()[0]),
                (other.group2()[1] * self.group0()[0]),
                (other.group2()[2] * self.group0()[0]),
                0.0,
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]) * swizzle!(self.group0(), 1, 1, 1, 0))
                + (swizzle!(self.group0(), 2, 2, 2, 0) * other.group1())),
        );
    }
}
impl GeometricAntiProduct<AntiDipoleInversion> for AntiQuadNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       26        0
    //    simd4        9        9        0
    // Totals...
    // yes simd       18       35        0
    //  no simd       45       62        0
    fn geometric_anti_product(self, other: AntiDipoleInversion) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group1()[0] * self.group0()[0]) + (other.group3()[0] * self.group0()[0])),
                ((other.group1()[1] * self.group0()[0]) + (other.group3()[1] * self.group0()[0])),
                ((other.group1()[2] * self.group0()[0]) + (other.group3()[2] * self.group0()[0])),
                ((other.group1()[3] * self.group0()[2]) * -1.0),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]) * swizzle!(self.group0(), 2, 2, 2, 1))
                + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group3()[3]]) * swizzle!(self.group0(), 3, 3, 3, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group1()[0] * self.group0()[3]) + (other.group2()[0] * self.group0()[0])),
                ((other.group1()[1] * self.group0()[3]) + (other.group2()[1] * self.group0()[0])),
                ((other.group1()[2] * self.group0()[3]) + (other.group2()[2] * self.group0()[0])),
                ((other.group2()[3] * self.group0()[1]) * -1.0),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group3()[3]]) * swizzle!(self.group0(), 1, 1, 1, 0))
                - (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]) * swizzle!(self.group0(), 2, 2, 2, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(other.group2()[0] * self.group0()[2]) - (other.group3()[0] * self.group0()[1])),
                (-(other.group2()[1] * self.group0()[2]) - (other.group3()[1] * self.group0()[1])),
                (-(other.group2()[2] * self.group0()[2]) - (other.group3()[2] * self.group0()[1])),
                (other.group2()[3] * self.group0()[3]),
            ]) + (swizzle!(self.group0(), 1, 1, 1, 0) * other.group1())
                + (swizzle!(self.group0(), 3, 3, 3, 2) * other.group2())),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (other.group2()[0] * self.group0()[0]),
                (other.group2()[1] * self.group0()[0]),
                (other.group2()[2] * self.group0()[0]),
                0.0,
            ]) - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]) * swizzle!(self.group0(), 2, 2, 2, 3))
                - (swizzle!(self.group0(), 3, 3, 3, 2) * other.group3())),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum321> for AntiQuadNum {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4        8        0
    fn geometric_anti_product(self, other: AntiDualNum321) -> Self::Output {
        return QuadNum::from_groups(/* e4, e5, e321, e12345 */ Simd32x4::from([
            ((other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[0])),
            (-(other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[1])),
            ((other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group0()[2])),
            (-(other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group0()[3])),
        ]));
    }
}
impl GeometricAntiProduct<AntiDualNum4> for AntiQuadNum {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4        9        0
    fn geometric_anti_product(self, other: AntiDualNum4) -> Self::Output {
        return QuadNum::from_groups(/* e4, e5, e321, e12345 */ Simd32x4::from([
            (-(other.group0()[0] * self.group0()[2]) - (other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group0()[0])),
            (other.group0()[1] * self.group0()[1] * -1.0),
            (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[2])),
            (-(other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[3])),
        ]));
    }
}
impl GeometricAntiProduct<AntiDualNum5> for AntiQuadNum {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4        9        0
    fn geometric_anti_product(self, other: AntiDualNum5) -> Self::Output {
        return QuadNum::from_groups(/* e4, e5, e321, e12345 */ Simd32x4::from([
            (other.group0()[1] * self.group0()[0] * -1.0),
            ((other.group0()[0] * self.group0()[2]) - (other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group0()[1])),
            ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[2])),
            (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[3])),
        ]));
    }
}
impl GeometricAntiProduct<AntiFlatPoint> for AntiQuadNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        9        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        3       13        0
    //  no simd        3       25        0
    fn geometric_anti_product(self, other: AntiFlatPoint) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[3] * self.group0()[2] * -1.0)]),
            // e23, e31, e12, e45
            (swizzle!(self.group0(), 0, 0, 0, 3) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[0] * self.group0()[3])),
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[1] * self.group0()[3])),
                (-(other.group0()[2] * self.group0()[2]) + (other.group0()[2] * self.group0()[3])),
                (other.group0()[3] * self.group0()[0]),
            ]),
            // e4235, e4315, e4125, e3215
            (swizzle!(self.group0(), 0, 0, 0, 1) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
    }
}
impl GeometricAntiProduct<AntiFlector> for AntiQuadNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       17        0
    //    simd4        3        4        0
    // Totals...
    // yes simd       10       21        0
    //  no simd       19       33        0
    fn geometric_anti_product(self, other: AntiFlector) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group1()[0] * self.group0()[0]),
                (other.group1()[1] * self.group0()[0]),
                (other.group1()[2] * self.group0()[0]),
                (-(other.group0()[3] * self.group0()[2]) + (other.group1()[3] * self.group0()[0])),
            ]),
            // e23, e31, e12, e45
            ((Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]) * swizzle!(self.group0(), 2, 2, 2, 3))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[0] * self.group0()[3]) - (other.group1()[0] * self.group0()[1])),
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[1] * self.group0()[3]) - (other.group1()[1] * self.group0()[1])),
                (-(other.group0()[2] * self.group0()[2]) + (other.group0()[2] * self.group0()[3]) - (other.group1()[2] * self.group0()[1])),
                (other.group0()[3] * self.group0()[0]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([0.0, 0.0, 0.0, ((other.group1()[3] * self.group0()[2]) * -1.0)])
                + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]) * swizzle!(self.group0(), 0, 0, 0, 3))
                - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]) * swizzle!(self.group0(), 3, 3, 3, 1))),
        );
    }
}
impl GeometricAntiProduct<AntiLine> for AntiQuadNum {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       21        0
    //    simd3        0        2        0
    // Totals...
    // yes simd       12       23        0
    //  no simd       12       27        0
    fn geometric_anti_product(self, other: AntiLine) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self.group0()[0]) * other.group0() * Simd32x3::from(-1.0)),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group1()[0] * self.group0()[0])),
                (-(other.group0()[1] * self.group0()[3]) - (other.group1()[1] * self.group0()[0])),
                (-(other.group0()[2] * self.group0()[3]) - (other.group1()[2] * self.group0()[0])),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[1]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[0] * self.group0()[3])),
                (-(other.group0()[1] * self.group0()[1]) + (other.group1()[1] * self.group0()[2]) - (other.group1()[1] * self.group0()[3])),
                (-(other.group0()[2] * self.group0()[1]) + (other.group1()[2] * self.group0()[2]) - (other.group1()[2] * self.group0()[3])),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[2]) + (other.group1()[0] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[2]) + (other.group1()[1] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[2]) + (other.group1()[2] * self.group0()[0])),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiMotor> for AntiQuadNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       24        0
    //    simd4        2        3        0
    // Totals...
    // yes simd       10       27        0
    //  no simd       16       36        0
    fn geometric_anti_product(self, other: AntiMotor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[1] * self.group0()[0] * -1.0),
                (other.group0()[2] * self.group0()[0] * -1.0),
                (-(other.group0()[3] * self.group0()[3]) - (other.group1()[3] * self.group0()[0])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group1()[0] * self.group0()[0])),
                (-(other.group0()[1] * self.group0()[3]) - (other.group1()[1] * self.group0()[0])),
                (-(other.group0()[2] * self.group0()[3]) - (other.group1()[2] * self.group0()[0])),
                ((other.group0()[3] * self.group0()[2]) + (other.group1()[3] * self.group0()[0])),
            ]),
            // e235, e315, e125, e5
            (-(Simd32x4::from(self.group0()[1]) * other.group0()) + (Simd32x4::from(self.group0()[2]) * other.group1()) - (Simd32x4::from(self.group0()[3]) * other.group1())),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[2]) + (other.group1()[0] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[2]) + (other.group1()[1] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[2]) + (other.group1()[2] * self.group0()[0])),
                (other.group0()[3] * self.group0()[0] * -1.0),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiPlane> for AntiQuadNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1       14        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        1       17        0
    //  no simd        1       26        0
    fn geometric_anti_product(self, other: AntiPlane) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self.group0()[0]) * other.group0()),
            // e23, e31, e12, e45
            (swizzle!(self.group0(), 2, 2, 2, 0) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[1] * self.group0()[1] * -1.0),
                (other.group0()[2] * self.group0()[1] * -1.0),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3] * -1.0),
                (other.group0()[1] * self.group0()[3] * -1.0),
                (other.group0()[2] * self.group0()[3] * -1.0),
                (-(other.group0()[3] * self.group0()[2]) + (other.group0()[3] * self.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiQuadNum> for AntiQuadNum {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       12        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        9       13        0
    //  no simd       12       16        0
    fn geometric_anti_product(self, other: AntiQuadNum) -> Self::Output {
        return QuadNum::from_groups(
            // e4, e5, e321, e12345
            (Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) + (other.group0()[2] * self.group0()[0]) - (other.group0()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) - (other.group0()[3] * self.group0()[1])),
                ((other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group0()[3]) + (other.group0()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group0()[0]) - (other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self.group0()[3])),
            ]) - (swizzle!(other.group0(), 0, 1, 0, 0) * swizzle!(self.group0(), 2, 3, 1, 1))),
        );
    }
}
impl GeometricAntiProduct<AntiScalar> for AntiQuadNum {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn geometric_anti_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiQuadNum::from_groups(/* e1234, e3215, e45, scalar */ (Simd32x4::from(other[e12345]) * self.group0()));
    }
}
impl GeometricAntiProduct<AntiTripleNum> for AntiQuadNum {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        5        9        0
    //  no simd        8       12        0
    fn geometric_anti_product(self, other: AntiTripleNum) -> Self::Output {
        return QuadNum::from_groups(
            // e4, e5, e321, e12345
            (Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group0()[2] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                ((other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group0()[2])),
                (-(other.group0()[1] * self.group0()[0]) - (other.group0()[2] * self.group0()[3])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 3, 1, 1))),
        );
    }
}
impl GeometricAntiProduct<Circle> for AntiQuadNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       24       43        0
    fn geometric_anti_product(self, other: Circle) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[0] * self.group0()[3]) + (self.group0()[0] * other.group1()[0])),
                ((other.group0()[1] * self.group0()[2]) + (other.group0()[1] * self.group0()[3]) + (self.group0()[0] * other.group1()[1])),
                ((other.group0()[2] * self.group0()[2]) + (other.group0()[2] * self.group0()[3]) + (self.group0()[0] * other.group1()[2])),
                (self.group0()[2] * other.group1()[3] * -1.0),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[1]) + (other.group2()[0] * self.group0()[0]) + (self.group0()[3] * other.group1()[0])),
                ((other.group0()[1] * self.group0()[1]) + (other.group2()[1] * self.group0()[0]) + (self.group0()[3] * other.group1()[1])),
                ((other.group0()[2] * self.group0()[1]) + (other.group2()[2] * self.group0()[0]) + (self.group0()[3] * other.group1()[2])),
                (self.group0()[3] * other.group1()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group2()[0] * self.group0()[2]) + (other.group2()[0] * self.group0()[3]) + (self.group0()[1] * other.group1()[0])),
                (-(other.group2()[1] * self.group0()[2]) + (other.group2()[1] * self.group0()[3]) + (self.group0()[1] * other.group1()[1])),
                (-(other.group2()[2] * self.group0()[2]) + (other.group2()[2] * self.group0()[3]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[0] * other.group1()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[1]) + (other.group2()[0] * self.group0()[0]) + (self.group0()[2] * other.group1()[0])),
                (-(other.group0()[1] * self.group0()[1]) + (other.group2()[1] * self.group0()[0]) + (self.group0()[2] * other.group1()[1])),
                (-(other.group0()[2] * self.group0()[1]) + (other.group2()[2] * self.group0()[0]) + (self.group0()[2] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3] * -1.0),
            ]),
        );
    }
}
impl GeometricAntiProduct<CircleRotor> for AntiQuadNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       25        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       12       31        0
    //  no simd       30       49        0
    fn geometric_anti_product(self, other: CircleRotor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (self.group0()[0] * other.group1()[0])),
                ((other.group0()[1] * self.group0()[3]) + (self.group0()[0] * other.group1()[1])),
                ((other.group0()[2] * self.group0()[3]) + (self.group0()[0] * other.group1()[2])),
                ((self.group0()[2] * other.group1()[3]) * -1.0),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]) * swizzle!(self.group0(), 2, 2, 2, 3))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[3] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[3] * other.group1()[2])),
                ((self.group0()[3] * other.group1()[3]) * -1.0),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]) * swizzle!(self.group0(), 1, 1, 1, 2))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group0()[2] * other.group2()[0]) * -1.0),
                ((self.group0()[2] * other.group2()[1]) * -1.0),
                ((self.group0()[2] * other.group2()[2]) * -1.0),
                0.0,
            ]) + (swizzle!(self.group0(), 1, 1, 1, 0) * other.group1())
                + (swizzle!(self.group0(), 3, 3, 3, 0) * other.group2())),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (self.group0()[2] * other.group1()[0]),
                (self.group0()[2] * other.group1()[1]),
                (self.group0()[2] * other.group1()[2]),
                0.0,
            ]) - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (swizzle!(self.group0(), 0, 0, 0, 1) * other.group2())),
        );
    }
}
impl GeometricAntiProduct<Dipole> for AntiQuadNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       24       42        0
    fn geometric_anti_product(self, other: Dipole) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[2]) - (other.group0()[0] * self.group0()[3]) - (self.group0()[0] * other.group1()[0])),
                (-(other.group0()[1] * self.group0()[2]) - (other.group0()[1] * self.group0()[3]) - (self.group0()[0] * other.group1()[1])),
                (-(other.group0()[2] * self.group0()[2]) - (other.group0()[2] * self.group0()[3]) - (self.group0()[0] * other.group1()[2])),
                (self.group0()[2] * other.group1()[3] * -1.0),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[1]) - (other.group2()[0] * self.group0()[0]) - (self.group0()[3] * other.group1()[0])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group2()[1] * self.group0()[0]) - (self.group0()[3] * other.group1()[1])),
                (-(other.group0()[2] * self.group0()[1]) - (other.group2()[2] * self.group0()[0]) - (self.group0()[3] * other.group1()[2])),
                (self.group0()[3] * other.group1()[3]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((other.group2()[0] * self.group0()[2]) - (other.group2()[0] * self.group0()[3]) - (self.group0()[1] * other.group1()[0])),
                ((other.group2()[1] * self.group0()[2]) - (other.group2()[1] * self.group0()[3]) - (self.group0()[1] * other.group1()[1])),
                ((other.group2()[2] * self.group0()[2]) - (other.group2()[2] * self.group0()[3]) - (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3] * -1.0),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[1]) + (other.group2()[0] * self.group0()[0]) + (self.group0()[2] * other.group1()[0])),
                (-(other.group0()[1] * self.group0()[1]) + (other.group2()[1] * self.group0()[0]) + (self.group0()[2] * other.group1()[1])),
                (-(other.group0()[2] * self.group0()[1]) + (other.group2()[2] * self.group0()[0]) + (self.group0()[2] * other.group1()[2])),
                (self.group0()[0] * other.group1()[3]),
            ]),
        );
    }
}
impl GeometricAntiProduct<DipoleInversion> for AntiQuadNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       28        0
    //    simd4        9        9        0
    // Totals...
    // yes simd       19       37        0
    //  no simd       46       64        0
    fn geometric_anti_product(self, other: DipoleInversion) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (self.group0()[0] * other.group3()[0]),
                (self.group0()[0] * other.group3()[1]),
                (self.group0()[0] * other.group3()[2]),
                0.0,
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group3()[3]]) * swizzle!(self.group0(), 2, 2, 2, 0))
                - (swizzle!(self.group0(), 0, 0, 0, 2) * other.group1())),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(self.group0()[0] * other.group2()[0]) - (self.group0()[2] * other.group3()[0]) - (self.group0()[3] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[1]) - (self.group0()[2] * other.group3()[1]) - (self.group0()[3] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[2]) - (self.group0()[2] * other.group3()[2]) - (self.group0()[3] * other.group1()[2])),
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[3] * other.group1()[3])),
            ]) - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group0()[3] * other.group2()[0]) * -1.0),
                ((self.group0()[3] * other.group2()[1]) * -1.0),
                ((self.group0()[3] * other.group2()[2]) * -1.0),
                0.0,
            ]) - (Simd32x4::from(self.group0()[1]) * other.group1())
                + (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                - (swizzle!(self.group0(), 1, 1, 1, 3) * other.group3())),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[2] * other.group1()[0]) + (self.group0()[3] * other.group3()[0])),
                ((self.group0()[2] * other.group1()[1]) + (self.group0()[3] * other.group3()[1])),
                ((self.group0()[2] * other.group1()[2]) + (self.group0()[3] * other.group3()[2])),
                ((self.group0()[3] * other.group2()[3]) * -1.0),
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]) * swizzle!(self.group0(), 1, 1, 1, 2))),
        );
    }
}
impl GeometricAntiProduct<DualNum321> for AntiQuadNum {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        1        3        0
    // no simd        4       12        0
    fn geometric_anti_product(self, other: DualNum321) -> Self::Output {
        return AntiQuadNum::from_groups(
            // e1234, e3215, e45, scalar
            ((Simd32x4::from([other.group0()[1], other.group0()[0], other.group0()[0], other.group0()[0]])
                * swizzle!(self.group0(), 0, 1, 3, 2)
                * Simd32x4::from([1.0, -1.0, -1.0, -1.0]))
                + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[1], other.group0()[1]]) * self.group0())),
        );
    }
}
impl GeometricAntiProduct<DualNum4> for AntiQuadNum {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4        8        0
    fn geometric_anti_product(self, other: DualNum4) -> Self::Output {
        return AntiQuadNum::from_groups(/* e1234, e3215, e45, scalar */ Simd32x4::from([
            ((other.group0()[0] * self.group0()[2]) + (other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group0()[0])),
            (other.group0()[1] * self.group0()[1]),
            (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[2])),
            ((other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[3])),
        ]));
    }
}
impl GeometricAntiProduct<DualNum5> for AntiQuadNum {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4        8        0
    fn geometric_anti_product(self, other: DualNum5) -> Self::Output {
        return AntiQuadNum::from_groups(/* e1234, e3215, e45, scalar */ Simd32x4::from([
            (other.group0()[1] * self.group0()[0]),
            (-(other.group0()[0] * self.group0()[2]) + (other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group0()[1])),
            ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[2])),
            ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[3])),
        ]));
    }
}
impl GeometricAntiProduct<FlatPoint> for AntiQuadNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       10        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        3       13        0
    //  no simd        3       22        0
    fn geometric_anti_product(self, other: FlatPoint) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[2] * other.group0()[3] * -1.0)]),
            // e415, e425, e435, e321
            (swizzle!(self.group0(), 0, 0, 0, 3) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[2] * other.group0()[0]) - (self.group0()[3] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[1]) - (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[2]) - (self.group0()[3] * other.group0()[2])),
                (self.group0()[1] * other.group0()[3] * -1.0),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[0]) * other.group0()),
        );
    }
}
impl GeometricAntiProduct<Flector> for AntiQuadNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       20        0
    //    simd4        2        3        0
    // Totals...
    // yes simd       10       23        0
    //  no simd       16       32        0
    fn geometric_anti_product(self, other: Flector) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                (-(self.group0()[0] * other.group1()[3]) - (self.group0()[2] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group0()[1]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group1()[2])),
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[3] * other.group0()[3])),
            ]),
            // e235, e315, e125, e5
            (-(Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                + (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[3] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[3] * other.group1()[2])),
                (self.group0()[0] * other.group0()[3]),
            ]),
        );
    }
}
impl GeometricAntiProduct<Line> for AntiQuadNum {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       21        0
    //    simd3        0        1        0
    // Totals...
    // yes simd       12       22        0
    //  no simd       12       24        0
    fn geometric_anti_product(self, other: Line) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group0()[0]) * other.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group1()[0] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[3]) + (other.group1()[1] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[3]) + (other.group1()[2] * self.group0()[0])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[1]) - (other.group1()[0] * self.group0()[2]) + (other.group1()[0] * self.group0()[3])),
                ((other.group0()[1] * self.group0()[1]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[1] * self.group0()[3])),
                ((other.group0()[2] * self.group0()[1]) - (other.group1()[2] * self.group0()[2]) + (other.group1()[2] * self.group0()[3])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[2]) + (other.group1()[0] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[2]) + (other.group1()[1] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[2]) + (other.group1()[2] * self.group0()[0])),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<Motor> for AntiQuadNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       17        0
    //    simd4        3        4        0
    // Totals...
    // yes simd       10       21        0
    //  no simd       19       33        0
    fn geometric_anti_product(self, other: Motor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[3] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            ((Simd32x4::from(self.group0()[0]) * other.group1()) + (swizzle!(self.group0(), 3, 3, 3, 2) * other.group0())),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group1()[0]) + (self.group0()[3] * other.group1()[0])),
                ((self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group1()[1]) + (self.group0()[3] * other.group1()[1])),
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group1()[2]) + (self.group0()[3] * other.group1()[2])),
                (self.group0()[0] * other.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([0.0, 0.0, 0.0, ((self.group0()[2] * other.group1()[3]) * -1.0)])
                + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]) * swizzle!(self.group0(), 2, 2, 2, 3))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]) * swizzle!(self.group0(), 0, 0, 0, 1))),
        );
    }
}
impl GeometricAntiProduct<MultiVector> for AntiQuadNum {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       22       34        0
    //    simd2        1        1        0
    //    simd3       12       16        0
    //    simd4        9       11        0
    // Totals...
    // yes simd       44       62        0
    //  no simd       96      128        0
    fn geometric_anti_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                ((other.group0()[1] * self.group0()[3]) + (self.group0()[0] * other[e1]) + (self.group0()[1] * other.group1()[3])),
                (-(other.group0()[0] * self.group0()[3]) - (self.group0()[0] * other.group9()[3]) - (self.group0()[1] * other[e45])),
            ]) - (Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group6()[3], other.group3()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group3()[0]) + (self.group0()[3] * other.group9()[0])),
                ((self.group0()[0] * other.group3()[1]) + (self.group0()[3] * other.group9()[1])),
                ((self.group0()[0] * other.group3()[2]) + (self.group0()[3] * other.group9()[2])),
                (-(self.group0()[2] * other[e45]) - (self.group0()[3] * other[e45])),
            ]) - (Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[2], other.group0()[0]]) * swizzle!(self.group0(), 1, 1, 1, 0))
                + (Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other.group3()[3]]) * swizzle!(self.group0(), 2, 2, 2, 0))),
            // e5
            (-(other.group0()[0] * self.group0()[1]) - (self.group0()[1] * other.group3()[3]) + (self.group0()[2] * other.group9()[3]) - (self.group0()[3] * other.group9()[3])),
            // e15, e25, e35, e45
            ((Simd32x4::from([other.group8()[0], other.group8()[1], other.group8()[2], other.group0()[1]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group8()[0], other.group8()[1], other.group8()[2], other.group1()[3]]) * swizzle!(self.group0(), 2, 2, 2, 1))
                - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group6()[3]]) * swizzle!(self.group0(), 1, 1, 1, 3))
                + (Simd32x4::from([other.group6()[0], other.group6()[1], other.group6()[2], other[e1]]) * swizzle!(self.group0(), 1, 1, 1, 0))),
            // e41, e42, e43
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                + (Simd32x3::from(self.group0()[2]) * other.group7())
                + (Simd32x3::from(self.group0()[3]) * other.group7())),
            // e23, e31, e12
            ((Simd32x3::from(self.group0()[0]) * other.group8()) + (Simd32x3::from(self.group0()[1]) * other.group7())
                - (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group5()[0] * self.group0()[3]) - (self.group0()[0] * other.group3()[0]) - (self.group0()[2] * other.group9()[0])),
                (-(other.group5()[1] * self.group0()[3]) - (self.group0()[0] * other.group3()[1]) - (self.group0()[2] * other.group9()[1])),
                (-(other.group5()[2] * self.group0()[3]) - (self.group0()[0] * other.group3()[2]) - (self.group0()[2] * other.group9()[2])),
                ((other.group0()[0] * self.group0()[2]) + (self.group0()[0] * other.group9()[3]) + (self.group0()[3] * other.group3()[3])),
            ]) - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[2], other[e45]]))),
            // e423, e431, e412
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                - (Simd32x3::from(self.group0()[0]) * other.group5())
                - (Simd32x3::from(self.group0()[2]) * other.group4())
                - (Simd32x3::from(self.group0()[3]) * other.group4())),
            // e235, e315, e125
            (-(Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]])) - (Simd32x3::from(self.group0()[1]) * other.group5())
                + (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                - (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))),
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group6()[3]]))
                + (Simd32x4::from([other.group8()[0], other.group8()[1], other.group8()[2], other.group0()[1]]) * swizzle!(self.group0(), 0, 0, 0, 1))
                - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other[e1]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group6()[0], other.group6()[1], other.group6()[2], other[e1]]) * swizzle!(self.group0(), 2, 2, 2, 3))),
            // e1234
            ((other.group0()[1] * self.group0()[0]) + (self.group0()[0] * other.group6()[3]) + (self.group0()[2] * other.group1()[3]) + (self.group0()[3] * other.group1()[3])),
        );
    }
}
impl GeometricAntiProduct<Plane> for AntiQuadNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1       11        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        1       15        0
    //  no simd        1       27        0
    fn geometric_anti_product(self, other: Plane) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self.group0()[0]) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e415, e425, e435, e321
            (swizzle!(self.group0(), 2, 2, 2, 0) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0] * -1.0),
                (self.group0()[1] * other.group0()[1] * -1.0),
                (self.group0()[1] * other.group0()[2] * -1.0),
                ((self.group0()[2] * other.group0()[3]) - (self.group0()[3] * other.group0()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<QuadNum> for AntiQuadNum {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        6       10        0
    //  no simd       12       16        0
    fn geometric_anti_product(self, other: QuadNum) -> Self::Output {
        return AntiQuadNum::from_groups(
            // e1234, e3215, e45, scalar
            (Simd32x4::from([
                ((self.group0()[2] * other.group0()[0]) + (self.group0()[3] * other.group0()[0])),
                (-(self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[1] * other.group0()[0]) - (self.group0()[3] * other.group0()[2])),
                (-(self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])),
            ]) + (swizzle!(self.group0(), 0, 1, 0, 0) * swizzle!(other.group0(), 2, 3, 1, 1))
                + (swizzle!(self.group0(), 0, 3, 2, 1) * swizzle!(other.group0(), 3, 1, 3, 0))),
        );
    }
}
impl GeometricAntiProduct<RoundPoint> for AntiQuadNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4       29        0
    fn geometric_anti_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                ((self.group0()[0] * other[e2]) + (self.group0()[1] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[2] * other.group0()[0] * -1.0),
                (self.group0()[2] * other.group0()[1] * -1.0),
                (self.group0()[2] * other.group0()[2] * -1.0),
                ((self.group0()[0] * other[e2]) - (self.group0()[1] * other.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0] * -1.0),
                (self.group0()[1] * other.group0()[1] * -1.0),
                (self.group0()[1] * other.group0()[2] * -1.0),
                ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                (-(self.group0()[2] * other[e2]) + (self.group0()[3] * other[e2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Scalar> for AntiQuadNum {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn geometric_anti_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return QuadNum::from_groups(
            // e4, e5, e321, e12345
            (Simd32x4::from(other[scalar]) * self.group0() * Simd32x4::from([-1.0, -1.0, 1.0, -1.0])),
        );
    }
}
impl GeometricAntiProduct<Sphere> for AntiQuadNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4       26        0
    fn geometric_anti_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (-(self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other[e4315])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[2] * other.group0()[0] * -1.0),
                (self.group0()[2] * other.group0()[1] * -1.0),
                (self.group0()[2] * other.group0()[2] * -1.0),
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other[e4315])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0] * -1.0),
                (self.group0()[1] * other.group0()[1] * -1.0),
                (self.group0()[1] * other.group0()[2] * -1.0),
                ((self.group0()[2] * other.group0()[3]) - (self.group0()[3] * other.group0()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[2] * other[e4315]) - (self.group0()[3] * other[e4315])),
            ]),
        );
    }
}
impl GeometricAntiProduct<TripleNum> for AntiQuadNum {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        2        4        0
    // no simd        8       16        0
    fn geometric_anti_product(self, other: TripleNum) -> Self::Output {
        return AntiQuadNum::from_groups(
            // e1234, e3215, e45, scalar
            ((Simd32x4::from([other.group0()[2], other.group0()[1], other.group0()[0], other.group0()[2]])
                * swizzle!(self.group0(), 0, 2, 1, 3)
                * Simd32x4::from([1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[1], other.group0()[0]]) * swizzle!(self.group0(), 2, 3, 0, 1))
                + (Simd32x4::from([other.group0()[0], other.group0()[2], other.group0()[2], other.group0()[1]]) * swizzle!(self.group0(), 3, 1, 2, 0))),
        );
    }
}
impl GeometricAntiProduct<VersorEven> for AntiQuadNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4       11       16        0
    // Totals...
    // yes simd       15       24        0
    //  no simd       48       72        0
    fn geometric_anti_product(self, other: VersorEven) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]])
                * swizzle!(self.group0(), 3, 3, 3, 2)
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                + (swizzle!(self.group0(), 0, 0, 0, 1) * other.group3())
                + (swizzle!(self.group0(), 2, 2, 2, 3) * other.group0())),
            // e23, e31, e12, e45
            ((Simd32x4::from(self.group0()[3]) * other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(self.group0()[0]) * other.group2())
                + (swizzle!(self.group0(), 1, 1, 1, 2) * other.group0())
                - (swizzle!(self.group0(), 2, 2, 2, 1) * other.group3())),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(self.group0()[1] * other.group3()[0]) - (self.group0()[2] * other.group2()[0])),
                (-(self.group0()[1] * other.group3()[1]) - (self.group0()[2] * other.group2()[1])),
                (-(self.group0()[1] * other.group3()[2]) - (self.group0()[2] * other.group2()[2])),
                ((self.group0()[2] * other.group3()[3]) + (self.group0()[3] * other.group3()[3])),
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]) * swizzle!(self.group0(), 1, 1, 1, 0))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]) * swizzle!(self.group0(), 3, 3, 3, 0))),
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]) * swizzle!(self.group0(), 2, 2, 2, 3))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[3]]) * swizzle!(self.group0(), 0, 0, 0, 1))
                - (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[3]]) * swizzle!(self.group0(), 3, 3, 3, 2))),
        );
    }
}
impl GeometricAntiProduct<VersorOdd> for AntiQuadNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       20        0
    //    simd4        9       12        0
    // Totals...
    // yes simd       21       32        0
    //  no simd       48       68        0
    fn geometric_anti_product(self, other: VersorOdd) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group0()[3]])
                * swizzle!(self.group0(), 0, 0, 0, 3)
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]) * swizzle!(self.group0(), 2, 2, 2, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group3()[0]) - (self.group0()[3] * other.group1()[0])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group3()[1]) - (self.group0()[3] * other.group1()[1])),
                (-(self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group3()[2]) - (self.group0()[3] * other.group1()[2])),
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group1()[3])),
            ]) - (swizzle!(self.group0(), 0, 0, 0, 1) * other.group2())),
            // e235, e315, e125, e5
            (-(Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))
                + (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[2] * other.group1()[0]) + (self.group0()[3] * other.group3()[0])),
                ((self.group0()[2] * other.group1()[1]) + (self.group0()[3] * other.group3()[1])),
                ((self.group0()[2] * other.group1()[2]) + (self.group0()[3] * other.group3()[2])),
                (-(self.group0()[2] * other.group2()[3]) - (self.group0()[3] * other.group2()[3])),
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))
                - (swizzle!(self.group0(), 1, 1, 1, 0) * other.group0())),
        );
    }
}
impl GeometricAntiProduct<VersorRoundPoint> for AntiQuadNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       33        0
    fn geometric_anti_product(self, other: VersorRoundPoint) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                ((other.group1()[0] * self.group0()[0]) + (other.group1()[1] * self.group0()[3]) + (self.group0()[1] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[2] * other.group0()[0] * -1.0),
                (self.group0()[2] * other.group0()[1] * -1.0),
                (self.group0()[2] * other.group0()[2] * -1.0),
                ((other.group1()[0] * self.group0()[0]) + (other.group1()[1] * self.group0()[2]) - (self.group0()[1] * other.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0] * -1.0),
                (self.group0()[1] * other.group0()[1] * -1.0),
                (self.group0()[1] * other.group0()[2] * -1.0),
                ((other.group1()[1] * self.group0()[0]) + (self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                (-(other.group1()[0] * self.group0()[2]) + (other.group1()[0] * self.group0()[3]) + (other.group1()[1] * self.group0()[1])),
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorSphere> for AntiQuadNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       30        0
    fn geometric_anti_product(self, other: VersorSphere) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (-(other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[3]) - (self.group0()[0] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[2] * other.group0()[0] * -1.0),
                (self.group0()[2] * other.group0()[1] * -1.0),
                (self.group0()[2] * other.group0()[2] * -1.0),
                (-(other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[2]) + (self.group0()[0] * other.group0()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0] * -1.0),
                (self.group0()[1] * other.group0()[1] * -1.0),
                (self.group0()[1] * other.group0()[2] * -1.0),
                (-(other.group1()[1] * self.group0()[1]) + (self.group0()[2] * other.group0()[3]) - (self.group0()[3] * other.group0()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(other.group1()[0] * self.group0()[2]) - (other.group1()[0] * self.group0()[3]) - (other.group1()[1] * self.group0()[0])),
            ]),
        );
    }
}
impl InfixGeometricAntiProduct for AntiScalar {}
impl GeometricAntiProduct<AntiCircleRotor> for AntiScalar {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        1        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0       11        0
    fn geometric_anti_product(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return AntiCircleRotor::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[e12345]) * other.group0()),
            // e23, e31, e12, e45
            (Simd32x4::from(self[e12345]) * other.group1()),
            // e15, e25, e35, scalar
            (Simd32x4::from(self[e12345]) * other.group2()),
        );
    }
}
impl GeometricAntiProduct<AntiDipoleInversion> for AntiScalar {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        1        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0       15        0
    fn geometric_anti_product(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[e12345]) * other.group0()),
            // e415, e425, e435, e321
            (Simd32x4::from(self[e12345]) * other.group1()),
            // e235, e315, e125, e4
            (Simd32x4::from(self[e12345]) * other.group2()),
            // e1, e2, e3, e5
            (Simd32x4::from(self[e12345]) * other.group3()),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum321> for AntiScalar {
    type Output = AntiDualNum321;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        1        0
    // no simd        0        2        0
    fn geometric_anti_product(self, other: AntiDualNum321) -> Self::Output {
        use crate::elements::*;
        return AntiDualNum321::from_groups(/* e45, scalar */ (Simd32x2::from(self[e12345]) * other.group0()));
    }
}
impl GeometricAntiProduct<AntiDualNum4> for AntiScalar {
    type Output = AntiDualNum4;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        1        0
    // no simd        0        2        0
    fn geometric_anti_product(self, other: AntiDualNum4) -> Self::Output {
        use crate::elements::*;
        return AntiDualNum4::from_groups(/* e1234, scalar */ (Simd32x2::from(self[e12345]) * other.group0()));
    }
}
impl GeometricAntiProduct<AntiDualNum5> for AntiScalar {
    type Output = AntiDualNum5;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        1        0
    // no simd        0        2        0
    fn geometric_anti_product(self, other: AntiDualNum5) -> Self::Output {
        use crate::elements::*;
        return AntiDualNum5::from_groups(/* e3215, scalar */ (Simd32x2::from(self[e12345]) * other.group0()));
    }
}
impl GeometricAntiProduct<AntiFlatPoint> for AntiScalar {
    type Output = AntiFlatPoint;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn geometric_anti_product(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiFlatPoint::from_groups(/* e235, e315, e125, e321 */ (Simd32x4::from(self[e12345]) * other.group0()));
    }
}
impl GeometricAntiProduct<AntiFlector> for AntiScalar {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn geometric_anti_product(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from(self[e12345]) * other.group0()),
            // e1, e2, e3, e5
            (Simd32x4::from(self[e12345]) * other.group1()),
        );
    }
}
impl GeometricAntiProduct<AntiLine> for AntiScalar {
    type Output = AntiLine;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn geometric_anti_product(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return AntiLine::from_groups(
            // e23, e31, e12
            (Simd32x3::from(self[e12345]) * other.group0()),
            // e15, e25, e35
            (Simd32x3::from(self[e12345]) * other.group1()),
        );
    }
}
impl GeometricAntiProduct<AntiMotor> for AntiScalar {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn geometric_anti_product(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from(self[e12345]) * other.group0()),
            // e15, e25, e35, e3215
            (Simd32x4::from(self[e12345]) * other.group1()),
        );
    }
}
impl GeometricAntiProduct<AntiPlane> for AntiScalar {
    type Output = AntiPlane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn geometric_anti_product(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ (Simd32x4::from(self[e12345]) * other.group0()));
    }
}
impl GeometricAntiProduct<AntiQuadNum> for AntiScalar {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn geometric_anti_product(self, other: AntiQuadNum) -> Self::Output {
        use crate::elements::*;
        return AntiQuadNum::from_groups(/* e1234, e3215, e45, scalar */ (Simd32x4::from(self[e12345]) * other.group0()));
    }
}
impl GeometricAntiProduct<AntiScalar> for AntiScalar {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn geometric_anti_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (other[e12345] * self[e12345]));
    }
}
impl GeometricAntiProduct<AntiTripleNum> for AntiScalar {
    type Output = AntiTripleNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn geometric_anti_product(self, other: AntiTripleNum) -> Self::Output {
        use crate::elements::*;
        return AntiTripleNum::from_groups(/* e1234, e3215, scalar */ (Simd32x3::from(self[e12345]) * other.group0()));
    }
}
impl GeometricAntiProduct<Circle> for AntiScalar {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0       10        0
    fn geometric_anti_product(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return Circle::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[e12345]) * other.group0()),
            // e415, e425, e435, e321
            (Simd32x4::from(self[e12345]) * other.group1()),
            // e235, e315, e125
            (Simd32x3::from(self[e12345]) * other.group2()),
        );
    }
}
impl GeometricAntiProduct<CircleRotor> for AntiScalar {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        1        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0       11        0
    fn geometric_anti_product(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return CircleRotor::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[e12345]) * other.group0()),
            // e415, e425, e435, e321
            (Simd32x4::from(self[e12345]) * other.group1()),
            // e235, e315, e125, e12345
            (Simd32x4::from(self[e12345]) * other.group2()),
        );
    }
}
impl GeometricAntiProduct<Dipole> for AntiScalar {
    type Output = Dipole;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0       10        0
    fn geometric_anti_product(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return Dipole::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[e12345]) * other.group0()),
            // e23, e31, e12, e45
            (Simd32x4::from(self[e12345]) * other.group1()),
            // e15, e25, e35
            (Simd32x3::from(self[e12345]) * other.group2()),
        );
    }
}
impl GeometricAntiProduct<DipoleInversion> for AntiScalar {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        1        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0       15        0
    fn geometric_anti_product(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[e12345]) * other.group0()),
            // e23, e31, e12, e45
            (Simd32x4::from(self[e12345]) * other.group1()),
            // e15, e25, e35, e1234
            (Simd32x4::from(self[e12345]) * other.group2()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[e12345]) * other.group3()),
        );
    }
}
impl GeometricAntiProduct<DualNum321> for AntiScalar {
    type Output = DualNum321;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        1        0
    // no simd        0        2        0
    fn geometric_anti_product(self, other: DualNum321) -> Self::Output {
        use crate::elements::*;
        return DualNum321::from_groups(/* e321, e12345 */ (Simd32x2::from(self[e12345]) * other.group0()));
    }
}
impl GeometricAntiProduct<DualNum4> for AntiScalar {
    type Output = DualNum4;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        1        0
    // no simd        0        2        0
    fn geometric_anti_product(self, other: DualNum4) -> Self::Output {
        use crate::elements::*;
        return DualNum4::from_groups(/* e4, e12345 */ (Simd32x2::from(self[e12345]) * other.group0()));
    }
}
impl GeometricAntiProduct<DualNum5> for AntiScalar {
    type Output = DualNum5;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        1        0
    // no simd        0        2        0
    fn geometric_anti_product(self, other: DualNum5) -> Self::Output {
        use crate::elements::*;
        return DualNum5::from_groups(/* e5, e12345 */ (Simd32x2::from(self[e12345]) * other.group0()));
    }
}
impl GeometricAntiProduct<FlatPoint> for AntiScalar {
    type Output = FlatPoint;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn geometric_anti_product(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return FlatPoint::from_groups(/* e15, e25, e35, e45 */ (Simd32x4::from(self[e12345]) * other.group0()));
    }
}
impl GeometricAntiProduct<Flector> for AntiScalar {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn geometric_anti_product(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from(self[e12345]) * other.group0()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[e12345]) * other.group1()),
        );
    }
}
impl GeometricAntiProduct<Line> for AntiScalar {
    type Output = Line;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn geometric_anti_product(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return Line::from_groups(
            // e415, e425, e435
            (Simd32x3::from(self[e12345]) * other.group0()),
            // e235, e315, e125
            (Simd32x3::from(self[e12345]) * other.group1()),
        );
    }
}
impl GeometricAntiProduct<Motor> for AntiScalar {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn geometric_anti_product(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(self[e12345]) * other.group0()),
            // e235, e315, e125, e5
            (Simd32x4::from(self[e12345]) * other.group1()),
        );
    }
}
impl GeometricAntiProduct<MultiVector> for AntiScalar {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd2        0        1        0
    //    simd3        0        4        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0       11        0
    //  no simd        0       32        0
    fn geometric_anti_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from(self[e12345]) * other.group0()),
            // e1, e2, e3, e4
            (Simd32x4::from(self[e12345]) * other.group1()),
            // e5
            (self[e12345] * other[e1]),
            // e15, e25, e35, e45
            (Simd32x4::from(self[e12345]) * other.group3()),
            // e41, e42, e43
            (Simd32x3::from(self[e12345]) * other.group4()),
            // e23, e31, e12
            (Simd32x3::from(self[e12345]) * other.group5()),
            // e415, e425, e435, e321
            (Simd32x4::from(self[e12345]) * other.group6()),
            // e423, e431, e412
            (Simd32x3::from(self[e12345]) * other.group7()),
            // e235, e315, e125
            (Simd32x3::from(self[e12345]) * other.group8()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[e12345]) * other.group9()),
            // e1234
            (self[e12345] * other[e45]),
        );
    }
}
impl GeometricAntiProduct<Plane> for AntiScalar {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn geometric_anti_product(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (Simd32x4::from(self[e12345]) * other.group0()));
    }
}
impl GeometricAntiProduct<QuadNum> for AntiScalar {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn geometric_anti_product(self, other: QuadNum) -> Self::Output {
        use crate::elements::*;
        return QuadNum::from_groups(/* e4, e5, e321, e12345 */ (Simd32x4::from(self[e12345]) * other.group0()));
    }
}
impl GeometricAntiProduct<RoundPoint> for AntiScalar {
    type Output = RoundPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        5        0
    fn geometric_anti_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return RoundPoint::from_groups(/* e1, e2, e3, e4 */ (Simd32x4::from(self[e12345]) * other.group0()), /* e5 */ (self[e12345] * other[e2]));
    }
}
impl GeometricAntiProduct<Scalar> for AntiScalar {
    type Output = Scalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn geometric_anti_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self[e12345] * other[scalar]));
    }
}
impl GeometricAntiProduct<Sphere> for AntiScalar {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        5        0
    fn geometric_anti_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[e12345]) * other.group0()),
            // e1234
            (self[e12345] * other[e4315]),
        );
    }
}
impl GeometricAntiProduct<TripleNum> for AntiScalar {
    type Output = TripleNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn geometric_anti_product(self, other: TripleNum) -> Self::Output {
        use crate::elements::*;
        return TripleNum::from_groups(/* e4, e5, e12345 */ (Simd32x3::from(self[e12345]) * other.group0()));
    }
}
impl GeometricAntiProduct<VersorEven> for AntiScalar {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn geometric_anti_product(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self[e12345]) * other.group0()),
            // e415, e425, e435, e321
            (Simd32x4::from(self[e12345]) * other.group1()),
            // e235, e315, e125, e5
            (Simd32x4::from(self[e12345]) * other.group2()),
            // e1, e2, e3, e4
            (Simd32x4::from(self[e12345]) * other.group3()),
        );
    }
}
impl GeometricAntiProduct<VersorOdd> for AntiScalar {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn geometric_anti_product(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self[e12345]) * other.group0()),
            // e23, e31, e12, e45
            (Simd32x4::from(self[e12345]) * other.group1()),
            // e15, e25, e35, e1234
            (Simd32x4::from(self[e12345]) * other.group2()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[e12345]) * other.group3()),
        );
    }
}
impl GeometricAntiProduct<VersorRoundPoint> for AntiScalar {
    type Output = VersorRoundPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd2        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        6        0
    fn geometric_anti_product(self, other: VersorRoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorRoundPoint::from_groups(
            // e1, e2, e3, e4
            (Simd32x4::from(self[e12345]) * other.group0()),
            // e5, e12345
            (Simd32x2::from(self[e12345]) * other.group1()),
        );
    }
}
impl GeometricAntiProduct<VersorSphere> for AntiScalar {
    type Output = VersorSphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd2        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        6        0
    fn geometric_anti_product(self, other: VersorSphere) -> Self::Output {
        use crate::elements::*;
        return VersorSphere::from_groups(
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[e12345]) * other.group0()),
            // e1234, scalar
            (Simd32x2::from(self[e12345]) * other.group1()),
        );
    }
}
impl InfixGeometricAntiProduct for AntiTripleNum {}
impl GeometricAntiProduct<AntiCircleRotor> for AntiTripleNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       22        0
    //    simd4        2        3        0
    // Totals...
    // yes simd       11       25        0
    //  no simd       17       34        0
    fn geometric_anti_product(self, other: AntiCircleRotor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[2]) - (self.group0()[0] * other.group1()[0])),
                (-(other.group0()[1] * self.group0()[2]) - (self.group0()[0] * other.group1()[1])),
                (-(other.group0()[2] * self.group0()[2]) - (self.group0()[0] * other.group1()[2])),
                (self.group0()[2] * other.group2()[3] * -1.0),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[1]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[2] * other.group1()[0])),
                (-(other.group0()[1] * self.group0()[1]) - (self.group0()[0] * other.group2()[1]) - (self.group0()[2] * other.group1()[1])),
                (-(other.group0()[2] * self.group0()[1]) - (self.group0()[0] * other.group2()[2]) - (self.group0()[2] * other.group1()[2])),
                (self.group0()[2] * other.group1()[3]),
            ]),
            // e235, e315, e125, e5
            (-(Simd32x4::from(self.group0()[1]) * other.group1()) - (Simd32x4::from([self.group0()[2], self.group0()[2], self.group0()[2], self.group0()[1]]) * other.group2())),
            // e1, e2, e3, e4
            (-Simd32x4::from([
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[2] * self.group0()[1]),
                (self.group0()[0] * other.group2()[3]),
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))),
        );
    }
}
impl GeometricAntiProduct<AntiDipoleInversion> for AntiTripleNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       28        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       15       33        0
    //  no simd       30       48        0
    fn geometric_anti_product(self, other: AntiDipoleInversion) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[2]) + (self.group0()[0] * other.group3()[0])),
                ((other.group0()[1] * self.group0()[2]) + (self.group0()[0] * other.group3()[1])),
                ((other.group0()[2] * self.group0()[2]) + (self.group0()[0] * other.group3()[2])),
                (self.group0()[1] * other.group2()[3]),
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[1]) + (self.group0()[2] * other.group1()[0])),
                ((other.group0()[1] * self.group0()[1]) + (self.group0()[2] * other.group1()[1])),
                ((other.group0()[2] * self.group0()[1]) + (self.group0()[2] * other.group1()[2])),
                (-(self.group0()[1] * other.group2()[3]) - (self.group0()[2] * other.group1()[3])),
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group0()[1] * other.group3()[0]) * -1.0),
                ((self.group0()[1] * other.group3()[1]) * -1.0),
                ((self.group0()[1] * other.group3()[2]) * -1.0),
                0.0,
            ]) + (Simd32x4::from(self.group0()[2]) * other.group2())
                + (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]]) * other.group1())),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) - (self.group0()[2] * other.group3()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[2] * other.group3()[1])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[2] * other.group3()[2])),
                (self.group0()[2] * other.group3()[3]),
            ]) - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum321> for AntiTripleNum {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        7        0
    fn geometric_anti_product(self, other: AntiDualNum321) -> Self::Output {
        return QuadNum::from_groups(/* e4, e5, e321, e12345 */ Simd32x4::from([
            ((other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[0])),
            (-(other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[1])),
            (other.group0()[0] * self.group0()[2]),
            (other.group0()[1] * self.group0()[2] * -1.0),
        ]));
    }
}
impl GeometricAntiProduct<AntiDualNum4> for AntiTripleNum {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        8        0
    fn geometric_anti_product(self, other: AntiDualNum4) -> Self::Output {
        return QuadNum::from_groups(/* e4, e5, e321, e12345 */ Simd32x4::from([
            (-(other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group0()[0])),
            (other.group0()[1] * self.group0()[1] * -1.0),
            (other.group0()[0] * self.group0()[1] * -1.0),
            (-(other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[2])),
        ]));
    }
}
impl GeometricAntiProduct<AntiDualNum5> for AntiTripleNum {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        7        0
    fn geometric_anti_product(self, other: AntiDualNum5) -> Self::Output {
        return QuadNum::from_groups(/* e4, e5, e321, e12345 */ Simd32x4::from([
            (other.group0()[1] * self.group0()[0] * -1.0),
            (-(other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group0()[1])),
            (other.group0()[0] * self.group0()[0]),
            (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[2])),
        ]));
    }
}
impl GeometricAntiProduct<AntiFlatPoint> for AntiTripleNum {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        5        0
    // no simd        0       20        0
    fn geometric_anti_product(self, other: AntiFlatPoint) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[2]]) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e15, e25, e35, e1234
            (Simd32x4::from([self.group0()[2], self.group0()[2], self.group0()[2], self.group0()[0]]) * other.group0()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
    }
}
impl GeometricAntiProduct<AntiFlector> for AntiTripleNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       20        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        8       21        0
    //  no simd        8       24        0
    fn geometric_anti_product(self, other: AntiFlector) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self.group0()[0]) * other.group1()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[2] * other.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[1] * other.group1()[1]) + (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group0()[2])),
                (self.group0()[0] * other.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) - (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group1()[2])),
                (-(self.group0()[1] * other.group0()[3]) + (self.group0()[2] * other.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiLine> for AntiTripleNum {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       15        0
    //    simd3        0        2        0
    // Totals...
    // yes simd        6       17        0
    //  no simd        6       21        0
    fn geometric_anti_product(self, other: AntiLine) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self.group0()[0]) * other.group0() * Simd32x3::from(-1.0)),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[2]) - (other.group1()[0] * self.group0()[0])),
                (-(other.group0()[1] * self.group0()[2]) - (other.group1()[1] * self.group0()[0])),
                (-(other.group0()[2] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[1]) - (other.group1()[0] * self.group0()[2])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group1()[1] * self.group0()[2])),
                (-(other.group0()[2] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group1()[0] * self.group0()[0]),
                (other.group1()[1] * self.group0()[0]),
                (other.group1()[2] * self.group0()[0]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiMotor> for AntiTripleNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       15        0
    //    simd4        1        4        0
    // Totals...
    // yes simd        5       19        0
    //  no simd        8       31        0
    fn geometric_anti_product(self, other: AntiMotor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0] * -1.0),
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[0] * other.group0()[2] * -1.0),
                (-(self.group0()[0] * other.group1()[3]) - (self.group0()[2] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[1]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group0()[2])),
                (self.group0()[0] * other.group1()[3]),
            ]),
            // e235, e315, e125, e5
            (-(Simd32x4::from(self.group0()[1]) * other.group0()) - (Simd32x4::from(self.group0()[2]) * other.group1())),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[0])
                * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
    }
}
impl GeometricAntiProduct<AntiPlane> for AntiTripleNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        7        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        0       10        0
    //  no simd        0       19        0
    fn geometric_anti_product(self, other: AntiPlane) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self.group0()[0]) * other.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3])]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0] * -1.0),
                (self.group0()[1] * other.group0()[1] * -1.0),
                (self.group0()[1] * other.group0()[2] * -1.0),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group0()[2]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
    }
}
impl GeometricAntiProduct<AntiQuadNum> for AntiTripleNum {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        5        9        0
    //  no simd        8       12        0
    fn geometric_anti_product(self, other: AntiQuadNum) -> Self::Output {
        return QuadNum::from_groups(
            // e4, e5, e321, e12345
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[1] * other.group0()[3]) - (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
                (-(self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group0()[3])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[1], self.group0()[0]]) * swizzle!(other.group0(), 3, 2, 0, 1))),
        );
    }
}
impl GeometricAntiProduct<AntiScalar> for AntiTripleNum {
    type Output = AntiTripleNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn geometric_anti_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiTripleNum::from_groups(/* e1234, e3215, scalar */ (Simd32x3::from(other[e12345]) * self.group0()));
    }
}
impl GeometricAntiProduct<AntiTripleNum> for AntiTripleNum {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        9        0
    fn geometric_anti_product(self, other: AntiTripleNum) -> Self::Output {
        return QuadNum::from_groups(/* e4, e5, e321, e12345 */ Simd32x4::from([
            (-(other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
            (-(other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
            (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
            (-(other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) - (other.group0()[2] * self.group0()[2])),
        ]));
    }
}
impl GeometricAntiProduct<Circle> for AntiTripleNum {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       26        0
    //    simd3        1        2        0
    // Totals...
    // yes simd       13       28        0
    //  no simd       15       32        0
    fn geometric_anti_product(self, other: Circle) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])) + (Simd32x3::from(self.group0()[2]) * other.group0())),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group1()[2])),
                (self.group0()[2] * other.group1()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group2()[0])),
                ((self.group0()[1] * other.group1()[1]) + (self.group0()[2] * other.group2()[1])),
                ((self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group2()[2])),
                (self.group0()[0] * other.group1()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[1] * other.group0()[2])),
                (self.group0()[1] * other.group1()[3] * -1.0),
            ]),
        );
    }
}
impl GeometricAntiProduct<CircleRotor> for AntiTripleNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       18        0
    //    simd4        2        4        0
    // Totals...
    // yes simd       11       22        0
    //  no simd       17       34        0
    fn geometric_anti_product(self, other: CircleRotor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group0()[2])),
                (self.group0()[2] * other.group2()[3]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group1()[2])),
                (self.group0()[2] * other.group1()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            ((Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]]) * other.group1())
                + (Simd32x4::from([self.group0()[2], self.group0()[2], self.group0()[2], self.group0()[0]]) * other.group2())),
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * other.group2())),
        );
    }
}
impl GeometricAntiProduct<Dipole> for AntiTripleNum {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       25        0
    //    simd3        1        2        0
    // Totals...
    // yes simd       13       27        0
    //  no simd       15       31        0
    fn geometric_anti_product(self, other: Dipole) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (-(Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])) - (Simd32x3::from(self.group0()[2]) * other.group0())),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[2]) - (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group1()[2])),
                (self.group0()[2] * other.group1()[3]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (-(self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group2()[0])),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group2()[1])),
                (-(self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group2()[2])),
                (self.group0()[0] * other.group1()[3]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[1] * other.group0()[2])),
                (self.group0()[1] * other.group1()[3] * -1.0),
            ]),
        );
    }
}
impl GeometricAntiProduct<DipoleInversion> for AntiTripleNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       30        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       15       35        0
    //  no simd       30       50        0
    fn geometric_anti_product(self, other: DipoleInversion) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[0] * other.group3()[0]) - (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group3()[1]) - (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group3()[2]) - (self.group0()[2] * other.group0()[2])),
                ((self.group0()[1] * other.group2()[3]) * -1.0),
            ]) - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group1()[0])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group1()[2])),
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[2] * other.group1()[3])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * other.group2())),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group0()[2] * other.group2()[0]) * -1.0),
                ((self.group0()[2] * other.group2()[1]) * -1.0),
                ((self.group0()[2] * other.group2()[2]) * -1.0),
                0.0,
            ]) - (Simd32x4::from(self.group0()[1]) * other.group1())
                - (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[2]]) * other.group3())),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group3()[0])),
                (-(self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group3()[1])),
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group3()[2])),
                ((self.group0()[2] * other.group2()[3]) * -1.0),
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))),
        );
    }
}
impl GeometricAntiProduct<DualNum321> for AntiTripleNum {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        7        0
    fn geometric_anti_product(self, other: DualNum321) -> Self::Output {
        return AntiQuadNum::from_groups(/* e1234, e3215, e45, scalar */ Simd32x4::from([
            ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[0])),
            (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[1])),
            (other.group0()[0] * self.group0()[2] * -1.0),
            (other.group0()[1] * self.group0()[2]),
        ]));
    }
}
impl GeometricAntiProduct<DualNum4> for AntiTripleNum {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        7        0
    fn geometric_anti_product(self, other: DualNum4) -> Self::Output {
        return AntiQuadNum::from_groups(/* e1234, e3215, e45, scalar */ Simd32x4::from([
            ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[0])),
            (other.group0()[1] * self.group0()[1]),
            (other.group0()[0] * self.group0()[1] * -1.0),
            ((other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[2])),
        ]));
    }
}
impl GeometricAntiProduct<DualNum5> for AntiTripleNum {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn geometric_anti_product(self, other: DualNum5) -> Self::Output {
        return AntiQuadNum::from_groups(/* e1234, e3215, e45, scalar */ Simd32x4::from([
            (other.group0()[1] * self.group0()[0]),
            ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[1])),
            (other.group0()[0] * self.group0()[0]),
            ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[2])),
        ]));
    }
}
impl GeometricAntiProduct<FlatPoint> for AntiTripleNum {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        6        0
    // no simd        0       24        0
    fn geometric_anti_product(self, other: FlatPoint) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[2]]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e235, e315, e125, e4
            (Simd32x4::from([self.group0()[2], self.group0()[2], self.group0()[2], self.group0()[0]]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e1, e2, e3, e5
            (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
    }
}
impl GeometricAntiProduct<Flector> for AntiTripleNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       15        0
    //    simd4        1        4        0
    // Totals...
    // yes simd        5       19        0
    //  no simd        8       31        0
    fn geometric_anti_product(self, other: Flector) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self.group0()[0]) * other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0] * -1.0),
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[0] * other.group0()[2] * -1.0),
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[2] * other.group0()[3])),
            ]),
            // e235, e315, e125, e5
            (-(Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                - (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group1()[2])),
                (self.group0()[0] * other.group0()[3]),
            ]),
        );
    }
}
impl GeometricAntiProduct<Line> for AntiTripleNum {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       15        0
    //    simd3        0        1        0
    // Totals...
    // yes simd        6       16        0
    //  no simd        6       18        0
    fn geometric_anti_product(self, other: Line) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group0()[0]) * other.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group0()[2])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group1()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<Motor> for AntiTripleNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       24        0
    fn geometric_anti_product(self, other: Motor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[2] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group0()[2])),
                (self.group0()[0] * other.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group1()[2])),
                (self.group0()[0] * other.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[2] * other.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<MultiVector> for AntiTripleNum {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       44        0
    //    simd3        8       12        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       36       60        0
    //  no simd       64       96        0
    fn geometric_anti_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((other.group0()[1] * self.group0()[2]) + (self.group0()[0] * other[e1]) + (self.group0()[1] * other.group1()[3])),
                (-(other.group0()[0] * self.group0()[2]) - (self.group0()[0] * other.group9()[3]) - (self.group0()[1] * other[e45])),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(self.group0()[1] * other.group4()[0]) + (self.group0()[2] * other.group9()[0])),
                (-(self.group0()[1] * other.group4()[1]) + (self.group0()[2] * other.group9()[1])),
                (-(self.group0()[1] * other.group4()[2]) + (self.group0()[2] * other.group9()[2])),
                (-(other.group0()[0] * self.group0()[0]) - (self.group0()[2] * other[e45])),
            ]) + (Simd32x4::from(self.group0()[0]) * other.group3())),
            // e5
            (-(other.group0()[0] * self.group0()[1]) - (self.group0()[1] * other.group3()[3]) - (self.group0()[2] * other.group9()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group0()[1] * other.group6()[0]) + (self.group0()[2] * other.group8()[0])),
                ((self.group0()[1] * other.group6()[1]) + (self.group0()[2] * other.group8()[1])),
                ((self.group0()[1] * other.group6()[2]) + (self.group0()[2] * other.group8()[2])),
                ((self.group0()[0] * other[e1]) - (self.group0()[2] * other.group6()[3])),
            ]) - (Simd32x4::from(self.group0()[1]) * other.group1())),
            // e41, e42, e43
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                + (Simd32x3::from(self.group0()[2]) * other.group7())),
            // e23, e31, e12
            ((Simd32x3::from(self.group0()[0]) * other.group8())
                + (Simd32x3::from(self.group0()[1]) * other.group7())
                + (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(self.group0()[0] * other.group3()[0]) - (self.group0()[2] * other.group5()[0])),
                (-(self.group0()[0] * other.group3()[1]) - (self.group0()[2] * other.group5()[1])),
                (-(self.group0()[0] * other.group3()[2]) - (self.group0()[2] * other.group5()[2])),
                ((self.group0()[0] * other.group9()[3]) + (self.group0()[2] * other.group3()[3])),
            ]) - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[2], other[e45]]))),
            // e423, e431, e412
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                - (Simd32x3::from(self.group0()[0]) * other.group5())
                - (Simd32x3::from(self.group0()[2]) * other.group4())),
            // e235, e315, e125
            (-(Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                - (Simd32x3::from(self.group0()[1]) * other.group5())
                - (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[0] * other.group8()[0]) - (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group8()[1]) - (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group8()[2]) - (self.group0()[2] * other.group1()[2])),
                ((other.group0()[1] * self.group0()[1]) + (self.group0()[2] * other[e1])),
            ]) - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group6()[3]]))),
            // e1234
            ((other.group0()[1] * self.group0()[0]) + (self.group0()[0] * other.group6()[3]) + (self.group0()[2] * other.group1()[3])),
        );
    }
}
impl GeometricAntiProduct<Plane> for AntiTripleNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        4        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0        8        0
    //  no simd        0       20        0
    fn geometric_anti_product(self, other: Plane) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self.group0()[0]) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3])]),
            // e235, e315, e125, e5
            (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[2]]) * other.group0() * Simd32x4::from(-1.0)),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[2] * other.group0()[0]),
                (self.group0()[2] * other.group0()[1]),
                (self.group0()[2] * other.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<QuadNum> for AntiTripleNum {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        5        9        0
    //  no simd        8       12        0
    fn geometric_anti_product(self, other: QuadNum) -> Self::Output {
        return AntiQuadNum::from_groups(
            // e1234, e3215, e45, scalar
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group0()[2])),
                ((self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[3])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 3, 1, 1))),
        );
    }
}
impl GeometricAntiProduct<RoundPoint> for AntiTripleNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        7        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        2       11        0
    //  no simd        2       23        0
    fn geometric_anti_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                ((self.group0()[0] * other[e2]) + (self.group0()[1] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, ((self.group0()[0] * other[e2]) - (self.group0()[1] * other.group0()[3]))]),
            // e15, e25, e35, e1234
            (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[2]]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other[e2]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
    }
}
impl GeometricAntiProduct<Scalar> for AntiTripleNum {
    type Output = TripleNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn geometric_anti_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return TripleNum::from_groups(/* e4, e5, e12345 */ (Simd32x3::from(other[scalar]) * self.group0() * Simd32x3::from(-1.0)));
    }
}
impl GeometricAntiProduct<Sphere> for AntiTripleNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        7        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        2       11        0
    //  no simd        2       23        0
    fn geometric_anti_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (-(self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other[e4315])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, ((self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other[e4315]))]),
            // e235, e315, e125, e5
            (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[2]]) * other.group0() * Simd32x4::from(-1.0)),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other[e4315]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
    }
}
impl GeometricAntiProduct<TripleNum> for AntiTripleNum {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        9        0
    fn geometric_anti_product(self, other: TripleNum) -> Self::Output {
        return AntiQuadNum::from_groups(/* e1234, e3215, e45, scalar */ Simd32x4::from([
            ((self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
            ((self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
            ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
            ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[2])),
        ]));
    }
}
impl GeometricAntiProduct<VersorEven> for AntiTripleNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       16        0
    //    simd4        7       10        0
    // Totals...
    // yes simd       11       26        0
    //  no simd       32       56        0
    fn geometric_anti_product(self, other: VersorEven) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                + (Simd32x4::from(self.group0()[2]) * other.group0())
                + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * other.group3())),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group1()[2])),
                (-(self.group0()[1] * other.group3()[3]) - (self.group0()[2] * other.group1()[3])),
            ]) + (Simd32x4::from(self.group0()[0]) * other.group2())),
            // e15, e25, e35, e1234
            ((Simd32x4::from([
                (self.group0()[1] * other.group3()[0]),
                (self.group0()[1] * other.group3()[1]),
                (self.group0()[1] * other.group3()[2]),
                (self.group0()[0] * other.group0()[3]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                + (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]]) * other.group1())),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from([
                (self.group0()[2] * other.group3()[0]),
                (self.group0()[2] * other.group3()[1]),
                (self.group0()[2] * other.group3()[2]),
                (self.group0()[1] * other.group0()[3]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[2]]) * other.group2())),
        );
    }
}
impl GeometricAntiProduct<VersorOdd> for AntiTripleNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       12        0
    //    simd4        7       11        0
    // Totals...
    // yes simd       11       23        0
    //  no simd       32       56        0
    fn geometric_anti_product(self, other: VersorOdd) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from([
                (self.group0()[0] * other.group3()[0]),
                (self.group0()[0] * other.group3()[1]),
                (self.group0()[0] * other.group3()[2]),
                (self.group0()[1] * other.group2()[3]),
            ]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                - (Simd32x4::from(self.group0()[2]) * other.group0())),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group1()[0])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group1()[2])),
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[2] * other.group1()[3])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * other.group2())),
            // e235, e315, e125, e5
            (-(Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))
                - (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))),
            // e1, e2, e3, e4
            ((Simd32x4::from(self.group0()[2])
                * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))
                - (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]]) * other.group0())),
        );
    }
}
impl GeometricAntiProduct<VersorRoundPoint> for AntiTripleNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       24        0
    fn geometric_anti_product(self, other: VersorRoundPoint) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                ((other.group1()[0] * self.group0()[0]) + (other.group1()[1] * self.group0()[2]) + (self.group0()[1] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, ((other.group1()[0] * self.group0()[0]) - (self.group0()[1] * other.group0()[3]))]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0] * -1.0),
                (self.group0()[1] * other.group0()[1] * -1.0),
                (self.group0()[1] * other.group0()[2] * -1.0),
                ((other.group1()[1] * self.group0()[0]) + (self.group0()[2] * other.group0()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[2] * other.group0()[0] * -1.0),
                (self.group0()[2] * other.group0()[1] * -1.0),
                (self.group0()[2] * other.group0()[2] * -1.0),
                ((other.group1()[0] * self.group0()[2]) + (other.group1()[1] * self.group0()[1])),
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorSphere> for AntiTripleNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       21        0
    fn geometric_anti_product(self, other: VersorSphere) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (-(other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[2]) - (self.group0()[0] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (-(other.group1()[0] * self.group0()[1]) + (self.group0()[0] * other.group0()[3]))]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0] * -1.0),
                (self.group0()[1] * other.group0()[1] * -1.0),
                (self.group0()[1] * other.group0()[2] * -1.0),
                (-(other.group1()[1] * self.group0()[1]) - (self.group0()[2] * other.group0()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[2] * other.group0()[0]),
                (self.group0()[2] * other.group0()[1]),
                (self.group0()[2] * other.group0()[2]),
                (-(other.group1()[0] * self.group0()[2]) - (other.group1()[1] * self.group0()[0])),
            ]),
        );
    }
}
impl InfixGeometricAntiProduct for Circle {}
impl GeometricAntiProduct<AntiCircleRotor> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       54       70        0
    //    simd4       10       10        0
    // Totals...
    // yes simd       64       80        0
    //  no simd       94      110        0
    fn geometric_anti_product(self, other: AntiCircleRotor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[2] * self.group1()[1]) + (self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group1()[2])),
                ((other.group0()[0] * self.group1()[2]) + (self.group0()[1] * other.group2()[3]) + (self.group0()[2] * other.group1()[0])),
                ((other.group0()[1] * self.group1()[0]) + (self.group0()[0] * other.group1()[1]) + (self.group0()[2] * other.group2()[3])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[2], other.group1()[1]]) * swizzle!(self.group1(), 2, 0, 3, 1))
                - (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group1()[2]]) * swizzle!(other.group1(), 3, 2, 0, 2))
                - (Simd32x4::from([self.group0()[2], self.group0()[1], self.group0()[2], self.group1()[3]]) * swizzle!(other.group1(), 1, 3, 3, 3))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[1])
                    + (self.group0()[1] * other.group2()[2])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group2()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group2()[0])
                    + (self.group0()[2] * other.group2()[0])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group2()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[1])
                    + (other.group0()[1] * self.group2()[0])
                    + (self.group0()[0] * other.group2()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group2()[3] * self.group1()[2])),
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group2()[0] * other.group1()[3])
                    + (self.group2()[0] * other.group2()[3])
                    + (self.group2()[1] * other.group1()[2])
                    + (other.group2()[0] * self.group1()[3])
                    + (other.group2()[2] * self.group1()[1])),
                ((self.group2()[1] * other.group1()[3])
                    + (self.group2()[1] * other.group2()[3])
                    + (self.group2()[2] * other.group1()[0])
                    + (other.group2()[0] * self.group1()[2])
                    + (other.group2()[1] * self.group1()[3])),
                ((self.group2()[0] * other.group1()[1])
                    + (self.group2()[2] * other.group1()[3])
                    + (self.group2()[2] * other.group2()[3])
                    + (other.group2()[1] * self.group1()[0])
                    + (other.group2()[2] * self.group1()[3])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1]) + (self.group0()[1] * other.group2()[2]) + (other.group1()[3] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[0])
                    + (self.group0()[2] * other.group2()[0])
                    + (other.group1()[3] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) + (self.group0()[0] * other.group2()[1]) + (other.group1()[3] * self.group1()[2])),
                (-(self.group2()[1] * other.group1()[1])
                    - (self.group2()[2] * other.group1()[2])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[0]]) * swizzle!(other.group1(), 0, 1, 2, 0))),
        );
    }
}
impl GeometricAntiProduct<AntiDipoleInversion> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       66       82        0
    //    simd4       17       17        0
    // Totals...
    // yes simd       83       99        0
    //  no simd      134      150        0
    fn geometric_anti_product(self, other: AntiDipoleInversion) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) + (self.group0()[1] * other.group3()[2]) - (self.group0()[2] * other.group3()[1])
                    + (other.group2()[3] * self.group1()[0])),
                (-(self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group0()[2] * other.group3()[0])
                    + (other.group2()[3] * self.group1()[1])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (other.group2()[3] * self.group1()[2])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[2], other.group1()[1]]) * swizzle!(self.group1(), 2, 0, 3, 1))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]) * swizzle!(self.group1(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]) * swizzle!(other.group1(), 1, 2, 0, 2))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1]) + (self.group0()[0] * other.group3()[3])
                    - (self.group0()[2] * other.group2()[1])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group3()[0] * self.group1()[3])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group2()[0]) - (self.group0()[0] * other.group2()[2])
                    + (self.group0()[1] * other.group3()[3])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group3()[1] * self.group1()[3])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) - (self.group0()[1] * other.group2()[0])
                    + (self.group0()[2] * other.group3()[3])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group3()[2] * self.group1()[3])),
                (-(other.group0()[0] * self.group2()[0]) - (other.group0()[1] * self.group2()[1]) - (other.group0()[2] * self.group2()[2])
                    + (self.group0()[2] * other.group2()[2])
                    - (other.group3()[1] * self.group1()[1])
                    - (other.group3()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group2(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group2()[1] * other.group1()[2]) + (other.group2()[2] * self.group1()[1])),
                ((self.group2()[2] * other.group1()[0]) + (other.group2()[1] * self.group1()[3])),
                ((self.group2()[0] * other.group1()[1]) + (other.group2()[2] * self.group1()[3])),
                ((self.group2()[2] * other.group3()[2]) - (other.group2()[1] * self.group1()[1]) - (other.group2()[2] * self.group1()[2])),
            ]) - (Simd32x4::from(self.group2()[0]) * Simd32x4::from([other.group1()[3], other.group1()[2], other.group3()[1], other.group1()[0]]))
                - (Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group3()[2], other.group1()[3], other.group1()[0], other.group1()[1]]))
                - (Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[3], other.group1()[2]]))
                + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group2()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group2()[0], other.group2()[0], other.group2()[1], other.group3()[3]]) * swizzle!(self.group1(), 3, 2, 0, 3))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[1]]) * swizzle!(other.group3(), 3, 3, 3, 1))
                - (swizzle!(other.group2(), 1, 2, 0, 0) * swizzle!(self.group1(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[1])
                    + (self.group0()[2] * other.group2()[1])
                    + (self.group2()[0] * other.group2()[3])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[0])
                    + (other.group3()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group2()[0])
                    + (self.group0()[0] * other.group2()[2])
                    + (self.group2()[1] * other.group2()[3])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[1])
                    + (other.group3()[0] * self.group1()[2])),
                (-(other.group0()[0] * self.group2()[1])
                    + (other.group0()[1] * self.group2()[0])
                    + (self.group0()[1] * other.group2()[0])
                    + (self.group2()[2] * other.group2()[3])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])
                    + (other.group3()[1] * self.group1()[0])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[3]]) * swizzle!(other.group2(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum321> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       17        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        6       19        0
    //  no simd        6       25        0
    fn geometric_anti_product(self, other: AntiDualNum321) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[2])),
                (other.group0()[0] * self.group1()[3] * -1.0),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from(other.group0()[1]) * self.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group2()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group2()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group1()[0]),
                (other.group0()[0] * self.group1()[1]),
                (other.group0()[0] * self.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum4> for Circle {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       18        0
    //    simd3        1        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        4       21        0
    //  no simd        6       28        0
    fn geometric_anti_product(self, other: AntiDualNum4) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]])) + (Simd32x3::from(other.group0()[1]) * self.group0())),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (other.group0()[1] * self.group2()[0]),
                (other.group0()[1] * self.group2()[1]),
                (other.group0()[1] * self.group2()[2]),
                (other.group0()[0] * self.group1()[3]),
            ]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group2()[0] * -1.0),
                (other.group0()[0] * self.group2()[1] * -1.0),
                (other.group0()[0] * self.group2()[2] * -1.0),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum5> for Circle {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       14        0
    //    simd3        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        6       16        0
    //  no simd        6       21        0
    fn geometric_anti_product(self, other: AntiDualNum5) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other.group0()[1]) * self.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group1()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group2()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group2()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group2()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])),
        );
    }
}
impl GeometricAntiProduct<AntiFlatPoint> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       32        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       16       35        0
    //  no simd       25       44        0
    fn geometric_anti_product(self, other: AntiFlatPoint) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (other.group0()[3] * self.group1()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group0()[1]) * -1.0),
                ((self.group0()[0] * other.group0()[2]) * -1.0),
                ((self.group0()[1] * other.group0()[0]) * -1.0),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group1()[3])),
                ((other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group1()[3])),
                ((other.group0()[2] * self.group1()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                - (swizzle!(other.group0(), 1, 2, 0, 1) * swizzle!(self.group1(), 2, 0, 1, 1))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1]) + (other.group0()[3] * self.group1()[0])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0]) + (other.group0()[3] * self.group1()[1])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) + (other.group0()[3] * self.group1()[2])),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiFlector> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       45        0
    //    simd4        9        9        0
    // Totals...
    // yes simd       37       54        0
    //  no simd       64       81        0
    fn geometric_anti_product(self, other: AntiFlector) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[2] * other.group0()[1]) + (other.group1()[0] * self.group1()[3])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group1()[3]) + (other.group1()[1] * self.group1()[3])),
                (-(self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group1()[3]) + (other.group1()[2] * self.group1()[3])),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group2()[1] * other.group1()[2]) + (other.group0()[2] * self.group1()[1])),
                (-(self.group2()[2] * other.group1()[0]) + (other.group0()[1] * self.group1()[3])),
                (-(self.group2()[0] * other.group1()[1]) + (other.group0()[2] * self.group1()[3])),
                ((self.group2()[2] * other.group1()[2]) - (other.group0()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group2()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group1()[3]]) * swizzle!(self.group1(), 3, 2, 0, 3))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                - (swizzle!(other.group0(), 1, 2, 0, 1) * swizzle!(self.group1(), 2, 0, 1, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2])
                    + (self.group0()[2] * other.group0()[1])
                    + (other.group0()[3] * self.group1()[0])
                    + (other.group1()[2] * self.group1()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0]) + (other.group0()[3] * self.group1()[1]) + (other.group1()[0] * self.group1()[2])),
                (-(self.group0()[0] * other.group0()[1])
                    + (self.group0()[1] * other.group0()[0])
                    + (other.group0()[3] * self.group1()[2])
                    + (other.group1()[1] * self.group1()[0])),
                ((self.group0()[2] * other.group1()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))),
        );
    }
}
impl GeometricAntiProduct<AntiLine> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       56        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       41       57        0
    //  no simd       44       60        0
    fn geometric_anti_product(self, other: AntiLine) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])),
                (-(other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1]) + (other.group1()[0] * self.group1()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group2()[0]) + (other.group1()[0] * self.group1()[2]) + (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group1()[3])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1])),
                ((other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])),
                (-(other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))),
        );
    }
}
impl GeometricAntiProduct<AntiMotor> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       52        0
    //    simd4        7        7        0
    // Totals...
    // yes simd       43       59        0
    //  no simd       64       80        0
    fn geometric_anti_product(self, other: AntiMotor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) + (other.group0()[2] * self.group1()[1]) + (other.group0()[3] * self.group1()[0])),
                ((self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group1()[0]) + (other.group0()[0] * self.group1()[2]) + (other.group0()[3] * self.group1()[1])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[2] * other.group1()[3]) + (other.group0()[1] * self.group1()[0]) + (other.group0()[3] * self.group1()[2])),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (swizzle!(other.group0(), 1, 2, 0, 3) * swizzle!(self.group1(), 2, 0, 1, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group2()[0] * other.group0()[3]) + (self.group2()[1] * other.group0()[2]) + (other.group1()[0] * self.group1()[3]) - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group1()[3] * self.group1()[0])),
                ((self.group2()[1] * other.group0()[3]) + (self.group2()[2] * other.group0()[0]) + (other.group1()[0] * self.group1()[2]) + (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group1()[0])
                    + (other.group1()[3] * self.group1()[1])),
                ((self.group2()[0] * other.group0()[1]) + (self.group2()[2] * other.group0()[3]) - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (self.group0()[1] * other.group1()[2]),
                (self.group0()[2] * other.group1()[0]),
                (self.group0()[2] * other.group1()[3]),
                (-(self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group1()[3]]) * swizzle!(other.group1(), 3, 3, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[0]]) * swizzle!(other.group0(), 0, 1, 2, 0))),
        );
    }
}
impl GeometricAntiProduct<AntiPlane> for Circle {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       26        0
    //    simd3        1        2        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       17       30        0
    //  no simd       25       40        0
    fn geometric_anti_product(self, other: AntiPlane) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (-(Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0))),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (other.group0()[0] * self.group1()[3])),
                ((self.group0()[1] * other.group0()[3]) + (other.group0()[1] * self.group1()[3])),
                ((self.group0()[2] * other.group0()[3]) + (other.group0()[2] * self.group1()[3])),
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])),
            ]),
            // e235, e315, e125, e4
            (Simd32x4::from([
                ((self.group2()[2] * other.group0()[1]) + (other.group0()[3] * self.group1()[0])),
                ((self.group2()[0] * other.group0()[2]) + (other.group0()[3] * self.group1()[1])),
                ((self.group2()[1] * other.group0()[0]) + (other.group0()[3] * self.group1()[2])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (other.group0()[1] * self.group1()[2])),
                (-(self.group0()[1] * other.group0()[3]) - (other.group0()[2] * self.group1()[0])),
                (-(self.group0()[2] * other.group0()[3]) - (other.group0()[0] * self.group1()[1])),
                ((self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2]) + (other.group0()[3] * self.group1()[3])),
            ]) + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
        );
    }
}
impl GeometricAntiProduct<AntiQuadNum> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       24       43        0
    fn geometric_anti_product(self, other: AntiQuadNum) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[0] * other.group0()[3]) + (other.group0()[0] * self.group1()[0])),
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[1] * other.group0()[3]) + (other.group0()[0] * self.group1()[1])),
                (-(self.group0()[2] * other.group0()[2]) + (self.group0()[2] * other.group0()[3]) + (other.group0()[0] * self.group1()[2])),
                (other.group0()[2] * self.group1()[3] * -1.0),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[1]) + (self.group2()[0] * other.group0()[0]) + (other.group0()[3] * self.group1()[0])),
                ((self.group0()[1] * other.group0()[1]) + (self.group2()[1] * other.group0()[0]) + (other.group0()[3] * self.group1()[1])),
                ((self.group0()[2] * other.group0()[1]) + (self.group2()[2] * other.group0()[0]) + (other.group0()[3] * self.group1()[2])),
                (other.group0()[3] * self.group1()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group2()[0] * other.group0()[2]) + (self.group2()[0] * other.group0()[3]) + (other.group0()[1] * self.group1()[0])),
                ((self.group2()[1] * other.group0()[2]) + (self.group2()[1] * other.group0()[3]) + (other.group0()[1] * self.group1()[1])),
                ((self.group2()[2] * other.group0()[2]) + (self.group2()[2] * other.group0()[3]) + (other.group0()[1] * self.group1()[2])),
                (other.group0()[0] * self.group1()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[1]) - (self.group2()[0] * other.group0()[0]) + (other.group0()[2] * self.group1()[0])),
                ((self.group0()[1] * other.group0()[1]) - (self.group2()[1] * other.group0()[0]) + (other.group0()[2] * self.group1()[1])),
                ((self.group0()[2] * other.group0()[1]) - (self.group2()[2] * other.group0()[0]) + (other.group0()[2] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3]),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiScalar> for Circle {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0       10        0
    fn geometric_anti_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return Circle::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other[e12345]) * self.group0()),
            // e415, e425, e435, e321
            (Simd32x4::from(other[e12345]) * self.group1()),
            // e235, e315, e125
            (Simd32x3::from(other[e12345]) * self.group2()),
        );
    }
}
impl GeometricAntiProduct<AntiTripleNum> for Circle {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       26        0
    //    simd3        1        2        0
    // Totals...
    // yes simd       13       28        0
    //  no simd       15       32        0
    fn geometric_anti_product(self, other: AntiTripleNum) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]])) + (Simd32x3::from(other.group0()[2]) * self.group0())),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group1()[2])),
                (other.group0()[2] * self.group1()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group2()[0])),
                ((other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group2()[1])),
                ((other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group2()[2])),
                (other.group0()[0] * self.group1()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group0()[1])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group0()[2])),
                (other.group0()[1] * self.group1()[3]),
            ]),
        );
    }
}
impl GeometricAntiProduct<Circle> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       72        0
    //    simd4        7        7        0
    // Totals...
    // yes simd       63       79        0
    //  no simd       84      100        0
    fn geometric_anti_product(self, other: Circle) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2])),
                ((self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[2] * other.group1()[3])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[2], other.group1()[1]]) * swizzle!(self.group1(), 2, 0, 3, 1))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]) * swizzle!(self.group1(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]) * swizzle!(other.group1(), 1, 2, 0, 2))),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1]) - (other.group2()[1] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[1])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group2()[0]) + (other.group2()[0] * self.group0()[2]) - (other.group2()[2] * self.group0()[0])
                    + (other.group1()[0] * self.group1()[2])
                    - (other.group1()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) - (other.group2()[0] * self.group0()[1])
                    + (other.group2()[1] * self.group0()[0])
                    - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[0]) - (other.group0()[1] * self.group2()[1]) - (other.group0()[2] * self.group2()[2])
                    + (other.group2()[0] * self.group0()[0])
                    + (other.group2()[1] * self.group0()[1])
                    + (other.group2()[2] * self.group0()[2])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group2()[0] * self.group1()[3]) + (other.group2()[2] * self.group1()[1]) + (self.group2()[1] * other.group1()[2])),
                ((other.group2()[0] * self.group1()[2]) + (other.group2()[1] * self.group1()[3]) + (self.group2()[2] * other.group1()[0])),
                ((other.group2()[1] * self.group1()[0]) + (other.group2()[2] * self.group1()[3]) + (self.group2()[0] * other.group1()[1])),
                (-(other.group2()[1] * self.group1()[1]) - (other.group2()[2] * self.group1()[2]) - (self.group2()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group2()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[0], self.group2()[0], self.group2()[1], self.group2()[0]]) * swizzle!(other.group1(), 3, 2, 0, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[1], self.group2()[2], self.group2()[1]]) * swizzle!(other.group1(), 1, 3, 3, 1))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1]) + (other.group2()[1] * self.group0()[2])
                    - (other.group2()[2] * self.group0()[1])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group2()[0]) - (other.group2()[0] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[0])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) + (other.group2()[0] * self.group0()[1])
                    - (other.group2()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<CircleRotor> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       58       74        0
    //    simd4        9        9        0
    // Totals...
    // yes simd       67       83        0
    //  no simd       94      110        0
    fn geometric_anti_product(self, other: CircleRotor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group1()[2]) + (other.group0()[2] * self.group1()[1])),
                ((self.group0()[1] * other.group2()[3]) + (self.group0()[2] * other.group1()[0]) + (other.group0()[0] * self.group1()[2])),
                ((self.group0()[2] * other.group1()[3]) + (self.group0()[2] * other.group2()[3]) + (other.group0()[1] * self.group1()[0])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group1()[3]]) * swizzle!(other.group1(), 3, 3, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group1()[1]]) * swizzle!(self.group1(), 3, 3, 1, 1))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[2], other.group1()[2]]) * swizzle!(self.group1(), 2, 0, 3, 2))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(self.group0()[2] * other.group2()[1]) + (self.group2()[1] * other.group0()[2]) - (self.group2()[2] * other.group0()[1])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[2]) - (self.group2()[0] * other.group0()[2]) + (self.group2()[2] * other.group0()[0])
                    - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[2] * other.group1()[0])),
                (-(self.group0()[1] * other.group2()[0]) + (self.group2()[0] * other.group0()[1])
                    - (self.group2()[1] * other.group0()[0])
                    - (self.group1()[1] * other.group1()[0])
                    + (self.group1()[2] * other.group2()[3])),
                ((self.group0()[1] * other.group2()[1]) + (self.group0()[2] * other.group2()[2])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group1()[1], other.group2()[3]]) * swizzle!(self.group1(), 0, 1, 0, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group2()[0] * other.group2()[3]) + (self.group2()[1] * other.group1()[2]) + (self.group1()[1] * other.group2()[2]) + (self.group1()[3] * other.group2()[0])),
                ((self.group2()[1] * other.group2()[3]) + (self.group2()[2] * other.group1()[0]) + (self.group1()[2] * other.group2()[0]) + (self.group1()[3] * other.group2()[1])),
                ((self.group2()[0] * other.group1()[1]) + (self.group2()[2] * other.group2()[3]) + (self.group1()[0] * other.group2()[1]) + (self.group1()[3] * other.group2()[2])),
                (-(self.group2()[2] * other.group1()[2]) - (self.group1()[1] * other.group2()[1]) - (self.group1()[2] * other.group2()[2])),
            ]) - (Simd32x4::from([self.group2()[0], self.group2()[0], self.group2()[1], self.group2()[0]]) * swizzle!(other.group1(), 3, 2, 0, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[1], self.group2()[2], self.group2()[1]]) * swizzle!(other.group1(), 1, 3, 3, 1))
                - (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group2(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[1] * other.group2()[2]) + (self.group0()[2] * other.group2()[1]) + (self.group2()[1] * other.group0()[2])
                    - (self.group2()[2] * other.group0()[1])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[2] * other.group2()[0]) - (self.group2()[0] * other.group0()[2])
                    + (self.group2()[2] * other.group0()[0])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[0]) + (self.group2()[0] * other.group0()[1])
                    - (self.group2()[1] * other.group0()[0])
                    + (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Dipole> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       72        0
    //    simd4        7        7        0
    // Totals...
    // yes simd       63       79        0
    //  no simd       84      100        0
    fn geometric_anti_product(self, other: Dipole) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) + (other.group0()[2] * self.group1()[1])),
                ((self.group0()[2] * other.group1()[0]) + (other.group0()[0] * self.group1()[2])),
                ((self.group0()[0] * other.group1()[1]) + (other.group0()[1] * self.group1()[0])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 3, 2, 0, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group1(), 1, 3, 3, 1))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group1()[2]]) * swizzle!(self.group1(), 3, 3, 1, 2))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[2], other.group1()[3]]) * swizzle!(self.group1(), 2, 0, 3, 3))),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1]) + (self.group2()[1] * other.group0()[2]) - (self.group2()[2] * other.group0()[1])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[2] * other.group2()[0]) - (self.group2()[0] * other.group0()[2])
                    + (self.group2()[2] * other.group0()[0])
                    - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) + (self.group2()[0] * other.group0()[1]) - (self.group2()[1] * other.group0()[0])
                    + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])
                    + (self.group2()[0] * other.group0()[0])
                    + (self.group2()[1] * other.group0()[1])
                    + (self.group2()[2] * other.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group2()[0] * other.group1()[3]) + (self.group2()[1] * other.group1()[2]) + (other.group2()[0] * self.group1()[3]) + (other.group2()[2] * self.group1()[1])),
                ((self.group2()[1] * other.group1()[3]) + (self.group2()[2] * other.group1()[0]) + (other.group2()[0] * self.group1()[2]) + (other.group2()[1] * self.group1()[3])),
                ((self.group2()[0] * other.group1()[1]) + (self.group2()[2] * other.group1()[3]) + (other.group2()[1] * self.group1()[0]) + (other.group2()[2] * self.group1()[3])),
                (-(self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1]) - (self.group2()[1] * other.group0()[2])
                    + (self.group2()[2] * other.group0()[1])
                    + (self.group1()[0] * other.group1()[3])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[2] * other.group2()[0]) + (self.group2()[0] * other.group0()[2])
                    - (self.group2()[2] * other.group0()[0])
                    + (self.group1()[1] * other.group1()[3])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) - (self.group2()[0] * other.group0()[1])
                    + (self.group2()[1] * other.group0()[0])
                    + (self.group1()[2] * other.group1()[3])),
                (-(self.group2()[1] * other.group1()[1])
                    - (self.group2()[2] * other.group1()[2])
                    - (other.group2()[0] * self.group1()[0])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[0]]) * swizzle!(other.group1(), 0, 1, 2, 0))),
        );
    }
}
impl GeometricAntiProduct<DipoleInversion> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       66       82        0
    //    simd4       17       17        0
    // Totals...
    // yes simd       83       99        0
    //  no simd      134      150        0
    fn geometric_anti_product(self, other: DipoleInversion) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group3()[1]) + (other.group0()[2] * self.group1()[1]) + (self.group1()[0] * other.group2()[3])),
                ((self.group0()[0] * other.group3()[2]) + (self.group0()[2] * other.group1()[0]) + (other.group0()[0] * self.group1()[2]) + (self.group1()[1] * other.group2()[3])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group3()[0]) + (other.group0()[1] * self.group1()[0]) + (self.group1()[2] * other.group2()[3])),
                (-(self.group2()[0] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]) - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group1()[2], other.group3()[1], other.group2()[0]]))
                - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group3()[2], other.group1()[3], other.group1()[0], other.group2()[1]]))
                - (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[3], other.group2()[2]]))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[2], other.group1()[1]]) * swizzle!(self.group1(), 2, 0, 3, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group2()[2]) + (self.group2()[0] * other.group2()[3]) + (self.group2()[1] * other.group0()[2])
                    - (self.group2()[2] * other.group0()[1])
                    + (self.group1()[1] * other.group1()[2])),
                ((self.group0()[1] * other.group3()[3]) + (self.group0()[2] * other.group2()[0]) - (self.group2()[0] * other.group0()[2])
                    + (self.group2()[1] * other.group2()[3])
                    + (self.group2()[2] * other.group0()[0])
                    + (self.group1()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[2] * other.group3()[3]) + (self.group2()[0] * other.group0()[1]) - (self.group2()[1] * other.group0()[0])
                    + (self.group2()[2] * other.group2()[3])
                    + (self.group1()[0] * other.group1()[1])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])
                    + (self.group2()[0] * other.group0()[0])
                    + (self.group2()[1] * other.group0()[1])
                    + (self.group2()[2] * other.group0()[2])
                    - (self.group1()[2] * other.group3()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group3(), 0, 1, 2, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group2()[0] * other.group1()[3]) + (self.group2()[1] * other.group1()[2]) - (self.group2()[2] * other.group3()[1])
                    + (self.group1()[1] * other.group2()[2])
                    + (self.group1()[3] * other.group2()[0])),
                (-(self.group2()[0] * other.group3()[2])
                    + (self.group2()[1] * other.group1()[3])
                    + (self.group2()[2] * other.group1()[0])
                    + (self.group1()[2] * other.group2()[0])
                    + (self.group1()[3] * other.group2()[1])),
                ((self.group2()[0] * other.group1()[1]) - (self.group2()[1] * other.group3()[0])
                    + (self.group2()[2] * other.group1()[3])
                    + (self.group1()[0] * other.group2()[1])
                    + (self.group1()[3] * other.group2()[2])),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2]) + (self.group0()[2] * other.group3()[2])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group1()[3] * other.group2()[3])),
            ]) + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group3(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[1]]) * swizzle!(other.group3(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) - (self.group2()[1] * other.group0()[2])
                    + (self.group2()[2] * other.group0()[1])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group3()[2])),
                ((self.group0()[2] * other.group2()[0]) + (self.group2()[0] * other.group0()[2]) - (self.group2()[2] * other.group0()[0])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group3()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group2()[0] * other.group0()[1])
                    + (self.group2()[1] * other.group0()[0])
                    + (self.group1()[0] * other.group3()[1])
                    + (self.group1()[2] * other.group1()[3])),
                (-(self.group2()[1] * other.group1()[1])
                    - (self.group2()[1] * other.group3()[1])
                    - (self.group2()[2] * other.group1()[2])
                    - (self.group2()[2] * other.group3()[2])
                    - (self.group1()[2] * other.group2()[2])),
            ]) + (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[1]]) * swizzle!(other.group2(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[0]]) * swizzle!(other.group1(), 0, 1, 2, 0))),
        );
    }
}
impl GeometricAntiProduct<DualNum321> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       16        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        6       17        0
    //  no simd        6       20        0
    fn geometric_anti_product(self, other: DualNum321) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[2])),
                (other.group0()[0] * self.group1()[3]),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from(other.group0()[1]) * self.group1()),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group2()[0])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[1])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group2()[2])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[0] * self.group1()[0]),
                (other.group0()[0] * self.group1()[1]),
                (other.group0()[0] * self.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<DualNum4> for Circle {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       14        0
    //    simd3        1        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        4       17        0
    //  no simd        6       24        0
    fn geometric_anti_product(self, other: DualNum4) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            ((Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]])) + (Simd32x3::from(other.group0()[1]) * self.group0())),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3]),
            ]),
            // e235, e315, e125, e4
            (Simd32x4::from([
                (other.group0()[1] * self.group2()[0]),
                (other.group0()[1] * self.group2()[1]),
                (other.group0()[1] * self.group2()[2]),
                (other.group0()[0] * self.group1()[3]),
            ]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[0] * self.group2()[0]),
                (other.group0()[0] * self.group2()[1]),
                (other.group0()[0] * self.group2()[2]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<DualNum5> for Circle {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       13        0
    //    simd3        0        1        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        6       16        0
    //  no simd        6       24        0
    fn geometric_anti_product(self, other: DualNum5) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other.group0()[1]) * self.group0()),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group1()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group2()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group2()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group2()[2])),
                0.0,
            ]),
            // e1, e2, e3, e5
            (Simd32x4::from(other.group0()[0])
                * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
    }
}
impl GeometricAntiProduct<FlatPoint> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       35        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       19       37        0
    //  no simd       25       43        0
    fn geometric_anti_product(self, other: FlatPoint) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[2] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group2()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1]) + (self.group1()[3] * other.group0()[0])),
                ((self.group2()[1] * other.group0()[3]) - (self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0]) + (self.group1()[3] * other.group0()[1])),
                ((self.group2()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0]) + (self.group1()[3] * other.group0()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) + (self.group1()[0] * other.group0()[3])),
                ((self.group0()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[1]) + (self.group1()[2] * other.group0()[3])),
                (-(self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<Flector> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       48        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       40       56        0
    //  no simd       64       80        0
    fn geometric_anti_product(self, other: Flector) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other.group0()[3])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[2])),
                ((self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[2] * other.group1()[3])),
                (-(self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (swizzle!(self.group1(), 3, 3, 3, 0) * swizzle!(other.group1(), 0, 1, 2, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group2()[0] * other.group0()[3]) - (self.group2()[2] * other.group1()[1]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])
                    + (self.group1()[3] * other.group0()[0])),
                (-(self.group2()[0] * other.group1()[2]) + (self.group2()[1] * other.group0()[3]) - (self.group1()[0] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[0])
                    + (self.group1()[3] * other.group0()[1])),
                (-(self.group2()[1] * other.group1()[0]) + (self.group2()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1])
                    - (self.group1()[1] * other.group0()[0])
                    + (self.group1()[3] * other.group0()[2])),
                (self.group0()[2] * other.group1()[2]),
            ]) + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) + (self.group1()[0] * other.group0()[3]) + (self.group1()[1] * other.group1()[2])),
                ((self.group0()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3]) + (self.group1()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group1()[0] * other.group1()[1]) + (self.group1()[2] * other.group0()[3])),
                (-(self.group2()[1] * other.group1()[1])
                    - (self.group2()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<Line> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       56        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       41       57        0
    //  no simd       44       60        0
    fn geometric_anti_product(self, other: Line) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0]) + (other.group0()[0] * self.group1()[2])
                    - (other.group0()[2] * self.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) - (other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0])),
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1]) + (self.group0()[2] * other.group1()[2])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group2()[1] * other.group0()[2]) - (self.group2()[2] * other.group0()[1]) + (other.group1()[0] * self.group1()[3]) + (other.group1()[2] * self.group1()[1])),
                (-(self.group2()[0] * other.group0()[2])
                    + (self.group2()[2] * other.group0()[0])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group1()[3])),
                ((self.group2()[0] * other.group0()[1]) - (self.group2()[1] * other.group0()[0]) + (other.group1()[1] * self.group1()[0]) + (other.group1()[2] * self.group1()[3])),
                (-(self.group2()[0] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1]) + (other.group0()[0] * self.group1()[3])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0]) + (other.group0()[1] * self.group1()[3])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) + (other.group0()[2] * self.group1()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Motor> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       52        0
    //    simd4        7        7        0
    // Totals...
    // yes simd       43       59        0
    //  no simd       64       80        0
    fn geometric_anti_product(self, other: Motor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(self.group0()[2] * other.group1()[1]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[2]) - (self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[1] * other.group1()[0]) - (self.group1()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[3])),
                (self.group0()[2] * other.group1()[2]),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group0()[0]]) * swizzle!(other.group1(), 3, 3, 1, 0))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[2], self.group0()[1]]) * swizzle!(other.group1(), 2, 0, 3, 1))
                + (swizzle!(self.group1(), 0, 1, 0, 3) * swizzle!(other.group0(), 3, 3, 1, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group2()[0] * other.group0()[3]) + (self.group2()[1] * other.group0()[2]) + (self.group1()[1] * other.group1()[2]) + (self.group1()[3] * other.group1()[0])),
                ((self.group2()[1] * other.group0()[3]) + (self.group2()[2] * other.group0()[0]) + (self.group1()[2] * other.group1()[0]) + (self.group1()[3] * other.group1()[1])),
                ((self.group2()[0] * other.group0()[1]) + (self.group2()[2] * other.group0()[3]) + (self.group1()[2] * other.group1()[3]) + (self.group1()[3] * other.group1()[2])),
                (-(self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (swizzle!(self.group1(), 0, 1, 0, 3) * swizzle!(other.group1(), 3, 3, 1, 3))
                - (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[1])
                    + (self.group1()[3] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group1()[0]) + (self.group1()[3] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group0()[2])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<MultiVector> for Circle {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      126      144        0
    //    simd2        9       11        0
    //    simd3       36       40        0
    //    simd4        9        9        0
    // Totals...
    // yes simd      180      204        0
    //  no simd      288      322        0
    fn geometric_anti_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from(self.group1()[3]) * Simd32x2::from([other.group3()[3], other.group6()[3]]) * Simd32x2::from([-1.0, 1.0]))
                - (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group3()[0], other.group8()[0]]))
                - (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group3()[1], other.group8()[1]]))
                - (Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group3()[2], other.group8()[2]]))
                - (Simd32x2::from(self.group2()[0]) * Simd32x2::from([other.group4()[0], other.group7()[0]]))
                - (Simd32x2::from(self.group2()[1]) * Simd32x2::from([other.group4()[1], other.group7()[1]]))
                - (Simd32x2::from(self.group2()[2]) * Simd32x2::from([other.group4()[2], other.group7()[2]]))
                - (Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group5()[0], other.group6()[0]]))
                - (Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group5()[1], other.group6()[1]]))
                - (Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group5()[2], other.group6()[2]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(self.group0()[0] * other[e1]) - (self.group0()[1] * other.group8()[2])
                    + (self.group0()[2] * other.group8()[1])
                    + (self.group2()[0] * other.group1()[3])
                    + (self.group2()[1] * other.group7()[2])
                    - (self.group2()[2] * other.group7()[1])
                    + (self.group1()[0] * other.group6()[3])
                    + (self.group1()[1] * other.group1()[2])
                    + (self.group1()[3] * other.group6()[0])),
                ((self.group0()[0] * other.group8()[2]) - (self.group0()[1] * other[e1]) - (self.group0()[2] * other.group8()[0]) - (self.group2()[0] * other.group7()[2])
                    + (self.group2()[1] * other.group1()[3])
                    + (self.group2()[2] * other.group7()[0])
                    + (self.group1()[1] * other.group6()[3])
                    + (self.group1()[2] * other.group1()[0])
                    + (self.group1()[3] * other.group6()[1])),
                (-(self.group0()[0] * other.group8()[1]) + (self.group0()[1] * other.group8()[0]) - (self.group0()[2] * other[e1]) + (self.group2()[0] * other.group7()[1])
                    - (self.group2()[1] * other.group7()[0])
                    + (self.group2()[2] * other.group1()[3])
                    + (self.group1()[0] * other.group1()[1])
                    + (self.group1()[2] * other.group6()[3])
                    + (self.group1()[3] * other.group6()[2])),
                (-(self.group0()[0] * other.group6()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[1] * other.group6()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group6()[2])
                    - (other.group7()[0] * self.group1()[0])
                    - (other.group7()[1] * self.group1()[1])
                    - (other.group7()[2] * self.group1()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e5
            ((self.group2()[0] * other.group1()[0]) - (self.group2()[0] * other.group6()[0]) + (self.group2()[1] * other.group1()[1]) - (self.group2()[1] * other.group6()[1])
                + (self.group2()[2] * other.group1()[2])
                - (self.group2()[2] * other.group6()[2])
                - (other.group8()[0] * self.group1()[0])
                - (other.group8()[1] * self.group1()[1])
                - (other.group8()[2] * self.group1()[2])
                + (self.group1()[3] * other[e1])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) + (self.group2()[0] * other.group3()[3]) + (self.group2()[1] * other.group5()[2]) + (self.group2()[1] * other.group9()[2])
                    - (self.group2()[2] * other.group5()[1])
                    + (self.group1()[0] * other.group9()[3])
                    + (self.group1()[1] * other.group3()[2])
                    + (self.group1()[3] * other.group3()[0])),
                ((other.group0()[0] * self.group2()[1]) - (self.group2()[0] * other.group5()[2])
                    + (self.group2()[1] * other.group3()[3])
                    + (self.group2()[2] * other.group5()[0])
                    + (self.group2()[2] * other.group9()[0])
                    + (self.group1()[1] * other.group9()[3])
                    + (self.group1()[2] * other.group3()[0])
                    + (self.group1()[3] * other.group3()[1])),
                ((other.group0()[0] * self.group2()[2]) + (self.group2()[0] * other.group5()[1]) + (self.group2()[0] * other.group9()[1]) - (self.group2()[1] * other.group5()[0])
                    + (self.group2()[2] * other.group3()[3])
                    + (self.group1()[0] * other.group3()[1])
                    + (self.group1()[2] * other.group9()[3])
                    + (self.group1()[3] * other.group3()[2])),
                (-(self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group3()[1]) - (self.group0()[2] * other.group3()[2])
                    + (self.group2()[0] * other.group4()[0])
                    + (self.group2()[1] * other.group4()[1])
                    + (self.group2()[2] * other.group4()[2])
                    - (self.group1()[1] * other.group9()[1])
                    - (self.group1()[2] * other.group9()[2])),
            ]) - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[0]]) * swizzle!(other.group9(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 3))),
            // e41, e42, e43
            ((Simd32x3::from(other.group0()[0]) * self.group0())
                - (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group3()[3], other.group5()[2], other.group9()[1]]))
                - (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group9()[2], other.group3()[3], other.group5()[0]]))
                - (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group5()[1], other.group9()[0], other.group3()[3]]))
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from([other.group5()[2], other.group9()[2], other.group5()[1]]) * swizzle!(self.group0(), 1, 0, 0))
                + (Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]) * swizzle!(other.group4(), 2, 0, 1))
                - (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[3]]) * swizzle!(other.group4(), 1, 2, 2))
                - (Simd32x3::from([self.group1()[3], self.group1()[3], self.group1()[1]]) * swizzle!(other.group4(), 0, 1, 0))
                + (Simd32x3::from([other.group9()[1], other.group5()[0], other.group9()[0]]) * swizzle!(self.group0(), 2, 2, 1))),
            // e23, e31, e12
            ((Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                + (Simd32x3::from([other.group4()[2], other.group4()[0], other[e45]]) * swizzle!(self.group2(), 1, 2, 2))
                + (Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]) * swizzle!(other.group5(), 2, 0, 1))
                - (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]) * swizzle!(other.group5(), 1, 2, 0))
                - (Simd32x3::from([other.group3()[1], other.group3()[2], other.group3()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group3()[2], other.group3()[0], other.group9()[3]]) * swizzle!(self.group0(), 1, 2, 2))
                + (Simd32x3::from([other.group9()[3], other.group9()[3], other.group3()[1]]) * swizzle!(self.group0(), 0, 1, 0))
                + (Simd32x3::from([other[e45], other[e45], other.group4()[1]]) * swizzle!(self.group2(), 0, 1, 0))
                - (swizzle!(self.group2(), 2, 0, 1) * swizzle!(other.group4(), 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[0] * other[e1]) + (self.group0()[1] * other.group8()[2]) - (self.group0()[2] * other.group8()[1])
                    + (self.group2()[0] * other.group1()[3])
                    + (self.group2()[1] * other.group7()[2])
                    - (self.group2()[2] * other.group7()[1])
                    + (self.group1()[1] * other.group6()[2])
                    + (self.group1()[3] * other.group1()[0])),
                (-(self.group0()[0] * other.group8()[2]) + (self.group0()[1] * other[e1]) + (self.group0()[2] * other.group8()[0]) - (self.group2()[0] * other.group7()[2])
                    + (self.group2()[1] * other.group1()[3])
                    + (self.group2()[2] * other.group7()[0])
                    + (self.group1()[2] * other.group6()[0])
                    + (self.group1()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group8()[1]) - (self.group0()[1] * other.group8()[0]) + (self.group0()[2] * other[e1]) + (self.group2()[0] * other.group7()[1])
                    - (self.group2()[1] * other.group7()[0])
                    + (self.group2()[2] * other.group1()[3])
                    + (self.group1()[0] * other.group6()[1])
                    + (self.group1()[3] * other.group1()[2])),
                ((self.group0()[0] * other.group8()[0]) + (self.group0()[1] * other.group8()[1]) + (self.group0()[2] * other.group8()[2])
                    - (self.group2()[0] * other.group7()[0])
                    - (self.group2()[1] * other.group7()[1])
                    - (self.group2()[2] * other.group7()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]) + (Simd32x4::from(other.group0()[1]) * self.group1())
                - (Simd32x4::from([other.group6()[1], other.group6()[2], other.group6()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))),
            // e423, e431, e412
            ((Simd32x3::from(other.group0()[1]) * self.group0())
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]) * swizzle!(other.group7(), 2, 0, 1))
                - (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[3]]) * swizzle!(other.group7(), 1, 2, 2))
                - (Simd32x3::from([self.group1()[3], self.group1()[3], self.group1()[1]]) * swizzle!(other.group7(), 0, 1, 0))
                - (Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group1()[2], other.group1()[0], other.group6()[1]]) * swizzle!(self.group0(), 1, 2, 0))
                - (Simd32x3::from([other.group6()[1], other.group6()[2], other.group6()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group6()[2], other.group6()[0], other.group6()[3]]) * swizzle!(self.group0(), 1, 2, 2))
                + (Simd32x3::from([other.group6()[3], other.group6()[3], other.group1()[1]]) * swizzle!(self.group0(), 0, 1, 0))),
            // e235, e315, e125
            ((Simd32x3::from(other.group0()[1]) * self.group2())
                - (Simd32x3::from(self.group2()[0]) * Simd32x3::from([other.group6()[3], other.group6()[2], other.group1()[1]]))
                - (Simd32x3::from(self.group2()[1]) * Simd32x3::from([other.group1()[2], other.group6()[3], other.group6()[0]]))
                - (Simd32x3::from(self.group2()[2]) * Simd32x3::from([other.group6()[1], other.group1()[0], other.group6()[3]]))
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from([self.group1()[1], self.group1()[3], self.group1()[3]]) * swizzle!(other.group8(), 2, 1, 2))
                - (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]) * swizzle!(other.group8(), 1, 2, 0))
                + (Simd32x3::from([self.group1()[3], self.group1()[2], self.group1()[0]]) * swizzle!(other.group8(), 0, 0, 1))
                + (Simd32x3::from([other.group1()[1], other.group6()[0], other.group1()[0]]) * swizzle!(self.group2(), 2, 2, 1))
                + (Simd32x3::from([other.group6()[2], other.group1()[2], other.group6()[1]]) * swizzle!(self.group2(), 1, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group3()[2]) - (self.group2()[0] * other[e45]) - (self.group2()[1] * other.group4()[2])
                    + (self.group2()[2] * other.group4()[1])
                    + (self.group1()[0] * other.group3()[3])
                    + (self.group1()[1] * other.group9()[2])),
                ((self.group0()[2] * other.group3()[0]) + (self.group2()[0] * other.group4()[2]) - (self.group2()[1] * other[e45]) - (self.group2()[2] * other.group4()[0])
                    + (self.group1()[1] * other.group3()[3])
                    + (self.group1()[2] * other.group9()[0])),
                ((self.group0()[0] * other.group3()[1]) - (self.group2()[0] * other.group4()[1]) + (self.group2()[1] * other.group4()[0]) - (self.group2()[2] * other[e45])
                    + (self.group1()[0] * other.group9()[1])
                    + (self.group1()[2] * other.group3()[3])),
                (-(self.group2()[0] * other.group5()[0])
                    - (self.group2()[1] * other.group5()[1])
                    - (self.group2()[1] * other.group9()[1])
                    - (self.group2()[2] * other.group5()[2])
                    - (self.group2()[2] * other.group9()[2])
                    - (self.group1()[2] * other.group3()[2])),
            ]) + (Simd32x4::from(other.group9()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other.group3()[1]]) * swizzle!(self.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group9(), 1, 2, 0, 0))),
            // e1234
            (-(self.group0()[0] * other.group5()[0]) + (self.group0()[0] * other.group9()[0]) - (self.group0()[1] * other.group5()[1]) + (self.group0()[1] * other.group9()[1])
                - (self.group0()[2] * other.group5()[2])
                + (self.group0()[2] * other.group9()[2])
                - (other.group4()[0] * self.group1()[0])
                - (other.group4()[1] * self.group1()[1])
                - (other.group4()[2] * self.group1()[2])
                - (self.group1()[3] * other[e45])),
        );
    }
}
impl GeometricAntiProduct<Plane> for Circle {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2       10        0
    //    simd3        1        2        0
    //    simd4        5        7        0
    // Totals...
    // yes simd        8       19        0
    //  no simd       25       44        0
    fn geometric_anti_product(self, other: Plane) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]) - (swizzle!(self.group1(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))),
            // e15, e25, e35, e1234
            ((Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[2]])
                * swizzle!(other.group0(), 1, 2, 0, 2)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (self.group1()[1] * other.group0()[2]),
                (self.group1()[2] * other.group0()[0]),
                (self.group1()[0] * other.group0()[1]),
                (-(self.group2()[1] * other.group0()[1]) - (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<QuadNum> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       24       41        0
    fn geometric_anti_product(self, other: QuadNum) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[0] * other.group0()[3]) + (self.group1()[0] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[2]) + (self.group0()[1] * other.group0()[3]) + (self.group1()[1] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[2] * other.group0()[3]) + (self.group1()[2] * other.group0()[0])),
                (self.group1()[3] * other.group0()[2]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[1]) + (self.group2()[0] * other.group0()[0]) + (self.group1()[0] * other.group0()[3])),
                ((self.group0()[1] * other.group0()[1]) + (self.group2()[1] * other.group0()[0]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[2] * other.group0()[1]) + (self.group2()[2] * other.group0()[0]) + (self.group1()[2] * other.group0()[3])),
                (self.group1()[3] * other.group0()[3]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group2()[0] * other.group0()[2]) + (self.group2()[0] * other.group0()[3]) + (self.group1()[0] * other.group0()[1])),
                (-(self.group2()[1] * other.group0()[2]) + (self.group2()[1] * other.group0()[3]) + (self.group1()[1] * other.group0()[1])),
                (-(self.group2()[2] * other.group0()[2]) + (self.group2()[2] * other.group0()[3]) + (self.group1()[2] * other.group0()[1])),
                (self.group1()[3] * other.group0()[1]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[1]) + (self.group2()[0] * other.group0()[0]) + (self.group1()[0] * other.group0()[2])),
                (-(self.group0()[1] * other.group0()[1]) + (self.group2()[1] * other.group0()[0]) + (self.group1()[1] * other.group0()[2])),
                (-(self.group0()[2] * other.group0()[1]) + (self.group2()[2] * other.group0()[0]) + (self.group1()[2] * other.group0()[2])),
                (self.group1()[3] * other.group0()[0] * -1.0),
            ]),
        );
    }
}
impl GeometricAntiProduct<RoundPoint> for Circle {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       29        0
    //    simd3        2        3        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       22       35        0
    //  no simd       35       50        0
    fn geometric_anti_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            ((Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0))),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other[e2]) + (self.group2()[0] * other.group0()[3]) + (self.group1()[3] * other.group0()[0])),
                ((self.group0()[1] * other[e2]) + (self.group2()[1] * other.group0()[3]) + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[2] * other[e2]) + (self.group2()[2] * other.group0()[3]) + (self.group1()[3] * other.group0()[2])),
                (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]),
            // e235, e315, e125, e4
            (Simd32x4::from([
                ((self.group2()[2] * other.group0()[1]) + (self.group1()[0] * other[e2])),
                ((self.group2()[0] * other.group0()[2]) + (self.group1()[1] * other[e2])),
                ((self.group2()[1] * other.group0()[0]) + (self.group1()[2] * other[e2])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other.group0()[3])),
            ]) - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                (-(self.group0()[0] * other[e2]) - (self.group1()[2] * other.group0()[1])),
                (-(self.group0()[1] * other[e2]) - (self.group1()[0] * other.group0()[2])),
                (-(self.group0()[2] * other[e2]) - (self.group1()[1] * other.group0()[0])),
                ((self.group2()[2] * other.group0()[2]) + (self.group1()[3] * other[e2])),
            ]) + (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group2()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[1]]) * swizzle!(other.group0(), 2, 0, 1, 1))),
        );
    }
}
impl GeometricAntiProduct<Scalar> for Circle {
    type Output = Dipole;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        2        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0       14        0
    fn geometric_anti_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Dipole::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other[scalar]) * self.group0()),
            // e23, e31, e12, e45
            (Simd32x4::from(other[scalar]) * self.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e15, e25, e35
            (Simd32x3::from(other[scalar]) * self.group2()),
        );
    }
}
impl GeometricAntiProduct<Sphere> for Circle {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       24        0
    //    simd3        2        3        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       16       32        0
    //  no simd       35       53        0
    fn geometric_anti_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from(other[e4315]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group2()[0] * other[e4315])),
                ((self.group0()[1] * other.group0()[3]) + (self.group2()[1] * other[e4315])),
                ((self.group0()[2] * other.group0()[3]) + (self.group2()[2] * other[e4315])),
                (-(self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]) - (swizzle!(self.group1(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group2()[2] * other.group0()[1]) * -1.0),
                ((self.group2()[0] * other.group0()[2]) * -1.0),
                ((self.group2()[1] * other.group0()[0]) * -1.0),
                ((self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other[e4315])),
            ]) + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group2()[0] * other[e4315]) + (self.group1()[1] * other.group0()[2])),
                (-(self.group2()[1] * other[e4315]) + (self.group1()[2] * other.group0()[0])),
                (-(self.group2()[2] * other[e4315]) + (self.group1()[0] * other.group0()[1])),
                (-(self.group2()[1] * other.group0()[1]) - (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<TripleNum> for Circle {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       25        0
    //    simd3        1        2        0
    // Totals...
    // yes simd       13       27        0
    //  no simd       15       31        0
    fn geometric_anti_product(self, other: TripleNum) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            ((Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]])) + (Simd32x3::from(other.group0()[2]) * self.group0())),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[1]) + (self.group2()[0] * other.group0()[0]) + (other.group0()[2] * self.group1()[0])),
                ((self.group0()[1] * other.group0()[1]) + (self.group2()[1] * other.group0()[0]) + (other.group0()[2] * self.group1()[1])),
                ((self.group0()[2] * other.group0()[1]) + (self.group2()[2] * other.group0()[0]) + (other.group0()[2] * self.group1()[2])),
                (other.group0()[2] * self.group1()[3]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                ((self.group2()[0] * other.group0()[2]) + (other.group0()[1] * self.group1()[0])),
                ((self.group2()[1] * other.group0()[2]) + (other.group0()[1] * self.group1()[1])),
                ((self.group2()[2] * other.group0()[2]) + (other.group0()[1] * self.group1()[2])),
                (other.group0()[0] * self.group1()[3] * -1.0),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[1]) + (self.group2()[0] * other.group0()[0])),
                (-(self.group0()[1] * other.group0()[1]) + (self.group2()[1] * other.group0()[0])),
                (-(self.group0()[2] * other.group0()[1]) + (self.group2()[2] * other.group0()[0])),
                (other.group0()[1] * self.group1()[3]),
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorEven> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       68       84        0
    //    simd4       19       19        0
    // Totals...
    // yes simd       87      103        0
    //  no simd      144      160        0
    fn geometric_anti_product(self, other: VersorEven) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[2]) + (self.group0()[1] * other.group3()[2]) - (self.group0()[2] * other.group3()[1])
                    + (self.group1()[0] * other.group3()[3])
                    + (self.group1()[1] * other.group0()[2])),
                (-(self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group0()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group0()[2] * other.group3()[0])
                    + (self.group1()[1] * other.group3()[3])
                    + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group0()[3])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group1()[0] * other.group0()[1])
                    + (self.group1()[2] * other.group3()[3])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group2()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group1()[3]]) * swizzle!(other.group1(), 3, 3, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(self.group0()[2] * other.group2()[1])
                    + (self.group2()[0] * other.group3()[3])
                    + (self.group1()[0] * other.group0()[3])
                    + (self.group1()[1] * other.group1()[2])
                    + (self.group1()[3] * other.group3()[0])),
                (-(self.group0()[0] * other.group2()[2])
                    + (self.group2()[1] * other.group3()[3])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group1()[2] * other.group1()[0])
                    + (self.group1()[3] * other.group3()[1])),
                (-(self.group0()[1] * other.group2()[0])
                    + (self.group2()[2] * other.group3()[3])
                    + (self.group1()[0] * other.group1()[1])
                    + (self.group1()[2] * other.group0()[3])
                    + (self.group1()[3] * other.group3()[2])),
                ((self.group0()[2] * other.group2()[2])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group3()[1])
                    - (self.group1()[2] * other.group3()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 3, 3, 1, 0))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[2], self.group0()[1]]) * swizzle!(other.group2(), 2, 0, 3, 1))
                + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group1()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group1()[1] * other.group2()[2]) + (self.group1()[3] * other.group2()[0])),
                ((self.group1()[2] * other.group2()[0]) + (self.group1()[3] * other.group2()[1])),
                ((self.group1()[2] * other.group2()[3]) + (self.group1()[3] * other.group2()[2])),
                (-(self.group1()[1] * other.group2()[1]) - (self.group1()[2] * other.group2()[2])),
            ]) + (Simd32x4::from(self.group2()[0]) * Simd32x4::from([other.group0()[3], other.group3()[2], other.group1()[1], other.group3()[0]]))
                - (Simd32x4::from(self.group2()[0]) * Simd32x4::from([other.group1()[3], other.group1()[2], other.group3()[1], other.group1()[0]]))
                + (Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group1()[2], other.group0()[3], other.group3()[0], other.group3()[1]]))
                - (Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group3()[2], other.group1()[3], other.group1()[0], other.group1()[1]]))
                - (Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[3], other.group1()[2]]))
                + (Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group0()[3], other.group3()[2]]))
                + (swizzle!(self.group1(), 0, 1, 0, 3) * swizzle!(other.group2(), 3, 3, 1, 3))
                - (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group2(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[1])
                    + (self.group2()[0] * other.group3()[3])
                    + (self.group2()[1] * other.group0()[2])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group3()[2])
                    + (self.group1()[3] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[1] * other.group2()[3]) - (self.group0()[2] * other.group2()[0])
                    + (self.group2()[1] * other.group3()[3])
                    + (self.group2()[2] * other.group0()[0])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group3()[0])
                    + (self.group1()[3] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[0]) - (self.group0()[2] * other.group2()[3])
                    + (self.group2()[0] * other.group0()[1])
                    + (self.group2()[2] * other.group3()[3])
                    + (self.group1()[0] * other.group3()[1])
                    + (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group3()[3])),
            ]) - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<VersorOdd> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       64       80        0
    //    simd4       20       20        0
    // Totals...
    // yes simd       84      100        0
    //  no simd      144      160        0
    fn geometric_anti_product(self, other: VersorOdd) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3])
                    + (self.group0()[1] * other.group1()[2])
                    + (self.group0()[2] * other.group3()[1])
                    + (self.group1()[0] * other.group2()[3])
                    + (self.group1()[1] * other.group0()[2])),
                ((self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group0()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group1()[1] * other.group2()[3])
                    + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1])
                    + (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group0()[3])
                    + (self.group1()[0] * other.group0()[1])
                    + (self.group1()[2] * other.group2()[3])),
                (-(self.group2()[2] * other.group0()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]) - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group1()[2], other.group3()[1], other.group2()[0]]))
                - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group3()[2], other.group1()[3], other.group1()[0], other.group2()[1]]))
                - (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[3], other.group2()[2]]))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group2()[2]) + (self.group2()[0] * other.group2()[3]) + (self.group1()[1] * other.group1()[2])),
                ((self.group0()[1] * other.group3()[3]) + (self.group0()[2] * other.group2()[0]) + (self.group2()[1] * other.group2()[3]) + (self.group1()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[2] * other.group3()[3]) + (self.group2()[2] * other.group2()[3]) + (self.group1()[0] * other.group1()[1])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2]) + (self.group2()[2] * other.group0()[2])
                    - (self.group1()[2] * other.group3()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group2()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group3(), 0, 1, 2, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group2()[0] * other.group0()[3]) + (self.group2()[0] * other.group1()[3]) + (self.group2()[1] * other.group1()[2]) - (self.group2()[2] * other.group3()[1])
                    + (self.group1()[1] * other.group2()[2])
                    + (self.group1()[3] * other.group2()[0])),
                (-(self.group2()[0] * other.group3()[2])
                    + (self.group2()[1] * other.group0()[3])
                    + (self.group2()[1] * other.group1()[3])
                    + (self.group2()[2] * other.group1()[0])
                    + (self.group1()[2] * other.group2()[0])
                    + (self.group1()[3] * other.group2()[1])),
                ((self.group2()[0] * other.group1()[1]) - (self.group2()[1] * other.group3()[0])
                    + (self.group2()[2] * other.group0()[3])
                    + (self.group2()[2] * other.group1()[3])
                    + (self.group1()[0] * other.group2()[1])
                    + (self.group1()[3] * other.group2()[2])),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2]) + (self.group0()[2] * other.group3()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group2()[3])),
            ]) + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group3(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[1]]) * swizzle!(other.group3(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) - (self.group2()[1] * other.group0()[2])
                    + (self.group2()[2] * other.group0()[1])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group3()[2])),
                ((self.group0()[2] * other.group2()[0]) + (self.group2()[0] * other.group0()[2]) - (self.group2()[2] * other.group0()[0])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group3()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group2()[0] * other.group0()[1])
                    + (self.group2()[1] * other.group0()[0])
                    + (self.group1()[0] * other.group3()[1])
                    + (self.group1()[2] * other.group1()[3])),
                (-(self.group2()[1] * other.group1()[1])
                    - (self.group2()[1] * other.group3()[1])
                    - (self.group2()[2] * other.group1()[2])
                    - (self.group2()[2] * other.group3()[2])
                    - (self.group1()[2] * other.group2()[2])),
            ]) + (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[1]]) * swizzle!(other.group2(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[0]]) * swizzle!(other.group1(), 0, 1, 2, 0))),
        );
    }
}
impl GeometricAntiProduct<VersorRoundPoint> for Circle {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       32        0
    //    simd3        3        4        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       27       40        0
    //  no simd       45       60        0
    fn geometric_anti_product(self, other: VersorRoundPoint) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            ((Simd32x3::from(other.group1()[1]) * self.group0()) + (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group1()[0] * self.group0()[0]) + (self.group2()[0] * other.group0()[3]) + (self.group1()[3] * other.group0()[0])),
                ((other.group1()[0] * self.group0()[1]) + (self.group2()[1] * other.group0()[3]) + (self.group1()[3] * other.group0()[1])),
                ((other.group1()[0] * self.group0()[2]) + (self.group2()[2] * other.group0()[3]) + (self.group1()[3] * other.group0()[2])),
                (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group1()[1]) * self.group1())),
            // e235, e315, e125, e4
            (Simd32x4::from([
                ((other.group1()[0] * self.group1()[0]) + (other.group1()[1] * self.group2()[0]) + (self.group2()[2] * other.group0()[1])),
                ((other.group1()[0] * self.group1()[1]) + (other.group1()[1] * self.group2()[1]) + (self.group2()[0] * other.group0()[2])),
                ((other.group1()[0] * self.group1()[2]) + (other.group1()[1] * self.group2()[2]) + (self.group2()[1] * other.group0()[0])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other.group0()[3])),
            ]) - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                (-(other.group1()[0] * self.group0()[0]) - (self.group1()[2] * other.group0()[1])),
                (-(other.group1()[0] * self.group0()[1]) - (self.group1()[0] * other.group0()[2])),
                (-(other.group1()[0] * self.group0()[2]) - (self.group1()[1] * other.group0()[0])),
                ((self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group2()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 3))),
        );
    }
}
impl GeometricAntiProduct<VersorSphere> for Circle {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       28        0
    //    simd3        3        4        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       24       37        0
    //  no simd       45       60        0
    fn geometric_anti_product(self, other: VersorSphere) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from(other.group1()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group1()[1]) * self.group0())
                + (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group1()[0] * self.group2()[0]) + (other.group1()[1] * self.group1()[0]) + (self.group0()[0] * other.group0()[3])),
                ((other.group1()[0] * self.group2()[1]) + (other.group1()[1] * self.group1()[1]) + (self.group0()[1] * other.group0()[3])),
                ((other.group1()[0] * self.group2()[2]) + (other.group1()[1] * self.group1()[2]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]]))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group1()[1] * self.group2()[0]) - (self.group2()[2] * other.group0()[1])),
                ((other.group1()[1] * self.group2()[1]) - (self.group2()[0] * other.group0()[2])),
                ((other.group1()[1] * self.group2()[2]) - (self.group2()[1] * other.group0()[0])),
                (-(other.group1()[0] * self.group1()[3]) + (self.group0()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group1()[0] * self.group2()[0]) + (self.group1()[1] * other.group0()[2])),
                (-(other.group1()[0] * self.group2()[1]) + (self.group1()[2] * other.group0()[0])),
                (-(other.group1()[0] * self.group2()[2]) + (self.group1()[0] * other.group0()[1])),
                (-(self.group2()[1] * other.group0()[1]) - (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
    }
}
impl InfixGeometricAntiProduct for CircleRotor {}
impl GeometricAntiProduct<AntiCircleRotor> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       49       65        0
    //    simd4       14       14        0
    // Totals...
    // yes simd       63       79        0
    //  no simd      105      121        0
    fn geometric_anti_product(self, other: AntiCircleRotor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[2] * self.group1()[1]) + (self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group1()[2])),
                ((other.group0()[0] * self.group1()[2]) + (self.group0()[1] * other.group2()[3]) + (self.group0()[2] * other.group1()[0])),
                ((other.group0()[1] * self.group1()[0]) + (self.group0()[0] * other.group1()[1]) + (self.group0()[2] * other.group2()[3])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])),
            ]) + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[2], other.group1()[1]]) * swizzle!(self.group1(), 2, 0, 3, 1))
                - (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group1()[2]]) * swizzle!(other.group1(), 3, 2, 0, 2))
                - (Simd32x4::from([self.group0()[2], self.group0()[1], self.group0()[2], self.group1()[3]]) * swizzle!(other.group1(), 1, 3, 3, 3))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2])
                    + (self.group0()[1] * other.group2()[2])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group2()[3] * self.group1()[0])),
                (-(other.group0()[2] * self.group2()[0])
                    + (self.group0()[2] * other.group2()[0])
                    + (other.group1()[1] * self.group2()[3])
                    + (other.group2()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[1])
                    + (self.group0()[0] * other.group2()[1])
                    + (other.group1()[2] * self.group2()[3])
                    + (other.group2()[3] * self.group1()[2])),
                ((other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2]) - (self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group2()[3], self.group1()[2], self.group1()[0], self.group2()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group1()[2] * self.group2()[1])
                    + (other.group1()[3] * self.group2()[0])
                    + (other.group2()[0] * self.group1()[3])
                    + (other.group2()[0] * self.group2()[3])
                    + (other.group2()[2] * self.group1()[1])
                    + (other.group2()[3] * self.group2()[0])),
                ((other.group1()[0] * self.group2()[2])
                    + (other.group1()[3] * self.group2()[1])
                    + (other.group2()[0] * self.group1()[2])
                    + (other.group2()[1] * self.group1()[3])
                    + (other.group2()[1] * self.group2()[3])
                    + (other.group2()[3] * self.group2()[1])),
                ((other.group1()[1] * self.group2()[0])
                    + (other.group1()[3] * self.group2()[2])
                    + (other.group2()[1] * self.group1()[0])
                    + (other.group2()[2] * self.group1()[3])
                    + (other.group2()[2] * self.group2()[3])
                    + (other.group2()[3] * self.group2()[2])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) + (self.group0()[1] * other.group2()[2]) + (other.group1()[3] * self.group1()[0])),
                ((other.group0()[2] * self.group2()[0]) + (self.group0()[2] * other.group2()[0]) + (other.group1()[3] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[1]) + (self.group0()[0] * other.group2()[1]) + (other.group1()[3] * self.group1()[2])),
                (-(other.group1()[2] * self.group2()[2]) - (other.group2()[1] * self.group1()[1]) - (other.group2()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[1]]) * swizzle!(other.group1(), 0, 1, 2, 1))),
        );
    }
}
impl GeometricAntiProduct<AntiDipoleInversion> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       61       77        0
    //    simd4       22       22        0
    // Totals...
    // yes simd       83       99        0
    //  no simd      149      165        0
    fn geometric_anti_product(self, other: AntiDipoleInversion) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[0] * self.group2()[3]) + (self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) + (self.group0()[1] * other.group3()[2])
                    - (self.group0()[2] * other.group3()[1])
                    + (other.group2()[3] * self.group1()[0])),
                ((other.group0()[1] * self.group2()[3]) - (self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group0()[2] * other.group3()[0])
                    + (other.group2()[3] * self.group1()[1])),
                ((other.group0()[2] * self.group2()[3]) + (self.group0()[0] * other.group1()[1]) + (self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (other.group2()[3] * self.group1()[2])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[2], other.group1()[1]]) * swizzle!(self.group1(), 2, 0, 3, 1))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]) * swizzle!(self.group1(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]) * swizzle!(other.group1(), 1, 2, 0, 2))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) - (self.group0()[2] * other.group2()[1])
                    + (other.group1()[0] * self.group2()[3])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group3()[0] * self.group1()[3])),
                (-(self.group0()[0] * other.group2()[2])
                    + (self.group0()[1] * other.group3()[3])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group2()[3])
                    + (other.group3()[1] * self.group1()[3])),
                (-(self.group0()[1] * other.group2()[0])
                    + (self.group0()[2] * other.group3()[3])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group2()[3])
                    + (other.group3()[2] * self.group1()[3])),
                (-(other.group0()[1] * self.group2()[1]) - (other.group0()[2] * self.group2()[2]) + (self.group0()[2] * other.group2()[2])
                    - (other.group3()[1] * self.group1()[1])
                    - (other.group3()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]) * swizzle!(self.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group2(), 3, 3, 3, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (other.group2()[2] * self.group1()[1]),
                (other.group2()[1] * self.group1()[3]),
                (other.group2()[2] * self.group1()[3]),
                (-(other.group2()[1] * self.group1()[1]) - (other.group2()[2] * self.group1()[2])),
            ]) + (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group3()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group2()[0], other.group2()[0], other.group2()[1], other.group3()[3]]) * swizzle!(self.group1(), 3, 2, 0, 3))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[2]]) * swizzle!(self.group2(), 1, 2, 0, 2))
                - (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group2(), 0, 1, 2, 1))
                - (swizzle!(other.group2(), 1, 2, 0, 0) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (swizzle!(other.group3(), 1, 2, 0, 2) * swizzle!(self.group2(), 2, 0, 1, 2))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2])
                    + (self.group0()[2] * other.group2()[1])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[0])
                    + (other.group2()[3] * self.group2()[0])
                    + (other.group3()[0] * self.group2()[3])
                    + (other.group3()[2] * self.group1()[1])),
                (-(other.group0()[2] * self.group2()[0])
                    + (self.group0()[0] * other.group2()[2])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[1])
                    + (other.group2()[3] * self.group2()[1])
                    + (other.group3()[0] * self.group1()[2])
                    + (other.group3()[1] * self.group2()[3])),
                (-(other.group0()[0] * self.group2()[1])
                    + (self.group0()[1] * other.group2()[0])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])
                    + (other.group2()[3] * self.group2()[2])
                    + (other.group3()[1] * self.group1()[0])
                    + (other.group3()[2] * self.group2()[3])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group2(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[3]]) * swizzle!(other.group2(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum321> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       14        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        5       16        0
    //  no simd        8       22        0
    fn geometric_anti_product(self, other: AntiDualNum321) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other.group0()[1] * self.group1()[0]),
                (other.group0()[1] * self.group1()[1]),
                (other.group0()[1] * self.group1()[2]),
                ((other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group1()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group2()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group2()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group1()[0]),
                (other.group0()[0] * self.group1()[1]),
                (other.group0()[0] * self.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum4> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        7       26        0
    fn geometric_anti_product(self, other: AntiDualNum4) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[2])),
                (other.group0()[1] * self.group2()[3]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[1] * self.group2()[0]),
                (other.group0()[1] * self.group2()[1]),
                (other.group0()[1] * self.group2()[2]),
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[0] * self.group2()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group2()[0] * -1.0),
                (other.group0()[0] * self.group2()[1] * -1.0),
                (other.group0()[0] * self.group2()[2] * -1.0),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum5> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       19        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        7       20        0
    //  no simd        7       23        0
    fn geometric_anti_product(self, other: AntiDualNum5) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group1()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group2()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group2()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group2()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[0] * self.group2()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiFlatPoint> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       36        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       20       39        0
    //  no simd       29       48        0
    fn geometric_anti_product(self, other: AntiFlatPoint) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (other.group0()[3] * self.group1()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group0()[1]) * -1.0),
                ((self.group0()[0] * other.group0()[2]) * -1.0),
                ((self.group0()[1] * other.group0()[0]) * -1.0),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) + (other.group0()[3] * self.group2()[3])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[0] * self.group2()[3]) + (other.group0()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group1()[3]) + (other.group0()[1] * self.group2()[3])),
                ((other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group1()[3]) + (other.group0()[2] * self.group2()[3])),
                ((other.group0()[2] * self.group1()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group1(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1]) + (other.group0()[3] * self.group1()[0])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0]) + (other.group0()[3] * self.group1()[1])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) + (other.group0()[3] * self.group1()[2])),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiFlector> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       49        0
    //    simd4       10       10        0
    // Totals...
    // yes simd       42       59        0
    //  no simd       72       89        0
    fn geometric_anti_product(self, other: AntiFlector) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[2] * other.group0()[1]) + (other.group1()[0] * self.group1()[3])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group1()[3]) + (other.group1()[1] * self.group1()[3])),
                (-(self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group1()[3]) + (other.group1()[2] * self.group1()[3])),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) + (other.group0()[3] * self.group2()[3])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[2] * self.group1()[1]) - (other.group1()[2] * self.group2()[1])),
                ((other.group0()[1] * self.group1()[3]) - (other.group1()[0] * self.group2()[2])),
                ((other.group0()[2] * self.group1()[3]) - (other.group1()[1] * self.group2()[0])),
                (-(other.group0()[2] * self.group1()[2]) + (other.group1()[3] * self.group2()[3])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group1()[3]]) * swizzle!(self.group1(), 3, 2, 0, 3))
                + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group2(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[2]]) * swizzle!(other.group1(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (swizzle!(other.group1(), 1, 2, 0, 1) * swizzle!(self.group2(), 2, 0, 1, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2])
                    + (self.group0()[2] * other.group0()[1])
                    + (other.group0()[3] * self.group1()[0])
                    + (other.group1()[0] * self.group2()[3])
                    + (other.group1()[2] * self.group1()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])
                    + (other.group0()[3] * self.group1()[1])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group2()[3])),
                (-(self.group0()[0] * other.group0()[1])
                    + (self.group0()[1] * other.group0()[0])
                    + (other.group0()[3] * self.group1()[2])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group2()[3])),
                ((self.group0()[2] * other.group1()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))),
        );
    }
}
impl GeometricAntiProduct<AntiLine> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       46       62        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       47       63        0
    //  no simd       50       66        0
    fn geometric_anti_product(self, other: AntiLine) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group2()[3]) - (other.group0()[2] * self.group1()[0]) + (other.group1()[0] * self.group0()[2])
                    - (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group2()[3])
                    - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])),
                (-(other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[1])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[0] * self.group2()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group2()[0])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[1] * self.group2()[3])
                    - (other.group1()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[2] * self.group2()[3])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1])),
                ((other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])),
                (-(other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))),
        );
    }
}
impl GeometricAntiProduct<AntiMotor> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       39       52        0
    //    simd4        9        9        0
    // Totals...
    // yes simd       48       61        0
    //  no simd       75       88        0
    fn geometric_anti_product(self, other: AntiMotor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[2] * other.group0()[0]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group2()[3]]) * swizzle!(other.group0(), 3, 3, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3])
                    + (self.group0()[1] * other.group1()[2])
                    + (other.group0()[0] * self.group2()[3])
                    + (other.group0()[2] * self.group1()[1])
                    + (other.group0()[3] * self.group1()[0])),
                ((self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (other.group0()[0] * self.group1()[2])
                    + (other.group0()[1] * self.group2()[3])
                    + (other.group0()[3] * self.group1()[1])),
                ((self.group0()[0] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[3])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group2()[3])
                    + (other.group0()[3] * self.group1()[2])),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (swizzle!(other.group0(), 1, 2, 0, 3) * swizzle!(self.group1(), 2, 0, 1, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group0()[2] * self.group2()[1]) + (other.group0()[3] * self.group2()[0]) + (other.group1()[0] * self.group1()[3]) + (other.group1()[0] * self.group2()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group1()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[2])
                    + (other.group0()[3] * self.group2()[1])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[1] * self.group2()[3])
                    - (other.group1()[2] * self.group1()[0])
                    + (other.group1()[3] * self.group1()[1])),
                ((other.group0()[1] * self.group2()[0]) + (other.group0()[3] * self.group2()[2]) - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[2] * self.group2()[3])
                    + (other.group1()[3] * self.group1()[2])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group1()[3]]) * swizzle!(other.group1(), 3, 3, 1, 3))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[2], self.group2()[3]]) * swizzle!(other.group1(), 2, 0, 3, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[0]]) * swizzle!(other.group0(), 0, 1, 2, 0))),
        );
    }
}
impl GeometricAntiProduct<AntiPlane> for CircleRotor {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       26        0
    //    simd3        1        2        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       18       31        0
    //  no simd       29       44        0
    fn geometric_anti_product(self, other: AntiPlane) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (-(Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0))),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (other.group0()[0] * self.group1()[3])),
                ((self.group0()[1] * other.group0()[3]) + (other.group0()[1] * self.group1()[3])),
                ((self.group0()[2] * other.group0()[3]) + (other.group0()[2] * self.group1()[3])),
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])),
            ]),
            // e235, e315, e125, e4
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) + (other.group0()[3] * self.group1()[0])),
                ((other.group0()[2] * self.group2()[0]) + (other.group0()[3] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[3] * self.group1()[2])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (other.group0()[1] * self.group1()[2])),
                (-(self.group0()[1] * other.group0()[3]) - (other.group0()[2] * self.group1()[0])),
                (-(self.group0()[2] * other.group0()[3]) - (other.group0()[0] * self.group1()[1])),
                ((other.group0()[2] * self.group2()[2]) + (other.group0()[3] * self.group1()[3]) + (other.group0()[3] * self.group2()[3])),
            ]) + (Simd32x4::from([self.group1()[1], self.group2()[3], self.group2()[3], self.group2()[1]]) * swizzle!(other.group0(), 2, 1, 2, 1))
                + (Simd32x4::from([self.group2()[3], self.group1()[2], self.group1()[0], self.group2()[0]]) * swizzle!(other.group0(), 0, 0, 1, 0))),
        );
    }
}
impl GeometricAntiProduct<AntiQuadNum> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       25        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       12       31        0
    //  no simd       30       49        0
    fn geometric_anti_product(self, other: AntiQuadNum) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (other.group0()[0] * self.group1()[0]),
                (other.group0()[0] * self.group1()[1]),
                (other.group0()[0] * self.group1()[2]),
                0.0,
            ]) - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[3] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[3] * self.group1()[2])),
                ((other.group0()[3] * self.group1()[3]) * -1.0),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]) * swizzle!(other.group0(), 1, 1, 1, 2))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group0()[2] * self.group2()[0]) + (other.group0()[3] * self.group2()[0])),
                ((other.group0()[2] * self.group2()[1]) + (other.group0()[3] * self.group2()[1])),
                ((other.group0()[2] * self.group2()[2]) + (other.group0()[3] * self.group2()[2])),
                ((other.group0()[0] * self.group1()[3]) * -1.0),
            ]) + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]) * swizzle!(other.group0(), 1, 1, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) * -1.0),
                ((other.group0()[0] * self.group2()[1]) * -1.0),
                ((other.group0()[0] * self.group2()[2]) * -1.0),
                0.0,
            ]) + (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]) * swizzle!(other.group0(), 2, 2, 2, 1))),
        );
    }
}
impl GeometricAntiProduct<AntiScalar> for CircleRotor {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        1        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0       11        0
    fn geometric_anti_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return CircleRotor::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other[e12345]) * self.group0()),
            // e415, e425, e435, e321
            (Simd32x4::from(other[e12345]) * self.group1()),
            // e235, e315, e125, e12345
            (Simd32x4::from(other[e12345]) * self.group2()),
        );
    }
}
impl GeometricAntiProduct<AntiTripleNum> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       18        0
    //    simd4        2        6        0
    // Totals...
    // yes simd       11       24        0
    //  no simd       17       42        0
    fn geometric_anti_product(self, other: AntiTripleNum) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group0()[2])),
                (other.group0()[2] * self.group2()[3]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group1()[2])),
                (other.group0()[2] * self.group1()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            ((Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group0()[0]]) * self.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from([other.group0()[2], other.group0()[2], other.group0()[2], other.group0()[0]]) * self.group2())),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]]) * self.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))),
        );
    }
}
impl GeometricAntiProduct<Circle> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       58       74        0
    //    simd4        9        9        0
    // Totals...
    // yes simd       67       83        0
    //  no simd       94      110        0
    fn geometric_anti_product(self, other: Circle) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[0] * self.group2()[3]) + (self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2])),
                ((other.group0()[1] * self.group2()[3]) + (self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group1()[0])),
                ((other.group0()[2] * self.group2()[3]) + (self.group0()[0] * other.group1()[1]) + (self.group0()[2] * other.group1()[3])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[2], other.group1()[1]]) * swizzle!(self.group1(), 2, 0, 3, 1))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]) * swizzle!(self.group1(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]) * swizzle!(other.group1(), 1, 2, 0, 2))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group2()[1] * self.group0()[2]) + (other.group2()[2] * self.group0()[1]) + (other.group1()[0] * self.group2()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])),
                ((other.group2()[0] * self.group0()[2]) - (other.group2()[2] * self.group0()[0]) + (other.group1()[0] * self.group1()[2]) + (other.group1()[1] * self.group2()[3])
                    - (other.group1()[2] * self.group1()[0])),
                (-(other.group2()[0] * self.group0()[1]) + (other.group2()[1] * self.group0()[0]) - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group2()[3])),
                (-(other.group0()[1] * self.group2()[1]) - (other.group0()[2] * self.group2()[2])
                    + (other.group2()[0] * self.group0()[0])
                    + (other.group2()[1] * self.group0()[1])
                    + (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]) * swizzle!(self.group2(), 1, 2, 0, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group2()[0] * self.group1()[3]) + (other.group2()[0] * self.group2()[3]) + (other.group2()[2] * self.group1()[1]) + (other.group1()[2] * self.group2()[1])),
                ((other.group2()[0] * self.group1()[2]) + (other.group2()[1] * self.group1()[3]) + (other.group2()[1] * self.group2()[3]) + (other.group1()[0] * self.group2()[2])),
                ((other.group2()[1] * self.group1()[0]) + (other.group2()[2] * self.group1()[3]) + (other.group2()[2] * self.group2()[3]) + (other.group1()[1] * self.group2()[0])),
                (-(other.group2()[1] * self.group1()[1]) - (other.group2()[2] * self.group1()[2]) - (other.group1()[2] * self.group2()[2])),
            ]) - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group2()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group2(), 0, 1, 2, 1))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1]) + (other.group2()[1] * self.group0()[2])
                    - (other.group2()[2] * self.group0()[1])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group2()[0]) - (other.group2()[0] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[0])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) + (other.group2()[0] * self.group0()[1])
                    - (other.group2()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<CircleRotor> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       53       69        0
    //    simd4       13       13        0
    // Totals...
    // yes simd       66       82        0
    //  no simd      105      121        0
    fn geometric_anti_product(self, other: CircleRotor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group1()[2])),
                ((self.group0()[1] * other.group1()[3]) + (self.group0()[1] * other.group2()[3]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[2] * other.group1()[3]) + (self.group0()[2] * other.group2()[3])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])),
            ]) + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[2], other.group1()[1]]) * swizzle!(self.group1(), 2, 0, 3, 1))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]) * swizzle!(self.group1(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]) * swizzle!(other.group1(), 1, 2, 0, 2))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(self.group0()[2] * other.group2()[1]) + (other.group1()[0] * self.group2()[3]) - (other.group1()[1] * self.group1()[2])),
                (-(self.group0()[0] * other.group2()[2]) + (other.group1()[1] * self.group2()[3]) - (other.group1()[2] * self.group1()[0])),
                (-(self.group0()[1] * other.group2()[0]) - (other.group1()[0] * self.group1()[1]) + (other.group1()[2] * self.group2()[3])),
                (-(other.group0()[1] * self.group2()[1]) - (other.group0()[2] * self.group2()[2]) + (self.group0()[2] * other.group2()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]) * swizzle!(self.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[3]]) * swizzle!(self.group1(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[1]]) * swizzle!(other.group2(), 3, 3, 3, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group1()[2] * self.group2()[1])
                    + (other.group2()[0] * self.group1()[3])
                    + (other.group2()[0] * self.group2()[3])
                    + (other.group2()[2] * self.group1()[1])
                    + (other.group2()[3] * self.group2()[0])),
                ((other.group1()[0] * self.group2()[2])
                    + (other.group2()[0] * self.group1()[2])
                    + (other.group2()[1] * self.group1()[3])
                    + (other.group2()[1] * self.group2()[3])
                    + (other.group2()[3] * self.group2()[1])),
                ((other.group1()[1] * self.group2()[0])
                    + (other.group2()[1] * self.group1()[0])
                    + (other.group2()[2] * self.group1()[3])
                    + (other.group2()[2] * self.group2()[3])
                    + (other.group2()[3] * self.group2()[2])),
                (-(other.group1()[2] * self.group2()[2]) - (other.group2()[1] * self.group1()[1]) - (other.group2()[2] * self.group1()[2])),
            ]) - (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group2(), 0, 1, 2, 1))
                - (swizzle!(other.group2(), 1, 2, 0, 0) * swizzle!(self.group1(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1]) - (self.group0()[1] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[1])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group2()[0]) + (self.group0()[0] * other.group2()[2]) - (self.group0()[2] * other.group2()[0])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) - (self.group0()[0] * other.group2()[1])
                    + (self.group0()[1] * other.group2()[0])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Dipole> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       50       66        0
    //    simd4       11       11        0
    // Totals...
    // yes simd       61       77        0
    //  no simd       94      110        0
    fn geometric_anti_product(self, other: Dipole) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) + (other.group0()[0] * self.group2()[3]) + (other.group0()[2] * self.group1()[1])),
                ((self.group0()[2] * other.group1()[0]) + (other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group2()[3])),
                ((self.group0()[0] * other.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group2()[3])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 3, 2, 0, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group1(), 1, 3, 3, 1))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group1()[2]]) * swizzle!(self.group1(), 3, 3, 1, 2))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[2], other.group1()[3]]) * swizzle!(self.group1(), 2, 0, 3, 3))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1]) - (other.group0()[1] * self.group2()[2]) - (self.group1()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[2] * other.group2()[0])
                    - (other.group0()[2] * self.group2()[0])
                    - (self.group1()[0] * other.group1()[2])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) - (other.group0()[0] * self.group2()[1]) - (self.group1()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])
                    + (other.group0()[2] * self.group2()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[3]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group2()[0] * self.group1()[3])
                    + (other.group2()[0] * self.group2()[3])
                    + (other.group2()[2] * self.group1()[1])
                    + (self.group2()[0] * other.group1()[3])
                    + (self.group2()[1] * other.group1()[2])),
                ((other.group2()[0] * self.group1()[2])
                    + (other.group2()[1] * self.group1()[3])
                    + (other.group2()[1] * self.group2()[3])
                    + (self.group2()[1] * other.group1()[3])
                    + (self.group2()[2] * other.group1()[0])),
                ((other.group2()[1] * self.group1()[0])
                    + (other.group2()[2] * self.group1()[3])
                    + (other.group2()[2] * self.group2()[3])
                    + (self.group2()[0] * other.group1()[1])
                    + (self.group2()[2] * other.group1()[3])),
                (-(self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1]) + (other.group0()[1] * self.group2()[2]) + (self.group1()[0] * other.group1()[3])),
                (-(self.group0()[0] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[0])
                    + (other.group0()[2] * self.group2()[0])
                    + (self.group1()[1] * other.group1()[3])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) + (other.group0()[0] * self.group2()[1]) + (self.group1()[2] * other.group1()[3])),
                (-(other.group2()[1] * self.group1()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (self.group2()[1] * other.group1()[1])
                    - (self.group2()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))),
        );
    }
}
impl GeometricAntiProduct<DipoleInversion> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       53       69        0
    //    simd4       24       24        0
    // Totals...
    // yes simd       77       93        0
    //  no simd      149      165        0
    fn geometric_anti_product(self, other: DipoleInversion) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[2])
                    + (self.group0()[2] * other.group3()[1])
                    + (other.group0()[0] * self.group2()[3])
                    + (other.group0()[2] * self.group1()[1])
                    + (self.group1()[0] * other.group2()[3])),
                ((self.group0()[0] * other.group3()[2])
                    + (self.group0()[2] * other.group1()[0])
                    + (other.group0()[0] * self.group1()[2])
                    + (other.group0()[1] * self.group2()[3])
                    + (self.group1()[1] * other.group2()[3])),
                ((self.group0()[0] * other.group1()[1])
                    + (self.group0()[1] * other.group3()[0])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group2()[3])
                    + (self.group1()[2] * other.group2()[3])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]) - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group1()[2], other.group3()[1], other.group2()[0]]))
                - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group3()[2], other.group1()[3], other.group1()[0], other.group2()[1]]))
                - (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[3], other.group2()[2]]))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[2], other.group1()[1]]) * swizzle!(self.group1(), 2, 0, 3, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group2()[2]) - (other.group0()[1] * self.group2()[2])),
                ((self.group0()[1] * other.group3()[3]) + (self.group0()[2] * other.group2()[0]) - (other.group0()[2] * self.group2()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[2] * other.group3()[3]) - (other.group0()[0] * self.group2()[1])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2]) - (self.group1()[2] * other.group3()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[3]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]) * swizzle!(self.group2(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[1]]) * swizzle!(self.group2(), 0, 1, 2, 1))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group3(), 0, 1, 2, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group1()[3] * other.group2()[0]) + (self.group2()[0] * other.group1()[3]) + (self.group2()[1] * other.group1()[2]) - (self.group2()[2] * other.group3()[1])
                    + (self.group2()[3] * other.group2()[0])),
                ((self.group1()[3] * other.group2()[1]) - (self.group2()[0] * other.group3()[2])
                    + (self.group2()[1] * other.group1()[3])
                    + (self.group2()[2] * other.group1()[0])
                    + (self.group2()[3] * other.group2()[1])),
                ((self.group1()[3] * other.group2()[2]) + (self.group2()[0] * other.group1()[1]) - (self.group2()[1] * other.group3()[0])
                    + (self.group2()[2] * other.group1()[3])
                    + (self.group2()[3] * other.group2()[2])),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2]) + (self.group0()[2] * other.group3()[2])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group1()[3] * other.group2()[3])),
            ]) + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[3]]) * swizzle!(other.group2(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[1]]) * swizzle!(other.group3(), 2, 0, 1, 1))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) + (self.group1()[0] * other.group1()[3]) + (self.group1()[1] * other.group3()[2]) + (self.group2()[3] * other.group3()[0])),
                ((self.group0()[2] * other.group2()[0]) + (self.group1()[1] * other.group1()[3]) + (self.group1()[2] * other.group3()[0]) + (self.group2()[3] * other.group3()[1])),
                ((self.group0()[0] * other.group2()[1]) + (self.group1()[0] * other.group3()[1]) + (self.group1()[2] * other.group1()[3]) + (self.group2()[3] * other.group3()[2])),
                (-(self.group2()[1] * other.group1()[1])
                    - (self.group2()[1] * other.group3()[1])
                    - (self.group2()[2] * other.group1()[2])
                    - (self.group2()[2] * other.group3()[2])),
            ]) + (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[3]]) * swizzle!(self.group2(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[2]]) * swizzle!(self.group1(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group3()[0]]) * swizzle!(self.group2(), 0, 1, 2, 0))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group2()[1]]) * swizzle!(self.group1(), 2, 0, 1, 1))),
        );
    }
}
impl GeometricAntiProduct<DualNum321> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       14        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        5       16        0
    //  no simd        8       22        0
    fn geometric_anti_product(self, other: DualNum321) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other.group0()[1] * self.group1()[0]),
                (other.group0()[1] * self.group1()[1]),
                (other.group0()[1] * self.group1()[2]),
                ((other.group0()[0] * self.group2()[3]) + (other.group0()[1] * self.group1()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group2()[0])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[1])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group2()[2])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[0] * self.group1()[0]),
                (other.group0()[0] * self.group1()[1]),
                (other.group0()[0] * self.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<DualNum4> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        7       22        0
    fn geometric_anti_product(self, other: DualNum4) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[2])),
                (other.group0()[1] * self.group2()[3]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other.group0()[1] * self.group2()[0]),
                (other.group0()[1] * self.group2()[1]),
                (other.group0()[1] * self.group2()[2]),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[0] * self.group2()[0]),
                (other.group0()[0] * self.group2()[1]),
                (other.group0()[0] * self.group2()[2]),
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[0] * self.group2()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<DualNum5> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       13        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        4       16        0
    //  no simd        7       25        0
    fn geometric_anti_product(self, other: DualNum5) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group1()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3]),
            ]),
            // e235, e315, e125, e5
            ((Simd32x4::from(other.group0()[0]) * self.group1()) + (Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group0()[0]]) * self.group2())),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<FlatPoint> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       35        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       23       38        0
    //  no simd       32       47        0
    fn geometric_anti_product(self, other: FlatPoint) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]))])
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group2()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])
                    + (self.group1()[3] * other.group0()[0])
                    + (self.group2()[0] * other.group0()[3])
                    + (self.group2()[3] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[0])
                    + (self.group1()[3] * other.group0()[1])
                    + (self.group2()[1] * other.group0()[3])
                    + (self.group2()[3] * other.group0()[1])),
                ((self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])
                    + (self.group1()[3] * other.group0()[2])
                    + (self.group2()[2] * other.group0()[3])
                    + (self.group2()[3] * other.group0()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) + (self.group1()[0] * other.group0()[3])),
                ((self.group0()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[1]) + (self.group1()[2] * other.group0()[3])),
                (-(self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<Flector> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       48        0
    //    simd4       10       10        0
    // Totals...
    // yes simd       42       58        0
    //  no simd       72       88        0
    fn geometric_anti_product(self, other: Flector) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other.group0()[3])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                (-(self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group2()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (swizzle!(self.group1(), 3, 3, 3, 0) * swizzle!(other.group1(), 0, 1, 2, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1]) + (self.group1()[3] * other.group0()[0]) + (self.group2()[0] * other.group0()[3])
                    - (self.group2()[2] * other.group1()[1])
                    + (self.group2()[3] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0]) + (self.group1()[3] * other.group0()[1])
                    - (self.group2()[0] * other.group1()[2])
                    + (self.group2()[1] * other.group0()[3])
                    + (self.group2()[3] * other.group0()[1])),
                ((self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0]) + (self.group1()[3] * other.group0()[2]) - (self.group2()[1] * other.group1()[0])
                    + (self.group2()[2] * other.group0()[3])
                    + (self.group2()[3] * other.group0()[2])),
                (self.group0()[2] * other.group1()[2]),
            ]) + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) + (self.group1()[0] * other.group0()[3]) + (self.group2()[3] * other.group1()[0])),
                ((self.group0()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3]) + (self.group2()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[1]) + (self.group1()[2] * other.group0()[3]) + (self.group2()[3] * other.group1()[2])),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group2()[0] * other.group1()[0])
                    - (self.group2()[1] * other.group1()[1])
                    - (self.group2()[2] * other.group1()[2])),
            ]) + (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[3]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[1]]) * swizzle!(self.group1(), 2, 0, 1, 1))),
        );
    }
}
impl GeometricAntiProduct<Line> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       42       58        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       44       60        0
    //  no simd       50       66        0
    fn geometric_anti_product(self, other: Line) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) + (other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[1])),
                (-(self.group0()[0] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[0])
                    + (other.group0()[0] * self.group1()[2])
                    + (other.group0()[1] * self.group2()[3])
                    - (other.group0()[2] * self.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) - (other.group0()[0] * self.group1()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group2()[3])),
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1]) + (self.group0()[2] * other.group1()[2])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[2] * self.group2()[1]) + (other.group1()[0] * self.group1()[3]) + (other.group1()[0] * self.group2()[3]) + (other.group1()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group1()[0] * self.group1()[2]) + (other.group1()[1] * self.group1()[3]) + (other.group1()[1] * self.group2()[3])),
                ((other.group0()[1] * self.group2()[0]) + (other.group1()[1] * self.group1()[0]) + (other.group1()[2] * self.group1()[3]) + (other.group1()[2] * self.group2()[3])),
                (-(other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1]) + (other.group0()[0] * self.group1()[3])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0]) + (other.group0()[1] * self.group1()[3])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) + (other.group0()[2] * self.group1()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Motor> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       52        0
    //    simd4        9        9        0
    // Totals...
    // yes simd       45       61        0
    //  no simd       72       88        0
    fn geometric_anti_product(self, other: Motor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[2] * other.group0()[0]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group2()[3]]) * swizzle!(other.group0(), 3, 3, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(self.group0()[2] * other.group1()[1]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])
                    + (self.group2()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[2]) - (self.group1()[0] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[0])
                    + (self.group2()[3] * other.group0()[1])),
                (-(self.group0()[1] * other.group1()[0]) - (self.group1()[1] * other.group0()[0])
                    + (self.group1()[2] * other.group0()[3])
                    + (self.group2()[3] * other.group0()[2])),
                (self.group0()[2] * other.group1()[2]),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group0()[0]]) * swizzle!(other.group1(), 3, 3, 1, 0))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[2], self.group0()[1]]) * swizzle!(other.group1(), 2, 0, 3, 1))
                + (swizzle!(self.group1(), 0, 1, 0, 3) * swizzle!(other.group0(), 3, 3, 1, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group1()[3] * other.group1()[0]) + (self.group2()[0] * other.group0()[3]) + (self.group2()[1] * other.group0()[2]) + (self.group2()[3] * other.group1()[0])),
                ((self.group1()[3] * other.group1()[1]) + (self.group2()[1] * other.group0()[3]) + (self.group2()[2] * other.group0()[0]) + (self.group2()[3] * other.group1()[1])),
                ((self.group1()[3] * other.group1()[2]) + (self.group2()[0] * other.group0()[1]) + (self.group2()[2] * other.group0()[3]) + (self.group2()[3] * other.group1()[2])),
                (-(self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[2], self.group2()[3]]) * swizzle!(other.group1(), 2, 0, 3, 3))
                + (swizzle!(self.group1(), 0, 1, 0, 3) * swizzle!(other.group1(), 3, 3, 1, 3))
                - (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (swizzle!(self.group2(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[1])
                    + (self.group1()[3] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group1()[0]) + (self.group1()[3] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group0()[2])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<MultiVector> for CircleRotor {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      107      128        0
    //    simd2       10       12        0
    //    simd3       39       42        0
    //    simd4       19       19        0
    // Totals...
    // yes simd      175      201        0
    //  no simd      320      354        0
    fn geometric_anti_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from(self.group1()[3]) * Simd32x2::from([other.group3()[3], other.group6()[3]]) * Simd32x2::from([-1.0, 1.0]))
                - (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group3()[0], other.group8()[0]]))
                - (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group3()[1], other.group8()[1]]))
                - (Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group3()[2], other.group8()[2]]))
                - (Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group5()[0], other.group6()[0]]))
                - (Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group5()[1], other.group6()[1]]))
                - (Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group5()[2], other.group6()[2]]))
                - (Simd32x2::from(self.group2()[0]) * Simd32x2::from([other.group4()[0], other.group7()[0]]))
                - (Simd32x2::from(self.group2()[1]) * Simd32x2::from([other.group4()[1], other.group7()[1]]))
                - (Simd32x2::from(self.group2()[2]) * Simd32x2::from([other.group4()[2], other.group7()[2]]))
                + (Simd32x2::from(self.group2()[3]) * other.group0())),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(self.group0()[0] * other[e1]) - (self.group0()[1] * other.group8()[2]) + (self.group0()[2] * other.group8()[1]) - (other.group7()[1] * self.group2()[2])
                    + (self.group1()[0] * other.group6()[3])
                    + (self.group1()[1] * other.group1()[2])
                    + (self.group1()[3] * other.group6()[0])
                    + (self.group2()[0] * other.group1()[3])
                    + (self.group2()[3] * other.group1()[0])),
                ((self.group0()[0] * other.group8()[2]) - (self.group0()[1] * other[e1]) - (self.group0()[2] * other.group8()[0]) - (other.group7()[2] * self.group2()[0])
                    + (self.group1()[1] * other.group6()[3])
                    + (self.group1()[2] * other.group1()[0])
                    + (self.group1()[3] * other.group6()[1])
                    + (self.group2()[1] * other.group1()[3])
                    + (self.group2()[3] * other.group1()[1])),
                (-(self.group0()[0] * other.group8()[1]) + (self.group0()[1] * other.group8()[0]) - (self.group0()[2] * other[e1]) - (other.group7()[0] * self.group2()[1])
                    + (self.group1()[0] * other.group1()[1])
                    + (self.group1()[2] * other.group6()[3])
                    + (self.group1()[3] * other.group6()[2])
                    + (self.group2()[2] * other.group1()[3])
                    + (self.group2()[3] * other.group1()[2])),
                (-(self.group0()[0] * other.group6()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[1] * other.group6()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group6()[2])
                    - (other.group7()[0] * self.group1()[0])
                    - (other.group7()[1] * self.group1()[1])
                    - (other.group7()[2] * self.group1()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]) + (Simd32x4::from([other.group7()[2], other.group7()[0], other.group7()[1], other.group1()[3]]) * swizzle!(self.group2(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e5
            (-(other.group8()[0] * self.group1()[0]) - (other.group8()[1] * self.group1()[1]) - (other.group8()[2] * self.group1()[2])
                + (self.group1()[3] * other[e1])
                + (self.group2()[0] * other.group1()[0])
                - (self.group2()[0] * other.group6()[0])
                + (self.group2()[1] * other.group1()[1])
                - (self.group2()[1] * other.group6()[1])
                + (self.group2()[2] * other.group1()[2])
                - (self.group2()[2] * other.group6()[2])
                + (self.group2()[3] * other[e1])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                (-(other.group5()[1] * self.group2()[2])
                    + (self.group1()[0] * other.group9()[3])
                    + (self.group1()[3] * other.group3()[0])
                    + (self.group2()[1] * other.group9()[2])
                    + (self.group2()[3] * other.group3()[0])),
                (-(other.group5()[2] * self.group2()[0])
                    + (self.group1()[1] * other.group9()[3])
                    + (self.group1()[3] * other.group3()[1])
                    + (self.group2()[2] * other.group9()[0])
                    + (self.group2()[3] * other.group3()[1])),
                (-(other.group5()[0] * self.group2()[1])
                    + (self.group1()[2] * other.group9()[3])
                    + (self.group1()[3] * other.group3()[2])
                    + (self.group2()[2] * other.group3()[3])
                    + (self.group2()[3] * other.group3()[2])),
                (-(self.group0()[0] * other.group3()[0])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group3()[2])
                    - (self.group1()[1] * other.group9()[1])
                    - (self.group1()[2] * other.group9()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group4()[0]]) * swizzle!(self.group2(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group4()[1]]) * swizzle!(self.group2(), 1, 2, 0, 1))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[3]]) * swizzle!(other.group3(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[0]]) * swizzle!(other.group9(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group9()[1], other.group4()[2]]) * swizzle!(self.group2(), 0, 1, 0, 2))),
            // e41, e42, e43
            ((Simd32x3::from(other.group0()[0]) * self.group0())
                - (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group3()[3], other.group5()[2], other.group9()[1]]))
                - (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group9()[2], other.group3()[3], other.group5()[0]]))
                - (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group5()[1], other.group9()[0], other.group3()[3]]))
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from([other.group5()[2], other.group9()[2], other.group5()[1]]) * swizzle!(self.group0(), 1, 0, 0))
                + (Simd32x3::from([self.group1()[1], self.group2()[3], self.group2()[3]]) * swizzle!(other.group4(), 2, 1, 2))
                - (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[3]]) * swizzle!(other.group4(), 1, 2, 2))
                - (Simd32x3::from([self.group1()[3], self.group1()[3], self.group1()[1]]) * swizzle!(other.group4(), 0, 1, 0))
                + (Simd32x3::from([self.group2()[3], self.group1()[2], self.group1()[0]]) * swizzle!(other.group4(), 0, 0, 1))
                + (Simd32x3::from([other.group9()[1], other.group5()[0], other.group9()[0]]) * swizzle!(self.group0(), 2, 2, 1))),
            // e23, e31, e12
            ((Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                + (Simd32x3::from([self.group1()[1], self.group2()[3], self.group2()[3]]) * swizzle!(other.group5(), 2, 1, 2))
                - (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]) * swizzle!(other.group5(), 1, 2, 0))
                + (Simd32x3::from([self.group2()[1], self.group2()[2], self.group2()[0]]) * swizzle!(other.group4(), 2, 0, 1))
                - (Simd32x3::from([self.group2()[2], self.group2()[0], self.group2()[1]]) * swizzle!(other.group4(), 1, 2, 0))
                + (Simd32x3::from([self.group2()[3], self.group1()[2], self.group1()[0]]) * swizzle!(other.group5(), 0, 0, 1))
                - (Simd32x3::from([other.group3()[1], other.group3()[2], other.group3()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group3()[2], other.group3()[0], other.group9()[3]]) * swizzle!(self.group0(), 1, 2, 2))
                + (Simd32x3::from([other.group9()[3], other.group9()[3], other.group3()[1]]) * swizzle!(self.group0(), 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[0] * other[e1]) + (self.group0()[1] * other.group8()[2]) - (self.group0()[2] * other.group8()[1])
                    + (self.group1()[1] * other.group6()[2])
                    + (self.group1()[3] * other.group1()[0])
                    + (self.group2()[0] * other.group1()[3])
                    + (self.group2()[3] * other.group6()[0])),
                (-(self.group0()[0] * other.group8()[2])
                    + (self.group0()[1] * other[e1])
                    + (self.group0()[2] * other.group8()[0])
                    + (self.group1()[2] * other.group6()[0])
                    + (self.group1()[3] * other.group1()[1])
                    + (self.group2()[1] * other.group1()[3])
                    + (self.group2()[3] * other.group6()[1])),
                ((self.group0()[0] * other.group8()[1]) - (self.group0()[1] * other.group8()[0])
                    + (self.group0()[2] * other[e1])
                    + (self.group1()[0] * other.group6()[1])
                    + (self.group1()[3] * other.group1()[2])
                    + (self.group2()[2] * other.group1()[3])
                    + (self.group2()[3] * other.group6()[2])),
                ((self.group0()[0] * other.group8()[0]) + (self.group0()[1] * other.group8()[1]) + (self.group0()[2] * other.group8()[2])
                    - (other.group7()[1] * self.group2()[1])
                    - (other.group7()[2] * self.group2()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]) + (Simd32x4::from(other.group0()[1]) * self.group1())
                - (Simd32x4::from([other.group7()[1], other.group7()[2], other.group7()[0], other.group7()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group7()[2], other.group7()[0], other.group7()[1], other.group6()[3]]) * swizzle!(self.group2(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group6()[1], other.group6()[2], other.group6()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))),
            // e423, e431, e412
            ((Simd32x3::from(other.group0()[1]) * self.group0())
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from([self.group1()[1], self.group2()[3], self.group2()[3]]) * swizzle!(other.group7(), 2, 1, 2))
                - (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[3]]) * swizzle!(other.group7(), 1, 2, 2))
                - (Simd32x3::from([self.group1()[3], self.group1()[3], self.group1()[1]]) * swizzle!(other.group7(), 0, 1, 0))
                + (Simd32x3::from([self.group2()[3], self.group1()[2], self.group1()[0]]) * swizzle!(other.group7(), 0, 0, 1))
                - (Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group1()[2], other.group1()[0], other.group6()[1]]) * swizzle!(self.group0(), 1, 2, 0))
                - (Simd32x3::from([other.group6()[1], other.group6()[2], other.group6()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group6()[2], other.group6()[0], other.group6()[3]]) * swizzle!(self.group0(), 1, 2, 2))
                + (Simd32x3::from([other.group6()[3], other.group6()[3], other.group1()[1]]) * swizzle!(self.group0(), 0, 1, 0))),
            // e235, e315, e125
            (Simd32x3::from([
                ((self.group2()[1] * other.group6()[2]) + (self.group2()[2] * other.group1()[1])),
                ((self.group2()[0] * other.group1()[2]) + (self.group2()[2] * other.group6()[0])),
                ((self.group2()[0] * other.group6()[1]) + (self.group2()[1] * other.group1()[0])),
            ]) + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                - (Simd32x3::from(self.group2()[0]) * Simd32x3::from([other.group6()[3], other.group6()[2], other.group1()[1]]))
                - (Simd32x3::from(self.group2()[1]) * Simd32x3::from([other.group1()[2], other.group6()[3], other.group6()[0]]))
                - (Simd32x3::from(self.group2()[2]) * Simd32x3::from([other.group6()[1], other.group1()[0], other.group6()[3]]))
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from([self.group1()[1], self.group2()[3], self.group2()[3]]) * swizzle!(other.group8(), 2, 1, 2))
                - (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]) * swizzle!(other.group8(), 1, 2, 0))
                + (Simd32x3::from([self.group1()[3], self.group1()[2], self.group1()[0]]) * swizzle!(other.group8(), 0, 0, 1))
                + (Simd32x3::from([self.group2()[3], self.group1()[3], self.group1()[3]]) * other.group8())),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group3()[2]) + (self.group1()[0] * other.group3()[3]) + (self.group1()[1] * other.group9()[2]) + (self.group2()[3] * other.group9()[0])),
                ((self.group0()[2] * other.group3()[0]) + (self.group1()[1] * other.group3()[3]) + (self.group1()[2] * other.group9()[0]) + (self.group2()[3] * other.group9()[1])),
                ((self.group0()[0] * other.group3()[1]) + (self.group1()[0] * other.group9()[1]) + (self.group1()[2] * other.group3()[3]) + (self.group2()[3] * other.group9()[2])),
                (-(other.group5()[2] * self.group2()[2])
                    - (self.group2()[0] * other.group9()[0])
                    - (self.group2()[1] * other.group9()[1])
                    - (self.group2()[2] * other.group9()[2])),
            ]) + (Simd32x4::from(other.group9()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group4()[1], other.group4()[2], other.group4()[0], other.group9()[3]]) * swizzle!(self.group2(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group4()[2], other.group4()[0], other.group4()[1], other.group5()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other.group3()[1]]) * swizzle!(self.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group9()[1], other.group9()[2], other.group9()[0], other.group3()[2]]) * swizzle!(self.group1(), 2, 0, 1, 2))
                - (Simd32x4::from([other[e45], other[e45], other[e45], other.group5()[1]]) * swizzle!(self.group2(), 0, 1, 2, 1))),
            // e1234
            (-(self.group0()[0] * other.group5()[0]) + (self.group0()[0] * other.group9()[0]) - (self.group0()[1] * other.group5()[1]) + (self.group0()[1] * other.group9()[1])
                - (self.group0()[2] * other.group5()[2])
                + (self.group0()[2] * other.group9()[2])
                - (other.group4()[0] * self.group1()[0])
                - (other.group4()[1] * self.group1()[1])
                - (other.group4()[2] * self.group1()[2])
                - (self.group1()[3] * other[e45])
                + (self.group2()[3] * other[e45])),
        );
    }
}
impl GeometricAntiProduct<Plane> for CircleRotor {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2       10        0
    //    simd3        1        2        0
    //    simd4        6        8        0
    // Totals...
    // yes simd        9       20        0
    //  no simd       29       48        0
    fn geometric_anti_product(self, other: Plane) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]) - (swizzle!(self.group1(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))),
            // e15, e25, e35, e1234
            ((Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[2]])
                * swizzle!(other.group0(), 1, 2, 0, 2)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[1]]) * swizzle!(other.group0(), 2, 0, 1, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (self.group2()[3] * other.group0()[0]),
                (self.group2()[3] * other.group0()[1]),
                (self.group2()[3] * other.group0()[2]),
                (-(self.group2()[1] * other.group0()[1]) - (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<QuadNum> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0       15        0
    //    simd4        8        8        0
    // Totals...
    // yes simd        8       23        0
    //  no simd       32       47        0
    fn geometric_anti_product(self, other: QuadNum) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (self.group1()[0] * other.group0()[0]),
                (self.group1()[1] * other.group0()[0]),
                (self.group1()[2] * other.group0()[0]),
                0.0,
            ]) + (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (self.group2()[0] * other.group0()[0]),
                (self.group2()[1] * other.group0()[0]),
                (self.group2()[2] * other.group0()[0]),
                0.0,
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]) * swizzle!(other.group0(), 1, 1, 1, 3))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]) * swizzle!(other.group0(), 3, 3, 3, 2))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group2()[0] * other.group0()[2]) * -1.0),
                ((self.group2()[1] * other.group0()[2]) * -1.0),
                ((self.group2()[2] * other.group0()[2]) * -1.0),
                0.0,
            ]) + (Simd32x4::from(other.group0()[1]) * self.group1())
                + (swizzle!(other.group0(), 3, 3, 3, 1) * self.group2())),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (self.group2()[0] * other.group0()[0]),
                (self.group2()[1] * other.group0()[0]),
                (self.group2()[2] * other.group0()[0]),
                0.0,
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]) * swizzle!(other.group0(), 1, 1, 1, 0))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]) * swizzle!(other.group0(), 2, 2, 2, 0))),
        );
    }
}
impl GeometricAntiProduct<RoundPoint> for CircleRotor {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       26        0
    //    simd3        2        3        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       21       34        0
    //  no simd       40       55        0
    fn geometric_anti_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            ((Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0))),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other[e2]) + (self.group1()[3] * other.group0()[0]) + (self.group2()[0] * other.group0()[3])),
                ((self.group0()[1] * other[e2]) + (self.group1()[3] * other.group0()[1]) + (self.group2()[1] * other.group0()[3])),
                ((self.group0()[2] * other[e2]) + (self.group1()[3] * other.group0()[2]) + (self.group2()[2] * other.group0()[3])),
                (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]),
            // e235, e315, e125, e4
            (Simd32x4::from([
                (self.group1()[0] * other[e2]),
                (self.group1()[1] * other[e2]),
                (self.group1()[2] * other[e2]),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other.group0()[3])),
            ]) - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (swizzle!(self.group2(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                (-(self.group0()[0] * other[e2]) - (self.group1()[2] * other.group0()[1])),
                (-(self.group0()[1] * other[e2]) - (self.group1()[0] * other.group0()[2])),
                (-(self.group0()[2] * other[e2]) - (self.group1()[1] * other.group0()[0])),
                ((self.group2()[2] * other.group0()[2]) + (self.group2()[3] * other[e2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other[e2]]) * swizzle!(self.group1(), 1, 2, 0, 3))
                + (swizzle!(self.group2(), 0, 1, 2, 0) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (swizzle!(self.group2(), 3, 3, 3, 1) * swizzle!(other.group0(), 0, 1, 2, 1))),
        );
    }
}
impl GeometricAntiProduct<Scalar> for CircleRotor {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        1        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0       15        0
    fn geometric_anti_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiCircleRotor::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other[scalar]) * self.group0()),
            // e23, e31, e12, e45
            (Simd32x4::from(other[scalar]) * self.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e15, e25, e35, scalar
            (Simd32x4::from(other[scalar]) * self.group2()),
        );
    }
}
impl GeometricAntiProduct<Sphere> for CircleRotor {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       17        0
    //    simd3        2        3        0
    //    simd4        7        9        0
    // Totals...
    // yes simd       15       29        0
    //  no simd       40       62        0
    fn geometric_anti_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from(other[e4315]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group2()[0] * other[e4315])),
                ((self.group0()[1] * other.group0()[3]) + (self.group2()[1] * other[e4315])),
                ((self.group0()[2] * other.group0()[3]) + (self.group2()[2] * other[e4315])),
                (-(self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]) - (swizzle!(self.group1(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group2()[2] * other.group0()[1]) * -1.0),
                ((self.group2()[0] * other.group0()[2]) * -1.0),
                ((self.group2()[1] * other.group0()[0]) * -1.0),
                ((self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other[e4315]) + (self.group2()[3] * other[e4315])),
            ]) + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[1]]) * swizzle!(other.group0(), 2, 0, 1, 1))),
            // e4235, e4315, e4125, e3215
            ((swizzle!(self.group2(), 3, 3, 3, 2) * swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other[e4315], other[e4315], other[e4315], other.group0()[1]]) * swizzle!(self.group2(), 0, 1, 2, 1))),
        );
    }
}
impl GeometricAntiProduct<TripleNum> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       21        0
    //    simd4        2        3        0
    // Totals...
    // yes simd       11       24        0
    //  no simd       17       33        0
    fn geometric_anti_product(self, other: TripleNum) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[2]) + (other.group0()[0] * self.group1()[0])),
                ((self.group0()[1] * other.group0()[2]) + (other.group0()[0] * self.group1()[1])),
                ((self.group0()[2] * other.group0()[2]) + (other.group0()[0] * self.group1()[2])),
                (other.group0()[2] * self.group2()[3]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[1]) + (other.group0()[0] * self.group2()[0]) + (other.group0()[2] * self.group1()[0])),
                ((self.group0()[1] * other.group0()[1]) + (other.group0()[0] * self.group2()[1]) + (other.group0()[2] * self.group1()[1])),
                ((self.group0()[2] * other.group0()[1]) + (other.group0()[0] * self.group2()[2]) + (other.group0()[2] * self.group1()[2])),
                (other.group0()[2] * self.group1()[3]),
            ]),
            // e235, e315, e125, e5
            ((Simd32x4::from(other.group0()[1]) * self.group1()) + (Simd32x4::from([other.group0()[2], other.group0()[2], other.group0()[2], other.group0()[1]]) * self.group2())),
            // e1, e2, e3, e4
            (-Simd32x4::from([
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[2] * other.group0()[1]),
                (other.group0()[0] * self.group1()[3]),
            ]) + (Simd32x4::from(other.group0()[0]) * self.group2())),
        );
    }
}
impl GeometricAntiProduct<VersorEven> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       68       84        0
    //    simd4       23       23        0
    // Totals...
    // yes simd       91      107        0
    //  no simd      160      176        0
    fn geometric_anti_product(self, other: VersorEven) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) + (self.group0()[1] * other.group3()[2]) - (self.group0()[2] * other.group3()[1])
                    + (self.group1()[0] * other.group3()[3])
                    + (self.group1()[1] * other.group0()[2])
                    + (self.group2()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group3()[2])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group0()[2] * other.group3()[0])
                    + (self.group1()[1] * other.group3()[3])
                    + (self.group1()[2] * other.group0()[0])
                    + (self.group2()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group1()[0] * other.group0()[1])
                    + (self.group1()[2] * other.group3()[3])
                    + (self.group2()[3] * other.group0()[2])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group1()[3]]) * swizzle!(other.group1(), 3, 3, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]) * swizzle!(self.group1(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[1]]) * swizzle!(self.group1(), 2, 0, 1, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(self.group0()[2] * other.group2()[1])
                    + (self.group1()[3] * other.group3()[0])
                    + (self.group2()[0] * other.group3()[3])
                    + (self.group2()[1] * other.group0()[2])
                    + (self.group2()[3] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[2])
                    + (self.group1()[3] * other.group3()[1])
                    + (self.group2()[1] * other.group3()[3])
                    + (self.group2()[2] * other.group0()[0])
                    + (self.group2()[3] * other.group1()[1])),
                (-(self.group0()[1] * other.group2()[0])
                    + (self.group1()[2] * other.group0()[3])
                    + (self.group1()[3] * other.group3()[2])
                    + (self.group2()[0] * other.group0()[1])
                    + (self.group2()[2] * other.group3()[3])),
                ((self.group0()[2] * other.group2()[2])
                    - (self.group1()[1] * other.group3()[1])
                    - (self.group1()[2] * other.group3()[2])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 3, 3, 1, 0))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[2], self.group0()[1]]) * swizzle!(other.group2(), 2, 0, 3, 1))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group2()[3], self.group2()[3]]) * swizzle!(other.group1(), 2, 0, 2, 3))
                + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group0()[3]]) * swizzle!(self.group1(), 0, 1, 0, 3))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (swizzle!(self.group2(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group1()[3] * other.group2()[0]) + (self.group2()[3] * other.group2()[0])),
                ((self.group1()[3] * other.group2()[1]) + (self.group2()[3] * other.group2()[1])),
                ((self.group1()[3] * other.group2()[2]) + (self.group2()[3] * other.group2()[2])),
                (-(self.group1()[1] * other.group2()[1]) - (self.group1()[2] * other.group2()[2])),
            ]) + (Simd32x4::from(self.group2()[0]) * Simd32x4::from([other.group0()[3], other.group3()[2], other.group1()[1], other.group3()[0]]))
                - (Simd32x4::from(self.group2()[0]) * Simd32x4::from([other.group1()[3], other.group1()[2], other.group3()[1], other.group1()[0]]))
                + (Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group1()[2], other.group0()[3], other.group3()[0], other.group3()[1]]))
                - (Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group3()[2], other.group1()[3], other.group1()[0], other.group1()[1]]))
                - (Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[3], other.group1()[2]]))
                + (Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group0()[3], other.group3()[2]]))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[2], self.group2()[3]]) * swizzle!(other.group2(), 2, 0, 3, 3))
                + (swizzle!(self.group1(), 0, 1, 0, 3) * swizzle!(other.group2(), 3, 3, 1, 3))
                - (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group2(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[1])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[0])
                    + (self.group2()[0] * other.group3()[3])
                    + (self.group2()[1] * other.group0()[2])
                    + (self.group2()[3] * other.group3()[0])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[1] * other.group2()[3]) - (self.group0()[2] * other.group2()[0])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[1])
                    + (self.group2()[1] * other.group3()[3])
                    + (self.group2()[2] * other.group0()[0])
                    + (self.group2()[3] * other.group3()[1])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[0]) - (self.group0()[2] * other.group2()[3])
                    + (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])
                    + (self.group2()[0] * other.group0()[1])
                    + (self.group2()[2] * other.group3()[3])
                    + (self.group2()[3] * other.group3()[2])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group3()[3])),
            ]) + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[3]]) * swizzle!(other.group3(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<VersorOdd> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       72        0
    //    simd4       26       26        0
    // Totals...
    // yes simd       82       98        0
    //  no simd      160      176        0
    fn geometric_anti_product(self, other: VersorOdd) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[2])
                    + (self.group0()[2] * other.group3()[1])
                    + (self.group1()[0] * other.group2()[3])
                    + (self.group1()[1] * other.group0()[2])
                    + (self.group2()[3] * other.group0()[0])),
                ((self.group0()[0] * other.group3()[2])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group1()[1] * other.group2()[3])
                    + (self.group1()[2] * other.group0()[0])
                    + (self.group2()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[1])
                    + (self.group0()[1] * other.group3()[0])
                    + (self.group1()[0] * other.group0()[1])
                    + (self.group1()[2] * other.group2()[3])
                    + (self.group2()[3] * other.group0()[2])),
                (-(self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])),
            ]) - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group1()[2], other.group3()[1], other.group2()[0]]))
                - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group3()[2], other.group1()[3], other.group1()[0], other.group2()[1]]))
                - (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[3], other.group2()[2]]))
                + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group2()[2]) + (self.group2()[3] * other.group1()[0])),
                ((self.group0()[1] * other.group3()[3]) + (self.group0()[2] * other.group2()[0]) + (self.group2()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[2] * other.group3()[3]) + (self.group2()[3] * other.group1()[2])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2]) - (self.group1()[2] * other.group3()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[3]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group2()[3], other.group0()[2]]) * swizzle!(self.group2(), 1, 2, 2, 2))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[1], other.group0()[1]]) * swizzle!(self.group2(), 0, 1, 0, 1))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group3(), 0, 1, 2, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group1()[3] * other.group2()[0]) + (self.group2()[0] * other.group0()[3]) + (self.group2()[0] * other.group1()[3]) + (self.group2()[1] * other.group1()[2])
                    - (self.group2()[2] * other.group3()[1])
                    + (self.group2()[3] * other.group2()[0])),
                ((self.group1()[3] * other.group2()[1]) - (self.group2()[0] * other.group3()[2])
                    + (self.group2()[1] * other.group0()[3])
                    + (self.group2()[1] * other.group1()[3])
                    + (self.group2()[2] * other.group1()[0])
                    + (self.group2()[3] * other.group2()[1])),
                ((self.group1()[3] * other.group2()[2]) + (self.group2()[0] * other.group1()[1]) - (self.group2()[1] * other.group3()[0])
                    + (self.group2()[2] * other.group0()[3])
                    + (self.group2()[2] * other.group1()[3])
                    + (self.group2()[3] * other.group2()[2])),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2]) + (self.group0()[2] * other.group3()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group2()[3])),
            ]) + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[3]]) * swizzle!(other.group2(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[1]]) * swizzle!(other.group3(), 2, 0, 1, 1))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) + (self.group1()[0] * other.group1()[3]) + (self.group2()[2] * other.group0()[1]) + (self.group2()[3] * other.group3()[0])),
                ((self.group0()[2] * other.group2()[0]) + (self.group1()[1] * other.group1()[3]) + (self.group2()[0] * other.group0()[2]) + (self.group2()[3] * other.group3()[1])),
                ((self.group0()[0] * other.group2()[1]) + (self.group1()[2] * other.group1()[3]) + (self.group2()[1] * other.group0()[0]) + (self.group2()[3] * other.group3()[2])),
                (-(self.group2()[1] * other.group1()[1])
                    - (self.group2()[1] * other.group3()[1])
                    - (self.group2()[2] * other.group1()[2])
                    - (self.group2()[2] * other.group3()[2])),
            ]) + (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[3]]) * swizzle!(other.group3(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group2()[3], other.group3()[0]]) * swizzle!(self.group2(), 1, 2, 2, 0))
                - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[2]]) * swizzle!(self.group1(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 0, 1, 0, 0))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group2()[1]]) * swizzle!(self.group1(), 2, 0, 1, 1))),
        );
    }
}
impl GeometricAntiProduct<VersorRoundPoint> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       26       45        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       32       51        0
    //  no simd       50       69        0
    fn geometric_anti_product(self, other: VersorRoundPoint) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((other.group1()[1] * self.group0()[0]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (self.group1()[0] * other.group0()[3])),
                ((other.group1()[1] * self.group0()[1]) - (self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3])),
                ((other.group1()[1] * self.group0()[2]) + (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[3])),
                (other.group1()[1] * self.group2()[3]),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group1()[0] * self.group0()[0]) + (self.group1()[3] * other.group0()[0]) + (self.group2()[0] * other.group0()[3])),
                ((other.group1()[0] * self.group0()[1]) + (self.group1()[3] * other.group0()[1]) + (self.group2()[1] * other.group0()[3])),
                ((other.group1()[0] * self.group0()[2]) + (self.group1()[3] * other.group0()[2]) + (self.group2()[2] * other.group0()[3])),
                (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group1()[1]) * self.group1())),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group2()[1] * other.group0()[2]) * -1.0),
                ((self.group2()[2] * other.group0()[0]) * -1.0),
                ((self.group2()[0] * other.group0()[1]) * -1.0),
                ((self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group1()[0]) * self.group1())
                + (Simd32x4::from([other.group1()[1], other.group1()[1], other.group1()[1], other.group1()[0]]) * self.group2())
                + (swizzle!(self.group2(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group1()[0] * self.group0()[0]) + (self.group2()[0] * other.group0()[3]) + (self.group2()[3] * other.group0()[0])),
                (-(other.group1()[0] * self.group0()[1]) + (self.group2()[1] * other.group0()[3]) + (self.group2()[3] * other.group0()[1])),
                (-(other.group1()[0] * self.group0()[2]) + (self.group2()[2] * other.group0()[3]) + (self.group2()[3] * other.group0()[2])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other.group0()[3])),
            ]) + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<VersorSphere> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       33        0
    //    simd4        8       10        0
    // Totals...
    // yes simd       26       43        0
    //  no simd       50       73        0
    fn geometric_anti_product(self, other: VersorSphere) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((other.group1()[0] * self.group1()[0]) + (other.group1()[1] * self.group0()[0]) - (self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((other.group1()[0] * self.group1()[1]) + (other.group1()[1] * self.group0()[1]) + (self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                ((other.group1()[0] * self.group1()[2]) + (other.group1()[1] * self.group0()[2]) - (self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (other.group1()[1] * self.group2()[3]),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group1()[0] * self.group2()[0]) + (other.group1()[1] * self.group1()[0]) + (self.group0()[0] * other.group0()[3])),
                ((other.group1()[0] * self.group2()[1]) + (other.group1()[1] * self.group1()[1]) + (self.group0()[1] * other.group0()[3])),
                ((other.group1()[0] * self.group2()[2]) + (other.group1()[1] * self.group1()[2]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]]))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group2()[2] * other.group0()[1]) * -1.0),
                ((self.group2()[0] * other.group0()[2]) * -1.0),
                ((self.group2()[1] * other.group0()[0]) * -1.0),
                (-(other.group1()[0] * self.group1()[3]) + (self.group0()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([other.group1()[1], other.group1()[1], other.group1()[1], other.group1()[0]]) * self.group2())
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[1]]) * swizzle!(other.group0(), 2, 0, 1, 1))),
            // e4235, e4315, e4125, e3215
            ((swizzle!(self.group2(), 3, 3, 3, 2) * swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([other.group1()[0], other.group1()[0], other.group1()[0], other.group0()[0]]) * swizzle!(self.group2(), 0, 1, 2, 0))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))),
        );
    }
}
impl InfixGeometricAntiProduct for Dipole {}
impl GeometricAntiProduct<AntiCircleRotor> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       46       62        0
    //    simd4       12       12        0
    // Totals...
    // yes simd       58       74        0
    //  no simd       94      110        0
    fn geometric_anti_product(self, other: AntiCircleRotor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (-(other.group0()[2] * self.group1()[1]) - (self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group1()[2])),
                (-(other.group0()[1] * self.group1()[3]) - (self.group0()[1] * other.group2()[3]) - (self.group0()[2] * other.group1()[0])),
                (-(other.group0()[2] * self.group1()[3]) - (self.group0()[0] * other.group1()[1]) - (self.group0()[2] * other.group2()[3])),
                ((other.group0()[0] * self.group2()[0])
                    + (other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])
                    + (self.group0()[0] * other.group2()[0])
                    + (self.group0()[1] * other.group2()[1])
                    + (self.group0()[2] * other.group2()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group1()[3]]) * swizzle!(self.group1(), 3, 2, 0, 3))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group1()[1]]) * swizzle!(other.group1(), 3, 2, 0, 1))
                + (Simd32x4::from([self.group0()[2], self.group0()[1], self.group0()[2], self.group1()[2]]) * swizzle!(other.group1(), 1, 3, 3, 2))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1]) + (other.group1()[1] * self.group1()[2]) - (other.group1()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group0()[2] * self.group2()[0]) - (other.group1()[0] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) + (other.group1()[0] * self.group1()[1]) - (other.group1()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2]) - (self.group0()[2] * other.group2()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[3]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[1]]) * swizzle!(other.group2(), 3, 3, 3, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group2()[0] * other.group1()[3])
                    - (self.group2()[0] * other.group2()[3])
                    - (self.group2()[1] * other.group1()[2])
                    - (other.group2()[2] * self.group1()[1])),
                (-(self.group2()[1] * other.group1()[3])
                    - (self.group2()[1] * other.group2()[3])
                    - (self.group2()[2] * other.group1()[0])
                    - (other.group2()[0] * self.group1()[2])),
                (-(self.group2()[0] * other.group1()[1])
                    - (self.group2()[2] * other.group1()[3])
                    - (self.group2()[2] * other.group2()[3])
                    - (other.group2()[1] * self.group1()[0])),
                ((self.group2()[1] * other.group1()[1]) + (self.group2()[2] * other.group1()[2]) + (other.group2()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group2()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (swizzle!(other.group2(), 0, 1, 0, 0) * swizzle!(self.group1(), 3, 3, 1, 0))
                + (swizzle!(other.group2(), 1, 2, 2, 1) * swizzle!(self.group1(), 2, 0, 3, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1]) + (self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group0()[2] * self.group2()[0]) - (self.group0()[0] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[0])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) + (self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0])),
                ((other.group0()[2] * self.group1()[2]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1]) + (self.group0()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[1]]) * swizzle!(self.group1(), 0, 1, 2, 1))),
        );
    }
}
impl GeometricAntiProduct<AntiDipoleInversion> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       66       82        0
    //    simd4       17       17        0
    // Totals...
    // yes simd       83       99        0
    //  no simd      134      150        0
    fn geometric_anti_product(self, other: AntiDipoleInversion) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3])
                    + (other.group0()[2] * self.group1()[1])
                    + (self.group0()[0] * other.group1()[3])
                    + (self.group0()[1] * other.group1()[2])
                    + (self.group0()[1] * other.group3()[2])
                    - (self.group0()[2] * other.group3()[1])
                    + (other.group2()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group1()[3]) - (self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group0()[2] * other.group3()[0])
                    + (other.group2()[3] * self.group1()[1])),
                ((other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group1()[3]) + (self.group0()[0] * other.group1()[1]) + (self.group0()[0] * other.group3()[1])
                    - (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (other.group2()[3] * self.group1()[2])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[1])
                    + (self.group0()[1] * other.group2()[2])
                    + (self.group2()[0] * other.group2()[3])
                    - (other.group1()[1] * self.group1()[2])
                    - (other.group3()[0] * self.group1()[3])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group2()[0]) + (self.group0()[2] * other.group2()[0]) + (self.group2()[1] * other.group2()[3])
                    - (other.group1()[2] * self.group1()[0])
                    - (other.group3()[1] * self.group1()[3])),
                (-(other.group0()[0] * self.group2()[1])
                    + (other.group0()[1] * self.group2()[0])
                    + (self.group0()[0] * other.group2()[1])
                    + (self.group2()[2] * other.group2()[3])
                    - (other.group1()[0] * self.group1()[1])
                    - (other.group3()[2] * self.group1()[3])),
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    + (other.group3()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group3()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group2()[1] * other.group1()[2]) + (self.group2()[2] * other.group3()[1]) + (other.group3()[3] * self.group1()[0])),
                ((self.group2()[0] * other.group3()[2]) + (self.group2()[2] * other.group1()[0]) + (other.group3()[3] * self.group1()[1])),
                ((self.group2()[0] * other.group1()[1]) + (self.group2()[1] * other.group3()[0]) + (other.group3()[3] * self.group1()[2])),
                (-(other.group0()[2] * self.group1()[2])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])),
            ]) - (Simd32x4::from([self.group2()[0], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 3, 2, 0, 0))
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group3(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group1(), 1, 3, 3, 1))
                - (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[0], other.group0()[0]]) * swizzle!(self.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[2], other.group0()[1]]) * swizzle!(self.group1(), 2, 0, 3, 1))
                + (swizzle!(other.group2(), 2, 0, 1, 3) * swizzle!(self.group1(), 1, 2, 0, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1]) + (self.group0()[1] * other.group2()[2]) + (other.group1()[0] * self.group1()[3])),
                (-(other.group0()[0] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[0])
                    + (self.group0()[2] * other.group2()[0])
                    + (other.group1()[1] * self.group1()[3])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) + (self.group0()[0] * other.group2()[1]) + (other.group1()[2] * self.group1()[3])),
                (-(self.group2()[1] * other.group1()[1]) - (self.group2()[2] * other.group1()[2]) + (self.group2()[2] * other.group3()[2])
                    - (other.group3()[3] * self.group1()[3])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[1]]) * swizzle!(other.group2(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group2()[2]]) * swizzle!(self.group1(), 1, 2, 0, 2))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[1]]) * swizzle!(other.group3(), 1, 2, 0, 1))),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum321> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       17        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        6       19        0
    //  no simd        6       25        0
    fn geometric_anti_product(self, other: AntiDualNum321) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group0()[2])),
                (other.group0()[0] * self.group1()[3] * -1.0),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from(other.group0()[1]) * self.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(other.group0()[0] * self.group2()[0]) - (other.group0()[1] * self.group2()[0])),
                (-(other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[1])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group2()[2])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[0] * self.group1()[0]),
                (other.group0()[0] * self.group1()[1]),
                (other.group0()[0] * self.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum4> for Dipole {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       17        0
    //    simd3        1        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        4       20        0
    //  no simd        6       27        0
    fn geometric_anti_product(self, other: AntiDualNum4) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (-(Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]])) - (Simd32x3::from(other.group0()[1]) * self.group0())),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group2()[0]) - (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3]),
            ]),
            // e235, e315, e125, e4
            (Simd32x4::from([
                (other.group0()[1] * self.group2()[0]),
                (other.group0()[1] * self.group2()[1]),
                (other.group0()[1] * self.group2()[2]),
                (other.group0()[0] * self.group1()[3]),
            ]) * Simd32x4::from(-1.0)),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[0] * self.group2()[0] * -1.0),
                (other.group0()[0] * self.group2()[1] * -1.0),
                (other.group0()[0] * self.group2()[2] * -1.0),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum5> for Dipole {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       13        0
    //    simd3        0        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        6       16        0
    //  no simd        6       23        0
    fn geometric_anti_product(self, other: AntiDualNum5) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other.group0()[1]) * self.group0() * Simd32x3::from(-1.0)),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group1()[1])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group2()[0])),
                (-(other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group2()[1])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group2()[2])),
                0.0,
            ]),
            // e1, e2, e3, e5
            (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])),
        );
    }
}
impl GeometricAntiProduct<AntiFlatPoint> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       24        0
    //    simd4        3        5        0
    // Totals...
    // yes simd       16       29        0
    //  no simd       25       44        0
    fn geometric_anti_product(self, other: AntiFlatPoint) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (other.group0()[3] * self.group1()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[2] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group2()[0] * other.group0()[3]) - (other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[1])),
                (-(self.group2()[1] * other.group0()[3]) + (other.group0()[0] * self.group1()[2])
                    - (other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group1()[0])),
                (-(self.group2()[2] * other.group0()[3]) - (other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0])
                    - (other.group0()[2] * self.group1()[3])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[2]])
                * swizzle!(other.group0(), 2, 0, 1, 2)
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (swizzle!(other.group0(), 3, 3, 3, 1) * swizzle!(self.group1(), 0, 1, 2, 1))),
        );
    }
}
impl GeometricAntiProduct<AntiFlector> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       48        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       40       56        0
    //  no simd       64       80        0
    fn geometric_anti_product(self, other: AntiFlector) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[3]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (other.group0()[3] * self.group1()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (other.group1()[0] * self.group1()[3])),
                ((self.group0()[2] * other.group0()[0]) - (other.group1()[1] * self.group1()[3])),
                ((self.group0()[0] * other.group0()[1]) - (other.group1()[2] * self.group1()[3])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (other.group1()[1] * self.group1()[1])
                    + (other.group1()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(self.group2()[0] * other.group0()[3]) + (self.group2()[2] * other.group1()[1])
                    - (other.group0()[0] * self.group1()[3])
                    - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (other.group1()[3] * self.group1()[0])),
                ((self.group2()[0] * other.group1()[2]) - (self.group2()[1] * other.group0()[3]) + (other.group0()[0] * self.group1()[2])
                    - (other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group1()[0])
                    + (other.group1()[3] * self.group1()[1])),
                ((self.group2()[1] * other.group1()[0]) - (self.group2()[2] * other.group0()[3]) - (other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0])
                    - (other.group0()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[2] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                ((self.group2()[2] * other.group1()[2]) - (other.group1()[3] * self.group1()[3])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]) * swizzle!(self.group1(), 1, 2, 0, 2))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))
                - (swizzle!(other.group0(), 3, 3, 3, 1) * swizzle!(self.group1(), 0, 1, 2, 1))),
        );
    }
}
impl GeometricAntiProduct<AntiLine> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       52        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       38       54        0
    //  no simd       44       60        0
    fn geometric_anti_product(self, other: AntiLine) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[0])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[2])
                    + (other.group1()[0] * self.group0()[0])
                    + (other.group1()[1] * self.group0()[1])
                    + (other.group1()[2] * self.group0()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1]) + (other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group1()[0]) - (other.group1()[0] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) + (other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0])),
                (-(other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1]) - (other.group1()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group0()[2] * self.group2()[0]) - (other.group1()[0] * self.group1()[2])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) - (other.group1()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2]) + (other.group1()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[0], other.group1()[0]]) * swizzle!(self.group1(), 3, 3, 1, 0))
                + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[2], other.group1()[1]]) * swizzle!(self.group1(), 2, 0, 3, 1))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[1] * self.group1()[3]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])),
                ((other.group0()[2] * self.group1()[3]) - (other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiMotor> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       49        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       40       57        0
    //  no simd       64       81        0
    fn geometric_anti_product(self, other: AntiMotor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group0()[2])),
                (-(self.group0()[1] * other.group0()[3]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) - (self.group0()[2] * other.group0()[3])),
                ((self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[2])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group1()[1]) - (other.group0()[2] * self.group1()[1]) - (other.group0()[3] * self.group1()[0])),
                ((self.group0()[0] * other.group1()[2]) - (other.group0()[0] * self.group1()[2]) - (other.group0()[3] * self.group1()[1])),
                ((self.group0()[1] * other.group1()[0]) - (other.group0()[1] * self.group1()[0]) - (other.group0()[3] * self.group1()[2])),
                ((self.group0()[2] * other.group1()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group0()[0]]) * swizzle!(other.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[2], self.group0()[1]]) * swizzle!(other.group1(), 2, 0, 3, 1))
                + (swizzle!(other.group0(), 1, 2, 0, 3) * swizzle!(self.group1(), 2, 0, 1, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group2()[0] * other.group0()[3])
                    - (self.group2()[1] * other.group0()[2])
                    - (other.group1()[2] * self.group1()[1])
                    - (other.group1()[3] * self.group1()[0])),
                (-(self.group2()[1] * other.group0()[3])
                    - (self.group2()[2] * other.group0()[0])
                    - (other.group1()[0] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[1])),
                (-(self.group2()[0] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[3])
                    - (other.group1()[1] * self.group1()[0])
                    - (other.group1()[3] * self.group1()[2])),
                ((self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2]) + (other.group1()[2] * self.group1()[2]) + (other.group1()[3] * self.group1()[3])),
            ]) + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (swizzle!(other.group1(), 0, 1, 0, 0) * swizzle!(self.group1(), 3, 3, 1, 0))
                + (swizzle!(other.group1(), 1, 2, 2, 1) * swizzle!(self.group1(), 2, 0, 3, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[3])),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[0]]) * swizzle!(other.group0(), 0, 1, 2, 0))),
        );
    }
}
impl GeometricAntiProduct<AntiPlane> for Dipole {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       17        0
    //    simd3        1        2        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       11       24        0
    //  no simd       28       43        0
    fn geometric_anti_product(self, other: AntiPlane) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (-(Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) * -1.0),
                ((other.group0()[1] * self.group1()[3]) * -1.0),
                ((other.group0()[2] * self.group1()[3]) * -1.0),
                ((other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group2()[2] * other.group0()[1]) + (other.group0()[3] * self.group1()[0])),
                ((self.group2()[0] * other.group0()[2]) + (other.group0()[3] * self.group1()[1])),
                ((self.group2()[1] * other.group0()[0]) + (other.group0()[3] * self.group1()[2])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([0.0, 0.0, 0.0, (self.group2()[2] * other.group0()[2])])
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))
                - (swizzle!(other.group0(), 2, 0, 1, 3) * swizzle!(self.group1(), 1, 2, 0, 3))),
        );
    }
}
impl GeometricAntiProduct<AntiQuadNum> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       24       42        0
    fn geometric_anti_product(self, other: AntiQuadNum) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[0] * other.group0()[3]) - (other.group0()[0] * self.group1()[0])),
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[1] * other.group0()[3]) - (other.group0()[0] * self.group1()[1])),
                ((self.group0()[2] * other.group0()[2]) - (self.group0()[2] * other.group0()[3]) - (other.group0()[0] * self.group1()[2])),
                (other.group0()[2] * self.group1()[3] * -1.0),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[1]) - (self.group2()[0] * other.group0()[0]) - (other.group0()[3] * self.group1()[0])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group2()[1] * other.group0()[0]) - (other.group0()[3] * self.group1()[1])),
                (-(self.group0()[2] * other.group0()[1]) - (self.group2()[2] * other.group0()[0]) - (other.group0()[3] * self.group1()[2])),
                (other.group0()[3] * self.group1()[3]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group2()[0] * other.group0()[2]) - (self.group2()[0] * other.group0()[3]) - (other.group0()[1] * self.group1()[0])),
                (-(self.group2()[1] * other.group0()[2]) - (self.group2()[1] * other.group0()[3]) - (other.group0()[1] * self.group1()[1])),
                (-(self.group2()[2] * other.group0()[2]) - (self.group2()[2] * other.group0()[3]) - (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[1]) - (self.group2()[0] * other.group0()[0]) + (other.group0()[2] * self.group1()[0])),
                ((self.group0()[1] * other.group0()[1]) - (self.group2()[1] * other.group0()[0]) + (other.group0()[2] * self.group1()[1])),
                ((self.group0()[2] * other.group0()[1]) - (self.group2()[2] * other.group0()[0]) + (other.group0()[2] * self.group1()[2])),
                (other.group0()[0] * self.group1()[3] * -1.0),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiScalar> for Dipole {
    type Output = Dipole;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0       10        0
    fn geometric_anti_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return Dipole::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other[e12345]) * self.group0()),
            // e23, e31, e12, e45
            (Simd32x4::from(other[e12345]) * self.group1()),
            // e15, e25, e35
            (Simd32x3::from(other[e12345]) * self.group2()),
        );
    }
}
impl GeometricAntiProduct<AntiTripleNum> for Dipole {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       25        0
    //    simd3        1        2        0
    // Totals...
    // yes simd       13       27        0
    //  no simd       15       31        0
    fn geometric_anti_product(self, other: AntiTripleNum) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (-(Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]])) - (Simd32x3::from(other.group0()[2]) * self.group0())),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group2()[0]) - (other.group0()[1] * self.group0()[0]) - (other.group0()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group1()[2])),
                (other.group0()[2] * self.group1()[3]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (-(other.group0()[1] * self.group1()[0]) - (other.group0()[2] * self.group2()[0])),
                (-(other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group2()[1])),
                (-(other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group2()[2])),
                (other.group0()[0] * self.group1()[3] * -1.0),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (-(other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group0()[1])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group0()[2])),
                (other.group0()[1] * self.group1()[3]),
            ]),
        );
    }
}
impl GeometricAntiProduct<Circle> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       72        0
    //    simd4        7        7        0
    // Totals...
    // yes simd       63       79        0
    //  no simd       84      100        0
    fn geometric_anti_product(self, other: Circle) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[2] * self.group1()[1]) + (self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group1()[3]) + (self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group1()[0])),
                ((other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group1()[3]) + (self.group0()[0] * other.group1()[1]) + (self.group0()[2] * other.group1()[3])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1]) - (other.group2()[1] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[1])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group2()[0]) + (other.group2()[0] * self.group0()[2]) - (other.group2()[2] * self.group0()[0])
                    + (other.group1()[0] * self.group1()[2])
                    - (other.group1()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) - (other.group2()[0] * self.group0()[1])
                    + (other.group2()[1] * self.group0()[0])
                    - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group2()[2] * self.group1()[1]) + (self.group2()[1] * other.group1()[2])),
                ((other.group2()[0] * self.group1()[2]) + (self.group2()[2] * other.group1()[0])),
                ((other.group2()[1] * self.group1()[0]) + (self.group2()[0] * other.group1()[1])),
                (-(other.group0()[2] * self.group1()[2]) - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[0], other.group0()[0]]) * swizzle!(self.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[2], other.group0()[1]]) * swizzle!(self.group1(), 2, 0, 3, 1))
                - (Simd32x4::from([self.group2()[0], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 3, 2, 0, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group1(), 1, 3, 3, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1]) - (other.group2()[1] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[1])
                    + (other.group1()[0] * self.group1()[3])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group0()[2] * self.group2()[0]) + (other.group2()[0] * self.group0()[2])
                    - (other.group2()[2] * self.group0()[0])
                    + (other.group1()[1] * self.group1()[3])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) - (other.group2()[0] * self.group0()[1])
                    + (other.group2()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group1()[3])),
                (-(other.group2()[1] * self.group1()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (self.group2()[0] * other.group1()[0])
                    - (self.group2()[1] * other.group1()[1])
                    - (self.group2()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))),
        );
    }
}
impl GeometricAntiProduct<CircleRotor> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       54       70        0
    //    simd4       10       10        0
    // Totals...
    // yes simd       64       80        0
    //  no simd       94      110        0
    fn geometric_anti_product(self, other: CircleRotor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3])
                    + (other.group0()[2] * self.group1()[1])
                    + (self.group0()[0] * other.group1()[3])
                    + (self.group0()[0] * other.group2()[3])
                    + (self.group0()[1] * other.group1()[2])),
                ((other.group0()[0] * self.group1()[2])
                    + (other.group0()[1] * self.group1()[3])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[1] * other.group2()[3])
                    + (self.group0()[2] * other.group1()[0])),
                ((other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (self.group0()[0] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group0()[2] * other.group2()[3])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1]) - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group2()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group2()[0]) + (other.group1()[0] * self.group1()[2]) - (other.group1()[2] * self.group1()[0])
                    + (other.group2()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group2()[3] * self.group1()[2])),
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[3]]) * swizzle!(other.group2(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group2()[0] * other.group2()[3]) + (self.group2()[1] * other.group1()[2]) + (other.group2()[2] * self.group1()[1])),
                ((self.group2()[1] * other.group2()[3]) + (self.group2()[2] * other.group1()[0]) + (other.group2()[0] * self.group1()[2])),
                ((self.group2()[0] * other.group1()[1]) + (self.group2()[2] * other.group2()[3]) + (other.group2()[1] * self.group1()[0])),
                (-(other.group0()[2] * self.group1()[2]) - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group2()[0], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 3, 2, 0, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group1(), 1, 3, 3, 1))
                - (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[0], other.group0()[0]]) * swizzle!(self.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[2], other.group0()[1]]) * swizzle!(self.group1(), 2, 0, 3, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1]) + (self.group0()[1] * other.group2()[2]) + (other.group1()[0] * self.group1()[3])),
                (-(other.group0()[0] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[0])
                    + (self.group0()[2] * other.group2()[0])
                    + (other.group1()[1] * self.group1()[3])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) + (self.group0()[0] * other.group2()[1]) + (other.group1()[2] * self.group1()[3])),
                (-(self.group2()[1] * other.group1()[1])
                    - (self.group2()[2] * other.group1()[2])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))),
        );
    }
}
impl GeometricAntiProduct<Dipole> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       48       64        0
    //    simd4        9        9        0
    // Totals...
    // yes simd       57       73        0
    //  no simd       84      100        0
    fn geometric_anti_product(self, other: Dipole) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (-(other.group0()[2] * self.group1()[1]) - (self.group0()[1] * other.group1()[2])),
                (-(other.group0()[1] * self.group1()[3]) - (self.group0()[2] * other.group1()[0])),
                (-(other.group0()[2] * self.group1()[3]) - (self.group0()[0] * other.group1()[1])),
                ((other.group0()[0] * self.group2()[0])
                    + (other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])
                    + (other.group2()[0] * self.group0()[0])
                    + (other.group2()[1] * self.group0()[1])
                    + (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group1()[3]]) * swizzle!(self.group1(), 3, 2, 0, 3))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group1()[1]]) * swizzle!(other.group1(), 3, 2, 0, 1))
                + (Simd32x4::from([self.group0()[2], self.group0()[1], self.group0()[2], self.group1()[2]]) * swizzle!(other.group1(), 1, 3, 3, 2))),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1]) + (other.group2()[1] * self.group0()[2]) - (other.group2()[2] * self.group0()[1])
                    + (other.group1()[1] * self.group1()[2])
                    - (other.group1()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group0()[2] * self.group2()[0]) - (other.group2()[0] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[0])
                    - (other.group1()[0] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) + (other.group2()[0] * self.group0()[1]) - (other.group2()[1] * self.group0()[0])
                    + (other.group1()[0] * self.group1()[1])
                    - (other.group1()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(other.group2()[2] * self.group1()[1]) - (self.group2()[0] * other.group1()[3]) - (self.group2()[1] * other.group1()[2])),
                (-(other.group2()[0] * self.group1()[2]) - (self.group2()[1] * other.group1()[3]) - (self.group2()[2] * other.group1()[0])),
                (-(other.group2()[1] * self.group1()[0]) - (self.group2()[0] * other.group1()[1]) - (self.group2()[2] * other.group1()[3])),
                ((other.group2()[2] * self.group1()[2]) + (self.group2()[1] * other.group1()[1]) + (self.group2()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[0], other.group2()[0]]) * swizzle!(self.group1(), 3, 3, 1, 0))
                + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[2], other.group2()[1]]) * swizzle!(self.group1(), 2, 0, 3, 1))
                + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group2()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1]) - (other.group2()[1] * self.group0()[2]) + (other.group2()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group0()[2] * self.group2()[0]) + (other.group2()[0] * self.group0()[2])
                    - (other.group2()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) - (other.group2()[0] * self.group0()[1]) + (other.group2()[1] * self.group0()[0])),
                ((other.group0()[2] * self.group1()[2]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1]) + (self.group0()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[1]]) * swizzle!(self.group1(), 0, 1, 2, 1))),
        );
    }
}
impl GeometricAntiProduct<DipoleInversion> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       58       74        0
    //    simd4       19       19        0
    // Totals...
    // yes simd       77       93        0
    //  no simd      134      150        0
    fn geometric_anti_product(self, other: DipoleInversion) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (-(self.group0()[2] * other.group3()[1])
                    - (other.group0()[0] * self.group1()[3])
                    - (other.group0()[2] * self.group1()[1])
                    - (self.group1()[0] * other.group2()[3])),
                (-(self.group0()[0] * other.group3()[2])
                    - (other.group0()[0] * self.group1()[2])
                    - (other.group0()[1] * self.group1()[3])
                    - (self.group1()[1] * other.group2()[3])),
                (-(self.group0()[1] * other.group3()[0])
                    - (other.group0()[1] * self.group1()[0])
                    - (other.group0()[2] * self.group1()[3])
                    - (self.group1()[2] * other.group2()[3])),
                ((self.group2()[0] * other.group0()[0])
                    + (self.group2()[1] * other.group0()[1])
                    + (self.group2()[2] * other.group0()[2])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[2] * other.group1()[2])),
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group1()[2], other.group3()[1], other.group2()[0]]))
                + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group3()[2], other.group1()[3], other.group1()[0], other.group2()[1]]))
                + (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[3], other.group2()[2]]))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[3]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group2()[1]) - (self.group2()[1] * other.group0()[2]) + (self.group2()[2] * other.group0()[1]) + (self.group1()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group2()[0] * other.group0()[2]) - (self.group2()[2] * other.group0()[0]) + (self.group1()[0] * other.group1()[2])),
                ((self.group0()[1] * other.group2()[0]) - (self.group2()[0] * other.group0()[1]) + (self.group2()[1] * other.group0()[0]) + (self.group1()[1] * other.group1()[0])),
                (-(self.group0()[2] * other.group2()[2])
                    + (self.group2()[0] * other.group0()[0])
                    + (self.group2()[1] * other.group0()[1])
                    + (self.group2()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group2(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group3()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group3(), 0, 1, 2, 2))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group2()[0] * other.group1()[3])
                    - (self.group2()[1] * other.group1()[2])
                    - (self.group2()[1] * other.group3()[2])
                    - (self.group1()[0] * other.group3()[3])
                    - (self.group1()[1] * other.group2()[2])),
                (-(self.group2()[1] * other.group1()[3])
                    - (self.group2()[2] * other.group1()[0])
                    - (self.group2()[2] * other.group3()[0])
                    - (self.group1()[1] * other.group3()[3])
                    - (self.group1()[2] * other.group2()[0])),
                (-(self.group2()[0] * other.group1()[1])
                    - (self.group2()[0] * other.group3()[1])
                    - (self.group2()[2] * other.group1()[3])
                    - (self.group1()[0] * other.group2()[1])
                    - (self.group1()[2] * other.group3()[3])),
                ((self.group2()[1] * other.group1()[1])
                    + (self.group2()[1] * other.group3()[1])
                    + (self.group2()[2] * other.group1()[2])
                    + (self.group2()[2] * other.group3()[2])
                    + (self.group1()[2] * other.group2()[2])
                    + (self.group1()[3] * other.group3()[3])),
            ]) + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group2()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group2()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                + (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group2(), 0, 1, 2, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group2()[2]) - (self.group2()[0] * other.group2()[3]) - (self.group2()[1] * other.group0()[2])
                    + (self.group2()[2] * other.group0()[1])),
                ((self.group0()[1] * other.group3()[3]) + (self.group0()[2] * other.group2()[0]) + (self.group2()[0] * other.group0()[2])
                    - (self.group2()[1] * other.group2()[3])
                    - (self.group2()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[2] * other.group3()[3]) - (self.group2()[0] * other.group0()[1]) + (self.group2()[1] * other.group0()[0])
                    - (self.group2()[2] * other.group2()[3])),
                ((self.group0()[1] * other.group1()[1]) - (self.group0()[1] * other.group3()[1]) + (self.group0()[2] * other.group1()[2]) - (self.group0()[2] * other.group3()[2])
                    + (other.group0()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[3]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[0]]) * swizzle!(other.group1(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group0()[0]]) * swizzle!(self.group1(), 0, 1, 0, 0))
                + (Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[3], other.group0()[1]]) * swizzle!(self.group1(), 1, 2, 2, 1))),
        );
    }
}
impl GeometricAntiProduct<DualNum321> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       20        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        6       21        0
    //  no simd        6       24        0
    fn geometric_anti_product(self, other: DualNum321) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[2])),
                (other.group0()[0] * self.group1()[3] * -1.0),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from(other.group0()[1]) * self.group1()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group2()[0])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[1])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group2()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group1()[0] * -1.0),
                (other.group0()[0] * self.group1()[1] * -1.0),
                (other.group0()[0] * self.group1()[2] * -1.0),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<DualNum4> for Dipole {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       17        0
    //    simd3        1        2        0
    // Totals...
    // yes simd        4       19        0
    //  no simd        6       23        0
    fn geometric_anti_product(self, other: DualNum4) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]])) + (Simd32x3::from(other.group0()[1]) * self.group0())),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[1] * self.group2()[0]),
                (other.group0()[1] * self.group2()[1]),
                (other.group0()[1] * self.group2()[2]),
                (other.group0()[0] * self.group1()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group2()[0] * -1.0),
                (other.group0()[0] * self.group2()[1] * -1.0),
                (other.group0()[0] * self.group2()[2] * -1.0),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<DualNum5> for Dipole {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       13        0
    //    simd3        0        1        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        6       16        0
    //  no simd        6       24        0
    fn geometric_anti_product(self, other: DualNum5) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other.group0()[1]) * self.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group1()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group2()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group2()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group2()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
    }
}
impl GeometricAntiProduct<FlatPoint> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       28        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       16       31        0
    //  no simd       25       40        0
    fn geometric_anti_product(self, other: FlatPoint) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (self.group0()[2] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (self.group0()[1] * other.group0()[0]),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group2()[0] * other.group0()[3]) - (self.group1()[1] * other.group0()[2])),
                (-(self.group2()[1] * other.group0()[3]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group2()[2] * other.group0()[3]) - (self.group1()[0] * other.group0()[1])),
                (self.group1()[2] * other.group0()[2]),
            ]) + (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (self.group1()[0] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[3])),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<Flector> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       48        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       40       56        0
    //  no simd       64       80        0
    fn geometric_anti_product(self, other: Flector) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other.group0()[3])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (self.group0()[2] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (self.group0()[1] * other.group0()[0]),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]) - (self.group1()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group1(), 0, 1, 2, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group2()[0] * other.group0()[3])
                    - (self.group2()[1] * other.group1()[2])
                    - (self.group1()[0] * other.group1()[3])
                    - (self.group1()[1] * other.group0()[2])),
                (-(self.group2()[1] * other.group0()[3])
                    - (self.group2()[2] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[3])
                    - (self.group1()[2] * other.group0()[0])),
                (-(self.group2()[0] * other.group1()[1])
                    - (self.group2()[2] * other.group0()[3])
                    - (self.group1()[0] * other.group0()[1])
                    - (self.group1()[2] * other.group1()[3])),
                ((self.group2()[1] * other.group1()[1]) + (self.group2()[2] * other.group1()[2]) + (self.group1()[2] * other.group0()[2]) + (self.group1()[3] * other.group1()[3])),
            ]) + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group2()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])
                    + (self.group1()[0] * other.group0()[3])
                    + (self.group1()[1] * other.group1()[2])),
                (-(self.group0()[0] * other.group0()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group0()[0])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group1()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group1()[0] * other.group1()[1])
                    + (self.group1()[2] * other.group0()[3])),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<Line> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       44       60        0
    fn geometric_anti_product(self, other: Line) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0]) + (other.group0()[0] * self.group1()[2])
                    - (other.group0()[2] * self.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) - (other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0])),
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group2()[1] * other.group0()[2]) - (self.group2()[2] * other.group0()[1]) - (other.group1()[0] * self.group1()[3]) - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])),
                (-(self.group2()[0] * other.group0()[2]) + (self.group2()[2] * other.group0()[0]) + (other.group1()[0] * self.group1()[2])
                    - (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group1()[0])),
                ((self.group2()[0] * other.group0()[1]) - (self.group2()[1] * other.group0()[0]) - (other.group1()[0] * self.group1()[1]) + (other.group1()[1] * self.group1()[0])
                    - (other.group1()[2] * self.group1()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) + (other.group0()[0] * self.group1()[3])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0]) + (other.group0()[1] * self.group1()[3])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (other.group0()[2] * self.group1()[3])),
                (-(self.group2()[0] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Motor> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       44       60        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       49       65        0
    //  no simd       64       80        0
    fn geometric_anti_product(self, other: Motor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])),
                ((self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group1()[0]) - (self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[2] * other.group1()[3]) - (self.group1()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[3])),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (swizzle!(self.group1(), 0, 1, 0, 3) * swizzle!(other.group0(), 3, 3, 1, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group2()[0] * other.group0()[3]) + (self.group2()[1] * other.group0()[2]) + (self.group1()[0] * other.group1()[3]) + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])
                    - (self.group1()[3] * other.group1()[0])),
                ((self.group2()[1] * other.group0()[3]) + (self.group2()[2] * other.group0()[0]) - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group1()[0])
                    - (self.group1()[3] * other.group1()[1])),
                ((self.group2()[0] * other.group0()[1]) + (self.group2()[2] * other.group0()[3]) + (self.group1()[0] * other.group1()[1]) - (self.group1()[1] * other.group1()[0])
                    + (self.group1()[2] * other.group1()[3])
                    - (self.group1()[3] * other.group1()[2])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) + (self.group1()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group1()[0]) + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[2] * other.group1()[3]) + (self.group1()[3] * other.group0()[2])),
                (-(self.group2()[0] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<MultiVector> for Dipole {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      116      142        0
    //    simd2        1        1        0
    //    simd3       34       36        0
    //    simd4       17       17        0
    // Totals...
    // yes simd      168      196        0
    //  no simd      288      320        0
    fn geometric_anti_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                (-(self.group0()[0] * other.group8()[0])
                    - (self.group0()[1] * other.group8()[1])
                    - (self.group0()[2] * other.group8()[2])
                    - (self.group2()[0] * other.group7()[0])
                    - (self.group2()[1] * other.group7()[1])
                    - (self.group2()[2] * other.group7()[2])
                    - (self.group1()[0] * other.group6()[0])
                    - (self.group1()[1] * other.group6()[1])
                    - (self.group1()[2] * other.group6()[2])),
                ((self.group0()[0] * other.group3()[0])
                    + (self.group0()[1] * other.group3()[1])
                    + (self.group0()[2] * other.group3()[2])
                    + (self.group2()[0] * other.group4()[0])
                    + (self.group2()[1] * other.group4()[1])
                    + (self.group2()[2] * other.group4()[2])
                    + (other.group5()[0] * self.group1()[0])
                    + (other.group5()[1] * self.group1()[1])
                    + (other.group5()[2] * self.group1()[2])),
            ]) - (Simd32x2::from(self.group1()[3]) * Simd32x2::from([other.group6()[3], other.group3()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group9()[3]) + (self.group0()[1] * other.group3()[2]) - (self.group0()[2] * other.group3()[1]) - (self.group2()[1] * other.group4()[2])
                    + (self.group2()[2] * other.group4()[1])),
                (-(self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group9()[3])
                    + (self.group0()[2] * other.group3()[0])
                    + (self.group2()[0] * other.group4()[2])
                    - (self.group2()[2] * other.group4()[0])),
                ((self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group3()[0]) + (self.group0()[2] * other.group9()[3]) - (self.group2()[0] * other.group4()[1])
                    + (self.group2()[1] * other.group4()[0])),
                ((self.group0()[0] * other.group5()[0]) + (self.group0()[1] * other.group5()[1]) - (self.group0()[1] * other.group9()[1]) + (self.group0()[2] * other.group5()[2])
                    - (self.group0()[2] * other.group9()[2])),
            ]) - (Simd32x4::from(other[e45]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                + (Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other.group4()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group9(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group9()[1], other.group4()[1]]) * swizzle!(self.group1(), 0, 1, 0, 1))
                + (Simd32x4::from([other.group9()[2], other.group9()[0], other.group3()[3], other.group4()[2]]) * swizzle!(self.group1(), 1, 2, 2, 2))),
            // e5
            ((self.group2()[0] * other.group5()[0])
                + (self.group2()[0] * other.group9()[0])
                + (self.group2()[1] * other.group5()[1])
                + (self.group2()[1] * other.group9()[1])
                + (self.group2()[2] * other.group5()[2])
                + (self.group2()[2] * other.group9()[2])
                + (self.group1()[0] * other.group3()[0])
                + (self.group1()[1] * other.group3()[1])
                + (self.group1()[2] * other.group3()[2])
                + (self.group1()[3] * other.group9()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                (-(self.group2()[0] * other.group6()[3]) - (self.group2()[1] * other.group1()[2]) + (self.group2()[1] * other.group6()[2])
                    - (self.group2()[2] * other.group6()[1])
                    - (other.group8()[0] * self.group1()[3])
                    - (other.group8()[1] * self.group1()[2])),
                (-(self.group2()[0] * other.group6()[2]) - (self.group2()[1] * other.group6()[3]) - (self.group2()[2] * other.group1()[0])
                    + (self.group2()[2] * other.group6()[0])
                    - (other.group8()[1] * self.group1()[3])
                    - (other.group8()[2] * self.group1()[0])),
                (-(self.group2()[0] * other.group1()[1]) + (self.group2()[0] * other.group6()[1])
                    - (self.group2()[1] * other.group6()[0])
                    - (self.group2()[2] * other.group6()[3])
                    - (other.group8()[0] * self.group1()[1])
                    - (other.group8()[2] * self.group1()[3])),
                (-(self.group0()[0] * other.group8()[0]) - (self.group0()[1] * other.group8()[1]) - (self.group0()[2] * other.group8()[2])
                    + (self.group2()[0] * other.group7()[0])
                    + (self.group2()[1] * other.group7()[1])
                    + (self.group2()[2] * other.group7()[2])),
            ]) + (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group8()[2], other.group8()[0], other.group8()[1], other.group1()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))
                + (Simd32x4::from([other[e1], other[e1], other[e1], other.group1()[2]]) * swizzle!(self.group1(), 0, 1, 2, 2))),
            // e41, e42, e43
            ((Simd32x3::from(other.group0()[1]) * self.group0())
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from([self.group1()[1], self.group1()[3], self.group1()[3]]) * swizzle!(other.group7(), 2, 1, 2))
                - (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]) * swizzle!(other.group7(), 1, 2, 0))
                + (Simd32x3::from([self.group1()[3], self.group1()[2], self.group1()[0]]) * swizzle!(other.group7(), 0, 0, 1))
                - (Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group1()[2], other.group1()[0], other.group6()[1]]) * swizzle!(self.group0(), 1, 2, 0))
                - (Simd32x3::from([other.group6()[1], other.group6()[2], other.group6()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group6()[2], other.group6()[0], other.group6()[3]]) * swizzle!(self.group0(), 1, 2, 2))
                + (Simd32x3::from([other.group6()[3], other.group6()[3], other.group1()[1]]) * swizzle!(self.group0(), 0, 1, 0))),
            // e23, e31, e12
            (Simd32x3::from([
                ((self.group1()[1] * other.group6()[2]) - (self.group1()[2] * other.group6()[1])),
                (-(self.group1()[0] * other.group6()[2]) + (self.group1()[2] * other.group6()[0])),
                ((self.group1()[0] * other.group6()[1]) - (self.group1()[1] * other.group6()[0])),
            ]) + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from([other.group7()[2], other.group7()[0], other.group1()[3]]) * swizzle!(self.group2(), 1, 2, 2))
                + (Simd32x3::from([other.group8()[2], other.group8()[0], other[e1]]) * swizzle!(self.group0(), 1, 2, 2))
                + (Simd32x3::from([other.group1()[3], other.group1()[3], other.group7()[1]]) * swizzle!(self.group2(), 0, 1, 0))
                + (Simd32x3::from([other[e1], other[e1], other.group8()[1]]) * swizzle!(self.group0(), 0, 1, 0))
                - (swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group8(), 1, 2, 0))
                - (swizzle!(self.group2(), 2, 0, 1) * swizzle!(other.group7(), 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group3()[1]) - (self.group2()[0] * other[e45]) - (self.group2()[1] * other.group4()[2]) + (self.group2()[2] * other.group4()[1])
                    - (self.group1()[3] * other.group9()[0])),
                ((self.group0()[0] * other.group3()[2]) + (self.group2()[0] * other.group4()[2])
                    - (self.group2()[1] * other[e45])
                    - (self.group2()[2] * other.group4()[0])
                    - (self.group1()[3] * other.group9()[1])),
                ((self.group0()[1] * other.group3()[0]) - (self.group2()[0] * other.group4()[1]) + (self.group2()[1] * other.group4()[0])
                    - (self.group2()[2] * other[e45])
                    - (self.group1()[3] * other.group9()[2])),
                (-(self.group0()[1] * other.group3()[1]) - (self.group0()[2] * other.group3()[2])
                    + (self.group2()[0] * other.group4()[0])
                    + (self.group2()[1] * other.group4()[1])
                    + (self.group2()[2] * other.group4()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group9()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group9(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group3(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group5()[1], other.group5()[2], other.group5()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group9()[2]]) * swizzle!(self.group1(), 1, 2, 0, 2))),
            // e423, e431, e412
            (-(Simd32x3::from(other.group0()[0]) * self.group0())
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group3()[3], other.group5()[2], other.group9()[1]]))
                + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group9()[2], other.group3()[3], other.group5()[0]]))
                + (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group5()[1], other.group9()[0], other.group3()[3]]))
                - (Simd32x3::from(other[e45]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from([other.group5()[2], other.group9()[2], other.group5()[1]]) * swizzle!(self.group0(), 1, 0, 0))
                - (Simd32x3::from([self.group1()[1], self.group1()[3], self.group1()[3]]) * swizzle!(other.group4(), 2, 1, 2))
                + (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]) * swizzle!(other.group4(), 1, 2, 0))
                - (Simd32x3::from([self.group1()[3], self.group1()[2], self.group1()[0]]) * swizzle!(other.group4(), 0, 0, 1))
                - (Simd32x3::from([other.group9()[1], other.group5()[0], other.group9()[0]]) * swizzle!(self.group0(), 2, 2, 1))),
            // e235, e315, e125
            (Simd32x3::from([
                (-(self.group1()[1] * other.group3()[2]) + (self.group1()[2] * other.group3()[1])),
                ((self.group1()[0] * other.group3()[2]) - (self.group1()[2] * other.group3()[0])),
                (-(self.group1()[0] * other.group3()[1]) + (self.group1()[1] * other.group3()[0])),
            ]) - (Simd32x3::from(other.group0()[0]) * self.group2())
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                - (Simd32x3::from(other.group9()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from([other.group5()[2], other.group5()[0], other.group9()[1]]) * swizzle!(self.group2(), 1, 2, 0))
                - (Simd32x3::from([other.group3()[3], other.group3()[3], other.group5()[1]]) * swizzle!(self.group2(), 0, 1, 0))
                + (Simd32x3::from([other.group9()[1], other.group9()[2], other.group9()[0]]) * swizzle!(self.group2(), 2, 0, 1))
                - (Simd32x3::from([other.group9()[2], other.group9()[0], other.group3()[3]]) * swizzle!(self.group2(), 1, 2, 2))
                + (swizzle!(self.group2(), 2, 0, 1) * swizzle!(other.group5(), 1, 2, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[0] * other[e1]) + (self.group0()[1] * other.group8()[2])
                    - (self.group0()[2] * other.group8()[1])
                    - (self.group2()[0] * other.group1()[3])
                    - (self.group2()[1] * other.group7()[2])
                    + (self.group2()[2] * other.group7()[1])
                    + (self.group1()[3] * other.group6()[0])),
                (-(self.group0()[0] * other.group8()[2]) + (self.group0()[1] * other[e1]) + (self.group0()[2] * other.group8()[0]) + (self.group2()[0] * other.group7()[2])
                    - (self.group2()[1] * other.group1()[3])
                    - (self.group2()[2] * other.group7()[0])
                    + (self.group1()[3] * other.group6()[1])),
                ((self.group0()[0] * other.group8()[1]) - (self.group0()[1] * other.group8()[0]) + (self.group0()[2] * other[e1]) - (self.group2()[0] * other.group7()[1])
                    + (self.group2()[1] * other.group7()[0])
                    - (self.group2()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group6()[2])),
                (-(self.group2()[0] * other.group6()[0]) + (self.group2()[1] * other.group1()[1]) - (self.group2()[1] * other.group6()[1])
                    + (self.group2()[2] * other.group1()[2])
                    - (self.group2()[2] * other.group6()[2])
                    - (other.group8()[2] * self.group1()[2])
                    - (self.group1()[3] * other[e1])),
            ]) + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group6()[3], other.group8()[1]]) * swizzle!(self.group1(), 1, 2, 2, 1))
                - (Simd32x4::from([other.group6()[3], other.group6()[3], other.group1()[1], other.group8()[0]]) * swizzle!(self.group1(), 0, 1, 0, 0))),
            // e1234
            (-(self.group0()[0] * other.group1()[0])
                - (self.group0()[0] * other.group6()[0])
                - (self.group0()[1] * other.group1()[1])
                - (self.group0()[1] * other.group6()[1])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[2] * other.group6()[2])
                - (other.group7()[0] * self.group1()[0])
                - (other.group7()[1] * self.group1()[1])
                - (other.group7()[2] * self.group1()[2])
                + (self.group1()[3] * other.group1()[3])),
        );
    }
}
impl GeometricAntiProduct<Plane> for Dipole {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1       10        0
    //    simd3        1        2        0
    //    simd4        6        8        0
    // Totals...
    // yes simd        8       20        0
    //  no simd       28       48        0
    fn geometric_anti_product(self, other: Plane) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (-(Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([0.0, 0.0, 0.0, ((self.group1()[2] * other.group0()[2]) * -1.0)])
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e235, e315, e125, e4
            ((Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[2]])
                * swizzle!(other.group0(), 1, 2, 0, 2)
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                ((self.group1()[2] * other.group0()[1]) * -1.0),
                ((self.group1()[0] * other.group0()[2]) * -1.0),
                ((self.group1()[1] * other.group0()[0]) * -1.0),
                ((self.group2()[2] * other.group0()[2]) + (self.group1()[3] * other.group0()[3])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[1]]) * swizzle!(other.group0(), 2, 0, 1, 1))),
        );
    }
}
impl GeometricAntiProduct<QuadNum> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       24       42        0
    fn geometric_anti_product(self, other: QuadNum) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[0] * other.group0()[3]) + (self.group1()[0] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[2]) + (self.group0()[1] * other.group0()[3]) + (self.group1()[1] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[2] * other.group0()[3]) + (self.group1()[2] * other.group0()[0])),
                (self.group1()[3] * other.group0()[2] * -1.0),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[1]) + (self.group2()[0] * other.group0()[0]) + (self.group1()[0] * other.group0()[3])),
                ((self.group0()[1] * other.group0()[1]) + (self.group2()[1] * other.group0()[0]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[2] * other.group0()[1]) + (self.group2()[2] * other.group0()[0]) + (self.group1()[2] * other.group0()[3])),
                (self.group1()[3] * other.group0()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group2()[0] * other.group0()[2]) + (self.group2()[0] * other.group0()[3]) + (self.group1()[0] * other.group0()[1])),
                (-(self.group2()[1] * other.group0()[2]) + (self.group2()[1] * other.group0()[3]) + (self.group1()[1] * other.group0()[1])),
                (-(self.group2()[2] * other.group0()[2]) + (self.group2()[2] * other.group0()[3]) + (self.group1()[2] * other.group0()[1])),
                (self.group1()[3] * other.group0()[0]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[1]) - (self.group2()[0] * other.group0()[0]) - (self.group1()[0] * other.group0()[2])),
                ((self.group0()[1] * other.group0()[1]) - (self.group2()[1] * other.group0()[0]) - (self.group1()[1] * other.group0()[2])),
                ((self.group0()[2] * other.group0()[1]) - (self.group2()[2] * other.group0()[0]) - (self.group1()[2] * other.group0()[2])),
                (self.group1()[3] * other.group0()[1] * -1.0),
            ]),
        );
    }
}
impl GeometricAntiProduct<RoundPoint> for Dipole {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       21        0
    //    simd3        2        3        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       16       29        0
    //  no simd       35       50        0
    fn geometric_anti_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[0] * other[e2]) - (self.group1()[3] * other.group0()[0])),
                ((self.group0()[1] * other[e2]) - (self.group1()[3] * other.group0()[1])),
                ((self.group0()[2] * other[e2]) - (self.group1()[3] * other.group0()[2])),
                ((self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (self.group1()[0] * other[e2]),
                (self.group1()[1] * other[e2]),
                (self.group1()[2] * other[e2]),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[0] * other[e2]) - (self.group2()[0] * other.group0()[3])),
                ((self.group0()[1] * other[e2]) - (self.group2()[1] * other.group0()[3])),
                ((self.group0()[2] * other[e2]) - (self.group2()[2] * other.group0()[3])),
                ((self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other[e2]]) * swizzle!(self.group1(), 1, 2, 0, 3))),
        );
    }
}
impl GeometricAntiProduct<Scalar> for Dipole {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        4        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0       20        0
    fn geometric_anti_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Circle::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other[scalar]) * self.group0() * Simd32x3::from(-1.0)),
            // e415, e425, e435, e321
            (Simd32x4::from(other[scalar]) * self.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e235, e315, e125
            (Simd32x3::from(other[scalar]) * self.group2() * Simd32x3::from(-1.0)),
        );
    }
}
impl GeometricAntiProduct<Sphere> for Dipole {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       17        0
    //    simd3        2        3        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       13       26        0
    //  no simd       35       50        0
    fn geometric_anti_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (-(Simd32x3::from(other[e4315]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0))),
            // e415, e425, e435, e321
            (-Simd32x4::from([
                (self.group2()[0] * other[e4315]),
                (self.group2()[1] * other[e4315]),
                (self.group2()[2] * other[e4315]),
                (self.group1()[2] * other.group0()[2]),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e235, e315, e125, e4
            (Simd32x4::from([
                (self.group2()[2] * other.group0()[1]),
                (self.group2()[0] * other.group0()[2]),
                (self.group2()[1] * other.group0()[0]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other[e4315])),
            ]) - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                (-(self.group2()[0] * other[e4315]) - (self.group1()[2] * other.group0()[1])),
                (-(self.group2()[1] * other[e4315]) - (self.group1()[0] * other.group0()[2])),
                (-(self.group2()[2] * other[e4315]) - (self.group1()[1] * other.group0()[0])),
                ((self.group2()[2] * other.group0()[2]) + (self.group1()[3] * other.group0()[3])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[1]]) * swizzle!(other.group0(), 2, 0, 1, 1))),
        );
    }
}
impl GeometricAntiProduct<TripleNum> for Dipole {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       25        0
    //    simd3        1        2        0
    // Totals...
    // yes simd       13       27        0
    //  no simd       15       31        0
    fn geometric_anti_product(self, other: TripleNum) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]])) + (Simd32x3::from(other.group0()[2]) * self.group0())),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[1]) + (self.group2()[0] * other.group0()[0]) + (other.group0()[2] * self.group1()[0])),
                ((self.group0()[1] * other.group0()[1]) + (self.group2()[1] * other.group0()[0]) + (other.group0()[2] * self.group1()[1])),
                ((self.group0()[2] * other.group0()[1]) + (self.group2()[2] * other.group0()[0]) + (other.group0()[2] * self.group1()[2])),
                (other.group0()[2] * self.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group2()[0] * other.group0()[2]) + (other.group0()[1] * self.group1()[0])),
                ((self.group2()[1] * other.group0()[2]) + (other.group0()[1] * self.group1()[1])),
                ((self.group2()[2] * other.group0()[2]) + (other.group0()[1] * self.group1()[2])),
                (other.group0()[0] * self.group1()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[1]) - (self.group2()[0] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[1]) - (self.group2()[1] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[1]) - (self.group2()[2] * other.group0()[0])),
                (other.group0()[1] * self.group1()[3] * -1.0),
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorEven> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       76       92        0
    //    simd4       17       17        0
    // Totals...
    // yes simd       93      109        0
    //  no simd      144      160        0
    fn geometric_anti_product(self, other: VersorEven) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) + (self.group0()[1] * other.group3()[2])
                    - (self.group0()[2] * other.group3()[1])
                    + (self.group1()[0] * other.group3()[3])
                    + (self.group1()[1] * other.group0()[2])
                    + (self.group1()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group0()[3])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group0()[2] * other.group3()[0])
                    + (self.group1()[1] * other.group3()[3])
                    + (self.group1()[2] * other.group0()[0])
                    + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group0()[3])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group1()[0] * other.group0()[1])
                    + (self.group1()[2] * other.group3()[3])
                    + (self.group1()[3] * other.group0()[2])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group2()[2])
                    - (self.group2()[2] * other.group0()[1])
                    - (self.group1()[2] * other.group1()[1])
                    - (self.group1()[3] * other.group3()[0])),
                ((self.group0()[1] * other.group2()[3]) + (self.group0()[2] * other.group2()[0])
                    - (self.group2()[0] * other.group0()[2])
                    - (self.group1()[0] * other.group1()[2])
                    - (self.group1()[3] * other.group3()[1])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[2] * other.group2()[3])
                    - (self.group2()[1] * other.group0()[0])
                    - (self.group1()[1] * other.group1()[0])
                    - (self.group1()[3] * other.group3()[2])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])
                    + (self.group2()[1] * other.group0()[1])
                    + (self.group2()[2] * other.group0()[2])
                    + (self.group1()[3] * other.group0()[3])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group2()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group3()[1]]) * swizzle!(self.group1(), 0, 1, 0, 1))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group3()[2]]) * swizzle!(self.group1(), 1, 2, 2, 2))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group2()[0] * other.group0()[3]) + (self.group2()[1] * other.group1()[2]) + (self.group1()[0] * other.group2()[3]) + (self.group1()[1] * other.group2()[2])),
                ((self.group2()[1] * other.group0()[3]) + (self.group2()[2] * other.group1()[0]) + (self.group1()[1] * other.group2()[3]) + (self.group1()[2] * other.group2()[0])),
                ((self.group2()[0] * other.group1()[1]) + (self.group2()[2] * other.group0()[3]) + (self.group1()[0] * other.group2()[1]) + (self.group1()[2] * other.group2()[3])),
                (-(self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])
                    - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group2()[0], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 3, 2, 0, 0))
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group3(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]) * swizzle!(other.group3(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group2()[2], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group1(), 1, 3, 3, 1))
                - (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[1]]) * swizzle!(self.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group2()[2]) - (self.group2()[0] * other.group3()[3]) - (self.group2()[1] * other.group0()[2])
                    + (self.group2()[2] * other.group0()[1])
                    + (self.group1()[3] * other.group1()[0])),
                ((self.group0()[1] * other.group2()[3]) + (self.group0()[2] * other.group2()[0]) + (self.group2()[0] * other.group0()[2])
                    - (self.group2()[1] * other.group3()[3])
                    - (self.group2()[2] * other.group0()[0])
                    + (self.group1()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[2] * other.group2()[3]) - (self.group2()[0] * other.group0()[1]) + (self.group2()[1] * other.group0()[0])
                    - (self.group2()[2] * other.group3()[3])
                    + (self.group1()[3] * other.group1()[2])),
                (-(self.group2()[0] * other.group1()[0]) - (self.group2()[1] * other.group1()[1]) + (self.group2()[1] * other.group3()[1])
                    - (self.group2()[2] * other.group1()[2])
                    + (self.group2()[2] * other.group3()[2])
                    - (self.group1()[3] * other.group2()[3])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group2()[1]]) * swizzle!(self.group1(), 0, 1, 0, 1))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[3], other.group2()[2]]) * swizzle!(self.group1(), 1, 2, 2, 2))),
        );
    }
}
impl GeometricAntiProduct<VersorOdd> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       72        0
    //    simd4       22       22        0
    // Totals...
    // yes simd       78       94        0
    //  no simd      144      160        0
    fn geometric_anti_product(self, other: VersorOdd) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3])
                    - (self.group0()[2] * other.group3()[1])
                    - (self.group1()[0] * other.group2()[3])
                    - (self.group1()[1] * other.group0()[2])
                    - (self.group1()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group3()[2])
                    - (self.group0()[1] * other.group0()[3])
                    - (self.group1()[1] * other.group2()[3])
                    - (self.group1()[2] * other.group0()[0])
                    - (self.group1()[3] * other.group0()[1])),
                (-(self.group0()[1] * other.group3()[0])
                    - (self.group0()[2] * other.group0()[3])
                    - (self.group1()[0] * other.group0()[1])
                    - (self.group1()[2] * other.group2()[3])
                    - (self.group1()[3] * other.group0()[2])),
                ((self.group2()[1] * other.group0()[1])
                    + (self.group2()[2] * other.group0()[2])
                    + (self.group1()[0] * other.group1()[0])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[2] * other.group1()[2])),
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group1()[2], other.group3()[1], other.group2()[0]]))
                + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group3()[2], other.group1()[3], other.group1()[0], other.group2()[1]]))
                + (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[3], other.group2()[2]]))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[3]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group2()[1]) - (self.group2()[1] * other.group0()[2]) - (self.group1()[3] * other.group3()[0])),
                ((self.group0()[0] * other.group2()[2]) - (self.group2()[2] * other.group0()[0]) - (self.group1()[3] * other.group3()[1])),
                ((self.group0()[1] * other.group2()[0]) - (self.group2()[0] * other.group0()[1]) - (self.group1()[3] * other.group3()[2])),
                (-(self.group0()[2] * other.group2()[2]) + (self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group2(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group3()[1]]) * swizzle!(self.group1(), 0, 1, 0, 1))
                + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group3()[2]]) * swizzle!(self.group1(), 1, 2, 2, 2))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group2()[0] * other.group0()[3])
                    - (self.group2()[0] * other.group1()[3])
                    - (self.group2()[1] * other.group1()[2])
                    - (self.group2()[1] * other.group3()[2])
                    - (self.group1()[0] * other.group3()[3])
                    - (self.group1()[1] * other.group2()[2])),
                (-(self.group2()[1] * other.group0()[3])
                    - (self.group2()[1] * other.group1()[3])
                    - (self.group2()[2] * other.group1()[0])
                    - (self.group2()[2] * other.group3()[0])
                    - (self.group1()[1] * other.group3()[3])
                    - (self.group1()[2] * other.group2()[0])),
                (-(self.group2()[0] * other.group1()[1])
                    - (self.group2()[0] * other.group3()[1])
                    - (self.group2()[2] * other.group0()[3])
                    - (self.group2()[2] * other.group1()[3])
                    - (self.group1()[0] * other.group2()[1])
                    - (self.group1()[2] * other.group3()[3])),
                ((self.group2()[1] * other.group1()[1])
                    + (self.group2()[1] * other.group3()[1])
                    + (self.group2()[2] * other.group1()[2])
                    + (self.group2()[2] * other.group3()[2])
                    + (self.group1()[2] * other.group2()[2])
                    + (self.group1()[3] * other.group3()[3])),
            ]) + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group2()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group2()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                + (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group2(), 0, 1, 2, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group2()[2]) - (self.group2()[0] * other.group2()[3]) - (self.group2()[1] * other.group0()[2])),
                ((self.group0()[1] * other.group3()[3]) + (self.group0()[2] * other.group2()[0]) - (self.group2()[1] * other.group2()[3]) - (self.group2()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[2] * other.group3()[3]) - (self.group2()[0] * other.group0()[1]) - (self.group2()[2] * other.group2()[3])),
                ((self.group0()[1] * other.group1()[1]) - (self.group0()[1] * other.group3()[1]) + (self.group0()[2] * other.group1()[2]) - (self.group0()[2] * other.group3()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[3]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[0]]) * swizzle!(other.group1(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group0()[1]]) * swizzle!(self.group1(), 0, 1, 0, 1))
                + (Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[3], other.group0()[2]]) * swizzle!(self.group1(), 1, 2, 2, 2))),
        );
    }
}
impl GeometricAntiProduct<VersorRoundPoint> for Dipole {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       24        0
    //    simd3        3        4        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       21       34        0
    //  no simd       45       60        0
    fn geometric_anti_product(self, other: VersorRoundPoint) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from(other.group1()[1]) * self.group0()) + (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group1()[0] * self.group0()[0]) - (self.group1()[3] * other.group0()[0])),
                ((other.group1()[0] * self.group0()[1]) - (self.group1()[3] * other.group0()[1])),
                ((other.group1()[0] * self.group0()[2]) - (self.group1()[3] * other.group0()[2])),
                ((self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group1()[1]) * self.group1())
                + (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group1()[1] * self.group2()[0]) + (self.group2()[2] * other.group0()[1])),
                ((other.group1()[1] * self.group2()[1]) + (self.group2()[0] * other.group0()[2])),
                ((other.group1()[1] * self.group2()[2]) + (self.group2()[1] * other.group0()[0])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[0], other.group1()[0], other.group0()[3]]) * self.group1())
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group1()[0] * self.group0()[0]) - (self.group2()[0] * other.group0()[3])),
                ((other.group1()[0] * self.group0()[1]) - (self.group2()[1] * other.group0()[3])),
                ((other.group1()[0] * self.group0()[2]) - (self.group2()[2] * other.group0()[3])),
                ((self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 3))),
        );
    }
}
impl GeometricAntiProduct<VersorSphere> for Dipole {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       20        0
    //    simd3        3        4        0
    //    simd4        7        8        0
    // Totals...
    // yes simd       18       32        0
    //  no simd       45       64        0
    fn geometric_anti_product(self, other: VersorSphere) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (-(Simd32x3::from(other.group1()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(other.group1()[1]) * self.group0())
                - (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0))),
            // e415, e425, e435, e321
            ((Simd32x4::from([
                (other.group1()[0] * self.group2()[0]),
                (other.group1()[0] * self.group2()[1]),
                (other.group1()[0] * self.group2()[2]),
                (other.group1()[1] * self.group1()[3]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                - (Simd32x4::from([other.group1()[1], other.group1()[1], other.group1()[1], other.group0()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group0(), 0, 1, 2, 2))),
            // e235, e315, e125, e4
            (Simd32x4::from([
                (-(other.group1()[1] * self.group2()[0]) + (self.group2()[2] * other.group0()[1])),
                (-(other.group1()[1] * self.group2()[1]) + (self.group2()[0] * other.group0()[2])),
                (-(other.group1()[1] * self.group2()[2]) + (self.group2()[1] * other.group0()[0])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other.group1()[0]]) * self.group1())),
            // e1, e2, e3, e5
            (Simd32x4::from([
                (-(other.group1()[0] * self.group2()[0]) - (self.group1()[2] * other.group0()[1])),
                (-(other.group1()[0] * self.group2()[1]) - (self.group1()[0] * other.group0()[2])),
                (-(other.group1()[0] * self.group2()[2]) - (self.group1()[1] * other.group0()[0])),
                ((self.group2()[2] * other.group0()[2]) + (self.group1()[3] * other.group0()[3])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group2()[1]]) * swizzle!(other.group0(), 2, 0, 1, 1))),
        );
    }
}
impl InfixGeometricAntiProduct for DipoleInversion {}
impl GeometricAntiProduct<AntiCircleRotor> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       45       61        0
    //    simd4       26       26        0
    // Totals...
    // yes simd       71       87        0
    //  no simd      149      165        0
    fn geometric_anti_product(self, other: AntiCircleRotor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[1] * self.group3()[2])
                    - (other.group0()[2] * self.group1()[1])
                    - (other.group0()[2] * self.group3()[1])
                    - (self.group0()[0] * other.group2()[3])
                    - (self.group0()[1] * other.group1()[2])
                    - (other.group1()[0] * self.group2()[3])),
                (-(other.group0()[0] * self.group3()[2]) - (other.group0()[1] * self.group1()[3]) + (other.group0()[2] * self.group3()[0])
                    - (self.group0()[1] * other.group2()[3])
                    - (self.group0()[2] * other.group1()[0])
                    - (other.group1()[1] * self.group2()[3])),
                ((other.group0()[0] * self.group3()[1])
                    - (other.group0()[1] * self.group3()[0])
                    - (other.group0()[2] * self.group1()[3])
                    - (self.group0()[0] * other.group1()[1])
                    - (self.group0()[2] * other.group2()[3])
                    - (other.group1()[2] * self.group2()[3])),
                ((other.group0()[0] * self.group2()[0])
                    + (other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])
                    + (self.group0()[0] * other.group2()[0])
                    + (self.group0()[1] * other.group2()[1])
                    + (self.group0()[2] * other.group2()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group1()[3]]) * swizzle!(self.group1(), 3, 2, 0, 3))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group1()[1]]) * swizzle!(other.group1(), 3, 2, 0, 1))
                + (Simd32x4::from([self.group0()[2], self.group0()[1], self.group0()[2], self.group1()[2]]) * swizzle!(other.group1(), 1, 3, 3, 2))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[2] * self.group2()[1]) + (other.group1()[1] * self.group1()[2])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group1()[2] * self.group1()[0])),
                (-(other.group0()[1] * self.group2()[0]) + (other.group1()[0] * self.group1()[1])),
                ((other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[3]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[2]]) * swizzle!(other.group2(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[1]]) * swizzle!(other.group2(), 0, 1, 2, 1))
                - (swizzle!(other.group1(), 3, 3, 3, 2) * swizzle!(self.group3(), 0, 1, 2, 2))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(other.group1()[2] * self.group2()[1]) - (other.group1()[3] * self.group2()[0])),
                (-(other.group1()[3] * self.group2()[1]) - (other.group2()[3] * self.group2()[1])),
                (-(other.group1()[3] * self.group2()[2]) - (other.group2()[3] * self.group2()[2])),
                ((other.group1()[1] * self.group2()[1]) + (other.group1()[2] * self.group2()[2]) - (other.group2()[3] * self.group3()[3])),
            ]) + (Simd32x4::from(other.group2()[0]) * Simd32x4::from([self.group1()[3], self.group3()[2], self.group1()[1], self.group1()[0]]))
                + (Simd32x4::from(other.group2()[1]) * Simd32x4::from([self.group1()[2], self.group1()[3], self.group3()[0], self.group1()[1]]))
                + (Simd32x4::from(other.group2()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group1()[3], self.group1()[2]]))
                - (Simd32x4::from([other.group2()[1], other.group1()[1], other.group1()[2], other.group2()[0]]) * swizzle!(self.group3(), 2, 3, 3, 0))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group3()[1], self.group3()[1]]) * swizzle!(other.group2(), 2, 0, 0, 1))
                - (Simd32x4::from([self.group2()[0], self.group3()[0], self.group1()[0], self.group3()[2]]) * swizzle!(other.group2(), 3, 2, 1, 2))
                - (Simd32x4::from([self.group3()[3], self.group2()[2], self.group2()[0], self.group3()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))
                + (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group2(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group3()[3]) + (self.group0()[1] * other.group2()[2])
                    - (self.group0()[2] * other.group2()[1])
                    - (other.group1()[1] * self.group3()[2])
                    + (other.group2()[0] * self.group2()[3])),
                (-(other.group0()[1] * self.group3()[3]) - (self.group0()[0] * other.group2()[2]) + (self.group0()[2] * other.group2()[0])
                    - (other.group1()[2] * self.group3()[0])
                    + (other.group2()[1] * self.group2()[3])),
                (-(other.group0()[2] * self.group3()[3]) + (self.group0()[0] * other.group2()[1])
                    - (self.group0()[1] * other.group2()[0])
                    - (other.group1()[0] * self.group3()[1])
                    + (other.group2()[2] * self.group2()[3])),
                ((other.group0()[1] * self.group1()[1])
                    + (other.group0()[1] * self.group3()[1])
                    + (other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])
                    + (self.group0()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group2(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[0]]) * swizzle!(self.group3(), 0, 1, 2, 0))
                + (Simd32x4::from([self.group1()[3], self.group3()[2], self.group3()[0], self.group0()[0]]) * swizzle!(other.group1(), 0, 0, 1, 0))
                + (Simd32x4::from([self.group3()[1], self.group1()[3], self.group1()[3], self.group0()[1]]) * swizzle!(other.group1(), 2, 1, 2, 1))),
        );
    }
}
impl GeometricAntiProduct<AntiDipoleInversion> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       49       61        0
    //    simd4       40       42        0
    // Totals...
    // yes simd       89      103        0
    //  no simd      209      229        0
    fn geometric_anti_product(self, other: AntiDipoleInversion) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (self.group0()[0] * other.group1()[3])
                    + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[1])
                    + (other.group2()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group3()[0]) - (self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (other.group2()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group3()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (other.group2()[3] * self.group1()[2])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])),
            ]) + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group3(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group3(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group3()[1]]) * swizzle!(self.group3(), 0, 1, 2, 1))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[2]]) * swizzle!(other.group3(), 0, 1, 2, 2))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self.group2()[2]) + (self.group0()[1] * other.group2()[2]) - (other.group3()[0] * self.group1()[3])),
                ((other.group0()[1] * self.group3()[3]) - (other.group0()[2] * self.group2()[0]) + (self.group0()[2] * other.group2()[0]) - (other.group3()[1] * self.group1()[3])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[2] * self.group3()[3]) + (self.group0()[0] * other.group2()[1])
                    - (other.group3()[2] * self.group1()[3])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2]) - (other.group2()[3] * self.group3()[3])
                    + (other.group3()[3] * self.group2()[3])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group3()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[2]]) * swizzle!(self.group2(), 0, 1, 2, 2))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[2]]) * swizzle!(self.group3(), 1, 2, 0, 2))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[2]]) * swizzle!(other.group3(), 1, 2, 0, 2))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group3(), 0, 1, 2, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group1()[2] * self.group2()[1]) + (other.group2()[2] * self.group1()[1]) + (other.group3()[1] * self.group2()[2]) + (other.group3()[3] * self.group1()[0])),
                ((other.group1()[1] * self.group3()[3]) + (other.group2()[2] * self.group3()[0]) + (other.group3()[2] * self.group2()[0]) + (other.group3()[3] * self.group1()[1])),
                ((other.group1()[2] * self.group3()[3]) + (other.group2()[1] * self.group1()[0]) + (other.group3()[0] * self.group2()[1]) + (other.group3()[3] * self.group1()[2])),
                (-(other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group3()[2])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])),
            ]) - (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[0], other.group0()[0]]) * swizzle!(self.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[2], other.group0()[1]]) * swizzle!(self.group1(), 2, 0, 3, 1))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group0()[1]]) * swizzle!(self.group3(), 0, 1, 2, 1))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group2()[1], self.group3()[3], self.group3()[3], self.group0()[1]]) * swizzle!(other.group3(), 2, 1, 2, 1))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group3()[2], self.group1()[2], self.group3()[1], self.group1()[3]]) * swizzle!(other.group2(), 1, 0, 0, 3))
                - (Simd32x4::from([self.group3()[3], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group3(), 0, 0, 1, 0))
                + (Simd32x4::from([self.group3()[3], self.group2()[2], self.group2()[0], self.group2()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(self.group1()[3])
                * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                - (Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[1]]) * swizzle!(other.group3(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[1]]) * swizzle!(self.group3(), 1, 2, 0, 1))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group2()[2]]) * swizzle!(self.group1(), 1, 2, 0, 2))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[2]]) * swizzle!(other.group1(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]) * swizzle!(other.group3(), 1, 2, 0, 2))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[1]]) * swizzle!(other.group2(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[2]]) * swizzle!(other.group2(), 0, 1, 2, 2))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum321> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       15        0
    //    simd4        2        5        0
    // Totals...
    // yes simd        8       20        0
    //  no simd       14       35        0
    fn geometric_anti_product(self, other: AntiDualNum321) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group0()[2])),
                (other.group0()[0] * self.group1()[3] * -1.0),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group3()[0]) - (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[0] * self.group3()[1]) - (other.group0()[1] * self.group1()[1])),
                (-(other.group0()[0] * self.group3()[2]) - (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3]),
            ]),
            // e235, e315, e125, e5
            (-(Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))),
            // e1, e2, e3, e4
            ((Simd32x4::from(other.group0()[1])
                * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum4> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       11        0
    //    simd4        2        8        0
    // Totals...
    // yes simd        8       19        0
    //  no simd       14       43        0
    fn geometric_anti_product(self, other: AntiDualNum4) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[0] * self.group3()[0]) - (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[1]) - (other.group0()[0] * self.group3()[1]) - (other.group0()[1] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[0] * self.group3()[2]) - (other.group0()[1] * self.group0()[2])),
                (other.group0()[0] * self.group3()[3] * -1.0),
            ]),
            // e415, e425, e435, e321
            ((Simd32x4::from(other.group0()[1]) * self.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))),
            // e235, e315, e125, e5
            (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]) * Simd32x4::from(-1.0)),
            // e1, e2, e3, e4
            ((Simd32x4::from(other.group0()[1])
                * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum5> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       26        0
    //    simd4        2        3        0
    // Totals...
    // yes simd        9       29        0
    //  no simd       15       38        0
    fn geometric_anti_product(self, other: AntiDualNum5) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                (other.group0()[0] * self.group2()[3]),
            ]) * Simd32x4::from(-1.0)),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group1()[1])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group1()[2])),
                ((other.group0()[0] * self.group2()[3]) + (other.group0()[1] * self.group1()[3])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) * -1.0),
                ((other.group0()[0] * self.group1()[1]) * -1.0),
                ((other.group0()[0] * self.group1()[2]) * -1.0),
                0.0,
            ]) + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group1()[3]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group3()[0])),
                ((other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group3()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group3()[2])),
                (other.group0()[1] * self.group2()[3] * -1.0),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiFlatPoint> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       23       37        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       29       43        0
    //  no simd       47       61        0
    fn geometric_anti_product(self, other: AntiFlatPoint) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (other.group0()[3] * self.group1()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) + (other.group0()[0] * self.group2()[3])),
                ((self.group0()[2] * other.group0()[0]) + (other.group0()[1] * self.group2()[3])),
                ((self.group0()[0] * other.group0()[1]) + (other.group0()[2] * self.group2()[3])),
                ((self.group0()[2] * other.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group1()[1])
                    - (other.group0()[2] * self.group3()[1])
                    - (other.group0()[3] * self.group2()[0])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[0] * self.group3()[2]) - (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group1()[0])
                    + (other.group0()[2] * self.group3()[0])
                    - (other.group0()[3] * self.group2()[1])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group1()[0])
                    - (other.group0()[1] * self.group3()[0])
                    - (other.group0()[2] * self.group1()[3])
                    - (other.group0()[3] * self.group2()[2])),
                (other.group0()[3] * self.group2()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(other.group0()[2] * self.group1()[2]) + (other.group0()[2] * self.group3()[2]) - (other.group0()[3] * self.group3()[3])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))
                - (swizzle!(other.group0(), 3, 3, 3, 1) * swizzle!(self.group1(), 0, 1, 2, 1))),
        );
    }
}
impl GeometricAntiProduct<AntiFlector> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       48        0
    //    simd4       18       18        0
    // Totals...
    // yes simd       54       66        0
    //  no simd      108      120        0
    fn geometric_anti_product(self, other: AntiFlector) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[3])),
                (-(self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (other.group0()[3] * self.group1()[3])
                    + (other.group1()[2] * self.group3()[2])
                    + (other.group1()[3] * self.group2()[3])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[1]]) * swizzle!(other.group1(), 0, 1, 2, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (other.group1()[0] * self.group1()[3]) - (other.group1()[2] * self.group3()[1])),
                ((self.group0()[2] * other.group0()[0]) - (other.group1()[0] * self.group3()[2]) - (other.group1()[1] * self.group1()[3])),
                ((self.group0()[0] * other.group0()[1]) - (other.group1()[1] * self.group3()[0]) - (other.group1()[2] * self.group1()[3])),
                (-(self.group0()[2] * other.group0()[2]) + (other.group1()[2] * self.group1()[2])),
            ]) + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1])
                    - (other.group0()[2] * self.group3()[1])
                    - (other.group0()[3] * self.group2()[0])
                    + (other.group1()[1] * self.group2()[2])
                    + (other.group1()[3] * self.group1()[0])),
                (-(other.group0()[0] * self.group3()[2]) - (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group1()[0])
                    + (other.group0()[2] * self.group3()[0])
                    - (other.group0()[3] * self.group2()[1])
                    + (other.group1()[2] * self.group2()[0])
                    + (other.group1()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0])
                    - (other.group0()[1] * self.group3()[0])
                    - (other.group0()[2] * self.group1()[3])
                    - (other.group0()[3] * self.group2()[2])
                    + (other.group1()[0] * self.group2()[1])
                    + (other.group1()[3] * self.group1()[2])),
                0.0,
            ]) - (Simd32x4::from([self.group2()[1], self.group3()[3], self.group3()[3], self.group0()[1]]) * swizzle!(other.group1(), 2, 1, 2, 1))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[2]]) * swizzle!(other.group1(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group3()[2], self.group1()[2], self.group3()[1], self.group2()[3]]) * swizzle!(other.group0(), 1, 0, 0, 3))
                - (Simd32x4::from([self.group3()[3], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group1(), 0, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((other.group0()[2] * self.group3()[2]) - (other.group0()[3] * self.group3()[3]) + (other.group1()[2] * self.group2()[2]) - (other.group1()[3] * self.group1()[3])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]) * swizzle!(self.group1(), 1, 2, 0, 2))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))
                - (swizzle!(other.group0(), 3, 3, 3, 1) * swizzle!(self.group1(), 0, 1, 2, 1))),
        );
    }
}
impl GeometricAntiProduct<AntiLine> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       50       66        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       56       72        0
    //  no simd       74       90        0
    fn geometric_anti_product(self, other: AntiLine) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(other.group0()[0] * self.group2()[3]) + (other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group2()[3]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) - (other.group0()[2] * self.group2()[3])),
                ((other.group0()[0] * self.group1()[0])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[2])
                    + (other.group1()[0] * self.group0()[0])
                    + (other.group1()[1] * self.group0()[1])
                    + (other.group1()[2] * self.group0()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1]) - (other.group1()[0] * self.group2()[3]) + (other.group1()[1] * self.group0()[2])
                    - (other.group1()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group1()[0])
                    - (other.group1()[0] * self.group0()[2])
                    - (other.group1()[1] * self.group2()[3])
                    + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) + (other.group1()[0] * self.group0()[1])
                    - (other.group1()[1] * self.group0()[0])
                    - (other.group1()[2] * self.group2()[3])),
                (-(other.group0()[0] * self.group3()[0])
                    - (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group3()[2])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(other.group0()[2] * self.group2()[1]) - (other.group1()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group1()[0] * self.group1()[2])),
                (-(other.group0()[1] * self.group2()[0]) - (other.group1()[1] * self.group1()[0])),
                ((other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2]) - (other.group1()[2] * self.group3()[2])),
            ]) + (Simd32x4::from(other.group1()[0]) * Simd32x4::from([self.group1()[3], self.group3()[2], self.group1()[1], self.group1()[0]]))
                + (Simd32x4::from(other.group1()[1]) * Simd32x4::from([self.group1()[2], self.group1()[3], self.group3()[0], self.group1()[1]]))
                + (Simd32x4::from(other.group1()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group1()[3], self.group1()[2]]))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group1()[1]]) * swizzle!(self.group3(), 2, 0, 1, 1))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group3()[2]) + (other.group0()[2] * self.group3()[1]) + (other.group1()[0] * self.group2()[3])
                    - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group3()[0])
                    + (other.group1()[0] * self.group0()[2])
                    + (other.group1()[1] * self.group2()[3])
                    - (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group3()[0]) + (other.group0()[2] * self.group1()[3])
                    - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group2()[3])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiMotor> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       33        0
    //    simd4       22       22        0
    // Totals...
    // yes simd       42       55        0
    //  no simd      108      121        0
    fn geometric_anti_product(self, other: AntiMotor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group0()[2])),
                (-(self.group0()[1] * other.group0()[3]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) - (self.group0()[2] * other.group0()[3])),
                ((self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[2])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[2])),
            ]) - (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([0.0, 0.0, 0.0, ((other.group0()[2] * self.group3()[2]) * -1.0)])
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group0()[0]]) * swizzle!(other.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[2], self.group0()[1]]) * swizzle!(other.group1(), 2, 0, 3, 1))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[2]]) * swizzle!(other.group1(), 0, 1, 2, 2))
                + (swizzle!(other.group0(), 1, 2, 0, 3) * swizzle!(self.group1(), 2, 0, 1, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(other.group0()[2] * self.group2()[1]) - (other.group0()[3] * self.group2()[0])),
                (-(other.group0()[3] * self.group2()[1]) - (other.group1()[3] * self.group1()[1])),
                (-(other.group0()[3] * self.group2()[2]) - (other.group1()[3] * self.group1()[2])),
                ((other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2])),
            ]) + (Simd32x4::from(other.group1()[0]) * Simd32x4::from([self.group1()[3], self.group3()[2], self.group1()[1], self.group1()[0]]))
                + (Simd32x4::from(other.group1()[1]) * Simd32x4::from([self.group1()[2], self.group1()[3], self.group3()[0], self.group1()[1]]))
                + (Simd32x4::from(other.group1()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group1()[3], self.group1()[2]]))
                + (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group1()[3]]))
                - (Simd32x4::from([other.group1()[1], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group3(), 2, 3, 3, 0))
                - (Simd32x4::from([self.group1()[0], self.group3()[0], self.group1()[0], self.group3()[2]]) * swizzle!(other.group1(), 3, 2, 1, 2))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group3()[1], self.group3()[1]]) * swizzle!(other.group1(), 2, 0, 0, 1))
                - (Simd32x4::from([self.group3()[3], self.group2()[2], self.group2()[0], self.group3()[3]]) * swizzle!(other.group0(), 0, 0, 1, 3))
                + (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group2(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) + (other.group1()[0] * self.group2()[3])),
                (-(self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (other.group1()[1] * self.group2()[3])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[3]) + (other.group1()[2] * self.group2()[3])),
                0.0,
            ]) + (Simd32x4::from([self.group1()[3], self.group3()[2], self.group3()[0], self.group0()[0]]) * swizzle!(other.group0(), 0, 0, 1, 0))
                + (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group3()[1], self.group1()[3], self.group1()[3], self.group0()[1]]) * swizzle!(other.group0(), 2, 1, 2, 1))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))),
        );
    }
}
impl GeometricAntiProduct<AntiPlane> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       23        0
    //    simd4       10       10        0
    // Totals...
    // yes simd       18       33        0
    //  no simd       48       63        0
    fn geometric_anti_product(self, other: AntiPlane) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[2] * other.group0()[1]) * -1.0),
                ((self.group0()[0] * other.group0()[2]) * -1.0),
                ((self.group0()[1] * other.group0()[0]) * -1.0),
                ((other.group0()[2] * self.group3()[2]) + (other.group0()[3] * self.group2()[3])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[2] * self.group3()[1])),
                (-(other.group0()[0] * self.group3()[2]) - (other.group0()[1] * self.group1()[3])),
                (-(other.group0()[1] * self.group3()[0]) - (other.group0()[2] * self.group1()[3])),
                ((other.group0()[2] * self.group1()[2]) + (other.group0()[3] * self.group2()[3])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) + (other.group0()[3] * self.group1()[0])),
                ((other.group0()[2] * self.group2()[0]) + (other.group0()[3] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[3] * self.group1()[2])),
                0.0,
            ]) - (Simd32x4::from([self.group2()[1], self.group3()[3], self.group3()[3], self.group0()[1]]) * swizzle!(other.group0(), 2, 1, 2, 1))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group3()[3], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group0(), 0, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[2] * self.group2()[2])])
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))
                - (swizzle!(other.group0(), 2, 0, 1, 3) * swizzle!(self.group1(), 1, 2, 0, 3))),
        );
    }
}
impl GeometricAntiProduct<AntiQuadNum> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       28        0
    //    simd4        9        9        0
    // Totals...
    // yes simd       19       37        0
    //  no simd       46       64        0
    fn geometric_anti_product(self, other: AntiQuadNum) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (self.group0()[0] * other.group0()[2]),
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[2] * other.group0()[2]),
                0.0,
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group3()[3]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]) * swizzle!(other.group0(), 0, 0, 0, 1))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group1()[3]]) * swizzle!(other.group0(), 0, 0, 0, 2))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[0] * self.group2()[0]) - (other.group0()[2] * self.group3()[0]) - (other.group0()[3] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[1]) - (other.group0()[2] * self.group3()[1]) - (other.group0()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group3()[2]) - (other.group0()[3] * self.group1()[2])),
                ((other.group0()[1] * self.group2()[3]) + (other.group0()[3] * self.group1()[3])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group3()[3]]) * swizzle!(other.group0(), 1, 1, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[3] * self.group2()[0]) * -1.0),
                ((other.group0()[3] * self.group2()[1]) * -1.0),
                ((other.group0()[3] * self.group2()[2]) * -1.0),
                0.0,
            ]) + (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group1()[3]]))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]) * swizzle!(other.group0(), 1, 1, 1, 2))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]) * swizzle!(other.group0(), 2, 2, 2, 3))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[2] * self.group1()[0]) + (other.group0()[3] * self.group3()[0])),
                ((other.group0()[2] * self.group1()[1]) + (other.group0()[3] * self.group3()[1])),
                ((other.group0()[2] * self.group1()[2]) + (other.group0()[3] * self.group3()[2])),
                ((other.group0()[3] * self.group2()[3]) * -1.0),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]) * swizzle!(other.group0(), 1, 1, 1, 2))),
        );
    }
}
impl GeometricAntiProduct<AntiScalar> for DipoleInversion {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        1        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0       15        0
    fn geometric_anti_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other[e12345]) * self.group0()),
            // e23, e31, e12, e45
            (Simd32x4::from(other[e12345]) * self.group1()),
            // e15, e25, e35, e1234
            (Simd32x4::from(other[e12345]) * self.group2()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other[e12345]) * self.group3()),
        );
    }
}
impl GeometricAntiProduct<AntiTripleNum> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       30        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       15       35        0
    //  no simd       30       50        0
    fn geometric_anti_product(self, other: AntiTripleNum) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (-(other.group0()[0] * self.group3()[0]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group3()[1]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group3()[2]) - (other.group0()[2] * self.group0()[2])),
                ((other.group0()[1] * self.group2()[3]) * -1.0),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[1] * self.group0()[0]) - (other.group0()[2] * self.group1()[0])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group1()[1])),
                (-(other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group1()[2])),
                ((other.group0()[1] * self.group2()[3]) + (other.group0()[2] * self.group1()[3])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[0]) * -1.0),
                ((other.group0()[1] * self.group1()[1]) * -1.0),
                ((other.group0()[1] * self.group1()[2]) * -1.0),
                0.0,
            ]) + (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group1()[3]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group3()[0])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group3()[1])),
                ((other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group3()[2])),
                ((other.group0()[2] * self.group2()[3]) * -1.0),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))),
        );
    }
}
impl GeometricAntiProduct<Circle> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       66       82        0
    //    simd4       17       17        0
    // Totals...
    // yes simd       83       99        0
    //  no simd      134      150        0
    fn geometric_anti_product(self, other: Circle) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (other.group0()[2] * self.group3()[1])
                    + (self.group0()[0] * other.group1()[3])
                    + (self.group0()[1] * other.group1()[2])
                    + (other.group1()[0] * self.group2()[3])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group3()[0])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (other.group1()[1] * self.group2()[3])),
                (-(other.group0()[0] * self.group3()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (self.group0()[0] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[3])
                    + (other.group1()[2] * self.group2()[3])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self.group2()[2]) - (other.group2()[1] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[1])
                    + (other.group1()[2] * self.group1()[1])),
                ((other.group0()[1] * self.group3()[3]) - (other.group0()[2] * self.group2()[0]) + (other.group2()[0] * self.group0()[2]) - (other.group2()[2] * self.group0()[0])
                    + (other.group1()[0] * self.group1()[2])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[2] * self.group3()[3]) - (other.group2()[0] * self.group0()[1])
                    + (other.group2()[1] * self.group0()[0])
                    + (other.group1()[1] * self.group1()[0])),
                ((other.group0()[2] * self.group2()[2])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    - (other.group1()[2] * self.group3()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group3(), 0, 1, 2, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group2()[1] * self.group3()[2]) + (other.group2()[2] * self.group1()[1]) + (other.group1()[2] * self.group2()[1])),
                ((other.group2()[0] * self.group1()[2]) + (other.group2()[2] * self.group3()[0]) + (other.group1()[1] * self.group3()[3])),
                ((other.group2()[0] * self.group3()[1]) + (other.group2()[1] * self.group1()[0]) + (other.group1()[2] * self.group3()[3])),
                (-(other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group3()[2])
                    - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[0], other.group0()[0]]) * swizzle!(self.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[2], other.group0()[1]]) * swizzle!(self.group1(), 2, 0, 3, 1))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group3()[3], self.group2()[2], self.group2()[0], self.group2()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) + (other.group2()[0] * self.group2()[3]) - (other.group2()[1] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[1])
                    + (other.group1()[0] * self.group1()[3])),
                ((other.group0()[2] * self.group2()[0]) + (other.group2()[0] * self.group0()[2]) + (other.group2()[1] * self.group2()[3]) - (other.group2()[2] * self.group0()[0])
                    + (other.group1()[1] * self.group1()[3])),
                ((other.group0()[0] * self.group2()[1]) - (other.group2()[0] * self.group0()[1])
                    + (other.group2()[1] * self.group0()[0])
                    + (other.group2()[2] * self.group2()[3])
                    + (other.group1()[2] * self.group1()[3])),
                (-(other.group2()[1] * self.group1()[1]) + (other.group2()[1] * self.group3()[1]) - (other.group2()[2] * self.group1()[2])
                    + (other.group2()[2] * self.group3()[2])
                    - (other.group1()[2] * self.group2()[2])),
            ]) - (Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))),
        );
    }
}
impl GeometricAntiProduct<CircleRotor> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       53       69        0
    //    simd4       24       24        0
    // Totals...
    // yes simd       77       93        0
    //  no simd      149      165        0
    fn geometric_anti_product(self, other: CircleRotor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (other.group0()[2] * self.group3()[1])
                    + (self.group0()[0] * other.group1()[3])
                    + (self.group0()[0] * other.group2()[3])
                    + (self.group0()[1] * other.group1()[2])
                    + (other.group1()[0] * self.group2()[3])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group3()[0])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[1] * other.group2()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (other.group1()[1] * self.group2()[3])),
                (-(other.group0()[0] * self.group3()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (self.group0()[0] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group0()[2] * other.group2()[3])
                    + (other.group1()[2] * self.group2()[3])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self.group2()[2]) + (other.group1()[2] * self.group1()[1]) + (other.group2()[3] * self.group1()[0])),
                ((other.group0()[1] * self.group3()[3]) - (other.group0()[2] * self.group2()[0]) + (other.group1()[0] * self.group1()[2]) + (other.group2()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[1])
                    + (other.group0()[2] * self.group3()[3])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group2()[3] * self.group1()[2])),
                ((other.group0()[2] * self.group2()[2]) - (self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2]) - (other.group1()[2] * self.group3()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[3]]) * swizzle!(other.group2(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group3(), 0, 1, 2, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group2()[1] * self.group3()[2]) + (other.group2()[2] * self.group1()[1]) + (other.group2()[3] * self.group2()[0])),
                ((other.group1()[1] * self.group3()[3]) + (other.group2()[0] * self.group1()[2]) + (other.group2()[2] * self.group3()[0])),
                ((other.group1()[2] * self.group3()[3]) + (other.group2()[0] * self.group3()[1]) + (other.group2()[1] * self.group1()[0])),
                (-(other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group3()[2])
                    - (self.group0()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([other.group1()[2], other.group2()[3], other.group2()[3], other.group2()[3]]) * swizzle!(self.group2(), 1, 1, 2, 3))
                - (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[0], other.group0()[0]]) * swizzle!(self.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[2], other.group0()[1]]) * swizzle!(self.group1(), 2, 0, 3, 1))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group3()[3], self.group2()[2], self.group2()[0], self.group2()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) + (other.group1()[0] * self.group1()[3])),
                ((other.group0()[2] * self.group2()[0]) + (other.group1()[1] * self.group1()[3])),
                ((other.group0()[0] * self.group2()[1]) + (other.group1()[2] * self.group1()[3])),
                (-(other.group2()[1] * self.group1()[1]) - (other.group2()[2] * self.group1()[2])),
            ]) + (Simd32x4::from(other.group2()[3]) * self.group3())
                - (Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[1]]) * swizzle!(self.group3(), 1, 2, 0, 1))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[2]]) * swizzle!(other.group1(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[2]]) * swizzle!(other.group2(), 0, 1, 2, 2))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))),
        );
    }
}
impl GeometricAntiProduct<Dipole> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       62       78        0
    //    simd4       18       18        0
    // Totals...
    // yes simd       80       96        0
    //  no simd      134      150        0
    fn geometric_anti_product(self, other: Dipole) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[1] * self.group3()[2])
                    - (other.group0()[2] * self.group1()[1])
                    - (other.group0()[2] * self.group3()[1])
                    - (self.group0()[1] * other.group1()[2])
                    - (other.group1()[0] * self.group2()[3])),
                (-(other.group0()[0] * self.group3()[2]) - (other.group0()[1] * self.group1()[3]) + (other.group0()[2] * self.group3()[0])
                    - (self.group0()[2] * other.group1()[0])
                    - (other.group1()[1] * self.group2()[3])),
                ((other.group0()[0] * self.group3()[1])
                    - (other.group0()[1] * self.group3()[0])
                    - (other.group0()[2] * self.group1()[3])
                    - (self.group0()[0] * other.group1()[1])
                    - (other.group1()[2] * self.group2()[3])),
                ((other.group0()[0] * self.group2()[0])
                    + (other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])
                    + (other.group2()[0] * self.group0()[0])
                    + (other.group2()[1] * self.group0()[1])
                    + (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group1()[3]]) * swizzle!(self.group1(), 3, 2, 0, 3))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group1()[1]]) * swizzle!(other.group1(), 3, 2, 0, 1))
                + (Simd32x4::from([self.group0()[2], self.group0()[1], self.group0()[2], self.group1()[2]]) * swizzle!(other.group1(), 1, 3, 3, 2))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[2] * self.group2()[1]) - (other.group2()[0] * self.group2()[3]) + (other.group2()[1] * self.group0()[2])
                    - (other.group2()[2] * self.group0()[1])
                    + (other.group1()[1] * self.group1()[2])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group2()[0] * self.group0()[2]) - (other.group2()[1] * self.group2()[3])
                    + (other.group2()[2] * self.group0()[0])
                    + (other.group1()[2] * self.group1()[0])),
                (-(other.group0()[1] * self.group2()[0]) + (other.group2()[0] * self.group0()[1])
                    - (other.group2()[1] * self.group0()[0])
                    - (other.group2()[2] * self.group2()[3])
                    + (other.group1()[0] * self.group1()[1])),
                ((other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))
                - (swizzle!(other.group1(), 3, 3, 3, 2) * swizzle!(self.group3(), 0, 1, 2, 2))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(other.group2()[2] * self.group1()[1]) - (other.group1()[2] * self.group2()[1]) - (other.group1()[3] * self.group2()[0])),
                (-(other.group2()[0] * self.group1()[2]) - (other.group1()[1] * self.group3()[3]) - (other.group1()[3] * self.group2()[1])),
                (-(other.group2()[1] * self.group1()[0]) - (other.group1()[2] * self.group3()[3]) - (other.group1()[3] * self.group2()[2])),
                (-(other.group2()[1] * self.group3()[1]) - (other.group2()[2] * self.group3()[2])
                    + (other.group1()[1] * self.group2()[1])
                    + (other.group1()[2] * self.group2()[2])),
            ]) + (Simd32x4::from(other.group2()[0]) * Simd32x4::from([self.group1()[3], self.group3()[2], self.group1()[1], self.group1()[0]]))
                + (Simd32x4::from(other.group2()[1]) * Simd32x4::from([self.group1()[2], self.group1()[3], self.group3()[0], self.group1()[1]]))
                + (Simd32x4::from(other.group2()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group1()[3], self.group1()[2]]))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group2()[0]]) * swizzle!(self.group3(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group3()[3], self.group2()[2], self.group2()[0], self.group3()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))
                + (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group2(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group3()[3]) - (other.group0()[2] * self.group2()[1]) + (other.group2()[0] * self.group2()[3])
                    - (other.group2()[1] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[1])
                    - (other.group1()[1] * self.group3()[2])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group3()[3])
                    + (other.group2()[0] * self.group0()[2])
                    + (other.group2()[1] * self.group2()[3])
                    - (other.group2()[2] * self.group0()[0])
                    - (other.group1()[2] * self.group3()[0])),
                (-(other.group0()[1] * self.group2()[0]) - (other.group0()[2] * self.group3()[3]) - (other.group2()[0] * self.group0()[1])
                    + (other.group2()[1] * self.group0()[0])
                    + (other.group2()[2] * self.group2()[3])
                    - (other.group1()[0] * self.group3()[1])),
                ((other.group0()[0] * self.group3()[0])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[1] * self.group3()[1])
                    + (other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])
                    + (self.group0()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group2(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))
                + (Simd32x4::from([self.group1()[3], self.group3()[2], self.group3()[0], self.group0()[0]]) * swizzle!(other.group1(), 0, 0, 1, 0))
                + (Simd32x4::from([self.group3()[1], self.group1()[3], self.group1()[3], self.group0()[1]]) * swizzle!(other.group1(), 2, 1, 2, 1))),
        );
    }
}
impl GeometricAntiProduct<DipoleInversion> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       61       77        0
    //    simd4       37       37        0
    // Totals...
    // yes simd       98      114        0
    //  no simd      209      225        0
    fn geometric_anti_product(self, other: DipoleInversion) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (-(other.group0()[2] * self.group1()[1])
                    - (self.group0()[1] * other.group1()[2])
                    - (other.group1()[0] * self.group2()[3])
                    - (other.group2()[3] * self.group1()[0])
                    - (other.group2()[3] * self.group3()[0])),
                (-(other.group0()[1] * self.group1()[3])
                    - (self.group0()[2] * other.group1()[0])
                    - (other.group1()[1] * self.group2()[3])
                    - (other.group2()[3] * self.group1()[1])
                    - (other.group2()[3] * self.group3()[1])),
                (-(other.group0()[2] * self.group1()[3])
                    - (self.group0()[0] * other.group1()[1])
                    - (other.group1()[2] * self.group2()[3])
                    - (other.group2()[3] * self.group1()[2])
                    - (other.group2()[3] * self.group3()[2])),
                ((other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])
                    + (other.group1()[1] * self.group1()[1])
                    + (other.group1()[2] * self.group1()[2])
                    + (other.group3()[1] * self.group3()[1])
                    + (other.group3()[2] * self.group3()[2])),
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group1()[2], other.group3()[1], other.group2()[0]]))
                + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group3()[2], other.group1()[3], other.group1()[0], other.group2()[1]]))
                + (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[3], other.group2()[2]]))
                - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group1()[3]]) * swizzle!(self.group1(), 3, 2, 0, 3))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group3(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group3(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group3(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group0()[0]]) * swizzle!(self.group2(), 3, 3, 3, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[2] * self.group2()[1]) + (self.group0()[2] * other.group2()[1]) + (other.group1()[1] * self.group1()[2])),
                (-(other.group0()[0] * self.group2()[2]) + (self.group0()[0] * other.group2()[2]) + (other.group1()[2] * self.group1()[0])),
                (-(other.group0()[1] * self.group2()[0]) + (self.group0()[1] * other.group2()[0]) + (other.group1()[0] * self.group1()[1])),
                ((other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2]) - (other.group2()[3] * self.group3()[3])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))
                - (Simd32x4::from([self.group1()[3], self.group3()[2], self.group3()[0], self.group1()[1]]) * swizzle!(other.group3(), 0, 0, 1, 1))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[2]]) * swizzle!(other.group2(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[1]]) * swizzle!(other.group2(), 0, 1, 2, 1))
                - (Simd32x4::from([self.group3()[1], self.group1()[3], self.group1()[3], self.group1()[2]]) * swizzle!(other.group3(), 2, 1, 2, 2))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]) * swizzle!(other.group3(), 1, 2, 0, 3))
                - (swizzle!(other.group1(), 3, 3, 3, 2) * swizzle!(self.group3(), 0, 1, 2, 2))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(other.group1()[2] * self.group2()[1])
                    - (other.group1()[3] * self.group2()[0])
                    - (other.group3()[2] * self.group2()[1])
                    - (other.group3()[3] * self.group1()[0])),
                (-(other.group1()[3] * self.group2()[1])
                    - (other.group3()[0] * self.group2()[2])
                    - (other.group3()[1] * self.group3()[3])
                    - (other.group3()[3] * self.group1()[1])),
                (-(other.group1()[3] * self.group2()[2])
                    - (other.group2()[1] * self.group1()[0])
                    - (other.group3()[1] * self.group2()[0])
                    - (other.group3()[3] * self.group1()[2])),
                ((other.group1()[2] * self.group2()[2]) + (other.group3()[1] * self.group2()[1]) + (other.group3()[2] * self.group2()[2]) + (other.group3()[3] * self.group1()[3])),
            ]) + (Simd32x4::from(other.group2()[0]) * Simd32x4::from([self.group1()[3], self.group3()[2], self.group1()[1], self.group1()[0]]))
                + (Simd32x4::from(other.group2()[1]) * Simd32x4::from([self.group1()[2], self.group1()[3], self.group3()[0], self.group1()[1]]))
                + (Simd32x4::from(other.group2()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group1()[3], self.group1()[2]]))
                - (Simd32x4::from([other.group2()[1], other.group1()[1], other.group1()[2], other.group2()[0]]) * swizzle!(self.group3(), 2, 3, 3, 0))
                - (Simd32x4::from([other.group3()[0], other.group2()[2], other.group3()[2], other.group2()[2]]) * swizzle!(self.group3(), 3, 0, 3, 2))
                + (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[1]]) * swizzle!(self.group2(), 2, 0, 1, 1))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group3()[1], self.group3()[1]]) * swizzle!(other.group2(), 2, 0, 0, 1))
                + (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group3()[3], self.group2()[2], self.group2()[0], self.group3()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))
                + (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group2(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group3()[3]) - (other.group0()[2] * self.group2()[1])
                    + (self.group0()[0] * other.group3()[3])
                    + (self.group0()[1] * other.group2()[2])
                    - (other.group1()[1] * self.group3()[2])
                    + (other.group2()[0] * self.group2()[3])
                    - (other.group2()[3] * self.group2()[0])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group3()[3])
                    + (self.group0()[1] * other.group3()[3])
                    + (self.group0()[2] * other.group2()[0])
                    - (other.group1()[2] * self.group3()[0])
                    + (other.group2()[1] * self.group2()[3])
                    - (other.group2()[3] * self.group2()[1])),
                (-(other.group0()[1] * self.group2()[0]) - (other.group0()[2] * self.group3()[3])
                    + (self.group0()[0] * other.group2()[1])
                    + (self.group0()[2] * other.group3()[3])
                    - (other.group1()[0] * self.group3()[1])
                    + (other.group2()[2] * self.group2()[3])
                    - (other.group2()[3] * self.group2()[2])),
                ((other.group0()[0] * self.group3()[0]) + (other.group0()[1] * self.group3()[1]) + (other.group0()[2] * self.group1()[2]) + (other.group0()[2] * self.group3()[2])
                    - (self.group0()[1] * other.group3()[1])
                    + (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group2(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[3]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group0()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[3], self.group3()[2], self.group3()[0], self.group0()[0]]) * swizzle!(other.group1(), 0, 0, 1, 0))
                + (Simd32x4::from([self.group3()[1], self.group1()[3], self.group1()[3], self.group0()[1]]) * swizzle!(other.group1(), 2, 1, 2, 1))),
        );
    }
}
impl GeometricAntiProduct<DualNum321> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       15        0
    //    simd4        2        5        0
    // Totals...
    // yes simd        8       20        0
    //  no simd       14       35        0
    fn geometric_anti_product(self, other: DualNum321) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[2])),
                (other.group0()[0] * self.group1()[3] * -1.0),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(other.group0()[0] * self.group3()[0]) + (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group1()[1])),
                (-(other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            ((Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]]) * self.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group0()[0]]) * self.group2())),
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                + (Simd32x4::from(other.group0()[1]) * self.group3())),
        );
    }
}
impl GeometricAntiProduct<DualNum4> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       22        0
    //    simd4        1        3        0
    // Totals...
    // yes simd       11       25        0
    //  no simd       14       34        0
    fn geometric_anti_product(self, other: DualNum4) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[0] * self.group3()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group0()[2])),
                (other.group0()[0] * self.group3()[3]),
            ]),
            // e23, e31, e12, e45
            ((Simd32x4::from(other.group0()[0])
                * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(other.group0()[1]) * self.group1())),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[1] * self.group2()[0]),
                (other.group0()[1] * self.group2()[1]),
                (other.group0()[1] * self.group2()[2]),
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group2()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group3()[0])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group3()[1])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group3()[2])),
                (other.group0()[1] * self.group3()[3]),
            ]),
        );
    }
}
impl GeometricAntiProduct<DualNum5> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       14        0
    //    simd4        2        5        0
    // Totals...
    // yes simd        8       19        0
    //  no simd       14       34        0
    fn geometric_anti_product(self, other: DualNum5) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                (other.group0()[0] * self.group2()[3]),
            ]),
            // e23, e31, e12, e45
            ((Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))
                + (Simd32x4::from(other.group0()[1]) * self.group1())),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) - (other.group0()[0] * self.group3()[0]) + (other.group0()[1] * self.group2()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group2()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group2()[2])),
                (other.group0()[1] * self.group2()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(other.group0()[0])
                * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(other.group0()[1]) * self.group3())),
        );
    }
}
impl GeometricAntiProduct<FlatPoint> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       25        0
    //    simd4        9        9        0
    // Totals...
    // yes simd       21       34        0
    //  no simd       48       61        0
    fn geometric_anti_product(self, other: FlatPoint) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (self.group0()[2] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (self.group0()[1] * other.group0()[0]),
                0.0,
            ]) - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))),
            // e235, e315, e125, e5
            (Simd32x4::from([0.0, 0.0, 0.0, ((self.group3()[3] * other.group0()[3]) * -1.0)])
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[2]]) * swizzle!(other.group0(), 2, 0, 1, 2))
                + (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group0(), 0, 1, 2, 1))
                - (swizzle!(self.group3(), 2, 0, 1, 2) * swizzle!(other.group0(), 1, 2, 0, 2))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (self.group1()[0] * other.group0()[3]) + (self.group2()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[2])
                    + (self.group0()[2] * other.group0()[0])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group2()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[3]) + (self.group2()[3] * other.group0()[2])),
                (self.group2()[3] * other.group0()[3]),
            ]),
        );
    }
}
impl GeometricAntiProduct<Flector> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       32        0
    //    simd4       22       22        0
    // Totals...
    // yes simd       42       54        0
    //  no simd      108      120        0
    fn geometric_anti_product(self, other: Flector) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other.group0()[3]) + (self.group3()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[1]]) * swizzle!(other.group1(), 0, 1, 2, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (self.group0()[2] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (self.group0()[1] * other.group0()[0]),
                0.0,
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[2]]) * swizzle!(other.group1(), 2, 0, 1, 2))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group1(), 0, 1, 2, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group1()[0] * other.group1()[3]) - (self.group2()[1] * other.group1()[2])),
                (-(self.group1()[1] * other.group1()[3]) - (self.group2()[2] * other.group1()[0])),
                (-(self.group1()[2] * other.group1()[3]) - (self.group2()[0] * other.group1()[1])),
                ((self.group2()[1] * other.group1()[1]) + (self.group2()[2] * other.group1()[2])),
            ]) - (Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[2]]) * swizzle!(other.group0(), 2, 0, 1, 2))
                + (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group0(), 0, 1, 2, 1))
                - (swizzle!(self.group3(), 2, 0, 1, 2) * swizzle!(other.group0(), 1, 2, 0, 2))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[2] * other.group0()[1])
                    + (self.group1()[0] * other.group0()[3])
                    + (self.group1()[1] * other.group1()[2])
                    + (self.group2()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group1()[2] * other.group1()[0])
                    + (self.group2()[3] * other.group0()[1])),
                (-(self.group0()[1] * other.group0()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group1()[0] * other.group1()[1])
                    + (self.group1()[2] * other.group0()[3])
                    + (self.group2()[3] * other.group0()[2])),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group2()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<Line> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       70       86        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       71       87        0
    //  no simd       74       90        0
    fn geometric_anti_product(self, other: Line) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (other.group0()[0] * self.group2()[3])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0]) + (other.group0()[1] * self.group2()[3])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (other.group0()[2] * self.group2()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (other.group1()[0] * self.group2()[3])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0]) + (other.group0()[0] * self.group1()[2])
                    - (other.group0()[2] * self.group1()[0])
                    + (other.group1()[1] * self.group2()[3])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) - (other.group0()[0] * self.group1()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group2()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group3()[0])
                    - (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group3()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1])
                    - (other.group1()[0] * self.group1()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[1] * self.group3()[2])
                    + (other.group1()[2] * self.group1()[1])
                    - (other.group1()[2] * self.group3()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group3()[3]) - (other.group0()[2] * self.group2()[0]) + (other.group1()[0] * self.group1()[2])
                    - (other.group1()[0] * self.group3()[2])
                    - (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group1()[0])
                    + (other.group1()[2] * self.group3()[0])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) + (other.group0()[2] * self.group3()[3])
                    - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[0] * self.group3()[1])
                    + (other.group1()[1] * self.group1()[0])
                    - (other.group1()[1] * self.group3()[0])
                    - (other.group1()[2] * self.group1()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) + (other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group3()[2])
                    + (other.group1()[0] * self.group2()[3])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0]) + (other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group3()[0])
                    + (other.group1()[1] * self.group2()[3])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) - (other.group0()[0] * self.group3()[1])
                    + (other.group0()[2] * self.group1()[3])
                    + (other.group1()[2] * self.group2()[3])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    + (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group1()[2])
                    + (other.group1()[2] * self.group3()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<Motor> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       48       64        0
    //    simd4       14       14        0
    // Totals...
    // yes simd       62       78        0
    //  no simd      104      120        0
    fn geometric_anti_product(self, other: Motor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) + (self.group1()[1] * other.group0()[2]) + (self.group2()[3] * other.group1()[0])),
                ((self.group0()[2] * other.group1()[0]) + (self.group1()[2] * other.group0()[0]) + (self.group2()[3] * other.group1()[1])),
                ((self.group0()[2] * other.group1()[3]) + (self.group1()[2] * other.group0()[3]) + (self.group2()[3] * other.group1()[2])),
                (-(self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group3()[1] * other.group0()[1])
                    - (self.group3()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group2()[3]]) * swizzle!(other.group1(), 3, 3, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (swizzle!(self.group1(), 0, 1, 0, 3) * swizzle!(other.group0(), 3, 3, 1, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group1()[0] * other.group1()[3]) + (self.group1()[1] * other.group1()[2]) - (self.group1()[2] * other.group1()[1]) - (self.group1()[3] * other.group1()[0])
                    + (self.group2()[1] * other.group0()[2])
                    - (self.group3()[0] * other.group1()[3])
                    - (self.group3()[1] * other.group1()[2])
                    + (self.group3()[2] * other.group1()[1])
                    + (self.group3()[3] * other.group0()[0])),
                (-(self.group1()[0] * other.group1()[2]) + (self.group1()[1] * other.group1()[3]) + (self.group1()[2] * other.group1()[0])
                    - (self.group1()[3] * other.group1()[1])
                    + (self.group2()[2] * other.group0()[0])
                    + (self.group3()[0] * other.group1()[2])
                    - (self.group3()[1] * other.group1()[3])
                    - (self.group3()[2] * other.group1()[0])
                    + (self.group3()[3] * other.group0()[1])),
                ((self.group1()[0] * other.group1()[1]) - (self.group1()[1] * other.group1()[0]) + (self.group1()[2] * other.group1()[3]) - (self.group1()[3] * other.group1()[2])
                    + (self.group2()[2] * other.group0()[3])
                    - (self.group3()[0] * other.group1()[1])
                    + (self.group3()[1] * other.group1()[0])
                    - (self.group3()[2] * other.group1()[3])
                    + (self.group3()[3] * other.group0()[2])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (swizzle!(self.group2(), 0, 1, 0, 3) * swizzle!(other.group0(), 3, 3, 1, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group3()[0] * other.group0()[3]) + (self.group3()[1] * other.group0()[2])),
                ((self.group3()[1] * other.group0()[3]) + (self.group3()[2] * other.group0()[0])),
                ((self.group3()[0] * other.group0()[1]) + (self.group3()[2] * other.group0()[3])),
                (-(self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group3()[0]]) * swizzle!(other.group1(), 3, 3, 1, 0))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[2], self.group3()[1]]) * swizzle!(other.group1(), 2, 0, 3, 1))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group3()[3]]) * other.group0())
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[2]]) * swizzle!(other.group1(), 0, 1, 2, 2))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<MultiVector> for DipoleInversion {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      114      140        0
    //    simd2        4        4        0
    //    simd3       50       52        0
    //    simd4       44       44        0
    // Totals...
    // yes simd      212      240        0
    //  no simd      448      480        0
    fn geometric_anti_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                (-(self.group0()[0] * other.group8()[0])
                    - (self.group0()[1] * other.group8()[1])
                    - (self.group0()[2] * other.group8()[2])
                    - (other.group7()[0] * self.group2()[0])
                    - (other.group7()[1] * self.group2()[1])
                    - (other.group7()[2] * self.group2()[2])
                    - (self.group1()[0] * other.group6()[0])
                    - (self.group1()[1] * other.group6()[1])
                    - (self.group1()[2] * other.group6()[2])
                    + (self.group2()[3] * other[e1])
                    + (self.group3()[3] * other.group1()[3])),
                ((self.group0()[0] * other.group3()[0])
                    + (self.group0()[1] * other.group3()[1])
                    + (self.group0()[2] * other.group3()[2])
                    + (other.group4()[0] * self.group2()[0])
                    + (other.group4()[1] * self.group2()[1])
                    + (other.group4()[2] * self.group2()[2])
                    + (other.group5()[0] * self.group1()[0])
                    + (other.group5()[1] * self.group1()[1])
                    + (other.group5()[2] * self.group1()[2])
                    - (self.group2()[3] * other.group9()[3])
                    - (self.group3()[3] * other[e45])),
            ]) - (Simd32x2::from(self.group1()[3]) * Simd32x2::from([other.group6()[3], other.group3()[3]]))
                + (Simd32x2::from(self.group3()[0]) * Simd32x2::from([other.group1()[0], other.group9()[0]]))
                + (Simd32x2::from(self.group3()[1]) * Simd32x2::from([other.group1()[1], other.group9()[1]]))
                + (Simd32x2::from(self.group3()[2]) * Simd32x2::from([other.group1()[2], other.group9()[2]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group9()[3]) - (self.group0()[2] * other.group3()[1]) - (other.group4()[0] * self.group3()[3]) + (other.group4()[1] * self.group2()[2])
                    - (other.group5()[1] * self.group3()[2])
                    + (self.group2()[3] * other.group3()[0])),
                (-(self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group9()[3]) - (other.group4()[1] * self.group3()[3])
                    + (other.group4()[2] * self.group2()[0])
                    - (other.group5()[2] * self.group3()[0])
                    + (self.group2()[3] * other.group3()[1])),
                (-(self.group0()[1] * other.group3()[0]) + (self.group0()[2] * other.group9()[3]) + (other.group4()[0] * self.group2()[1])
                    - (other.group4()[2] * self.group3()[3])
                    - (other.group5()[0] * self.group3()[1])
                    + (self.group2()[3] * other.group3()[2])),
                ((self.group0()[0] * other.group5()[0]) + (self.group0()[1] * other.group5()[1]) - (self.group0()[1] * other.group9()[1]) + (self.group0()[2] * other.group5()[2])
                    - (self.group0()[2] * other.group9()[2])
                    + (other.group4()[2] * self.group3()[2])),
            ]) - (Simd32x4::from(other[e45]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group4()[0]]) * swizzle!(self.group3(), 0, 1, 2, 0))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group2()[3]]) * swizzle!(other.group3(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group4()[2], other.group4()[0], other.group4()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other.group4()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group4()[1]]) * swizzle!(self.group3(), 1, 2, 0, 1))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group9(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group9()[1], other.group4()[1]]) * swizzle!(self.group1(), 0, 1, 0, 1))
                + (Simd32x4::from([other.group9()[2], other.group9()[0], other.group3()[3], other.group4()[2]]) * swizzle!(self.group1(), 1, 2, 2, 2))),
            // e5
            (-(other.group0()[0] * self.group3()[3])
                + (other.group5()[0] * self.group2()[0])
                + (other.group5()[1] * self.group2()[1])
                + (other.group5()[2] * self.group2()[2])
                + (self.group1()[0] * other.group3()[0])
                + (self.group1()[1] * other.group3()[1])
                + (self.group1()[2] * other.group3()[2])
                + (self.group1()[3] * other.group9()[3])
                + (self.group2()[0] * other.group9()[0])
                + (self.group2()[1] * other.group9()[1])
                + (self.group2()[2] * other.group9()[2])
                - (self.group3()[0] * other.group3()[0])
                - (self.group3()[1] * other.group3()[1])
                - (self.group3()[2] * other.group3()[2])
                - (self.group3()[3] * other.group3()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group8()[1] * self.group3()[2]) - (self.group3()[3] * other.group1()[0]) + (self.group3()[3] * other.group6()[0])),
                ((other.group8()[2] * self.group3()[0]) - (self.group3()[3] * other.group1()[1]) + (self.group3()[3] * other.group6()[1])),
                ((other.group8()[0] * self.group3()[1]) - (self.group3()[3] * other.group1()[2]) + (self.group3()[3] * other.group6()[2])),
                ((other.group7()[2] * self.group2()[2]) + (self.group1()[2] * other.group1()[2]) + (self.group2()[3] * other[e1])),
            ]) + (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                - (Simd32x4::from(other.group8()[0]) * Simd32x4::from([self.group1()[3], self.group3()[2], self.group1()[1], self.group0()[0]]))
                - (Simd32x4::from(other.group8()[1]) * Simd32x4::from([self.group1()[2], self.group1()[3], self.group3()[0], self.group0()[1]]))
                - (Simd32x4::from(other.group8()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group1()[3], self.group0()[2]]))
                + (Simd32x4::from([other.group8()[2], other.group8()[0], other.group8()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group2()[0], self.group2()[0], self.group2()[1], self.group3()[0]]) * swizzle!(other.group6(), 3, 2, 0, 0))
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group3()[3]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group2()[2], self.group2()[1], self.group2()[2], self.group3()[1]]) * swizzle!(other.group6(), 1, 3, 3, 1))
                + (Simd32x4::from([other.group1()[1], other.group6()[0], other.group1()[0], other.group7()[1]]) * swizzle!(self.group2(), 2, 2, 1, 1))
                + (Simd32x4::from([other.group6()[2], other.group1()[2], other.group6()[1], other.group7()[0]]) * swizzle!(self.group2(), 1, 0, 0, 0))
                + (Simd32x4::from([other[e1], other[e1], other[e1], other.group1()[1]]) * swizzle!(self.group1(), 0, 1, 2, 1))
                - (Simd32x4::from([other[e1], other[e1], other[e1], other.group6()[2]]) * swizzle!(self.group3(), 0, 1, 2, 2))),
            // e41, e42, e43
            ((Simd32x3::from(other.group0()[1]) * self.group0())
                + (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from([self.group1()[1], self.group3()[2], self.group3()[0]]) * swizzle!(other.group7(), 2, 0, 1))
                - (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]) * swizzle!(other.group7(), 1, 2, 0))
                + (Simd32x3::from([self.group1()[3], self.group1()[2], self.group1()[0]]) * swizzle!(other.group7(), 0, 0, 1))
                + (Simd32x3::from([self.group3()[1], self.group1()[3], self.group1()[3]]) * swizzle!(other.group7(), 2, 1, 2))
                - (Simd32x3::from([self.group3()[2], self.group3()[0], self.group3()[1]]) * swizzle!(other.group7(), 1, 2, 0))
                - (Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group1()[2], other.group1()[0], other.group6()[1]]) * swizzle!(self.group0(), 1, 2, 0))
                - (Simd32x3::from([other.group6()[1], other.group6()[2], other.group6()[0]]) * swizzle!(self.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group6()[2], other.group6()[0], other.group6()[3]]) * swizzle!(self.group0(), 1, 2, 2))
                + (Simd32x3::from([other.group6()[3], other.group6()[3], other.group1()[1]]) * swizzle!(self.group0(), 0, 1, 0))),
            // e23, e31, e12
            (Simd32x3::from([
                ((self.group1()[1] * other.group6()[2]) - (self.group1()[2] * other.group6()[1]) - (self.group3()[1] * other.group1()[2]) + (self.group3()[2] * other.group1()[1])),
                (-(self.group1()[0] * other.group6()[2]) + (self.group1()[2] * other.group6()[0]) + (self.group3()[0] * other.group1()[2])
                    - (self.group3()[2] * other.group1()[0])),
                ((self.group1()[0] * other.group6()[1]) - (self.group1()[1] * other.group6()[0]) - (self.group3()[0] * other.group1()[1]) + (self.group3()[1] * other.group1()[0])),
            ]) + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group2()[3]) * other.group8())
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                - (Simd32x3::from(other.group6()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from([other.group8()[2], other.group8()[0], other[e1]]) * swizzle!(self.group0(), 1, 2, 2))
                + (Simd32x3::from([self.group2()[1], self.group3()[3], self.group3()[3]]) * swizzle!(other.group7(), 2, 1, 2))
                - (Simd32x3::from([self.group2()[2], self.group2()[0], self.group2()[1]]) * swizzle!(other.group7(), 1, 2, 0))
                + (Simd32x3::from([self.group3()[3], self.group2()[2], self.group2()[0]]) * swizzle!(other.group7(), 0, 0, 1))
                + (Simd32x3::from([other[e1], other[e1], other.group8()[1]]) * swizzle!(self.group0(), 0, 1, 0))
                - (swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group8(), 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group3()[1]) - (other.group4()[2] * self.group2()[1]) - (self.group1()[3] * other.group9()[0])),
                ((self.group0()[0] * other.group3()[2]) - (other.group4()[0] * self.group2()[2]) - (self.group1()[3] * other.group9()[1])),
                ((self.group0()[1] * other.group3()[0]) - (other.group4()[1] * self.group2()[0]) - (self.group1()[3] * other.group9()[2])),
                (-(self.group0()[2] * other.group3()[2]) + (other.group4()[1] * self.group2()[1]) + (other.group4()[2] * self.group2()[2])),
            ]) - (Simd32x4::from(other[e45]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))
                - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group9()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group9(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group3(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[2], other.group5()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group4()[1], other.group4()[2], other.group4()[0], other.group4()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group5()[1], other.group5()[2], other.group5()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group9()[2]]) * swizzle!(self.group1(), 1, 2, 0, 2))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[1]]) * swizzle!(other.group3(), 0, 1, 2, 1))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]) * swizzle!(other.group9(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group3()[3], other.group3()[3], other.group9()[1], other.group5()[1]]) * swizzle!(self.group3(), 0, 1, 0, 1))
                - (Simd32x4::from([other.group9()[2], other.group9()[0], other.group3()[3], other.group5()[2]]) * swizzle!(self.group3(), 1, 2, 2, 2))),
            // e423, e431, e412
            (-(Simd32x3::from(other.group0()[0]) * self.group0())
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group3()[3], other.group5()[2], other.group9()[1]]))
                + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group9()[2], other.group3()[3], other.group5()[0]]))
                + (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group5()[1], other.group9()[0], other.group3()[3]]))
                + (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                - (Simd32x3::from(self.group2()[3]) * other.group5())
                - (Simd32x3::from(other[e45]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(other[e45]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                - (Simd32x3::from([other.group5()[2], other.group9()[2], other.group5()[1]]) * swizzle!(self.group0(), 1, 0, 0))
                - (Simd32x3::from([self.group1()[1], self.group3()[2], self.group3()[0]]) * swizzle!(other.group4(), 2, 0, 1))
                + (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]) * swizzle!(other.group4(), 1, 2, 0))
                - (Simd32x3::from([self.group1()[3], self.group1()[2], self.group1()[0]]) * swizzle!(other.group4(), 0, 0, 1))
                - (Simd32x3::from([self.group3()[1], self.group1()[3], self.group1()[3]]) * swizzle!(other.group4(), 2, 1, 2))
                + (Simd32x3::from([self.group3()[2], self.group3()[0], self.group3()[1]]) * swizzle!(other.group4(), 1, 2, 0))
                - (Simd32x3::from([other.group9()[1], other.group5()[0], other.group9()[0]]) * swizzle!(self.group0(), 2, 2, 1))),
            // e235, e315, e125
            (Simd32x3::from([
                (-(self.group1()[1] * other.group3()[2]) - (self.group2()[1] * other.group9()[2]) + (self.group2()[2] * other.group9()[1])
                    - (self.group3()[2] * other.group3()[1])),
                (-(self.group1()[2] * other.group3()[0]) + (self.group2()[0] * other.group9()[2])
                    - (self.group2()[2] * other.group9()[0])
                    - (self.group3()[0] * other.group3()[2])),
                (-(self.group1()[0] * other.group3()[1]) - (self.group2()[0] * other.group9()[1]) + (self.group2()[1] * other.group9()[0])
                    - (self.group3()[1] * other.group3()[0])),
            ]) - (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                - (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                + (Simd32x3::from(other.group3()[0]) * Simd32x3::from([self.group1()[3], self.group3()[2], self.group1()[1]]))
                + (Simd32x3::from(other.group3()[1]) * Simd32x3::from([self.group1()[2], self.group1()[3], self.group3()[0]]))
                + (Simd32x3::from(other.group3()[2]) * Simd32x3::from([self.group3()[1], self.group1()[0], self.group1()[3]]))
                - (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                - (Simd32x3::from(other.group9()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group9()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                - (Simd32x3::from([self.group2()[1], self.group3()[3], self.group3()[3]]) * swizzle!(other.group5(), 2, 1, 2))
                + (Simd32x3::from([self.group2()[2], self.group2()[0], self.group2()[1]]) * swizzle!(other.group5(), 1, 2, 0))
                - (Simd32x3::from([self.group3()[3], self.group2()[2], self.group2()[0]]) * swizzle!(other.group5(), 0, 0, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[0] * other[e1]) + (self.group0()[1] * other.group8()[2]) - (self.group0()[2] * other.group8()[1]) + (self.group1()[3] * other.group6()[0])),
                (-(self.group0()[0] * other.group8()[2]) + (self.group0()[1] * other[e1]) + (self.group0()[2] * other.group8()[0]) + (self.group1()[3] * other.group6()[1])),
                ((self.group0()[0] * other.group8()[1]) - (self.group0()[1] * other.group8()[0]) + (self.group0()[2] * other[e1]) + (self.group1()[3] * other.group6()[2])),
                ((other.group8()[1] * self.group3()[1]) - (other.group8()[2] * self.group1()[2]) + (other.group8()[2] * self.group3()[2]) - (self.group1()[3] * other[e1])),
            ]) + (Simd32x4::from(other.group0()[1]) * self.group3())
                - (Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group6()[3]]))
                + (Simd32x4::from([other.group7()[1], other.group7()[2], other.group7()[0], other.group1()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group7()[2], other.group7()[0], other.group7()[1], other.group6()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group8()[0], other.group8()[1], other.group8()[2], other.group1()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]) * swizzle!(other.group1(), 1, 2, 0, 2))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[2]]) * swizzle!(other.group6(), 1, 2, 0, 2))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group6()[3], other.group8()[1]]) * swizzle!(self.group1(), 1, 2, 2, 1))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group6()[1]]) * swizzle!(self.group2(), 0, 1, 2, 1))
                + (Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group8()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group6()[3], other.group6()[3], other.group1()[1], other.group8()[0]]) * swizzle!(self.group1(), 0, 1, 0, 0))),
            // e1234
            ((other.group0()[1] * self.group2()[3])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[0] * other.group6()[0])
                - (self.group0()[1] * other.group1()[1])
                - (self.group0()[1] * other.group6()[1])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[2] * other.group6()[2])
                - (other.group7()[0] * self.group1()[0])
                - (other.group7()[0] * self.group3()[0])
                - (other.group7()[1] * self.group1()[1])
                - (other.group7()[1] * self.group3()[1])
                - (other.group7()[2] * self.group1()[2])
                - (other.group7()[2] * self.group3()[2])
                + (self.group1()[3] * other.group1()[3])
                + (self.group2()[3] * other.group6()[3])),
        );
    }
}
impl GeometricAntiProduct<Plane> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       20        0
    //    simd4        9       10        0
    // Totals...
    // yes simd       20       30        0
    //  no simd       47       60        0
    fn geometric_anti_product(self, other: Plane) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([0.0, 0.0, 0.0, (self.group3()[2] * other.group0()[2])])
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e415, e425, e435, e321
            (-(Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[2]]) * swizzle!(other.group0(), 2, 0, 1, 2))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group1()[0] * other.group0()[3]) - (self.group2()[1] * other.group0()[2]) - (self.group3()[3] * other.group0()[0])),
                (-(self.group1()[1] * other.group0()[3]) - (self.group2()[2] * other.group0()[0]) - (self.group3()[3] * other.group0()[1])),
                (-(self.group1()[2] * other.group0()[3]) - (self.group2()[0] * other.group0()[1]) - (self.group3()[3] * other.group0()[2])),
                ((self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2])),
                ((self.group0()[1] * other.group0()[3]) + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<QuadNum> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       21        0
    //    simd4       10       10        0
    // Totals...
    // yes simd       16       31        0
    //  no simd       46       61        0
    fn geometric_anti_product(self, other: QuadNum) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group1()[0] * other.group0()[0]) + (self.group3()[0] * other.group0()[0])),
                ((self.group1()[1] * other.group0()[0]) + (self.group3()[1] * other.group0()[0])),
                ((self.group1()[2] * other.group0()[0]) + (self.group3()[2] * other.group0()[0])),
                ((self.group1()[3] * other.group0()[2]) * -1.0),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]) * swizzle!(other.group0(), 2, 2, 2, 1))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group3()[3]]) * swizzle!(other.group0(), 3, 3, 3, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (self.group2()[0] * other.group0()[0]),
                (self.group2()[1] * other.group0()[0]),
                (self.group2()[2] * other.group0()[0]),
                0.0,
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]) * swizzle!(other.group0(), 1, 1, 1, 3))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                - (swizzle!(other.group0(), 2, 2, 2, 0) * self.group3())),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(self.group2()[0] * other.group0()[2]) - (self.group3()[0] * other.group0()[1])),
                (-(self.group2()[1] * other.group0()[2]) - (self.group3()[1] * other.group0()[1])),
                (-(self.group2()[2] * other.group0()[2]) - (self.group3()[2] * other.group0()[1])),
                (self.group2()[3] * other.group0()[3]),
            ]) + (swizzle!(other.group0(), 1, 1, 1, 0) * self.group1())
                + (swizzle!(other.group0(), 3, 3, 3, 2) * self.group2())),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (self.group3()[0] * other.group0()[3]),
                (self.group3()[1] * other.group0()[3]),
                (self.group3()[2] * other.group0()[3]),
                0.0,
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group3()[3]]) * swizzle!(other.group0(), 1, 1, 1, 3))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]) * swizzle!(other.group0(), 0, 0, 0, 2))
                - (swizzle!(other.group0(), 2, 2, 2, 1) * self.group1())),
        );
    }
}
impl GeometricAntiProduct<RoundPoint> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       16        0
    //    simd4       13       17        0
    // Totals...
    // yes simd       20       33        0
    //  no simd       59       84        0
    fn geometric_anti_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[3]])
                * swizzle!(other.group0(), 1, 2, 0, 3)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other[e2]]))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                + (swizzle!(self.group3(), 0, 1, 2, 2) * swizzle!(other.group0(), 3, 3, 3, 2))),
            // e23, e31, e12, e45
            ((Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[2]])
                * swizzle!(other.group0(), 2, 0, 1, 2)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from(other[e2]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group3()[3]]) * other.group0())
                + (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group2()[2] * other.group0()[1]) - (self.group3()[0] * other[e2])),
                ((self.group2()[0] * other.group0()[2]) - (self.group3()[1] * other[e2])),
                ((self.group2()[1] * other.group0()[0]) - (self.group3()[2] * other[e2])),
                ((self.group0()[2] * other.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group0()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))
                + (Simd32x4::from([other[e2], other[e2], other[e2], other.group0()[3]]) * self.group1())),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[0] * other[e2]) - (self.group2()[0] * other.group0()[3])),
                ((self.group0()[1] * other[e2]) - (self.group2()[1] * other.group0()[3])),
                ((self.group0()[2] * other[e2]) - (self.group2()[2] * other.group0()[3])),
                ((self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other[e2]]) * swizzle!(self.group1(), 1, 2, 0, 3))),
        );
    }
}
impl GeometricAntiProduct<Scalar> for DipoleInversion {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        2        0
    //    simd4        0        6        0
    // Totals...
    // yes simd        0        8        0
    //  no simd        0       30        0
    fn geometric_anti_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other[scalar]) * self.group0() * Simd32x3::from(-1.0)),
            // e415, e425, e435, e321
            (Simd32x4::from(other[scalar]) * self.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e235, e315, e125, e4
            (Simd32x4::from(other[scalar]) * self.group2() * Simd32x4::from(-1.0)),
            // e1, e2, e3, e5
            (Simd32x4::from(other[scalar]) * self.group3() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
    }
}
impl GeometricAntiProduct<Sphere> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       19        0
    //    simd4       12       15        0
    // Totals...
    // yes simd       23       34        0
    //  no simd       59       79        0
    fn geometric_anti_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from([other[e4315], other[e4315], other[e4315], other.group0()[2]]) * swizzle!(self.group3(), 0, 1, 2, 2) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                - (Simd32x4::from(other[e4315]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e415, e425, e435, e321
            (-(Simd32x4::from(other[e4315]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[2]]) * swizzle!(other.group0(), 2, 0, 1, 2))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group1()[0] * other.group0()[3]) - (self.group2()[1] * other.group0()[2]) - (self.group3()[3] * other.group0()[0])),
                (-(self.group1()[1] * other.group0()[3]) - (self.group2()[2] * other.group0()[0]) - (self.group3()[3] * other.group0()[1])),
                (-(self.group1()[2] * other.group0()[3]) - (self.group2()[0] * other.group0()[1]) - (self.group3()[3] * other.group0()[2])),
                ((self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2])),
                ((self.group0()[1] * other.group0()[3]) + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from(other[e4315]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<TripleNum> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       21        0
    //    simd4        6        8        0
    // Totals...
    // yes simd       12       29        0
    //  no simd       30       53        0
    fn geometric_anti_product(self, other: TripleNum) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[2]) + (other.group0()[0] * self.group3()[0])),
                ((self.group0()[1] * other.group0()[2]) + (other.group0()[0] * self.group3()[1])),
                ((self.group0()[2] * other.group0()[2]) + (other.group0()[0] * self.group3()[2])),
                (other.group0()[1] * self.group2()[3]),
            ]) + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))),
            // e23, e31, e12, e45
            ((Simd32x4::from(other.group0()[0])
                * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))
                + (Simd32x4::from(other.group0()[2]) * self.group1())),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group0()[1] * self.group3()[0]) * -1.0),
                ((other.group0()[1] * self.group3()[1]) * -1.0),
                ((other.group0()[1] * self.group3()[2]) * -1.0),
                0.0,
            ]) + (Simd32x4::from(other.group0()[2]) * self.group2())
                + (Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group0()[0]]) * self.group1())),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[1]) - (other.group0()[0] * self.group2()[0])),
                ((self.group0()[1] * other.group0()[1]) - (other.group0()[0] * self.group2()[1])),
                ((self.group0()[2] * other.group0()[1]) - (other.group0()[0] * self.group2()[2])),
                ((other.group0()[1] * self.group1()[3]) * -1.0),
            ]) + (Simd32x4::from(other.group0()[2]) * self.group3())),
        );
    }
}
impl GeometricAntiProduct<VersorEven> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       52        0
    //    simd4       46       48        0
    // Totals...
    // yes simd       86      100        0
    //  no simd      224      244        0
    fn geometric_anti_product(self, other: VersorEven) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group3()[1])
                    + (self.group1()[1] * other.group0()[2])
                    + (self.group1()[3] * other.group0()[0])
                    + (self.group3()[1] * other.group0()[2])),
                (-(self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group0()[3])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group1()[2] * other.group0()[0])
                    + (self.group1()[3] * other.group0()[1])
                    + (self.group3()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group0()[3])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group1()[0] * other.group0()[1])
                    + (self.group1()[3] * other.group0()[2])
                    + (self.group3()[2] * other.group3()[3])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group3(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[1]]) * swizzle!(other.group3(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[2]]) * swizzle!(other.group3(), 0, 1, 2, 2))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[1]]) * swizzle!(self.group1(), 2, 0, 1, 1))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group0()[1], other.group3()[3]]) * swizzle!(self.group3(), 0, 1, 0, 3))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) - (self.group2()[2] * other.group0()[1])),
                ((self.group0()[2] * other.group2()[0]) - (self.group2()[0] * other.group0()[2])),
                ((self.group0()[2] * other.group2()[3]) - (self.group2()[1] * other.group0()[0])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group2()[3]]) * swizzle!(other.group2(), 3, 3, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group3()[3]]) * other.group3())
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[2]]) * swizzle!(other.group3(), 1, 2, 0, 2))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group1()[3]]) * other.group0())
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group3()[3], other.group0()[1]]) * swizzle!(self.group2(), 1, 2, 2, 1))
                + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group3()[0]]) * swizzle!(self.group1(), 0, 1, 0, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group3()[1]]) * swizzle!(self.group1(), 1, 2, 2, 1))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group1()[1]]) * swizzle!(self.group3(), 0, 1, 0, 1))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[2]]) * swizzle!(self.group2(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[3], other.group1()[2]]) * swizzle!(self.group3(), 1, 2, 2, 2))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 0, 1, 0, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group1()[1] * other.group2()[2]) + (self.group2()[2] * other.group3()[1]) + (self.group3()[2] * other.group2()[1]) + (self.group3()[3] * other.group1()[0])),
                ((self.group1()[2] * other.group2()[0]) + (self.group2()[2] * other.group1()[0]) + (self.group3()[0] * other.group2()[2]) + (self.group3()[3] * other.group1()[1])),
                ((self.group1()[2] * other.group2()[3]) + (self.group2()[2] * other.group0()[3]) + (self.group3()[1] * other.group2()[0]) + (self.group3()[3] * other.group1()[2])),
                (-(self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])
                    - (self.group1()[2] * other.group0()[2])
                    - (self.group3()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group2()[0], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 3, 2, 0, 0))
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group3(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group1(), 1, 3, 3, 1))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group0()[1]]) * swizzle!(other.group3(), 0, 1, 2, 1))
                + (Simd32x4::from([other.group0()[3], other.group3()[2], other.group1()[1], other.group0()[3]]) * swizzle!(self.group2(), 0, 0, 0, 3))
                + (Simd32x4::from([other.group1()[2], other.group0()[3], other.group3()[0], other.group1()[3]]) * swizzle!(self.group2(), 1, 1, 1, 3))
                - (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[1]]) * swizzle!(self.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[3], other.group0()[1]]) * swizzle!(self.group3(), 1, 2, 2, 1))
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[1], other.group0()[0]]) * swizzle!(self.group3(), 0, 1, 0, 0))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[1], other.group3()[3]]) * swizzle!(self.group1(), 0, 1, 0, 3))),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(self.group1()[3])
                * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                - (Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group3()[0]]) * swizzle!(other.group2(), 3, 3, 1, 0))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[2], self.group3()[1]]) * swizzle!(other.group2(), 2, 0, 3, 1))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[2]]) * swizzle!(other.group1(), 1, 2, 0, 2))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[1]]) * swizzle!(self.group2(), 2, 0, 1, 1))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group3()[3], other.group1()[1]]) * swizzle!(self.group2(), 1, 2, 2, 1))
                + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group2()[2]]) * swizzle!(self.group3(), 0, 1, 0, 2))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group0()[3]]) * swizzle!(self.group3(), 1, 2, 2, 3))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group2()[1]]) * swizzle!(self.group1(), 0, 1, 0, 1))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[2]]) * swizzle!(self.group2(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[3], other.group2()[2]]) * swizzle!(self.group1(), 1, 2, 2, 2))
                - (Simd32x4::from([other.group3()[3], other.group3()[3], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 0, 1, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<VersorOdd> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       72        0
    //    simd4       42       42        0
    // Totals...
    // yes simd       98      114        0
    //  no simd      224      240        0
    fn geometric_anti_product(self, other: VersorOdd) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3])
                    - (self.group1()[1] * other.group0()[2])
                    - (self.group1()[3] * other.group0()[0])
                    - (self.group2()[3] * other.group1()[0])
                    - (self.group3()[0] * other.group2()[3])
                    - (self.group3()[1] * other.group0()[2])),
                (-(self.group0()[1] * other.group0()[3])
                    - (self.group1()[2] * other.group0()[0])
                    - (self.group1()[3] * other.group0()[1])
                    - (self.group2()[3] * other.group1()[1])
                    - (self.group3()[1] * other.group2()[3])
                    - (self.group3()[2] * other.group0()[0])),
                (-(self.group0()[2] * other.group0()[3])
                    - (self.group1()[0] * other.group0()[1])
                    - (self.group1()[3] * other.group0()[2])
                    - (self.group2()[3] * other.group1()[2])
                    - (self.group3()[0] * other.group0()[1])
                    - (self.group3()[2] * other.group2()[3])),
                ((self.group1()[1] * other.group1()[1])
                    + (self.group1()[2] * other.group1()[2])
                    + (self.group2()[2] * other.group0()[2])
                    + (self.group3()[0] * other.group3()[0])
                    + (self.group3()[1] * other.group3()[1])
                    + (self.group3()[2] * other.group3()[2])),
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group1()[2], other.group3()[1], other.group2()[0]]))
                + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group3()[2], other.group1()[3], other.group1()[0], other.group2()[1]]))
                + (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[3], other.group2()[2]]))
                - (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[3]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group3(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group0()[0]]) * swizzle!(self.group2(), 3, 3, 3, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[2] * other.group2()[1]) - (self.group1()[3] * other.group3()[0]) - (self.group2()[1] * other.group0()[2])),
                ((self.group0()[0] * other.group2()[2]) - (self.group1()[3] * other.group3()[1]) - (self.group2()[2] * other.group0()[0])),
                ((self.group0()[1] * other.group2()[0]) - (self.group1()[3] * other.group3()[2]) - (self.group2()[0] * other.group0()[1])),
                ((self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2]) - (self.group3()[3] * other.group2()[3])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group2(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[2]]) * swizzle!(other.group2(), 0, 1, 2, 2))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]) * swizzle!(other.group3(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]) * swizzle!(self.group3(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group3()[1]]) * swizzle!(self.group1(), 0, 1, 0, 1))
                + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group3()[2]]) * swizzle!(self.group1(), 1, 2, 2, 2))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group1()[0]]) * swizzle!(self.group3(), 0, 1, 0, 0))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[3], other.group1()[1]]) * swizzle!(self.group3(), 1, 2, 2, 1))
                + (swizzle!(self.group2(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group1()[0] * other.group3()[3])
                    - (self.group2()[1] * other.group1()[2])
                    - (self.group2()[1] * other.group3()[2])
                    - (self.group3()[3] * other.group3()[0])),
                (-(self.group1()[1] * other.group3()[3])
                    - (self.group2()[2] * other.group1()[0])
                    - (self.group2()[2] * other.group3()[0])
                    - (self.group3()[3] * other.group3()[1])),
                (-(self.group1()[2] * other.group3()[3])
                    - (self.group2()[0] * other.group3()[1])
                    - (self.group2()[2] * other.group1()[3])
                    - (self.group3()[3] * other.group3()[2])),
                ((self.group2()[1] * other.group1()[1]) + (self.group2()[1] * other.group3()[1]) + (self.group2()[2] * other.group1()[2]) + (self.group2()[2] * other.group3()[2])),
            ]) - (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[0], self.group3()[3]]) * swizzle!(other.group1(), 3, 3, 1, 3))
                + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]) * swizzle!(other.group3(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[2]]) * swizzle!(other.group2(), 2, 0, 1, 2))
                - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[2]]) * swizzle!(self.group3(), 3, 3, 3, 2))
                + (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group2(), 0, 1, 2, 1))
                + (swizzle!(self.group2(), 2, 0, 1, 0) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (swizzle!(self.group3(), 2, 0, 1, 1) * swizzle!(other.group2(), 1, 2, 0, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group2()[2])
                    - (self.group2()[1] * other.group0()[2])
                    - (self.group3()[2] * other.group1()[1])
                    - (self.group3()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group3()[3]) + (self.group0()[2] * other.group2()[0])
                    - (self.group2()[2] * other.group0()[0])
                    - (self.group3()[0] * other.group1()[2])
                    - (self.group3()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[2] * other.group3()[3])
                    - (self.group2()[2] * other.group2()[3])
                    - (self.group3()[1] * other.group1()[0])
                    - (self.group3()[3] * other.group0()[2])),
                ((self.group0()[1] * other.group1()[1]) - (self.group0()[1] * other.group3()[1]) + (self.group0()[2] * other.group1()[2]) - (self.group0()[2] * other.group3()[2])
                    + (self.group3()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[3]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[0]]) * swizzle!(other.group1(), 0, 1, 2, 0))
                + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[2]]) * swizzle!(other.group0(), 1, 2, 0, 2))
                + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group0()[0]]) * swizzle!(self.group3(), 0, 1, 0, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group0()[1]]) * swizzle!(self.group3(), 1, 2, 2, 1))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group0()[0]]) * swizzle!(self.group1(), 0, 1, 0, 0))
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[1], other.group0()[3]]) * swizzle!(self.group2(), 0, 1, 0, 3))
                + (Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[3], other.group0()[1]]) * swizzle!(self.group1(), 1, 2, 2, 1))),
        );
    }
}
impl GeometricAntiProduct<VersorRoundPoint> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       23        0
    //    simd4       16       18        0
    // Totals...
    // yes simd       26       41        0
    //  no simd       74       95        0
    fn geometric_anti_product(self, other: VersorRoundPoint) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group1()[1] * self.group0()[0]) - (self.group0()[2] * other.group0()[1])),
                ((other.group1()[1] * self.group0()[1]) - (self.group0()[0] * other.group0()[2])),
                ((other.group1()[1] * self.group0()[2]) - (self.group0()[1] * other.group0()[0])),
                (self.group3()[3] * other.group0()[3]),
            ]) + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                + (swizzle!(self.group3(), 0, 1, 2, 2) * swizzle!(other.group0(), 3, 3, 3, 2))),
            // e23, e31, e12, e45
            ((Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[2]])
                * swizzle!(other.group0(), 2, 0, 1, 2)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from(other.group1()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))
                + (Simd32x4::from(other.group1()[1]) * self.group1())
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group3()[3]]) * other.group0())
                + (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(other.group1()[0] * self.group3()[0]) + (self.group2()[2] * other.group0()[1])),
                (-(other.group1()[0] * self.group3()[1]) + (self.group2()[0] * other.group0()[2])),
                (-(other.group1()[0] * self.group3()[2]) + (self.group2()[1] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[2]) * -1.0),
            ]) + (Simd32x4::from(other.group1()[1]) * self.group2())
                + (Simd32x4::from([other.group1()[0], other.group1()[0], other.group1()[0], other.group0()[3]]) * self.group1())
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group0()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group1()[0] * self.group0()[0]) - (self.group2()[0] * other.group0()[3])),
                ((other.group1()[0] * self.group0()[1]) - (self.group2()[1] * other.group0()[3])),
                ((other.group1()[0] * self.group0()[2]) - (self.group2()[2] * other.group0()[3])),
                ((self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group1()[1]) * self.group3())
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 3))),
        );
    }
}
impl GeometricAntiProduct<VersorSphere> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       34        0
    //    simd4       14       15        0
    // Totals...
    // yes simd       32       49        0
    //  no simd       74       94        0
    fn geometric_anti_product(self, other: VersorSphere) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (-(other.group1()[0] * self.group3()[0]) - (other.group1()[1] * self.group0()[0])),
                (-(other.group1()[0] * self.group3()[1]) - (other.group1()[1] * self.group0()[1])),
                (-(other.group1()[0] * self.group3()[2]) - (other.group1()[1] * self.group0()[2])),
                (self.group3()[2] * other.group0()[2]),
            ]) - (Simd32x4::from(other.group1()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e415, e425, e435, e321
            ((Simd32x4::from([
                (self.group3()[1] * other.group0()[2]),
                (self.group3()[2] * other.group0()[0]),
                (self.group3()[0] * other.group0()[1]),
                (other.group1()[1] * self.group1()[3]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                - (Simd32x4::from(other.group1()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))
                - (Simd32x4::from([other.group1()[1], other.group1()[1], other.group1()[1], other.group0()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group0(), 0, 1, 2, 2))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group1()[0] * other.group0()[3]) - (self.group2()[1] * other.group0()[2]) - (self.group3()[3] * other.group0()[0])),
                (-(self.group1()[1] * other.group0()[3]) - (self.group2()[2] * other.group0()[0]) - (self.group3()[3] * other.group0()[1])),
                (-(self.group1()[2] * other.group0()[3]) - (self.group2()[0] * other.group0()[1]) - (self.group3()[3] * other.group0()[2])),
                ((self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2])),
            ]) - (Simd32x4::from(other.group1()[1]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))
                + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group1()[1] * self.group3()[0]) + (self.group0()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2])),
                ((other.group1()[1] * self.group3()[1]) + (self.group0()[1] * other.group0()[3]) + (self.group1()[2] * other.group0()[0])),
                ((other.group1()[1] * self.group3()[2]) + (self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1])),
                (-(other.group1()[1] * self.group2()[3]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from(other.group1()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
    }
}
impl InfixGeometricAntiProduct for DualNum321 {}
impl GeometricAntiProduct<AntiCircleRotor> for DualNum321 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       17        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        5       19        0
    //  no simd        8       25        0
    fn geometric_anti_product(self, other: AntiCircleRotor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[1] * other.group1()[0]),
                (self.group0()[1] * other.group1()[1]),
                (self.group0()[1] * other.group1()[2]),
                (-(self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group1()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group2()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group2()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0] * -1.0),
                (self.group0()[0] * other.group1()[1] * -1.0),
                (self.group0()[0] * other.group1()[2] * -1.0),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDipoleInversion> for DualNum321 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       14        0
    //    simd4        2        5        0
    // Totals...
    // yes simd        8       19        0
    //  no simd       14       34        0
    fn geometric_anti_product(self, other: AntiDipoleInversion) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[2])),
                (self.group0()[0] * other.group1()[3]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3]),
            ]),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))),
            // e1, e2, e3, e4
            ((Simd32x4::from(self.group0()[0])
                * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[3]]))),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum321> for DualNum321 {
    type Output = AntiDualNum321;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        1        2        0
    // no simd        2        4        0
    fn geometric_anti_product(self, other: AntiDualNum321) -> Self::Output {
        return AntiDualNum321::from_groups(
            // e45, scalar
            (-(Simd32x2::from(self.group0()[0]) * swizzle!(other.group0(), 1, 0)) + (Simd32x2::from(self.group0()[1]) * other.group0())),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum4> for DualNum321 {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        1        5        0
    fn geometric_anti_product(self, other: AntiDualNum4) -> Self::Output {
        return AntiQuadNum::from_groups(/* e1234, e3215, e45, scalar */ Simd32x4::from([
            (-(other.group0()[0] * self.group0()[0]) + (other.group0()[0] * self.group0()[1])),
            0.0,
            (other.group0()[1] * self.group0()[0] * -1.0),
            (other.group0()[1] * self.group0()[1]),
        ]));
    }
}
impl GeometricAntiProduct<AntiDualNum5> for DualNum321 {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        1        5        0
    fn geometric_anti_product(self, other: AntiDualNum5) -> Self::Output {
        return AntiQuadNum::from_groups(/* e1234, e3215, e45, scalar */ Simd32x4::from([
            0.0,
            ((other.group0()[0] * self.group0()[0]) + (other.group0()[0] * self.group0()[1])),
            (other.group0()[1] * self.group0()[0] * -1.0),
            (other.group0()[1] * self.group0()[1]),
        ]));
    }
}
impl GeometricAntiProduct<AntiFlatPoint> for DualNum321 {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        8        0
    fn geometric_anti_product(self, other: AntiFlatPoint) -> Self::Output {
        return CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other.group0()[3])]),
            // e235, e315, e125, e12345
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[2])),
                (self.group0()[0] * other.group0()[3]),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiFlector> for DualNum321 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        8        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        1       10        0
    //  no simd        4       16        0
    fn geometric_anti_product(self, other: AntiFlector) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3])]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                (self.group0()[1] * other.group0()[3]),
            ]),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[1] * other.group1()[0]),
                (self.group0()[1] * other.group1()[1]),
                (self.group0()[1] * other.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiLine> for DualNum321 {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3       15        0
    fn geometric_anti_product(self, other: AntiLine) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0] * -1.0),
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[0] * other.group0()[2] * -1.0),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiMotor> for DualNum321 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       15        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        4       17        0
    //  no simd        4       23        0
    fn geometric_anti_product(self, other: AntiMotor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other.group0()[3])]),
            // e23, e31, e12, e45
            (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]]) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0] * -1.0),
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[0] * other.group0()[2] * -1.0),
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiPlane> for DualNum321 {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        1        8        0
    fn geometric_anti_product(self, other: AntiPlane) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from(0.0),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiQuadNum> for DualNum321 {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        1        3        0
    // no simd        4       12        0
    fn geometric_anti_product(self, other: AntiQuadNum) -> Self::Output {
        return AntiQuadNum::from_groups(
            // e1234, e3215, e45, scalar
            ((Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group0()[0]])
                * swizzle!(other.group0(), 0, 1, 3, 2)
                * Simd32x4::from([-1.0, 1.0, -1.0, -1.0]))
                + (Simd32x4::from([self.group0()[1], self.group0()[0], self.group0()[1], self.group0()[1]]) * other.group0())),
        );
    }
}
impl GeometricAntiProduct<AntiScalar> for DualNum321 {
    type Output = DualNum321;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        1        0
    // no simd        0        2        0
    fn geometric_anti_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return DualNum321::from_groups(/* e321, e12345 */ (Simd32x2::from(other[e12345]) * self.group0()));
    }
}
impl GeometricAntiProduct<AntiTripleNum> for DualNum321 {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        7        0
    fn geometric_anti_product(self, other: AntiTripleNum) -> Self::Output {
        return AntiQuadNum::from_groups(/* e1234, e3215, e45, scalar */ Simd32x4::from([
            (-(self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[0])),
            ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[1])),
            (self.group0()[0] * other.group0()[2] * -1.0),
            (self.group0()[1] * other.group0()[2]),
        ]));
    }
}
impl GeometricAntiProduct<Circle> for DualNum321 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       16        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        6       17        0
    //  no simd        6       20        0
    fn geometric_anti_product(self, other: Circle) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[2])),
                (self.group0()[0] * other.group1()[3]),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from(self.group0()[1]) * other.group1()),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group2()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group2()[2])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<CircleRotor> for DualNum321 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       14        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        5       17        0
    //  no simd        8       26        0
    fn geometric_anti_product(self, other: CircleRotor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(self.group0()[0])
                * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]])
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[1] * other.group1()[0]),
                (self.group0()[1] * other.group1()[1]),
                (self.group0()[1] * other.group1()[2]),
                ((self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group1()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group2()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group2()[2])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<Dipole> for DualNum321 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       20        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        6       21        0
    //  no simd        6       24        0
    fn geometric_anti_product(self, other: Dipole) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[2])),
                (self.group0()[0] * other.group1()[3] * -1.0),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from(self.group0()[1]) * other.group1()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group2()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group2()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0] * -1.0),
                (self.group0()[0] * other.group1()[1] * -1.0),
                (self.group0()[0] * other.group1()[2] * -1.0),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<DipoleInversion> for DualNum321 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       19        0
    //    simd4        2        5        0
    // Totals...
    // yes simd        8       24        0
    //  no simd       14       39        0
    fn geometric_anti_product(self, other: DipoleInversion) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[2])),
                (self.group0()[0] * other.group1()[3] * -1.0),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group1()[1])),
                (-(self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            ((Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]]) * other.group2() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * other.group2())),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                (self.group0()[1] * other.group3()[3]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]]) * other.group3())),
        );
    }
}
impl GeometricAntiProduct<DualNum321> for DualNum321 {
    type Output = DualNum321;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        1        2        0
    // no simd        2        4        0
    fn geometric_anti_product(self, other: DualNum321) -> Self::Output {
        return DualNum321::from_groups(
            // e321, e12345
            ((Simd32x2::from(other.group0()[0]) * swizzle!(self.group0(), 1, 0)) + (Simd32x2::from(other.group0()[1]) * self.group0())),
        );
    }
}
impl GeometricAntiProduct<DualNum4> for DualNum321 {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        1        4        0
    fn geometric_anti_product(self, other: DualNum4) -> Self::Output {
        return QuadNum::from_groups(/* e4, e5, e321, e12345 */ Simd32x4::from([
            (-(self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[0])),
            0.0,
            (self.group0()[0] * other.group0()[1]),
            (self.group0()[1] * other.group0()[1]),
        ]));
    }
}
impl GeometricAntiProduct<DualNum5> for DualNum321 {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        1        4        0
    fn geometric_anti_product(self, other: DualNum5) -> Self::Output {
        return QuadNum::from_groups(/* e4, e5, e321, e12345 */ Simd32x4::from([
            0.0,
            ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[0])),
            (self.group0()[0] * other.group0()[1]),
            (self.group0()[1] * other.group0()[1]),
        ]));
    }
}
impl GeometricAntiProduct<FlatPoint> for DualNum321 {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        9        0
    fn geometric_anti_product(self, other: FlatPoint) -> Self::Output {
        return AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other.group0()[3])]),
            // e15, e25, e35, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[2])),
                (self.group0()[0] * other.group0()[3] * -1.0),
            ]),
        );
    }
}
impl GeometricAntiProduct<Flector> for DualNum321 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       17        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        4       18        0
    //  no simd        4       21        0
    fn geometric_anti_product(self, other: Flector) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3] * -1.0)]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                (self.group0()[1] * other.group0()[3]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[1] * other.group1()[0]),
                (self.group0()[1] * other.group1()[1]),
                (self.group0()[1] * other.group1()[2]),
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Line> for DualNum321 {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3       12        0
    fn geometric_anti_product(self, other: Line) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[2])),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<Motor> for DualNum321 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        4        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        1        7        0
    //  no simd        4       16        0
    fn geometric_anti_product(self, other: Motor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other.group0()[3])]),
            // e415, e425, e435, e321
            (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]]) * other.group0()),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group0()[0]) * other.group1()) + (Simd32x4::from(self.group0()[1]) * other.group1())),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<MultiVector> for DualNum321 {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2       12        0
    //    simd2        1        3        0
    //    simd3        4        8        0
    //    simd4        4        9        0
    // Totals...
    // yes simd       11       32        0
    //  no simd       32       78        0
    fn geometric_anti_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from([other.group3()[3], other.group0()[1]]) * self.group0() * Simd32x2::from([-1.0, 1.0]))
                + (Simd32x2::from([other.group0()[0], other.group6()[3]]) * swizzle!(self.group0(), 1, 0))),
            // e1, e2, e3, e4
            ((Simd32x4::from(self.group0()[0])
                * Simd32x4::from([other.group6()[0], other.group6()[1], other.group6()[2], other.group1()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(self.group0()[1]) * other.group1())),
            // e5
            ((self.group0()[0] * other[e1]) + (self.group0()[1] * other[e1])),
            // e15, e25, e35, e45
            ((Simd32x4::from([
                (self.group0()[1] * other.group3()[0]),
                (self.group0()[1] * other.group3()[1]),
                (self.group0()[1] * other.group3()[2]),
                (self.group0()[0] * other.group0()[0]),
            ]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * other.group3())),
            // e41, e42, e43
            (-(Simd32x3::from(self.group0()[0]) * other.group4()) + (Simd32x3::from(self.group0()[1]) * other.group4())),
            // e23, e31, e12
            (-(Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]])) + (Simd32x3::from(self.group0()[1]) * other.group5())),
            // e415, e425, e435, e321
            ((Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[1]]))
                + (Simd32x4::from(self.group0()[1]) * other.group6())),
            // e423, e431, e412
            (-(Simd32x3::from(self.group0()[0]) * other.group7()) + (Simd32x3::from(self.group0()[1]) * other.group7())),
            // e235, e315, e125
            ((Simd32x3::from(self.group0()[0]) * other.group8()) + (Simd32x3::from(self.group0()[1]) * other.group8())),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from([
                (self.group0()[0] * other.group5()[0]),
                (self.group0()[0] * other.group5()[1]),
                (self.group0()[0] * other.group5()[2]),
                (self.group0()[1] * other.group9()[3]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]]) * other.group9())),
            // e1234
            (-(self.group0()[0] * other[e45]) + (self.group0()[1] * other[e45])),
        );
    }
}
impl GeometricAntiProduct<Plane> for DualNum321 {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        1       11        0
    fn geometric_anti_product(self, other: Plane) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0] * -1.0),
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[0] * other.group0()[2] * -1.0),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<QuadNum> for DualNum321 {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        1        3        0
    // no simd        4       12        0
    fn geometric_anti_product(self, other: QuadNum) -> Self::Output {
        return QuadNum::from_groups(
            // e4, e5, e321, e12345
            ((Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[1], self.group0()[1]]) * other.group0() * Simd32x4::from([-1.0, 1.0, 1.0, 1.0]))
                + (Simd32x4::from([self.group0()[1], self.group0()[0], self.group0()[0], self.group0()[0]]) * swizzle!(other.group0(), 0, 1, 3, 2))),
        );
    }
}
impl GeometricAntiProduct<RoundPoint> for DualNum321 {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2       10        0
    fn geometric_anti_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[3]))]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                ((self.group0()[0] * other[e2]) + (self.group0()[1] * other[e2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Scalar> for DualNum321 {
    type Output = AntiDualNum321;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        2        0
    // no simd        0        4        0
    fn geometric_anti_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiDualNum321::from_groups(/* e45, scalar */ (Simd32x2::from(other[scalar]) * self.group0() * Simd32x2::from([-1.0, 1.0])));
    }
}
impl GeometricAntiProduct<Sphere> for DualNum321 {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2       13        0
    fn geometric_anti_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0] * -1.0),
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[0] * other.group0()[2] * -1.0),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[0] * other[e4315]) + (self.group0()[1] * other[e4315]))]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<TripleNum> for DualNum321 {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn geometric_anti_product(self, other: TripleNum) -> Self::Output {
        return QuadNum::from_groups(/* e4, e5, e321, e12345 */ Simd32x4::from([
            (-(self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[0])),
            ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[1])),
            (self.group0()[0] * other.group0()[2]),
            (self.group0()[1] * other.group0()[2]),
        ]));
    }
}
impl GeometricAntiProduct<VersorEven> for DualNum321 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        4       10        0
    // no simd       16       40        0
    fn geometric_anti_product(self, other: VersorEven) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(self.group0()[0])
                * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]])
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from(self.group0()[1]) * other.group0())),
            // e415, e425, e435, e321
            ((Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group0()[3]]))
                + (Simd32x4::from(self.group0()[1]) * other.group1())),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group0()[0]) * other.group2()) + (Simd32x4::from(self.group0()[1]) * other.group2())),
            // e1, e2, e3, e4
            ((Simd32x4::from(self.group0()[0])
                * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(self.group0()[1]) * other.group3())),
        );
    }
}
impl GeometricAntiProduct<VersorOdd> for DualNum321 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        4        0
    //    simd4        4        9        0
    // Totals...
    // yes simd        4       13        0
    //  no simd       16       40        0
    fn geometric_anti_product(self, other: VersorOdd) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from(self.group0()[1]) * other.group0())),
            // e23, e31, e12, e45
            (-(Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group0()[3]]))
                + (Simd32x4::from(self.group0()[1]) * other.group1())),
            // e15, e25, e35, e1234
            ((Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]]) * other.group2() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * other.group2())),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                (self.group0()[1] * other.group3()[3]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]]) * other.group3())),
        );
    }
}
impl GeometricAntiProduct<VersorRoundPoint> for DualNum321 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        8        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        2        9        0
    //  no simd        2       12        0
    fn geometric_anti_product(self, other: VersorRoundPoint) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other.group1()[1])]),
            // e415, e425, e435, e321
            (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]])),
            // e235, e315, e125, e5
            Simd32x4::from([0.0, 0.0, 0.0, ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[0]))]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                (-(self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorSphere> for DualNum321 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        8        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        2       10        0
    //  no simd        2       16        0
    fn geometric_anti_product(self, other: VersorSphere) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other.group1()[1])]),
            // e23, e31, e12, e45
            (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]]) * Simd32x4::from(-1.0)),
            // e15, e25, e35, e1234
            Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[0]))]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[3])),
            ]),
        );
    }
}
impl InfixGeometricAntiProduct for DualNum4 {}
impl GeometricAntiProduct<AntiCircleRotor> for DualNum4 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        7       22        0
    fn geometric_anti_product(self, other: AntiCircleRotor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[2])),
                (self.group0()[1] * other.group2()[3]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group2()[0]),
                (self.group0()[1] * other.group2()[1]),
                (self.group0()[1] * other.group2()[2]),
                (-(self.group0()[0] * other.group1()[3]) + (self.group0()[0] * other.group2()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group2()[0]),
                (self.group0()[0] * other.group2()[1]),
                (self.group0()[0] * other.group2()[2]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDipoleInversion> for DualNum4 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       10        0
    //    simd4        2        7        0
    // Totals...
    // yes simd        8       17        0
    //  no simd       14       38        0
    fn geometric_anti_product(self, other: AntiDipoleInversion) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group0()[2])),
                (self.group0()[0] * other.group3()[3]),
            ]),
            // e415, e425, e435, e321
            ((Simd32x4::from(self.group0()[0])
                * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(self.group0()[1]) * other.group1())),
            // e235, e315, e125, e5
            (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]])),
            // e1, e2, e3, e4
            ((Simd32x4::from(self.group0()[0])
                * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]])
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[3]]))),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum321> for DualNum4 {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        1        4        0
    fn geometric_anti_product(self, other: AntiDualNum321) -> Self::Output {
        return AntiQuadNum::from_groups(/* e1234, e3215, e45, scalar */ Simd32x4::from([
            (-(other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[0])),
            0.0,
            (other.group0()[0] * self.group0()[1]),
            (other.group0()[1] * self.group0()[1]),
        ]));
    }
}
impl GeometricAntiProduct<AntiDualNum4> for DualNum4 {
    type Output = AntiDualNum4;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        1        3        0
    fn geometric_anti_product(self, other: AntiDualNum4) -> Self::Output {
        return AntiDualNum4::from_groups(/* e1234, scalar */ Simd32x2::from([
            ((other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
            (other.group0()[1] * self.group0()[1]),
        ]));
    }
}
impl GeometricAntiProduct<AntiDualNum5> for DualNum4 {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        1        5        0
    fn geometric_anti_product(self, other: AntiDualNum5) -> Self::Output {
        return AntiQuadNum::from_groups(/* e1234, e3215, e45, scalar */ Simd32x4::from([
            (other.group0()[1] * self.group0()[0]),
            (other.group0()[0] * self.group0()[1]),
            (other.group0()[0] * self.group0()[0]),
            ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1])),
        ]));
    }
}
impl GeometricAntiProduct<AntiFlatPoint> for DualNum4 {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        6        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        8        0
    //  no simd        0       14        0
    fn geometric_anti_product(self, other: AntiFlatPoint) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * other.group0()),
            // e235, e315, e125, e4
            (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]]) * other.group0()),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0] * -1.0),
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[0] * other.group0()[2] * -1.0),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiFlector> for DualNum4 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       12        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        4       14        0
    //  no simd        4       20        0
    fn geometric_anti_product(self, other: AntiFlector) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self.group0()[0]) * other.group1()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (-(self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[3])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group1()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[0] * other.group0()[3]),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiLine> for DualNum4 {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       12        0
    //    simd3        0        1        0
    // Totals...
    // yes simd        3       13        0
    //  no simd        3       15        0
    fn geometric_anti_product(self, other: AntiLine) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group0()[0]) * other.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[2])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group1()[0]),
                (self.group0()[1] * other.group1()[1]),
                (self.group0()[1] * other.group1()[2]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiMotor> for DualNum4 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       16        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        4       17        0
    //  no simd        4       20        0
    fn geometric_anti_product(self, other: AntiMotor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[2])),
                (self.group0()[0] * other.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group1()[0]),
                (self.group0()[1] * other.group1()[1]),
                (self.group0()[1] * other.group1()[2]),
                (self.group0()[0] * other.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * other.group1()),
        );
    }
}
impl GeometricAntiProduct<AntiPlane> for DualNum4 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        6        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        7        0
    //  no simd        0       10        0
    fn geometric_anti_product(self, other: AntiPlane) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self.group0()[0]) * other.group0()),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3] * -1.0)]),
            // e235, e315, e125, e5
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other.group0()[3])]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiQuadNum> for DualNum4 {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4        8        0
    fn geometric_anti_product(self, other: AntiQuadNum) -> Self::Output {
        return AntiQuadNum::from_groups(/* e1234, e3215, e45, scalar */ Simd32x4::from([
            (-(self.group0()[0] * other.group0()[2]) + (self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[0])),
            (self.group0()[1] * other.group0()[1]),
            ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[2])),
            ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[3])),
        ]));
    }
}
impl GeometricAntiProduct<AntiScalar> for DualNum4 {
    type Output = DualNum4;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        1        0
    // no simd        0        2        0
    fn geometric_anti_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return DualNum4::from_groups(/* e4, e12345 */ (Simd32x2::from(other[e12345]) * self.group0()));
    }
}
impl GeometricAntiProduct<AntiTripleNum> for DualNum4 {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn geometric_anti_product(self, other: AntiTripleNum) -> Self::Output {
        return AntiQuadNum::from_groups(/* e1234, e3215, e45, scalar */ Simd32x4::from([
            ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[0])),
            (self.group0()[1] * other.group0()[1]),
            (self.group0()[0] * other.group0()[1]),
            ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[2])),
        ]));
    }
}
impl GeometricAntiProduct<Circle> for DualNum4 {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       17        0
    //    simd3        1        2        0
    // Totals...
    // yes simd        4       19        0
    //  no simd        6       23        0
    fn geometric_anti_product(self, other: Circle) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])) + (Simd32x3::from(self.group0()[1]) * other.group0())),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (self.group0()[1] * other.group2()[0]),
                (self.group0()[1] * other.group2()[1]),
                (self.group0()[1] * other.group2()[2]),
                (self.group0()[0] * other.group1()[3]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[0] * other.group2()[0] * -1.0),
                (self.group0()[0] * other.group2()[1] * -1.0),
                (self.group0()[0] * other.group2()[2] * -1.0),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<CircleRotor> for DualNum4 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        7       25        0
    fn geometric_anti_product(self, other: CircleRotor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[2])),
                (self.group0()[1] * other.group2()[3]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[1] * other.group2()[0]),
                (self.group0()[1] * other.group2()[1]),
                (self.group0()[1] * other.group2()[2]),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other.group2()[0] * -1.0),
                (self.group0()[0] * other.group2()[1] * -1.0),
                (self.group0()[0] * other.group2()[2] * -1.0),
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[0] * other.group2()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Dipole> for DualNum4 {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       14        0
    //    simd3        1        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        4       17        0
    //  no simd        6       24        0
    fn geometric_anti_product(self, other: Dipole) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])) + (Simd32x3::from(self.group0()[1]) * other.group0())),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (self.group0()[1] * other.group2()[0]),
                (self.group0()[1] * other.group2()[1]),
                (self.group0()[1] * other.group2()[2]),
                (self.group0()[0] * other.group1()[3]),
            ]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group2()[0]),
                (self.group0()[0] * other.group2()[1]),
                (self.group0()[0] * other.group2()[2]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<DipoleInversion> for DualNum4 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       22        0
    //    simd4        1        2        0
    // Totals...
    // yes simd       11       24        0
    //  no simd       14       30        0
    fn geometric_anti_product(self, other: DipoleInversion) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) - (self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group0()[2])),
                (self.group0()[0] * other.group3()[3]),
            ]),
            // e23, e31, e12, e45
            ((Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                + (Simd32x4::from(self.group0()[1]) * other.group1())),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group2()[0]),
                (self.group0()[1] * other.group2()[1]),
                (self.group0()[1] * other.group2()[2]),
                (-(self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group2()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group3()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group3()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group3()[2])),
                (self.group0()[1] * other.group3()[3]),
            ]),
        );
    }
}
impl GeometricAntiProduct<DualNum321> for DualNum4 {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        1        4        0
    fn geometric_anti_product(self, other: DualNum321) -> Self::Output {
        return QuadNum::from_groups(/* e4, e5, e321, e12345 */ Simd32x4::from([
            ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[0])),
            0.0,
            (other.group0()[0] * self.group0()[1]),
            (other.group0()[1] * self.group0()[1]),
        ]));
    }
}
impl GeometricAntiProduct<DualNum4> for DualNum4 {
    type Output = DualNum4;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        1        3        0
    fn geometric_anti_product(self, other: DualNum4) -> Self::Output {
        return DualNum4::from_groups(/* e4, e12345 */ Simd32x2::from([
            ((other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
            (other.group0()[1] * self.group0()[1]),
        ]));
    }
}
impl GeometricAntiProduct<DualNum5> for DualNum4 {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        1        6        0
    fn geometric_anti_product(self, other: DualNum5) -> Self::Output {
        return QuadNum::from_groups(/* e4, e5, e321, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[1]),
            (self.group0()[1] * other.group0()[0]),
            (self.group0()[0] * other.group0()[0] * -1.0),
            ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl GeometricAntiProduct<FlatPoint> for DualNum4 {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0       15        0
    fn geometric_anti_product(self, other: FlatPoint) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * other.group0()),
            // e15, e25, e35, e1234
            (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]]) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<Flector> for DualNum4 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       12        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        4       16        0
    //  no simd        4       28        0
    fn geometric_anti_product(self, other: Flector) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self.group0()[0]) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]]) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3]),
            ]),
        );
    }
}
impl GeometricAntiProduct<Line> for DualNum4 {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       15        0
    //    simd3        0        1        0
    // Totals...
    // yes simd        3       16        0
    //  no simd        3       18        0
    fn geometric_anti_product(self, other: Line) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self.group0()[0]) * other.group0()),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[2])),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (self.group0()[1] * other.group1()[0]),
                (self.group0()[1] * other.group1()[1]),
                (self.group0()[1] * other.group1()[2]),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0] * -1.0),
                (self.group0()[0] * other.group1()[1] * -1.0),
                (self.group0()[0] * other.group1()[2] * -1.0),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<Motor> for DualNum4 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       13        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        4       16        0
    //  no simd        4       25        0
    fn geometric_anti_product(self, other: Motor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[2])),
                (self.group0()[0] * other.group1()[3] * -1.0),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from(self.group0()[1]) * other.group1()),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[0])
                * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]])
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
    }
}
impl GeometricAntiProduct<MultiVector> for DualNum4 {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       24        0
    //    simd2        1        2        0
    //    simd3        5        9        0
    //    simd4        2        4        0
    // Totals...
    // yes simd       15       39        0
    //  no simd       32       71        0
    fn geometric_anti_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group9()[3], other[e1]])) + (Simd32x2::from(self.group0()[1]) * other.group0())),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group8()[0]) * -1.0),
                ((self.group0()[0] * other.group8()[1]) * -1.0),
                ((self.group0()[0] * other.group8()[2]) * -1.0),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[0] * other.group6()[3])),
            ]) + (Simd32x4::from(self.group0()[1]) * other.group1())),
            // e5
            (self.group0()[1] * other[e1]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group0()[1] * other.group3()[0]),
                (self.group0()[1] * other.group3()[1]),
                (self.group0()[1] * other.group3()[2]),
                ((self.group0()[0] * other.group9()[3]) + (self.group0()[1] * other.group3()[3])),
            ]),
            // e41, e42, e43
            (-(Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                + (Simd32x3::from(self.group0()[0]) * other.group5())
                + (Simd32x3::from(self.group0()[1]) * other.group4())),
            // e23, e31, e12
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]])) + (Simd32x3::from(self.group0()[1]) * other.group5())),
            // e415, e425, e435, e321
            ((Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group8()[0], other.group8()[1], other.group8()[2], other[e1]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(self.group0()[1]) * other.group6())),
            // e423, e431, e412
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                + (Simd32x3::from(self.group0()[1]) * other.group7())),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[1]) * other.group8()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group9()[0])),
                ((self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group9()[1])),
                ((self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group9()[2])),
                (self.group0()[1] * other.group9()[3]),
            ]),
            // e1234
            ((self.group0()[0] * other.group0()[0]) - (self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other[e45])),
        );
    }
}
impl GeometricAntiProduct<Plane> for DualNum4 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0       13        0
    fn geometric_anti_product(self, other: Plane) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self.group0()[0]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3])]),
            // e15, e25, e35, e1234
            Simd32x4::from(0.0),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group0()[1]) * other.group0()),
        );
    }
}
impl GeometricAntiProduct<QuadNum> for DualNum4 {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4        8        0
    fn geometric_anti_product(self, other: QuadNum) -> Self::Output {
        return QuadNum::from_groups(/* e4, e5, e321, e12345 */ Simd32x4::from([
            ((self.group0()[0] * other.group0()[2]) + (self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[0])),
            (self.group0()[1] * other.group0()[1]),
            (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[2])),
            ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[3])),
        ]));
    }
}
impl GeometricAntiProduct<RoundPoint> for DualNum4 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        5        0
    //  no simd        0       11        0
    fn geometric_anti_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other[e2]])),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other[e2] * -1.0)]),
            // e235, e315, e125, e5
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other[e2])]),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[1]) * other.group0()),
        );
    }
}
impl GeometricAntiProduct<Scalar> for DualNum4 {
    type Output = AntiDualNum4;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        1        0
    // no simd        0        2        0
    fn geometric_anti_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiDualNum4::from_groups(/* e1234, scalar */ (Simd32x2::from(other[scalar]) * self.group0()));
    }
}
impl GeometricAntiProduct<Sphere> for DualNum4 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        0        5        0
    //  no simd        0       14        0
    fn geometric_anti_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self.group0()[0]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3])]),
            // e15, e25, e35, e1234
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other[e4315])]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group0()[1]) * other.group0()),
        );
    }
}
impl GeometricAntiProduct<TripleNum> for DualNum4 {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        7        0
    fn geometric_anti_product(self, other: TripleNum) -> Self::Output {
        return QuadNum::from_groups(/* e4, e5, e321, e12345 */ Simd32x4::from([
            ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[0])),
            (self.group0()[1] * other.group0()[1]),
            (self.group0()[0] * other.group0()[1] * -1.0),
            ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[2])),
        ]));
    }
}
impl GeometricAntiProduct<VersorEven> for DualNum4 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1       11        0
    //    simd4        4        7        0
    // Totals...
    // yes simd        5       18        0
    //  no simd       17       39        0
    fn geometric_anti_product(self, other: VersorEven) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (self.group0()[0] * other.group3()[0]),
                (self.group0()[0] * other.group3()[1]),
                (self.group0()[0] * other.group3()[2]),
                0.0,
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                + (Simd32x4::from(self.group0()[1]) * other.group0())),
            // e415, e425, e435, e321
            ((Simd32x4::from(self.group0()[0]) * other.group2() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])) + (Simd32x4::from(self.group0()[1]) * other.group1())),
            // e235, e315, e125, e5
            (Simd32x4::from(self.group0()[1]) * other.group2()),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) * -1.0),
                ((self.group0()[0] * other.group2()[1]) * -1.0),
                ((self.group0()[0] * other.group2()[2]) * -1.0),
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[0] * other.group1()[3])),
            ]) + (Simd32x4::from(self.group0()[1]) * other.group3())),
        );
    }
}
impl GeometricAntiProduct<VersorOdd> for DualNum4 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       19        0
    //    simd4        3        4        0
    // Totals...
    // yes simd        8       23        0
    //  no simd       17       35        0
    fn geometric_anti_product(self, other: VersorOdd) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[0] * other.group3()[0]) * -1.0),
                ((self.group0()[0] * other.group3()[1]) * -1.0),
                ((self.group0()[0] * other.group3()[2]) * -1.0),
                0.0,
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                + (Simd32x4::from(self.group0()[1]) * other.group0())),
            // e23, e31, e12, e45
            ((Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                + (Simd32x4::from(self.group0()[1]) * other.group1())),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group2()[0]),
                (self.group0()[1] * other.group2()[1]),
                (self.group0()[1] * other.group2()[2]),
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group2()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group3()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group3()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group3()[2])),
                (self.group0()[1] * other.group3()[3]),
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorRoundPoint> for DualNum4 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2       13        0
    fn geometric_anti_product(self, other: VersorRoundPoint) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group1()[0] * -1.0)]),
            // e235, e315, e125, e5
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other.group1()[0])]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorSphere> for DualNum4 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2       11        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        2       12        0
    //  no simd        2       15        0
    fn geometric_anti_product(self, other: VersorSphere) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0] * -1.0),
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[0] * other.group0()[2] * -1.0),
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[1])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3])]),
            // e15, e25, e35, e1234
            Simd32x4::from([0.0, 0.0, 0.0, ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]))]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group0()[1]) * other.group0()),
        );
    }
}
impl InfixGeometricAntiProduct for DualNum5 {}
impl GeometricAntiProduct<AntiCircleRotor> for DualNum5 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       21        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        7       22        0
    //  no simd        7       25        0
    fn geometric_anti_product(self, other: AntiCircleRotor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group2()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group2()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group2()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0] * -1.0),
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[0] * other.group0()[2] * -1.0),
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[0] * other.group2()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDipoleInversion> for DualNum5 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       14        0
    //    simd4        3        4        0
    // Totals...
    // yes simd        6       18        0
    //  no simd       15       30        0
    fn geometric_anti_product(self, other: AntiDipoleInversion) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[0] * other.group2()[3]),
            ]),
            // e415, e425, e435, e321
            ((Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                + (Simd32x4::from(self.group0()[1]) * other.group1())),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                0.0,
            ]) - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))
                + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group3()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group3()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group3()[2])),
                (self.group0()[1] * other.group2()[3]),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum321> for DualNum5 {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        1        4        0
    fn geometric_anti_product(self, other: AntiDualNum321) -> Self::Output {
        return AntiQuadNum::from_groups(/* e1234, e3215, e45, scalar */ Simd32x4::from([
            0.0,
            ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[0])),
            (other.group0()[0] * self.group0()[1]),
            (other.group0()[1] * self.group0()[1]),
        ]));
    }
}
impl GeometricAntiProduct<AntiDualNum4> for DualNum5 {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        1        6        0
    fn geometric_anti_product(self, other: AntiDualNum4) -> Self::Output {
        return AntiQuadNum::from_groups(/* e1234, e3215, e45, scalar */ Simd32x4::from([
            (other.group0()[0] * self.group0()[1]),
            (other.group0()[1] * self.group0()[0]),
            (other.group0()[0] * self.group0()[0] * -1.0),
            ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1])),
        ]));
    }
}
impl GeometricAntiProduct<AntiDualNum5> for DualNum5 {
    type Output = AntiDualNum5;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        1        3        0
    fn geometric_anti_product(self, other: AntiDualNum5) -> Self::Output {
        return AntiDualNum5::from_groups(/* e3215, scalar */ Simd32x2::from([
            ((other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
            (other.group0()[1] * self.group0()[1]),
        ]));
    }
}
impl GeometricAntiProduct<AntiFlatPoint> for DualNum5 {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0        6        0
    fn geometric_anti_product(self, other: AntiFlatPoint) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from(self.group0()[1]) * other.group0()),
            // e1, e2, e3, e5
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3] * -1.0)]),
        );
    }
}
impl GeometricAntiProduct<AntiFlector> for DualNum5 {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4       12        0
    fn geometric_anti_product(self, other: AntiFlector) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[2])),
                (self.group0()[1] * other.group0()[3]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[1] * other.group1()[0]),
                (self.group0()[1] * other.group1()[1]),
                (self.group0()[1] * other.group1()[2]),
                (-(self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiLine> for DualNum5 {
    type Output = AntiLine;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        3        0
    // no simd        3        9        0
    fn geometric_anti_product(self, other: AntiLine) -> Self::Output {
        return AntiLine::from_groups(
            // e23, e31, e12
            (Simd32x3::from(self.group0()[1]) * other.group0()),
            // e15, e25, e35
            ((Simd32x3::from(self.group0()[0]) * other.group0()) + (Simd32x3::from(self.group0()[1]) * other.group1())),
        );
    }
}
impl GeometricAntiProduct<AntiMotor> for DualNum5 {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        1        3        0
    // no simd        4       12        0
    fn geometric_anti_product(self, other: AntiMotor) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from(self.group0()[1]) * other.group0()),
            // e15, e25, e35, e3215
            ((Simd32x4::from(self.group0()[0]) * other.group0()) + (Simd32x4::from(self.group0()[1]) * other.group1())),
        );
    }
}
impl GeometricAntiProduct<AntiPlane> for DualNum5 {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        6        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        7        0
    //  no simd        0       10        0
    fn geometric_anti_product(self, other: AntiPlane) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0] * -1.0),
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[0] * other.group0()[2] * -1.0),
                0.0,
            ]),
            // e1, e2, e3, e5
            (Simd32x4::from(self.group0()[1]) * other.group0()),
        );
    }
}
impl GeometricAntiProduct<AntiQuadNum> for DualNum5 {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4        8        0
    fn geometric_anti_product(self, other: AntiQuadNum) -> Self::Output {
        return AntiQuadNum::from_groups(/* e1234, e3215, e45, scalar */ Simd32x4::from([
            (self.group0()[1] * other.group0()[0]),
            ((self.group0()[0] * other.group0()[2]) + (self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[1])),
            (-(self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[2])),
            ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[3])),
        ]));
    }
}
impl GeometricAntiProduct<AntiScalar> for DualNum5 {
    type Output = DualNum5;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        1        0
    // no simd        0        2        0
    fn geometric_anti_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return DualNum5::from_groups(/* e5, e12345 */ (Simd32x2::from(other[e12345]) * self.group0()));
    }
}
impl GeometricAntiProduct<AntiTripleNum> for DualNum5 {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        7        0
    fn geometric_anti_product(self, other: AntiTripleNum) -> Self::Output {
        return AntiQuadNum::from_groups(/* e1234, e3215, e45, scalar */ Simd32x4::from([
            (self.group0()[1] * other.group0()[0]),
            ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[1])),
            (self.group0()[0] * other.group0()[0] * -1.0),
            ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[2])),
        ]));
    }
}
impl GeometricAntiProduct<Circle> for DualNum5 {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       13        0
    //    simd3        0        1        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        6       16        0
    //  no simd        6       24        0
    fn geometric_anti_product(self, other: Circle) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self.group0()[1]) * other.group0()),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group2()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group2()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group2()[2])),
                0.0,
            ]),
            // e1, e2, e3, e5
            (Simd32x4::from(self.group0()[0])
                * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
    }
}
impl GeometricAntiProduct<CircleRotor> for DualNum5 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       14        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        4       17        0
    //  no simd        7       26        0
    fn geometric_anti_product(self, other: CircleRotor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3]),
            ]),
            // e235, e315, e125, e5
            ((Simd32x4::from([
                (self.group0()[1] * other.group2()[0]),
                (self.group0()[1] * other.group2()[1]),
                (self.group0()[1] * other.group2()[2]),
                (self.group0()[0] * other.group1()[3]),
            ]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<Dipole> for DualNum5 {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       13        0
    //    simd3        0        1        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        6       16        0
    //  no simd        6       24        0
    fn geometric_anti_product(self, other: Dipole) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group0()[1]) * other.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group2()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group2()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group2()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group0()[0])
                * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]])
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
    }
}
impl GeometricAntiProduct<DipoleInversion> for DualNum5 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       14        0
    //    simd4        2        6        0
    // Totals...
    // yes simd        8       20        0
    //  no simd       14       38        0
    fn geometric_anti_product(self, other: DipoleInversion) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[0] * other.group2()[3]),
            ]),
            // e23, e31, e12, e45
            ((Simd32x4::from(self.group0()[0])
                * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(self.group0()[1]) * other.group1())),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group2()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group2()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group2()[2])),
                (self.group0()[1] * other.group2()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(self.group0()[0])
                * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]])
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from(self.group0()[1]) * other.group3())),
        );
    }
}
impl GeometricAntiProduct<DualNum321> for DualNum5 {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        1        4        0
    fn geometric_anti_product(self, other: DualNum321) -> Self::Output {
        return QuadNum::from_groups(/* e4, e5, e321, e12345 */ Simd32x4::from([
            0.0,
            (-(other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[0])),
            (other.group0()[0] * self.group0()[1]),
            (other.group0()[1] * self.group0()[1]),
        ]));
    }
}
impl GeometricAntiProduct<DualNum4> for DualNum5 {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        1        5        0
    fn geometric_anti_product(self, other: DualNum4) -> Self::Output {
        return QuadNum::from_groups(/* e4, e5, e321, e12345 */ Simd32x4::from([
            (other.group0()[0] * self.group0()[1]),
            (other.group0()[1] * self.group0()[0]),
            (other.group0()[0] * self.group0()[0]),
            ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1])),
        ]));
    }
}
impl GeometricAntiProduct<DualNum5> for DualNum5 {
    type Output = DualNum5;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        1        3        0
    fn geometric_anti_product(self, other: DualNum5) -> Self::Output {
        return DualNum5::from_groups(/* e5, e12345 */ Simd32x2::from([
            ((other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
            (other.group0()[1] * self.group0()[1]),
        ]));
    }
}
impl GeometricAntiProduct<FlatPoint> for DualNum5 {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        5        0
    fn geometric_anti_product(self, other: FlatPoint) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from(self.group0()[1]) * other.group0()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3])]),
        );
    }
}
impl GeometricAntiProduct<Flector> for DualNum5 {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4       12        0
    fn geometric_anti_product(self, other: Flector) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[2])),
                (self.group0()[1] * other.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[1] * other.group1()[0]),
                (self.group0()[1] * other.group1()[1]),
                (self.group0()[1] * other.group1()[2]),
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Line> for DualNum5 {
    type Output = Line;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        3        0
    // no simd        3        9        0
    fn geometric_anti_product(self, other: Line) -> Self::Output {
        return Line::from_groups(
            // e415, e425, e435
            (Simd32x3::from(self.group0()[1]) * other.group0()),
            // e235, e315, e125
            ((Simd32x3::from(self.group0()[0]) * other.group0()) + (Simd32x3::from(self.group0()[1]) * other.group1())),
        );
    }
}
impl GeometricAntiProduct<Motor> for DualNum5 {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        1        3        0
    // no simd        4       12        0
    fn geometric_anti_product(self, other: Motor) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(self.group0()[1]) * other.group0()),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group0()[0]) * other.group0()) + (Simd32x4::from(self.group0()[1]) * other.group1())),
        );
    }
}
impl GeometricAntiProduct<MultiVector> for DualNum5 {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       27        0
    //    simd2        1        2        0
    //    simd3        3        7        0
    //    simd4        3        4        0
    // Totals...
    // yes simd       16       40        0
    //  no simd       32       68        0
    fn geometric_anti_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from(self.group0()[0]) * Simd32x2::from([other[e45], other.group1()[3]])) + (Simd32x2::from(self.group0()[1]) * other.group0())),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group7()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group7()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group7()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3]),
            ]),
            // e5
            ((self.group0()[0] * other.group0()[1]) - (self.group0()[0] * other.group6()[3]) + (self.group0()[1] * other[e1])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group5()[0]) + (self.group0()[0] * other.group9()[0])),
                ((self.group0()[0] * other.group5()[1]) + (self.group0()[0] * other.group9()[1])),
                ((self.group0()[0] * other.group5()[2]) + (self.group0()[0] * other.group9()[2])),
                ((self.group0()[0] * other[e45]) * -1.0),
            ]) + (Simd32x4::from(self.group0()[1]) * other.group3())),
            // e41, e42, e43
            (Simd32x3::from(self.group0()[1]) * other.group4()),
            // e23, e31, e12
            ((Simd32x3::from(self.group0()[0]) * other.group4()) + (Simd32x3::from(self.group0()[1]) * other.group5())),
            // e415, e425, e435, e321
            ((Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group1()[3]]))
                + (Simd32x4::from(self.group0()[1]) * other.group6())),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[1]) * other.group7()),
            // e235, e315, e125
            (-(Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                + (Simd32x3::from(self.group0()[1]) * other.group8())),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[0] * other.group4()[0]) * -1.0),
                ((self.group0()[0] * other.group4()[1]) * -1.0),
                ((self.group0()[0] * other.group4()[2]) * -1.0),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[0] * other.group3()[3])),
            ]) + (Simd32x4::from(self.group0()[1]) * other.group9())),
            // e1234
            (self.group0()[1] * other[e45]),
        );
    }
}
impl GeometricAntiProduct<Plane> for DualNum5 {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0        7        0
    fn geometric_anti_product(self, other: Plane) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group0()[1]) * other.group0()),
        );
    }
}
impl GeometricAntiProduct<QuadNum> for DualNum5 {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4        8        0
    fn geometric_anti_product(self, other: QuadNum) -> Self::Output {
        return QuadNum::from_groups(/* e4, e5, e321, e12345 */ Simd32x4::from([
            (self.group0()[1] * other.group0()[0]),
            (-(self.group0()[0] * other.group0()[2]) + (self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[1])),
            ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[2])),
            ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[3])),
        ]));
    }
}
impl GeometricAntiProduct<RoundPoint> for DualNum5 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        6        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        8        0
    //  no simd        0       14        0
    fn geometric_anti_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3])]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3])]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (self.group0()[1] * other[e2]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[1]) * other.group0()),
        );
    }
}
impl GeometricAntiProduct<Scalar> for DualNum5 {
    type Output = AntiDualNum5;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        1        0
    // no simd        0        2        0
    fn geometric_anti_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiDualNum5::from_groups(/* e3215, scalar */ (Simd32x2::from(other[scalar]) * self.group0()));
    }
}
impl GeometricAntiProduct<Sphere> for DualNum5 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        7        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        8        0
    //  no simd        0       11        0
    fn geometric_anti_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other[e4315])]),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other[e4315] * -1.0)]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (self.group0()[1] * other[e4315]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group0()[1]) * other.group0()),
        );
    }
}
impl GeometricAntiProduct<TripleNum> for DualNum5 {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn geometric_anti_product(self, other: TripleNum) -> Self::Output {
        return QuadNum::from_groups(/* e4, e5, e321, e12345 */ Simd32x4::from([
            (self.group0()[1] * other.group0()[0]),
            ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[1])),
            (self.group0()[0] * other.group0()[0]),
            ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[2])),
        ]));
    }
}
impl GeometricAntiProduct<VersorEven> for DualNum5 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       12        0
    //    simd4        3        5        0
    // Totals...
    // yes simd        7       17        0
    //  no simd       16       32        0
    fn geometric_anti_product(self, other: VersorEven) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            ((Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group3()[3]]))
                + (Simd32x4::from(self.group0()[1]) * other.group1())),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))
                + (Simd32x4::from(self.group0()[1]) * other.group2())),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group3()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group3()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group3()[2])),
                (self.group0()[1] * other.group3()[3]),
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorOdd> for DualNum5 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       23        0
    //    simd4        2        4        0
    // Totals...
    // yes simd       10       27        0
    //  no simd       16       39        0
    fn geometric_anti_product(self, other: VersorOdd) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                ((self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            ((Simd32x4::from(self.group0()[0])
                * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(self.group0()[1]) * other.group1())),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group2()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group2()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group2()[2])),
                (self.group0()[1] * other.group2()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) * -1.0),
                ((self.group0()[0] * other.group0()[1]) * -1.0),
                ((self.group0()[0] * other.group0()[2]) * -1.0),
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[0] * other.group1()[3])),
            ]) + (Simd32x4::from(self.group0()[1]) * other.group3())),
        );
    }
}
impl GeometricAntiProduct<VersorRoundPoint> for DualNum5 {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2       11        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        2       12        0
    //  no simd        2       15        0
    fn geometric_anti_product(self, other: VersorRoundPoint) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([0.0, 0.0, 0.0, ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[1]))]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3])]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0] * -1.0),
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[0] * other.group0()[2] * -1.0),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[1]) * other.group0()),
        );
    }
}
impl GeometricAntiProduct<VersorSphere> for DualNum5 {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2       13        0
    fn geometric_anti_product(self, other: VersorSphere) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1]))]),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group1()[0] * -1.0)]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (self.group0()[1] * other.group1()[0]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group0()[3])),
            ]),
        );
    }
}
impl InfixGeometricAntiProduct for FlatPoint {}
impl GeometricAntiProduct<AntiCircleRotor> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       38        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       20       41        0
    //  no simd       29       50        0
    fn geometric_anti_product(self, other: AntiCircleRotor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3] * -1.0),
                (other.group0()[1] * self.group0()[3] * -1.0),
                (other.group0()[2] * self.group0()[3] * -1.0),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) - (other.group1()[3] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) * -1.0),
                ((other.group0()[0] * self.group0()[2]) * -1.0),
                ((other.group0()[1] * self.group0()[0]) * -1.0),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) + (other.group2()[3] * self.group0()[3])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(other.group1()[2] * self.group0()[1]) - (other.group1()[3] * self.group0()[0]) - (other.group2()[3] * self.group0()[0])),
                (-(other.group1()[0] * self.group0()[2]) - (other.group1()[3] * self.group0()[1]) - (other.group2()[3] * self.group0()[1])),
                (-(other.group1()[1] * self.group0()[0]) - (other.group1()[3] * self.group0()[2]) - (other.group2()[3] * self.group0()[2])),
                (other.group1()[2] * self.group0()[2]),
            ]) + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                + (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) + (other.group1()[0] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) + (other.group1()[2] * self.group0()[3])),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDipoleInversion> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       23       36        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       29       42        0
    //  no simd       47       60        0
    fn geometric_anti_product(self, other: AntiDipoleInversion) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3]),
                (other.group0()[1] * self.group0()[3]),
                (other.group0()[2] * self.group0()[3]),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group1()[3] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) - (other.group3()[0] * self.group0()[3])),
                (-(other.group0()[2] * self.group0()[0]) - (other.group3()[1] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[1]) - (other.group3()[2] * self.group0()[3])),
                (other.group0()[2] * self.group0()[2]),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1])
                    - (other.group1()[3] * self.group0()[0])
                    - (other.group2()[0] * self.group0()[3])
                    + (other.group3()[1] * self.group0()[2])
                    - (other.group3()[2] * self.group0()[1])),
                ((other.group1()[0] * self.group0()[2])
                    - (other.group1()[2] * self.group0()[0])
                    - (other.group1()[3] * self.group0()[1])
                    - (other.group2()[1] * self.group0()[3])
                    - (other.group3()[0] * self.group0()[2])
                    + (other.group3()[2] * self.group0()[0])),
                (-(other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0])
                    - (other.group1()[3] * self.group0()[2])
                    - (other.group2()[2] * self.group0()[3])
                    + (other.group3()[0] * self.group0()[1])
                    - (other.group3()[1] * self.group0()[0])),
                (other.group2()[3] * self.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(other.group1()[2] * self.group0()[2]) + (other.group3()[2] * self.group0()[2]) - (other.group3()[3] * self.group0()[3])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group1()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum321> for FlatPoint {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        9        0
    fn geometric_anti_product(self, other: AntiDualNum321) -> Self::Output {
        return CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[1] * self.group0()[3])]),
            // e235, e315, e125, e12345
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group0()[2])),
                (other.group0()[0] * self.group0()[3] * -1.0),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum4> for FlatPoint {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        6        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0       10        0
    //  no simd        0       22        0
    fn geometric_anti_product(self, other: AntiDualNum4) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e235, e315, e125, e4
            (Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group0()[0]]) * self.group0() * Simd32x4::from(-1.0)),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum5> for FlatPoint {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0        9        0
    fn geometric_anti_product(self, other: AntiDualNum5) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from(other.group0()[1]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e1, e2, e3, e5
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group0()[3])]),
        );
    }
}
impl GeometricAntiProduct<AntiFlatPoint> for FlatPoint {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        8        0
    fn geometric_anti_product(self, other: AntiFlatPoint) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[3] * self.group0()[3] * -1.0)]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group0()[3] * self.group0()[0])),
                (-(other.group0()[1] * self.group0()[3]) - (other.group0()[3] * self.group0()[1])),
                (-(other.group0()[2] * self.group0()[3]) - (other.group0()[3] * self.group0()[2])),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiFlector> for FlatPoint {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        2        4        0
    // Totals...
    // yes simd        6       12        0
    //  no simd       12       24        0
    fn geometric_anti_product(self, other: AntiFlector) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]) * Simd32x4::from(-1.0)),
            // e15, e25, e35, e3215
            (Simd32x4::from([
                (-(other.group0()[3] * self.group0()[0]) - (other.group1()[2] * self.group0()[1])),
                (-(other.group0()[3] * self.group0()[1]) - (other.group1()[0] * self.group0()[2])),
                (-(other.group0()[3] * self.group0()[2]) - (other.group1()[1] * self.group0()[0])),
                ((other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
        );
    }
}
impl GeometricAntiProduct<AntiLine> for FlatPoint {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       15        0
    fn geometric_anti_product(self, other: AntiLine) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) + (other.group1()[0] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) + (other.group1()[2] * self.group0()[3])),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3]),
                (other.group0()[1] * self.group0()[3]),
                (other.group0()[2] * self.group0()[3]),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiMotor> for FlatPoint {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       12       20        0
    fn geometric_anti_product(self, other: AntiMotor) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) - (other.group0()[3] * self.group0()[0]) + (other.group1()[0] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0]) - (other.group0()[3] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) - (other.group0()[3] * self.group0()[2]) + (other.group1()[2] * self.group0()[3])),
                (other.group0()[3] * self.group0()[3]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3]),
                (other.group0()[1] * self.group0()[3]),
                (other.group0()[2] * self.group0()[3]),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) + (other.group1()[3] * self.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiPlane> for FlatPoint {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        8        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        3       10        0
    //  no simd        9       16        0
    fn geometric_anti_product(self, other: AntiPlane) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3] * -1.0),
                (other.group0()[1] * self.group0()[3] * -1.0),
                (other.group0()[2] * self.group0()[3] * -1.0),
                0.0,
            ]),
            // e15, e25, e35, e3215
            (Simd32x4::from([0.0, 0.0, 0.0, ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]))])
                + (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (swizzle!(other.group0(), 2, 0, 1, 3) * swizzle!(self.group0(), 1, 2, 0, 3))),
        );
    }
}
impl GeometricAntiProduct<AntiQuadNum> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        9        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        3       13        0
    //  no simd        3       25        0
    fn geometric_anti_product(self, other: AntiQuadNum) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[2] * self.group0()[3] * -1.0)]),
            // e415, e425, e435, e321
            (swizzle!(other.group0(), 0, 0, 0, 3) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(other.group0()[2] * self.group0()[0]) - (other.group0()[3] * self.group0()[0])),
                (-(other.group0()[2] * self.group0()[1]) - (other.group0()[3] * self.group0()[1])),
                (-(other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self.group0()[2])),
                (other.group0()[1] * self.group0()[3]),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(other.group0()[0]) * self.group0() * Simd32x4::from(-1.0)),
        );
    }
}
impl GeometricAntiProduct<AntiScalar> for FlatPoint {
    type Output = FlatPoint;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn geometric_anti_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return FlatPoint::from_groups(/* e15, e25, e35, e45 */ (Simd32x4::from(other[e12345]) * self.group0()));
    }
}
impl GeometricAntiProduct<AntiTripleNum> for FlatPoint {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        6        0
    // no simd        0       24        0
    fn geometric_anti_product(self, other: AntiTripleNum) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[2]]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e235, e315, e125, e4
            (Simd32x4::from([other.group0()[2], other.group0()[2], other.group0()[2], other.group0()[0]]) * self.group0() * Simd32x4::from(-1.0)),
            // e1, e2, e3, e5
            (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
    }
}
impl GeometricAntiProduct<Circle> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       35        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       19       37        0
    //  no simd       25       43        0
    fn geometric_anti_product(self, other: Circle) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3]),
                (other.group0()[1] * self.group0()[3]),
                (other.group0()[2] * self.group0()[3]),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group1()[3] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) * -1.0),
                ((other.group0()[2] * self.group0()[0]) * -1.0),
                ((other.group0()[0] * self.group0()[1]) * -1.0),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group2()[0] * self.group0()[3]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1])
                    - (other.group1()[3] * self.group0()[0])),
                (-(other.group2()[1] * self.group0()[3]) + (other.group1()[0] * self.group0()[2])
                    - (other.group1()[2] * self.group0()[0])
                    - (other.group1()[3] * self.group0()[1])),
                (-(other.group2()[2] * self.group0()[3]) - (other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0])
                    - (other.group1()[3] * self.group0()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) + (other.group1()[0] * self.group0()[3])),
                ((other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[1]) + (other.group1()[2] * self.group0()[3])),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<CircleRotor> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       21       39        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       23       41        0
    //  no simd       29       47        0
    fn geometric_anti_product(self, other: CircleRotor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3]),
                (other.group0()[1] * self.group0()[3]),
                (other.group0()[2] * self.group0()[3]),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group1()[3] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) * -1.0),
                ((other.group0()[2] * self.group0()[0]) * -1.0),
                ((other.group0()[0] * self.group0()[1]) * -1.0),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) + (other.group2()[3] * self.group0()[3])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1])
                    - (other.group1()[3] * self.group0()[0])
                    - (other.group2()[0] * self.group0()[3])
                    + (other.group2()[3] * self.group0()[0])),
                ((other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0]) - (other.group1()[3] * self.group0()[1]) - (other.group2()[1] * self.group0()[3])
                    + (other.group2()[3] * self.group0()[1])),
                (-(other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0])
                    - (other.group1()[3] * self.group0()[2])
                    - (other.group2()[2] * self.group0()[3])
                    + (other.group2()[3] * self.group0()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) + (other.group1()[0] * self.group0()[3])),
                ((other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[1]) + (other.group1()[2] * self.group0()[3])),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<Dipole> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       34        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       16       37        0
    //  no simd       25       46        0
    fn geometric_anti_product(self, other: Dipole) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3] * -1.0),
                (other.group0()[1] * self.group0()[3] * -1.0),
                (other.group0()[2] * self.group0()[3] * -1.0),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) - (other.group1()[3] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) * -1.0),
                ((other.group0()[0] * self.group0()[2]) * -1.0),
                ((other.group0()[1] * self.group0()[0]) * -1.0),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(other.group1()[2] * self.group0()[1]) - (other.group1()[3] * self.group0()[0])),
                (-(other.group1()[0] * self.group0()[2]) - (other.group1()[3] * self.group0()[1])),
                (-(other.group1()[1] * self.group0()[0]) - (other.group1()[3] * self.group0()[2])),
                (other.group1()[2] * self.group0()[2]),
            ]) + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                + (swizzle!(other.group1(), 1, 2, 0, 1) * swizzle!(self.group0(), 2, 0, 1, 1))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) + (other.group1()[0] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) + (other.group1()[2] * self.group0()[3])),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<DipoleInversion> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       48        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       32       52        0
    //  no simd       44       64        0
    fn geometric_anti_product(self, other: DipoleInversion) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3] * -1.0),
                (other.group0()[1] * self.group0()[3] * -1.0),
                (other.group0()[2] * self.group0()[3] * -1.0),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) - (other.group1()[3] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[2] * self.group0()[1]) - (other.group2()[3] * self.group0()[0]) - (other.group3()[0] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group2()[3] * self.group0()[1]) - (other.group3()[1] * self.group0()[3])),
                (-(other.group0()[1] * self.group0()[0]) - (other.group2()[3] * self.group0()[2]) - (other.group3()[2] * self.group0()[3])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(other.group1()[2] * self.group0()[1]) - (other.group1()[3] * self.group0()[0]) - (other.group3()[2] * self.group0()[1])),
                (-(other.group1()[0] * self.group0()[2]) - (other.group1()[3] * self.group0()[1]) - (other.group3()[0] * self.group0()[2])),
                (-(other.group1()[1] * self.group0()[0]) - (other.group1()[3] * self.group0()[2]) - (other.group3()[1] * self.group0()[0])),
                ((other.group3()[0] * self.group0()[0]) + (other.group3()[1] * self.group0()[1]) + (other.group3()[2] * self.group0()[2]) + (other.group3()[3] * self.group0()[3])),
            ]) + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[2]]) * swizzle!(self.group0(), 2, 0, 1, 2))
                + (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) + (other.group1()[0] * self.group0()[3]) - (other.group2()[3] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3])
                    - (other.group2()[3] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) + (other.group1()[2] * self.group0()[3]) - (other.group2()[3] * self.group0()[2])),
                (other.group2()[3] * self.group0()[3] * -1.0),
            ]),
        );
    }
}
impl GeometricAntiProduct<DualNum321> for FlatPoint {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        9        0
    fn geometric_anti_product(self, other: DualNum321) -> Self::Output {
        return AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[1] * self.group0()[3])]),
            // e15, e25, e35, scalar
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[2])),
                (other.group0()[0] * self.group0()[3] * -1.0),
            ]),
        );
    }
}
impl GeometricAntiProduct<DualNum4> for FlatPoint {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        6        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        8        0
    //  no simd        0       14        0
    fn geometric_anti_product(self, other: DualNum4) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]]) * self.group0()),
            // e15, e25, e35, e1234
            (Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group0()[0]]) * self.group0()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<DualNum5> for FlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0        6        0
    fn geometric_anti_product(self, other: DualNum5) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from(other.group0()[1]) * self.group0()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group0()[3] * -1.0)]),
        );
    }
}
impl GeometricAntiProduct<FlatPoint> for FlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        8        0
    fn geometric_anti_product(self, other: FlatPoint) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[3] * self.group0()[3] * -1.0)]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[3]) - (other.group0()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group0()[3]) - (other.group0()[3] * self.group0()[2])),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<Flector> for FlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        2        4        0
    // Totals...
    // yes simd        6       12        0
    //  no simd       12       24        0
    fn geometric_anti_product(self, other: Flector) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]) * Simd32x4::from(-1.0)),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group1()[2])),
                (-(self.group0()[1] * other.group0()[3]) - (self.group0()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group1()[1]) - (self.group0()[2] * other.group0()[3])),
                ((self.group0()[2] * other.group1()[2]) + (self.group0()[3] * other.group1()[3])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                + (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group1(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<Line> for FlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       15        0
    fn geometric_anti_product(self, other: Line) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) - (other.group1()[0] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) - (other.group1()[1] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) - (other.group1()[2] * self.group0()[3])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3]),
                (other.group0()[1] * self.group0()[3]),
                (other.group0()[2] * self.group0()[3]),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Motor> for FlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       12       20        0
    fn geometric_anti_product(self, other: Motor) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) - (self.group0()[3] * other.group1()[0])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[3]) + (self.group0()[2] * other.group0()[0])
                    - (self.group0()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[3]) - (self.group0()[3] * other.group1()[2])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[3] * other.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<MultiVector> for FlatPoint {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       41       62        0
    //    simd2        1        1        0
    //    simd3        8       12        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       58       83        0
    //  no simd       99      132        0
    fn geometric_anti_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                (-(other.group7()[0] * self.group0()[0]) - (other.group7()[1] * self.group0()[1]) - (other.group7()[2] * self.group0()[2])),
                ((other.group4()[0] * self.group0()[0]) + (other.group4()[1] * self.group0()[1]) + (other.group4()[2] * self.group0()[2])),
            ]) - (Simd32x2::from(self.group0()[3]) * Simd32x2::from([other.group6()[3], other.group3()[3]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group4()[1] * self.group0()[2]) - (other.group4()[2] * self.group0()[1]) + (other.group5()[0] * self.group0()[3]) - (self.group0()[0] * other[e45])),
                (-(other.group4()[0] * self.group0()[2]) + (other.group4()[2] * self.group0()[0]) + (other.group5()[1] * self.group0()[3]) - (self.group0()[1] * other[e45])),
                ((other.group4()[0] * self.group0()[1]) - (other.group4()[1] * self.group0()[0]) + (other.group5()[2] * self.group0()[3]) - (self.group0()[2] * other[e45])),
                (self.group0()[3] * other[e45] * -1.0),
            ]),
            // e5
            ((other.group5()[0] * self.group0()[0])
                + (other.group5()[1] * self.group0()[1])
                + (other.group5()[2] * self.group0()[2])
                + (self.group0()[0] * other.group9()[0])
                + (self.group0()[1] * other.group9()[1])
                + (self.group0()[2] * other.group9()[2])
                + (self.group0()[3] * other.group9()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                (-(other.group8()[0] * self.group0()[3])
                    - (self.group0()[0] * other.group6()[3])
                    - (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group6()[1])),
                (-(other.group8()[1] * self.group0()[3])
                    - (self.group0()[0] * other.group6()[2])
                    - (self.group0()[1] * other.group6()[3])
                    - (self.group0()[2] * other.group1()[0])),
                (-(other.group8()[2] * self.group0()[3])
                    - (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group6()[0])
                    - (self.group0()[2] * other.group6()[3])),
                (other.group7()[2] * self.group0()[2]),
            ]) + (Simd32x4::from(other.group0()[1]) * self.group0())
                + (Simd32x4::from([other.group1()[1], other.group6()[0], other.group1()[0], other.group7()[1]]) * swizzle!(self.group0(), 2, 2, 1, 1))
                + (Simd32x4::from([other.group6()[2], other.group1()[2], other.group6()[1], other.group7()[0]]) * swizzle!(self.group0(), 1, 0, 0, 0))),
            // e41, e42, e43
            (Simd32x3::from(self.group0()[3]) * other.group7()),
            // e23, e31, e12
            (-(Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group7(), 2, 0, 1))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group7(), 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group4()[2] * self.group0()[1]) - (self.group0()[0] * other[e45]) - (self.group0()[3] * other.group9()[0])),
                (-(other.group4()[0] * self.group0()[2]) - (self.group0()[1] * other[e45]) - (self.group0()[3] * other.group9()[1])),
                (-(other.group4()[1] * self.group0()[0]) - (self.group0()[2] * other[e45]) - (self.group0()[3] * other.group9()[2])),
                ((other.group4()[0] * self.group0()[0]) + (other.group4()[1] * self.group0()[1]) + (other.group4()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group4()[1], other.group4()[2], other.group4()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 3))),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[3]) * other.group4() * Simd32x3::from(-1.0)),
            // e235, e315, e125
            (Simd32x3::from([
                (-(self.group0()[1] * other.group9()[2]) + (self.group0()[2] * other.group9()[1])),
                ((self.group0()[0] * other.group9()[2]) - (self.group0()[2] * other.group9()[0])),
                (-(self.group0()[0] * other.group9()[1]) + (self.group0()[1] * other.group9()[0])),
            ]) - (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                - (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group5(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group5(), 1, 2, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((self.group0()[2] * other.group1()[2]) - (self.group0()[2] * other.group6()[2]) - (self.group0()[3] * other[e1])),
            ]) + (Simd32x4::from([other.group7()[1], other.group7()[2], other.group7()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group7()[2], other.group7()[0], other.group7()[1], other.group6()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group6()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))
                + (Simd32x4::from([other.group6()[0], other.group6()[1], other.group6()[2], other.group1()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))),
            // e1234
            (self.group0()[3] * other.group1()[3]),
        );
    }
}
impl GeometricAntiProduct<Plane> for FlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2       15        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        3       16        0
    //  no simd        6       19        0
    fn geometric_anti_product(self, other: Plane) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                0.0,
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) * -1.0),
                ((self.group0()[2] * other.group0()[0]) * -1.0),
                ((self.group0()[0] * other.group0()[1]) * -1.0),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])),
            ]) + (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<QuadNum> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        9        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        3       12        0
    //  no simd        3       21        0
    fn geometric_anti_product(self, other: QuadNum) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[2] * -1.0)]),
            // e23, e31, e12, e45
            (swizzle!(other.group0(), 0, 0, 0, 3) * self.group0()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[0] * other.group0()[3])),
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[1] * other.group0()[3])),
                (-(self.group0()[2] * other.group0()[2]) + (self.group0()[2] * other.group0()[3])),
                (self.group0()[3] * other.group0()[0]),
            ]),
            // e4235, e4315, e4125, e3215
            (swizzle!(other.group0(), 0, 0, 0, 1) * self.group0() * Simd32x4::from(-1.0)),
        );
    }
}
impl GeometricAntiProduct<RoundPoint> for FlatPoint {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        9       23        0
    fn geometric_anti_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) - (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) - (self.group0()[3] * other.group0()[2])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) - (self.group0()[3] * other[e2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Scalar> for FlatPoint {
    type Output = AntiFlatPoint;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn geometric_anti_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiFlatPoint::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from(other[scalar]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
    }
}
impl GeometricAntiProduct<Sphere> for FlatPoint {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        9       24        0
    fn geometric_anti_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other[e4315]) - (self.group0()[3] * other.group0()[0])),
                (-(self.group0()[1] * other[e4315]) - (self.group0()[3] * other.group0()[1])),
                (-(self.group0()[2] * other[e4315]) - (self.group0()[3] * other.group0()[2])),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other[e4315] * -1.0),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[0] * other[e4315] * -1.0),
                (self.group0()[1] * other[e4315] * -1.0),
                (self.group0()[2] * other[e4315] * -1.0),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<TripleNum> for FlatPoint {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn geometric_anti_product(self, other: TripleNum) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[2]]) * self.group0()),
            // e15, e25, e35, e1234
            (Simd32x4::from([other.group0()[2], other.group0()[2], other.group0()[2], other.group0()[0]]) * self.group0()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]]) * self.group0() * Simd32x4::from(-1.0)),
        );
    }
}
impl GeometricAntiProduct<VersorEven> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       27       40        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       33       46        0
    //  no simd       51       64        0
    fn geometric_anti_product(self, other: VersorEven) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[3] * other.group1()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(self.group0()[2] * other.group0()[1]) - (self.group0()[3] * other.group3()[0])),
                (-(self.group0()[0] * other.group0()[2]) - (self.group0()[3] * other.group3()[1])),
                (-(self.group0()[1] * other.group0()[0]) - (self.group0()[3] * other.group3()[2])),
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group3()[3], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 2, 1))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group0()[1], other.group0()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[1] * other.group3()[2])
                    - (self.group0()[2] * other.group1()[1])
                    + (self.group0()[2] * other.group3()[1])
                    - (self.group0()[3] * other.group2()[0])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group0()[3])
                    - (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    - (self.group0()[2] * other.group3()[0])
                    - (self.group0()[3] * other.group2()[1])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group1()[0])
                    + (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group0()[3])
                    - (self.group0()[2] * other.group1()[3])
                    - (self.group0()[3] * other.group2()[2])),
                (self.group0()[3] * other.group3()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[2] * other.group1()[2]) + (self.group0()[2] * other.group3()[2]) - (self.group0()[3] * other.group2()[3])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group3()[3], other.group1()[1]]) * swizzle!(self.group0(), 1, 2, 2, 1))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group3()[3], other.group3()[3], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<VersorOdd> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       52        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       36       56        0
    //  no simd       48       68        0
    fn geometric_anti_product(self, other: VersorOdd) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) - (self.group0()[3] * other.group1()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group0()[2]) - (self.group0()[3] * other.group3()[0])),
                (-(self.group0()[1] * other.group2()[3]) - (self.group0()[2] * other.group0()[0]) - (self.group0()[3] * other.group3()[1])),
                (-(self.group0()[0] * other.group0()[1]) - (self.group0()[2] * other.group2()[3]) - (self.group0()[3] * other.group3()[2])),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])),
            ]) + (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3])
                    - (self.group0()[0] * other.group1()[3])
                    - (self.group0()[1] * other.group1()[2])
                    - (self.group0()[1] * other.group3()[2])),
                (-(self.group0()[1] * other.group0()[3])
                    - (self.group0()[1] * other.group1()[3])
                    - (self.group0()[2] * other.group1()[0])
                    - (self.group0()[2] * other.group3()[0])),
                (-(self.group0()[0] * other.group1()[1])
                    - (self.group0()[0] * other.group3()[1])
                    - (self.group0()[2] * other.group0()[3])
                    - (self.group0()[2] * other.group1()[3])),
                ((self.group0()[1] * other.group3()[1]) + (self.group0()[2] * other.group1()[2]) + (self.group0()[2] * other.group3()[2]) + (self.group0()[3] * other.group3()[3])),
            ]) + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                + (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group3(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group0()[2])
                    + (self.group0()[2] * other.group0()[1])
                    + (self.group0()[3] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group2()[3]) - (self.group0()[2] * other.group0()[0]) + (self.group0()[3] * other.group1()[1])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group2()[3])
                    + (self.group0()[3] * other.group1()[2])),
                (self.group0()[3] * other.group2()[3] * -1.0),
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorRoundPoint> for FlatPoint {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       12       27        0
    fn geometric_anti_product(self, other: VersorRoundPoint) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) - (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) - (self.group0()[3] * other.group0()[2])),
                (other.group1()[1] * self.group0()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group1()[1] * self.group0()[0]) - (self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((other.group1()[1] * self.group0()[1]) + (self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                ((other.group1()[1] * self.group0()[2]) - (self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                (-(other.group1()[0] * self.group0()[3])
                    + (self.group0()[0] * other.group0()[0])
                    + (self.group0()[1] * other.group0()[1])
                    + (self.group0()[2] * other.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorSphere> for FlatPoint {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       12       28        0
    fn geometric_anti_product(self, other: VersorSphere) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group1()[0] * self.group0()[0]) - (self.group0()[3] * other.group0()[0])),
                (-(other.group1()[0] * self.group0()[1]) - (self.group0()[3] * other.group0()[1])),
                (-(other.group1()[0] * self.group0()[2]) - (self.group0()[3] * other.group0()[2])),
                (other.group1()[1] * self.group0()[3]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (-(other.group1()[1] * self.group0()[0]) - (self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                (-(other.group1()[1] * self.group0()[1]) + (self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(other.group1()[1] * self.group0()[2]) - (self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (other.group1()[0] * self.group0()[3] * -1.0),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group1()[0] * self.group0()[0] * -1.0),
                (other.group1()[0] * self.group0()[1] * -1.0),
                (other.group1()[0] * self.group0()[2] * -1.0),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])),
            ]),
        );
    }
}
impl InfixGeometricAntiProduct for Flector {}
impl GeometricAntiProduct<AntiCircleRotor> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       47        0
    //    simd4       11       11        0
    // Totals...
    // yes simd       39       58        0
    //  no simd       72       91        0
    fn geometric_anti_product(self, other: AntiCircleRotor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) * -1.0),
                ((other.group0()[0] * self.group0()[2]) * -1.0),
                ((other.group0()[1] * self.group0()[0]) * -1.0),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) - (other.group1()[2] * self.group1()[2]) + (other.group2()[3] * self.group0()[3])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group1(), 0, 1, 2, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(other.group1()[2] * self.group0()[1]) - (other.group1()[3] * self.group0()[0]) + (other.group2()[2] * self.group1()[1])),
                (-(other.group1()[3] * self.group0()[1]) + (other.group2()[0] * self.group1()[2]) - (other.group2()[3] * self.group0()[1])),
                (-(other.group1()[3] * self.group0()[2]) + (other.group2()[1] * self.group1()[0]) - (other.group2()[3] * self.group0()[2])),
                ((other.group1()[2] * self.group0()[2]) - (other.group2()[2] * self.group1()[2]) - (other.group2()[3] * self.group1()[3])),
            ]) + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group2()[1], other.group1()[1], other.group1()[2], other.group2()[0]]) * swizzle!(self.group1(), 2, 3, 3, 0))
                - (Simd32x4::from([self.group0()[0], self.group1()[0], self.group1()[1], self.group1()[1]]) * swizzle!(other.group2(), 3, 2, 0, 1))
                - (Simd32x4::from([self.group1()[3], self.group0()[2], self.group0()[0], self.group1()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))
                + (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])
                    + (other.group1()[0] * self.group0()[3])
                    - (other.group1()[1] * self.group1()[2])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group1()[3])
                    + (other.group0()[2] * self.group0()[0])
                    + (other.group1()[1] * self.group0()[3])
                    - (other.group1()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) - (other.group0()[2] * self.group1()[3]) - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[2] * self.group0()[3])),
                (other.group0()[2] * self.group1()[2]),
            ]) + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[1]]) * swizzle!(self.group1(), 0, 1, 2, 1))),
        );
    }
}
impl GeometricAntiProduct<AntiDipoleInversion> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       52        0
    //    simd4       17       17        0
    // Totals...
    // yes simd       57       69        0
    //  no simd      108      120        0
    fn geometric_anti_product(self, other: AntiDipoleInversion) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group1()[2])),
                ((other.group0()[1] * self.group0()[3]) - (other.group0()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group1()[3] * self.group0()[3])
                    + (other.group3()[1] * self.group1()[1])
                    + (other.group3()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group1(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group3()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group0()[2]) - (other.group3()[0] * self.group0()[3]) + (other.group3()[1] * self.group1()[2])),
                ((other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group0()[0]) - (other.group3()[1] * self.group0()[3]) + (other.group3()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[2] * self.group1()[3]) + (other.group3()[0] * self.group1()[1])
                    - (other.group3()[2] * self.group0()[3])),
                ((other.group0()[2] * self.group0()[2]) - (other.group1()[2] * self.group1()[2]) - (other.group2()[3] * self.group1()[3])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))
                - (swizzle!(other.group1(), 3, 3, 3, 0) * swizzle!(self.group1(), 0, 1, 2, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group1()[0] * self.group1()[3]) - (other.group1()[1] * self.group0()[2]) - (other.group1()[3] * self.group0()[0]) - (other.group2()[0] * self.group0()[3])
                    + (other.group2()[1] * self.group1()[2])
                    + (other.group3()[1] * self.group0()[2])
                    - (other.group3()[2] * self.group0()[1])),
                ((other.group1()[1] * self.group1()[3]) - (other.group1()[2] * self.group0()[0]) - (other.group1()[3] * self.group0()[1]) - (other.group2()[1] * self.group0()[3])
                    + (other.group2()[2] * self.group1()[0])
                    - (other.group3()[0] * self.group0()[2])
                    + (other.group3()[2] * self.group0()[0])),
                (-(other.group1()[0] * self.group0()[1]) + (other.group1()[2] * self.group1()[3]) - (other.group1()[3] * self.group0()[2])
                    + (other.group2()[0] * self.group1()[1])
                    - (other.group2()[2] * self.group0()[3])
                    + (other.group3()[0] * self.group0()[1])
                    - (other.group3()[1] * self.group0()[0])),
                0.0,
            ]) + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group0()[1]]) * swizzle!(self.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group0()[2]]) * swizzle!(self.group1(), 0, 1, 2, 2))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((other.group2()[1] * self.group1()[1]) + (other.group2()[2] * self.group1()[2]) + (other.group3()[2] * self.group0()[2]) - (other.group3()[3] * self.group0()[3])),
            ]) - (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group1()[2]]) * swizzle!(self.group0(), 0, 1, 2, 2))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum321> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        9        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        1       12        0
    //  no simd        4       21        0
    fn geometric_anti_product(self, other: AntiDualNum321) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group0()[3] * -1.0)]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (other.group0()[0] * self.group1()[0]),
                (other.group0()[0] * self.group1()[1]),
                (other.group0()[0] * self.group1()[2]),
                (other.group0()[1] * self.group0()[3]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e235, e315, e125, e5
            (-(Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[1] * self.group1()[0]),
                (other.group0()[1] * self.group1()[1]),
                (other.group0()[1] * self.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum4> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       16        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        4       20        0
    //  no simd        4       32        0
    fn geometric_anti_product(self, other: AntiDualNum4) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(other.group0()[0]) * self.group1() * Simd32x4::from(-1.0)),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group0()[3])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]) * Simd32x4::from(-1.0)),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group1()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group1()[2])),
                (other.group0()[0] * self.group0()[3] * -1.0),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum5> for Flector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4       12        0
    fn geometric_anti_product(self, other: AntiDualNum5) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group0()[2])),
                (other.group0()[1] * self.group0()[3]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[1] * self.group1()[0]),
                (other.group0()[1] * self.group1()[1]),
                (other.group0()[1] * self.group1()[2]),
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiFlatPoint> for Flector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        2        4        0
    // Totals...
    // yes simd        6       12        0
    //  no simd       12       24        0
    fn geometric_anti_product(self, other: AntiFlatPoint) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]) * Simd32x4::from(-1.0)),
            // e15, e25, e35, e3215
            (Simd32x4::from([
                (-(other.group0()[2] * self.group1()[1]) - (other.group0()[3] * self.group0()[0])),
                (-(other.group0()[1] * self.group0()[3]) - (other.group0()[3] * self.group0()[1])),
                (-(other.group0()[2] * self.group0()[3]) - (other.group0()[3] * self.group0()[2])),
                ((other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[3], self.group1()[2], self.group1()[0], self.group1()[3]]) * swizzle!(other.group0(), 0, 0, 1, 3))
                + (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group1(), 2, 0, 1, 0))),
        );
    }
}
impl GeometricAntiProduct<AntiFlector> for Flector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       24        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       22       30        0
    //  no simd       40       48        0
    fn geometric_anti_product(self, other: AntiFlector) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from([
                (-(other.group1()[0] * self.group0()[3]) - (other.group1()[2] * self.group1()[1])),
                (-(other.group1()[0] * self.group1()[2]) - (other.group1()[1] * self.group0()[3])),
                (-(other.group1()[1] * self.group1()[0]) - (other.group1()[2] * self.group0()[3])),
                ((other.group1()[1] * self.group1()[1]) + (other.group1()[2] * self.group1()[2])),
            ]) - (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]))
                + (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group1(), 2, 0, 1, 0))),
            // e15, e25, e35, e3215
            (Simd32x4::from([
                (-(other.group0()[2] * self.group1()[1])
                    - (other.group1()[0] * self.group1()[3])
                    - (other.group1()[2] * self.group0()[1])
                    - (other.group1()[3] * self.group1()[0])),
                (-(other.group0()[3] * self.group0()[1])
                    - (other.group1()[0] * self.group0()[2])
                    - (other.group1()[1] * self.group1()[3])
                    - (other.group1()[3] * self.group1()[1])),
                (-(other.group0()[3] * self.group0()[2])
                    - (other.group1()[1] * self.group0()[0])
                    - (other.group1()[2] * self.group1()[3])
                    - (other.group1()[3] * self.group1()[2])),
                ((other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2]) + (other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[3], other.group0()[1], other.group0()[2], other.group1()[3]]) * swizzle!(self.group0(), 0, 3, 3, 3))
                - (Simd32x4::from([self.group0()[3], self.group1()[2], self.group1()[0], self.group1()[3]]) * swizzle!(other.group0(), 0, 0, 1, 3))
                + (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
        );
    }
}
impl GeometricAntiProduct<AntiLine> for Flector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       21        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       16       25        0
    //  no simd       28       37        0
    fn geometric_anti_product(self, other: AntiLine) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) + (other.group1()[0] * self.group0()[3]) + (other.group1()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group0()[2])
                    + (other.group0()[2] * self.group0()[0])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) + (other.group1()[1] * self.group1()[0]) + (other.group1()[2] * self.group0()[3])),
                ((other.group0()[2] * self.group1()[2]) * -1.0),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[1]]) * swizzle!(self.group1(), 2, 0, 1, 1))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                (other.group0()[2] * self.group1()[1]),
                (other.group0()[0] * self.group1()[2]),
                (other.group0()[1] * self.group1()[0]),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) - (other.group1()[1] * self.group1()[1]) - (other.group1()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))),
        );
    }
}
impl GeometricAntiProduct<AntiMotor> for Flector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       16        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       20       24        0
    //  no simd       44       48        0
    fn geometric_anti_product(self, other: AntiMotor) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from([
                ((other.group1()[0] * self.group0()[3]) - (other.group1()[1] * self.group1()[2]) + (other.group1()[2] * self.group1()[1]) + (other.group1()[3] * self.group1()[0])),
                ((other.group1()[0] * self.group1()[2]) + (other.group1()[1] * self.group0()[3]) - (other.group1()[2] * self.group1()[0]) + (other.group1()[3] * self.group1()[1])),
                (-(other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group0()[3])
                    + (other.group1()[3] * self.group1()[2])),
                0.0,
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group0()[1], self.group1()[3], self.group1()[3], self.group1()[1]]) * swizzle!(other.group0(), 2, 1, 2, 1))
                - (Simd32x4::from([self.group1()[3], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 0, 0, 1, 0))
                + (swizzle!(other.group0(), 1, 2, 0, 3) * swizzle!(self.group0(), 2, 0, 1, 3))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(other.group1()[0] * self.group1()[0]) - (other.group1()[1] * self.group1()[1]) - (other.group1()[2] * self.group1()[2])
                    + (other.group1()[3] * self.group0()[3])),
            ]) + (Simd32x4::from([self.group0()[3], self.group1()[2], self.group1()[0], self.group0()[0]]) * swizzle!(other.group0(), 0, 0, 1, 0))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group1()[1], self.group0()[3], self.group0()[3], self.group0()[1]]) * swizzle!(other.group0(), 2, 1, 2, 1))
                - (swizzle!(other.group0(), 1, 2, 0, 3) * swizzle!(self.group1(), 2, 0, 1, 3))),
        );
    }
}
impl GeometricAntiProduct<AntiPlane> for Flector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       16        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       11       19        0
    //  no simd       20       28        0
    fn geometric_anti_product(self, other: AntiPlane) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group0()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group0()[3])),
                (-(other.group0()[1] * self.group1()[0]) - (other.group0()[2] * self.group0()[3])),
                ((other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2])),
            ]) + (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group1(), 2, 0, 1, 0))),
            // e15, e25, e35, e3215
            (Simd32x4::from([
                (-(other.group0()[2] * self.group0()[1]) - (other.group0()[3] * self.group1()[0])),
                (-(other.group0()[1] * self.group1()[3]) - (other.group0()[3] * self.group1()[1])),
                (-(other.group0()[2] * self.group1()[3]) - (other.group0()[3] * self.group1()[2])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([self.group1()[3], self.group0()[2], self.group0()[0], self.group0()[3]]) * swizzle!(other.group0(), 0, 0, 1, 3))
                + (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
        );
    }
}
impl GeometricAntiProduct<AntiQuadNum> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       16        0
    //    simd4        3        6        0
    // Totals...
    // yes simd        7       22        0
    //  no simd       16       40        0
    fn geometric_anti_product(self, other: AntiQuadNum) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group1()[0] * -1.0),
                (other.group0()[0] * self.group1()[1] * -1.0),
                (other.group0()[0] * self.group1()[2] * -1.0),
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[2] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            ((Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]])
                * swizzle!(other.group0(), 2, 2, 2, 3)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))),
            // e235, e315, e125, e5
            ((Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[0]) + (other.group0()[3] * self.group1()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[3] * self.group1()[2])),
                (other.group0()[0] * self.group0()[3] * -1.0),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiScalar> for Flector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn geometric_anti_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from(other[e12345]) * self.group0()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other[e12345]) * self.group1()),
        );
    }
}
impl GeometricAntiProduct<AntiTripleNum> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       16        0
    //    simd4        1        4        0
    // Totals...
    // yes simd        5       20        0
    //  no simd        8       32        0
    fn geometric_anti_product(self, other: AntiTripleNum) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(other.group0()[0]) * self.group1() * Simd32x4::from(-1.0)),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[2] * self.group0()[3])),
            ]),
            // e235, e315, e125, e5
            ((Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[0]) + (other.group0()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group1()[2])),
                (other.group0()[0] * self.group0()[3] * -1.0),
            ]),
        );
    }
}
impl GeometricAntiProduct<Circle> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       52        0
    //    simd4        7        7        0
    // Totals...
    // yes simd       43       59        0
    //  no simd       64       80        0
    fn geometric_anti_product(self, other: Circle) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[3]) - (other.group0()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group1()[3] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group0()[2])),
                ((other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[2] * self.group1()[3])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) - (other.group1()[1] * self.group1()[1]) - (other.group1()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 0) * swizzle!(self.group1(), 0, 1, 2, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(other.group2()[0] * self.group0()[3]) + (other.group2()[1] * self.group1()[2]) + (other.group1()[0] * self.group1()[3])
                    - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])
                    - (other.group1()[3] * self.group0()[0])),
                (-(other.group2()[1] * self.group0()[3])
                    + (other.group2()[2] * self.group1()[0])
                    + (other.group1()[0] * self.group0()[2])
                    + (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group0()[0])
                    - (other.group1()[3] * self.group0()[1])),
                ((other.group2()[0] * self.group1()[1]) - (other.group2()[2] * self.group0()[3]) - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group1()[3])
                    - (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) + (other.group1()[0] * self.group0()[3])),
                ((other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[1]) + (other.group1()[2] * self.group0()[3])),
                ((other.group2()[1] * self.group1()[1]) + (other.group2()[2] * self.group1()[2]) - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))),
        );
    }
}
impl GeometricAntiProduct<CircleRotor> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       56        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       48       64        0
    //  no simd       72       88        0
    fn geometric_anti_product(self, other: CircleRotor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[3]) - (other.group0()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group1()[3] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group0()[2])),
                ((other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[2] * self.group1()[3])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) - (other.group1()[1] * self.group1()[1]) - (other.group1()[2] * self.group1()[2])
                    + (other.group2()[3] * self.group0()[3])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 0) * swizzle!(self.group1(), 0, 1, 2, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group1()[0] * self.group1()[3]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1])
                    - (other.group1()[3] * self.group0()[0])
                    - (other.group2()[0] * self.group0()[3])
                    + (other.group2()[1] * self.group1()[2])
                    + (other.group2()[3] * self.group0()[0])),
                ((other.group1()[0] * self.group0()[2]) + (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group0()[0])
                    - (other.group1()[3] * self.group0()[1])
                    - (other.group2()[1] * self.group0()[3])
                    + (other.group2()[2] * self.group1()[0])
                    + (other.group2()[3] * self.group0()[1])),
                (-(other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0]) + (other.group1()[2] * self.group1()[3])
                    - (other.group1()[3] * self.group0()[2])
                    + (other.group2()[0] * self.group1()[1])
                    - (other.group2()[2] * self.group0()[3])
                    + (other.group2()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) + (other.group1()[0] * self.group0()[3])),
                ((other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[1]) + (other.group1()[2] * self.group0()[3])),
                (-(other.group1()[2] * self.group0()[2]) + (other.group2()[2] * self.group1()[2]) + (other.group2()[3] * self.group1()[3])),
            ]) - (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))
                + (swizzle!(other.group2(), 3, 3, 3, 1) * swizzle!(self.group1(), 0, 1, 2, 1))),
        );
    }
}
impl GeometricAntiProduct<Dipole> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       47        0
    //    simd4        9        9        0
    // Totals...
    // yes simd       37       56        0
    //  no simd       64       83        0
    fn geometric_anti_product(self, other: Dipole) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) * -1.0),
                ((other.group0()[0] * self.group0()[2]) * -1.0),
                ((other.group0()[1] * self.group0()[0]) * -1.0),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) - (other.group1()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group1(), 0, 1, 2, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group2()[2] * self.group1()[1]) - (other.group1()[2] * self.group0()[1]) - (other.group1()[3] * self.group0()[0])),
                ((other.group2()[0] * self.group1()[2]) - (other.group1()[1] * self.group1()[3]) - (other.group1()[3] * self.group0()[1])),
                ((other.group2()[1] * self.group1()[0]) - (other.group1()[2] * self.group1()[3]) - (other.group1()[3] * self.group0()[2])),
                (-(other.group2()[1] * self.group1()[1]) - (other.group2()[2] * self.group1()[2]) + (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group2()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group1()[3], self.group0()[2], self.group0()[0], self.group1()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))
                + (swizzle!(other.group1(), 1, 2, 0, 1) * swizzle!(self.group0(), 2, 0, 1, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])
                    + (other.group1()[0] * self.group0()[3])
                    - (other.group1()[1] * self.group1()[2])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group1()[3])
                    + (other.group0()[2] * self.group0()[0])
                    + (other.group1()[1] * self.group0()[3])
                    - (other.group1()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) - (other.group0()[2] * self.group1()[3]) - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[2] * self.group0()[3])),
                ((other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<DipoleInversion> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       55        0
    //    simd4       17       17        0
    // Totals...
    // yes simd       53       72        0
    //  no simd      104      123        0
    fn geometric_anti_product(self, other: DipoleInversion) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group2()[3] * self.group1()[0]) * -1.0),
                ((other.group2()[3] * self.group1()[1]) * -1.0),
                ((other.group2()[3] * self.group1()[2]) * -1.0),
                ((other.group0()[0] * self.group0()[0])
                    + (other.group0()[1] * self.group0()[1])
                    + (other.group0()[2] * self.group0()[2])
                    + (other.group3()[1] * self.group1()[1])
                    + (other.group3()[2] * self.group1()[2])),
            ]) - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group1(), 1, 2, 0, 3))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[2] * self.group0()[1]) - (other.group3()[0] * self.group0()[3]) + (other.group3()[1] * self.group1()[2])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group3()[1] * self.group0()[3]) + (other.group3()[2] * self.group1()[0])),
                (-(other.group0()[1] * self.group0()[0]) + (other.group3()[0] * self.group1()[1]) - (other.group3()[2] * self.group0()[3])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[2]]) * swizzle!(self.group1(), 1, 2, 0, 2))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group1(), 0, 1, 2, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(other.group1()[2] * self.group0()[1]) - (other.group1()[3] * self.group0()[0]) + (other.group2()[2] * self.group1()[1])
                    - (other.group3()[2] * self.group0()[1])),
                (-(other.group1()[3] * self.group0()[1]) + (other.group2()[0] * self.group1()[2])
                    - (other.group3()[0] * self.group0()[2])
                    - (other.group3()[1] * self.group1()[3])),
                (-(other.group1()[3] * self.group0()[2]) + (other.group2()[1] * self.group1()[0])
                    - (other.group3()[1] * self.group0()[0])
                    - (other.group3()[2] * self.group1()[3])),
                (-(other.group2()[2] * self.group1()[2])
                    + (other.group3()[1] * self.group0()[1])
                    + (other.group3()[2] * self.group0()[2])
                    + (other.group3()[3] * self.group0()[3])),
            ]) + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group2()[1], other.group1()[1], other.group1()[2], other.group2()[0]]) * swizzle!(self.group1(), 2, 3, 3, 0))
                - (Simd32x4::from([other.group3()[0], other.group2()[2], other.group2()[0], other.group2()[1]]) * swizzle!(self.group1(), 3, 0, 1, 1))
                + (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[2]]) * swizzle!(self.group0(), 2, 0, 1, 2))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group1()[3], self.group0()[2], self.group0()[0], self.group1()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))
                + (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group0()[2]) + (other.group1()[0] * self.group0()[3])
                    - (other.group1()[1] * self.group1()[2])
                    - (other.group2()[3] * self.group0()[0])),
                (-(other.group0()[1] * self.group1()[3]) + (other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3])
                    - (other.group1()[2] * self.group1()[0])
                    - (other.group2()[3] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[2] * self.group1()[3]) - (other.group1()[0] * self.group1()[1]) + (other.group1()[2] * self.group0()[3])
                    - (other.group2()[3] * self.group0()[2])),
                ((other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<DualNum321> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       17        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        4       18        0
    //  no simd        4       21        0
    fn geometric_anti_product(self, other: DualNum321) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group0()[3] * -1.0)]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (other.group0()[0] * self.group1()[0]),
                (other.group0()[0] * self.group1()[1]),
                (other.group0()[0] * self.group1()[2]),
                (other.group0()[1] * self.group0()[3]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[1] * self.group1()[0]),
                (other.group0()[1] * self.group1()[1]),
                (other.group0()[1] * self.group1()[2]),
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<DualNum4> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       12        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        4       14        0
    //  no simd        4       20        0
    fn geometric_anti_product(self, other: DualNum4) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(other.group0()[0]) * self.group1()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            (Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group0()[0]]) * self.group0()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group1()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3]),
            ]),
        );
    }
}
impl GeometricAntiProduct<DualNum5> for Flector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4       12        0
    fn geometric_anti_product(self, other: DualNum5) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[2])),
                (other.group0()[1] * self.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[1] * self.group1()[0]),
                (other.group0()[1] * self.group1()[1]),
                (other.group0()[1] * self.group1()[2]),
                (-(other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<FlatPoint> for Flector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        2        4        0
    // Totals...
    // yes simd        6       12        0
    //  no simd       12       24        0
    fn geometric_anti_product(self, other: FlatPoint) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]) * Simd32x4::from(-1.0)),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[3])),
                ((other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[2] * self.group1()[2]) - (other.group0()[3] * self.group1()[3])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group1(), 2, 0, 1, 0))),
        );
    }
}
impl GeometricAntiProduct<Flector> for Flector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       16        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       16       24        0
    //  no simd       40       48        0
    fn geometric_anti_product(self, other: Flector) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from([
                (-(other.group1()[0] * self.group0()[3]) - (other.group1()[2] * self.group1()[1])),
                (-(other.group1()[0] * self.group1()[2]) - (other.group1()[1] * self.group0()[3])),
                (-(other.group1()[1] * self.group1()[0]) - (other.group1()[2] * self.group0()[3])),
                ((other.group1()[1] * self.group1()[1]) + (other.group1()[2] * self.group1()[2])),
            ]) - (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]))
                + (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group1(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[2] * self.group1()[1]) - (other.group1()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group1()[0] * self.group0()[2])),
                ((other.group0()[1] * self.group1()[0]) - (other.group1()[1] * self.group0()[0])),
                (-(other.group0()[3] * self.group1()[3]) + (other.group1()[3] * self.group0()[3])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]) * swizzle!(self.group1(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[2]]) * swizzle!(other.group1(), 3, 3, 3, 2))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (swizzle!(other.group1(), 1, 2, 0, 1) * swizzle!(self.group0(), 2, 0, 1, 1))),
        );
    }
}
impl GeometricAntiProduct<Line> for Flector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       28        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       22       30        0
    //  no simd       28       36        0
    fn geometric_anti_product(self, other: Line) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) - (other.group1()[0] * self.group0()[3])
                    + (other.group1()[1] * self.group1()[2])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group0()[0]) - (other.group1()[1] * self.group0()[3])
                    + (other.group1()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group0()[1])
                    + (other.group0()[1] * self.group0()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (other.group1()[0] * self.group1()[1])
                    - (other.group1()[2] * self.group0()[3])),
                (-(other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group1()[2])),
                ((other.group0()[1] * self.group0()[3]) - (other.group0()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])
                    + (other.group1()[1] * self.group1()[1])
                    + (other.group1()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<Motor> for Flector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       16        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       20       24        0
    //  no simd       44       48        0
    fn geometric_anti_product(self, other: Motor) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[3] * other.group1()[0]) + (self.group1()[2] * other.group1()[1]) + (self.group1()[3] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[0]) - (self.group0()[3] * other.group1()[1]) + (self.group1()[0] * other.group1()[2]) + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) - (self.group0()[3] * other.group1()[2]) + (self.group1()[1] * other.group1()[0]) + (self.group1()[3] * other.group0()[2])),
                0.0,
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[3], other.group0()[2]]) * swizzle!(self.group1(), 1, 2, 2, 2))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[1], other.group0()[1]]) * swizzle!(self.group1(), 0, 1, 0, 1))
                + (swizzle!(self.group0(), 0, 1, 0, 3) * swizzle!(other.group0(), 3, 3, 1, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[3] * other.group1()[3])
                    + (self.group1()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group1()[3]]) * other.group0())
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[3], other.group1()[1]]) * swizzle!(self.group1(), 1, 2, 2, 1))
                + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 0, 1, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<MultiVector> for Flector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       67       90        0
    //    simd2        4        4        0
    //    simd3       20       22        0
    //    simd4       23       23        0
    // Totals...
    // yes simd      114      139        0
    //  no simd      227      256        0
    fn geometric_anti_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                (-(other.group7()[0] * self.group0()[0]) - (other.group7()[1] * self.group0()[1]) - (other.group7()[2] * self.group0()[2])
                    + (self.group1()[3] * other.group1()[3])),
                ((other.group4()[0] * self.group0()[0]) + (other.group4()[1] * self.group0()[1]) + (other.group4()[2] * self.group0()[2]) - (self.group1()[3] * other[e45])),
            ]) - (Simd32x2::from(self.group0()[3]) * Simd32x2::from([other.group6()[3], other.group3()[3]]))
                + (Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group1()[0], other.group9()[0]]))
                + (Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group1()[1], other.group9()[1]]))
                + (Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group1()[2], other.group9()[2]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group4()[0] * self.group1()[3]) + (other.group4()[1] * self.group0()[2]) + (other.group5()[0] * self.group0()[3])
                    - (other.group5()[1] * self.group1()[2])
                    - (self.group0()[0] * other[e45])),
                (-(other.group4()[1] * self.group1()[3]) + (other.group4()[2] * self.group0()[0]) + (other.group5()[1] * self.group0()[3])
                    - (other.group5()[2] * self.group1()[0])
                    - (self.group0()[1] * other[e45])),
                ((other.group4()[0] * self.group0()[1]) - (other.group4()[2] * self.group1()[3]) - (other.group5()[0] * self.group1()[1]) + (other.group5()[2] * self.group0()[3])
                    - (self.group0()[2] * other[e45])),
                (other.group4()[2] * self.group1()[2]),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group4()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))
                - (Simd32x4::from([other.group4()[2], other.group4()[0], other.group4()[1], other[e45]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group4()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))),
            // e5
            (-(other.group0()[0] * self.group1()[3])
                + (other.group5()[0] * self.group0()[0])
                + (other.group5()[1] * self.group0()[1])
                + (other.group5()[2] * self.group0()[2])
                + (self.group0()[0] * other.group9()[0])
                + (self.group0()[1] * other.group9()[1])
                + (self.group0()[2] * other.group9()[2])
                + (self.group0()[3] * other.group9()[3])
                - (self.group1()[0] * other.group3()[0])
                - (self.group1()[1] * other.group3()[1])
                - (self.group1()[2] * other.group3()[2])
                - (self.group1()[3] * other.group3()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                (-(other.group8()[0] * self.group0()[3]) + (other.group8()[1] * self.group1()[2]) - (self.group1()[0] * other[e1]) - (self.group1()[3] * other.group1()[0])
                    + (self.group1()[3] * other.group6()[0])),
                (-(other.group8()[1] * self.group0()[3]) + (other.group8()[2] * self.group1()[0]) - (self.group1()[1] * other[e1]) - (self.group1()[3] * other.group1()[1])
                    + (self.group1()[3] * other.group6()[1])),
                ((other.group8()[0] * self.group1()[1]) - (other.group8()[2] * self.group0()[3]) - (self.group1()[2] * other[e1]) - (self.group1()[3] * other.group1()[2])
                    + (self.group1()[3] * other.group6()[2])),
                (other.group7()[2] * self.group0()[2]),
            ]) + (Simd32x4::from(other.group0()[1]) * self.group0())
                - (Simd32x4::from([other.group8()[2], other.group8()[0], other.group8()[1], other.group6()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[1], self.group1()[1]]) * swizzle!(other.group6(), 3, 2, 0, 1))
                - (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[3]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[1], self.group0()[2], self.group1()[2]]) * swizzle!(other.group6(), 1, 3, 3, 2))
                + (Simd32x4::from([other.group1()[1], other.group6()[0], other.group1()[0], other.group7()[1]]) * swizzle!(self.group0(), 2, 2, 1, 1))
                + (Simd32x4::from([other.group6()[2], other.group1()[2], other.group6()[1], other.group7()[0]]) * swizzle!(self.group0(), 1, 0, 0, 0))),
            // e41, e42, e43
            ((Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from([self.group0()[3], self.group1()[2], self.group1()[0]]) * swizzle!(other.group7(), 0, 0, 1))
                + (Simd32x3::from([self.group1()[1], self.group0()[3], self.group0()[3]]) * swizzle!(other.group7(), 2, 1, 2))
                - (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]) * swizzle!(other.group7(), 1, 2, 0))),
            // e23, e31, e12
            (Simd32x3::from([
                (-(self.group1()[1] * other.group1()[2]) + (self.group1()[2] * other.group1()[1])),
                ((self.group1()[0] * other.group1()[2]) - (self.group1()[2] * other.group1()[0])),
                (-(self.group1()[0] * other.group1()[1]) + (self.group1()[1] * other.group1()[0])),
            ]) - (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from(other.group6()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from([self.group0()[1], self.group1()[3], self.group1()[3]]) * swizzle!(other.group7(), 2, 1, 2))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group7(), 1, 2, 0))
                + (Simd32x3::from([self.group1()[3], self.group0()[2], self.group0()[0]]) * swizzle!(other.group7(), 0, 0, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group4()[2] * self.group0()[1]) - (self.group0()[3] * other.group9()[0]) + (self.group1()[2] * other.group9()[1])),
                (-(other.group4()[0] * self.group0()[2]) - (self.group0()[3] * other.group9()[1]) + (self.group1()[0] * other.group9()[2])),
                (-(other.group4()[1] * self.group0()[0]) - (self.group0()[3] * other.group9()[2]) + (self.group1()[1] * other.group9()[0])),
                ((other.group4()[0] * self.group0()[0]) + (other.group4()[1] * self.group0()[1]) + (other.group4()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(other[e45]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[2], other.group5()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group4()[1], other.group4()[2], other.group4()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group3()[3], other.group3()[3], other.group9()[1], other.group5()[1]]) * swizzle!(self.group1(), 0, 1, 0, 1))
                - (Simd32x4::from([other.group9()[2], other.group9()[0], other.group3()[3], other.group5()[2]]) * swizzle!(self.group1(), 1, 2, 2, 2))),
            // e423, e431, e412
            (-(Simd32x3::from(other[e45]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from([self.group0()[3], self.group1()[2], self.group1()[0]]) * swizzle!(other.group4(), 0, 0, 1))
                - (Simd32x3::from([self.group1()[1], self.group0()[3], self.group0()[3]]) * swizzle!(other.group4(), 2, 1, 2))
                + (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]) * swizzle!(other.group4(), 1, 2, 0))),
            // e235, e315, e125
            (Simd32x3::from([
                (-(self.group0()[1] * other.group9()[2]) + (self.group0()[2] * other.group9()[1]) + (self.group1()[1] * other.group3()[2])
                    - (self.group1()[2] * other.group3()[1])),
                ((self.group0()[0] * other.group9()[2]) - (self.group0()[2] * other.group9()[0]) - (self.group1()[0] * other.group3()[2]) + (self.group1()[2] * other.group3()[0])),
                (-(self.group0()[0] * other.group9()[1]) + (self.group0()[1] * other.group9()[0]) + (self.group1()[0] * other.group3()[1])
                    - (self.group1()[1] * other.group3()[0])),
            ]) - (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                - (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(other.group9()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from([self.group0()[1], self.group1()[3], self.group1()[3]]) * swizzle!(other.group5(), 2, 1, 2))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group5(), 1, 2, 0))
                - (Simd32x3::from([self.group1()[3], self.group0()[2], self.group0()[0]]) * swizzle!(other.group5(), 0, 0, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((other.group8()[1] * self.group1()[1]) + (other.group8()[2] * self.group1()[2]) + (self.group0()[2] * other.group1()[2]) - (self.group0()[3] * other[e1])),
            ]) + (Simd32x4::from(other.group0()[1]) * self.group1())
                - (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group6()[3]]))
                + (Simd32x4::from([other.group7()[1], other.group7()[2], other.group7()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group7()[2], other.group7()[0], other.group7()[1], other.group6()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[2]]) * swizzle!(other.group6(), 1, 2, 0, 2))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group6()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))
                + (Simd32x4::from([other.group6()[0], other.group6()[1], other.group6()[2], other.group1()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group8()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e1234
            (-(other.group7()[0] * self.group1()[0]) - (other.group7()[1] * self.group1()[1]) - (other.group7()[2] * self.group1()[2]) + (self.group0()[3] * other.group1()[3])),
        );
    }
}
impl GeometricAntiProduct<Plane> for Flector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       16        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       11       19        0
    //  no simd       20       28        0
    fn geometric_anti_product(self, other: Plane) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from([
                (-(self.group0()[3] * other.group0()[0]) - (self.group1()[1] * other.group0()[2])),
                (-(self.group0()[3] * other.group0()[1]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[3] * other.group0()[2]) - (self.group1()[0] * other.group0()[1])),
                ((self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) - (self.group1()[3] * other.group0()[0])),
                (-(self.group0()[2] * other.group0()[0]) - (self.group1()[3] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[1]) - (self.group1()[3] * other.group0()[2])),
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])),
            ]) + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                + (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<QuadNum> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       17        0
    //    simd4        3        4        0
    // Totals...
    // yes simd       10       21        0
    //  no simd       19       33        0
    fn geometric_anti_product(self, other: QuadNum) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group1()[0] * other.group0()[0]),
                (self.group1()[1] * other.group0()[0]),
                (self.group1()[2] * other.group0()[0]),
                (-(self.group0()[3] * other.group0()[2]) + (self.group1()[3] * other.group0()[0])),
            ]),
            // e23, e31, e12, e45
            ((swizzle!(other.group0(), 0, 0, 0, 3) * self.group0()) - (swizzle!(other.group0(), 2, 2, 2, 0) * self.group1())),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[0] * other.group0()[3]) - (self.group1()[0] * other.group0()[1])),
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[1] * other.group0()[3]) - (self.group1()[1] * other.group0()[1])),
                (-(self.group0()[2] * other.group0()[2]) + (self.group0()[2] * other.group0()[3]) - (self.group1()[2] * other.group0()[1])),
                (self.group0()[3] * other.group0()[0]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([0.0, 0.0, 0.0, ((self.group1()[3] * other.group0()[2]) * -1.0)]) + (Simd32x4::from(other.group0()[3]) * self.group1())
                - (swizzle!(other.group0(), 0, 0, 0, 1) * self.group0())),
        );
    }
}
impl GeometricAntiProduct<RoundPoint> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       24       44        0
    fn geometric_anti_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2]) + (self.group1()[3] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[3] * other.group0()[0]) - (self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group0()[1] * other.group0()[3]) - (self.group0()[3] * other.group0()[1]) + (self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[3]) - (self.group0()[3] * other.group0()[2]) - (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                (self.group1()[3] * other.group0()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1]) - (self.group1()[0] * other[e2]) - (self.group1()[3] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0]) - (self.group1()[1] * other[e2]) - (self.group1()[3] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) - (self.group1()[2] * other[e2]) - (self.group1()[3] * other.group0()[2])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) - (self.group0()[3] * other[e2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Scalar> for Flector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn geometric_anti_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from(other[scalar]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e1, e2, e3, e5
            (Simd32x4::from(other[scalar]) * self.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
    }
}
impl GeometricAntiProduct<Sphere> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       32        0
    //    simd4        2        4        0
    // Totals...
    // yes simd       18       36        0
    //  no simd       24       48        0
    fn geometric_anti_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group1()[0] * other[e4315] * -1.0),
                (self.group1()[1] * other[e4315] * -1.0),
                (self.group1()[2] * other[e4315] * -1.0),
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2]) - (self.group1()[3] * other[e4315])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other[e4315]) - (self.group0()[3] * other.group0()[0]) - (self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                (-(self.group0()[1] * other[e4315]) - (self.group0()[3] * other.group0()[1]) + (self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[2] * other[e4315]) - (self.group0()[3] * other.group0()[2]) - (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                (self.group1()[3] * other[e4315] * -1.0),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) - (self.group1()[3] * other.group0()[0])),
                (-(self.group0()[2] * other.group0()[0]) - (self.group1()[3] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[1]) - (self.group1()[3] * other.group0()[2])),
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])),
            ]) + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                + (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from(other[e4315]) * self.group0() * Simd32x4::from(-1.0)),
        );
    }
}
impl GeometricAntiProduct<TripleNum> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       12        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        5       15        0
    //  no simd        8       24        0
    fn geometric_anti_product(self, other: TripleNum) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(other.group0()[0]) * self.group1()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[2] * self.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group0()[2])),
                (other.group0()[0] * self.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(other.group0()[2]) * self.group1()) - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]]) * self.group0())),
        );
    }
}
impl GeometricAntiProduct<VersorEven> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       44        0
    //    simd4       21       21        0
    // Totals...
    // yes simd       53       65        0
    //  no simd      116      128        0
    fn geometric_anti_product(self, other: VersorEven) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[3] * other.group1()[3])
                    + (self.group1()[2] * other.group3()[2])
                    + (self.group1()[3] * other.group3()[3])),
            ]) - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group3()[3], other.group3()[1]]) * swizzle!(self.group1(), 1, 2, 2, 1))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group0()[1], other.group3()[0]]) * swizzle!(self.group1(), 0, 1, 0, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(self.group0()[2] * other.group0()[1]) + (self.group1()[2] * other.group3()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group1()[0] * other.group3()[2])),
                (-(self.group0()[1] * other.group0()[0]) + (self.group1()[1] * other.group3()[0])),
                ((self.group0()[3] * other.group0()[3]) - (self.group1()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group1()[3]]) * other.group3())
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[2]]) * swizzle!(other.group0(), 0, 1, 2, 2))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group3()[3], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 2, 1))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group1()[0]]) * swizzle!(self.group1(), 0, 1, 0, 0))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[3], other.group1()[1]]) * swizzle!(self.group1(), 1, 2, 2, 1))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group0()[1], other.group0()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[1] * other.group3()[2])
                    - (self.group0()[2] * other.group1()[1])
                    + (self.group0()[2] * other.group3()[1])
                    - (self.group0()[3] * other.group2()[0])
                    + (self.group1()[2] * other.group2()[1])
                    + (self.group1()[3] * other.group1()[0])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[3]) - (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    - (self.group0()[2] * other.group3()[0])
                    - (self.group0()[3] * other.group2()[1])
                    + (self.group1()[0] * other.group2()[2])
                    + (self.group1()[3] * other.group1()[1])),
                (-(self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group1()[0])
                    + (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group0()[3])
                    - (self.group0()[2] * other.group1()[3])
                    - (self.group0()[3] * other.group2()[2])
                    + (self.group1()[1] * other.group2()[0])
                    + (self.group1()[3] * other.group1()[2])),
                0.0,
            ]) + (Simd32x4::from([other.group0()[3], other.group3()[2], other.group1()[1], other.group3()[3]]) * swizzle!(self.group0(), 0, 0, 0, 3))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[3], other.group0()[1]]) * swizzle!(self.group1(), 1, 2, 2, 1))
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[1], other.group0()[0]]) * swizzle!(self.group1(), 0, 1, 0, 0))
                - (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group0()[2]]) * swizzle!(self.group1(), 3, 3, 3, 2))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((self.group0()[2] * other.group3()[2]) - (self.group0()[3] * other.group2()[3]) + (self.group1()[2] * other.group2()[2]) + (self.group1()[3] * other.group0()[3])),
            ]) - (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[2]]) * swizzle!(other.group1(), 1, 2, 0, 2))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group3()[3], other.group1()[1]]) * swizzle!(self.group0(), 1, 2, 2, 1))
                + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group2()[0]]) * swizzle!(self.group1(), 0, 1, 0, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group2()[1]]) * swizzle!(self.group1(), 1, 2, 2, 1))
                - (Simd32x4::from([other.group3()[3], other.group3()[3], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<VersorOdd> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       29       47        0
    //    simd4       21       21        0
    // Totals...
    // yes simd       50       68        0
    //  no simd      113      131        0
    fn geometric_anti_product(self, other: VersorOdd) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group1()[1] * other.group0()[2]) * -1.0),
                ((self.group1()[2] * other.group0()[0]) * -1.0),
                ((self.group1()[2] * other.group2()[3]) * -1.0),
                ((self.group0()[1] * other.group0()[1])
                    + (self.group0()[2] * other.group0()[2])
                    + (self.group1()[0] * other.group3()[0])
                    + (self.group1()[1] * other.group3()[1])
                    + (self.group1()[2] * other.group3()[2])),
            ]) - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[1], other.group2()[3]]) * swizzle!(self.group1(), 0, 1, 0, 3))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) - (self.group0()[3] * other.group3()[0]) + (self.group1()[2] * other.group3()[1])),
                (-(self.group0()[2] * other.group0()[0]) - (self.group0()[3] * other.group3()[1]) + (self.group1()[0] * other.group3()[2])),
                (-(self.group0()[0] * other.group0()[1]) - (self.group0()[3] * other.group3()[2]) + (self.group1()[1] * other.group3()[0])),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])),
            ]) - (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]) * swizzle!(self.group1(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group1()[0]]) * swizzle!(self.group1(), 0, 1, 0, 0))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[3], other.group1()[1]]) * swizzle!(self.group1(), 1, 2, 2, 1))
                + (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) - (self.group0()[1] * other.group3()[2]) + (self.group1()[1] * other.group2()[2])),
                (-(self.group0()[2] * other.group1()[0]) - (self.group0()[2] * other.group3()[0]) + (self.group1()[2] * other.group2()[0])),
                (-(self.group0()[0] * other.group3()[1]) - (self.group0()[2] * other.group1()[3]) + (self.group1()[0] * other.group2()[1])),
                ((self.group0()[2] * other.group1()[2]) + (self.group0()[2] * other.group3()[2]) + (self.group0()[3] * other.group3()[3])),
            ]) - (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group1()[3]]) * swizzle!(other.group1(), 3, 3, 1, 3))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[1]]) * swizzle!(other.group3(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[1]]) * swizzle!(self.group1(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[2]]) * swizzle!(self.group1(), 3, 3, 3, 2))
                + (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group3(), 1, 2, 0, 0))
                - (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group2(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[3] * other.group1()[0])
                    - (self.group1()[2] * other.group1()[1])
                    - (self.group1()[3] * other.group0()[0])),
                (-(self.group0()[2] * other.group0()[0]) + (self.group0()[3] * other.group1()[1])
                    - (self.group1()[0] * other.group1()[2])
                    - (self.group1()[3] * other.group0()[1])),
                (-(self.group0()[2] * other.group2()[3]) + (self.group0()[3] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[0])
                    - (self.group1()[3] * other.group0()[2])),
                0.0,
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group0()[1]]) * swizzle!(self.group1(), 0, 1, 0, 1))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group0()[2]]) * swizzle!(self.group1(), 1, 2, 2, 2))
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[1], other.group2()[3]]) * swizzle!(self.group0(), 0, 1, 0, 3))),
        );
    }
}
impl GeometricAntiProduct<VersorRoundPoint> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       32        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       24       36        0
    //  no simd       36       48        0
    fn geometric_anti_product(self, other: VersorRoundPoint) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2]) + (self.group1()[3] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                0.0,
            ]) - (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group1()[3]]) * other.group0())
                + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other.group1()[1]]) * self.group0())),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group1()[0] * self.group1()[0]) + (other.group1()[1] * self.group0()[0]) - (self.group0()[1] * other.group0()[2])
                    + (self.group0()[2] * other.group0()[1])
                    - (self.group1()[3] * other.group0()[0])),
                (-(other.group1()[0] * self.group1()[1]) + (other.group1()[1] * self.group0()[1]) + (self.group0()[0] * other.group0()[2])
                    - (self.group0()[2] * other.group0()[0])
                    - (self.group1()[3] * other.group0()[1])),
                (-(other.group1()[0] * self.group1()[2]) + (other.group1()[1] * self.group0()[2]) - (self.group0()[0] * other.group0()[1])
                    + (self.group0()[1] * other.group0()[0])
                    - (self.group1()[3] * other.group0()[2])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group1()[1]) * self.group1())
                - (Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other.group1()[0]]) * self.group0())),
        );
    }
}
impl GeometricAntiProduct<VersorSphere> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       36        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       20       40        0
    //  no simd       32       52        0
    fn geometric_anti_product(self, other: VersorSphere) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group1()[0] * self.group1()[0] * -1.0),
                (other.group1()[0] * self.group1()[1] * -1.0),
                (other.group1()[0] * self.group1()[2] * -1.0),
                (-(other.group1()[0] * self.group1()[3])
                    + (self.group1()[0] * other.group0()[0])
                    + (self.group1()[1] * other.group0()[1])
                    + (self.group1()[2] * other.group0()[2])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(self.group0()[3] * other.group0()[0]) - (self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                (-(self.group0()[3] * other.group0()[1]) + (self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[3] * other.group0()[2]) - (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                (other.group1()[1] * self.group0()[3]),
            ]) - (Simd32x4::from(other.group1()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) - (self.group1()[3] * other.group0()[0])),
                (-(self.group0()[2] * other.group0()[0]) - (self.group1()[3] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[1]) - (self.group1()[3] * other.group0()[2])),
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])),
            ]) - (Simd32x4::from(other.group1()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                + (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group1()[0] * self.group0()[0]) + (other.group1()[1] * self.group1()[0])),
                (-(other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group1()[1])),
                (-(other.group1()[0] * self.group0()[2]) + (other.group1()[1] * self.group1()[2])),
                (other.group1()[0] * self.group0()[3] * -1.0),
            ]),
        );
    }
}
impl InfixGeometricAntiProduct for Line {}
impl GeometricAntiProduct<AntiCircleRotor> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       50       66        0
    fn geometric_anti_product(self, other: AntiCircleRotor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (self.group0()[0] * other.group2()[3])
                    + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0]) - (self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group2()[3])
                    + (self.group0()[2] * other.group1()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])
                    + (self.group0()[2] * other.group2()[3])),
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group1()[0] * other.group2()[3])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[2] * other.group2()[0]) - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[1] * other.group2()[3])
                    + (self.group1()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) + (self.group1()[0] * other.group1()[1]) - (self.group1()[1] * other.group1()[0])
                    + (self.group1()[2] * other.group1()[3])
                    + (self.group1()[2] * other.group2()[3])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1]) + (self.group0()[0] * other.group1()[3])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group1()[0]) + (self.group0()[1] * other.group1()[3])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) + (self.group0()[2] * other.group1()[3])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDipoleInversion> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       50       66        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       56       72        0
    //  no simd       74       90        0
    fn geometric_anti_product(self, other: AntiDipoleInversion) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (self.group0()[0] * other.group2()[3])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) + (self.group0()[1] * other.group2()[3])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (self.group0()[2] * other.group2()[3])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])
                    + (self.group1()[0] * other.group2()[3])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0]) - (self.group0()[0] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group1()[1] * other.group2()[3])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])
                    + (self.group1()[2] * other.group2()[3])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group3()[0])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group3()[2])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) + (self.group1()[1] * other.group1()[2])),
                ((self.group0()[2] * other.group2()[0]) + (self.group1()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group1()[0] * other.group1()[1])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2]) + (self.group1()[2] * other.group3()[2])),
            ]) - (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group1()[3], other.group1()[2], other.group3()[1], other.group1()[0]]))
                - (Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group3()[2], other.group1()[3], other.group1()[0], other.group1()[1]]))
                - (Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[3], other.group1()[2]]))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group1()[1]]) * swizzle!(other.group3(), 1, 2, 0, 1))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (self.group0()[0] * other.group1()[3])
                    + (self.group0()[1] * other.group3()[2])
                    - (self.group0()[2] * other.group3()[1])
                    + (self.group1()[0] * other.group2()[3])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0]) - (self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group3()[0])
                    + (self.group1()[1] * other.group2()[3])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (self.group0()[0] * other.group3()[1])
                    - (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group1()[2] * other.group2()[3])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum321> for Line {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3       12        0
    fn geometric_anti_product(self, other: AntiDualNum321) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group1()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum4> for Line {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       15        0
    //    simd3        0        1        0
    // Totals...
    // yes simd        3       16        0
    //  no simd        3       18        0
    fn geometric_anti_product(self, other: AntiDualNum4) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other.group0()[0]) * self.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[2])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[1] * self.group1()[0]),
                (other.group0()[1] * self.group1()[1]),
                (other.group0()[1] * self.group1()[2]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group1()[0] * -1.0),
                (other.group0()[0] * self.group1()[1] * -1.0),
                (other.group0()[0] * self.group1()[2] * -1.0),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum5> for Line {
    type Output = AntiLine;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        3        0
    // no simd        3        9        0
    fn geometric_anti_product(self, other: AntiDualNum5) -> Self::Output {
        return AntiLine::from_groups(
            // e23, e31, e12
            (Simd32x3::from(other.group0()[1]) * self.group0()),
            // e15, e25, e35
            ((Simd32x3::from(other.group0()[0]) * self.group0()) + (Simd32x3::from(other.group0()[1]) * self.group1())),
        );
    }
}
impl GeometricAntiProduct<AntiFlatPoint> for Line {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       15        0
    fn geometric_anti_product(self, other: AntiFlatPoint) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) - (self.group1()[0] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0]) - (self.group1()[1] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) - (self.group1()[2] * other.group0()[3])),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiFlector> for Line {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       28        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       22       30        0
    //  no simd       28       36        0
    fn geometric_anti_product(self, other: AntiFlector) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) - (self.group1()[0] * other.group0()[3])
                    + (self.group1()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group0()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group0()[0])
                    + (self.group1()[0] * other.group1()[2])
                    - (self.group1()[1] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group1()[3]) + (self.group1()[1] * other.group1()[0])
                    - (self.group1()[2] * other.group0()[3])),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[3])),
                (-(self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 2, 0, 1, 0))),
        );
    }
}
impl GeometricAntiProduct<AntiLine> for Line {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       19       27        0
    fn geometric_anti_product(self, other: AntiLine) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiMotor> for Line {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       24        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       19       27        0
    //  no simd       28       36        0
    fn geometric_anti_product(self, other: AntiMotor) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e3215
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) + (self.group1()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2])),
                ((self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group1()[0]) + (self.group1()[1] * other.group0()[3]) + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[2] * other.group1()[3]) + (self.group1()[0] * other.group0()[1]) + (self.group1()[2] * other.group0()[3])),
                (-(self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<AntiPlane> for Line {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       16        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        7       18        0
    //  no simd       13       24        0
    fn geometric_anti_product(self, other: AntiPlane) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[2] * other.group0()[1])),
                ((self.group0()[1] * other.group0()[3]) + (self.group1()[0] * other.group0()[2])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[1] * other.group0()[0])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                ((self.group0()[2] * other.group0()[1]) * -1.0),
                ((self.group0()[0] * other.group0()[2]) * -1.0),
                ((self.group0()[1] * other.group0()[0]) * -1.0),
                ((self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
        );
    }
}
impl GeometricAntiProduct<AntiQuadNum> for Line {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       21        0
    //    simd3        0        1        0
    // Totals...
    // yes simd       12       22        0
    //  no simd       12       24        0
    fn geometric_anti_product(self, other: AntiQuadNum) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other.group0()[0]) * self.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[0] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group1()[1] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[2] * other.group0()[0])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[1]) + (self.group1()[0] * other.group0()[2]) + (self.group1()[0] * other.group0()[3])),
                ((self.group0()[1] * other.group0()[1]) + (self.group1()[1] * other.group0()[2]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[2] * other.group0()[1]) + (self.group1()[2] * other.group0()[2]) + (self.group1()[2] * other.group0()[3])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[2]) - (self.group1()[0] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[2]) - (self.group1()[1] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiScalar> for Line {
    type Output = Line;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn geometric_anti_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return Line::from_groups(
            // e415, e425, e435
            (Simd32x3::from(other[e12345]) * self.group0()),
            // e235, e315, e125
            (Simd32x3::from(other[e12345]) * self.group1()),
        );
    }
}
impl GeometricAntiProduct<AntiTripleNum> for Line {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       18        0
    //    simd3        0        1        0
    // Totals...
    // yes simd        6       19        0
    //  no simd        6       21        0
    fn geometric_anti_product(self, other: AntiTripleNum) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other.group0()[0]) * self.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group0()[2])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group1()[0])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group1()[1])),
                ((other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group1()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group1()[0] * -1.0),
                (other.group0()[0] * self.group1()[1] * -1.0),
                (other.group0()[0] * self.group1()[2] * -1.0),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<Circle> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       52        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       38       54        0
    //  no simd       44       60        0
    fn geometric_anti_product(self, other: Circle) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0]) - (self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])),
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(other.group2()[1] * self.group0()[2]) + (other.group2()[2] * self.group0()[1]) + (self.group1()[1] * other.group1()[2])),
                ((other.group2()[0] * self.group0()[2]) - (other.group2()[2] * self.group0()[0]) + (self.group1()[2] * other.group1()[0])),
                (-(other.group2()[0] * self.group0()[1]) + (other.group2()[1] * self.group0()[0]) + (self.group1()[0] * other.group1()[1])),
                (-(other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    - (self.group1()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group1()[0], self.group1()[0], self.group1()[1], self.group1()[0]]) * swizzle!(other.group1(), 3, 2, 0, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[1], self.group1()[2], self.group1()[1]]) * swizzle!(other.group1(), 1, 3, 3, 1))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) + (self.group0()[0] * other.group1()[3])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0]) + (self.group0()[1] * other.group1()[3])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (self.group0()[2] * other.group1()[3])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<CircleRotor> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       38       54        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       41       57        0
    //  no simd       50       66        0
    fn geometric_anti_product(self, other: CircleRotor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (self.group0()[0] * other.group2()[3])
                    + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0]) - (self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group2()[3])
                    + (self.group0()[2] * other.group1()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])
                    + (self.group0()[2] * other.group2()[3])),
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) + (self.group1()[0] * other.group2()[3]) + (self.group1()[1] * other.group1()[2])),
                ((self.group0()[2] * other.group2()[0]) + (self.group1()[1] * other.group2()[3]) + (self.group1()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group1()[0] * other.group1()[1]) + (self.group1()[2] * other.group2()[3])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2]) - (self.group1()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[0], self.group1()[0], self.group1()[1], self.group1()[0]]) * swizzle!(other.group1(), 3, 2, 0, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[1], self.group1()[2], self.group1()[1]]) * swizzle!(other.group1(), 1, 3, 3, 1))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) + (self.group0()[0] * other.group1()[3])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0]) + (self.group0()[1] * other.group1()[3])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (self.group0()[2] * other.group1()[3])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Dipole> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       44       60        0
    fn geometric_anti_product(self, other: Dipole) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0]) - (self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])),
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group2()[1] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[1])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])),
                ((other.group2()[0] * self.group0()[2]) - (other.group2()[2] * self.group0()[0]) - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group1()[0])),
                (-(other.group2()[0] * self.group0()[1]) + (other.group2()[1] * self.group0()[0]) + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[0])
                    + (self.group1()[2] * other.group1()[3])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1]) + (self.group0()[0] * other.group1()[3])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group1()[0]) + (self.group0()[1] * other.group1()[3])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) + (self.group0()[2] * other.group1()[3])),
                (-(other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<DipoleInversion> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       66       82        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       68       84        0
    //  no simd       74       90        0
    fn geometric_anti_product(self, other: DipoleInversion) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (self.group0()[0] * other.group2()[3])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) + (self.group0()[1] * other.group2()[3])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (self.group0()[2] * other.group2()[3])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])
                    + (self.group1()[0] * other.group2()[3])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0]) - (self.group0()[0] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group1()[1] * other.group2()[3])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])
                    + (self.group1()[2] * other.group2()[3])),
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group3()[0])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group3()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group1()[2])
                    + (self.group1()[1] * other.group3()[2])
                    - (self.group1()[2] * other.group1()[1])
                    - (self.group1()[2] * other.group3()[1])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group3()[3]) + (self.group0()[2] * other.group2()[0])
                    - (self.group1()[0] * other.group1()[2])
                    - (self.group1()[0] * other.group3()[2])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group1()[0])
                    + (self.group1()[2] * other.group3()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0])
                    + (self.group0()[2] * other.group3()[3])
                    + (self.group1()[0] * other.group1()[1])
                    + (self.group1()[0] * other.group3()[1])
                    - (self.group1()[1] * other.group1()[0])
                    - (self.group1()[1] * other.group3()[0])
                    + (self.group1()[2] * other.group1()[3])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1]) + (self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group3()[2])),
                (-(other.group0()[0] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[0])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group3()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) + (self.group0()[0] * other.group3()[1]) + (self.group0()[2] * other.group1()[3])),
                (-(self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[1] * other.group3()[1])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[2] * other.group3()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[0]]) * swizzle!(other.group2(), 3, 3, 3, 0))),
        );
    }
}
impl GeometricAntiProduct<DualNum321> for Line {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3       12        0
    fn geometric_anti_product(self, other: DualNum321) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[1])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group1()[2])),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<DualNum4> for Line {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       12        0
    //    simd3        0        1        0
    // Totals...
    // yes simd        3       13        0
    //  no simd        3       15        0
    fn geometric_anti_product(self, other: DualNum4) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other.group0()[0]) * self.group0()),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[2])),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (other.group0()[1] * self.group1()[0]),
                (other.group0()[1] * self.group1()[1]),
                (other.group0()[1] * self.group1()[2]),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[0] * self.group1()[0]),
                (other.group0()[0] * self.group1()[1]),
                (other.group0()[0] * self.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<DualNum5> for Line {
    type Output = Line;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        1        3        0
    // no simd        3        9        0
    fn geometric_anti_product(self, other: DualNum5) -> Self::Output {
        return Line::from_groups(
            // e415, e425, e435
            (Simd32x3::from(other.group0()[1]) * self.group0()),
            // e235, e315, e125
            ((Simd32x3::from(other.group0()[0]) * self.group0()) + (Simd32x3::from(other.group0()[1]) * self.group1())),
        );
    }
}
impl GeometricAntiProduct<FlatPoint> for Line {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       15        0
    fn geometric_anti_product(self, other: FlatPoint) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (self.group1()[0] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[3])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Flector> for Line {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       28        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       22       30        0
    //  no simd       28       36        0
    fn geometric_anti_product(self, other: Flector) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])
                    + (self.group1()[0] * other.group0()[3])
                    + (self.group1()[1] * other.group1()[2])),
                (-(self.group0()[0] * other.group0()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group0()[0])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group1()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group1()[0] * other.group1()[1])
                    + (self.group1()[2] * other.group0()[3])),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[2])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<Line> for Line {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       19       27        0
    fn geometric_anti_product(self, other: Line) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Motor> for Line {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       24        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       19       27        0
    //  no simd       28       36        0
    fn geometric_anti_product(self, other: Motor) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) + (self.group1()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2])),
                ((self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group1()[0]) + (self.group1()[1] * other.group0()[3]) + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[2] * other.group1()[3]) + (self.group1()[0] * other.group0()[1]) + (self.group1()[2] * other.group0()[3])),
                (-(self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<MultiVector> for Line {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       91      109        0
    //    simd2        5        6        0
    //    simd3       17       21        0
    //    simd4        2        2        0
    // Totals...
    // yes simd      115      138        0
    //  no simd      160      192        0
    fn geometric_anti_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (-(Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group5()[0], other.group6()[0]]))
                - (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group5()[1], other.group6()[1]]))
                - (Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group5()[2], other.group6()[2]]))
                - (Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group4()[0], other.group7()[0]]))
                - (Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group4()[1], other.group7()[1]]))
                - (Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group4()[2], other.group7()[2]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group6()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group7()[2])
                    - (self.group1()[2] * other.group7()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group6()[3]) + (self.group0()[2] * other.group1()[0])
                    - (self.group1()[0] * other.group7()[2])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group7()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group6()[3]) + (self.group1()[0] * other.group7()[1])
                    - (self.group1()[1] * other.group7()[0])
                    + (self.group1()[2] * other.group1()[3])),
                (-(self.group0()[0] * other.group7()[0]) - (self.group0()[1] * other.group7()[1]) - (self.group0()[2] * other.group7()[2])),
            ]),
            // e5
            (-(self.group0()[0] * other.group8()[0]) - (self.group0()[1] * other.group8()[1]) - (self.group0()[2] * other.group8()[2]) + (self.group1()[0] * other.group1()[0])
                - (self.group1()[0] * other.group6()[0])
                + (self.group1()[1] * other.group1()[1])
                - (self.group1()[1] * other.group6()[1])
                + (self.group1()[2] * other.group1()[2])
                - (self.group1()[2] * other.group6()[2])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (self.group0()[0] * other.group9()[3]) + (self.group0()[1] * other.group3()[2]) - (self.group0()[2] * other.group3()[1])
                    + (self.group1()[0] * other.group3()[3])
                    + (self.group1()[1] * other.group5()[2])
                    + (self.group1()[1] * other.group9()[2])
                    - (self.group1()[2] * other.group5()[1])),
                ((other.group0()[0] * self.group1()[1]) - (self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group9()[3]) + (self.group0()[2] * other.group3()[0])
                    - (self.group1()[0] * other.group5()[2])
                    + (self.group1()[1] * other.group3()[3])
                    + (self.group1()[2] * other.group5()[0])
                    + (self.group1()[2] * other.group9()[0])),
                ((other.group0()[0] * self.group1()[2]) + (self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group9()[3])
                    + (self.group1()[0] * other.group5()[1])
                    + (self.group1()[0] * other.group9()[1])
                    - (self.group1()[1] * other.group5()[0])
                    + (self.group1()[2] * other.group3()[3])),
                (-(self.group0()[1] * other.group9()[1]) - (self.group0()[2] * other.group9()[2])
                    + (self.group1()[0] * other.group4()[0])
                    + (self.group1()[1] * other.group4()[1])
                    + (self.group1()[2] * other.group4()[2])),
            ]) - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group9(), 1, 2, 0, 0))),
            // e41, e42, e43
            ((Simd32x3::from([other.group4()[2], other.group4()[0], other[e45]]) * swizzle!(self.group0(), 1, 2, 2))
                + (Simd32x3::from([other[e45], other[e45], other.group4()[1]]) * swizzle!(self.group0(), 0, 1, 0))
                - (swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group4(), 1, 2, 0))),
            // e23, e31, e12
            ((Simd32x3::from(other.group0()[0]) * self.group0())
                + (Simd32x3::from([other.group4()[2], other.group4()[0], other[e45]]) * swizzle!(self.group1(), 1, 2, 2))
                + (Simd32x3::from([other[e45], other[e45], other.group4()[1]]) * swizzle!(self.group1(), 0, 1, 0))
                + (swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group5(), 2, 0, 1))
                - (swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group5(), 1, 2, 0))
                - (swizzle!(self.group1(), 2, 0, 1) * swizzle!(other.group4(), 1, 2, 0))),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[0]) + (self.group0()[1] * other.group6()[2]) - (self.group0()[2] * other.group6()[1])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group7()[2])
                    - (self.group1()[2] * other.group7()[1])),
                ((other.group0()[1] * self.group0()[1]) - (self.group0()[0] * other.group6()[2]) + (self.group0()[2] * other.group6()[0]) - (self.group1()[0] * other.group7()[2])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group7()[0])),
                ((other.group0()[1] * self.group0()[2]) + (self.group0()[0] * other.group6()[1]) - (self.group0()[1] * other.group6()[0]) + (self.group1()[0] * other.group7()[1])
                    - (self.group1()[1] * other.group7()[0])
                    + (self.group1()[2] * other.group1()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[0] * other.group7()[0])
                    - (self.group1()[1] * other.group7()[1])
                    - (self.group1()[2] * other.group7()[2])),
            ]),
            // e423, e431, e412
            ((Simd32x3::from([other.group7()[2], other.group7()[0], other.group1()[3]]) * swizzle!(self.group0(), 1, 2, 2))
                + (Simd32x3::from([other.group1()[3], other.group1()[3], other.group7()[1]]) * swizzle!(self.group0(), 0, 1, 0))
                - (swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group7(), 1, 2, 0))),
            // e235, e315, e125
            ((Simd32x3::from(other.group0()[1]) * self.group1())
                - (Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group6()[3], other.group6()[2], other.group1()[1]]))
                - (Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group1()[2], other.group6()[3], other.group6()[0]]))
                - (Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group6()[1], other.group1()[0], other.group6()[3]]))
                + (Simd32x3::from([other.group8()[2], other.group8()[0], other[e1]]) * swizzle!(self.group0(), 1, 2, 2))
                + (Simd32x3::from([other.group1()[1], other.group6()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 2, 1))
                + (Simd32x3::from([other.group6()[2], other.group1()[2], other.group6()[1]]) * swizzle!(self.group1(), 1, 0, 0))
                + (Simd32x3::from([other[e1], other[e1], other.group8()[1]]) * swizzle!(self.group0(), 0, 1, 0))
                - (swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group8(), 1, 2, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group9()[2]) - (self.group1()[0] * other[e45]) - (self.group1()[1] * other.group4()[2])
                    + (self.group1()[2] * other.group4()[1])),
                ((self.group0()[1] * other.group3()[3]) + (self.group0()[2] * other.group9()[0]) + (self.group1()[0] * other.group4()[2])
                    - (self.group1()[1] * other[e45])
                    - (self.group1()[2] * other.group4()[0])),
                ((self.group0()[0] * other.group9()[1]) + (self.group0()[2] * other.group3()[3]) - (self.group1()[0] * other.group4()[1]) + (self.group1()[1] * other.group4()[0])
                    - (self.group1()[2] * other[e45])),
                (-(self.group0()[0] * other.group3()[0])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group3()[2])
                    - (self.group1()[0] * other.group5()[0])
                    - (self.group1()[1] * other.group5()[1])
                    - (self.group1()[1] * other.group9()[1])
                    - (self.group1()[2] * other.group5()[2])
                    - (self.group1()[2] * other.group9()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group9(), 1, 2, 0, 0))),
            // e1234
            (-(self.group0()[0] * other.group4()[0]) - (self.group0()[1] * other.group4()[1]) - (self.group0()[2] * other.group4()[2])),
        );
    }
}
impl GeometricAntiProduct<Plane> for Line {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       13        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        7       15        0
    //  no simd       13       21        0
    fn geometric_anti_product(self, other: Plane) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2])),
                ((self.group0()[1] * other.group0()[3]) + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[2] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (-(self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<QuadNum> for Line {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       21        0
    //    simd3        0        1        0
    // Totals...
    // yes simd       12       22        0
    //  no simd       12       24        0
    fn geometric_anti_product(self, other: QuadNum) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other.group0()[0]) * self.group0()),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[0] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group1()[1] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[2] * other.group0()[0])),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[1]) - (self.group1()[0] * other.group0()[2]) + (self.group1()[0] * other.group0()[3])),
                ((self.group0()[1] * other.group0()[1]) - (self.group1()[1] * other.group0()[2]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[2] * other.group0()[1]) - (self.group1()[2] * other.group0()[2]) + (self.group1()[2] * other.group0()[3])),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[2]) + (self.group1()[0] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[2]) + (self.group1()[1] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[2]) + (self.group1()[2] * other.group0()[0])),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<RoundPoint> for Line {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       15        0
    //    simd3        0        1        0
    //    simd4        2        4        0
    // Totals...
    // yes simd       10       20        0
    //  no simd       16       34        0
    fn geometric_anti_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other.group0()[3]) * self.group0()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                ((self.group0()[0] * other[e2]) - (self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group0()[1] * other[e2]) + (self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                ((self.group0()[2] * other[e2]) - (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                0.0,
            ]),
            // e1, e2, e3, e5
            ((Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]])
                * swizzle!(other.group0(), 1, 2, 0, 2)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group1()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))),
        );
    }
}
impl GeometricAntiProduct<Scalar> for Line {
    type Output = AntiLine;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn geometric_anti_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiLine::from_groups(
            // e23, e31, e12
            (Simd32x3::from(other[scalar]) * self.group0()),
            // e15, e25, e35
            (Simd32x3::from(other[scalar]) * self.group1()),
        );
    }
}
impl GeometricAntiProduct<Sphere> for Line {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       23        0
    //    simd3        0        1        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       13       25        0
    //  no simd       16       30        0
    fn geometric_anti_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other[e4315]) * self.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group1()[0] * other[e4315]),
                (self.group1()[1] * other[e4315]),
                (self.group1()[2] * other[e4315]),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])),
                ((self.group0()[1] * other.group0()[3]) - (self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group1()[0] * other[e4315])),
                ((self.group0()[2] * other.group0()[0]) - (self.group1()[1] * other[e4315])),
                ((self.group0()[0] * other.group0()[1]) - (self.group1()[2] * other[e4315])),
                (-(self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<TripleNum> for Line {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       15        0
    //    simd3        0        1        0
    // Totals...
    // yes simd        6       16        0
    //  no simd        6       18        0
    fn geometric_anti_product(self, other: TripleNum) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other.group0()[0]) * self.group0()),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[2]) + (self.group1()[0] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[2]) + (self.group1()[1] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[2]) + (self.group1()[2] * other.group0()[0])),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[1]) + (self.group1()[0] * other.group0()[2])),
                ((self.group0()[1] * other.group0()[1]) + (self.group1()[1] * other.group0()[2])),
                ((self.group0()[2] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group1()[0] * other.group0()[0]),
                (self.group1()[1] * other.group0()[0]),
                (self.group1()[2] * other.group0()[0]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorEven> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       56        0
    //    simd4       10       10        0
    // Totals...
    // yes simd       50       66        0
    //  no simd       80       96        0
    fn geometric_anti_product(self, other: VersorEven) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group0()[2])),
                ((self.group0()[1] * other.group3()[3]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[2] * other.group3()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])
                    + (self.group1()[0] * other.group3()[3])
                    + (self.group1()[1] * other.group0()[2])),
                (-(self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group0()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group1()[1] * other.group3()[3])
                    + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])
                    + (self.group0()[2] * other.group0()[3])
                    + (self.group1()[0] * other.group0()[1])
                    + (self.group1()[2] * other.group3()[3])),
                (-(self.group0()[0] * other.group3()[0])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group3()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group2()[2])),
                ((self.group0()[1] * other.group2()[3]) + (self.group0()[2] * other.group2()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[2] * other.group2()[3])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])),
            ]) + (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[3], other.group3()[2], other.group1()[1], other.group3()[0]]))
                - (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group1()[3], other.group1()[2], other.group3()[1], other.group1()[0]]))
                + (Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group1()[2], other.group0()[3], other.group3()[0], other.group3()[1]]))
                - (Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group3()[2], other.group1()[3], other.group1()[0], other.group1()[1]]))
                - (Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[3], other.group1()[2]]))
                + (Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group0()[3], other.group3()[2]]))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group3()[2]) - (self.group0()[2] * other.group3()[1])
                    + (self.group1()[0] * other.group3()[3])
                    + (self.group1()[1] * other.group0()[2])),
                (-(self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group3()[0])
                    + (self.group1()[1] * other.group3()[3])
                    + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group1()[0] * other.group0()[1])
                    + (self.group1()[2] * other.group3()[3])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<VersorOdd> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       60       76        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       65       81        0
    //  no simd       80       96        0
    fn geometric_anti_product(self, other: VersorOdd) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group0()[2])),
                ((self.group0()[1] * other.group2()[3]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[2] * other.group2()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) + (self.group1()[0] * other.group2()[3]) - (self.group1()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0]) - (self.group1()[0] * other.group0()[2])
                    + (self.group1()[1] * other.group2()[3])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) - (self.group1()[1] * other.group0()[0]) + (self.group1()[2] * other.group2()[3])),
                (-(self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group3()[1]) - (self.group0()[2] * other.group3()[2])
                    + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group1()[1]]) * swizzle!(other.group0(), 2, 0, 1, 1))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])
                    + (self.group1()[0] * other.group0()[3])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group1()[2])
                    + (self.group1()[1] * other.group3()[2])
                    - (self.group1()[2] * other.group1()[1])
                    - (self.group1()[2] * other.group3()[1])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group3()[3]) + (self.group0()[2] * other.group2()[0])
                    - (self.group1()[0] * other.group1()[2])
                    - (self.group1()[0] * other.group3()[2])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group1()[0])
                    + (self.group1()[2] * other.group3()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0])
                    + (self.group0()[2] * other.group3()[3])
                    + (self.group1()[0] * other.group1()[1])
                    + (self.group1()[0] * other.group3()[1])
                    - (self.group1()[1] * other.group1()[0])
                    - (self.group1()[1] * other.group3()[0])
                    + (self.group1()[2] * other.group0()[3])
                    + (self.group1()[2] * other.group1()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group3()[2]) - (self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group3()[0]) + (self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group3()[1]) + (self.group0()[2] * other.group1()[3]) - (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                (-(self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[1] * other.group3()[1])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[2] * other.group3()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[0]]) * swizzle!(other.group2(), 3, 3, 3, 0))),
        );
    }
}
impl GeometricAntiProduct<VersorRoundPoint> for Line {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       21        0
    //    simd3        0        1        0
    //    simd4        2        4        0
    // Totals...
    // yes simd       16       26        0
    //  no simd       22       40        0
    fn geometric_anti_product(self, other: VersorRoundPoint) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other.group0()[3]) * self.group0()),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group1()[1] * self.group0()[0]) + (self.group1()[0] * other.group0()[3])),
                ((other.group1()[1] * self.group0()[1]) + (self.group1()[1] * other.group0()[3])),
                ((other.group1()[1] * self.group0()[2]) + (self.group1()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                ((other.group1()[0] * self.group0()[0]) + (other.group1()[1] * self.group1()[0]) - (self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group1()[1]) + (self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                ((other.group1()[0] * self.group0()[2]) + (other.group1()[1] * self.group1()[2]) - (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                0.0,
            ]),
            // e1, e2, e3, e5
            ((Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]])
                * swizzle!(other.group0(), 1, 2, 0, 2)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group1()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))),
        );
    }
}
impl GeometricAntiProduct<VersorSphere> for Line {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       29        0
    //    simd3        0        1        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       19       31        0
    //  no simd       22       36        0
    fn geometric_anti_product(self, other: VersorSphere) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other.group1()[0]) * self.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group1()[0] * self.group1()[0]) + (other.group1()[1] * self.group0()[0])),
                ((other.group1()[0] * self.group1()[1]) + (other.group1()[1] * self.group0()[1])),
                ((other.group1()[0] * self.group1()[2]) + (other.group1()[1] * self.group0()[2])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group1()[1] * self.group1()[0]) + (self.group0()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])),
                ((other.group1()[1] * self.group1()[1]) + (self.group0()[1] * other.group0()[3]) - (self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0])),
                ((other.group1()[1] * self.group1()[2]) + (self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group1()[0] * self.group1()[0]) + (self.group0()[1] * other.group0()[2])),
                (-(other.group1()[0] * self.group1()[1]) + (self.group0()[2] * other.group0()[0])),
                (-(other.group1()[0] * self.group1()[2]) + (self.group0()[0] * other.group0()[1])),
                (-(self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
    }
}
impl InfixGeometricAntiProduct for Motor {}
impl GeometricAntiProduct<AntiCircleRotor> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       52        0
    //    simd4        9        9        0
    // Totals...
    // yes simd       45       61        0
    //  no simd       72       88        0
    fn geometric_anti_product(self, other: AntiCircleRotor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (other.group0()[2] * self.group0()[1]),
                (other.group0()[1] * self.group0()[3]),
                (other.group0()[2] * self.group0()[3]),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group0(), 3, 2, 0, 3))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])
                    + (other.group2()[3] * self.group0()[0])),
                (-(other.group0()[2] * self.group1()[0]) + (other.group1()[1] * self.group0()[3]) - (other.group1()[2] * self.group0()[0])
                    + (other.group2()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[1]) - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[2] * self.group0()[3])
                    + (other.group2()[3] * self.group0()[2])),
                (other.group0()[2] * self.group1()[2]),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group1(), 3, 2, 0, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[1], other.group0()[2], other.group0()[1]]) * swizzle!(self.group1(), 1, 3, 3, 1))
                + (swizzle!(other.group1(), 0, 0, 1, 3) * swizzle!(self.group0(), 3, 2, 0, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group1()[0] * self.group1()[3]) - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group1()[3] * self.group1()[0])
                    + (other.group2()[0] * self.group0()[3])
                    + (other.group2()[2] * self.group0()[1])
                    + (other.group2()[3] * self.group1()[0])),
                ((other.group1()[0] * self.group1()[2]) + (other.group1()[1] * self.group1()[3]) - (other.group1()[2] * self.group1()[0])
                    + (other.group1()[3] * self.group1()[1])
                    + (other.group2()[0] * self.group0()[2])
                    + (other.group2()[1] * self.group0()[3])
                    + (other.group2()[3] * self.group1()[1])),
                (-(other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])
                    + (other.group2()[1] * self.group0()[0])
                    + (other.group2()[2] * self.group0()[3])
                    + (other.group2()[3] * self.group1()[2])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (other.group1()[3] * self.group0()[0]),
                (other.group1()[3] * self.group0()[1]),
                (other.group1()[3] * self.group0()[2]),
                (-(other.group1()[2] * self.group1()[2])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    + (other.group2()[3] * self.group1()[3])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 3, 2, 0, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group1(), 1, 3, 3, 1))),
        );
    }
}
impl GeometricAntiProduct<AntiDipoleInversion> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       52        0
    //    simd4       17       17        0
    // Totals...
    // yes simd       53       69        0
    //  no simd      104      120        0
    fn geometric_anti_product(self, other: AntiDipoleInversion) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[3])),
                ((other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[2] * self.group1()[1]) + (other.group1()[2] * self.group0()[1]) + (other.group2()[3] * self.group1()[0])),
                ((other.group0()[1] * self.group1()[3]) + (other.group1()[1] * self.group0()[3]) + (other.group2()[3] * self.group1()[1])),
                ((other.group0()[2] * self.group1()[3]) + (other.group1()[2] * self.group0()[3]) + (other.group2()[3] * self.group1()[2])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group3()[1] * self.group0()[1])
                    - (other.group3()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group1(), 3, 2, 0, 3))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (swizzle!(other.group1(), 0, 0, 1, 3) * swizzle!(self.group0(), 3, 2, 0, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group2()[2] * self.group0()[1]) + (other.group3()[3] * self.group0()[0])),
                ((other.group2()[1] * self.group0()[3]) + (other.group3()[3] * self.group0()[1])),
                ((other.group2()[2] * self.group0()[3]) + (other.group3()[3] * self.group0()[2])),
                (-(other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[0], other.group1()[1], other.group3()[0]]) * swizzle!(self.group1(), 3, 2, 0, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[1], other.group1()[2], other.group3()[1]]) * swizzle!(self.group1(), 1, 3, 3, 1))
                + (Simd32x4::from([other.group2()[0], other.group2()[0], other.group2()[1], other.group3()[3]]) * swizzle!(self.group0(), 3, 2, 0, 3))
                - (Simd32x4::from([other.group3()[0], other.group3()[0], other.group3()[1], other.group1()[2]]) * swizzle!(self.group1(), 3, 2, 0, 2))
                - (Simd32x4::from([other.group3()[2], other.group3()[1], other.group3()[2], other.group1()[3]]) * swizzle!(self.group1(), 1, 3, 3, 3))
                - (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group1(), 0, 1, 2, 1))
                - (swizzle!(other.group2(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (swizzle!(other.group3(), 1, 2, 0, 2) * swizzle!(self.group1(), 2, 0, 1, 2))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (other.group2()[3] * self.group1()[0])
                    + (other.group3()[0] * self.group0()[3])
                    + (other.group3()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group1()[0])
                    + (other.group2()[3] * self.group1()[1])
                    + (other.group3()[0] * self.group0()[2])
                    + (other.group3()[1] * self.group0()[3])),
                (-(other.group0()[0] * self.group1()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (other.group2()[3] * self.group1()[2])
                    + (other.group3()[1] * self.group0()[0])
                    + (other.group3()[2] * self.group0()[3])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[3]]) * self.group0())
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum321> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       12        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        4       13        0
    //  no simd        4       16        0
    fn geometric_anti_product(self, other: AntiDualNum321) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[1] * self.group0()[3])]),
            // e23, e31, e12, e45
            (Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group0()[0]]) * self.group0()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group1()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum4> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       17        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        4       19        0
    //  no simd        4       25        0
    fn geometric_anti_product(self, other: AntiDualNum4) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[2])),
                (other.group0()[0] * self.group1()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[1] * self.group1()[0]),
                (other.group0()[1] * self.group1()[1]),
                (other.group0()[1] * self.group1()[2]),
                (other.group0()[0] * self.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]]) * self.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum5> for Motor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        1        3        0
    // no simd        4       12        0
    fn geometric_anti_product(self, other: AntiDualNum5) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from(other.group0()[1]) * self.group0()),
            // e15, e25, e35, e3215
            ((Simd32x4::from(other.group0()[0]) * self.group0()) + (Simd32x4::from(other.group0()[1]) * self.group1())),
        );
    }
}
impl GeometricAntiProduct<AntiFlatPoint> for Motor {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       12       20        0
    fn geometric_anti_product(self, other: AntiFlatPoint) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) - (other.group0()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[3]) - (other.group0()[2] * self.group0()[0]) - (other.group0()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group0()[3])
                    - (other.group0()[3] * self.group1()[2])),
                (other.group0()[3] * self.group0()[3]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[3] * self.group0()[0]),
                (other.group0()[3] * self.group0()[1]),
                (other.group0()[3] * self.group0()[2]),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group0()[3] * self.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiFlector> for Motor {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       16        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       20       24        0
    //  no simd       44       48        0
    fn geometric_anti_product(self, other: AntiFlector) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) - (other.group0()[3] * self.group1()[0]) + (other.group1()[1] * self.group1()[2]) + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[3]) - (other.group0()[3] * self.group1()[1]) + (other.group1()[2] * self.group1()[0]) + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group0()[3]) - (other.group0()[3] * self.group1()[2]) + (other.group1()[0] * self.group1()[1]) + (other.group1()[3] * self.group0()[2])),
                0.0,
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group1()[1], self.group1()[3], self.group1()[3], self.group0()[2]]) * swizzle!(other.group1(), 2, 1, 2, 2))
                - (Simd32x4::from([self.group1()[3], self.group1()[2], self.group1()[0], self.group0()[1]]) * swizzle!(other.group1(), 0, 0, 1, 1))
                + (swizzle!(other.group0(), 0, 0, 1, 3) * swizzle!(self.group0(), 3, 2, 0, 3))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self.group1()[3])
                    + (other.group1()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other.group1()[3]]) * self.group0())
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[1], self.group0()[3], self.group0()[3], self.group1()[1]]) * swizzle!(other.group1(), 2, 1, 2, 1))
                + (Simd32x4::from([self.group0()[3], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group1(), 0, 0, 1, 0))),
        );
    }
}
impl GeometricAntiProduct<AntiLine> for Motor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       24        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       19       27        0
    //  no simd       28       36        0
    fn geometric_anti_product(self, other: AntiLine) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[3])),
                ((other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e15, e25, e35, e3215
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[2] * self.group1()[1]) + (other.group1()[0] * self.group0()[3]) + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group1()[3]) + (other.group1()[0] * self.group0()[2]) + (other.group1()[1] * self.group0()[3])),
                ((other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group1()[3]) + (other.group1()[1] * self.group0()[0]) + (other.group1()[2] * self.group0()[3])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
        );
    }
}
impl GeometricAntiProduct<AntiMotor> for Motor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       24        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       22       30        0
    //  no simd       40       48        0
    fn geometric_anti_product(self, other: AntiMotor) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) + (other.group0()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[3]) + (other.group0()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group0()[3]) + (other.group0()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) + (swizzle!(other.group0(), 0, 0, 1, 3) * swizzle!(self.group0(), 3, 2, 0, 3))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e15, e25, e35, e3215
            (Simd32x4::from([
                ((other.group0()[2] * self.group1()[1]) + (other.group0()[3] * self.group1()[0]) + (other.group1()[2] * self.group0()[1]) + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group1()[3]) + (other.group0()[3] * self.group1()[1]) + (other.group1()[1] * self.group0()[3]) + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group1()[3]) + (other.group0()[3] * self.group1()[2]) + (other.group1()[2] * self.group0()[3]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) + (swizzle!(other.group0(), 0, 0, 1, 3) * swizzle!(self.group1(), 3, 2, 0, 3))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (swizzle!(other.group1(), 0, 0, 1, 3) * swizzle!(self.group0(), 3, 2, 0, 3))
                - (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
        );
    }
}
impl GeometricAntiProduct<AntiPlane> for Motor {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       16        0
    //    simd4        4        4        0
    // Totals...
    // yes simd        8       20        0
    //  no simd       20       32        0
    fn geometric_anti_product(self, other: AntiPlane) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) + (other.group0()[3] * self.group0()[0])),
                ((other.group0()[2] * self.group1()[0]) + (other.group0()[3] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[3] * self.group0()[2])),
                ((other.group0()[2] * self.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group1()[1], self.group1()[3], self.group1()[3], self.group0()[1]]) * swizzle!(other.group0(), 2, 1, 2, 1))
                - (Simd32x4::from([self.group1()[3], self.group1()[2], self.group1()[0], self.group0()[0]]) * swizzle!(other.group0(), 0, 0, 1, 0))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) * -1.0),
                ((other.group0()[2] * self.group0()[0]) * -1.0),
                ((other.group0()[0] * self.group0()[1]) * -1.0),
                ((other.group0()[2] * self.group1()[2]) + (other.group0()[3] * self.group0()[3])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[3], self.group0()[3], self.group1()[1]]) * swizzle!(other.group0(), 2, 1, 2, 1))
                + (Simd32x4::from([self.group0()[3], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 0, 0, 1, 0))),
        );
    }
}
impl GeometricAntiProduct<AntiQuadNum> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       23        0
    //    simd4        2        4        0
    // Totals...
    // yes simd       10       27        0
    //  no simd       16       39        0
    fn geometric_anti_product(self, other: AntiQuadNum) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[3] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            ((Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])
                * swizzle!(other.group0(), 3, 3, 3, 0)
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]) * swizzle!(other.group0(), 0, 0, 0, 2))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group1()[0]) + (other.group0()[3] * self.group1()[0])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group1()[1]) + (other.group0()[3] * self.group1()[1])),
                ((other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group1()[2]) + (other.group0()[3] * self.group1()[2])),
                (other.group0()[0] * self.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) * -1.0),
                ((other.group0()[0] * self.group1()[1]) * -1.0),
                ((other.group0()[0] * self.group1()[2]) * -1.0),
                ((other.group0()[2] * self.group1()[3]) + (other.group0()[3] * self.group1()[3])),
            ]) + (swizzle!(other.group0(), 2, 2, 2, 1) * self.group0())),
        );
    }
}
impl GeometricAntiProduct<AntiScalar> for Motor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn geometric_anti_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(other[e12345]) * self.group0()),
            // e235, e315, e125, e5
            (Simd32x4::from(other[e12345]) * self.group1()),
        );
    }
}
impl GeometricAntiProduct<AntiTripleNum> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       28        0
    fn geometric_anti_product(self, other: AntiTripleNum) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[2] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group0()[2])),
                (other.group0()[0] * self.group1()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group1()[0])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group1()[1])),
                ((other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group1()[2])),
                (other.group0()[0] * self.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group1()[0] * -1.0),
                (other.group0()[0] * self.group1()[1] * -1.0),
                (other.group0()[0] * self.group1()[2] * -1.0),
                ((other.group0()[1] * self.group0()[3]) + (other.group0()[2] * self.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Circle> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       56        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       46       62        0
    //  no simd       64       80        0
    fn geometric_anti_product(self, other: Circle) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[3])),
                ((other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[2] * self.group1()[1]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group1()[3]) + (other.group1()[1] * self.group0()[3]) - (other.group1()[2] * self.group0()[0])),
                ((other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group1()[3]) - (other.group1()[0] * self.group0()[1]) + (other.group1()[2] * self.group0()[3])),
                (-(other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (swizzle!(other.group1(), 0, 0, 1, 3) * swizzle!(self.group0(), 3, 2, 0, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group2()[0] * self.group0()[3]) + (other.group2()[2] * self.group0()[1]) + (other.group1()[0] * self.group1()[3]) + (other.group1()[2] * self.group1()[1])),
                ((other.group2()[0] * self.group0()[2]) + (other.group2()[1] * self.group0()[3]) + (other.group1()[0] * self.group1()[2]) + (other.group1()[1] * self.group1()[3])),
                ((other.group2()[1] * self.group0()[0]) + (other.group2()[2] * self.group0()[3]) + (other.group1()[1] * self.group1()[0]) + (other.group1()[2] * self.group1()[3])),
                (-(other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])),
            ]) - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group2()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group1(), 0, 1, 2, 1))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group1()[0]) + (other.group1()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<CircleRotor> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       56        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       48       64        0
    //  no simd       72       88        0
    fn geometric_anti_product(self, other: CircleRotor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (other.group0()[2] * self.group0()[1]),
                (other.group0()[1] * self.group0()[3]),
                (other.group0()[2] * self.group0()[3]),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group0(), 3, 2, 0, 3))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[2] * self.group1()[1]) - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])
                    + (other.group2()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group1()[3]) + (other.group1()[1] * self.group0()[3]) - (other.group1()[2] * self.group0()[0])
                    + (other.group2()[3] * self.group0()[1])),
                ((other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group1()[3]) - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[2] * self.group0()[3])
                    + (other.group2()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (swizzle!(other.group1(), 0, 0, 1, 3) * swizzle!(self.group0(), 3, 2, 0, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group1()[2] * self.group1()[1]) + (other.group2()[0] * self.group0()[3]) + (other.group2()[2] * self.group0()[1]) + (other.group2()[3] * self.group1()[0])),
                ((other.group1()[1] * self.group1()[3]) + (other.group2()[0] * self.group0()[2]) + (other.group2()[1] * self.group0()[3]) + (other.group2()[3] * self.group1()[1])),
                ((other.group1()[2] * self.group1()[3]) + (other.group2()[1] * self.group0()[0]) + (other.group2()[2] * self.group0()[3]) + (other.group2()[3] * self.group1()[2])),
                (-(other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[0], other.group1()[1], other.group2()[3]]) * swizzle!(self.group1(), 3, 2, 0, 3))
                - (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group1(), 0, 1, 2, 1))
                - (swizzle!(other.group2(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group1()[0]) + (other.group1()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Dipole> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       48        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       40       56        0
    //  no simd       64       80        0
    fn geometric_anti_product(self, other: Dipole) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[3])),
                ((other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1])),
                (-(other.group0()[2] * self.group1()[0]) + (other.group1()[1] * self.group0()[3]) - (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[1]) - (other.group1()[0] * self.group0()[1]) + (other.group1()[2] * self.group0()[3])),
                (other.group0()[2] * self.group1()[2]),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group1(), 3, 2, 0, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[1], other.group0()[2], other.group0()[1]]) * swizzle!(self.group1(), 1, 3, 3, 1))
                + (swizzle!(other.group1(), 0, 0, 1, 3) * swizzle!(self.group0(), 3, 2, 0, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group2()[0] * self.group0()[3]) + (other.group2()[2] * self.group0()[1]) + (other.group1()[0] * self.group1()[3]) - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group1()[3] * self.group1()[0])),
                ((other.group2()[0] * self.group0()[2]) + (other.group2()[1] * self.group0()[3]) + (other.group1()[0] * self.group1()[2]) + (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group1()[0])
                    + (other.group1()[3] * self.group1()[1])),
                ((other.group2()[1] * self.group0()[0]) + (other.group2()[2] * self.group0()[3]) - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (other.group1()[3] * self.group0()[0]),
                (other.group1()[3] * self.group0()[1]),
                (other.group1()[3] * self.group0()[2]),
                (-(other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    - (other.group1()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 3, 2, 0, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group1(), 1, 3, 3, 1))),
        );
    }
}
impl GeometricAntiProduct<DipoleInversion> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       56        0
    //    simd4       16       16        0
    // Totals...
    // yes simd       56       72        0
    //  no simd      104      120        0
    fn geometric_anti_product(self, other: DipoleInversion) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[3])),
                ((other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (other.group1()[2] * self.group0()[1]),
                (other.group1()[1] * self.group0()[3]),
                (other.group1()[2] * self.group0()[3]),
                (-(other.group3()[1] * self.group0()[1]) - (other.group3()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group1(), 3, 2, 0, 0))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group2()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[1], other.group0()[2], other.group0()[1]]) * swizzle!(self.group1(), 1, 3, 3, 1))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[2]]) * swizzle!(self.group1(), 0, 1, 2, 2))
                + (swizzle!(other.group1(), 0, 0, 1, 3) * swizzle!(self.group0(), 3, 2, 0, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group1()[0] * self.group1()[3]) - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group1()[3] * self.group1()[0])
                    + (other.group2()[2] * self.group0()[1])
                    + (other.group3()[0] * self.group1()[3])
                    - (other.group3()[1] * self.group1()[2])
                    + (other.group3()[2] * self.group1()[1])
                    + (other.group3()[3] * self.group0()[0])),
                ((other.group1()[0] * self.group1()[2]) + (other.group1()[1] * self.group1()[3]) - (other.group1()[2] * self.group1()[0])
                    + (other.group1()[3] * self.group1()[1])
                    + (other.group2()[1] * self.group0()[3])
                    + (other.group3()[0] * self.group1()[2])
                    + (other.group3()[1] * self.group1()[3])
                    - (other.group3()[2] * self.group1()[0])
                    + (other.group3()[3] * self.group0()[1])),
                (-(other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])
                    + (other.group2()[2] * self.group0()[3])
                    - (other.group3()[0] * self.group1()[1])
                    + (other.group3()[1] * self.group1()[0])
                    + (other.group3()[2] * self.group1()[3])
                    + (other.group3()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (swizzle!(other.group2(), 0, 0, 1, 3) * swizzle!(self.group0(), 3, 2, 0, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group3()[0] * self.group0()[3]) + (other.group3()[2] * self.group0()[1])),
                ((other.group3()[0] * self.group0()[2]) + (other.group3()[1] * self.group0()[3])),
                ((other.group3()[1] * self.group0()[0]) + (other.group3()[2] * self.group0()[3])),
                (-(other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    - (other.group3()[0] * self.group1()[0])
                    - (other.group3()[1] * self.group1()[1])
                    - (other.group3()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 3, 2, 0, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group1(), 1, 3, 3, 1))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group3()[3]]) * self.group0())
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group1()[2]]) * swizzle!(self.group1(), 0, 1, 2, 2))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group2()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
        );
    }
}
impl GeometricAntiProduct<DualNum321> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        4        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        1        7        0
    //  no simd        4       16        0
    fn geometric_anti_product(self, other: DualNum321) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[1] * self.group0()[3])]),
            // e415, e425, e435, e321
            (Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group0()[0]]) * self.group0()),
            // e235, e315, e125, e5
            (-(Simd32x4::from(other.group0()[0]) * self.group1()) + (Simd32x4::from(other.group0()[1]) * self.group1())),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<DualNum4> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       12        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        4       14        0
    //  no simd        4       20        0
    fn geometric_anti_product(self, other: DualNum4) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[2])),
                (other.group0()[0] * self.group1()[3]),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from(other.group0()[1]) * self.group1()),
            // e1, e2, e3, e4
            (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]])),
        );
    }
}
impl GeometricAntiProduct<DualNum5> for Motor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        1        3        0
    // no simd        4       12        0
    fn geometric_anti_product(self, other: DualNum5) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(other.group0()[1]) * self.group0()),
            // e235, e315, e125, e5
            ((Simd32x4::from(other.group0()[0]) * self.group0()) + (Simd32x4::from(other.group0()[1]) * self.group1())),
        );
    }
}
impl GeometricAntiProduct<FlatPoint> for Motor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       12       20        0
    fn geometric_anti_product(self, other: FlatPoint) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (other.group0()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[3]) - (other.group0()[2] * self.group0()[0]) + (other.group0()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group0()[1])
                    + (other.group0()[1] * self.group0()[0])
                    + (other.group0()[2] * self.group0()[3])
                    + (other.group0()[3] * self.group1()[2])),
                (other.group0()[3] * self.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[3] * self.group0()[0]),
                (other.group0()[3] * self.group0()[1]),
                (other.group0()[3] * self.group0()[2]),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])
                    + (other.group0()[3] * self.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Flector> for Motor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       25        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       22       31        0
    //  no simd       40       49        0
    fn geometric_anti_product(self, other: Flector) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1])
                    + (other.group0()[3] * self.group1()[0])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[3])
                    + (other.group0()[3] * self.group1()[1])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group0()[3])
                    + (other.group0()[3] * self.group1()[2])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group0()[2])),
                ((other.group1()[2] * self.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))
                + (swizzle!(other.group0(), 0, 0, 1, 3) * swizzle!(self.group0(), 3, 2, 0, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (other.group1()[2] * self.group0()[1]),
                (other.group1()[1] * self.group0()[3]),
                (other.group1()[2] * self.group0()[3]),
                (-(other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]) + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (swizzle!(other.group1(), 0, 0, 1, 3) * swizzle!(self.group0(), 3, 2, 0, 3))),
        );
    }
}
impl GeometricAntiProduct<Line> for Motor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       24        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       19       27        0
    //  no simd       28       36        0
    fn geometric_anti_product(self, other: Line) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[3])),
                ((other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[2] * self.group1()[1]) + (other.group1()[0] * self.group0()[3]) + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group1()[3]) + (other.group1()[0] * self.group0()[2]) + (other.group1()[1] * self.group0()[3])),
                ((other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group1()[3]) + (other.group1()[1] * self.group0()[0]) + (other.group1()[2] * self.group0()[3])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
        );
    }
}
impl GeometricAntiProduct<Motor> for Motor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       24        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       22       30        0
    //  no simd       40       48        0
    fn geometric_anti_product(self, other: Motor) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) + (other.group0()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[3]) + (other.group0()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group0()[3]) + (other.group0()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) + (swizzle!(other.group0(), 0, 0, 1, 3) * swizzle!(self.group0(), 3, 2, 0, 3))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[2] * self.group1()[1]) + (other.group0()[3] * self.group1()[0]) + (other.group1()[2] * self.group0()[1]) + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group1()[3]) + (other.group0()[3] * self.group1()[1]) + (other.group1()[1] * self.group0()[3]) + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group1()[3]) + (other.group0()[3] * self.group1()[2]) + (other.group1()[2] * self.group0()[3]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) + (swizzle!(other.group0(), 0, 0, 1, 3) * swizzle!(self.group1(), 3, 2, 0, 3))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (swizzle!(other.group1(), 0, 0, 1, 3) * swizzle!(self.group0(), 3, 2, 0, 3))
                - (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
        );
    }
}
impl GeometricAntiProduct<MultiVector> for Motor {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       65       87        0
    //    simd2        7        8        0
    //    simd3       23       26        0
    //    simd4       19       19        0
    // Totals...
    // yes simd      114      140        0
    //  no simd      224      257        0
    fn geometric_anti_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (-(Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group5()[0], other.group6()[0]]))
                - (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group5()[1], other.group6()[1]]))
                - (Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group5()[2], other.group6()[2]]))
                + (Simd32x2::from(self.group0()[3]) * other.group0())
                - (Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group4()[0], other.group7()[0]]))
                - (Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group4()[1], other.group7()[1]]))
                - (Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group4()[2], other.group7()[2]]))
                + (Simd32x2::from(self.group1()[3]) * Simd32x2::from([other[e45], other.group1()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group7()[0] * self.group1()[3]) - (other.group7()[1] * self.group1()[2])
                    + (other.group7()[2] * self.group1()[1])
                    + (self.group0()[1] * other.group1()[2])
                    + (self.group0()[3] * other.group1()[0])
                    + (self.group1()[0] * other.group1()[3])),
                ((other.group7()[0] * self.group1()[2]) + (other.group7()[1] * self.group1()[3]) - (other.group7()[2] * self.group1()[0])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group0()[3] * other.group1()[1])
                    + (self.group1()[1] * other.group1()[3])),
                (-(other.group7()[0] * self.group1()[1])
                    + (other.group7()[1] * self.group1()[0])
                    + (other.group7()[2] * self.group1()[3])
                    + (self.group0()[2] * other.group6()[3])
                    + (self.group0()[3] * other.group1()[2])
                    + (self.group1()[2] * other.group1()[3])),
                (-(other.group7()[1] * self.group0()[1]) - (other.group7()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group7()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group6()[3], other.group6()[3], other.group1()[1], other.group1()[3]]) * swizzle!(self.group0(), 0, 1, 0, 3))),
            // e5
            ((other.group0()[1] * self.group1()[3]) - (other.group8()[0] * self.group0()[0]) - (other.group8()[1] * self.group0()[1]) - (other.group8()[2] * self.group0()[2])
                + (self.group0()[3] * other[e1])
                + (self.group1()[0] * other.group1()[0])
                - (self.group1()[0] * other.group6()[0])
                + (self.group1()[1] * other.group1()[1])
                - (self.group1()[1] * other.group6()[1])
                + (self.group1()[2] * other.group1()[2])
                - (self.group1()[2] * other.group6()[2])
                - (self.group1()[3] * other.group6()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group0()[1] * other.group3()[2])
                    + (self.group0()[3] * other.group3()[0])
                    + (self.group1()[0] * other.group3()[3])
                    + (self.group1()[1] * other.group9()[2])
                    + (self.group1()[3] * other.group9()[0])),
                ((self.group0()[2] * other.group3()[0])
                    + (self.group0()[3] * other.group3()[1])
                    + (self.group1()[1] * other.group3()[3])
                    + (self.group1()[2] * other.group9()[0])
                    + (self.group1()[3] * other.group9()[1])),
                ((self.group0()[2] * other.group9()[3])
                    + (self.group0()[3] * other.group3()[2])
                    + (self.group1()[0] * other.group9()[1])
                    + (self.group1()[2] * other.group3()[3])
                    + (self.group1()[3] * other.group9()[2])),
                ((self.group0()[2] * other.group9()[2]) * -1.0),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group4()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group5()[0], other.group5()[0], other.group5()[1], other.group4()[1]]) * swizzle!(self.group1(), 3, 2, 0, 1))
                - (Simd32x4::from([other.group5()[1], other.group5()[2], other.group5()[0], other[e45]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group5()[2], other.group5()[1], other.group5()[2], other.group4()[2]]) * swizzle!(self.group1(), 1, 3, 3, 2))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[1]]) * swizzle!(other.group9(), 1, 2, 0, 1))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group9()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group9()[3], other.group9()[3], other.group3()[1], other.group3()[3]]) * swizzle!(self.group0(), 0, 1, 0, 3))),
            // e41, e42, e43
            ((Simd32x3::from(other[e45]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from([self.group0()[1], self.group0()[3], self.group0()[3]]) * swizzle!(other.group4(), 2, 1, 2))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group4(), 1, 2, 0))
                + (Simd32x3::from([self.group0()[3], self.group0()[2], self.group0()[0]]) * swizzle!(other.group4(), 0, 0, 1))),
            // e23, e31, e12
            ((Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from([self.group0()[1], self.group0()[3], self.group0()[3]]) * swizzle!(other.group5(), 2, 1, 2))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group5(), 1, 2, 0))
                + (Simd32x3::from([self.group0()[3], self.group0()[2], self.group0()[0]]) * swizzle!(other.group5(), 0, 0, 1))
                + (Simd32x3::from([self.group1()[1], self.group1()[3], self.group1()[3]]) * swizzle!(other.group4(), 2, 1, 2))
                - (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]) * swizzle!(other.group4(), 1, 2, 0))
                + (Simd32x3::from([self.group1()[3], self.group1()[2], self.group1()[0]]) * swizzle!(other.group4(), 0, 0, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group7()[2] * self.group1()[1]) + (self.group0()[1] * other.group6()[2]) + (self.group0()[3] * other.group6()[0]) + (self.group1()[0] * other.group1()[3])),
                ((other.group7()[1] * self.group1()[3]) + (self.group0()[2] * other.group6()[0]) + (self.group0()[3] * other.group6()[1]) + (self.group1()[1] * other.group1()[3])),
                ((other.group7()[2] * self.group1()[3]) + (self.group0()[0] * other.group6()[1]) + (self.group0()[3] * other.group6()[2]) + (self.group1()[2] * other.group1()[3])),
                (-(other.group7()[1] * self.group1()[1])
                    - (other.group7()[2] * self.group1()[2])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group6()[3]]) * self.group0())
                + (Simd32x4::from([other.group7()[0], other.group7()[0], other.group7()[1], other.group1()[3]]) * swizzle!(self.group1(), 3, 2, 0, 3))
                - (Simd32x4::from([other.group7()[1], other.group7()[2], other.group7()[0], other.group7()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group6()[1], other.group6()[2], other.group6()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e423, e431, e412
            ((Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from([self.group0()[1], self.group0()[3], self.group0()[3]]) * swizzle!(other.group7(), 2, 1, 2))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group7(), 1, 2, 0))
                + (Simd32x3::from([self.group0()[3], self.group0()[2], self.group0()[0]]) * swizzle!(other.group7(), 0, 0, 1))),
            // e235, e315, e125
            (Simd32x3::from([
                ((self.group1()[1] * other.group6()[2]) + (self.group1()[2] * other.group1()[1])),
                ((self.group1()[0] * other.group1()[2]) + (self.group1()[2] * other.group6()[0])),
                ((self.group1()[0] * other.group6()[1]) + (self.group1()[1] * other.group1()[0])),
            ]) + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group6()[3], other.group6()[2], other.group1()[1]]))
                - (Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group1()[2], other.group6()[3], other.group6()[0]]))
                - (Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group6()[1], other.group1()[0], other.group6()[3]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from([self.group0()[1], self.group0()[3], self.group0()[3]]) * swizzle!(other.group8(), 2, 1, 2))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group8(), 1, 2, 0))
                + (Simd32x3::from([self.group0()[3], self.group0()[2], self.group0()[0]]) * swizzle!(other.group8(), 0, 0, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group9()[2]) + (self.group0()[3] * other.group9()[0])),
                ((self.group0()[2] * other.group9()[0]) + (self.group0()[3] * other.group9()[1])),
                ((self.group0()[2] * other.group3()[3]) + (self.group0()[3] * other.group9()[2])),
                (-(self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group3()[2])
                    - (self.group1()[0] * other.group9()[0])
                    - (self.group1()[1] * other.group9()[1])
                    - (self.group1()[2] * other.group9()[2])
                    + (self.group1()[3] * other.group3()[3])),
            ]) - (Simd32x4::from([other.group4()[0], other.group4()[0], other.group4()[1], other.group5()[0]]) * swizzle!(self.group1(), 3, 2, 0, 0))
                + (Simd32x4::from([other.group4()[1], other.group4()[2], other.group4()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group4()[2], other.group4()[1], other.group4()[2], other.group5()[1]]) * swizzle!(self.group1(), 1, 3, 3, 1))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group9()[1], other.group9()[3]]) * swizzle!(self.group0(), 0, 1, 0, 3))
                - (Simd32x4::from([other.group9()[1], other.group9()[2], other.group9()[0], other.group3()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([other[e45], other[e45], other[e45], other.group5()[2]]) * swizzle!(self.group1(), 0, 1, 2, 2))),
            // e1234
            (-(other.group4()[0] * self.group0()[0]) - (other.group4()[1] * self.group0()[1]) - (other.group4()[2] * self.group0()[2]) + (self.group0()[3] * other[e45])),
        );
    }
}
impl GeometricAntiProduct<Plane> for Motor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       16        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       11       19        0
    //  no simd       20       28        0
    fn geometric_anti_product(self, other: Plane) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2]) + (self.group1()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group1()[2] * other.group0()[0]) + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1]) + (self.group1()[3] * other.group0()[2])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))),
        );
    }
}
impl GeometricAntiProduct<QuadNum> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       12        0
    //    simd4        3        5        0
    // Totals...
    // yes simd        7       17        0
    //  no simd       16       32        0
    fn geometric_anti_product(self, other: QuadNum) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[2] * other.group0()[0]),
                ((self.group0()[3] * other.group0()[3]) + (self.group1()[3] * other.group0()[0])),
            ]),
            // e415, e425, e435, e321
            ((Simd32x4::from(other.group0()[0]) * self.group1()) + (swizzle!(other.group0(), 3, 3, 3, 2) * self.group0())),
            // e235, e315, e125, e5
            ((Simd32x4::from(other.group0()[1]) * self.group0()) - (Simd32x4::from(other.group0()[2]) * self.group1()) + (Simd32x4::from(other.group0()[3]) * self.group1())),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[2]) + (self.group1()[0] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[2]) + (self.group1()[1] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[2]) + (self.group1()[2] * other.group0()[0])),
                (self.group0()[3] * other.group0()[0]),
            ]),
        );
    }
}
impl GeometricAntiProduct<RoundPoint> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       28        0
    //    simd4        2        3        0
    // Totals...
    // yes simd       18       31        0
    //  no simd       24       40        0
    fn geometric_anti_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group1()[3] * other.group0()[3])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group1()[1] * other.group0()[2]) - (self.group1()[3] * other.group0()[0])),
                (-(self.group1()[2] * other.group0()[0]) - (self.group1()[3] * other.group0()[1])),
                (-(self.group1()[0] * other.group0()[1]) - (self.group1()[3] * other.group0()[2])),
                ((self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other[e2]) * self.group0())
                + (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (self.group0()[3] * other.group0()[0]) + (self.group1()[0] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[2])
                    + (self.group0()[2] * other.group0()[0])
                    + (self.group0()[3] * other.group0()[1])
                    + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group0()[3] * other.group0()[2]) + (self.group1()[2] * other.group0()[3])),
                (self.group0()[3] * other.group0()[3]),
            ]),
        );
    }
}
impl GeometricAntiProduct<Scalar> for Motor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn geometric_anti_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from(other[scalar]) * self.group0()),
            // e15, e25, e35, e3215
            (Simd32x4::from(other[scalar]) * self.group1()),
        );
    }
}
impl GeometricAntiProduct<Sphere> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       20        0
    //    simd4        3        6        0
    // Totals...
    // yes simd       15       26        0
    //  no simd       24       44        0
    fn geometric_anti_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(other[e4315]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group1()[0] * other[e4315]),
                (self.group1()[1] * other[e4315]),
                (self.group1()[2] * other[e4315]),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other[e4315])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1]) + (self.group1()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) - (self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0]) + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0]) + (self.group1()[3] * other.group0()[2])),
                (self.group0()[3] * other[e4315]),
            ]),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group1()[2]])
                * swizzle!(other.group0(), 0, 1, 2, 2)
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other[e4315], other[e4315], other[e4315], other.group0()[1]]) * swizzle!(self.group1(), 0, 1, 2, 1))
                + (swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))),
        );
    }
}
impl GeometricAntiProduct<TripleNum> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       12        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        5       15        0
    //  no simd        8       24        0
    fn geometric_anti_product(self, other: TripleNum) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[2] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group0()[2])),
                (other.group0()[0] * self.group1()[3]),
            ]),
            // e235, e315, e125, e5
            ((Simd32x4::from(other.group0()[1]) * self.group0()) + (Simd32x4::from(other.group0()[2]) * self.group1())),
            // e1, e2, e3, e4
            (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]])),
        );
    }
}
impl GeometricAntiProduct<VersorEven> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       53        0
    //    simd4       19       19        0
    // Totals...
    // yes simd       55       72        0
    //  no simd      112      129        0
    fn geometric_anti_product(self, other: VersorEven) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[0]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group3()[3]) + (self.group0()[3] * other.group0()[2])),
                (-(self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])
                    + (self.group1()[3] * other.group3()[3])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group0()[1], other.group0()[3]]) * swizzle!(self.group0(), 0, 1, 0, 3))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) + (self.group0()[3] * other.group1()[0]) + (self.group1()[1] * other.group0()[2]) + (self.group1()[3] * other.group0()[0])),
                ((self.group0()[2] * other.group1()[0]) + (self.group0()[3] * other.group1()[1]) + (self.group1()[2] * other.group0()[0]) + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group1()[2]) + (self.group1()[2] * other.group3()[3]) + (self.group1()[3] * other.group0()[2])),
                (-(self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group3()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group1()[3]]) * swizzle!(self.group0(), 0, 1, 0, 3))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group0()[1], other.group3()[3]]) * swizzle!(self.group1(), 0, 1, 0, 3))
                - (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) + (self.group0()[3] * other.group2()[0])),
                ((self.group0()[2] * other.group2()[0]) + (self.group0()[3] * other.group2()[1])),
                ((self.group0()[2] * other.group2()[3]) + (self.group0()[3] * other.group2()[2])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])),
            ]) + (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[3], other.group3()[2], other.group1()[1], other.group3()[0]]))
                - (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group1()[3], other.group1()[2], other.group3()[1], other.group1()[0]]))
                + (Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group1()[2], other.group0()[3], other.group3()[0], other.group3()[1]]))
                - (Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group3()[2], other.group1()[3], other.group1()[0], other.group1()[1]]))
                - (Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[3], other.group1()[2]]))
                + (Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group0()[3], other.group3()[2]]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                - (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))
                + (swizzle!(self.group0(), 0, 1, 0, 3) * swizzle!(other.group2(), 3, 3, 1, 3))
                - (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group2(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[1] * other.group3()[2])
                    + (self.group0()[3] * other.group3()[0])
                    + (self.group1()[0] * other.group3()[3])
                    + (self.group1()[1] * other.group0()[2])
                    + (self.group1()[3] * other.group0()[0])),
                ((self.group0()[2] * other.group3()[0])
                    + (self.group0()[3] * other.group3()[1])
                    + (self.group1()[1] * other.group3()[3])
                    + (self.group1()[2] * other.group0()[0])
                    + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group1()[3])
                    + (self.group0()[3] * other.group3()[2])
                    + (self.group1()[0] * other.group0()[1])
                    + (self.group1()[2] * other.group3()[3])
                    + (self.group1()[3] * other.group0()[2])),
                ((self.group0()[2] * other.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group3()[3]]) * swizzle!(self.group0(), 0, 1, 0, 3))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
        );
    }
}
impl GeometricAntiProduct<VersorOdd> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       48       64        0
    //    simd4       16       16        0
    // Totals...
    // yes simd       64       80        0
    //  no simd      112      128        0
    fn geometric_anti_product(self, other: VersorOdd) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[0]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group2()[3]) + (self.group0()[3] * other.group0()[2])),
                (-(self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])
                    + (self.group1()[3] * other.group2()[3])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[1], other.group0()[3]]) * swizzle!(self.group0(), 0, 1, 0, 3))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) + (self.group0()[3] * other.group1()[0])),
                ((self.group0()[2] * other.group1()[0]) + (self.group0()[3] * other.group1()[1])),
                ((self.group0()[3] * other.group1()[2]) + (self.group1()[3] * other.group0()[2])),
                (-(self.group0()[1] * other.group3()[1]) - (self.group0()[2] * other.group3()[2])),
            ]) + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group0()[2], self.group1()[1]]) * swizzle!(other.group0(), 2, 0, 3, 1))
                + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group2()[3], other.group0()[2]]) * swizzle!(self.group1(), 3, 3, 2, 2))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group2()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group1()[3]]) * swizzle!(self.group0(), 0, 1, 0, 3))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[1], other.group0()[0]]) * swizzle!(self.group1(), 0, 1, 0, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group0()[1] * other.group2()[2])
                    + (self.group0()[3] * other.group2()[0])
                    + (self.group1()[0] * other.group0()[3])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group1()[2])
                    + (self.group1()[1] * other.group3()[2])
                    - (self.group1()[2] * other.group1()[1])
                    - (self.group1()[2] * other.group3()[1])
                    + (self.group1()[3] * other.group1()[0])
                    + (self.group1()[3] * other.group3()[0])),
                ((self.group0()[2] * other.group2()[0]) + (self.group0()[3] * other.group2()[1]) - (self.group1()[0] * other.group1()[2]) - (self.group1()[0] * other.group3()[2])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group1()[0])
                    + (self.group1()[2] * other.group3()[0])
                    + (self.group1()[3] * other.group1()[1])
                    + (self.group1()[3] * other.group3()[1])),
                ((self.group0()[2] * other.group3()[3]) + (self.group0()[3] * other.group2()[2]) + (self.group1()[0] * other.group1()[1]) + (self.group1()[0] * other.group3()[1])
                    - (self.group1()[1] * other.group1()[0])
                    - (self.group1()[1] * other.group3()[0])
                    + (self.group1()[2] * other.group0()[3])
                    + (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])
                    + (self.group1()[3] * other.group3()[2])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group2()[1], other.group2()[3]]) * swizzle!(self.group0(), 0, 1, 0, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group3()[2]) + (self.group0()[3] * other.group3()[0])),
                ((self.group0()[2] * other.group3()[0]) + (self.group0()[3] * other.group3()[1])),
                ((self.group0()[2] * other.group1()[3]) + (self.group0()[3] * other.group3()[2])),
                (-(self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group1()[1] * other.group3()[1])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[2] * other.group3()[2])
                    + (self.group1()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group2()[3], other.group3()[0]]) * swizzle!(self.group1(), 1, 2, 2, 0))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group3()[3]]) * swizzle!(self.group0(), 0, 1, 0, 3))
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 0, 1, 0, 0))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group2()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (swizzle!(self.group1(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))),
        );
    }
}
impl GeometricAntiProduct<VersorRoundPoint> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       32        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       20       36        0
    //  no simd       32       48        0
    fn geometric_anti_product(self, other: VersorRoundPoint) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                ((other.group1()[1] * self.group0()[3]) + (self.group1()[3] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (other.group1()[1] * self.group0()[0]),
                (other.group1()[1] * self.group0()[1]),
                (other.group1()[1] * self.group0()[2]),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group0()[3]) * self.group1())),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group1()[1] * other.group0()[2]) - (self.group1()[3] * other.group0()[0])),
                (-(self.group1()[2] * other.group0()[0]) - (self.group1()[3] * other.group0()[1])),
                (-(self.group1()[0] * other.group0()[1]) - (self.group1()[3] * other.group0()[2])),
                ((self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group1()[0]) * self.group0())
                + (Simd32x4::from(other.group1()[1]) * self.group1())
                + (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (self.group0()[3] * other.group0()[0]) + (self.group1()[0] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[2])
                    + (self.group0()[2] * other.group0()[0])
                    + (self.group0()[3] * other.group0()[1])
                    + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group0()[3] * other.group0()[2]) + (self.group1()[2] * other.group0()[3])),
                (self.group0()[3] * other.group0()[3]),
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorSphere> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       36        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       23       39        0
    //  no simd       32       48        0
    fn geometric_anti_product(self, other: VersorSphere) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group1()[0] * self.group0()[0]),
                (other.group1()[0] * self.group0()[1]),
                (other.group1()[0] * self.group0()[2]),
                ((other.group1()[0] * self.group1()[3]) + (other.group1()[1] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group1()[0] * self.group1()[0]) + (other.group1()[1] * self.group0()[0])),
                ((other.group1()[0] * self.group1()[1]) + (other.group1()[1] * self.group0()[1])),
                ((other.group1()[0] * self.group1()[2]) + (other.group1()[1] * self.group0()[2])),
                (-(other.group1()[0] * self.group1()[3])
                    - (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group1()[1] * self.group1()[0]) + (self.group0()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])
                    + (self.group1()[3] * other.group0()[0])),
                ((other.group1()[1] * self.group1()[1]) + (self.group0()[1] * other.group0()[3]) - (self.group1()[0] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[0])
                    + (self.group1()[3] * other.group0()[1])),
                ((other.group1()[1] * self.group1()[2]) + (self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])
                    + (self.group1()[3] * other.group0()[2])),
                (other.group1()[0] * self.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                ((other.group1()[1] * self.group1()[3]) - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([other.group1()[0], other.group1()[0], other.group1()[0], other.group0()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))
                + (swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))),
        );
    }
}
impl InfixGeometricAntiProduct for MultiVector {}
impl GeometricAntiProduct<AntiCircleRotor> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      102      128        0
    //    simd2        1        1        0
    //    simd3       36       38        0
    //    simd4       27       27        0
    // Totals...
    // yes simd      166      194        0
    //  no simd      320      352        0
    fn geometric_anti_product(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                ((self.group0()[1] * other.group2()[3])
                    - (other.group0()[0] * self.group8()[0])
                    - (other.group0()[1] * self.group8()[1])
                    - (other.group0()[2] * self.group8()[2])
                    - (self.group7()[0] * other.group2()[0])
                    - (self.group7()[1] * other.group2()[1])
                    - (self.group7()[2] * other.group2()[2])
                    - (other.group1()[0] * self.group6()[0])
                    - (other.group1()[1] * self.group6()[1])
                    - (other.group1()[2] * self.group6()[2])),
                (-(self.group0()[0] * other.group2()[3])
                    + (other.group0()[0] * self.group3()[0])
                    + (other.group0()[1] * self.group3()[1])
                    + (other.group0()[2] * self.group3()[2])
                    + (self.group4()[0] * other.group2()[0])
                    + (self.group4()[1] * other.group2()[1])
                    + (self.group4()[2] * other.group2()[2])
                    + (self.group5()[0] * other.group1()[0])
                    + (self.group5()[1] * other.group1()[1])
                    + (self.group5()[2] * other.group1()[2])),
            ]) - (Simd32x2::from(other.group1()[3]) * Simd32x2::from([self.group6()[3], self.group3()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group9()[3]) + (other.group0()[1] * self.group3()[2]) - (other.group0()[2] * self.group3()[1])
                    + (self.group4()[1] * other.group2()[2])
                    - (other.group1()[1] * self.group9()[2])),
                (-(other.group0()[0] * self.group3()[2]) - (other.group0()[1] * self.group9()[3])
                    + (other.group0()[2] * self.group3()[0])
                    + (self.group4()[2] * other.group2()[0])
                    - (other.group1()[2] * self.group9()[0])),
                ((other.group0()[0] * self.group3()[1]) - (other.group0()[1] * self.group3()[0]) - (other.group0()[2] * self.group9()[3]) + (self.group4()[0] * other.group2()[1])
                    - (other.group1()[0] * self.group9()[1])),
                ((other.group0()[0] * self.group5()[0])
                    + (other.group0()[1] * self.group5()[1])
                    + (other.group0()[1] * self.group9()[1])
                    + (other.group0()[2] * self.group5()[2])
                    + (other.group0()[2] * self.group9()[2])),
            ]) + (Simd32x4::from(self[e45]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))
                - (Simd32x4::from([self.group4()[2], self.group4()[0], self.group4()[1], self[e45]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group5()[0], self.group5()[1], self.group5()[2], self.group4()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[0]]) * swizzle!(self.group9(), 0, 1, 2, 0))
                + (Simd32x4::from([self.group3()[3], self.group9()[2], self.group9()[0], self.group4()[1]]) * swizzle!(other.group1(), 0, 0, 1, 1))
                + (Simd32x4::from([self.group9()[1], self.group3()[3], self.group3()[3], self.group4()[2]]) * swizzle!(other.group1(), 2, 1, 2, 2))),
            // e5
            ((self.group5()[0] * other.group2()[0])
                + (self.group5()[1] * other.group2()[1])
                + (self.group5()[2] * other.group2()[2])
                + (other.group1()[0] * self.group3()[0])
                + (other.group1()[1] * self.group3()[1])
                + (other.group1()[2] * self.group3()[2])
                - (other.group1()[3] * self.group9()[3])
                - (other.group2()[0] * self.group9()[0])
                - (other.group2()[1] * self.group9()[1])
                - (other.group2()[2] * self.group9()[2])
                - (other.group2()[3] * self.group9()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group8()[0] * other.group2()[3]) - (self.group8()[2] * other.group1()[1])
                    + (other.group2()[0] * self.group6()[3])
                    + (other.group2()[2] * self.group1()[1])
                    + (other.group2()[2] * self.group6()[1])),
                (-(self.group8()[0] * other.group1()[2])
                    + (self.group8()[1] * other.group2()[3])
                    + (other.group2()[0] * self.group1()[2])
                    + (other.group2()[0] * self.group6()[2])
                    + (other.group2()[1] * self.group6()[3])),
                (-(self.group8()[1] * other.group1()[0])
                    + (self.group8()[2] * other.group2()[3])
                    + (other.group2()[1] * self.group1()[0])
                    + (other.group2()[1] * self.group6()[0])
                    + (other.group2()[2] * self.group6()[3])),
                ((other.group0()[0] * self.group8()[0]) + (other.group0()[1] * self.group8()[1]) + (other.group0()[2] * self.group8()[2])
                    - (self.group7()[2] * other.group2()[2])
                    - (other.group2()[3] * self.group6()[3])),
            ]) + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))
                + (Simd32x4::from([self.group8()[0], self.group8()[1], self.group8()[0], self.group1()[0]]) * swizzle!(other.group1(), 3, 3, 1, 0))
                + (Simd32x4::from([self.group8()[1], self.group8()[2], self.group8()[2], self.group1()[1]]) * swizzle!(other.group1(), 2, 0, 3, 1))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group7()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group7()[1]]) * swizzle!(other.group2(), 1, 2, 0, 1))
                + (Simd32x4::from([self[e1], self[e1], self[e1], self.group1()[2]]) * swizzle!(other.group1(), 0, 1, 2, 2))),
            // e41, e42, e43
            ((Simd32x3::from(self.group0()[1]) * other.group0())
                - (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group6()[3], self.group1()[2], self.group6()[1]]))
                - (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group6()[2], self.group6()[3], self.group1()[0]]))
                - (Simd32x3::from(other.group0()[2]) * Simd32x3::from([self.group1()[1], self.group6()[0], self.group6()[3]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from([other.group1()[1], other.group1()[3], other.group1()[3]]) * swizzle!(self.group7(), 2, 1, 2))
                + (Simd32x3::from([other.group1()[2], other.group1()[0], other.group2()[3]]) * swizzle!(self.group7(), 1, 2, 2))
                - (Simd32x3::from([other.group1()[3], other.group1()[2], other.group1()[0]]) * swizzle!(self.group7(), 0, 0, 1))
                + (Simd32x3::from([other.group2()[3], other.group2()[3], other.group1()[1]]) * swizzle!(self.group7(), 0, 1, 0))
                + (Simd32x3::from([self.group1()[2], self.group6()[2], self.group1()[1]]) * swizzle!(other.group0(), 1, 0, 0))
                + (Simd32x3::from([self.group6()[1], self.group1()[0], self.group6()[0]]) * swizzle!(other.group0(), 2, 2, 1))),
            // e23, e31, e12
            (Simd32x3::from([
                (-(other.group1()[1] * self.group6()[2]) + (other.group1()[2] * self.group6()[1])),
                ((other.group1()[0] * self.group6()[2]) - (other.group1()[2] * self.group6()[0])),
                (-(other.group1()[0] * self.group6()[1]) + (other.group1()[1] * self.group6()[0])),
            ]) + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                + (Simd32x3::from([self.group8()[1], self[e1], self[e1]]) * swizzle!(other.group0(), 2, 1, 2))
                - (Simd32x3::from([other.group2()[1], other.group2()[2], other.group2()[0]]) * swizzle!(self.group7(), 2, 0, 1))
                + (Simd32x3::from([other.group2()[2], other.group2()[0], other.group2()[1]]) * swizzle!(self.group7(), 1, 2, 0))
                + (Simd32x3::from([self[e1], self.group8()[2], self.group8()[0]]) * swizzle!(other.group0(), 0, 0, 1))
                - (swizzle!(other.group0(), 1, 2, 0) * swizzle!(self.group8(), 2, 0, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[2] * self.group3()[1]) - (other.group1()[3] * self.group9()[0])),
                (-(other.group0()[0] * self.group3()[2]) - (other.group1()[3] * self.group9()[1])),
                (-(other.group0()[1] * self.group3()[0]) - (other.group1()[3] * self.group9()[2])),
                ((other.group0()[1] * self.group3()[1]) + (other.group0()[2] * self.group3()[2])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group9()[0]]) * swizzle!(other.group1(), 0, 1, 2, 0))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group9(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group3(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group4()[1], self.group4()[2], self.group4()[0], self.group4()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group4()[2], self.group4()[0], self.group4()[1], self.group3()[3]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group5()[0], self.group5()[1], self.group5()[2], self.group4()[1]]) * swizzle!(other.group2(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group5()[1], self.group5()[2], self.group5()[0], self.group9()[2]]) * swizzle!(other.group1(), 2, 0, 1, 2))
                + (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                - (Simd32x4::from([self[e45], self[e45], self[e45], self.group4()[2]]) * swizzle!(other.group2(), 0, 1, 2, 2))),
            // e423, e431, e412
            (-(Simd32x3::from(self.group0()[0]) * other.group0())
                - (Simd32x3::from(self[e45]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from([self.group5()[1], self.group9()[2], self.group9()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group1()[1], other.group1()[3], other.group1()[3]]) * swizzle!(self.group4(), 2, 1, 2))
                - (Simd32x3::from([other.group1()[2], other.group1()[0], other.group2()[3]]) * swizzle!(self.group4(), 1, 2, 2))
                + (Simd32x3::from([other.group1()[3], other.group1()[2], other.group1()[0]]) * swizzle!(self.group4(), 0, 0, 1))
                - (Simd32x3::from([other.group2()[3], other.group2()[3], other.group1()[1]]) * swizzle!(self.group4(), 0, 1, 0))
                - (Simd32x3::from([self.group3()[3], self.group5()[2], self.group5()[0]]) * swizzle!(other.group0(), 0, 0, 1))
                - (Simd32x3::from([self.group9()[1], self.group3()[3], self.group3()[3]]) * swizzle!(other.group0(), 2, 1, 2))
                + (Simd32x3::from([self.group9()[2], self.group9()[0], self.group9()[1]]) * swizzle!(other.group0(), 1, 2, 0))
                + (swizzle!(other.group0(), 1, 2, 0) * swizzle!(self.group5(), 2, 0, 1))),
            // e235, e315, e125
            (Simd32x3::from([
                ((other.group1()[1] * self.group3()[2]) - (other.group1()[2] * self.group3()[1]) - (other.group2()[1] * self.group9()[2]) + (other.group2()[2] * self.group9()[1])),
                (-(other.group1()[0] * self.group3()[2]) + (other.group1()[2] * self.group3()[0]) + (other.group2()[0] * self.group9()[2])
                    - (other.group2()[2] * self.group9()[0])),
                ((other.group1()[0] * self.group3()[1]) - (other.group1()[1] * self.group3()[0]) - (other.group2()[0] * self.group9()[1]) + (other.group2()[1] * self.group9()[0])),
            ]) - (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                - (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                - (Simd32x3::from(self.group9()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from([other.group2()[1], other.group2()[2], other.group2()[0]]) * swizzle!(self.group5(), 2, 0, 1))
                - (Simd32x3::from([other.group2()[2], other.group2()[0], other.group2()[1]]) * swizzle!(self.group5(), 1, 2, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group0()[0] * self[e1]) + (other.group0()[1] * self.group8()[2]) - (other.group0()[2] * self.group8()[1])
                    + (other.group1()[3] * self.group6()[0])
                    + (other.group2()[0] * self.group1()[3])),
                (-(other.group0()[0] * self.group8()[2]) - (other.group0()[1] * self[e1])
                    + (other.group0()[2] * self.group8()[0])
                    + (other.group1()[3] * self.group6()[1])
                    + (other.group2()[1] * self.group1()[3])),
                ((other.group0()[0] * self.group8()[1]) - (other.group0()[1] * self.group8()[0]) - (other.group0()[2] * self[e1])
                    + (other.group1()[3] * self.group6()[2])
                    + (other.group2()[2] * self.group1()[3])),
                (-(self.group8()[2] * other.group1()[2])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[1] * self.group6()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group6()[2])),
            ]) + (Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[0], self[e1]]) * swizzle!(other.group2(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group7()[2], self.group7()[0], self.group7()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group6()[0]]) * swizzle!(other.group2(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group1()[1], self.group6()[3], self.group6()[3], self.group8()[1]]) * swizzle!(other.group1(), 2, 1, 2, 1))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self[e1]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group6()[3], self.group1()[2], self.group1()[0], self.group8()[0]]) * swizzle!(other.group1(), 0, 0, 1, 0))),
            // e1234
            ((other.group0()[0] * self.group1()[0]) - (other.group0()[0] * self.group6()[0]) + (other.group0()[1] * self.group1()[1]) - (other.group0()[1] * self.group6()[1])
                + (other.group0()[2] * self.group1()[2])
                - (other.group0()[2] * self.group6()[2])
                - (self.group7()[0] * other.group1()[0])
                - (self.group7()[1] * other.group1()[1])
                - (self.group7()[2] * other.group1()[2])
                - (other.group1()[3] * self.group1()[3])
                + (other.group2()[3] * self.group1()[3])),
        );
    }
}
impl GeometricAntiProduct<AntiDipoleInversion> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      122      148        0
    //    simd2       11       11        0
    //    simd3       52       54        0
    //    simd4       37       37        0
    // Totals...
    // yes simd      222      250        0
    //  no simd      448      480        0
    fn geometric_anti_product(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                (-(other.group1()[3] * self.group3()[3])
                    + (other.group3()[0] * self.group9()[0])
                    + (other.group3()[1] * self.group9()[1])
                    + (other.group3()[2] * self.group9()[2])),
                ((other.group1()[3] * self.group6()[3]) - (other.group3()[0] * self.group1()[0]) - (other.group3()[1] * self.group1()[1]) - (other.group3()[2] * self.group1()[2])),
            ]) - (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group3()[0], self.group8()[0]]))
                - (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group3()[1], self.group8()[1]]))
                - (Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group3()[2], self.group8()[2]]))
                - (Simd32x2::from(other.group1()[0]) * Simd32x2::from([self.group5()[0], self.group6()[0]]))
                - (Simd32x2::from(other.group1()[1]) * Simd32x2::from([self.group5()[1], self.group6()[1]]))
                - (Simd32x2::from(other.group1()[2]) * Simd32x2::from([self.group5()[2], self.group6()[2]]))
                - (Simd32x2::from(other.group2()[0]) * Simd32x2::from([self.group4()[0], self.group7()[0]]))
                - (Simd32x2::from(other.group2()[1]) * Simd32x2::from([self.group4()[1], self.group7()[1]]))
                - (Simd32x2::from(other.group2()[2]) * Simd32x2::from([self.group4()[2], self.group7()[2]]))
                + (Simd32x2::from(other.group2()[3]) * Simd32x2::from([self.group9()[3], self[e1]]))
                + (Simd32x2::from(other.group3()[3]) * Simd32x2::from([self[e45], self.group1()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[0] * self[e1]) - (other.group0()[1] * self.group8()[2])
                    + (other.group0()[2] * self.group8()[1])
                    + (self.group7()[2] * other.group2()[1])
                    + (self.group8()[0] * other.group2()[3])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group1()[3] * self.group6()[0])
                    - (other.group2()[0] * self.group1()[3])
                    + (other.group3()[2] * self.group6()[1])),
                ((other.group0()[0] * self.group8()[2]) + (other.group0()[1] * self[e1]) - (other.group0()[2] * self.group8()[0])
                    + (self.group7()[0] * other.group2()[2])
                    + (self.group8()[1] * other.group2()[3])
                    + (other.group1()[1] * self.group6()[3])
                    + (other.group1()[3] * self.group6()[1])
                    - (other.group2()[1] * self.group1()[3])
                    + (other.group3()[0] * self.group6()[2])),
                (-(other.group0()[0] * self.group8()[1])
                    + (other.group0()[1] * self.group8()[0])
                    + (other.group0()[2] * self[e1])
                    + (self.group7()[1] * other.group2()[0])
                    + (self.group8()[2] * other.group2()[3])
                    + (other.group1()[2] * self.group6()[3])
                    + (other.group1()[3] * self.group6()[2])
                    - (other.group2()[2] * self.group1()[3])
                    + (other.group3()[1] * self.group6()[0])),
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[1]) - (other.group0()[1] * self.group6()[1]) + (other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group6()[2])
                    - (self.group7()[1] * other.group1()[1])
                    - (self.group7()[1] * other.group3()[1])
                    - (self.group7()[2] * other.group1()[2])
                    - (self.group7()[2] * other.group3()[2])),
            ]) + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[3]]))
                - (Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group7()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[0], self.group6()[3]]) * swizzle!(other.group2(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group0()[0]]) * swizzle!(self.group6(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group7()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group6()[3], self.group1()[2], self.group1()[0], self.group1()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))),
            // e5
            ((self.group0()[1] * other.group3()[3]) - (self.group8()[0] * other.group1()[0]) + (self.group8()[0] * other.group3()[0]) - (self.group8()[1] * other.group1()[1])
                + (self.group8()[1] * other.group3()[1])
                - (self.group8()[2] * other.group1()[2])
                + (self.group8()[2] * other.group3()[2])
                - (other.group1()[3] * self[e1])
                - (other.group2()[0] * self.group1()[0])
                - (other.group2()[0] * self.group6()[0])
                - (other.group2()[1] * self.group1()[1])
                - (other.group2()[1] * self.group6()[1])
                - (other.group2()[2] * self.group1()[2])
                - (other.group2()[2] * self.group6()[2])
                + (other.group3()[3] * self.group6()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) + (self.group5()[1] * other.group2()[2]) + (other.group1()[0] * self.group9()[3]) + (other.group2()[1] * self.group9()[2])
                    - (other.group3()[2] * self.group3()[1])),
                ((self.group0()[0] * other.group2()[1]) + (self.group5()[2] * other.group2()[0]) + (other.group1()[1] * self.group9()[3]) + (other.group2()[2] * self.group9()[0])
                    - (other.group3()[0] * self.group3()[2])),
                ((self.group0()[0] * other.group2()[2]) + (self.group5()[0] * other.group2()[1]) + (other.group1()[2] * self.group9()[3]) + (other.group2()[0] * self.group9()[1])
                    - (other.group3()[1] * self.group3()[0])),
                ((other.group0()[2] * self.group3()[2]) + (self.group5()[1] * other.group3()[1]) + (self.group5()[2] * other.group3()[2]) - (other.group2()[3] * self.group9()[3])
                    + (other.group3()[3] * self[e45])),
            ]) + (Simd32x4::from([self.group5()[0], self.group5()[1], self.group5()[2], self.group5()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group4()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[1]]) * swizzle!(self.group9(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group0()[1]]) * swizzle!(self.group3(), 2, 0, 1, 1))
                - (Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group1()[2]]) * swizzle!(self.group9(), 0, 1, 2, 2))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group9()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group3()[3], self.group9()[2], self.group9()[0], self.group4()[1]]) * swizzle!(other.group2(), 0, 0, 1, 1))
                - (Simd32x4::from([self.group9()[1], self.group3()[3], self.group3()[3], self.group4()[2]]) * swizzle!(other.group2(), 2, 1, 2, 2))),
            // e41, e42, e43
            ((Simd32x3::from(self.group0()[0]) * other.group0())
                + (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(other.group2()[3]) * self.group5())
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from([self.group5()[1], self.group9()[2], self.group9()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                - (Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]) * swizzle!(self.group4(), 2, 0, 1))
                + (Simd32x3::from([other.group1()[2], other.group1()[0], other.group3()[1]]) * swizzle!(self.group4(), 1, 2, 0))
                + (Simd32x3::from([other.group1()[3], other.group1()[3], other.group1()[1]]) * swizzle!(self.group4(), 0, 1, 0))
                - (Simd32x3::from([other.group3()[1], other.group3()[2], other.group3()[0]]) * swizzle!(self.group4(), 2, 0, 1))
                + (Simd32x3::from([other.group3()[2], other.group3()[0], other.group1()[3]]) * swizzle!(self.group4(), 1, 2, 2))
                + (Simd32x3::from([self.group3()[3], self.group5()[2], self.group5()[0]]) * swizzle!(other.group0(), 0, 0, 1))
                + (Simd32x3::from([self.group9()[1], self.group3()[3], self.group3()[3]]) * swizzle!(other.group0(), 2, 1, 2))
                - (Simd32x3::from([self.group9()[2], self.group9()[0], self.group9()[1]]) * swizzle!(other.group0(), 1, 2, 0))
                - (swizzle!(other.group0(), 1, 2, 0) * swizzle!(self.group5(), 2, 0, 1))),
            // e23, e31, e12
            (Simd32x3::from([
                ((other.group3()[1] * self.group9()[2]) - (other.group3()[2] * self.group9()[1])),
                (-(other.group3()[0] * self.group9()[2]) + (other.group3()[2] * self.group9()[0])),
                ((other.group3()[0] * self.group9()[1]) - (other.group3()[1] * self.group9()[0])),
            ]) + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                - (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                - (Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]) * swizzle!(self.group5(), 2, 0, 1))
                + (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]) * swizzle!(self.group5(), 1, 2, 0))
                - (Simd32x3::from([other.group2()[1], other.group2()[2], other.group2()[0]]) * swizzle!(self.group4(), 2, 0, 1))
                + (Simd32x3::from([other.group2()[2], other.group2()[0], other.group3()[3]]) * swizzle!(self.group4(), 1, 2, 2))
                + (Simd32x3::from([other.group3()[3], other.group3()[3], other.group2()[1]]) * swizzle!(self.group4(), 0, 1, 0))
                + (Simd32x3::from([self.group3()[1], self.group9()[3], self.group9()[3]]) * swizzle!(other.group0(), 2, 1, 2))
                - (Simd32x3::from([self.group3()[2], self.group3()[0], self.group3()[1]]) * swizzle!(other.group0(), 1, 2, 0))
                + (Simd32x3::from([self.group9()[3], self.group3()[2], self.group3()[0]]) * swizzle!(other.group0(), 0, 0, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[1] * self.group8()[2]) + (other.group0()[2] * self.group8()[1]) + (self.group7()[0] * other.group3()[3])
                    - (self.group7()[2] * other.group2()[1])
                    + (other.group1()[2] * self.group6()[1])
                    + (other.group1()[3] * self.group1()[0])
                    + (other.group3()[0] * self.group6()[3])
                    + (other.group3()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group8()[2]) - (other.group0()[2] * self.group8()[0]) - (self.group7()[0] * other.group2()[2])
                    + (self.group7()[1] * other.group3()[3])
                    + (other.group1()[0] * self.group6()[2])
                    + (other.group1()[3] * self.group1()[1])
                    + (other.group3()[0] * self.group1()[2])
                    + (other.group3()[1] * self.group6()[3])),
                (-(other.group0()[0] * self.group8()[1]) + (other.group0()[1] * self.group8()[0]) - (self.group7()[1] * other.group2()[0])
                    + (self.group7()[2] * other.group3()[3])
                    + (other.group1()[1] * self.group6()[0])
                    + (other.group1()[3] * self.group1()[2])
                    + (other.group3()[1] * self.group1()[0])
                    + (other.group3()[2] * self.group6()[3])),
                (-(other.group0()[0] * self.group8()[0])
                    - (other.group0()[1] * self.group8()[1])
                    - (other.group0()[2] * self.group8()[2])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group3()[0] * self.group6()[0])
                    - (other.group3()[1] * self.group6()[1])
                    - (other.group3()[2] * self.group6()[2])
                    - (other.group3()[3] * self.group1()[3])),
            ]) + (Simd32x4::from(self.group0()[1]) * other.group1())
                + (Simd32x4::from(self[e1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                + (Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[0], self.group7()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group8()[0], self.group8()[1], self.group8()[2], self.group7()[1]]) * swizzle!(other.group2(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[1]]) * swizzle!(self.group1(), 2, 0, 1, 1))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group7()[2]]) * swizzle!(other.group2(), 0, 1, 2, 2))
                - (Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e423, e431, e412
            ((Simd32x3::from(self.group0()[1]) * other.group0())
                - (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group6()[3], self.group1()[2], self.group6()[1]]))
                - (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group6()[2], self.group6()[3], self.group1()[0]]))
                - (Simd32x3::from(other.group0()[2]) * Simd32x3::from([self.group1()[1], self.group6()[0], self.group6()[3]]))
                - (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                - (Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]) * swizzle!(self.group7(), 2, 0, 1))
                + (Simd32x3::from([other.group1()[2], other.group1()[0], other.group3()[1]]) * swizzle!(self.group7(), 1, 2, 0))
                + (Simd32x3::from([other.group1()[3], other.group1()[3], other.group1()[1]]) * swizzle!(self.group7(), 0, 1, 0))
                - (Simd32x3::from([other.group3()[1], other.group3()[2], other.group3()[0]]) * swizzle!(self.group7(), 2, 0, 1))
                + (Simd32x3::from([other.group3()[2], other.group3()[0], other.group1()[3]]) * swizzle!(self.group7(), 1, 2, 2))
                + (Simd32x3::from([self.group1()[2], self.group6()[2], self.group1()[1]]) * swizzle!(other.group0(), 1, 0, 0))
                + (Simd32x3::from([self.group6()[1], self.group1()[0], self.group6()[0]]) * swizzle!(other.group0(), 2, 2, 1))),
            // e235, e315, e125
            (Simd32x3::from([
                (-(other.group2()[1] * self.group1()[2]) - (other.group2()[1] * self.group6()[2])
                    + (other.group2()[2] * self.group1()[1])
                    + (other.group2()[2] * self.group6()[1])),
                ((other.group2()[0] * self.group1()[2]) + (other.group2()[0] * self.group6()[2]) - (other.group2()[2] * self.group1()[0]) - (other.group2()[2] * self.group6()[0])),
                (-(other.group2()[0] * self.group1()[1]) - (other.group2()[0] * self.group6()[1])
                    + (other.group2()[1] * self.group1()[0])
                    + (other.group2()[1] * self.group6()[0])),
            ]) + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                - (Simd32x3::from(self.group8()[0]) * Simd32x3::from([other.group1()[3], other.group1()[2], other.group3()[1]]))
                - (Simd32x3::from(self.group8()[1]) * Simd32x3::from([other.group3()[2], other.group1()[3], other.group1()[0]]))
                - (Simd32x3::from(self.group8()[2]) * Simd32x3::from([other.group1()[1], other.group3()[0], other.group1()[3]]))
                + (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                + (Simd32x3::from(self.group6()[3]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                + (Simd32x3::from(self[e1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(self[e1]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from([other.group1()[2], other.group3()[2], other.group1()[1]]) * swizzle!(self.group8(), 1, 0, 0))
                + (Simd32x3::from([other.group3()[1], other.group1()[0], other.group3()[0]]) * swizzle!(self.group8(), 2, 2, 1))),
            // e4235, e4315, e4125, e3215
            (-Simd32x4::from([
                (self.group5()[1] * other.group3()[2]),
                (self.group5()[2] * other.group3()[0]),
                (self.group5()[0] * other.group3()[1]),
                (self.group5()[2] * other.group2()[2]),
            ]) + (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group4()[0], self.group4()[1], self.group4()[2], self.group0()[0]]))
                - (Simd32x4::from(self.group9()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group3()[3]]) * other.group3())
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group3(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group4()[1], self.group4()[2], self.group4()[0], self.group9()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group4()[2], self.group4()[0], self.group4()[1], self.group5()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group5()[0], self.group5()[1], self.group5()[2], self.group3()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group3()[1]]) * swizzle!(other.group3(), 1, 2, 0, 1))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[2]]) * swizzle!(self.group3(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[1]]) * swizzle!(self.group9(), 1, 2, 0, 1))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group5()[1]]) * swizzle!(other.group2(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group9()[2], self.group9()[0], self.group9()[1], self.group3()[2]]) * swizzle!(other.group1(), 1, 2, 0, 2))
                + (Simd32x4::from([self[e45], self[e45], self[e45], self.group9()[2]]) * swizzle!(other.group2(), 0, 1, 2, 2))),
            // e1234
            ((self.group0()[0] * other.group2()[3])
                - (other.group0()[0] * self.group5()[0])
                - (other.group0()[0] * self.group9()[0])
                - (other.group0()[1] * self.group5()[1])
                - (other.group0()[1] * self.group9()[1])
                - (other.group0()[2] * self.group5()[2])
                - (other.group0()[2] * self.group9()[2])
                - (self.group4()[0] * other.group1()[0])
                - (self.group4()[0] * other.group3()[0])
                - (self.group4()[1] * other.group1()[1])
                - (self.group4()[1] * other.group3()[1])
                - (self.group4()[2] * other.group1()[2])
                - (self.group4()[2] * other.group3()[2])
                + (other.group1()[3] * self[e45])
                + (other.group2()[3] * self.group3()[3])),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum321> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       12        0
    //    simd2        1        3        0
    //    simd3        4        8        0
    //    simd4        3        9        0
    // Totals...
    // yes simd       14       32        0
    //  no simd       32       78        0
    fn geometric_anti_product(self, other: AntiDualNum321) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from(other.group0()[1]) * swizzle!(self.group0(), 1, 0) * Simd32x2::from([1.0, -1.0]))
                - (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group6()[3], self.group3()[3]]))),
            // e1, e2, e3, e4
            ((Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group9()[0], self.group9()[1], self.group9()[2], self[e45]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group5()[0], self.group5()[1], self.group5()[2], self[e45]]))),
            // e5
            (-(other.group0()[0] * self.group9()[3]) - (other.group0()[1] * self.group9()[3])),
            // e15, e25, e35, e45
            ((Simd32x4::from(other.group0()[1])
                * Simd32x4::from([self.group8()[0], self.group8()[1], self.group8()[2], self.group6()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group8()[0], self.group8()[1], self.group8()[2], self.group0()[1]]))),
            // e41, e42, e43
            (-(Simd32x3::from(other.group0()[0]) * self.group7()) + (Simd32x3::from(other.group0()[1]) * self.group7())),
            // e23, e31, e12
            (-(Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group9()[0]) - (other.group0()[1] * self.group5()[0])),
                (-(other.group0()[0] * self.group9()[1]) - (other.group0()[1] * self.group5()[1])),
                (-(other.group0()[0] * self.group9()[2]) - (other.group0()[1] * self.group5()[2])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group3()[3])),
            ]),
            // e423, e431, e412
            ((Simd32x3::from(other.group0()[0]) * self.group4()) - (Simd32x3::from(other.group0()[1]) * self.group4())),
            // e235, e315, e125
            (-(Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                - (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self[e1]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group6()[0], self.group6()[1], self.group6()[2], self[e1]]))),
            // e1234
            (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group1()[3])),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum4> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       26        0
    //    simd3        5       10        0
    //    simd4        2        4        0
    // Totals...
    // yes simd       16       40        0
    //  no simd       32       72        0
    fn geometric_anti_product(self, other: AntiDualNum4) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((other.group0()[0] * self[e1]) + (other.group0()[1] * self.group0()[1])),
                (-(other.group0()[0] * self.group9()[3]) - (other.group0()[1] * self.group0()[0])),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (other.group0()[1] * self.group9()[0]),
                (other.group0()[1] * self.group9()[1]),
                (other.group0()[1] * self.group9()[2]),
                (-(other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self[e45])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[0]]))),
            // e5
            (other.group0()[1] * self.group9()[3] * -1.0),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other.group0()[1] * self.group8()[0]),
                (other.group0()[1] * self.group8()[1]),
                (other.group0()[1] * self.group8()[2]),
                (-(other.group0()[0] * self[e1]) - (other.group0()[1] * self.group6()[3])),
            ]),
            // e41, e42, e43
            (-(Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                + (Simd32x3::from(other.group0()[1]) * self.group7())),
            // e23, e31, e12
            ((Simd32x3::from(other.group0()[0]) * self.group8()) + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))),
            // e415, e425, e435, e321
            ((Simd32x4::from(other.group0()[1])
                * Simd32x4::from([self.group5()[0], self.group5()[1], self.group5()[2], self.group3()[3]])
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group9()[3]]))),
            // e423, e431, e412
            (-(Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                - (Simd32x3::from(other.group0()[0]) * self.group5())
                - (Simd32x3::from(other.group0()[1]) * self.group4())),
            // e235, e315, e125
            (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]) * Simd32x3::from(-1.0)),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group8()[0]) - (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[0] * self.group8()[1]) - (other.group0()[1] * self.group1()[1])),
                (-(other.group0()[0] * self.group8()[2]) - (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self[e1]),
            ]),
            // e1234
            ((other.group0()[0] * self.group0()[1]) - (other.group0()[0] * self.group6()[3]) + (other.group0()[1] * self.group1()[3])),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum5> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       40        0
    //    simd3        3        8        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       20       50        0
    //  no simd       32       72        0
    fn geometric_anti_product(self, other: AntiDualNum5) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group0()[1])),
                (-(other.group0()[0] * self[e45]) - (other.group0()[1] * self.group0()[0])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group4()[0]) + (other.group0()[1] * self.group9()[0])),
                ((other.group0()[0] * self.group4()[1]) + (other.group0()[1] * self.group9()[1])),
                ((other.group0()[0] * self.group4()[2]) + (other.group0()[1] * self.group9()[2])),
                (other.group0()[1] * self[e45] * -1.0),
            ]),
            // e5
            (-(other.group0()[0] * self.group0()[0]) + (other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self.group9()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group6()[0]) + (other.group0()[1] * self.group8()[0])),
                ((other.group0()[0] * self.group6()[1]) + (other.group0()[1] * self.group8()[1])),
                ((other.group0()[0] * self.group6()[2]) + (other.group0()[1] * self.group8()[2])),
                ((other.group0()[1] * self.group6()[3]) * -1.0),
            ]) + (Simd32x4::from(other.group0()[0]) * self.group1())),
            // e41, e42, e43
            (Simd32x3::from(other.group0()[1]) * self.group7()),
            // e23, e31, e12
            ((Simd32x3::from(other.group0()[0]) * self.group7()) + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group4()[0]) - (other.group0()[1] * self.group5()[0])),
                (-(other.group0()[0] * self.group4()[1]) - (other.group0()[1] * self.group5()[1])),
                (-(other.group0()[0] * self.group4()[2]) - (other.group0()[1] * self.group5()[2])),
                ((other.group0()[0] * self[e45]) + (other.group0()[1] * self.group3()[3])),
            ]),
            // e423, e431, e412
            (Simd32x3::from(other.group0()[1]) * self.group4() * Simd32x3::from(-1.0)),
            // e235, e315, e125
            ((Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                - (Simd32x3::from(other.group0()[0]) * self.group5())
                - (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[0]) * -1.0),
                ((other.group0()[1] * self.group1()[1]) * -1.0),
                ((other.group0()[1] * self.group1()[2]) * -1.0),
                ((other.group0()[0] * self.group6()[3]) + (other.group0()[1] * self[e1])),
            ]) + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group0()[1]]))),
            // e1234
            (other.group0()[1] * self.group1()[3]),
        );
    }
}
impl GeometricAntiProduct<AntiFlatPoint> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       45        0
    //    simd2        3        5        0
    //    simd3        6        9        0
    //    simd4       11       13        0
    // Totals...
    // yes simd       52       72        0
    //  no simd      100      134        0
    fn geometric_anti_product(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from(other.group0()[3]) * Simd32x2::from([self.group3()[3], self.group6()[3]]) * Simd32x2::from([-1.0, 1.0]))
                - (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group4()[0], self.group7()[0]]))
                - (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group4()[1], self.group7()[1]]))
                - (Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group4()[2], self.group7()[2]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group7()[1] * other.group0()[2]) + (self.group7()[2] * other.group0()[1]) - (other.group0()[0] * self.group1()[3])
                    + (other.group0()[3] * self.group6()[0])),
                ((self.group7()[0] * other.group0()[2]) - (self.group7()[2] * other.group0()[0]) - (other.group0()[1] * self.group1()[3]) + (other.group0()[3] * self.group6()[1])),
                (-(self.group7()[0] * other.group0()[1]) + (self.group7()[1] * other.group0()[0]) - (other.group0()[2] * self.group1()[3])
                    + (other.group0()[3] * self.group6()[2])),
                (other.group0()[3] * self.group1()[3]),
            ]),
            // e5
            (-(other.group0()[0] * self.group1()[0])
                - (other.group0()[0] * self.group6()[0])
                - (other.group0()[1] * self.group1()[1])
                - (other.group0()[1] * self.group6()[1])
                - (other.group0()[2] * self.group1()[2])
                - (other.group0()[2] * self.group6()[2])
                - (other.group0()[3] * self[e1])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group5()[1] * other.group0()[2]) + (other.group0()[1] * self.group9()[2])),
                ((self.group0()[0] * other.group0()[1]) + (self.group5()[2] * other.group0()[0]) + (other.group0()[2] * self.group9()[0])),
                ((self.group0()[0] * other.group0()[2]) + (self.group5()[0] * other.group0()[1]) + (other.group0()[0] * self.group9()[1])),
                0.0,
            ]) - (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group4()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group3()[3], self.group9()[2], self.group9()[0], self.group4()[0]]) * swizzle!(other.group0(), 0, 0, 1, 0))
                - (Simd32x4::from([self.group9()[1], self.group3()[3], self.group3()[3], self.group4()[1]]) * swizzle!(other.group0(), 2, 1, 2, 1))),
            // e41, e42, e43
            (Simd32x3::from(other.group0()[3]) * self.group4()),
            // e23, e31, e12
            (-(Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group4(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group4(), 1, 2, 0))),
            // e415, e425, e435, e321
            ((Simd32x4::from([self.group7()[2], self.group7()[0], self.group7()[1], self.group7()[2]])
                * swizzle!(other.group0(), 1, 2, 0, 2)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[0], self.group0()[1]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group7()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group7()[0]]) * swizzle!(other.group0(), 0, 1, 2, 0))),
            // e423, e431, e412
            (Simd32x3::from(other.group0()[3]) * self.group7()),
            // e235, e315, e125
            (Simd32x3::from([
                (-(other.group0()[1] * self.group1()[2]) - (other.group0()[1] * self.group6()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (other.group0()[2] * self.group6()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[0] * self.group6()[2]) - (other.group0()[2] * self.group1()[0]) - (other.group0()[2] * self.group6()[0])),
                (-(other.group0()[0] * self.group1()[1]) - (other.group0()[0] * self.group6()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[1] * self.group6()[0])),
            ]) + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from(other.group0()[3]) * self.group8())
                + (Simd32x3::from(self.group6()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group5()[2] * other.group0()[2]) + (other.group0()[2] * self.group9()[2]) - (other.group0()[3] * self.group9()[3])),
            ]) + (Simd32x4::from([self.group4()[1], self.group4()[2], self.group4()[0], self.group9()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group4()[2], self.group4()[0], self.group4()[1], self.group5()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group5()[0], self.group5()[1], self.group5()[2], self.group5()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([self[e45], self[e45], self[e45], self.group9()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e1234
            (other.group0()[3] * self[e45]),
        );
    }
}
impl GeometricAntiProduct<AntiFlector> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       76      106        0
    //    simd2        4        4        0
    //    simd3       20       22        0
    //    simd4       20       20        0
    // Totals...
    // yes simd      120      152        0
    //  no simd      224      260        0
    fn geometric_anti_product(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                (-(other.group0()[3] * self.group3()[3])
                    + (other.group1()[0] * self.group9()[0])
                    + (other.group1()[1] * self.group9()[1])
                    + (other.group1()[2] * self.group9()[2])),
                ((other.group0()[3] * self.group6()[3]) - (other.group1()[0] * self.group1()[0]) - (other.group1()[1] * self.group1()[1]) - (other.group1()[2] * self.group1()[2])),
            ]) - (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group4()[0], self.group7()[0]]))
                - (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group4()[1], self.group7()[1]]))
                - (Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group4()[2], self.group7()[2]]))
                + (Simd32x2::from(other.group1()[3]) * Simd32x2::from([self[e45], self.group1()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[0]) - (self.group7()[1] * other.group0()[2]) - (other.group0()[0] * self.group1()[3])
                    + (other.group0()[3] * self.group6()[0])
                    + (other.group1()[2] * self.group6()[1])),
                ((self.group0()[1] * other.group1()[1]) - (self.group7()[2] * other.group0()[0]) - (other.group0()[1] * self.group1()[3])
                    + (other.group0()[3] * self.group6()[1])
                    + (other.group1()[0] * self.group6()[2])),
                ((self.group0()[1] * other.group1()[2]) - (self.group7()[0] * other.group0()[1]) - (other.group0()[2] * self.group1()[3])
                    + (other.group0()[3] * self.group6()[2])
                    + (other.group1()[1] * self.group6()[0])),
                ((self.group7()[2] * other.group1()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group7()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group7()[2], self.group7()[0], self.group7()[1], self.group1()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group7()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))),
            // e5
            ((self.group0()[1] * other.group1()[3]) + (self.group8()[0] * other.group1()[0]) + (self.group8()[1] * other.group1()[1]) + (self.group8()[2] * other.group1()[2])
                - (other.group0()[0] * self.group1()[0])
                - (other.group0()[0] * self.group6()[0])
                - (other.group0()[1] * self.group1()[1])
                - (other.group0()[1] * self.group6()[1])
                - (other.group0()[2] * self.group1()[2])
                - (other.group0()[2] * self.group6()[2])
                - (other.group0()[3] * self[e1])
                + (other.group1()[3] * self.group6()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group5()[1] * other.group0()[2]) + (other.group0()[1] * self.group9()[2])
                    - (other.group1()[0] * self.group9()[3])
                    - (other.group1()[2] * self.group3()[1])
                    - (other.group1()[3] * self.group9()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group5()[2] * other.group0()[0]) + (other.group0()[2] * self.group9()[0])
                    - (other.group1()[0] * self.group3()[2])
                    - (other.group1()[1] * self.group9()[3])
                    - (other.group1()[3] * self.group9()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group5()[0] * other.group0()[1]) + (other.group0()[0] * self.group9()[1])
                    - (other.group1()[1] * self.group3()[0])
                    - (other.group1()[2] * self.group9()[3])
                    - (other.group1()[3] * self.group9()[2])),
                ((self.group5()[2] * other.group1()[2]) + (other.group1()[3] * self[e45])),
            ]) + (Simd32x4::from([self.group5()[0], self.group5()[1], self.group5()[2], self.group5()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group4()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group5()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))
                - (Simd32x4::from([self.group3()[3], self.group9()[2], self.group9()[0], self.group4()[0]]) * swizzle!(other.group0(), 0, 0, 1, 0))
                - (Simd32x4::from([self.group9()[1], self.group3()[3], self.group3()[3], self.group4()[1]]) * swizzle!(other.group0(), 2, 1, 2, 1))),
            // e41, e42, e43
            ((Simd32x3::from(self[e45]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from([other.group0()[3], other.group0()[3], other.group1()[1]]) * swizzle!(self.group4(), 0, 1, 0))
                - (Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]) * swizzle!(self.group4(), 2, 0, 1))
                + (Simd32x3::from([other.group1()[2], other.group1()[0], other.group0()[3]]) * swizzle!(self.group4(), 1, 2, 2))),
            // e23, e31, e12
            (Simd32x3::from([
                ((other.group1()[1] * self.group9()[2]) - (other.group1()[2] * self.group9()[1])),
                (-(other.group1()[0] * self.group9()[2]) + (other.group1()[2] * self.group9()[0])),
                ((other.group1()[0] * self.group9()[1]) - (other.group1()[1] * self.group9()[0])),
            ]) - (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                - (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group4(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group4(), 1, 2, 2))
                + (Simd32x3::from([other.group1()[3], other.group1()[3], other.group0()[1]]) * swizzle!(self.group4(), 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group7()[0] * other.group1()[3]) - (self.group7()[2] * other.group0()[1]) + (other.group1()[0] * self.group6()[3]) + (other.group1()[2] * self.group1()[1])),
                (-(self.group7()[0] * other.group0()[2])
                    + (self.group7()[1] * other.group1()[3])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group6()[3])),
                (-(self.group7()[1] * other.group0()[0])
                    + (self.group7()[2] * other.group1()[3])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group6()[3])),
                ((self.group7()[2] * other.group0()[2]) - (other.group1()[1] * self.group6()[1]) - (other.group1()[2] * self.group6()[2]) - (other.group1()[3] * self.group1()[3])),
            ]) + (Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[0], self.group0()[1]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group7()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group6()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group7()[0]]) * swizzle!(other.group0(), 0, 1, 2, 0))),
            // e423, e431, e412
            ((Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from([other.group0()[3], other.group0()[3], other.group1()[1]]) * swizzle!(self.group7(), 0, 1, 0))
                - (Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]) * swizzle!(self.group7(), 2, 0, 1))
                + (Simd32x3::from([other.group1()[2], other.group1()[0], other.group0()[3]]) * swizzle!(self.group7(), 1, 2, 2))),
            // e235, e315, e125
            (Simd32x3::from([
                (-(other.group0()[1] * self.group1()[2]) - (other.group0()[1] * self.group6()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (other.group0()[2] * self.group6()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[0] * self.group6()[2]) - (other.group0()[2] * self.group1()[0]) - (other.group0()[2] * self.group6()[0])),
                (-(other.group0()[0] * self.group1()[1]) - (other.group0()[0] * self.group6()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[1] * self.group6()[0])),
            ]) + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                + (Simd32x3::from(self.group6()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from(self[e1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from([other.group0()[3], other.group0()[3], other.group1()[1]]) * swizzle!(self.group8(), 0, 1, 0))
                + (Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]) * swizzle!(self.group8(), 2, 0, 1))
                - (Simd32x3::from([other.group1()[2], other.group1()[0], other.group0()[3]]) * swizzle!(self.group8(), 1, 2, 2))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group5()[1] * other.group1()[2]) * -1.0),
                ((self.group5()[2] * other.group1()[0]) * -1.0),
                ((self.group5()[0] * other.group1()[1]) * -1.0),
                (-(self.group5()[2] * other.group0()[2]) + (other.group0()[2] * self.group9()[2]) - (other.group0()[3] * self.group9()[3])
                    + (other.group1()[1] * self.group3()[1])
                    + (other.group1()[2] * self.group3()[2])),
            ]) + (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group4()[0], self.group4()[1], self.group4()[2], self.group0()[0]]))
                - (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group3()[3]]) * other.group1())
                + (Simd32x4::from([self.group4()[1], self.group4()[2], self.group4()[0], self.group9()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group4()[2], self.group4()[0], self.group4()[1], self.group5()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group5()[0], self.group5()[1], self.group5()[2], self.group5()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group3()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self[e45], self[e45], self[e45], self.group9()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e1234
            (-(self.group4()[0] * other.group1()[0]) - (self.group4()[1] * other.group1()[1]) - (self.group4()[2] * other.group1()[2]) + (other.group0()[3] * self[e45])),
        );
    }
}
impl GeometricAntiProduct<AntiLine> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       97      117        0
    //    simd3       17       21        0
    //    simd4        3        3        0
    // Totals...
    // yes simd      117      141        0
    //  no simd      160      192        0
    fn geometric_anti_product(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(other.group0()[0] * self.group6()[0])
                    - (other.group0()[1] * self.group6()[1])
                    - (other.group0()[2] * self.group6()[2])
                    - (other.group1()[0] * self.group7()[0])
                    - (other.group1()[1] * self.group7()[1])
                    - (other.group1()[2] * self.group7()[2])),
                ((other.group0()[0] * self.group5()[0])
                    + (other.group0()[1] * self.group5()[1])
                    + (other.group0()[2] * self.group5()[2])
                    + (other.group1()[0] * self.group4()[0])
                    + (other.group1()[1] * self.group4()[1])
                    + (other.group1()[2] * self.group4()[2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self.group9()[2]) + (other.group0()[2] * self.group9()[1]) + (other.group1()[0] * self[e45])
                    - (other.group1()[1] * self.group4()[2])
                    + (other.group1()[2] * self.group4()[1])),
                ((other.group0()[0] * self.group9()[2]) + (other.group0()[1] * self.group3()[3]) - (other.group0()[2] * self.group9()[0])
                    + (other.group1()[0] * self.group4()[2])
                    + (other.group1()[1] * self[e45])
                    - (other.group1()[2] * self.group4()[0])),
                (-(other.group0()[0] * self.group9()[1]) + (other.group0()[1] * self.group9()[0]) + (other.group0()[2] * self.group3()[3])
                    - (other.group1()[0] * self.group4()[1])
                    + (other.group1()[1] * self.group4()[0])
                    + (other.group1()[2] * self[e45])),
                ((other.group0()[0] * self.group4()[0]) + (other.group0()[1] * self.group4()[1]) + (other.group0()[2] * self.group4()[2])),
            ]),
            // e5
            ((other.group0()[0] * self.group3()[0]) + (other.group0()[1] * self.group3()[1]) + (other.group0()[2] * self.group3()[2]) + (other.group1()[0] * self.group5()[0])
                - (other.group1()[0] * self.group9()[0])
                + (other.group1()[1] * self.group5()[1])
                - (other.group1()[1] * self.group9()[1])
                + (other.group1()[2] * self.group5()[2])
                - (other.group1()[2] * self.group9()[2])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[0]) + (other.group0()[0] * self[e1]) - (other.group0()[1] * self.group8()[2])
                    + (other.group0()[2] * self.group8()[1])
                    + (other.group1()[0] * self.group6()[3])
                    - (other.group1()[1] * self.group1()[2])
                    - (other.group1()[1] * self.group6()[2])
                    + (other.group1()[2] * self.group6()[1])),
                ((self.group0()[1] * other.group1()[1]) + (other.group0()[0] * self.group8()[2]) + (other.group0()[1] * self[e1]) - (other.group0()[2] * self.group8()[0])
                    + (other.group1()[0] * self.group6()[2])
                    + (other.group1()[1] * self.group6()[3])
                    - (other.group1()[2] * self.group1()[0])
                    - (other.group1()[2] * self.group6()[0])),
                ((self.group0()[1] * other.group1()[2]) - (other.group0()[0] * self.group8()[1]) + (other.group0()[1] * self.group8()[0]) + (other.group0()[2] * self[e1])
                    - (other.group1()[0] * self.group1()[1])
                    - (other.group1()[0] * self.group6()[1])
                    + (other.group1()[1] * self.group6()[0])
                    + (other.group1()[2] * self.group6()[3])),
                ((other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2])
                    - (other.group1()[0] * self.group7()[0])
                    - (other.group1()[1] * self.group7()[1])
                    - (other.group1()[2] * self.group7()[2])),
            ]) + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e41, e42, e43
            ((Simd32x3::from([self.group7()[1], self.group1()[3], self.group1()[3]]) * swizzle!(other.group0(), 2, 1, 2))
                + (Simd32x3::from([self.group1()[3], self.group7()[2], self.group7()[0]]) * swizzle!(other.group0(), 0, 0, 1))
                - (swizzle!(other.group0(), 1, 2, 0) * swizzle!(self.group7(), 2, 0, 1))),
            // e23, e31, e12
            ((Simd32x3::from(self.group0()[1]) * other.group0())
                + (Simd32x3::from([self.group7()[1], self.group1()[3], self.group1()[3]]) * swizzle!(other.group1(), 2, 1, 2))
                + (Simd32x3::from([self.group1()[3], self.group7()[2], self.group7()[0]]) * swizzle!(other.group1(), 0, 0, 1))
                + (Simd32x3::from([self.group6()[1], self.group6()[2], self.group6()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                - (Simd32x3::from([self.group6()[2], self.group6()[0], self.group6()[1]]) * swizzle!(other.group0(), 1, 2, 0))
                - (swizzle!(other.group1(), 1, 2, 0) * swizzle!(self.group7(), 2, 0, 1))),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[0]) + (other.group0()[1] * self.group5()[2]) - (other.group0()[2] * self.group5()[1]) - (other.group1()[0] * self[e45])
                    + (other.group1()[1] * self.group4()[2])
                    - (other.group1()[2] * self.group4()[1])),
                (-(self.group0()[0] * other.group0()[1]) - (other.group0()[0] * self.group5()[2]) + (other.group0()[2] * self.group5()[0])
                    - (other.group1()[0] * self.group4()[2])
                    - (other.group1()[1] * self[e45])
                    + (other.group1()[2] * self.group4()[0])),
                (-(self.group0()[0] * other.group0()[2]) + (other.group0()[0] * self.group5()[1]) - (other.group0()[1] * self.group5()[0])
                    + (other.group1()[0] * self.group4()[1])
                    - (other.group1()[1] * self.group4()[0])
                    - (other.group1()[2] * self[e45])),
                (-(other.group0()[0] * self.group9()[0])
                    - (other.group0()[1] * self.group9()[1])
                    - (other.group0()[2] * self.group9()[2])
                    - (other.group1()[0] * self.group4()[0])
                    - (other.group1()[1] * self.group4()[1])
                    - (other.group1()[2] * self.group4()[2])),
            ]),
            // e423, e431, e412
            (-(Simd32x3::from([self.group4()[1], self[e45], self[e45]]) * swizzle!(other.group0(), 2, 1, 2))
                - (Simd32x3::from([self[e45], self.group4()[2], self.group4()[0]]) * swizzle!(other.group0(), 0, 0, 1))
                + (swizzle!(other.group0(), 1, 2, 0) * swizzle!(self.group4(), 2, 0, 1))),
            // e235, e315, e125
            (-(Simd32x3::from(self.group0()[0]) * other.group1())
                + (Simd32x3::from(other.group1()[0]) * Simd32x3::from([self.group3()[3], self.group9()[2], self.group5()[1]]))
                + (Simd32x3::from(other.group1()[1]) * Simd32x3::from([self.group5()[2], self.group3()[3], self.group9()[0]]))
                + (Simd32x3::from(other.group1()[2]) * Simd32x3::from([self.group9()[1], self.group5()[0], self.group3()[3]]))
                - (Simd32x3::from([self.group5()[1], self.group9()[0], self.group5()[0]]) * swizzle!(other.group1(), 2, 2, 1))
                - (Simd32x3::from([self.group3()[1], self.group9()[3], self.group9()[3]]) * swizzle!(other.group0(), 2, 1, 2))
                + (Simd32x3::from([self.group3()[2], self.group3()[0], self.group3()[1]]) * swizzle!(other.group0(), 1, 2, 0))
                - (Simd32x3::from([self.group9()[2], self.group5()[2], self.group9()[1]]) * swizzle!(other.group1(), 1, 0, 0))
                - (Simd32x3::from([self.group9()[3], self.group3()[2], self.group3()[0]]) * swizzle!(other.group0(), 0, 0, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) + (other.group1()[0] * self.group1()[3]) - (other.group1()[1] * self.group7()[2]) + (other.group1()[2] * self.group7()[1])),
                ((other.group0()[2] * self.group1()[0]) + (other.group1()[0] * self.group7()[2]) + (other.group1()[1] * self.group1()[3]) - (other.group1()[2] * self.group7()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group1()[0] * self.group7()[1]) + (other.group1()[1] * self.group7()[0]) + (other.group1()[2] * self.group1()[3])),
                (-(other.group0()[0] * self.group8()[0])
                    - (other.group0()[1] * self.group8()[1])
                    - (other.group0()[2] * self.group8()[2])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[1] * self.group6()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[2] * self.group6()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group6(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))),
            // e1234
            (-(other.group0()[0] * self.group7()[0]) - (other.group0()[1] * self.group7()[1]) - (other.group0()[2] * self.group7()[2])),
        );
    }
}
impl GeometricAntiProduct<AntiMotor> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       65       87        0
    //    simd3       20       22        0
    //    simd4       25       26        0
    // Totals...
    // yes simd      110      135        0
    //  no simd      225      257        0
    fn geometric_anti_product(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((self.group0()[1] * other.group0()[3])
                    - (self.group7()[0] * other.group1()[0])
                    - (self.group7()[1] * other.group1()[1])
                    - (self.group7()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group6()[0])
                    - (other.group0()[1] * self.group6()[1])
                    - (other.group0()[2] * self.group6()[2])
                    + (other.group1()[3] * self.group1()[3])),
                (-(self.group0()[0] * other.group0()[3])
                    + (self.group4()[0] * other.group1()[0])
                    + (self.group4()[1] * other.group1()[1])
                    + (self.group4()[2] * other.group1()[2])
                    + (self.group5()[0] * other.group0()[0])
                    + (self.group5()[1] * other.group0()[1])
                    + (self.group5()[2] * other.group0()[2])
                    - (other.group1()[3] * self[e45])),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group4()[0] * other.group1()[3]) + (self.group4()[1] * other.group1()[2]) - (self.group4()[2] * other.group1()[1]) + (other.group1()[0] * self[e45])),
                (-(self.group4()[0] * other.group1()[2]) + (self.group4()[1] * other.group1()[3]) + (self.group4()[2] * other.group1()[0]) + (other.group1()[1] * self[e45])),
                ((self.group4()[0] * other.group1()[1]) - (self.group4()[1] * other.group1()[0]) + (self.group4()[2] * other.group1()[3]) + (other.group1()[2] * self[e45])),
                0.0,
            ]) + (Simd32x4::from([self.group3()[3], self.group9()[2], self.group9()[0], self.group4()[0]]) * swizzle!(other.group0(), 0, 0, 1, 0))
                + (Simd32x4::from([self.group9()[0], self.group9()[1], self.group9()[2], self.group4()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group9()[1], self.group3()[3], self.group3()[3], self.group4()[1]]) * swizzle!(other.group0(), 2, 1, 2, 1))
                - (Simd32x4::from([self.group9()[2], self.group9()[0], self.group9()[1], self[e45]]) * swizzle!(other.group0(), 1, 2, 0, 3))),
            // e5
            (-(self.group0()[0] * other.group1()[3])
                + (self.group5()[0] * other.group1()[0])
                + (self.group5()[1] * other.group1()[1])
                + (self.group5()[2] * other.group1()[2])
                + (other.group0()[0] * self.group3()[0])
                + (other.group0()[1] * self.group3()[1])
                + (other.group0()[2] * self.group3()[2])
                - (other.group0()[3] * self.group9()[3])
                - (other.group1()[0] * self.group9()[0])
                - (other.group1()[1] * self.group9()[1])
                - (other.group1()[2] * self.group9()[2])
                + (other.group1()[3] * self.group3()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group1()[0] * self.group6()[3])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group1()[2] * self.group6()[1])
                    + (other.group1()[3] * self.group1()[0])
                    + (other.group1()[3] * self.group6()[0])),
                ((other.group1()[0] * self.group1()[2])
                    + (other.group1()[0] * self.group6()[2])
                    + (other.group1()[1] * self.group6()[3])
                    + (other.group1()[3] * self.group1()[1])
                    + (other.group1()[3] * self.group6()[1])),
                ((other.group1()[1] * self.group1()[0])
                    + (other.group1()[1] * self.group6()[0])
                    + (other.group1()[2] * self.group6()[3])
                    + (other.group1()[3] * self.group1()[2])
                    + (other.group1()[3] * self.group6()[2])),
                ((self.group7()[2] * other.group1()[2]) * -1.0),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group1()[3]]) * other.group1())
                + (Simd32x4::from([self.group8()[0], self.group8()[1], self.group8()[0], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 1, 0))
                + (Simd32x4::from([self.group8()[1], self.group8()[2], self.group8()[2], self.group1()[1]]) * swizzle!(other.group0(), 2, 0, 3, 1))
                - (Simd32x4::from([self.group8()[2], self.group8()[0], self.group8()[1], self.group6()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group7()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group7()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))
                + (Simd32x4::from([self[e1], self[e1], self[e1], self.group1()[2]]) * swizzle!(other.group0(), 0, 1, 2, 2))),
            // e41, e42, e43
            ((Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group7(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[3]]) * swizzle!(self.group7(), 1, 2, 2))
                + (Simd32x3::from([other.group0()[3], other.group0()[3], other.group0()[1]]) * swizzle!(self.group7(), 0, 1, 0))),
            // e23, e31, e12
            (Simd32x3::from([
                (-(other.group0()[1] * self.group6()[2]) + (other.group0()[2] * self.group6()[1])),
                ((other.group0()[0] * self.group6()[2]) - (other.group0()[2] * self.group6()[0])),
                (-(other.group0()[0] * self.group6()[1]) + (other.group0()[1] * self.group6()[0])),
            ]) + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]) * swizzle!(self.group7(), 2, 0, 1))
                + (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[3]]) * swizzle!(self.group7(), 1, 2, 2))
                + (Simd32x3::from([other.group1()[3], other.group1()[3], other.group1()[1]]) * swizzle!(self.group7(), 0, 1, 0))),
            // e415, e425, e435, e321
            (-(Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group9()[0]]) * swizzle!(other.group0(), 0, 1, 2, 0))
                - (Simd32x4::from([self.group4()[0], self.group4()[1], self.group4()[0], self.group4()[0]]) * swizzle!(other.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([self.group4()[1], self.group4()[2], self.group4()[2], self.group4()[1]]) * swizzle!(other.group1(), 2, 0, 3, 1))
                + (Simd32x4::from([self.group4()[2], self.group4()[0], self.group4()[1], self[e45]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group5()[0], self.group5()[1], self.group5()[0], self.group9()[1]]) * swizzle!(other.group0(), 3, 3, 1, 1))
                - (Simd32x4::from([self.group5()[1], self.group5()[2], self.group5()[2], self.group9()[2]]) * swizzle!(other.group0(), 2, 0, 3, 2))
                + (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group3()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([self[e45], self[e45], self[e45], self.group4()[2]]) * swizzle!(other.group1(), 0, 1, 2, 2))),
            // e423, e431, e412
            (-(Simd32x3::from(self[e45]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group4(), 2, 0, 1))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[3]]) * swizzle!(self.group4(), 1, 2, 2))
                - (Simd32x3::from([other.group0()[3], other.group0()[3], other.group0()[1]]) * swizzle!(self.group4(), 0, 1, 0))),
            // e235, e315, e125
            (Simd32x3::from([
                ((other.group0()[1] * self.group3()[2]) - (other.group0()[2] * self.group3()[1]) - (other.group1()[1] * self.group9()[2]) + (other.group1()[2] * self.group9()[1])),
                (-(other.group0()[0] * self.group3()[2]) + (other.group0()[2] * self.group3()[0]) + (other.group1()[0] * self.group9()[2])
                    - (other.group1()[2] * self.group9()[0])),
                ((other.group0()[0] * self.group3()[1]) - (other.group0()[1] * self.group3()[0]) - (other.group1()[0] * self.group9()[1]) + (other.group1()[1] * self.group9()[0])),
            ]) - (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(self.group9()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]) * swizzle!(self.group5(), 2, 0, 1))
                - (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[3]]) * swizzle!(self.group5(), 1, 2, 2))
                - (Simd32x3::from([other.group1()[3], other.group1()[3], other.group1()[1]]) * swizzle!(self.group5(), 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (other.group1()[0] * self.group1()[3]),
                (other.group1()[1] * self.group1()[3]),
                (other.group1()[2] * self.group1()[3]),
                (-(other.group1()[0] * self.group6()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[1] * self.group6()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[2] * self.group6()[2])),
            ]) + (Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[0], self.group0()[1]]) * swizzle!(other.group1(), 3, 3, 1, 3))
                + (Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[2], self.group6()[3]]) * swizzle!(other.group1(), 2, 0, 3, 3))
                - (Simd32x4::from([self.group7()[2], self.group7()[0], self.group7()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group8()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group1()[1], self.group6()[3], self.group6()[3], self.group8()[1]]) * swizzle!(other.group0(), 2, 1, 2, 1))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self[e1]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group6()[3], self.group1()[2], self.group1()[0], self.group8()[0]]) * swizzle!(other.group0(), 0, 0, 1, 0))),
            // e1234
            (-(self.group7()[0] * other.group0()[0]) - (self.group7()[1] * other.group0()[1]) - (self.group7()[2] * other.group0()[2]) + (other.group0()[3] * self.group1()[3])),
        );
    }
}
impl GeometricAntiProduct<AntiPlane> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       59        0
    //    simd2        1        1        0
    //    simd3       10       13        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       51       81        0
    //  no simd       96      132        0
    fn geometric_anti_product(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                ((other.group0()[0] * self.group9()[0]) + (other.group0()[1] * self.group9()[1]) + (other.group0()[2] * self.group9()[2])),
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])),
            ]) + (Simd32x2::from(other.group0()[3]) * Simd32x2::from([self[e45], self.group1()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[0]) + (other.group0()[2] * self.group6()[1])),
                ((self.group0()[1] * other.group0()[1]) + (other.group0()[0] * self.group6()[2])),
                ((self.group0()[1] * other.group0()[2]) + (other.group0()[1] * self.group6()[0])),
                ((self.group7()[2] * other.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group7()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group7()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))),
            // e5
            ((self.group0()[1] * other.group0()[3])
                + (self.group8()[0] * other.group0()[0])
                + (self.group8()[1] * other.group0()[1])
                + (self.group8()[2] * other.group0()[2])
                + (other.group0()[3] * self.group6()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                (-(other.group0()[0] * self.group9()[3]) - (other.group0()[2] * self.group3()[1]) - (other.group0()[3] * self.group9()[0])),
                (-(other.group0()[0] * self.group3()[2]) - (other.group0()[1] * self.group9()[3]) - (other.group0()[3] * self.group9()[1])),
                (-(other.group0()[1] * self.group3()[0]) - (other.group0()[2] * self.group9()[3]) - (other.group0()[3] * self.group9()[2])),
                ((self.group5()[2] * other.group0()[2]) + (other.group0()[3] * self[e45])),
            ]) + (Simd32x4::from([self.group5()[0], self.group5()[1], self.group5()[2], self.group5()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group5()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))),
            // e41, e42, e43
            ((Simd32x3::from(self[e45]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group4(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group4(), 1, 2, 0))),
            // e23, e31, e12
            (Simd32x3::from([
                ((other.group0()[1] * self.group9()[2]) - (other.group0()[2] * self.group9()[1])),
                (-(other.group0()[0] * self.group9()[2]) + (other.group0()[2] * self.group9()[0])),
                ((other.group0()[0] * self.group9()[1]) - (other.group0()[1] * self.group9()[0])),
            ]) + (Simd32x3::from(other.group0()[3]) * self.group4())
                - (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group7()[0] * other.group0()[3]) + (other.group0()[0] * self.group6()[3]) + (other.group0()[2] * self.group1()[1])),
                ((self.group7()[1] * other.group0()[3]) + (other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group6()[3])),
                ((self.group7()[2] * other.group0()[3]) + (other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group6()[3])),
                (-(other.group0()[1] * self.group6()[1]) - (other.group0()[2] * self.group6()[2]) - (other.group0()[3] * self.group1()[3])),
            ]) - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group6()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e423, e431, e412
            ((Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group7(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group7(), 1, 2, 0))),
            // e235, e315, e125
            ((Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                - (Simd32x3::from(self[e1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group8(), 2, 0, 1))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group8(), 1, 2, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group5()[1] * other.group0()[2]) * -1.0),
                ((self.group5()[2] * other.group0()[0]) * -1.0),
                ((self.group5()[0] * other.group0()[1]) * -1.0),
                ((other.group0()[1] * self.group3()[1]) + (other.group0()[2] * self.group3()[2])),
            ]) + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group4()[0], self.group4()[1], self.group4()[2], self.group0()[0]]))
                - (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group3()[3]]) * other.group0())
                + (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group3()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e1234
            (-(self.group4()[0] * other.group0()[0]) - (self.group4()[1] * other.group0()[1]) - (self.group4()[2] * other.group0()[2])),
        );
    }
}
impl GeometricAntiProduct<AntiQuadNum> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       30       50        0
    //    simd2        1        1        0
    //    simd3       12       16        0
    //    simd4        7        7        0
    // Totals...
    // yes simd       50       74        0
    //  no simd       96      128        0
    fn geometric_anti_product(self, other: AntiQuadNum) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                ((self.group0()[1] * other.group0()[3]) + (other.group0()[0] * self[e1]) + (other.group0()[1] * self.group1()[3])),
                (-(self.group0()[0] * other.group0()[3]) - (other.group0()[0] * self.group9()[3]) - (other.group0()[1] * self[e45])),
            ]) - (Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group6()[3], self.group3()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group5()[0] * other.group0()[2]) + (other.group0()[3] * self.group9()[0])),
                ((self.group5()[1] * other.group0()[2]) + (other.group0()[3] * self.group9()[1])),
                ((self.group5()[2] * other.group0()[2]) + (other.group0()[3] * self.group9()[2])),
                (-(other.group0()[0] * self.group3()[3]) - (other.group0()[3] * self[e45])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[0]]))
                + (Simd32x4::from([self.group4()[0], self.group4()[1], self.group4()[2], self[e45]]) * swizzle!(other.group0(), 1, 1, 1, 2))),
            // e5
            (-(self.group0()[0] * other.group0()[1]) + (other.group0()[1] * self.group3()[3]) - (other.group0()[2] * self.group9()[3]) - (other.group0()[3] * self.group9()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[0]) + (other.group0()[1] * self.group6()[0])),
                ((other.group0()[1] * self.group1()[1]) + (other.group0()[1] * self.group6()[1])),
                ((other.group0()[1] * self.group1()[2]) + (other.group0()[1] * self.group6()[2])),
                (-(other.group0()[0] * self[e1]) - (other.group0()[3] * self.group6()[3])),
            ]) + (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group8()[0], self.group8()[1], self.group8()[2], self.group0()[1]]))
                + (Simd32x4::from([self.group8()[0], self.group8()[1], self.group8()[2], self.group1()[3]]) * swizzle!(other.group0(), 3, 3, 3, 1))),
            // e41, e42, e43
            (-(Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                - (Simd32x3::from(other.group0()[2]) * self.group7())
                + (Simd32x3::from(other.group0()[3]) * self.group7())),
            // e23, e31, e12
            ((Simd32x3::from(other.group0()[0]) * self.group8()) + (Simd32x3::from(other.group0()[1]) * self.group7())
                - (Simd32x3::from(other.group0()[2]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(self.group5()[0] * other.group0()[3]) - (other.group0()[0] * self.group3()[0]) - (other.group0()[2] * self.group9()[0])),
                (-(self.group5()[1] * other.group0()[3]) - (other.group0()[0] * self.group3()[1]) - (other.group0()[2] * self.group9()[1])),
                (-(self.group5()[2] * other.group0()[3]) - (other.group0()[0] * self.group3()[2]) - (other.group0()[2] * self.group9()[2])),
                ((self.group0()[0] * other.group0()[2]) + (other.group0()[1] * self[e45]) + (other.group0()[3] * self.group3()[3])),
            ]) - (Simd32x4::from([self.group4()[0], self.group4()[1], self.group4()[2], self.group9()[3]]) * swizzle!(other.group0(), 1, 1, 1, 0))),
            // e423, e431, e412
            (-(Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]])) - (Simd32x3::from(other.group0()[0]) * self.group5())
                + (Simd32x3::from(other.group0()[2]) * self.group4())
                - (Simd32x3::from(other.group0()[3]) * self.group4())),
            // e235, e315, e125
            ((Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                - (Simd32x3::from(other.group0()[1]) * self.group5())
                - (Simd32x3::from(other.group0()[2]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                - (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group8()[0] * other.group0()[0]) - (other.group0()[3] * self.group1()[0])),
                (-(self.group8()[1] * other.group0()[0]) - (other.group0()[3] * self.group1()[1])),
                (-(self.group8()[2] * other.group0()[0]) - (other.group0()[3] * self.group1()[2])),
                ((other.group0()[2] * self[e1]) + (other.group0()[3] * self[e1])),
            ]) + (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group0()[1]]))
                + (swizzle!(other.group0(), 2, 2, 2, 1) * self.group6())),
            // e1234
            ((self.group0()[1] * other.group0()[0]) - (other.group0()[0] * self.group6()[3]) - (other.group0()[2] * self.group1()[3]) + (other.group0()[3] * self.group1()[3])),
        );
    }
}
impl GeometricAntiProduct<AntiScalar> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd2        0        1        0
    //    simd3        0        4        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0       11        0
    //  no simd        0       32        0
    fn geometric_anti_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from(other[e12345]) * self.group0()),
            // e1, e2, e3, e4
            (Simd32x4::from(other[e12345]) * self.group1()),
            // e5
            (other[e12345] * self[e1]),
            // e15, e25, e35, e45
            (Simd32x4::from(other[e12345]) * self.group3()),
            // e41, e42, e43
            (Simd32x3::from(other[e12345]) * self.group4()),
            // e23, e31, e12
            (Simd32x3::from(other[e12345]) * self.group5()),
            // e415, e425, e435, e321
            (Simd32x4::from(other[e12345]) * self.group6()),
            // e423, e431, e412
            (Simd32x3::from(other[e12345]) * self.group7()),
            // e235, e315, e125
            (Simd32x3::from(other[e12345]) * self.group8()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other[e12345]) * self.group9()),
            // e1234
            (other[e12345] * self[e45]),
        );
    }
}
impl GeometricAntiProduct<AntiTripleNum> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       44        0
    //    simd3        8       12        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       36       60        0
    //  no simd       64       96        0
    fn geometric_anti_product(self, other: AntiTripleNum) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((self.group0()[1] * other.group0()[2]) + (other.group0()[0] * self[e1]) + (other.group0()[1] * self.group1()[3])),
                (-(self.group0()[0] * other.group0()[2]) - (other.group0()[0] * self.group9()[3]) - (other.group0()[1] * self[e45])),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[1] * self.group4()[0]) + (other.group0()[2] * self.group9()[0])),
                ((other.group0()[1] * self.group4()[1]) + (other.group0()[2] * self.group9()[1])),
                ((other.group0()[1] * self.group4()[2]) + (other.group0()[2] * self.group9()[2])),
                (-(other.group0()[0] * self.group3()[3]) - (other.group0()[2] * self[e45])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[0]]))),
            // e5
            (-(self.group0()[0] * other.group0()[1]) + (other.group0()[1] * self.group3()[3]) - (other.group0()[2] * self.group9()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group0()[1] * self.group6()[0]) + (other.group0()[2] * self.group8()[0])),
                ((other.group0()[1] * self.group6()[1]) + (other.group0()[2] * self.group8()[1])),
                ((other.group0()[1] * self.group6()[2]) + (other.group0()[2] * self.group8()[2])),
                (-(other.group0()[0] * self[e1]) - (other.group0()[2] * self.group6()[3])),
            ]) + (Simd32x4::from(other.group0()[1]) * self.group1())),
            // e41, e42, e43
            (-(Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                + (Simd32x3::from(other.group0()[2]) * self.group7())),
            // e23, e31, e12
            ((Simd32x3::from(other.group0()[0]) * self.group8())
                + (Simd32x3::from(other.group0()[1]) * self.group7())
                + (Simd32x3::from(other.group0()[2]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[1] * self.group4()[0]) - (other.group0()[2] * self.group5()[0])),
                (-(other.group0()[1] * self.group4()[1]) - (other.group0()[2] * self.group5()[1])),
                (-(other.group0()[1] * self.group4()[2]) - (other.group0()[2] * self.group5()[2])),
                ((other.group0()[1] * self[e45]) + (other.group0()[2] * self.group3()[3])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group9()[3]]))),
            // e423, e431, e412
            (-(Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                - (Simd32x3::from(other.group0()[0]) * self.group5())
                - (Simd32x3::from(other.group0()[2]) * self.group4())),
            // e235, e315, e125
            ((Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                - (Simd32x3::from(other.group0()[1]) * self.group5())
                - (Simd32x3::from(other.group0()[2]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group0()[0] * self.group8()[0]) - (other.group0()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group8()[1]) - (other.group0()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group8()[2]) - (other.group0()[2] * self.group1()[2])),
                ((other.group0()[1] * self.group6()[3]) + (other.group0()[2] * self[e1])),
            ]) + (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group0()[1]]))),
            // e1234
            ((self.group0()[1] * other.group0()[0]) - (other.group0()[0] * self.group6()[3]) + (other.group0()[2] * self.group1()[3])),
        );
    }
}
impl GeometricAntiProduct<Circle> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      102      120        0
    //    simd2        9       11        0
    //    simd3       36       40        0
    //    simd4       15       15        0
    // Totals...
    // yes simd      162      186        0
    //  no simd      288      322        0
    fn geometric_anti_product(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from(other.group1()[3]) * Simd32x2::from([self.group3()[3], self.group6()[3]]) * Simd32x2::from([-1.0, 1.0]))
                - (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group3()[0], self.group8()[0]]))
                - (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group3()[1], self.group8()[1]]))
                - (Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group3()[2], self.group8()[2]]))
                - (Simd32x2::from(other.group2()[0]) * Simd32x2::from([self.group4()[0], self.group7()[0]]))
                - (Simd32x2::from(other.group2()[1]) * Simd32x2::from([self.group4()[1], self.group7()[1]]))
                - (Simd32x2::from(other.group2()[2]) * Simd32x2::from([self.group4()[2], self.group7()[2]]))
                - (Simd32x2::from(other.group1()[0]) * Simd32x2::from([self.group5()[0], self.group6()[0]]))
                - (Simd32x2::from(other.group1()[1]) * Simd32x2::from([self.group5()[1], self.group6()[1]]))
                - (Simd32x2::from(other.group1()[2]) * Simd32x2::from([self.group5()[2], self.group6()[2]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[0] * self[e1]) - (other.group0()[1] * self.group8()[2]) + (other.group0()[2] * self.group8()[1]) - (other.group2()[0] * self.group1()[3])
                    + (other.group2()[1] * self.group7()[2])
                    - (other.group2()[2] * self.group7()[1])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group1()[3] * self.group6()[0])),
                ((other.group0()[0] * self.group8()[2]) + (other.group0()[1] * self[e1])
                    - (other.group0()[2] * self.group8()[0])
                    - (other.group2()[0] * self.group7()[2])
                    - (other.group2()[1] * self.group1()[3])
                    + (other.group2()[2] * self.group7()[0])
                    + (other.group1()[1] * self.group6()[3])
                    + (other.group1()[3] * self.group6()[1])),
                (-(other.group0()[0] * self.group8()[1]) + (other.group0()[1] * self.group8()[0]) + (other.group0()[2] * self[e1]) + (other.group2()[0] * self.group7()[1])
                    - (other.group2()[1] * self.group7()[0])
                    - (other.group2()[2] * self.group1()[3])
                    + (other.group1()[2] * self.group6()[3])
                    + (other.group1()[3] * self.group6()[2])),
                ((other.group0()[0] * self.group1()[0]) - (other.group0()[0] * self.group6()[0]) + (other.group0()[1] * self.group1()[1]) - (other.group0()[1] * self.group6()[1])
                    + (other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group6()[2])
                    - (self.group7()[1] * other.group1()[1])
                    - (self.group7()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group7()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group6()[3], self.group1()[2], self.group1()[0], self.group1()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))),
            // e5
            (-(other.group2()[0] * self.group1()[0])
                - (other.group2()[0] * self.group6()[0])
                - (other.group2()[1] * self.group1()[1])
                - (other.group2()[1] * self.group6()[1])
                - (other.group2()[2] * self.group1()[2])
                - (other.group2()[2] * self.group6()[2])
                - (self.group8()[0] * other.group1()[0])
                - (self.group8()[1] * other.group1()[1])
                - (self.group8()[2] * other.group1()[2])
                - (other.group1()[3] * self[e1])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) + (other.group2()[1] * self.group9()[2]) + (other.group2()[2] * self.group5()[1]) + (other.group1()[0] * self.group9()[3])),
                ((self.group0()[0] * other.group2()[1]) + (other.group2()[0] * self.group5()[2]) + (other.group2()[2] * self.group9()[0]) + (other.group1()[1] * self.group9()[3])),
                ((self.group0()[0] * other.group2()[2]) + (other.group2()[0] * self.group9()[1]) + (other.group2()[1] * self.group5()[0]) + (other.group1()[2] * self.group9()[3])),
                ((other.group0()[1] * self.group3()[1]) + (other.group0()[2] * self.group3()[2]) - (other.group1()[1] * self.group9()[1]) - (other.group1()[2] * self.group9()[2])),
            ]) - (Simd32x4::from(other.group2()[0]) * Simd32x4::from([self.group3()[3], self.group9()[2], self.group5()[1], self.group4()[0]]))
                - (Simd32x4::from(other.group2()[1]) * Simd32x4::from([self.group5()[2], self.group3()[3], self.group9()[0], self.group4()[1]]))
                - (Simd32x4::from(other.group2()[2]) * Simd32x4::from([self.group9()[1], self.group5()[0], self.group3()[3], self.group4()[2]]))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group9()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 3))),
            // e41, e42, e43
            ((Simd32x3::from(self.group0()[0]) * other.group0())
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from([self.group5()[1], self.group9()[2], self.group9()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                - (Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]) * swizzle!(self.group4(), 2, 0, 1))
                + (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[3]]) * swizzle!(self.group4(), 1, 2, 2))
                + (Simd32x3::from([other.group1()[3], other.group1()[3], other.group1()[1]]) * swizzle!(self.group4(), 0, 1, 0))
                + (Simd32x3::from([self.group3()[3], self.group5()[2], self.group5()[0]]) * swizzle!(other.group0(), 0, 0, 1))
                + (Simd32x3::from([self.group9()[1], self.group3()[3], self.group3()[3]]) * swizzle!(other.group0(), 2, 1, 2))
                - (Simd32x3::from([self.group9()[2], self.group9()[0], self.group9()[1]]) * swizzle!(other.group0(), 1, 2, 0))
                - (swizzle!(other.group0(), 1, 2, 0) * swizzle!(self.group5(), 2, 0, 1))),
            // e23, e31, e12
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from([self.group4()[1], self[e45], self[e45]]) * swizzle!(other.group2(), 2, 1, 2))
                - (Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]) * swizzle!(self.group5(), 2, 0, 1))
                + (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]) * swizzle!(self.group5(), 1, 2, 0))
                + (Simd32x3::from([self.group3()[1], self.group9()[3], self.group9()[3]]) * swizzle!(other.group0(), 2, 1, 2))
                - (Simd32x3::from([self.group3()[2], self.group3()[0], self.group3()[1]]) * swizzle!(other.group0(), 1, 2, 0))
                + (Simd32x3::from([self.group9()[3], self.group3()[2], self.group3()[0]]) * swizzle!(other.group0(), 0, 0, 1))
                + (Simd32x3::from([self[e45], self.group4()[2], self.group4()[0]]) * swizzle!(other.group2(), 0, 0, 1))
                - (swizzle!(other.group2(), 1, 2, 0) * swizzle!(self.group4(), 2, 0, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[0] * self[e1]) - (other.group0()[1] * self.group8()[2]) + (other.group0()[2] * self.group8()[1]) + (other.group2()[0] * self.group1()[3])
                    - (other.group2()[1] * self.group7()[2])
                    + (other.group2()[2] * self.group7()[1])
                    + (other.group1()[2] * self.group6()[1])
                    + (other.group1()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group8()[2]) + (other.group0()[1] * self[e1]) - (other.group0()[2] * self.group8()[0])
                    + (other.group2()[0] * self.group7()[2])
                    + (other.group2()[1] * self.group1()[3])
                    - (other.group2()[2] * self.group7()[0])
                    + (other.group1()[0] * self.group6()[2])
                    + (other.group1()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group8()[1]) + (other.group0()[1] * self.group8()[0]) + (other.group0()[2] * self[e1]) - (other.group2()[0] * self.group7()[1])
                    + (other.group2()[1] * self.group7()[0])
                    + (other.group2()[2] * self.group1()[3])
                    + (other.group1()[1] * self.group6()[0])
                    + (other.group1()[3] * self.group1()[2])),
                (-(other.group0()[0] * self.group8()[0]) - (other.group0()[1] * self.group8()[1]) - (other.group0()[2] * self.group8()[2])
                    + (other.group2()[0] * self.group7()[0])
                    + (other.group2()[1] * self.group7()[1])
                    + (other.group2()[2] * self.group7()[2])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]) + (Simd32x4::from(self.group0()[1]) * other.group1())
                - (Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e423, e431, e412
            ((Simd32x3::from(self.group0()[1]) * other.group0())
                - (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group6()[3], self.group1()[2], self.group6()[1]]))
                - (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group6()[2], self.group6()[3], self.group1()[0]]))
                - (Simd32x3::from(other.group0()[2]) * Simd32x3::from([self.group1()[1], self.group6()[0], self.group6()[3]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]) * swizzle!(self.group7(), 2, 0, 1))
                + (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[3]]) * swizzle!(self.group7(), 1, 2, 2))
                + (Simd32x3::from([other.group1()[3], other.group1()[3], other.group1()[1]]) * swizzle!(self.group7(), 0, 1, 0))
                + (Simd32x3::from([self.group1()[2], self.group6()[2], self.group1()[1]]) * swizzle!(other.group0(), 1, 0, 0))
                + (Simd32x3::from([self.group6()[1], self.group1()[0], self.group6()[0]]) * swizzle!(other.group0(), 2, 2, 1))),
            // e235, e315, e125
            ((Simd32x3::from(self.group0()[1]) * other.group2()) + (Simd32x3::from(self[e1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from([other.group1()[1], other.group1()[3], other.group1()[3]]) * swizzle!(self.group8(), 2, 1, 2))
                + (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]) * swizzle!(self.group8(), 1, 2, 0))
                - (Simd32x3::from([other.group1()[3], other.group1()[2], other.group1()[0]]) * swizzle!(self.group8(), 0, 0, 1))
                + (Simd32x3::from([self.group1()[1], self.group6()[2], self.group6()[0]]) * swizzle!(other.group2(), 2, 0, 1))
                - (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]) * swizzle!(other.group2(), 1, 2, 0))
                + (Simd32x3::from([self.group6()[1], self.group6()[3], self.group6()[3]]) * swizzle!(other.group2(), 2, 1, 2))
                - (Simd32x3::from([self.group6()[2], self.group6()[0], self.group6()[1]]) * swizzle!(other.group2(), 1, 2, 0))
                + (Simd32x3::from([self.group6()[3], self.group1()[2], self.group1()[0]]) * swizzle!(other.group2(), 0, 0, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group3()[2]) + (other.group2()[0] * self[e45]) - (other.group2()[1] * self.group4()[2])
                    + (other.group2()[2] * self.group4()[1])
                    + (other.group1()[0] * self.group3()[3])),
                ((other.group0()[2] * self.group3()[0]) + (other.group2()[0] * self.group4()[2]) + (other.group2()[1] * self[e45]) - (other.group2()[2] * self.group4()[0])
                    + (other.group1()[1] * self.group3()[3])),
                ((other.group0()[0] * self.group3()[1]) - (other.group2()[0] * self.group4()[1])
                    + (other.group2()[1] * self.group4()[0])
                    + (other.group2()[2] * self[e45])
                    + (other.group1()[2] * self.group3()[3])),
                (-(other.group2()[0] * self.group5()[0]) - (other.group2()[1] * self.group5()[1]) + (other.group2()[1] * self.group9()[1])
                    - (other.group2()[2] * self.group5()[2])
                    + (other.group2()[2] * self.group9()[2])),
            ]) - (Simd32x4::from(self.group9()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group5()[0], self.group5()[1], self.group5()[2], self.group3()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group9(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group9()[2], self.group9()[0], self.group9()[1], self.group3()[2]]) * swizzle!(other.group1(), 1, 2, 0, 2))),
            // e1234
            (-(other.group0()[0] * self.group5()[0])
                - (other.group0()[0] * self.group9()[0])
                - (other.group0()[1] * self.group5()[1])
                - (other.group0()[1] * self.group9()[1])
                - (other.group0()[2] * self.group5()[2])
                - (other.group0()[2] * self.group9()[2])
                - (self.group4()[0] * other.group1()[0])
                - (self.group4()[1] * other.group1()[1])
                - (self.group4()[2] * other.group1()[2])
                + (other.group1()[3] * self[e45])),
        );
    }
}
impl GeometricAntiProduct<CircleRotor> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       81      102        0
    //    simd2       10       12        0
    //    simd3       37       40        0
    //    simd4       27       27        0
    // Totals...
    // yes simd      155      181        0
    //  no simd      320      354        0
    fn geometric_anti_product(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from(other.group1()[3]) * Simd32x2::from([self.group3()[3], self.group6()[3]]) * Simd32x2::from([-1.0, 1.0]))
                - (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group3()[0], self.group8()[0]]))
                - (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group3()[1], self.group8()[1]]))
                - (Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group3()[2], self.group8()[2]]))
                - (Simd32x2::from(other.group1()[0]) * Simd32x2::from([self.group5()[0], self.group6()[0]]))
                - (Simd32x2::from(other.group1()[1]) * Simd32x2::from([self.group5()[1], self.group6()[1]]))
                - (Simd32x2::from(other.group1()[2]) * Simd32x2::from([self.group5()[2], self.group6()[2]]))
                - (Simd32x2::from(other.group2()[0]) * Simd32x2::from([self.group4()[0], self.group7()[0]]))
                - (Simd32x2::from(other.group2()[1]) * Simd32x2::from([self.group4()[1], self.group7()[1]]))
                - (Simd32x2::from(other.group2()[2]) * Simd32x2::from([self.group4()[2], self.group7()[2]]))
                + (Simd32x2::from(other.group2()[3]) * self.group0())),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[0] * self[e1]) - (other.group0()[1] * self.group8()[2]) + (other.group0()[2] * self.group8()[1]) - (self.group7()[1] * other.group2()[2])
                    + (other.group1()[3] * self.group6()[0])
                    - (other.group2()[0] * self.group1()[3])
                    + (other.group2()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group8()[2]) + (other.group0()[1] * self[e1]) - (other.group0()[2] * self.group8()[0]) - (self.group7()[2] * other.group2()[0])
                    + (other.group1()[1] * self.group6()[3])
                    + (other.group1()[3] * self.group6()[1])
                    - (other.group2()[1] * self.group1()[3])),
                (-(other.group0()[0] * self.group8()[1]) + (other.group0()[1] * self.group8()[0]) + (other.group0()[2] * self[e1]) - (self.group7()[0] * other.group2()[1])
                    + (other.group1()[2] * self.group6()[3])
                    + (other.group1()[3] * self.group6()[2])
                    - (other.group2()[2] * self.group1()[3])),
                (-(other.group0()[0] * self.group6()[0]) + (other.group0()[1] * self.group1()[1]) - (other.group0()[1] * self.group6()[1])
                    + (other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group6()[2])
                    - (self.group7()[1] * other.group1()[1])
                    - (self.group7()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([self.group7()[2], self.group7()[0], self.group7()[1], self.group1()[3]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group1()[2], other.group2()[3], other.group2()[3], other.group0()[0]]) * swizzle!(self.group1(), 1, 1, 2, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group7()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group6()[3], self.group1()[2], self.group1()[0], self.group1()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))),
            // e5
            (-(self.group8()[0] * other.group1()[0])
                - (self.group8()[1] * other.group1()[1])
                - (self.group8()[2] * other.group1()[2])
                - (other.group1()[3] * self[e1])
                - (other.group2()[0] * self.group1()[0])
                - (other.group2()[0] * self.group6()[0])
                - (other.group2()[1] * self.group1()[1])
                - (other.group2()[1] * self.group6()[1])
                - (other.group2()[2] * self.group1()[2])
                - (other.group2()[2] * self.group6()[2])
                + (other.group2()[3] * self[e1])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group5()[1] * other.group2()[2]) + (other.group1()[0] * self.group9()[3]) + (other.group2()[1] * self.group9()[2])),
                ((self.group5()[2] * other.group2()[0]) + (other.group1()[1] * self.group9()[3]) + (other.group2()[2] * self.group9()[0])),
                ((self.group5()[0] * other.group2()[1]) + (other.group1()[2] * self.group9()[3]) + (other.group2()[0] * self.group9()[1])),
                ((other.group0()[2] * self.group3()[2]) - (other.group1()[1] * self.group9()[1]) - (other.group1()[2] * self.group9()[2])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group3()[3]]) * other.group2())
                - (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group4()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[1]]) * swizzle!(self.group3(), 0, 1, 2, 1))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group9()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group3()[3], self.group9()[2], self.group9()[0], self.group4()[1]]) * swizzle!(other.group2(), 0, 0, 1, 1))
                - (Simd32x4::from([self.group9()[1], self.group3()[3], self.group3()[3], self.group4()[2]]) * swizzle!(other.group2(), 2, 1, 2, 2))),
            // e41, e42, e43
            ((Simd32x3::from(self.group0()[0]) * other.group0())
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from([self.group5()[1], self.group9()[2], self.group9()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                - (Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]) * swizzle!(self.group4(), 2, 0, 1))
                + (Simd32x3::from([other.group1()[2], other.group1()[0], other.group2()[3]]) * swizzle!(self.group4(), 1, 2, 2))
                + (Simd32x3::from([other.group1()[3], other.group1()[3], other.group1()[1]]) * swizzle!(self.group4(), 0, 1, 0))
                + (Simd32x3::from([other.group2()[3], other.group2()[3], other.group1()[3]]) * self.group4())
                + (Simd32x3::from([self.group3()[3], self.group5()[2], self.group5()[0]]) * swizzle!(other.group0(), 0, 0, 1))
                + (Simd32x3::from([self.group9()[1], self.group3()[3], self.group3()[3]]) * swizzle!(other.group0(), 2, 1, 2))
                - (Simd32x3::from([self.group9()[2], self.group9()[0], self.group9()[1]]) * swizzle!(other.group0(), 1, 2, 0))
                - (swizzle!(other.group0(), 1, 2, 0) * swizzle!(self.group5(), 2, 0, 1))),
            // e23, e31, e12
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                - (Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]) * swizzle!(self.group5(), 2, 0, 1))
                + (Simd32x3::from([other.group1()[2], other.group1()[0], other.group2()[3]]) * swizzle!(self.group5(), 1, 2, 2))
                - (Simd32x3::from([other.group2()[1], other.group2()[2], other.group2()[0]]) * swizzle!(self.group4(), 2, 0, 1))
                + (Simd32x3::from([other.group2()[2], other.group2()[0], other.group2()[1]]) * swizzle!(self.group4(), 1, 2, 0))
                + (Simd32x3::from([other.group2()[3], other.group2()[3], other.group1()[1]]) * swizzle!(self.group5(), 0, 1, 0))
                + (Simd32x3::from([self.group3()[1], self.group9()[3], self.group9()[3]]) * swizzle!(other.group0(), 2, 1, 2))
                - (Simd32x3::from([self.group3()[2], self.group3()[0], self.group3()[1]]) * swizzle!(other.group0(), 1, 2, 0))
                + (Simd32x3::from([self.group9()[3], self.group3()[2], self.group3()[0]]) * swizzle!(other.group0(), 0, 0, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[0] * self[e1]) - (other.group0()[1] * self.group8()[2]) + (other.group0()[2] * self.group8()[1]) - (self.group7()[2] * other.group2()[1])
                    + (other.group1()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group8()[2]) + (other.group0()[1] * self[e1]) - (other.group0()[2] * self.group8()[0]) - (self.group7()[0] * other.group2()[2])
                    + (other.group1()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group8()[1]) + (other.group0()[1] * self.group8()[0]) + (other.group0()[2] * self[e1]) - (self.group7()[1] * other.group2()[0])
                    + (other.group1()[3] * self.group1()[2])),
                (-(other.group0()[0] * self.group8()[0])
                    - (other.group0()[1] * self.group8()[1])
                    - (other.group0()[2] * self.group8()[2])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]) + (Simd32x4::from(self.group0()[1]) * other.group1())
                + (Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[0], self.group7()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[3]]) * swizzle!(self.group6(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group7()[1]]) * swizzle!(other.group2(), 0, 1, 2, 1))
                + (Simd32x4::from([self.group6()[0], self.group6()[1], self.group6()[2], self.group7()[2]]) * swizzle!(other.group2(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e423, e431, e412
            ((Simd32x3::from(self.group0()[1]) * other.group0())
                - (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group6()[3], self.group1()[2], self.group6()[1]]))
                - (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group6()[2], self.group6()[3], self.group1()[0]]))
                - (Simd32x3::from(other.group0()[2]) * Simd32x3::from([self.group1()[1], self.group6()[0], self.group6()[3]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]) * swizzle!(self.group7(), 2, 0, 1))
                + (Simd32x3::from([other.group1()[2], other.group1()[0], other.group2()[3]]) * swizzle!(self.group7(), 1, 2, 2))
                + (Simd32x3::from([other.group1()[3], other.group1()[3], other.group1()[1]]) * swizzle!(self.group7(), 0, 1, 0))
                + (Simd32x3::from([other.group2()[3], other.group2()[3], other.group1()[3]]) * self.group7())
                + (Simd32x3::from([self.group1()[2], self.group6()[2], self.group1()[1]]) * swizzle!(other.group0(), 1, 0, 0))
                + (Simd32x3::from([self.group6()[1], self.group1()[0], self.group6()[0]]) * swizzle!(other.group0(), 2, 2, 1))),
            // e235, e315, e125
            (Simd32x3::from([
                (-(other.group2()[1] * self.group1()[2]) - (other.group2()[1] * self.group6()[2])
                    + (other.group2()[2] * self.group1()[1])
                    + (other.group2()[2] * self.group6()[1])),
                ((other.group2()[0] * self.group1()[2]) + (other.group2()[0] * self.group6()[2]) - (other.group2()[2] * self.group1()[0]) - (other.group2()[2] * self.group6()[0])),
                (-(other.group2()[0] * self.group1()[1]) - (other.group2()[0] * self.group6()[1])
                    + (other.group2()[1] * self.group1()[0])
                    + (other.group2()[1] * self.group6()[0])),
            ]) + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                + (Simd32x3::from(self.group6()[3]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                + (Simd32x3::from(self[e1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from([other.group1()[1], other.group1()[3], other.group1()[3]]) * swizzle!(self.group8(), 2, 1, 2))
                + (Simd32x3::from([other.group1()[2], other.group1()[0], other.group2()[3]]) * swizzle!(self.group8(), 1, 2, 2))
                - (Simd32x3::from([other.group1()[3], other.group1()[2], other.group1()[0]]) * swizzle!(self.group8(), 0, 0, 1))
                + (Simd32x3::from([other.group2()[3], other.group2()[3], other.group1()[1]]) * swizzle!(self.group8(), 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group3()[2]) + (other.group1()[0] * self.group3()[3])),
                ((other.group0()[2] * self.group3()[0]) + (other.group1()[1] * self.group3()[3])),
                ((other.group0()[0] * self.group3()[1]) + (other.group1()[2] * self.group3()[3])),
                (-(self.group5()[1] * other.group2()[1]) - (self.group5()[2] * other.group2()[2])),
            ]) + (Simd32x4::from(other.group2()[3]) * self.group9())
                - (Simd32x4::from(self.group9()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group4()[1], self.group4()[2], self.group4()[0], self.group9()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group4()[2], self.group4()[0], self.group4()[1], self.group5()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group5()[0], self.group5()[1], self.group5()[2], self.group3()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[1]]) * swizzle!(self.group9(), 1, 2, 0, 1))
                - (Simd32x4::from([self.group9()[2], self.group9()[0], self.group9()[1], self.group3()[2]]) * swizzle!(other.group1(), 1, 2, 0, 2))
                + (Simd32x4::from([self[e45], self[e45], self[e45], self.group9()[2]]) * swizzle!(other.group2(), 0, 1, 2, 2))),
            // e1234
            (-(other.group0()[0] * self.group5()[0])
                - (other.group0()[0] * self.group9()[0])
                - (other.group0()[1] * self.group5()[1])
                - (other.group0()[1] * self.group9()[1])
                - (other.group0()[2] * self.group5()[2])
                - (other.group0()[2] * self.group9()[2])
                - (self.group4()[0] * other.group1()[0])
                - (self.group4()[1] * other.group1()[1])
                - (self.group4()[2] * other.group1()[2])
                + (other.group1()[3] * self[e45])
                + (other.group2()[3] * self[e45])),
        );
    }
}
impl GeometricAntiProduct<Dipole> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      120      146        0
    //    simd2        1        1        0
    //    simd3       34       36        0
    //    simd4       16       16        0
    // Totals...
    // yes simd      171      199        0
    //  no simd      288      320        0
    fn geometric_anti_product(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                (-(other.group0()[0] * self.group8()[0])
                    - (other.group0()[1] * self.group8()[1])
                    - (other.group0()[2] * self.group8()[2])
                    - (other.group2()[0] * self.group7()[0])
                    - (other.group2()[1] * self.group7()[1])
                    - (other.group2()[2] * self.group7()[2])
                    - (other.group1()[0] * self.group6()[0])
                    - (other.group1()[1] * self.group6()[1])
                    - (other.group1()[2] * self.group6()[2])),
                ((other.group0()[0] * self.group3()[0])
                    + (other.group0()[1] * self.group3()[1])
                    + (other.group0()[2] * self.group3()[2])
                    + (other.group2()[0] * self.group4()[0])
                    + (other.group2()[1] * self.group4()[1])
                    + (other.group2()[2] * self.group4()[2])
                    + (self.group5()[0] * other.group1()[0])
                    + (self.group5()[1] * other.group1()[1])
                    + (self.group5()[2] * other.group1()[2])),
            ]) - (Simd32x2::from(other.group1()[3]) * Simd32x2::from([self.group6()[3], self.group3()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group9()[3]) + (other.group0()[1] * self.group3()[2])
                    - (other.group0()[2] * self.group3()[1])
                    - (other.group2()[1] * self.group4()[2])
                    + (other.group2()[2] * self.group4()[1])
                    - (other.group1()[1] * self.group9()[2])),
                (-(other.group0()[0] * self.group3()[2]) - (other.group0()[1] * self.group9()[3])
                    + (other.group0()[2] * self.group3()[0])
                    + (other.group2()[0] * self.group4()[2])
                    - (other.group2()[2] * self.group4()[0])
                    - (other.group1()[2] * self.group9()[0])),
                ((other.group0()[0] * self.group3()[1]) - (other.group0()[1] * self.group3()[0]) - (other.group0()[2] * self.group9()[3]) - (other.group2()[0] * self.group4()[1])
                    + (other.group2()[1] * self.group4()[0])
                    - (other.group1()[0] * self.group9()[1])),
                ((other.group0()[0] * self.group5()[0])
                    + (other.group0()[0] * self.group9()[0])
                    + (other.group0()[1] * self.group5()[1])
                    + (other.group0()[1] * self.group9()[1])
                    + (other.group0()[2] * self.group5()[2])
                    + (other.group0()[2] * self.group9()[2])),
            ]) + (Simd32x4::from(self[e45]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))
                + (Simd32x4::from([self.group5()[0], self.group5()[1], self.group5()[2], self.group4()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group3()[3], self.group9()[2], self.group9()[0], self.group4()[1]]) * swizzle!(other.group1(), 0, 0, 1, 1))
                + (Simd32x4::from([self.group9()[1], self.group3()[3], self.group3()[3], self.group4()[2]]) * swizzle!(other.group1(), 2, 1, 2, 2))),
            // e5
            ((other.group2()[0] * self.group5()[0]) - (other.group2()[0] * self.group9()[0]) + (other.group2()[1] * self.group5()[1]) - (other.group2()[1] * self.group9()[1])
                + (other.group2()[2] * self.group5()[2])
                - (other.group2()[2] * self.group9()[2])
                + (other.group1()[0] * self.group3()[0])
                + (other.group1()[1] * self.group3()[1])
                + (other.group1()[2] * self.group3()[2])
                - (other.group1()[3] * self.group9()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group2()[0] * self.group6()[3]) - (other.group2()[1] * self.group1()[2]) - (other.group2()[1] * self.group6()[2]) + (other.group2()[2] * self.group6()[1])
                    - (self.group8()[2] * other.group1()[1])
                    + (other.group1()[0] * self[e1])),
                ((other.group2()[0] * self.group6()[2]) + (other.group2()[1] * self.group6()[3])
                    - (other.group2()[2] * self.group1()[0])
                    - (other.group2()[2] * self.group6()[0])
                    - (self.group8()[0] * other.group1()[2])
                    + (other.group1()[1] * self[e1])),
                (-(other.group2()[0] * self.group1()[1]) - (other.group2()[0] * self.group6()[1])
                    + (other.group2()[1] * self.group6()[0])
                    + (other.group2()[2] * self.group6()[3])
                    - (self.group8()[1] * other.group1()[0])
                    + (other.group1()[2] * self[e1])),
                ((other.group0()[0] * self.group8()[0]) + (other.group0()[1] * self.group8()[1]) + (other.group0()[2] * self.group8()[2])
                    - (other.group2()[0] * self.group7()[0])
                    - (other.group2()[1] * self.group7()[1])
                    - (other.group2()[2] * self.group7()[2])),
            ]) + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group8()[0], self.group8()[1], self.group8()[0], self.group1()[1]]) * swizzle!(other.group1(), 3, 3, 1, 1))
                + (Simd32x4::from([self.group8()[1], self.group8()[2], self.group8()[2], self.group1()[2]]) * swizzle!(other.group1(), 2, 0, 3, 2))),
            // e41, e42, e43
            ((Simd32x3::from(self.group0()[1]) * other.group0())
                - (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group6()[3], self.group1()[2], self.group6()[1]]))
                - (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group6()[2], self.group6()[3], self.group1()[0]]))
                - (Simd32x3::from(other.group0()[2]) * Simd32x3::from([self.group1()[1], self.group6()[0], self.group6()[3]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from([other.group1()[1], other.group1()[3], other.group1()[3]]) * swizzle!(self.group7(), 2, 1, 2))
                + (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]) * swizzle!(self.group7(), 1, 2, 0))
                - (Simd32x3::from([other.group1()[3], other.group1()[2], other.group1()[0]]) * swizzle!(self.group7(), 0, 0, 1))
                + (Simd32x3::from([self.group1()[2], self.group6()[2], self.group1()[1]]) * swizzle!(other.group0(), 1, 0, 0))
                + (Simd32x3::from([self.group6()[1], self.group1()[0], self.group6()[0]]) * swizzle!(other.group0(), 2, 2, 1))),
            // e23, e31, e12
            (Simd32x3::from([
                (-(other.group1()[1] * self.group6()[2]) + (other.group1()[2] * self.group6()[1])),
                ((other.group1()[0] * self.group6()[2]) - (other.group1()[2] * self.group6()[0])),
                (-(other.group1()[0] * self.group6()[1]) + (other.group1()[1] * self.group6()[0])),
            ]) + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from([self.group7()[1], self.group1()[3], self.group1()[3]]) * swizzle!(other.group2(), 2, 1, 2))
                + (Simd32x3::from([self.group8()[1], self[e1], self[e1]]) * swizzle!(other.group0(), 2, 1, 2))
                + (Simd32x3::from([self.group1()[3], self.group7()[2], self.group7()[0]]) * swizzle!(other.group2(), 0, 0, 1))
                + (Simd32x3::from([self[e1], self.group8()[2], self.group8()[0]]) * swizzle!(other.group0(), 0, 0, 1))
                - (swizzle!(other.group0(), 1, 2, 0) * swizzle!(self.group8(), 2, 0, 1))
                - (swizzle!(other.group2(), 1, 2, 0) * swizzle!(self.group7(), 2, 0, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[2] * self.group3()[1]) - (other.group2()[0] * self[e45]) + (other.group2()[1] * self.group4()[2])
                    - (other.group2()[2] * self.group4()[1])
                    - (other.group1()[3] * self.group9()[0])),
                (-(other.group0()[0] * self.group3()[2]) - (other.group2()[0] * self.group4()[2]) - (other.group2()[1] * self[e45]) + (other.group2()[2] * self.group4()[0])
                    - (other.group1()[3] * self.group9()[1])),
                (-(other.group0()[1] * self.group3()[0]) + (other.group2()[0] * self.group4()[1])
                    - (other.group2()[1] * self.group4()[0])
                    - (other.group2()[2] * self[e45])
                    - (other.group1()[3] * self.group9()[2])),
                ((other.group0()[1] * self.group3()[1]) + (other.group0()[2] * self.group3()[2])
                    - (other.group2()[0] * self.group4()[0])
                    - (other.group2()[1] * self.group4()[1])
                    - (other.group2()[2] * self.group4()[2])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group9()[0]]) * swizzle!(other.group1(), 0, 1, 2, 0))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group9(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group3(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group5()[1], self.group5()[2], self.group5()[0], self.group9()[2]]) * swizzle!(other.group1(), 2, 0, 1, 2))
                + (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 3))),
            // e423, e431, e412
            (-(Simd32x3::from(self.group0()[0]) * other.group0())
                - (Simd32x3::from(self[e45]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from([self.group5()[1], self.group9()[2], self.group9()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                + (Simd32x3::from([other.group1()[1], other.group1()[3], other.group1()[3]]) * swizzle!(self.group4(), 2, 1, 2))
                - (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]) * swizzle!(self.group4(), 1, 2, 0))
                + (Simd32x3::from([other.group1()[3], other.group1()[2], other.group1()[0]]) * swizzle!(self.group4(), 0, 0, 1))
                - (Simd32x3::from([self.group3()[3], self.group5()[2], self.group5()[0]]) * swizzle!(other.group0(), 0, 0, 1))
                - (Simd32x3::from([self.group9()[1], self.group3()[3], self.group3()[3]]) * swizzle!(other.group0(), 2, 1, 2))
                + (Simd32x3::from([self.group9()[2], self.group9()[0], self.group9()[1]]) * swizzle!(other.group0(), 1, 2, 0))
                + (swizzle!(other.group0(), 1, 2, 0) * swizzle!(self.group5(), 2, 0, 1))),
            // e235, e315, e125
            (Simd32x3::from([
                ((other.group1()[1] * self.group3()[2]) - (other.group1()[2] * self.group3()[1])),
                (-(other.group1()[0] * self.group3()[2]) + (other.group1()[2] * self.group3()[0])),
                ((other.group1()[0] * self.group3()[1]) - (other.group1()[1] * self.group3()[0])),
            ]) - (Simd32x3::from(self.group0()[0]) * other.group2())
                + (Simd32x3::from(other.group2()[0]) * Simd32x3::from([self.group3()[3], self.group9()[2], self.group5()[1]]))
                + (Simd32x3::from(other.group2()[1]) * Simd32x3::from([self.group5()[2], self.group3()[3], self.group9()[0]]))
                + (Simd32x3::from(other.group2()[2]) * Simd32x3::from([self.group9()[1], self.group5()[0], self.group3()[3]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                - (Simd32x3::from(self.group9()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from([self.group5()[1], self.group9()[0], self.group5()[0]]) * swizzle!(other.group2(), 2, 2, 1))
                - (Simd32x3::from([self.group9()[2], self.group5()[2], self.group9()[1]]) * swizzle!(other.group2(), 1, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group0()[0] * self[e1]) + (other.group0()[1] * self.group8()[2]) - (other.group0()[2] * self.group8()[1]) + (other.group2()[0] * self.group1()[3])
                    - (other.group2()[1] * self.group7()[2])
                    + (other.group2()[2] * self.group7()[1])
                    + (other.group1()[3] * self.group6()[0])),
                (-(other.group0()[0] * self.group8()[2]) - (other.group0()[1] * self[e1])
                    + (other.group0()[2] * self.group8()[0])
                    + (other.group2()[0] * self.group7()[2])
                    + (other.group2()[1] * self.group1()[3])
                    - (other.group2()[2] * self.group7()[0])
                    + (other.group1()[3] * self.group6()[1])),
                ((other.group0()[0] * self.group8()[1]) - (other.group0()[1] * self.group8()[0]) - (other.group0()[2] * self[e1]) - (other.group2()[0] * self.group7()[1])
                    + (other.group2()[1] * self.group7()[0])
                    + (other.group2()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group6()[2])),
                (-(other.group2()[0] * self.group1()[0])
                    - (other.group2()[0] * self.group6()[0])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[1] * self.group6()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group6()[2])
                    - (self.group8()[2] * other.group1()[2])),
            ]) - (Simd32x4::from([self.group1()[1], self.group6()[3], self.group6()[3], self.group8()[1]]) * swizzle!(other.group1(), 2, 1, 2, 1))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self[e1]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group6()[3], self.group1()[2], self.group1()[0], self.group8()[0]]) * swizzle!(other.group1(), 0, 0, 1, 0))),
            // e1234
            ((other.group0()[0] * self.group1()[0]) - (other.group0()[0] * self.group6()[0]) + (other.group0()[1] * self.group1()[1]) - (other.group0()[1] * self.group6()[1])
                + (other.group0()[2] * self.group1()[2])
                - (other.group0()[2] * self.group6()[2])
                - (self.group7()[0] * other.group1()[0])
                - (self.group7()[1] * other.group1()[1])
                - (self.group7()[2] * other.group1()[2])
                - (other.group1()[3] * self.group1()[3])),
        );
    }
}
impl GeometricAntiProduct<DipoleInversion> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      152      178        0
    //    simd2        4        4        0
    //    simd3       48       50        0
    //    simd4       36       36        0
    // Totals...
    // yes simd      240      268        0
    //  no simd      448      480        0
    fn geometric_anti_product(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                (-(other.group0()[0] * self.group8()[0])
                    - (other.group0()[1] * self.group8()[1])
                    - (other.group0()[2] * self.group8()[2])
                    - (self.group7()[0] * other.group2()[0])
                    - (self.group7()[1] * other.group2()[1])
                    - (self.group7()[2] * other.group2()[2])
                    - (other.group1()[0] * self.group6()[0])
                    - (other.group1()[1] * self.group6()[1])
                    - (other.group1()[2] * self.group6()[2])
                    + (other.group2()[3] * self[e1])
                    + (other.group3()[3] * self.group1()[3])),
                ((other.group0()[0] * self.group3()[0])
                    + (other.group0()[1] * self.group3()[1])
                    + (other.group0()[2] * self.group3()[2])
                    + (self.group4()[0] * other.group2()[0])
                    + (self.group4()[1] * other.group2()[1])
                    + (self.group4()[2] * other.group2()[2])
                    + (self.group5()[0] * other.group1()[0])
                    + (self.group5()[1] * other.group1()[1])
                    + (self.group5()[2] * other.group1()[2])
                    - (other.group2()[3] * self.group9()[3])
                    - (other.group3()[3] * self[e45])),
            ]) - (Simd32x2::from(other.group1()[3]) * Simd32x2::from([self.group6()[3], self.group3()[3]]))
                + (Simd32x2::from(other.group3()[0]) * Simd32x2::from([self.group1()[0], self.group9()[0]]))
                + (Simd32x2::from(other.group3()[1]) * Simd32x2::from([self.group1()[1], self.group9()[1]]))
                + (Simd32x2::from(other.group3()[2]) * Simd32x2::from([self.group1()[2], self.group9()[2]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group3()[0]) - (other.group0()[0] * self.group9()[3])
                    + (other.group0()[1] * self.group3()[2])
                    + (self.group4()[0] * other.group3()[3])
                    + (self.group4()[1] * other.group2()[2])
                    + (self.group5()[1] * other.group3()[2])
                    - (other.group1()[1] * self.group9()[2])
                    - (other.group2()[3] * self.group3()[0])),
                ((self.group0()[0] * other.group3()[1]) - (other.group0()[1] * self.group9()[3])
                    + (other.group0()[2] * self.group3()[0])
                    + (self.group4()[1] * other.group3()[3])
                    + (self.group4()[2] * other.group2()[0])
                    + (self.group5()[2] * other.group3()[0])
                    - (other.group1()[2] * self.group9()[0])
                    - (other.group2()[3] * self.group3()[1])),
                ((self.group0()[0] * other.group3()[2]) + (other.group0()[0] * self.group3()[1]) - (other.group0()[2] * self.group9()[3])
                    + (self.group4()[0] * other.group2()[1])
                    + (self.group4()[2] * other.group3()[3])
                    + (self.group5()[0] * other.group3()[1])
                    - (other.group1()[0] * self.group9()[1])
                    - (other.group2()[3] * self.group3()[2])),
                ((other.group0()[0] * self.group5()[0])
                    + (other.group0()[0] * self.group9()[0])
                    + (other.group0()[1] * self.group5()[1])
                    + (other.group0()[1] * self.group9()[1])
                    + (other.group0()[2] * self.group5()[2])
                    + (other.group0()[2] * self.group9()[2])
                    - (self.group4()[1] * other.group3()[1])
                    - (self.group4()[2] * other.group3()[2])),
            ]) + (Simd32x4::from(self[e45]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group3(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group4()[2], self.group4()[0], self.group4()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group5()[0], self.group5()[1], self.group5()[2], self.group4()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group4()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group3()[3], self.group9()[2], self.group9()[0], self.group4()[1]]) * swizzle!(other.group1(), 0, 0, 1, 1))
                + (Simd32x4::from([self.group9()[1], self.group3()[3], self.group3()[3], self.group4()[2]]) * swizzle!(other.group1(), 2, 1, 2, 2))),
            // e5
            (-(self.group0()[0] * other.group3()[3])
                + (self.group5()[0] * other.group2()[0])
                + (self.group5()[1] * other.group2()[1])
                + (self.group5()[2] * other.group2()[2])
                + (other.group1()[0] * self.group3()[0])
                + (other.group1()[1] * self.group3()[1])
                + (other.group1()[2] * self.group3()[2])
                - (other.group1()[3] * self.group9()[3])
                - (other.group2()[0] * self.group9()[0])
                - (other.group2()[1] * self.group9()[1])
                - (other.group2()[2] * self.group9()[2])
                + (other.group3()[0] * self.group3()[0])
                + (other.group3()[1] * self.group3()[1])
                + (other.group3()[2] * self.group3()[2])
                + (other.group3()[3] * self.group3()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                (-(self.group8()[2] * other.group1()[1])
                    + (other.group2()[0] * self.group6()[3])
                    + (other.group2()[2] * self.group1()[1])
                    + (other.group2()[2] * self.group6()[1])
                    + (other.group3()[0] * self[e1])
                    + (other.group3()[3] * self.group1()[0])
                    + (other.group3()[3] * self.group6()[0])),
                (-(self.group8()[0] * other.group1()[2])
                    + (other.group2()[0] * self.group1()[2])
                    + (other.group2()[0] * self.group6()[2])
                    + (other.group2()[1] * self.group6()[3])
                    + (other.group3()[1] * self[e1])
                    + (other.group3()[3] * self.group1()[1])
                    + (other.group3()[3] * self.group6()[1])),
                (-(self.group8()[1] * other.group1()[0])
                    + (other.group2()[1] * self.group1()[0])
                    + (other.group2()[1] * self.group6()[0])
                    + (other.group2()[2] * self.group6()[3])
                    + (other.group3()[2] * self[e1])
                    + (other.group3()[3] * self.group1()[2])
                    + (other.group3()[3] * self.group6()[2])),
                ((other.group0()[0] * self.group8()[0]) + (other.group0()[1] * self.group8()[1]) + (other.group0()[2] * self.group8()[2])
                    - (self.group7()[2] * other.group2()[2])
                    - (other.group2()[3] * self[e1])
                    - (other.group3()[1] * self.group6()[1])
                    - (other.group3()[2] * self.group6()[2])),
            ]) + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))
                + (Simd32x4::from([self.group8()[0], self.group8()[1], self.group8()[0], self.group1()[0]]) * swizzle!(other.group1(), 3, 3, 1, 0))
                + (Simd32x4::from([self.group8()[1], self.group8()[2], self.group8()[0], self.group1()[3]]) * swizzle!(other.group3(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group8()[1], self.group8()[2], self.group8()[2], self.group1()[1]]) * swizzle!(other.group1(), 2, 0, 3, 1))
                - (Simd32x4::from([self.group8()[2], self.group8()[0], self.group8()[1], self.group6()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group7()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group7()[1]]) * swizzle!(other.group2(), 1, 2, 0, 1))
                + (Simd32x4::from([self[e1], self[e1], self[e1], self.group1()[2]]) * swizzle!(other.group1(), 0, 1, 2, 2))),
            // e41, e42, e43
            ((Simd32x3::from(self.group0()[1]) * other.group0())
                - (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group6()[3], self.group1()[2], self.group6()[1]]))
                - (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group6()[2], self.group6()[3], self.group1()[0]]))
                - (Simd32x3::from(other.group0()[2]) * Simd32x3::from([self.group1()[1], self.group6()[0], self.group6()[3]]))
                - (Simd32x3::from(self.group7()[0]) * Simd32x3::from([other.group1()[3], other.group1()[2], other.group3()[1]]))
                - (Simd32x3::from(self.group7()[1]) * Simd32x3::from([other.group3()[2], other.group1()[3], other.group1()[0]]))
                - (Simd32x3::from(self.group7()[2]) * Simd32x3::from([other.group1()[1], other.group3()[0], other.group1()[3]]))
                - (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from([other.group1()[2], other.group3()[2], other.group1()[1]]) * swizzle!(self.group7(), 1, 0, 0))
                + (Simd32x3::from([other.group3()[1], other.group1()[0], other.group3()[0]]) * swizzle!(self.group7(), 2, 2, 1))
                + (Simd32x3::from([self.group1()[2], self.group6()[2], self.group1()[1]]) * swizzle!(other.group0(), 1, 0, 0))
                + (Simd32x3::from([self.group6()[1], self.group1()[0], self.group6()[0]]) * swizzle!(other.group0(), 2, 2, 1))),
            // e23, e31, e12
            (Simd32x3::from([
                (-(other.group1()[1] * self.group6()[2]) + (other.group1()[2] * self.group6()[1]) + (other.group3()[1] * self.group1()[2])
                    - (other.group3()[2] * self.group1()[1])),
                ((other.group1()[0] * self.group6()[2]) - (other.group1()[2] * self.group6()[0]) - (other.group3()[0] * self.group1()[2]) + (other.group3()[2] * self.group1()[0])),
                (-(other.group1()[0] * self.group6()[1]) + (other.group1()[1] * self.group6()[0]) + (other.group3()[0] * self.group1()[1])
                    - (other.group3()[1] * self.group1()[0])),
            ]) + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group2()[3]) * self.group8())
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                - (Simd32x3::from(self.group6()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from([self.group8()[1], self[e1], self[e1]]) * swizzle!(other.group0(), 2, 1, 2))
                - (Simd32x3::from([other.group2()[1], other.group2()[2], other.group2()[0]]) * swizzle!(self.group7(), 2, 0, 1))
                + (Simd32x3::from([other.group2()[2], other.group2()[0], other.group3()[3]]) * swizzle!(self.group7(), 1, 2, 2))
                + (Simd32x3::from([other.group3()[3], other.group3()[3], other.group2()[1]]) * swizzle!(self.group7(), 0, 1, 0))
                + (Simd32x3::from([self[e1], self.group8()[2], self.group8()[0]]) * swizzle!(other.group0(), 0, 0, 1))
                - (swizzle!(other.group0(), 1, 2, 0) * swizzle!(self.group8(), 2, 0, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[2] * self.group3()[1]) + (self.group4()[2] * other.group2()[1])),
                (-(other.group0()[0] * self.group3()[2]) + (self.group4()[0] * other.group2()[2])),
                (-(other.group0()[1] * self.group3()[0]) + (self.group4()[1] * other.group2()[0])),
                ((other.group0()[1] * self.group3()[1]) + (other.group0()[2] * self.group3()[2])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group9()[0]]) * swizzle!(other.group1(), 0, 1, 2, 0))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group9(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group3(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group4()[0], self.group4()[1], self.group4()[2], self.group5()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group4()[1], self.group4()[2], self.group4()[0], self.group4()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group5()[1], self.group5()[2], self.group5()[0], self.group9()[2]]) * swizzle!(other.group1(), 2, 0, 1, 2))
                + (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[3]]) * self.group9())
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group4()[2]]) * swizzle!(other.group2(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group3()[3], self.group9()[2], self.group9()[0], self.group5()[1]]) * swizzle!(other.group3(), 0, 0, 1, 1))
                - (Simd32x4::from([self.group9()[1], self.group3()[3], self.group3()[3], self.group5()[2]]) * swizzle!(other.group3(), 2, 1, 2, 2))
                + (Simd32x4::from([self.group9()[2], self.group9()[0], self.group9()[1], self[e45]]) * swizzle!(other.group3(), 1, 2, 0, 3))
                - (Simd32x4::from([self[e45], self[e45], self[e45], self.group4()[1]]) * swizzle!(other.group2(), 0, 1, 2, 1))),
            // e423, e431, e412
            (-(Simd32x3::from(self.group0()[0]) * other.group0())
                + (Simd32x3::from(self.group4()[0]) * Simd32x3::from([other.group1()[3], other.group1()[2], other.group3()[1]]))
                + (Simd32x3::from(self.group4()[1]) * Simd32x3::from([other.group3()[2], other.group1()[3], other.group1()[0]]))
                + (Simd32x3::from(self.group4()[2]) * Simd32x3::from([other.group1()[1], other.group3()[0], other.group1()[3]]))
                - (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                - (Simd32x3::from(other.group2()[3]) * self.group5())
                - (Simd32x3::from(self[e45]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                - (Simd32x3::from([self.group5()[1], self.group9()[2], self.group9()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                - (Simd32x3::from([other.group1()[2], other.group3()[2], other.group1()[1]]) * swizzle!(self.group4(), 1, 0, 0))
                - (Simd32x3::from([other.group3()[1], other.group1()[0], other.group3()[0]]) * swizzle!(self.group4(), 2, 2, 1))
                - (Simd32x3::from([self.group3()[3], self.group5()[2], self.group5()[0]]) * swizzle!(other.group0(), 0, 0, 1))
                - (Simd32x3::from([self.group9()[1], self.group3()[3], self.group3()[3]]) * swizzle!(other.group0(), 2, 1, 2))
                + (Simd32x3::from([self.group9()[2], self.group9()[0], self.group9()[1]]) * swizzle!(other.group0(), 1, 2, 0))
                + (swizzle!(other.group0(), 1, 2, 0) * swizzle!(self.group5(), 2, 0, 1))),
            // e235, e315, e125
            (Simd32x3::from([
                ((other.group1()[1] * self.group3()[2]) - (other.group1()[2] * self.group3()[1]) - (other.group2()[1] * self.group9()[2])
                    + (other.group2()[2] * self.group9()[1])
                    + (other.group3()[1] * self.group3()[2])
                    - (other.group3()[2] * self.group3()[1])),
                (-(other.group1()[0] * self.group3()[2]) + (other.group1()[2] * self.group3()[0]) + (other.group2()[0] * self.group9()[2])
                    - (other.group2()[2] * self.group9()[0])
                    - (other.group3()[0] * self.group3()[2])
                    + (other.group3()[2] * self.group3()[0])),
                ((other.group1()[0] * self.group3()[1]) - (other.group1()[1] * self.group3()[0]) - (other.group2()[0] * self.group9()[1])
                    + (other.group2()[1] * self.group9()[0])
                    + (other.group3()[0] * self.group3()[1])
                    - (other.group3()[1] * self.group3()[0])),
            ]) - (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                - (Simd32x3::from(self.group9()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(self.group9()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from([other.group2()[1], other.group2()[2], other.group2()[0]]) * swizzle!(self.group5(), 2, 0, 1))
                - (Simd32x3::from([other.group2()[2], other.group2()[0], other.group3()[3]]) * swizzle!(self.group5(), 1, 2, 2))
                - (Simd32x3::from([other.group3()[3], other.group3()[3], other.group2()[1]]) * swizzle!(self.group5(), 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group0()[0] * self[e1]) + (other.group0()[1] * self.group8()[2]) - (other.group0()[2] * self.group8()[1])
                    + (self.group7()[1] * other.group2()[2])
                    + (other.group1()[3] * self.group6()[0])
                    + (other.group2()[0] * self.group1()[3])
                    + (other.group3()[2] * self.group6()[1])),
                (-(other.group0()[0] * self.group8()[2]) - (other.group0()[1] * self[e1])
                    + (other.group0()[2] * self.group8()[0])
                    + (self.group7()[2] * other.group2()[0])
                    + (other.group1()[3] * self.group6()[1])
                    + (other.group2()[1] * self.group1()[3])
                    + (other.group3()[0] * self.group6()[2])),
                ((other.group0()[0] * self.group8()[1]) - (other.group0()[1] * self.group8()[0]) - (other.group0()[2] * self[e1])
                    + (self.group7()[0] * other.group2()[1])
                    + (other.group1()[3] * self.group6()[2])
                    + (other.group2()[2] * self.group1()[3])
                    + (other.group3()[1] * self.group6()[0])),
                (-(self.group8()[1] * other.group3()[1])
                    - (self.group8()[2] * other.group1()[2])
                    - (self.group8()[2] * other.group3()[2])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[1] * self.group6()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group6()[2])),
            ]) + (Simd32x4::from(self.group0()[1]) * other.group3())
                + (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group6()[3]]))
                - (Simd32x4::from([self.group7()[2], self.group7()[0], self.group7()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group8()[0], self.group8()[1], self.group8()[2], self.group6()[0]]) * swizzle!(other.group2(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group1()[1], self.group6()[3], self.group6()[3], self.group8()[1]]) * swizzle!(other.group1(), 2, 1, 2, 1))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self[e1]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group8()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group6()[3], self.group1()[2], self.group1()[0], self.group8()[0]]) * swizzle!(other.group1(), 0, 0, 1, 0))),
            // e1234
            ((self.group0()[1] * other.group2()[3]) + (other.group0()[0] * self.group1()[0]) - (other.group0()[0] * self.group6()[0]) + (other.group0()[1] * self.group1()[1])
                - (other.group0()[1] * self.group6()[1])
                + (other.group0()[2] * self.group1()[2])
                - (other.group0()[2] * self.group6()[2])
                - (self.group7()[0] * other.group1()[0])
                + (self.group7()[0] * other.group3()[0])
                - (self.group7()[1] * other.group1()[1])
                + (self.group7()[1] * other.group3()[1])
                - (self.group7()[2] * other.group1()[2])
                + (self.group7()[2] * other.group3()[2])
                - (other.group1()[3] * self.group1()[3])
                - (other.group2()[3] * self.group6()[3])),
        );
    }
}
impl GeometricAntiProduct<DualNum321> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        4        0
    //    simd2        1        3        0
    //    simd3        4        8        0
    //    simd4        4        8        0
    // Totals...
    // yes simd       11       23        0
    //  no simd       32       66        0
    fn geometric_anti_product(self, other: DualNum321) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from([self.group3()[3], self.group0()[1]]) * other.group0() * Simd32x2::from([-1.0, 1.0]))
                + (Simd32x2::from([self.group0()[0], self.group6()[3]]) * swizzle!(other.group0(), 1, 0))),
            // e1, e2, e3, e4
            ((Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group6()[0], self.group6()[1], self.group6()[2], self.group1()[3]]))
                + (Simd32x4::from(other.group0()[1]) * self.group1())),
            // e5
            (-(other.group0()[0] * self[e1]) + (other.group0()[1] * self[e1])),
            // e15, e25, e35, e45
            (-(Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[0]]))
                + (Simd32x4::from(other.group0()[1]) * self.group3())),
            // e41, e42, e43
            ((Simd32x3::from(other.group0()[0]) * self.group4()) + (Simd32x3::from(other.group0()[1]) * self.group4())),
            // e23, e31, e12
            (-(Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]])) + (Simd32x3::from(other.group0()[1]) * self.group5())),
            // e415, e425, e435, e321
            ((Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[1]]))
                + (Simd32x4::from(other.group0()[1]) * self.group6())),
            // e423, e431, e412
            ((Simd32x3::from(other.group0()[0]) * self.group7()) + (Simd32x3::from(other.group0()[1]) * self.group7())),
            // e235, e315, e125
            (-(Simd32x3::from(other.group0()[0]) * self.group8()) + (Simd32x3::from(other.group0()[1]) * self.group8())),
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group5()[0], self.group5()[1], self.group5()[2], self.group9()[3]]))
                + (Simd32x4::from(other.group0()[1]) * self.group9())),
            // e1234
            ((other.group0()[0] * self[e45]) + (other.group0()[1] * self[e45])),
        );
    }
}
impl GeometricAntiProduct<DualNum4> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       18        0
    //    simd2        1        2        0
    //    simd3        5        9        0
    //    simd4        3        4        0
    // Totals...
    // yes simd       15       33        0
    //  no simd       35       65        0
    fn geometric_anti_product(self, other: DualNum4) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group9()[3], self[e1]])) + (Simd32x2::from(other.group0()[1]) * self.group0())),
            // e1, e2, e3, e4
            (Simd32x4::from([0.0, 0.0, 0.0, ((other.group0()[0] * self.group6()[3]) * -1.0)])
                + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group8()[0], self.group8()[1], self.group8()[2], self.group0()[1]]))
                + (Simd32x4::from(other.group0()[1]) * self.group1())),
            // e5
            (other.group0()[1] * self[e1]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other.group0()[1] * self.group3()[0]),
                (other.group0()[1] * self.group3()[1]),
                (other.group0()[1] * self.group3()[2]),
                (-(other.group0()[0] * self.group9()[3]) + (other.group0()[1] * self.group3()[3])),
            ]),
            // e41, e42, e43
            ((Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(other.group0()[0]) * self.group5())
                + (Simd32x3::from(other.group0()[1]) * self.group4())),
            // e23, e31, e12
            ((Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]])) + (Simd32x3::from(other.group0()[1]) * self.group5())),
            // e415, e425, e435, e321
            ((Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group8()[0], self.group8()[1], self.group8()[2], self[e1]]))
                + (Simd32x4::from(other.group0()[1]) * self.group6())),
            // e423, e431, e412
            (-(Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                + (Simd32x3::from(other.group0()[1]) * self.group7())),
            // e235, e315, e125
            (Simd32x3::from(other.group0()[1]) * self.group8()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group3()[0]) + (other.group0()[1] * self.group9()[0])),
                (-(other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group9()[1])),
                (-(other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group9()[2])),
                (other.group0()[1] * self.group9()[3]),
            ]),
            // e1234
            ((other.group0()[0] * self.group0()[0]) + (other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self[e45])),
        );
    }
}
impl GeometricAntiProduct<DualNum5> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       19        0
    //    simd2        1        2        0
    //    simd3        3        7        0
    //    simd4        5        7        0
    // Totals...
    // yes simd       14       35        0
    //  no simd       36       72        0
    fn geometric_anti_product(self, other: DualNum5) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from(other.group0()[0]) * Simd32x2::from([self[e45], self.group1()[3]])) + (Simd32x2::from(other.group0()[1]) * self.group0())),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[0] * self.group7()[0]) + (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[0] * self.group7()[1]) + (other.group0()[1] * self.group1()[1])),
                (-(other.group0()[0] * self.group7()[2]) + (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3]),
            ]),
            // e5
            ((other.group0()[0] * self.group0()[1]) + (other.group0()[0] * self.group6()[3]) + (other.group0()[1] * self[e1])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group9()[0]) * -1.0),
                ((other.group0()[0] * self.group9()[1]) * -1.0),
                ((other.group0()[0] * self.group9()[2]) * -1.0),
                0.0,
            ]) + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group5()[0], self.group5()[1], self.group5()[2], self[e45]]))
                + (Simd32x4::from(other.group0()[1]) * self.group3())),
            // e41, e42, e43
            (Simd32x3::from(other.group0()[1]) * self.group4()),
            // e23, e31, e12
            ((Simd32x3::from(other.group0()[0]) * self.group4()) + (Simd32x3::from(other.group0()[1]) * self.group5())),
            // e415, e425, e435, e321
            ((Simd32x4::from(other.group0()[0])
                * Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group1()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(other.group0()[1]) * self.group6())),
            // e423, e431, e412
            (Simd32x3::from(other.group0()[1]) * self.group7()),
            // e235, e315, e125
            ((Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                + (Simd32x3::from(other.group0()[1]) * self.group8())),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([0.0, 0.0, 0.0, ((other.group0()[0] * self.group3()[3]) * -1.0)])
                + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group4()[0], self.group4()[1], self.group4()[2], self.group0()[0]]))
                + (Simd32x4::from(other.group0()[1]) * self.group9())),
            // e1234
            (other.group0()[1] * self[e45]),
        );
    }
}
impl GeometricAntiProduct<FlatPoint> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       38       59        0
    //    simd2        1        1        0
    //    simd3        8       12        0
    //    simd4        8        9        0
    // Totals...
    // yes simd       55       81        0
    //  no simd       96      133        0
    fn geometric_anti_product(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                (-(self.group7()[0] * other.group0()[0]) - (self.group7()[1] * other.group0()[1]) - (self.group7()[2] * other.group0()[2])),
                ((self.group4()[0] * other.group0()[0]) + (self.group4()[1] * other.group0()[1]) + (self.group4()[2] * other.group0()[2])),
            ]) - (Simd32x2::from(other.group0()[3]) * Simd32x2::from([self.group6()[3], self.group3()[3]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group4()[1] * other.group0()[2]) - (self.group4()[2] * other.group0()[1]) + (self.group5()[0] * other.group0()[3]) + (other.group0()[0] * self[e45])),
                (-(self.group4()[0] * other.group0()[2]) + (self.group4()[2] * other.group0()[0]) + (self.group5()[1] * other.group0()[3]) + (other.group0()[1] * self[e45])),
                ((self.group4()[0] * other.group0()[1]) - (self.group4()[1] * other.group0()[0]) + (self.group5()[2] * other.group0()[3]) + (other.group0()[2] * self[e45])),
                (other.group0()[3] * self[e45]),
            ]),
            // e5
            ((self.group5()[0] * other.group0()[0]) + (self.group5()[1] * other.group0()[1]) + (self.group5()[2] * other.group0()[2])
                - (other.group0()[0] * self.group9()[0])
                - (other.group0()[1] * self.group9()[1])
                - (other.group0()[2] * self.group9()[2])
                - (other.group0()[3] * self.group9()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group8()[0] * other.group0()[3]) + (other.group0()[0] * self.group6()[3]) + (other.group0()[2] * self.group1()[1]) + (other.group0()[2] * self.group6()[1])),
                ((self.group8()[1] * other.group0()[3]) + (other.group0()[0] * self.group1()[2]) + (other.group0()[0] * self.group6()[2]) + (other.group0()[1] * self.group6()[3])),
                ((self.group8()[2] * other.group0()[3]) + (other.group0()[1] * self.group1()[0]) + (other.group0()[1] * self.group6()[0]) + (other.group0()[2] * self.group6()[3])),
                ((self.group7()[2] * other.group0()[2]) * -1.0),
            ]) + (Simd32x4::from(self.group0()[1]) * other.group0())
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group7()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group7()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))),
            // e41, e42, e43
            (Simd32x3::from(other.group0()[3]) * self.group7() * Simd32x3::from(-1.0)),
            // e23, e31, e12
            (-(Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group7(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group7(), 1, 2, 0))),
            // e415, e425, e435, e321
            (-(Simd32x4::from([self.group4()[1], self.group4()[2], self.group4()[0], self.group4()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group4()[2], self.group4()[0], self.group4()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group9()[0], self.group9()[1], self.group9()[2], self.group4()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([self[e45], self[e45], self[e45], self.group4()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e423, e431, e412
            (Simd32x3::from(other.group0()[3]) * self.group4()),
            // e235, e315, e125
            (Simd32x3::from([
                (-(other.group0()[1] * self.group9()[2]) + (other.group0()[2] * self.group9()[1])),
                ((other.group0()[0] * self.group9()[2]) - (other.group0()[2] * self.group9()[0])),
                (-(other.group0()[0] * self.group9()[1]) + (other.group0()[1] * self.group9()[0])),
            ]) - (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group5(), 2, 0, 1))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group5(), 1, 2, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[3] * self.group6()[0])),
                ((other.group0()[1] * self.group1()[3]) + (other.group0()[3] * self.group6()[1])),
                ((other.group0()[2] * self.group1()[3]) + (other.group0()[3] * self.group6()[2])),
                (-(other.group0()[0] * self.group6()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[1] * self.group6()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group6()[2])),
            ]) + (Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[0], self[e1]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group7()[2], self.group7()[0], self.group7()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e1234
            (other.group0()[3] * self.group1()[3] * -1.0),
        );
    }
}
impl GeometricAntiProduct<Flector> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       80      102        0
    //    simd2        4        4        0
    //    simd3       20       22        0
    //    simd4       19       20        0
    // Totals...
    // yes simd      123      148        0
    //  no simd      224      256        0
    fn geometric_anti_product(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                (-(self.group7()[0] * other.group0()[0]) - (self.group7()[1] * other.group0()[1]) - (self.group7()[2] * other.group0()[2])
                    + (other.group1()[3] * self.group1()[3])),
                ((self.group4()[0] * other.group0()[0]) + (self.group4()[1] * other.group0()[1]) + (self.group4()[2] * other.group0()[2]) - (other.group1()[3] * self[e45])),
            ]) - (Simd32x2::from(other.group0()[3]) * Simd32x2::from([self.group6()[3], self.group3()[3]]))
                + (Simd32x2::from(other.group1()[0]) * Simd32x2::from([self.group1()[0], self.group9()[0]]))
                + (Simd32x2::from(other.group1()[1]) * Simd32x2::from([self.group1()[1], self.group9()[1]]))
                + (Simd32x2::from(other.group1()[2]) * Simd32x2::from([self.group1()[2], self.group9()[2]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group4()[0] * other.group1()[3]) - (self.group4()[2] * other.group0()[1])
                    + (self.group5()[0] * other.group0()[3])
                    + (self.group5()[1] * other.group1()[2])
                    + (other.group0()[0] * self[e45])),
                ((self.group0()[0] * other.group1()[1]) - (self.group4()[0] * other.group0()[2])
                    + (self.group4()[1] * other.group1()[3])
                    + (self.group5()[1] * other.group0()[3])
                    + (self.group5()[2] * other.group1()[0])
                    + (other.group0()[1] * self[e45])),
                ((self.group0()[0] * other.group1()[2]) - (self.group4()[1] * other.group0()[0])
                    + (self.group4()[2] * other.group1()[3])
                    + (self.group5()[0] * other.group1()[1])
                    + (self.group5()[2] * other.group0()[3])
                    + (other.group0()[2] * self[e45])),
                (-(self.group4()[1] * other.group1()[1]) - (self.group4()[2] * other.group1()[2])),
            ]) + (Simd32x4::from([self.group4()[1], self.group4()[2], self.group4()[0], self[e45]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group4()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e5
            (-(self.group0()[0] * other.group1()[3]) + (self.group5()[0] * other.group0()[0]) + (self.group5()[1] * other.group0()[1]) + (self.group5()[2] * other.group0()[2])
                - (other.group0()[0] * self.group9()[0])
                - (other.group0()[1] * self.group9()[1])
                - (other.group0()[2] * self.group9()[2])
                - (other.group0()[3] * self.group9()[3])
                + (other.group1()[0] * self.group3()[0])
                + (other.group1()[1] * self.group3()[1])
                + (other.group1()[2] * self.group3()[2])
                + (other.group1()[3] * self.group3()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group8()[0] * other.group0()[3])
                    + (other.group0()[0] * self.group6()[3])
                    + (other.group0()[2] * self.group1()[1])
                    + (other.group0()[2] * self.group6()[1])
                    + (other.group1()[0] * self[e1])
                    + (other.group1()[3] * self.group1()[0])
                    + (other.group1()[3] * self.group6()[0])),
                ((self.group8()[1] * other.group0()[3])
                    + (other.group0()[0] * self.group1()[2])
                    + (other.group0()[0] * self.group6()[2])
                    + (other.group0()[1] * self.group6()[3])
                    + (other.group1()[1] * self[e1])
                    + (other.group1()[3] * self.group1()[1])
                    + (other.group1()[3] * self.group6()[1])),
                ((self.group8()[2] * other.group0()[3])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[1] * self.group6()[0])
                    + (other.group0()[2] * self.group6()[3])
                    + (other.group1()[2] * self[e1])
                    + (other.group1()[3] * self.group1()[2])
                    + (other.group1()[3] * self.group6()[2])),
                (-(self.group7()[2] * other.group0()[2]) - (other.group1()[1] * self.group6()[1]) - (other.group1()[2] * self.group6()[2])),
            ]) + (Simd32x4::from(self.group0()[1]) * other.group0())
                + (Simd32x4::from([self.group8()[1], self.group8()[2], self.group8()[0], self.group1()[3]]) * swizzle!(other.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group8()[2], self.group8()[0], self.group8()[1], self.group6()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group7()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group7()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))),
            // e41, e42, e43
            (-(Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from([other.group0()[3], other.group0()[3], other.group1()[1]]) * swizzle!(self.group7(), 0, 1, 0))
                + (Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]) * swizzle!(self.group7(), 2, 0, 1))
                - (Simd32x3::from([other.group1()[2], other.group1()[0], other.group0()[3]]) * swizzle!(self.group7(), 1, 2, 2))),
            // e23, e31, e12
            (Simd32x3::from([
                ((other.group1()[1] * self.group1()[2]) - (other.group1()[2] * self.group1()[1])),
                (-(other.group1()[0] * self.group1()[2]) + (other.group1()[2] * self.group1()[0])),
                ((other.group1()[0] * self.group1()[1]) - (other.group1()[1] * self.group1()[0])),
            ]) - (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from(self.group6()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group7(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group7(), 1, 2, 2))
                + (Simd32x3::from([other.group1()[3], other.group1()[3], other.group0()[1]]) * swizzle!(self.group7(), 0, 1, 0))),
            // e415, e425, e435, e321
            (-(Simd32x4::from([self.group4()[0], self.group4()[1], self.group4()[2], self.group5()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group4()[1], self.group4()[2], self.group4()[0], self.group4()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group4()[2], self.group4()[0], self.group4()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group3()[3], self.group9()[2], self.group9()[0], self.group5()[1]]) * swizzle!(other.group1(), 0, 0, 1, 1))
                - (Simd32x4::from([self.group9()[0], self.group9()[1], self.group9()[2], self.group4()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group9()[1], self.group3()[3], self.group3()[3], self.group5()[2]]) * swizzle!(other.group1(), 2, 1, 2, 2))
                + (Simd32x4::from([self.group9()[2], self.group9()[0], self.group9()[1], self[e45]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                - (Simd32x4::from([self[e45], self[e45], self[e45], self.group4()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e423, e431, e412
            ((Simd32x3::from(self[e45]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from([other.group0()[3], other.group0()[3], other.group1()[1]]) * swizzle!(self.group4(), 0, 1, 0))
                - (Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]) * swizzle!(self.group4(), 2, 0, 1))
                + (Simd32x3::from([other.group1()[2], other.group1()[0], other.group0()[3]]) * swizzle!(self.group4(), 1, 2, 2))),
            // e235, e315, e125
            (Simd32x3::from([
                (-(other.group0()[1] * self.group9()[2]) + (other.group0()[2] * self.group9()[1]) + (other.group1()[1] * self.group3()[2])
                    - (other.group1()[2] * self.group3()[1])),
                ((other.group0()[0] * self.group9()[2]) - (other.group0()[2] * self.group9()[0]) - (other.group1()[0] * self.group3()[2]) + (other.group1()[2] * self.group3()[0])),
                (-(other.group0()[0] * self.group9()[1]) + (other.group0()[1] * self.group9()[0]) + (other.group1()[0] * self.group3()[1])
                    - (other.group1()[1] * self.group3()[0])),
            ]) - (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from(self.group9()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group5(), 2, 0, 1))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group5(), 1, 2, 2))
                - (Simd32x3::from([other.group1()[3], other.group1()[3], other.group0()[1]]) * swizzle!(self.group5(), 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[3] * self.group6()[0]) + (other.group1()[2] * self.group6()[1])),
                ((other.group0()[1] * self.group1()[3]) + (other.group0()[3] * self.group6()[1]) + (other.group1()[0] * self.group6()[2])),
                ((other.group0()[2] * self.group1()[3]) + (other.group0()[3] * self.group6()[2]) + (other.group1()[1] * self.group6()[0])),
                (-(self.group8()[1] * other.group1()[1])
                    - (self.group8()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group6()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[1] * self.group6()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group6()[2])),
            ]) + (Simd32x4::from(self.group0()[1]) * other.group1())
                + (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group6()[3]]))
                + (Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[0], self[e1]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group7()[2], self.group7()[0], self.group7()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group8()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e1234
            ((self.group7()[0] * other.group1()[0]) + (self.group7()[1] * other.group1()[1]) + (self.group7()[2] * other.group1()[2]) - (other.group0()[3] * self.group1()[3])),
        );
    }
}
impl GeometricAntiProduct<Line> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       83      101        0
    //    simd2        5        6        0
    //    simd3       17       21        0
    //    simd4        4        4        0
    // Totals...
    // yes simd      109      132        0
    //  no simd      160      192        0
    fn geometric_anti_product(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (-(Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group5()[0], self.group6()[0]]))
                - (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group5()[1], self.group6()[1]]))
                - (Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group5()[2], self.group6()[2]]))
                - (Simd32x2::from(other.group1()[0]) * Simd32x2::from([self.group4()[0], self.group7()[0]]))
                - (Simd32x2::from(other.group1()[1]) * Simd32x2::from([self.group4()[1], self.group7()[1]]))
                - (Simd32x2::from(other.group1()[2]) * Simd32x2::from([self.group4()[2], self.group7()[2]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group6()[3]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) - (other.group1()[0] * self.group1()[3])
                    + (other.group1()[1] * self.group7()[2])
                    - (other.group1()[2] * self.group7()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group6()[3])
                    - (other.group0()[2] * self.group1()[0])
                    - (other.group1()[0] * self.group7()[2])
                    - (other.group1()[1] * self.group1()[3])
                    + (other.group1()[2] * self.group7()[0])),
                (-(other.group0()[0] * self.group1()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group6()[3])
                    + (other.group1()[0] * self.group7()[1])
                    - (other.group1()[1] * self.group7()[0])
                    - (other.group1()[2] * self.group1()[3])),
                (-(other.group0()[0] * self.group7()[0]) - (other.group0()[1] * self.group7()[1]) - (other.group0()[2] * self.group7()[2])),
            ]),
            // e5
            (-(other.group0()[0] * self.group8()[0])
                - (other.group0()[1] * self.group8()[1])
                - (other.group0()[2] * self.group8()[2])
                - (other.group1()[0] * self.group1()[0])
                - (other.group1()[0] * self.group6()[0])
                - (other.group1()[1] * self.group1()[1])
                - (other.group1()[1] * self.group6()[1])
                - (other.group1()[2] * self.group1()[2])
                - (other.group1()[2] * self.group6()[2])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (other.group0()[0] * self.group9()[3]) - (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group3()[1])
                    + (other.group1()[1] * self.group9()[2])
                    + (other.group1()[2] * self.group5()[1])),
                ((self.group0()[0] * other.group1()[1]) + (other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group9()[3]) - (other.group0()[2] * self.group3()[0])
                    + (other.group1()[0] * self.group5()[2])
                    + (other.group1()[2] * self.group9()[0])),
                ((self.group0()[0] * other.group1()[2]) - (other.group0()[0] * self.group3()[1])
                    + (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group9()[3])
                    + (other.group1()[0] * self.group9()[1])
                    + (other.group1()[1] * self.group5()[0])),
                (-(other.group0()[0] * self.group9()[0]) - (other.group0()[1] * self.group9()[1]) - (other.group0()[2] * self.group9()[2])),
            ]) - (Simd32x4::from(other.group1()[0]) * Simd32x4::from([self.group3()[3], self.group9()[2], self.group5()[1], self.group4()[0]]))
                - (Simd32x4::from(other.group1()[1]) * Simd32x4::from([self.group5()[2], self.group3()[3], self.group9()[0], self.group4()[1]]))
                - (Simd32x4::from(other.group1()[2]) * Simd32x4::from([self.group9()[1], self.group5()[0], self.group3()[3], self.group4()[2]]))),
            // e41, e42, e43
            ((Simd32x3::from([self.group4()[1], self[e45], self[e45]]) * swizzle!(other.group0(), 2, 1, 2))
                + (Simd32x3::from([self[e45], self.group4()[2], self.group4()[0]]) * swizzle!(other.group0(), 0, 0, 1))
                - (swizzle!(other.group0(), 1, 2, 0) * swizzle!(self.group4(), 2, 0, 1))),
            // e23, e31, e12
            ((Simd32x3::from(self.group0()[0]) * other.group0())
                + (Simd32x3::from([self.group4()[1], self[e45], self[e45]]) * swizzle!(other.group1(), 2, 1, 2))
                + (Simd32x3::from([self[e45], self.group4()[2], self.group4()[0]]) * swizzle!(other.group1(), 0, 0, 1))
                - (swizzle!(other.group0(), 1, 2, 0) * swizzle!(self.group5(), 2, 0, 1))
                + (swizzle!(other.group0(), 2, 0, 1) * swizzle!(self.group5(), 1, 2, 0))
                - (swizzle!(other.group1(), 1, 2, 0) * swizzle!(self.group4(), 2, 0, 1))),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[0]) - (other.group0()[1] * self.group6()[2]) + (other.group0()[2] * self.group6()[1]) + (other.group1()[0] * self.group1()[3])
                    - (other.group1()[1] * self.group7()[2])
                    + (other.group1()[2] * self.group7()[1])),
                ((self.group0()[1] * other.group0()[1]) + (other.group0()[0] * self.group6()[2]) - (other.group0()[2] * self.group6()[0])
                    + (other.group1()[0] * self.group7()[2])
                    + (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group7()[0])),
                ((self.group0()[1] * other.group0()[2]) - (other.group0()[0] * self.group6()[1]) + (other.group0()[1] * self.group6()[0]) - (other.group1()[0] * self.group7()[1])
                    + (other.group1()[1] * self.group7()[0])
                    + (other.group1()[2] * self.group1()[3])),
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])
                    + (other.group1()[0] * self.group7()[0])
                    + (other.group1()[1] * self.group7()[1])
                    + (other.group1()[2] * self.group7()[2])),
            ]),
            // e423, e431, e412
            ((Simd32x3::from([self.group7()[1], self.group1()[3], self.group1()[3]]) * swizzle!(other.group0(), 2, 1, 2))
                + (Simd32x3::from([self.group1()[3], self.group7()[2], self.group7()[0]]) * swizzle!(other.group0(), 0, 0, 1))
                - (swizzle!(other.group0(), 1, 2, 0) * swizzle!(self.group7(), 2, 0, 1))),
            // e235, e315, e125
            ((Simd32x3::from(self.group0()[1]) * other.group1())
                + (Simd32x3::from([self.group8()[1], self[e1], self[e1]]) * swizzle!(other.group0(), 2, 1, 2))
                + (Simd32x3::from([self.group1()[1], self.group6()[2], self.group6()[0]]) * swizzle!(other.group1(), 2, 0, 1))
                - (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]) * swizzle!(other.group1(), 1, 2, 0))
                + (Simd32x3::from([self.group6()[1], self.group6()[3], self.group6()[3]]) * swizzle!(other.group1(), 2, 1, 2))
                - (Simd32x3::from([self.group6()[2], self.group6()[0], self.group6()[1]]) * swizzle!(other.group1(), 1, 2, 0))
                + (Simd32x3::from([self.group6()[3], self.group1()[2], self.group1()[0]]) * swizzle!(other.group1(), 0, 0, 1))
                + (Simd32x3::from([self[e1], self.group8()[2], self.group8()[0]]) * swizzle!(other.group0(), 0, 0, 1))
                - (swizzle!(other.group0(), 1, 2, 0) * swizzle!(self.group8(), 2, 0, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self.group9()[2]) + (other.group1()[0] * self[e45]) - (other.group1()[1] * self.group4()[2])
                    + (other.group1()[2] * self.group4()[1])),
                ((other.group0()[1] * self.group3()[3]) - (other.group0()[2] * self.group9()[0]) + (other.group1()[0] * self.group4()[2]) + (other.group1()[1] * self[e45])
                    - (other.group1()[2] * self.group4()[0])),
                (-(other.group0()[0] * self.group9()[1]) + (other.group0()[2] * self.group3()[3]) - (other.group1()[0] * self.group4()[1])
                    + (other.group1()[1] * self.group4()[0])
                    + (other.group1()[2] * self[e45])),
                (-(other.group0()[0] * self.group3()[0])
                    - (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group3()[2])
                    - (other.group1()[0] * self.group5()[0])
                    - (other.group1()[1] * self.group5()[1])
                    + (other.group1()[1] * self.group9()[1])
                    - (other.group1()[2] * self.group5()[2])
                    + (other.group1()[2] * self.group9()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group9(), 1, 2, 0, 0))),
            // e1234
            (-(other.group0()[0] * self.group4()[0]) - (other.group0()[1] * self.group4()[1]) - (other.group0()[2] * self.group4()[2])),
        );
    }
}
impl GeometricAntiProduct<Motor> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       59       81        0
    //    simd2        7        8        0
    //    simd3       21       24        0
    //    simd4       22       22        0
    // Totals...
    // yes simd      109      135        0
    //  no simd      224      257        0
    fn geometric_anti_product(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (-(Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group5()[0], self.group6()[0]]))
                - (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group5()[1], self.group6()[1]]))
                - (Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group5()[2], self.group6()[2]]))
                + (Simd32x2::from(other.group0()[3]) * self.group0())
                - (Simd32x2::from(other.group1()[0]) * Simd32x2::from([self.group4()[0], self.group7()[0]]))
                - (Simd32x2::from(other.group1()[1]) * Simd32x2::from([self.group4()[1], self.group7()[1]]))
                - (Simd32x2::from(other.group1()[2]) * Simd32x2::from([self.group4()[2], self.group7()[2]]))
                + (Simd32x2::from(other.group1()[3]) * Simd32x2::from([self[e45], self.group1()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(self.group7()[0] * other.group1()[3]) - (self.group7()[1] * other.group1()[2])
                    + (self.group7()[2] * other.group1()[1])
                    + (other.group0()[2] * self.group1()[1])
                    + (other.group0()[3] * self.group1()[0])
                    - (other.group1()[0] * self.group1()[3])),
                ((self.group7()[0] * other.group1()[2]) - (self.group7()[1] * other.group1()[3]) - (self.group7()[2] * other.group1()[0])
                    + (other.group0()[1] * self.group6()[3])
                    + (other.group0()[3] * self.group1()[1])
                    - (other.group1()[1] * self.group1()[3])),
                (-(self.group7()[0] * other.group1()[1]) + (self.group7()[1] * other.group1()[0]) - (self.group7()[2] * other.group1()[3])
                    + (other.group0()[2] * self.group6()[3])
                    + (other.group0()[3] * self.group1()[2])
                    - (other.group1()[2] * self.group1()[3])),
                (-(self.group7()[1] * other.group0()[1]) - (self.group7()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group7()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group6()[3], self.group1()[2], self.group1()[0], self.group1()[3]]) * swizzle!(other.group0(), 0, 0, 1, 3))),
            // e5
            ((self.group0()[1] * other.group1()[3]) - (self.group8()[0] * other.group0()[0]) - (self.group8()[1] * other.group0()[1]) - (self.group8()[2] * other.group0()[2])
                + (other.group0()[3] * self[e1])
                - (other.group1()[0] * self.group1()[0])
                - (other.group1()[0] * self.group6()[0])
                - (other.group1()[1] * self.group1()[1])
                - (other.group1()[1] * self.group6()[1])
                - (other.group1()[2] * self.group1()[2])
                - (other.group1()[2] * self.group6()[2])
                + (other.group1()[3] * self.group6()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group5()[0] * other.group1()[3])
                    + (self.group5()[1] * other.group1()[2])
                    + (other.group0()[2] * self.group3()[1])
                    + (other.group0()[3] * self.group3()[0])
                    + (other.group1()[1] * self.group9()[2])),
                ((self.group5()[1] * other.group1()[3])
                    + (self.group5()[2] * other.group1()[0])
                    + (other.group0()[1] * self.group9()[3])
                    + (other.group0()[3] * self.group3()[1])
                    + (other.group1()[2] * self.group9()[0])),
                ((self.group5()[0] * other.group1()[1])
                    + (self.group5()[2] * other.group1()[3])
                    + (other.group0()[2] * self.group9()[3])
                    + (other.group0()[3] * self.group3()[2])
                    + (other.group1()[0] * self.group9()[1])),
                ((other.group0()[2] * self.group9()[2]) * -1.0),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self[e45]]) * other.group1())
                - (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group4()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[1]]) * swizzle!(self.group9(), 0, 1, 2, 1))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group9()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[3], self.group9()[2], self.group9()[0], self.group4()[1]]) * swizzle!(other.group1(), 0, 0, 1, 1))
                - (Simd32x4::from([self.group9()[1], self.group3()[3], self.group3()[3], self.group4()[2]]) * swizzle!(other.group1(), 2, 1, 2, 2))
                + (Simd32x4::from([self.group9()[3], self.group3()[2], self.group3()[0], self.group3()[3]]) * swizzle!(other.group0(), 0, 0, 1, 3))),
            // e41, e42, e43
            ((Simd32x3::from(self[e45]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group4(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[3]]) * swizzle!(self.group4(), 1, 2, 2))
                + (Simd32x3::from([other.group0()[3], other.group0()[3], other.group0()[1]]) * swizzle!(self.group4(), 0, 1, 0))),
            // e23, e31, e12
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group5(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[3]]) * swizzle!(self.group5(), 1, 2, 2))
                + (Simd32x3::from([other.group0()[3], other.group0()[3], other.group0()[1]]) * swizzle!(self.group5(), 0, 1, 0))
                - (Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]) * swizzle!(self.group4(), 2, 0, 1))
                + (Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[3]]) * swizzle!(self.group4(), 1, 2, 2))
                + (Simd32x3::from([other.group1()[3], other.group1()[3], other.group1()[1]]) * swizzle!(self.group4(), 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[2] * self.group6()[1]) + (other.group0()[3] * self.group6()[0])),
                ((other.group0()[0] * self.group6()[2]) + (other.group0()[3] * self.group6()[1])),
                ((other.group0()[1] * self.group6()[0]) + (other.group0()[3] * self.group6()[2])),
                (-(other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group6()[3]]) * other.group0())
                + (Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[0], self.group7()[0]]) * swizzle!(other.group1(), 3, 3, 1, 0))
                + (Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[2], self.group7()[1]]) * swizzle!(other.group1(), 2, 0, 3, 1))
                - (Simd32x4::from([self.group7()[2], self.group7()[0], self.group7()[1], self.group1()[3]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group7()[2]]) * swizzle!(other.group1(), 0, 1, 2, 2))
                - (Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e423, e431, e412
            ((Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group7(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[3]]) * swizzle!(self.group7(), 1, 2, 2))
                + (Simd32x3::from([other.group0()[3], other.group0()[3], other.group0()[1]]) * swizzle!(self.group7(), 0, 1, 0))),
            // e235, e315, e125
            (Simd32x3::from([
                (-(other.group1()[1] * self.group1()[2]) - (other.group1()[1] * self.group6()[2])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group1()[2] * self.group6()[1])),
                ((other.group1()[0] * self.group1()[2]) + (other.group1()[0] * self.group6()[2]) - (other.group1()[2] * self.group1()[0]) - (other.group1()[2] * self.group6()[0])),
                (-(other.group1()[0] * self.group1()[1]) - (other.group1()[0] * self.group6()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[1] * self.group6()[0])),
            ]) + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                + (Simd32x3::from(self.group6()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self[e1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group8(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[3]]) * swizzle!(self.group8(), 1, 2, 2))
                + (Simd32x3::from([other.group0()[3], other.group0()[3], other.group0()[1]]) * swizzle!(self.group8(), 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (other.group0()[3] * self.group9()[0]),
                (other.group0()[1] * self.group3()[3]),
                (other.group0()[2] * self.group3()[3]),
                (-(self.group5()[1] * other.group1()[1])
                    - (self.group5()[2] * other.group1()[2])
                    - (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group3()[2])
                    - (other.group1()[3] * self.group3()[3])),
            ]) + (Simd32x4::from([self.group4()[0], self.group4()[1], self.group4()[0], self.group0()[0]]) * swizzle!(other.group1(), 3, 3, 1, 3))
                + (Simd32x4::from([self.group4()[1], self.group4()[2], self.group4()[2], self.group9()[0]]) * swizzle!(other.group1(), 2, 0, 3, 0))
                - (Simd32x4::from([self.group4()[2], self.group4()[0], self.group4()[1], self.group5()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[3], other.group0()[3], other.group1()[1]]) * swizzle!(self.group9(), 1, 1, 2, 1))
                + (Simd32x4::from([self.group3()[3], self.group9()[2], self.group9()[0], self.group9()[3]]) * swizzle!(other.group0(), 0, 0, 1, 3))
                - (Simd32x4::from([self.group9()[2], self.group9()[0], self.group9()[1], self.group3()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self[e45], self[e45], self[e45], self.group9()[2]]) * swizzle!(other.group1(), 0, 1, 2, 2))),
            // e1234
            (-(self.group4()[0] * other.group0()[0]) - (self.group4()[1] * other.group0()[1]) - (self.group4()[2] * other.group0()[2]) + (other.group0()[3] * self[e45])),
        );
    }
}
impl GeometricAntiProduct<MultiVector> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      354      380        0
    //    simd2       16       16        0
    //    simd3      118      120        0
    //    simd4       63       63        0
    // Totals...
    // yes simd      551      579        0
    //  no simd      992     1024        0
    fn geometric_anti_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                ((other.group0()[1] * self.group0()[0])
                    - (other.group7()[0] * self.group3()[0])
                    - (other.group7()[1] * self.group3()[1])
                    - (other.group7()[2] * self.group3()[2])
                    - (self.group5()[0] * other.group6()[0])
                    - (self.group5()[1] * other.group6()[1])
                    - (self.group5()[2] * other.group6()[2])
                    - (self.group7()[0] * other.group3()[0])
                    - (self.group7()[1] * other.group3()[1])
                    - (self.group7()[2] * other.group3()[2])
                    - (other.group6()[3] * self.group3()[3])
                    + (other.group9()[0] * self.group1()[0])
                    + (other.group9()[1] * self.group1()[1])
                    + (other.group9()[2] * self.group1()[2])
                    + (other[e1] * self[e45])
                    + (other[e45] * self[e1])),
                (-(other.group0()[0] * self.group0()[0])
                    + (other.group4()[0] * self.group3()[0])
                    + (other.group4()[1] * self.group3()[1])
                    + (other.group4()[2] * self.group3()[2])
                    + (other.group5()[0] * self.group5()[0])
                    + (other.group5()[1] * self.group5()[1])
                    + (other.group5()[2] * self.group5()[2])
                    + (self.group4()[0] * other.group3()[0])
                    + (self.group4()[1] * other.group3()[1])
                    + (self.group4()[2] * other.group3()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    + (other.group6()[3] * self.group6()[3])
                    - (other.group9()[3] * self[e45])
                    - (self.group9()[3] * other[e45])),
            ]) + (Simd32x2::from(self.group0()[1]) * other.group0())
                - (Simd32x2::from(other.group8()[0]) * Simd32x2::from([self.group4()[0], self.group7()[0]]))
                - (Simd32x2::from(other.group8()[1]) * Simd32x2::from([self.group4()[1], self.group7()[1]]))
                - (Simd32x2::from(other.group8()[2]) * Simd32x2::from([self.group4()[2], self.group7()[2]]))
                - (Simd32x2::from(self.group8()[0]) * Simd32x2::from([other.group4()[0], other.group7()[0]]))
                - (Simd32x2::from(self.group8()[1]) * Simd32x2::from([other.group4()[1], other.group7()[1]]))
                - (Simd32x2::from(self.group8()[2]) * Simd32x2::from([other.group4()[2], other.group7()[2]]))
                + (Simd32x2::from(other.group1()[3]) * Simd32x2::from([self.group9()[3], self[e1]]))
                - (Simd32x2::from(other.group3()[3]) * Simd32x2::from([self.group6()[3], self.group3()[3]]))
                + (Simd32x2::from(self.group1()[3]) * Simd32x2::from([other.group9()[3], other[e1]]))
                - (Simd32x2::from(self.group6()[0]) * Simd32x2::from([other.group5()[0], other.group6()[0]]))
                - (Simd32x2::from(self.group6()[1]) * Simd32x2::from([other.group5()[1], other.group6()[1]]))
                - (Simd32x2::from(self.group6()[2]) * Simd32x2::from([other.group5()[2], other.group6()[2]]))
                + (Simd32x2::from(self.group9()[0]) * Simd32x2::from([other.group1()[0], other.group9()[0]]))
                + (Simd32x2::from(self.group9()[1]) * Simd32x2::from([other.group1()[1], other.group9()[1]]))
                + (Simd32x2::from(self.group9()[2]) * Simd32x2::from([other.group1()[2], other.group9()[2]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group9()[0]) - (other.group4()[0] * self.group9()[3]) + (other.group4()[1] * self.group3()[2]) + (other.group5()[0] * self.group3()[3])
                    - (other.group5()[1] * self.group9()[2])
                    + (other.group7()[0] * self[e1])
                    - (other.group7()[1] * self.group8()[2])
                    + (other.group7()[2] * self.group8()[1])
                    - (other.group8()[0] * self.group1()[3])
                    + (other.group8()[1] * self.group7()[2])
                    - (other.group8()[2] * self.group7()[1])
                    + (self.group4()[0] * other.group9()[3])
                    - (self.group4()[2] * other.group3()[1])
                    + (self.group5()[0] * other.group3()[3])
                    + (self.group5()[1] * other.group9()[2])
                    - (self.group7()[0] * other[e1])
                    + (self.group8()[0] * other.group1()[3])
                    + (other.group1()[2] * self.group6()[1])
                    + (other.group3()[0] * self[e45])
                    + (other.group6()[2] * self.group1()[1])
                    + (other.group6()[3] * self.group6()[0])),
                ((self.group0()[0] * other.group9()[1]) - (other.group4()[1] * self.group9()[3]) + (other.group4()[2] * self.group3()[0]) + (other.group5()[1] * self.group3()[3])
                    - (other.group5()[2] * self.group9()[0])
                    + (other.group7()[0] * self.group8()[2])
                    + (other.group7()[1] * self[e1])
                    - (other.group7()[2] * self.group8()[0])
                    - (other.group8()[0] * self.group7()[2])
                    - (other.group8()[1] * self.group1()[3])
                    + (other.group8()[2] * self.group7()[0])
                    - (self.group4()[0] * other.group3()[2])
                    + (self.group4()[1] * other.group9()[3])
                    + (self.group5()[1] * other.group3()[3])
                    + (self.group5()[2] * other.group9()[0])
                    - (self.group7()[1] * other[e1])
                    + (self.group8()[1] * other.group1()[3])
                    + (other.group1()[0] * self.group6()[2])
                    + (other.group3()[1] * self[e45])
                    + (other.group6()[1] * self.group6()[3])
                    + (other.group6()[3] * self.group6()[1])),
                ((self.group0()[0] * other.group9()[2]) + (other.group4()[0] * self.group3()[1]) - (other.group4()[2] * self.group9()[3]) - (other.group5()[0] * self.group9()[1])
                    + (other.group5()[2] * self.group3()[3])
                    - (other.group7()[0] * self.group8()[1])
                    + (other.group7()[1] * self.group8()[0])
                    + (other.group7()[2] * self[e1])
                    + (other.group8()[0] * self.group7()[1])
                    - (other.group8()[1] * self.group7()[0])
                    - (other.group8()[2] * self.group1()[3])
                    - (self.group4()[1] * other.group3()[0])
                    + (self.group4()[2] * other.group9()[3])
                    + (self.group5()[0] * other.group9()[1])
                    + (self.group5()[2] * other.group3()[3])
                    - (self.group7()[2] * other[e1])
                    + (self.group8()[2] * other.group1()[3])
                    + (other.group1()[1] * self.group6()[0])
                    + (other.group3()[2] * self[e45])
                    + (other.group6()[2] * self.group6()[3])
                    + (other.group6()[3] * self.group6()[2])),
                (-(other.group0()[0] * self[e45])
                    + (other.group4()[0] * self.group5()[0])
                    + (other.group4()[1] * self.group5()[1])
                    + (other.group4()[2] * self.group5()[2])
                    + (other.group4()[2] * self.group9()[2])
                    + (other.group5()[0] * self.group4()[0])
                    + (other.group5()[1] * self.group4()[1])
                    + (other.group5()[2] * self.group4()[2])
                    + (other.group7()[0] * self.group1()[0])
                    + (other.group7()[1] * self.group1()[1])
                    - (other.group7()[1] * self.group6()[1])
                    + (other.group7()[2] * self.group1()[2])
                    - (other.group7()[2] * self.group6()[2])
                    - (self.group4()[1] * other.group9()[1])
                    - (self.group4()[2] * other.group9()[2])
                    - (self.group7()[0] * other.group1()[0])
                    - (self.group7()[1] * other.group1()[1])
                    - (self.group7()[1] * other.group6()[1])
                    - (self.group7()[2] * other.group1()[2])
                    - (self.group7()[2] * other.group6()[2])
                    - (other.group1()[3] * self.group6()[3])),
            ]) + (Simd32x4::from(other.group0()[1]) * self.group1())
                + (Simd32x4::from(self.group0()[1]) * other.group1())
                - (Simd32x4::from(other[e45]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[0]]))
                + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group4()[0]]) * swizzle!(self.group9(), 0, 1, 2, 0))
                - (Simd32x4::from([other.group4()[2], other.group4()[0], other.group4()[1], other[e45]]) * swizzle!(self.group3(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group4()[1]]) * swizzle!(self.group9(), 1, 2, 0, 1))
                + (Simd32x4::from([self.group4()[1], self.group4()[2], self.group4()[0], self[e45]]) * swizzle!(other.group3(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group4()[0]]) * swizzle!(other.group9(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group7()[0]]) * swizzle!(self.group6(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group7()[0]]) * swizzle!(other.group6(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group6()[3], self.group1()[2], self.group1()[0], self.group1()[3]]) * swizzle!(other.group6(), 0, 0, 1, 3))),
            // e5
            (-(other.group0()[0] * self.group9()[3]) + (other.group0()[1] * self[e1]) - (self.group0()[0] * other.group9()[3])
                + (self.group0()[1] * other[e1])
                + (other.group5()[0] * self.group3()[0])
                + (other.group5()[1] * self.group3()[1])
                + (other.group5()[2] * self.group3()[2])
                - (other.group8()[0] * self.group1()[0])
                - (other.group8()[0] * self.group6()[0])
                - (other.group8()[1] * self.group1()[1])
                - (other.group8()[1] * self.group6()[1])
                - (other.group8()[2] * self.group1()[2])
                - (other.group8()[2] * self.group6()[2])
                + (self.group5()[0] * other.group3()[0])
                + (self.group5()[1] * other.group3()[1])
                + (self.group5()[2] * other.group3()[2])
                + (self.group8()[0] * other.group1()[0])
                - (self.group8()[0] * other.group6()[0])
                + (self.group8()[1] * other.group1()[1])
                - (self.group8()[1] * other.group6()[1])
                + (self.group8()[2] * other.group1()[2])
                - (self.group8()[2] * other.group6()[2])
                - (other.group3()[0] * self.group9()[0])
                - (other.group3()[1] * self.group9()[1])
                - (other.group3()[2] * self.group9()[2])
                - (other.group3()[3] * self.group9()[3])
                - (other.group6()[3] * self[e1])
                + (other.group9()[0] * self.group3()[0])
                + (other.group9()[1] * self.group3()[1])
                + (other.group9()[2] * self.group3()[2])
                + (other.group9()[3] * self.group3()[3])
                + (self.group6()[3] * other[e1])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group8()[0]) + (self.group0()[0] * other.group8()[0]) + (other.group5()[0] * self[e1]) - (other.group5()[1] * self.group8()[2])
                    + (other.group5()[2] * self.group8()[1])
                    + (other.group8()[1] * self.group9()[2])
                    + (other.group8()[2] * self.group5()[1])
                    + (self.group8()[0] * other.group3()[3])
                    - (other.group1()[2] * self.group3()[1])
                    + (other.group3()[0] * self.group6()[3])
                    + (other.group3()[2] * self.group6()[1])
                    + (other.group6()[0] * self.group9()[3])
                    + (other.group9()[0] * self[e1])
                    + (other.group9()[3] * self.group6()[0])),
                ((other.group0()[0] * self.group8()[1]) + (self.group0()[0] * other.group8()[1]) + (other.group5()[0] * self.group8()[2]) + (other.group5()[1] * self[e1])
                    - (other.group5()[2] * self.group8()[0])
                    + (other.group8()[0] * self.group5()[2])
                    + (other.group8()[2] * self.group9()[0])
                    + (self.group8()[1] * other.group3()[3])
                    + (other.group3()[0] * self.group6()[2])
                    + (other.group3()[1] * self.group6()[3])
                    + (other.group6()[1] * self.group9()[3])
                    + (other.group9()[1] * self[e1])
                    + (other.group9()[3] * self.group6()[1])
                    - (self.group9()[1] * other[e1])),
                ((other.group0()[0] * self.group8()[2]) + (self.group0()[0] * other.group8()[2]) - (other.group5()[0] * self.group8()[1])
                    + (other.group5()[1] * self.group8()[0])
                    + (other.group5()[2] * self[e1])
                    + (other.group8()[0] * self.group9()[1])
                    + (other.group8()[1] * self.group5()[0])
                    + (self.group8()[2] * other.group3()[3])
                    + (other.group3()[1] * self.group6()[0])
                    + (other.group3()[2] * self.group6()[3])
                    + (other.group6()[2] * self.group9()[3])
                    + (other.group9()[2] * self[e1])
                    + (other.group9()[3] * self.group6()[2])
                    - (self.group9()[2] * other[e1])),
                ((other.group4()[0] * self.group8()[0])
                    + (other.group4()[1] * self.group8()[1])
                    + (other.group4()[2] * self.group8()[2])
                    + (other.group5()[2] * self.group1()[2])
                    + (other.group7()[2] * self.group3()[2])
                    + (self.group5()[0] * other.group1()[0])
                    + (self.group5()[1] * other.group1()[1])
                    + (self.group5()[2] * other.group1()[2])
                    - (self.group7()[1] * other.group3()[1])
                    - (self.group7()[2] * other.group3()[2])
                    - (other.group6()[2] * self.group9()[2])
                    - (other.group9()[1] * self.group6()[1])
                    - (other.group9()[2] * self.group6()[2])
                    - (other[e45] * self[e1])),
            ]) + (Simd32x4::from(other.group0()[1]) * self.group3())
                + (Simd32x4::from(self.group0()[1]) * other.group3())
                - (Simd32x4::from(other.group8()[0]) * Simd32x4::from([self.group3()[3], self.group9()[2], self.group5()[1], self.group4()[0]]))
                - (Simd32x4::from(other.group8()[1]) * Simd32x4::from([self.group5()[2], self.group3()[3], self.group9()[0], self.group4()[1]]))
                - (Simd32x4::from(other.group8()[2]) * Simd32x4::from([self.group9()[1], self.group5()[0], self.group3()[3], self.group4()[2]]))
                + (Simd32x4::from(other[e1]) * Simd32x4::from([self.group5()[0], self.group5()[1], self.group5()[2], self[e45]]))
                + (Simd32x4::from([self.group8()[1], self.group8()[2], self.group8()[0], self.group1()[3]]) * swizzle!(other.group9(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group8()[2], self.group8()[0], self.group8()[1], self.group6()[0]]) * swizzle!(other.group9(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group7()[0]]) * swizzle!(self.group3(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group0()[0]]) * swizzle!(self.group6(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group5()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group7()[1]]) * swizzle!(self.group3(), 1, 2, 0, 1))
                + (Simd32x4::from([other.group9()[3], other.group9()[3], other.group9()[3], other.group5()[1]]) * swizzle!(self.group1(), 0, 1, 2, 1))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group7()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group9()[0]]) * swizzle!(other.group6(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group0()[0]]) * swizzle!(other.group6(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group9()[3], self.group3()[2], self.group3()[0], self.group9()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))
                - (Simd32x4::from([other[e1], other.group1()[1], other.group1()[2], other.group6()[1]]) * swizzle!(self.group9(), 0, 3, 3, 1))),
            // e41, e42, e43
            ((Simd32x3::from(other.group0()[0]) * self.group7())
                + (Simd32x3::from(other.group0()[1]) * self.group4())
                + (Simd32x3::from(self.group0()[0]) * other.group7())
                + (Simd32x3::from(self.group0()[1]) * other.group4())
                - (Simd32x3::from(other.group4()[0]) * Simd32x3::from([self.group6()[3], self.group1()[2], self.group6()[1]]))
                - (Simd32x3::from(other.group4()[1]) * Simd32x3::from([self.group6()[2], self.group6()[3], self.group1()[0]]))
                - (Simd32x3::from(other.group4()[2]) * Simd32x3::from([self.group1()[1], self.group6()[0], self.group6()[3]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(other.group1()[3]) * self.group5())
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                - (Simd32x3::from(other[e45]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                + (Simd32x3::from([self.group5()[1], self.group9()[2], self.group9()[0]]) * swizzle!(other.group7(), 2, 0, 1))
                + (Simd32x3::from([self.group7()[1], self.group1()[3], self.group1()[3]]) * swizzle!(other.group5(), 2, 1, 2))
                - (Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]) * swizzle!(self.group4(), 2, 0, 1))
                + (Simd32x3::from([other.group1()[2], other.group1()[0], other.group6()[1]]) * swizzle!(self.group4(), 1, 2, 0))
                - (Simd32x3::from([other.group3()[3], other.group3()[3], other.group9()[1]]) * swizzle!(self.group7(), 0, 1, 0))
                - (Simd32x3::from([other.group6()[1], other.group6()[2], other.group6()[0]]) * swizzle!(self.group4(), 2, 0, 1))
                + (Simd32x3::from([other.group6()[2], other.group6()[0], other.group6()[3]]) * swizzle!(self.group4(), 1, 2, 2))
                + (Simd32x3::from([other.group6()[3], other.group6()[3], other.group1()[1]]) * swizzle!(self.group4(), 0, 1, 0))
                + (Simd32x3::from([other.group9()[1], other.group9()[2], other.group9()[0]]) * swizzle!(self.group7(), 2, 0, 1))
                - (Simd32x3::from([other.group9()[2], other.group9()[0], other.group3()[3]]) * swizzle!(self.group7(), 1, 2, 2))
                + (Simd32x3::from([self.group1()[2], self.group6()[2], self.group1()[1]]) * swizzle!(other.group4(), 1, 0, 0))
                + (Simd32x3::from([self.group1()[3], self.group7()[2], self.group7()[0]]) * swizzle!(other.group5(), 0, 0, 1))
                + (Simd32x3::from([self.group3()[3], self.group5()[2], self.group5()[0]]) * swizzle!(other.group7(), 0, 0, 1))
                + (Simd32x3::from([self.group6()[1], self.group1()[0], self.group6()[0]]) * swizzle!(other.group4(), 2, 2, 1))
                + (Simd32x3::from([self.group9()[1], self.group3()[3], self.group3()[3]]) * swizzle!(other.group7(), 2, 1, 2))
                - (Simd32x3::from([self.group9()[2], self.group9()[0], self.group9()[1]]) * swizzle!(other.group7(), 1, 2, 0))
                - (swizzle!(other.group5(), 1, 2, 0) * swizzle!(self.group7(), 2, 0, 1))
                - (swizzle!(other.group7(), 1, 2, 0) * swizzle!(self.group5(), 2, 0, 1))),
            // e23, e31, e12
            (Simd32x3::from([
                ((other.group1()[1] * self.group9()[2]) - (other.group1()[2] * self.group9()[1]) + (other.group9()[1] * self.group1()[2]) - (other.group9()[2] * self.group1()[1])),
                (-(other.group1()[0] * self.group9()[2]) + (other.group1()[2] * self.group9()[0]) - (other.group9()[0] * self.group1()[2])
                    + (other.group9()[2] * self.group1()[0])),
                ((other.group1()[0] * self.group9()[1]) - (other.group1()[1] * self.group9()[0]) + (other.group9()[0] * self.group1()[1]) - (other.group9()[1] * self.group1()[0])),
            ]) + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                + (Simd32x3::from(other.group0()[1]) * self.group5())
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                + (Simd32x3::from(self.group0()[1]) * other.group5())
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                - (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(other.group6()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                - (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(self.group6()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                + (Simd32x3::from(other[e1]) * self.group4())
                + (Simd32x3::from(other[e45]) * self.group8())
                + (Simd32x3::from([self.group4()[1], self[e45], self[e45]]) * swizzle!(other.group8(), 2, 1, 2))
                + (Simd32x3::from([self.group8()[1], self[e1], self[e1]]) * swizzle!(other.group4(), 2, 1, 2))
                - (Simd32x3::from([other.group3()[1], other.group3()[2], other.group3()[0]]) * swizzle!(self.group7(), 2, 0, 1))
                + (Simd32x3::from([other.group3()[2], other.group3()[0], other.group9()[3]]) * swizzle!(self.group7(), 1, 2, 2))
                - (Simd32x3::from([other.group6()[1], other.group6()[2], other.group6()[0]]) * swizzle!(self.group5(), 2, 0, 1))
                + (Simd32x3::from([other.group6()[2], other.group6()[0], other.group6()[1]]) * swizzle!(self.group5(), 1, 2, 0))
                + (Simd32x3::from([other.group9()[3], other.group9()[3], other.group3()[1]]) * swizzle!(self.group7(), 0, 1, 0))
                + (Simd32x3::from([self.group3()[1], self.group9()[3], self.group9()[3]]) * swizzle!(other.group7(), 2, 1, 2))
                - (Simd32x3::from([self.group3()[2], self.group3()[0], self.group3()[1]]) * swizzle!(other.group7(), 1, 2, 0))
                + (Simd32x3::from([self.group6()[1], self.group6()[2], self.group6()[0]]) * swizzle!(other.group5(), 2, 0, 1))
                - (Simd32x3::from([self.group6()[2], self.group6()[0], self.group6()[1]]) * swizzle!(other.group5(), 1, 2, 0))
                + (Simd32x3::from([self.group9()[3], self.group3()[2], self.group3()[0]]) * swizzle!(other.group7(), 0, 0, 1))
                + (Simd32x3::from([self[e1], self.group8()[2], self.group8()[0]]) * swizzle!(other.group4(), 0, 0, 1))
                + (Simd32x3::from([self[e45], self.group4()[2], self.group4()[0]]) * swizzle!(other.group8(), 0, 0, 1))
                - (swizzle!(other.group4(), 1, 2, 0) * swizzle!(self.group8(), 2, 0, 1))
                - (swizzle!(other.group8(), 1, 2, 0) * swizzle!(self.group4(), 2, 0, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[0] * self.group5()[0]) - (self.group0()[0] * other.group5()[0]) - (other.group4()[2] * self.group3()[1])
                    + (other.group5()[1] * self.group5()[2])
                    - (other.group5()[2] * self.group5()[1])
                    - (other.group7()[1] * self.group8()[2])
                    + (other.group7()[2] * self.group8()[1])
                    + (other.group8()[0] * self.group1()[3])
                    - (other.group8()[1] * self.group7()[2])
                    + (other.group8()[2] * self.group7()[1])
                    + (self.group7()[0] * other[e1])
                    + (self.group8()[0] * other.group1()[3])
                    + (other.group1()[0] * self.group6()[3])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group6()[2] * self.group6()[1])
                    + (other.group6()[3] * self.group1()[0])),
                (-(other.group0()[0] * self.group5()[1])
                    - (self.group0()[0] * other.group5()[1])
                    - (other.group4()[0] * self.group3()[2])
                    - (other.group5()[0] * self.group5()[2])
                    + (other.group5()[2] * self.group5()[0])
                    + (other.group7()[0] * self.group8()[2])
                    - (other.group7()[2] * self.group8()[0])
                    + (other.group8()[0] * self.group7()[2])
                    + (other.group8()[1] * self.group1()[3])
                    - (other.group8()[2] * self.group7()[0])
                    + (self.group7()[1] * other[e1])
                    + (self.group8()[1] * other.group1()[3])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group6()[3])
                    + (other.group6()[0] * self.group6()[2])
                    + (other.group6()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group5()[2]) - (self.group0()[0] * other.group5()[2]) - (other.group4()[1] * self.group3()[0])
                    + (other.group5()[0] * self.group5()[1])
                    - (other.group5()[1] * self.group5()[0])
                    - (other.group7()[0] * self.group8()[1])
                    + (other.group7()[1] * self.group8()[0])
                    - (other.group8()[0] * self.group7()[1])
                    + (other.group8()[1] * self.group7()[0])
                    + (other.group8()[2] * self.group1()[3])
                    + (self.group7()[2] * other[e1])
                    + (self.group8()[2] * other.group1()[3])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group6()[3])
                    + (other.group6()[1] * self.group6()[0])
                    + (other.group6()[3] * self.group1()[2])),
                ((other.group4()[0] * self.group3()[0]) + (other.group4()[1] * self.group3()[1]) + (other.group4()[2] * self.group3()[2])
                    - (other.group5()[2] * self.group9()[2])
                    - (other.group7()[0] * self.group8()[0])
                    - (other.group7()[1] * self.group8()[1])
                    - (other.group7()[2] * self.group8()[2])
                    + (other.group8()[0] * self.group7()[0])
                    + (other.group8()[1] * self.group7()[1])
                    + (other.group8()[2] * self.group7()[2])
                    - (self.group4()[2] * other.group3()[2])
                    - (other.group1()[2] * self.group6()[2])
                    - (other.group6()[0] * self.group1()[0])
                    - (other.group6()[1] * self.group1()[1])
                    - (other.group6()[2] * self.group1()[2])
                    - (self.group1()[3] * other[e1])),
            ]) + (Simd32x4::from(other.group0()[1]) * self.group6())
                + (Simd32x4::from(self.group0()[1]) * other.group6())
                - (Simd32x4::from(other[e45]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group9()[3]]))
                + (Simd32x4::from(self[e1]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group1()[3]]))
                - (Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[2], other.group5()[0]]) * swizzle!(self.group9(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group4()[1], other.group4()[2], other.group4()[0], other.group0()[0]]) * swizzle!(self.group3(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group4()[0], self.group4()[1], self.group4()[2], self.group5()[0]]) * swizzle!(other.group9(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group4()[1], self.group4()[2], self.group4()[0], self.group4()[0]]) * swizzle!(other.group3(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group4()[2], self.group4()[0], self.group4()[1], self.group0()[0]]) * swizzle!(other.group3(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group5()[1]]) * swizzle!(self.group9(), 0, 1, 2, 1))
                - (Simd32x4::from([other.group6()[1], other.group6()[2], other.group6()[0], other.group1()[1]]) * swizzle!(self.group6(), 2, 0, 1, 1))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group6()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[3], self.group9()[2], self.group9()[0], self.group5()[1]]) * swizzle!(other.group9(), 0, 0, 1, 1))
                - (Simd32x4::from([self.group9()[1], self.group3()[3], self.group3()[3], self.group5()[2]]) * swizzle!(other.group9(), 2, 1, 2, 2))
                + (Simd32x4::from([self.group9()[2], self.group9()[0], self.group9()[1], self[e45]]) * swizzle!(other.group9(), 1, 2, 0, 3))
                - (Simd32x4::from([self[e45], self[e45], self[e45], self.group4()[1]]) * swizzle!(other.group3(), 0, 1, 2, 1))),
            // e423, e431, e412
            (-(Simd32x3::from(other.group0()[0]) * self.group4()) + (Simd32x3::from(other.group0()[1]) * self.group7()) - (Simd32x3::from(self.group0()[0]) * other.group4())
                + (Simd32x3::from(self.group0()[1]) * other.group7())
                - (Simd32x3::from(other.group7()[0]) * Simd32x3::from([self.group6()[3], self.group1()[2], self.group6()[1]]))
                - (Simd32x3::from(other.group7()[1]) * Simd32x3::from([self.group6()[2], self.group6()[3], self.group1()[0]]))
                - (Simd32x3::from(other.group7()[2]) * Simd32x3::from([self.group1()[1], self.group6()[0], self.group6()[3]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                - (Simd32x3::from(other[e45]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                - (Simd32x3::from(other[e45]) * self.group5())
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                - (Simd32x3::from([self.group4()[1], self[e45], self[e45]]) * swizzle!(other.group5(), 2, 1, 2))
                - (Simd32x3::from([self.group5()[1], self.group9()[2], self.group9()[0]]) * swizzle!(other.group4(), 2, 0, 1))
                - (Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]) * swizzle!(self.group7(), 2, 0, 1))
                + (Simd32x3::from([other.group1()[2], other.group1()[0], other.group6()[1]]) * swizzle!(self.group7(), 1, 2, 0))
                + (Simd32x3::from([other.group3()[3], other.group3()[3], other.group9()[1]]) * swizzle!(self.group4(), 0, 1, 0))
                - (Simd32x3::from([other.group6()[1], other.group6()[2], other.group6()[0]]) * swizzle!(self.group7(), 2, 0, 1))
                + (Simd32x3::from([other.group6()[2], other.group6()[0], other.group6()[3]]) * swizzle!(self.group7(), 1, 2, 2))
                + (Simd32x3::from([other.group6()[3], other.group6()[3], other.group1()[1]]) * swizzle!(self.group7(), 0, 1, 0))
                - (Simd32x3::from([other.group9()[1], other.group9()[2], other.group9()[0]]) * swizzle!(self.group4(), 2, 0, 1))
                + (Simd32x3::from([other.group9()[2], other.group9()[0], other.group3()[3]]) * swizzle!(self.group4(), 1, 2, 2))
                + (Simd32x3::from([self.group1()[2], self.group6()[2], self.group1()[1]]) * swizzle!(other.group7(), 1, 0, 0))
                - (Simd32x3::from([self.group3()[3], self.group5()[2], self.group5()[0]]) * swizzle!(other.group4(), 0, 0, 1))
                + (Simd32x3::from([self.group6()[1], self.group1()[0], self.group6()[0]]) * swizzle!(other.group7(), 2, 2, 1))
                - (Simd32x3::from([self.group9()[1], self.group3()[3], self.group3()[3]]) * swizzle!(other.group4(), 2, 1, 2))
                + (Simd32x3::from([self.group9()[2], self.group9()[0], self.group9()[1]]) * swizzle!(other.group4(), 1, 2, 0))
                - (Simd32x3::from([self[e45], self.group4()[2], self.group4()[0]]) * swizzle!(other.group5(), 0, 0, 1))
                + (swizzle!(other.group4(), 1, 2, 0) * swizzle!(self.group5(), 2, 0, 1))
                + (swizzle!(other.group5(), 1, 2, 0) * swizzle!(self.group4(), 2, 0, 1))),
            // e235, e315, e125
            (Simd32x3::from([
                (-(other.group3()[1] * self.group9()[2]) + (other.group3()[2] * self.group9()[1]) + (other.group9()[1] * self.group3()[2])
                    - (other.group9()[2] * self.group3()[1])),
                ((other.group3()[0] * self.group9()[2]) - (other.group3()[2] * self.group9()[0]) - (other.group9()[0] * self.group3()[2]) + (other.group9()[2] * self.group3()[0])),
                (-(other.group3()[0] * self.group9()[1]) + (other.group3()[1] * self.group9()[0]) + (other.group9()[0] * self.group3()[1])
                    - (other.group9()[1] * self.group3()[0])),
            ]) - (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(other.group0()[1]) * self.group8())
                - (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from(self.group0()[1]) * other.group8())
                - (Simd32x3::from(self.group8()[0]) * Simd32x3::from([other.group6()[3], other.group6()[2], other.group1()[1]]))
                - (Simd32x3::from(self.group8()[1]) * Simd32x3::from([other.group1()[2], other.group6()[3], other.group6()[0]]))
                - (Simd32x3::from(self.group8()[2]) * Simd32x3::from([other.group6()[1], other.group1()[0], other.group6()[3]]))
                - (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(other.group9()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                - (Simd32x3::from(self.group9()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                - (Simd32x3::from(self[e1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self[e1]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                + (Simd32x3::from([other.group1()[1], other.group6()[0], other.group1()[0]]) * swizzle!(self.group8(), 2, 2, 1))
                + (Simd32x3::from([other.group3()[1], other.group3()[2], other.group3()[0]]) * swizzle!(self.group5(), 2, 0, 1))
                - (Simd32x3::from([other.group3()[2], other.group3()[0], other.group9()[3]]) * swizzle!(self.group5(), 1, 2, 2))
                + (Simd32x3::from([other.group6()[2], other.group1()[2], other.group6()[1]]) * swizzle!(self.group8(), 1, 0, 0))
                - (Simd32x3::from([other.group9()[3], other.group9()[3], other.group3()[1]]) * swizzle!(self.group5(), 0, 1, 0))
                + (Simd32x3::from([self.group1()[1], self.group6()[2], self.group6()[0]]) * swizzle!(other.group8(), 2, 0, 1))
                - (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]) * swizzle!(other.group8(), 1, 2, 0))
                - (Simd32x3::from([self.group3()[1], self.group9()[3], self.group9()[3]]) * swizzle!(other.group5(), 2, 1, 2))
                + (Simd32x3::from([self.group3()[2], self.group3()[0], self.group3()[1]]) * swizzle!(other.group5(), 1, 2, 0))
                + (Simd32x3::from([self.group6()[1], self.group6()[3], self.group6()[3]]) * swizzle!(other.group8(), 2, 1, 2))
                - (Simd32x3::from([self.group6()[2], self.group6()[0], self.group6()[1]]) * swizzle!(other.group8(), 1, 2, 0))
                + (Simd32x3::from([self.group6()[3], self.group1()[2], self.group1()[0]]) * swizzle!(other.group8(), 0, 0, 1))
                - (Simd32x3::from([self.group9()[3], self.group3()[2], self.group3()[0]]) * swizzle!(other.group5(), 0, 0, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[0] * other.group1()[0]) - (other.group4()[0] * self[e1]) + (other.group4()[1] * self.group8()[2]) - (other.group4()[2] * self.group8()[1])
                    + (other.group5()[1] * self.group1()[2])
                    + (other.group8()[0] * self[e45])
                    - (other.group8()[1] * self.group4()[2])
                    + (other.group8()[2] * self.group4()[1])
                    - (self.group5()[1] * other.group1()[2])
                    - (self.group8()[0] * other[e45])
                    + (other.group3()[0] * self.group1()[3])
                    + (other.group3()[3] * self.group6()[0])
                    - (other.group6()[1] * self.group9()[2])
                    + (other.group9()[2] * self.group6()[1])),
                (-(self.group0()[0] * other.group1()[1]) - (other.group4()[0] * self.group8()[2]) - (other.group4()[1] * self[e1])
                    + (other.group4()[2] * self.group8()[0])
                    + (other.group5()[2] * self.group1()[0])
                    + (other.group8()[0] * self.group4()[2])
                    + (other.group8()[1] * self[e45])
                    - (other.group8()[2] * self.group4()[0])
                    - (self.group5()[2] * other.group1()[0])
                    - (self.group8()[1] * other[e45])
                    + (other.group3()[1] * self.group1()[3])
                    + (other.group3()[3] * self.group6()[1])
                    - (other.group6()[2] * self.group9()[0])
                    + (other.group9()[0] * self.group6()[2])),
                (-(self.group0()[0] * other.group1()[2]) + (other.group4()[0] * self.group8()[1]) - (other.group4()[1] * self.group8()[0]) - (other.group4()[2] * self[e1])
                    + (other.group5()[0] * self.group1()[1])
                    - (other.group8()[0] * self.group4()[1])
                    + (other.group8()[1] * self.group4()[0])
                    + (other.group8()[2] * self[e45])
                    - (self.group5()[0] * other.group1()[1])
                    - (self.group8()[2] * other[e45])
                    + (other.group3()[2] * self.group1()[3])
                    + (other.group3()[3] * self.group6()[2])
                    - (other.group6()[0] * self.group9()[1])
                    + (other.group9()[1] * self.group6()[0])),
                ((other.group0()[0] * self[e1])
                    - (other.group5()[0] * self.group8()[0])
                    - (other.group5()[1] * self.group8()[1])
                    - (other.group5()[2] * self.group8()[2])
                    - (other.group8()[0] * self.group5()[0])
                    - (other.group8()[1] * self.group5()[1])
                    + (other.group8()[1] * self.group9()[1])
                    - (other.group8()[2] * self.group5()[2])
                    + (other.group8()[2] * self.group9()[2])
                    - (self.group8()[1] * other.group9()[1])
                    - (self.group8()[2] * other.group9()[2])
                    - (other.group3()[2] * self.group1()[2])
                    - (other.group3()[2] * self.group6()[2])
                    - (self.group3()[3] * other[e1])),
            ]) + (Simd32x4::from(other.group0()[1]) * self.group9())
                + (Simd32x4::from(self.group0()[1]) * other.group9())
                + (Simd32x4::from(other.group9()[3]) * Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group6()[3]]))
                - (Simd32x4::from(self.group9()[3]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group6()[3]]))
                + (Simd32x4::from(other[e1]) * Simd32x4::from([self.group4()[0], self.group4()[1], self.group4()[2], self.group0()[0]]))
                - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group3()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))
                - (Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other.group3()[0]]) * swizzle!(self.group6(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group3()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))
                + (Simd32x4::from([other.group7()[1], other.group7()[2], other.group7()[0], other.group1()[0]]) * swizzle!(self.group3(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group7()[2], other.group7()[0], other.group7()[1], other.group6()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group5()[0], self.group5()[1], self.group5()[2], self.group3()[1]]) * swizzle!(other.group6(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group3()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))
                + (Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[0], self[e1]]) * swizzle!(other.group3(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group7()[2], self.group7()[0], self.group7()[1], self.group6()[1]]) * swizzle!(other.group3(), 1, 2, 0, 1))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group6()[2]]) * swizzle!(self.group3(), 0, 1, 2, 2))
                + (Simd32x4::from([other.group6()[0], other.group6()[1], other.group6()[2], other.group1()[2]]) * swizzle!(self.group3(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group8()[0]]) * swizzle!(self.group9(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group8()[0]]) * swizzle!(other.group9(), 1, 2, 0, 0))),
            // e1234
            ((other.group0()[0] * self.group1()[3])
                + (other.group0()[1] * self[e45])
                + (self.group0()[0] * other.group1()[3])
                + (self.group0()[1] * other[e45])
                + (other.group4()[0] * self.group1()[0])
                - (other.group4()[0] * self.group6()[0])
                + (other.group4()[1] * self.group1()[1])
                - (other.group4()[1] * self.group6()[1])
                + (other.group4()[2] * self.group1()[2])
                - (other.group4()[2] * self.group6()[2])
                - (other.group5()[0] * self.group7()[0])
                - (other.group5()[1] * self.group7()[1])
                - (other.group5()[2] * self.group7()[2])
                - (other.group7()[0] * self.group5()[0])
                - (other.group7()[0] * self.group9()[0])
                - (other.group7()[1] * self.group5()[1])
                - (other.group7()[1] * self.group9()[1])
                - (other.group7()[2] * self.group5()[2])
                - (other.group7()[2] * self.group9()[2])
                - (self.group4()[0] * other.group1()[0])
                - (self.group4()[0] * other.group6()[0])
                - (self.group4()[1] * other.group1()[1])
                - (self.group4()[1] * other.group6()[1])
                - (self.group4()[2] * other.group1()[2])
                - (self.group4()[2] * other.group6()[2])
                + (self.group7()[0] * other.group9()[0])
                + (self.group7()[1] * other.group9()[1])
                + (self.group7()[2] * other.group9()[2])
                + (other.group1()[3] * self.group3()[3])
                - (other.group3()[3] * self.group1()[3])
                + (other.group6()[3] * self[e45])
                - (self.group6()[3] * other[e45])),
        );
    }
}
impl GeometricAntiProduct<Plane> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       27       47        0
    //    simd2        3        5        0
    //    simd3        9       11        0
    //    simd4        9       10        0
    // Totals...
    // yes simd       48       73        0
    //  no simd       96      130        0
    fn geometric_anti_product(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from(other.group0()[3]) * Simd32x2::from([self.group1()[3], self[e45]]) * Simd32x2::from([1.0, -1.0]))
                + (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group1()[0], self.group9()[0]]))
                + (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group1()[1], self.group9()[1]]))
                + (Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group1()[2], self.group9()[2]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group4()[0] * other.group0()[3]) + (self.group5()[1] * other.group0()[2])),
                ((self.group0()[0] * other.group0()[1]) + (self.group4()[1] * other.group0()[3]) + (self.group5()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[2]) + (self.group4()[2] * other.group0()[3]) + (self.group5()[0] * other.group0()[1])),
                (-(self.group4()[1] * other.group0()[1]) - (self.group4()[2] * other.group0()[2])),
            ]) - (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group4()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e5
            (-(self.group0()[0] * other.group0()[3])
                + (self.group3()[0] * other.group0()[0])
                + (self.group3()[1] * other.group0()[1])
                + (self.group3()[2] * other.group0()[2])
                + (self.group3()[3] * other.group0()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group6()[0] * other.group0()[3]) + (other.group0()[0] * self[e1])),
                ((self.group1()[1] * other.group0()[3]) + (self.group6()[1] * other.group0()[3]) + (other.group0()[1] * self[e1])),
                ((self.group1()[2] * other.group0()[3]) + (self.group6()[2] * other.group0()[3]) + (other.group0()[2] * self[e1])),
                (-(self.group6()[1] * other.group0()[1]) - (self.group6()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group8()[1], self.group8()[2], self.group8()[0], self.group1()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group8()[2], self.group8()[0], self.group8()[1], self.group6()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e41, e42, e43
            (-(Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group7(), 2, 0, 1))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group7(), 1, 2, 0))),
            // e23, e31, e12
            (Simd32x3::from([
                (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
            ]) - (Simd32x3::from(self.group6()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(other.group0()[3]) * self.group7())),
            // e415, e425, e435, e321
            (-(Simd32x4::from([self.group4()[0], self.group4()[1], self.group4()[2], self.group5()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group5()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))
                - (Simd32x4::from([self.group9()[1], self.group9()[2], self.group9()[0], self.group5()[2]]) * swizzle!(other.group0(), 2, 0, 1, 2))
                + (Simd32x4::from([self.group9()[2], self.group9()[0], self.group9()[1], self[e45]]) * swizzle!(other.group0(), 1, 2, 0, 3))),
            // e423, e431, e412
            ((Simd32x3::from(self[e45]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group4(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group4(), 1, 2, 0))),
            // e235, e315, e125
            (Simd32x3::from([
                (-(self.group3()[1] * other.group0()[2]) + (self.group3()[2] * other.group0()[1])),
                ((self.group3()[0] * other.group0()[2]) - (self.group3()[2] * other.group0()[0])),
                (-(self.group3()[0] * other.group0()[1]) + (self.group3()[1] * other.group0()[0])),
            ]) - (Simd32x3::from(self.group9()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                - (Simd32x3::from(other.group0()[3]) * self.group5())),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (self.group6()[1] * other.group0()[2]),
                (self.group6()[2] * other.group0()[0]),
                (self.group6()[0] * other.group0()[1]),
                (-(self.group8()[1] * other.group0()[1]) - (self.group8()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(self.group0()[1]) * other.group0())
                + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group6()[3]]))
                - (Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group8()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e1234
            ((self.group7()[0] * other.group0()[0]) + (self.group7()[1] * other.group0()[1]) + (self.group7()[2] * other.group0()[2])),
        );
    }
}
impl GeometricAntiProduct<QuadNum> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6        8        0
    //    simd2        3        5        0
    //    simd3       12       16        0
    //    simd4       12       17        0
    // Totals...
    // yes simd       33       46        0
    //  no simd       96      134        0
    fn geometric_anti_product(self, other: QuadNum) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group3()[3], self.group6()[3]]) * Simd32x2::from([-1.0, 1.0]))
                + (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group9()[3], self[e1]]))
                + (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self[e45], self.group1()[3]]))
                + (Simd32x2::from(other.group0()[3]) * self.group0())),
            // e1, e2, e3, e4
            ((Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group8()[0], self.group8()[1], self.group8()[2], self.group0()[1]]))
                - (Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group6()[3]]) * swizzle!(other.group0(), 1, 1, 1, 0))
                + (Simd32x4::from([self.group6()[0], self.group6()[1], self.group6()[2], self.group1()[3]]) * swizzle!(other.group0(), 2, 2, 2, 3))
                + (swizzle!(other.group0(), 3, 3, 3, 2) * self.group1())),
            // e5
            ((self.group0()[1] * other.group0()[1]) + (self.group6()[3] * other.group0()[1]) - (other.group0()[2] * self[e1]) + (other.group0()[3] * self[e1])),
            // e15, e25, e35, e45
            (-(Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[0]]))
                + (Simd32x4::from([self.group5()[0], self.group5()[1], self.group5()[2], self.group3()[3]]) * swizzle!(other.group0(), 1, 1, 1, 3))
                + (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self[e45]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                - (swizzle!(other.group0(), 1, 1, 1, 0) * self.group9())),
            // e41, e42, e43
            ((Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(other.group0()[0]) * self.group5())
                + (Simd32x3::from(other.group0()[2]) * self.group4())
                + (Simd32x3::from(other.group0()[3]) * self.group4())),
            // e23, e31, e12
            ((Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]])) + (Simd32x3::from(other.group0()[1]) * self.group4())
                - (Simd32x3::from(other.group0()[2]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(other.group0()[3]) * self.group5())),
            // e415, e425, e435, e321
            ((Simd32x4::from([self.group6()[0], self.group6()[1], self.group6()[2], self.group1()[3]])
                * swizzle!(other.group0(), 3, 3, 3, 1)
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group0()[1]]) * swizzle!(other.group0(), 1, 1, 1, 2))
                + (Simd32x4::from([self.group8()[0], self.group8()[1], self.group8()[2], self.group6()[3]]) * swizzle!(other.group0(), 0, 0, 0, 3))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self[e1]]) * swizzle!(other.group0(), 2, 2, 2, 0))),
            // e423, e431, e412
            (-(Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                + (Simd32x3::from(other.group0()[2]) * self.group7())
                + (Simd32x3::from(other.group0()[3]) * self.group7())),
            // e235, e315, e125
            ((Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                - (Simd32x3::from(other.group0()[2]) * self.group8())
                + (Simd32x3::from(other.group0()[3]) * self.group8())),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group4()[0], self.group4()[1], self.group4()[2], self.group0()[0]]))
                + (Simd32x4::from(other.group0()[3]) * self.group9())
                - (Simd32x4::from([self.group5()[0], self.group5()[1], self.group5()[2], self.group3()[3]]) * swizzle!(other.group0(), 2, 2, 2, 1))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group9()[3]]) * swizzle!(other.group0(), 0, 0, 0, 2))),
            // e1234
            ((self.group0()[0] * other.group0()[0]) + (self.group3()[3] * other.group0()[0]) + (other.group0()[2] * self[e45]) + (other.group0()[3] * self[e45])),
        );
    }
}
impl GeometricAntiProduct<RoundPoint> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       39       62        0
    //    simd2        2        2        0
    //    simd3       15       18        0
    //    simd4       10       10        0
    // Totals...
    // yes simd       66       92        0
    //  no simd      128      160        0
    fn geometric_anti_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                ((self.group9()[0] * other.group0()[0]) + (self.group9()[1] * other.group0()[1]) + (self.group9()[2] * other.group0()[2])),
                (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x2::from(other.group0()[3]) * Simd32x2::from([self.group9()[3], self[e1]]))
                + (Simd32x2::from(other[e2]) * Simd32x2::from([self[e45], self.group1()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(self.group7()[0] * other[e2]) + (self.group8()[0] * other.group0()[3]) + (self.group6()[1] * other.group0()[2])),
                (-(self.group7()[1] * other[e2]) + (self.group8()[1] * other.group0()[3]) + (self.group6()[2] * other.group0()[0])),
                (-(self.group7()[2] * other[e2]) + (self.group8()[2] * other.group0()[3]) + (self.group6()[0] * other.group0()[1])),
                (-(self.group7()[1] * other.group0()[1]) - (self.group7()[2] * other.group0()[2]) - (self.group6()[3] * other.group0()[3])),
            ]) + (Simd32x4::from(self.group0()[1]) * other.group0())
                - (Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group7()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e5
            ((self.group0()[1] * other[e2])
                + (self.group8()[0] * other.group0()[0])
                + (self.group8()[1] * other.group0()[1])
                + (self.group8()[2] * other.group0()[2])
                + (self.group6()[3] * other[e2])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                (-(self.group9()[0] * other[e2]) - (self.group9()[3] * other.group0()[0])),
                (-(self.group9()[1] * other[e2]) - (self.group9()[3] * other.group0()[1])),
                (-(self.group9()[2] * other[e2]) - (self.group9()[3] * other.group0()[2])),
                ((self.group5()[1] * other.group0()[1]) + (self.group5()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other[e2]) * Simd32x4::from([self.group5()[0], self.group5()[1], self.group5()[2], self[e45]]))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group9()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group5()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e41, e42, e43
            ((Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(other.group0()[3]) * self.group5())
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group4(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group4(), 1, 2, 0))),
            // e23, e31, e12
            (Simd32x3::from([
                (-(self.group9()[1] * other.group0()[2]) + (self.group9()[2] * other.group0()[1])),
                ((self.group9()[0] * other.group0()[2]) - (self.group9()[2] * other.group0()[0])),
                (-(self.group9()[0] * other.group0()[1]) + (self.group9()[1] * other.group0()[0])),
            ]) - (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(other[e2]) * self.group4())),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group7()[0] * other[e2]) + (self.group1()[1] * other.group0()[2]) + (self.group6()[3] * other.group0()[0])),
                ((self.group7()[1] * other[e2]) + (self.group1()[2] * other.group0()[0]) + (self.group6()[3] * other.group0()[1])),
                ((self.group7()[2] * other[e2]) + (self.group1()[0] * other.group0()[1]) + (self.group6()[3] * other.group0()[2])),
                (-(self.group6()[0] * other.group0()[0]) - (self.group6()[1] * other.group0()[1]) - (self.group6()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group8()[0], self.group8()[1], self.group8()[2], self[e1]]))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other[e2]]) * swizzle!(self.group1(), 2, 0, 1, 3))),
            // e423, e431, e412
            ((Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                - (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group7(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group7(), 1, 2, 0))),
            // e235, e315, e125
            (-(Simd32x3::from(self[e1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(other[e2]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other[e2]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                + (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group8(), 2, 0, 1))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group8(), 1, 2, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[0] * other.group0()[0]) - (self.group5()[1] * other.group0()[2])),
                (-(self.group0()[0] * other.group0()[1]) - (self.group5()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[2]) - (self.group5()[0] * other.group0()[1])),
                ((self.group3()[1] * other.group0()[1]) + (self.group3()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other[e2]) * Simd32x4::from([self.group4()[0], self.group4()[1], self.group4()[2], self.group0()[0]]))
                + (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group3()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other[e2]]) * self.group3())),
            // e1234
            ((self.group0()[0] * other.group0()[3]) - (self.group4()[0] * other.group0()[0]) - (self.group4()[1] * other.group0()[1]) - (self.group4()[2] * other.group0()[2])
                + (self.group3()[3] * other.group0()[3])),
        );
    }
}
impl GeometricAntiProduct<Scalar> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd2        0        2        0
    //    simd3        0        6        0
    //    simd4        0        8        0
    // Totals...
    // yes simd        0       19        0
    //  no simd        0       57        0
    fn geometric_anti_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from(other[scalar]) * swizzle!(self.group0(), 1, 0) * Simd32x2::from([1.0, -1.0])),
            // e1, e2, e3, e4
            (Simd32x4::from(other[scalar]) * Simd32x4::from([self.group9()[0], self.group9()[1], self.group9()[2], self[e45]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e5
            (self.group9()[3] * other[scalar] * -1.0),
            // e15, e25, e35, e45
            (Simd32x4::from(other[scalar]) * Simd32x4::from([self.group8()[0], self.group8()[1], self.group8()[2], self.group6()[3]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e41, e42, e43
            (Simd32x3::from(other[scalar]) * self.group7()),
            // e23, e31, e12
            (Simd32x3::from(other[scalar]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]])),
            // e415, e425, e435, e321
            (Simd32x4::from(other[scalar]) * Simd32x4::from([self.group5()[0], self.group5()[1], self.group5()[2], self.group3()[3]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e423, e431, e412
            (Simd32x3::from(other[scalar]) * self.group4() * Simd32x3::from(-1.0)),
            // e235, e315, e125
            (Simd32x3::from(other[scalar]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]) * Simd32x3::from(-1.0)),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other[scalar]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self[e1]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e1234
            (self.group1()[3] * other[scalar]),
        );
    }
}
impl GeometricAntiProduct<Sphere> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       58        0
    //    simd2        3        3        0
    //    simd3       14       16        0
    //    simd4       11       12        0
    // Totals...
    // yes simd       64       89        0
    //  no simd      128      160        0
    fn geometric_anti_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                ((self.group1()[3] * other.group0()[3]) + (self[e1] * other[e4315])),
                (-(self.group9()[3] * other[e4315]) - (other.group0()[3] * self[e45])),
            ]) + (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group1()[0], self.group9()[0]]))
                + (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group1()[1], self.group9()[1]]))
                + (Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group1()[2], self.group9()[2]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group4()[0] * other.group0()[3]) + (self.group5()[1] * other.group0()[2])),
                ((self.group0()[0] * other.group0()[1]) + (self.group4()[1] * other.group0()[3]) + (self.group5()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[2]) + (self.group4()[2] * other.group0()[3]) + (self.group5()[0] * other.group0()[1])),
                (-(self.group4()[1] * other.group0()[1]) - (self.group4()[2] * other.group0()[2]) - (self.group3()[3] * other[e4315])),
            ]) - (Simd32x4::from(other[e4315]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[0]]))
                - (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group4()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e5
            (-(self.group0()[0] * other.group0()[3])
                + (self.group3()[0] * other.group0()[0])
                + (self.group3()[1] * other.group0()[1])
                + (self.group3()[2] * other.group0()[2])
                + (self.group3()[3] * other.group0()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group6()[0] * other.group0()[3]) + (other.group0()[0] * self[e1])),
                ((self.group1()[1] * other.group0()[3]) + (self.group6()[1] * other.group0()[3]) + (other.group0()[1] * self[e1])),
                ((self.group1()[2] * other.group0()[3]) + (self.group6()[2] * other.group0()[3]) + (other.group0()[2] * self[e1])),
                (-(self.group6()[1] * other.group0()[1]) - (self.group6()[2] * other.group0()[2]) - (self[e1] * other[e4315])),
            ]) + (Simd32x4::from([self.group8()[1], self.group8()[2], self.group8()[0], self.group1()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group8()[2], self.group8()[0], self.group8()[1], self.group6()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e41, e42, e43
            (-(Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from(other[e4315]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other[e4315]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                + (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group7(), 2, 0, 1))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group7(), 1, 2, 0))),
            // e23, e31, e12
            (Simd32x3::from([
                (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
            ]) - (Simd32x3::from(self.group6()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(other.group0()[3]) * self.group7())
                + (Simd32x3::from(other[e4315]) * self.group8())),
            // e415, e425, e435, e321
            (-(Simd32x4::from(other[e4315]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group9()[3]]))
                - (Simd32x4::from([self.group4()[0], self.group4()[1], self.group4()[2], self.group5()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group5()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))
                - (Simd32x4::from([self.group9()[1], self.group9()[2], self.group9()[0], self.group5()[2]]) * swizzle!(other.group0(), 2, 0, 1, 2))
                + (Simd32x4::from([self.group9()[2], self.group9()[0], self.group9()[1], self[e45]]) * swizzle!(other.group0(), 1, 2, 0, 3))),
            // e423, e431, e412
            ((Simd32x3::from(self[e45]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from(other[e4315]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                - (Simd32x3::from(other[e4315]) * self.group5())
                - (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group4(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group4(), 1, 2, 0))),
            // e235, e315, e125
            (Simd32x3::from([
                (-(self.group3()[1] * other.group0()[2]) + (self.group3()[2] * other.group0()[1])),
                ((self.group3()[0] * other.group0()[2]) - (self.group3()[2] * other.group0()[0])),
                (-(self.group3()[0] * other.group0()[1]) + (self.group3()[1] * other.group0()[0])),
            ]) - (Simd32x3::from(self.group9()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                - (Simd32x3::from(other.group0()[3]) * self.group5())),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group8()[0] * other[e4315]) + (self.group6()[1] * other.group0()[2])),
                (-(self.group8()[1] * other[e4315]) + (self.group6()[2] * other.group0()[0])),
                (-(self.group8()[2] * other[e4315]) + (self.group6()[0] * other.group0()[1])),
                (-(self.group8()[1] * other.group0()[1]) - (self.group8()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(self.group0()[1]) * other.group0())
                + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group6()[3]]))
                - (Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group8()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e1234
            ((self.group0()[1] * other[e4315]) + (self.group7()[0] * other.group0()[0]) + (self.group7()[1] * other.group0()[1]) + (self.group7()[2] * other.group0()[2])
                - (self.group6()[3] * other[e4315])),
        );
    }
}
impl GeometricAntiProduct<TripleNum> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       10        0
    //    simd2        2        3        0
    //    simd3        8       12        0
    //    simd4        8       12        0
    // Totals...
    // yes simd       22       37        0
    //  no simd       64      100        0
    fn geometric_anti_product(self, other: TripleNum) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group9()[3], self[e1]]))
                + (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self[e45], self.group1()[3]]))
                + (Simd32x2::from(other.group0()[2]) * self.group0())),
            // e1, e2, e3, e4
            (-Simd32x4::from([
                (self.group7()[0] * other.group0()[1]),
                (self.group7()[1] * other.group0()[1]),
                (self.group7()[2] * other.group0()[1]),
                (other.group0()[0] * self.group6()[3]),
            ]) + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group8()[0], self.group8()[1], self.group8()[2], self.group0()[1]]))
                + (Simd32x4::from(other.group0()[2]) * self.group1())),
            // e5
            ((self.group0()[1] * other.group0()[1]) + (other.group0()[1] * self.group6()[3]) + (other.group0()[2] * self[e1])),
            // e15, e25, e35, e45
            ((Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group5()[0], self.group5()[1], self.group5()[2], self[e45]]))
                + (Simd32x4::from(other.group0()[2]) * self.group3())
                - (Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group0()[0]]) * self.group9())),
            // e41, e42, e43
            ((Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(other.group0()[0]) * self.group5())
                + (Simd32x3::from(other.group0()[2]) * self.group4())),
            // e23, e31, e12
            ((Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(other.group0()[1]) * self.group4())
                + (Simd32x3::from(other.group0()[2]) * self.group5())),
            // e415, e425, e435, e321
            ((Simd32x4::from(other.group0()[1])
                * Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group1()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group8()[0], self.group8()[1], self.group8()[2], self[e1]]))
                + (Simd32x4::from(other.group0()[2]) * self.group6())),
            // e423, e431, e412
            (-(Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                + (Simd32x3::from(other.group0()[2]) * self.group7())),
            // e235, e315, e125
            ((Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                + (Simd32x3::from(other.group0()[2]) * self.group8())),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group4()[0], self.group4()[1], self.group4()[2], self.group0()[0]]))
                + (Simd32x4::from(other.group0()[2]) * self.group9())
                - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]]) * self.group3())),
            // e1234
            ((self.group0()[0] * other.group0()[0]) + (other.group0()[0] * self.group3()[3]) + (other.group0()[2] * self[e45])),
        );
    }
}
impl GeometricAntiProduct<VersorEven> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      128      160        0
    //    simd2       12       12        0
    //    simd3       52       52        0
    //    simd4       43       43        0
    // Totals...
    // yes simd      235      267        0
    //  no simd      480      512        0
    fn geometric_anti_product(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                (-(self.group3()[3] * other.group1()[3])
                    + (self.group9()[0] * other.group3()[0])
                    + (self.group9()[1] * other.group3()[1])
                    + (self.group9()[2] * other.group3()[2])),
                (-(self.group1()[0] * other.group3()[0]) - (self.group1()[1] * other.group3()[1]) - (self.group1()[2] * other.group3()[2])
                    + (self.group6()[3] * other.group1()[3])),
            ]) - (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group3()[0], self.group8()[0]]))
                - (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group3()[1], self.group8()[1]]))
                - (Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group3()[2], self.group8()[2]]))
                + (Simd32x2::from(other.group0()[3]) * self.group0())
                - (Simd32x2::from(other.group1()[0]) * Simd32x2::from([self.group5()[0], self.group6()[0]]))
                - (Simd32x2::from(other.group1()[1]) * Simd32x2::from([self.group5()[1], self.group6()[1]]))
                - (Simd32x2::from(other.group1()[2]) * Simd32x2::from([self.group5()[2], self.group6()[2]]))
                - (Simd32x2::from(other.group2()[0]) * Simd32x2::from([self.group4()[0], self.group7()[0]]))
                - (Simd32x2::from(other.group2()[1]) * Simd32x2::from([self.group4()[1], self.group7()[1]]))
                - (Simd32x2::from(other.group2()[2]) * Simd32x2::from([self.group4()[2], self.group7()[2]]))
                + (Simd32x2::from(other.group2()[3]) * Simd32x2::from([self[e45], self.group1()[3]]))
                + (Simd32x2::from(other.group3()[3]) * Simd32x2::from([self.group9()[3], self[e1]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(self.group7()[0] * other.group2()[3]) - (self.group7()[1] * other.group2()[2])
                    + (self.group7()[2] * other.group2()[1])
                    + (self.group8()[0] * other.group3()[3])
                    - (self.group1()[3] * other.group2()[0])
                    + (self.group6()[1] * other.group3()[2])
                    + (self.group6()[3] * other.group1()[0])),
                ((self.group7()[0] * other.group2()[2]) - (self.group7()[1] * other.group2()[3]) - (self.group7()[2] * other.group2()[0]) + (self.group8()[1] * other.group3()[3])
                    - (self.group1()[3] * other.group2()[1])
                    + (self.group6()[2] * other.group3()[0])
                    + (self.group6()[3] * other.group1()[1])),
                (-(self.group7()[0] * other.group2()[1]) + (self.group7()[1] * other.group2()[0]) - (self.group7()[2] * other.group2()[3])
                    + (self.group8()[2] * other.group3()[3])
                    - (self.group1()[3] * other.group2()[2])
                    + (self.group6()[0] * other.group3()[1])
                    + (self.group6()[3] * other.group1()[2])),
                (-(self.group7()[1] * other.group1()[1])
                    - (self.group7()[1] * other.group3()[1])
                    - (self.group7()[2] * other.group1()[2])
                    - (self.group7()[2] * other.group3()[2])
                    - (self.group6()[1] * other.group0()[1])
                    - (self.group6()[2] * other.group0()[2])
                    - (self.group6()[3] * other.group3()[3])),
            ]) + (Simd32x4::from(self.group0()[1]) * other.group3())
                + (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group6()[0], self.group6()[1], self.group6()[2], self.group1()[3]]))
                + (Simd32x4::from([self.group8()[1], self.group8()[2], self.group8()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group8()[2], self.group8()[0], self.group8()[1], self.group6()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group7()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group7()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group0()[1]]) * swizzle!(self.group1(), 0, 1, 0, 1))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group0()[2]]) * swizzle!(self.group1(), 1, 2, 2, 2))
                + (Simd32x4::from([self[e1], self[e1], self[e1], self.group1()[3]]) * other.group0())),
            // e5
            ((self.group0()[1] * other.group2()[3]) - (self.group8()[0] * other.group1()[0]) + (self.group8()[0] * other.group3()[0]) - (self.group8()[1] * other.group1()[1])
                + (self.group8()[1] * other.group3()[1])
                - (self.group8()[2] * other.group1()[2])
                + (self.group8()[2] * other.group3()[2])
                - (self.group1()[0] * other.group2()[0])
                - (self.group1()[1] * other.group2()[1])
                - (self.group1()[2] * other.group2()[2])
                - (self.group6()[0] * other.group2()[0])
                - (self.group6()[1] * other.group2()[1])
                - (self.group6()[2] * other.group2()[2])
                + (self.group6()[3] * other.group2()[3])
                + (other.group0()[3] * self[e1])
                - (other.group1()[3] * self[e1])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group5()[0] * other.group2()[3]) + (self.group5()[1] * other.group2()[2]) + (self.group9()[2] * other.group2()[1]) + (self.group9()[3] * other.group1()[0])),
                ((self.group5()[1] * other.group2()[3]) + (self.group5()[2] * other.group2()[0]) + (self.group9()[0] * other.group2()[2]) + (self.group9()[3] * other.group1()[1])),
                ((self.group5()[0] * other.group2()[1]) + (self.group5()[2] * other.group2()[3]) + (self.group9()[1] * other.group2()[0]) + (self.group9()[3] * other.group1()[2])),
                ((self.group5()[0] * other.group3()[0]) + (self.group5()[1] * other.group3()[1]) + (self.group5()[2] * other.group3()[2]) + (self.group3()[3] * other.group0()[3])),
            ]) + (Simd32x4::from(self.group3()[0]) * Simd32x4::from([other.group0()[3], other.group3()[2], other.group1()[1], other.group0()[0]]))
                + (Simd32x4::from(self.group3()[1]) * Simd32x4::from([other.group1()[2], other.group0()[3], other.group3()[0], other.group0()[1]]))
                + (Simd32x4::from(self.group3()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group0()[3], other.group0()[2]]))
                + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self[e45]]) * other.group2())
                - (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group4()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[0], self.group3()[0], self.group3()[1], self.group0()[0]]) * swizzle!(other.group1(), 3, 2, 0, 3))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group9()[3]]) * swizzle!(other.group3(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group3()[2], self.group3()[1], self.group3()[2], self.group9()[0]]) * swizzle!(other.group1(), 1, 3, 3, 0))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group4()[1]]) * swizzle!(other.group2(), 0, 1, 2, 1))
                - (Simd32x4::from([self.group9()[0], self.group9()[1], self.group9()[0], self.group4()[2]]) * swizzle!(other.group2(), 3, 3, 1, 2))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[3], other.group1()[1]]) * swizzle!(self.group9(), 1, 2, 2, 1))
                - (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[2]]) * swizzle!(self.group9(), 3, 3, 3, 2))),
            // e41, e42, e43
            (Simd32x3::from([
                ((self.group9()[1] * other.group0()[2]) - (self.group9()[2] * other.group0()[1])),
                (-(self.group9()[0] * other.group0()[2]) + (self.group9()[2] * other.group0()[0])),
                ((self.group9()[0] * other.group0()[1]) - (self.group9()[1] * other.group0()[0])),
            ]) + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                - (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group5(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group3()[3]]) * swizzle!(self.group5(), 1, 2, 2))
                + (Simd32x3::from([other.group0()[3], other.group0()[3], other.group1()[1]]) * swizzle!(self.group4(), 0, 1, 0))
                - (Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]) * swizzle!(self.group4(), 2, 0, 1))
                + (Simd32x3::from([other.group1()[2], other.group1()[0], other.group0()[3]]) * swizzle!(self.group4(), 1, 2, 2))
                + (Simd32x3::from([other.group1()[3], other.group1()[3], other.group3()[1]]) * swizzle!(self.group4(), 0, 1, 0))
                - (Simd32x3::from([other.group3()[1], other.group3()[2], other.group3()[0]]) * swizzle!(self.group4(), 2, 0, 1))
                + (Simd32x3::from([other.group3()[2], other.group3()[0], other.group1()[3]]) * swizzle!(self.group4(), 1, 2, 2))
                + (Simd32x3::from([other.group3()[3], other.group3()[3], other.group0()[1]]) * swizzle!(self.group5(), 0, 1, 0))),
            // e23, e31, e12
            (Simd32x3::from([
                ((self.group3()[1] * other.group0()[2]) - (self.group3()[2] * other.group0()[1]) - (self.group9()[1] * other.group3()[2]) + (self.group9()[2] * other.group3()[1])),
                (-(self.group3()[0] * other.group0()[2]) + (self.group3()[2] * other.group0()[0]) + (self.group9()[0] * other.group3()[2])
                    - (self.group9()[2] * other.group3()[0])),
                ((self.group3()[0] * other.group0()[1]) - (self.group3()[1] * other.group0()[0]) - (self.group9()[0] * other.group3()[1]) + (self.group9()[1] * other.group3()[0])),
            ]) + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from(self.group9()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                + (Simd32x3::from([other.group0()[3], other.group0()[3], other.group1()[1]]) * swizzle!(self.group5(), 0, 1, 0))
                - (Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]) * swizzle!(self.group5(), 2, 0, 1))
                + (Simd32x3::from([other.group1()[2], other.group1()[0], other.group0()[3]]) * swizzle!(self.group5(), 1, 2, 2))
                - (Simd32x3::from([other.group2()[1], other.group2()[2], other.group2()[0]]) * swizzle!(self.group4(), 2, 0, 1))
                + (Simd32x3::from([other.group2()[2], other.group2()[0], other.group2()[3]]) * swizzle!(self.group4(), 1, 2, 2))
                + (Simd32x3::from([other.group2()[3], other.group2()[3], other.group2()[1]]) * swizzle!(self.group4(), 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group3()[2])
                    + (self.group6()[0] * other.group0()[3])
                    + (self.group6()[1] * other.group1()[2])
                    + (self.group6()[3] * other.group3()[0])
                    + (other.group0()[0] * self[e1])),
                ((self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group3()[0])
                    + (self.group6()[1] * other.group0()[3])
                    + (self.group6()[2] * other.group1()[0])
                    + (self.group6()[3] * other.group3()[1])
                    + (other.group0()[1] * self[e1])),
                ((self.group1()[0] * other.group3()[1])
                    + (self.group1()[2] * other.group1()[3])
                    + (self.group6()[0] * other.group1()[1])
                    + (self.group6()[2] * other.group0()[3])
                    + (self.group6()[3] * other.group3()[2])
                    + (other.group0()[2] * self[e1])),
                (-(self.group8()[1] * other.group0()[1])
                    - (self.group8()[2] * other.group0()[2])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group6()[0] * other.group3()[0])
                    - (self.group6()[1] * other.group3()[1])
                    - (self.group6()[2] * other.group3()[2])),
            ]) + (Simd32x4::from(self.group0()[1]) * other.group1())
                + (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group8()[0], self.group8()[1], self.group8()[2], self[e1]]))
                + (Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[0], self.group7()[0]]) * swizzle!(other.group2(), 3, 3, 1, 0))
                + (Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[2], self.group7()[1]]) * swizzle!(other.group2(), 2, 0, 3, 1))
                - (Simd32x4::from([self.group7()[2], self.group7()[0], self.group7()[1], self.group1()[3]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group8()[1], self.group8()[2], self.group8()[0], self.group6()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group8()[2], self.group8()[0], self.group8()[1], self.group8()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group7()[2]]) * swizzle!(other.group2(), 0, 1, 2, 2))
                - (Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group1()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))),
            // e423, e431, e412
            (Simd32x3::from([
                ((self.group1()[2] * other.group0()[1]) + (self.group6()[1] * other.group0()[2])),
                ((self.group1()[0] * other.group0()[2]) + (self.group6()[2] * other.group0()[0])),
                ((self.group1()[1] * other.group0()[0]) + (self.group6()[0] * other.group0()[1])),
            ]) + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                - (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group6()[3], self.group1()[2], self.group6()[1]]))
                - (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group6()[2], self.group6()[3], self.group1()[0]]))
                - (Simd32x3::from(other.group0()[2]) * Simd32x3::from([self.group1()[1], self.group6()[0], self.group6()[3]]))
                - (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                + (Simd32x3::from([other.group0()[3], other.group0()[3], other.group1()[1]]) * swizzle!(self.group7(), 0, 1, 0))
                - (Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]) * swizzle!(self.group7(), 2, 0, 1))
                + (Simd32x3::from([other.group1()[2], other.group1()[0], other.group0()[3]]) * swizzle!(self.group7(), 1, 2, 2))
                + (Simd32x3::from([other.group1()[3], other.group1()[3], other.group3()[1]]) * swizzle!(self.group7(), 0, 1, 0))
                - (Simd32x3::from([other.group3()[1], other.group3()[2], other.group3()[0]]) * swizzle!(self.group7(), 2, 0, 1))
                + (Simd32x3::from([other.group3()[2], other.group3()[0], other.group1()[3]]) * swizzle!(self.group7(), 1, 2, 2))),
            // e235, e315, e125
            (Simd32x3::from([
                ((self.group1()[1] * other.group2()[2]) - (self.group1()[2] * other.group2()[1]) + (self.group6()[1] * other.group2()[2]) - (self.group6()[2] * other.group2()[1])),
                (-(self.group1()[0] * other.group2()[2]) + (self.group1()[2] * other.group2()[0]) - (self.group6()[0] * other.group2()[2])
                    + (self.group6()[2] * other.group2()[0])),
                ((self.group1()[0] * other.group2()[1]) - (self.group1()[1] * other.group2()[0]) + (self.group6()[0] * other.group2()[1]) - (self.group6()[1] * other.group2()[0])),
            ]) + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                + (Simd32x3::from(self.group8()[0]) * Simd32x3::from([other.group0()[3], other.group3()[2], other.group1()[1]]))
                - (Simd32x3::from(self.group8()[0]) * Simd32x3::from([other.group1()[3], other.group1()[2], other.group3()[1]]))
                + (Simd32x3::from(self.group8()[1]) * Simd32x3::from([other.group1()[2], other.group0()[3], other.group3()[0]]))
                - (Simd32x3::from(self.group8()[1]) * Simd32x3::from([other.group3()[2], other.group1()[3], other.group1()[0]]))
                - (Simd32x3::from(self.group8()[2]) * Simd32x3::from([other.group1()[1], other.group3()[0], other.group1()[3]]))
                + (Simd32x3::from(self.group8()[2]) * Simd32x3::from([other.group3()[1], other.group1()[0], other.group0()[3]]))
                + (Simd32x3::from(self.group6()[3]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                + (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                + (Simd32x3::from(self[e1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(self[e1]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[0] * other.group3()[0]) - (self.group5()[1] * other.group3()[2]) - (self.group9()[3] * other.group0()[0]) + (other.group2()[0] * self[e45])),
                (-(self.group0()[0] * other.group3()[1]) - (self.group5()[2] * other.group3()[0]) - (self.group9()[3] * other.group0()[1]) + (other.group2()[1] * self[e45])),
                (-(self.group0()[0] * other.group3()[2]) - (self.group5()[0] * other.group3()[1]) - (self.group9()[3] * other.group0()[2]) + (other.group2()[2] * self[e45])),
                (-(self.group5()[1] * other.group2()[1]) - (self.group5()[2] * other.group2()[2]) - (self.group3()[3] * other.group2()[3])
                    + (self.group9()[3] * other.group0()[3])),
            ]) + (Simd32x4::from([self.group4()[0], self.group4()[1], self.group4()[0], self.group0()[0]]) * swizzle!(other.group2(), 3, 3, 1, 3))
                + (Simd32x4::from([self.group4()[1], self.group4()[2], self.group4()[2], self.group9()[0]]) * swizzle!(other.group2(), 2, 0, 3, 0))
                - (Simd32x4::from([self.group4()[2], self.group4()[0], self.group4()[1], self.group5()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group5()[0], self.group5()[1], self.group5()[2], self.group3()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group3()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[1]]) * swizzle!(self.group3(), 2, 0, 1, 1))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group3()[3], other.group1()[2]]) * swizzle!(self.group3(), 1, 2, 2, 2))
                + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group2()[1]]) * swizzle!(self.group9(), 0, 1, 0, 1))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[2]]) * swizzle!(self.group3(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group2()[2]]) * swizzle!(self.group9(), 1, 2, 2, 2))
                - (Simd32x4::from([other.group3()[3], other.group3()[3], other.group0()[1], other.group1()[1]]) * swizzle!(self.group3(), 0, 1, 0, 1))
                - (swizzle!(self.group9(), 2, 0, 1, 3) * swizzle!(other.group1(), 1, 2, 0, 3))),
            // e1234
            ((self.group0()[0] * other.group3()[3])
                - (self.group4()[0] * other.group1()[0])
                - (self.group4()[0] * other.group3()[0])
                - (self.group4()[1] * other.group1()[1])
                - (self.group4()[1] * other.group3()[1])
                - (self.group4()[2] * other.group1()[2])
                - (self.group4()[2] * other.group3()[2])
                - (self.group5()[0] * other.group0()[0])
                - (self.group5()[1] * other.group0()[1])
                - (self.group5()[2] * other.group0()[2])
                + (self.group3()[3] * other.group3()[3])
                - (self.group9()[0] * other.group0()[0])
                - (self.group9()[1] * other.group0()[1])
                - (self.group9()[2] * other.group0()[2])
                + (other.group0()[3] * self[e45])
                + (other.group1()[3] * self[e45])),
        );
    }
}
impl GeometricAntiProduct<VersorOdd> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      162      194        0
    //    simd2        4        4        0
    //    simd3       50       50        0
    //    simd4       40       40        0
    // Totals...
    // yes simd      256      288        0
    //  no simd      480      512        0
    fn geometric_anti_product(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                ((self.group0()[1] * other.group0()[3])
                    - (self.group7()[0] * other.group2()[0])
                    - (self.group7()[1] * other.group2()[1])
                    - (self.group7()[2] * other.group2()[2])
                    - (self.group8()[0] * other.group0()[0])
                    - (self.group8()[1] * other.group0()[1])
                    - (self.group8()[2] * other.group0()[2])
                    + (self.group1()[3] * other.group3()[3])
                    - (self.group6()[0] * other.group1()[0])
                    - (self.group6()[1] * other.group1()[1])
                    - (self.group6()[2] * other.group1()[2])
                    + (other.group2()[3] * self[e1])),
                (-(self.group0()[0] * other.group0()[3])
                    + (self.group4()[0] * other.group2()[0])
                    + (self.group4()[1] * other.group2()[1])
                    + (self.group4()[2] * other.group2()[2])
                    + (self.group5()[0] * other.group1()[0])
                    + (self.group5()[1] * other.group1()[1])
                    + (self.group5()[2] * other.group1()[2])
                    + (self.group3()[0] * other.group0()[0])
                    + (self.group3()[1] * other.group0()[1])
                    + (self.group3()[2] * other.group0()[2])
                    - (self.group9()[3] * other.group2()[3])
                    - (other.group3()[3] * self[e45])),
            ]) - (Simd32x2::from(other.group1()[3]) * Simd32x2::from([self.group6()[3], self.group3()[3]]))
                + (Simd32x2::from(other.group3()[0]) * Simd32x2::from([self.group1()[0], self.group9()[0]]))
                + (Simd32x2::from(other.group3()[1]) * Simd32x2::from([self.group1()[1], self.group9()[1]]))
                + (Simd32x2::from(other.group3()[2]) * Simd32x2::from([self.group1()[2], self.group9()[2]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group3()[0]) + (self.group4()[0] * other.group3()[3]) + (self.group4()[1] * other.group2()[2]) + (self.group5()[1] * other.group3()[2])
                    - (self.group9()[2] * other.group1()[1])
                    - (self.group9()[3] * other.group0()[0])),
                ((self.group0()[0] * other.group3()[1]) + (self.group4()[1] * other.group3()[3]) + (self.group4()[2] * other.group2()[0]) + (self.group5()[2] * other.group3()[0])
                    - (self.group9()[0] * other.group1()[2])
                    - (self.group9()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group3()[2]) + (self.group4()[0] * other.group2()[1]) + (self.group4()[2] * other.group3()[3]) + (self.group5()[0] * other.group3()[1])
                    - (self.group3()[2] * other.group2()[3])
                    - (self.group9()[1] * other.group1()[0])),
                (-(self.group4()[1] * other.group3()[1]) + (self.group4()[2] * other.group1()[2]) - (self.group4()[2] * other.group3()[2])
                    + (self.group5()[1] * other.group0()[1])
                    + (self.group5()[2] * other.group0()[2])
                    + (self.group9()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(self[e45]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))
                - (Simd32x4::from([self.group4()[2], self.group4()[0], self.group4()[1], self.group0()[0]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group5()[0], self.group5()[1], self.group5()[2], self.group4()[0]]) * swizzle!(other.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group4()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group9()[3], self[e45]]) * swizzle!(other.group0(), 2, 0, 2, 3))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group5()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group4()[1]]) * swizzle!(other.group1(), 0, 1, 2, 1))
                + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group0()[0]]) * swizzle!(self.group9(), 0, 1, 0, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group0()[1]]) * swizzle!(self.group9(), 1, 2, 2, 1))
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[1], other.group2()[3]]) * swizzle!(self.group3(), 0, 1, 0, 3))),
            // e5
            (-(self.group0()[0] * other.group3()[3])
                + (self.group5()[0] * other.group2()[0])
                + (self.group5()[1] * other.group2()[1])
                + (self.group5()[2] * other.group2()[2])
                + (self.group3()[0] * other.group1()[0])
                + (self.group3()[0] * other.group3()[0])
                + (self.group3()[1] * other.group1()[1])
                + (self.group3()[1] * other.group3()[1])
                + (self.group3()[2] * other.group1()[2])
                + (self.group3()[2] * other.group3()[2])
                + (self.group3()[3] * other.group3()[3])
                - (self.group9()[0] * other.group2()[0])
                - (self.group9()[1] * other.group2()[1])
                - (self.group9()[2] * other.group2()[2])
                - (self.group9()[3] * other.group0()[3])
                - (self.group9()[3] * other.group1()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                (-(self.group8()[2] * other.group1()[1])
                    + (self.group1()[1] * other.group2()[2])
                    + (self.group6()[0] * other.group3()[3])
                    + (self.group6()[1] * other.group2()[2])
                    + (self.group6()[3] * other.group2()[0])
                    + (other.group1()[0] * self[e1])
                    + (other.group3()[0] * self[e1])),
                (-(self.group8()[0] * other.group1()[2])
                    + (self.group1()[2] * other.group2()[0])
                    + (self.group6()[1] * other.group3()[3])
                    + (self.group6()[2] * other.group2()[0])
                    + (self.group6()[3] * other.group2()[1])
                    + (other.group1()[1] * self[e1])
                    + (other.group3()[1] * self[e1])),
                (-(self.group8()[1] * other.group1()[0])
                    + (self.group1()[2] * other.group3()[3])
                    + (self.group6()[0] * other.group2()[1])
                    + (self.group6()[2] * other.group3()[3])
                    + (self.group6()[3] * other.group2()[2])
                    + (other.group1()[2] * self[e1])
                    + (other.group3()[2] * self[e1])),
                (-(self.group7()[2] * other.group2()[2]) + (self.group8()[1] * other.group0()[1]) + (self.group8()[2] * other.group0()[2])
                    - (self.group6()[1] * other.group3()[1])
                    - (self.group6()[2] * other.group3()[2])
                    - (self.group6()[3] * other.group0()[3])
                    - (other.group2()[3] * self[e1])),
            ]) + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))
                + (Simd32x4::from([self.group8()[0], self.group8()[1], self.group8()[0], self.group1()[0]]) * swizzle!(other.group1(), 3, 3, 1, 0))
                + (Simd32x4::from([self.group8()[0], self.group8()[1], self.group8()[2], self.group8()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group8()[1], self.group8()[2], self.group8()[0], self.group1()[3]]) * swizzle!(other.group3(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group8()[1], self.group8()[2], self.group8()[2], self.group1()[1]]) * swizzle!(other.group1(), 2, 0, 3, 1))
                - (Simd32x4::from([self.group8()[2], self.group8()[0], self.group8()[1], self.group6()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group7()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group7()[1]]) * swizzle!(other.group2(), 1, 2, 0, 1))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group2()[1], other.group1()[2]]) * swizzle!(self.group1(), 0, 1, 0, 2))),
            // e41, e42, e43
            (Simd32x3::from([
                ((self.group1()[2] * other.group0()[1]) + (self.group6()[1] * other.group0()[2])),
                ((self.group1()[0] * other.group0()[2]) + (self.group6()[2] * other.group0()[0])),
                ((self.group1()[1] * other.group0()[0]) + (self.group6()[0] * other.group0()[1])),
            ]) + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(self.group7()[0]) * Simd32x3::from([other.group0()[3], other.group3()[2], other.group1()[1]]))
                - (Simd32x3::from(self.group7()[0]) * Simd32x3::from([other.group1()[3], other.group1()[2], other.group3()[1]]))
                + (Simd32x3::from(self.group7()[1]) * Simd32x3::from([other.group1()[2], other.group0()[3], other.group3()[0]]))
                - (Simd32x3::from(self.group7()[1]) * Simd32x3::from([other.group3()[2], other.group1()[3], other.group1()[0]]))
                - (Simd32x3::from(self.group7()[2]) * Simd32x3::from([other.group1()[1], other.group3()[0], other.group1()[3]]))
                + (Simd32x3::from(self.group7()[2]) * Simd32x3::from([other.group3()[1], other.group1()[0], other.group0()[3]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                - (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group6()[3], self.group1()[2], self.group6()[1]]))
                - (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group6()[2], self.group6()[3], self.group1()[0]]))
                - (Simd32x3::from(other.group0()[2]) * Simd32x3::from([self.group1()[1], self.group6()[0], self.group6()[3]]))
                - (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))),
            // e23, e31, e12
            (Simd32x3::from([
                (-(self.group1()[1] * other.group3()[2]) + (self.group1()[2] * other.group3()[1]) + (self.group6()[1] * other.group1()[2])
                    - (self.group6()[2] * other.group1()[1])),
                ((self.group1()[0] * other.group3()[2]) - (self.group1()[2] * other.group3()[0]) - (self.group6()[0] * other.group1()[2]) + (self.group6()[2] * other.group1()[0])),
                (-(self.group1()[0] * other.group3()[1]) + (self.group1()[1] * other.group3()[0]) + (self.group6()[0] * other.group1()[1])
                    - (self.group6()[1] * other.group1()[0])),
            ]) + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                - (Simd32x3::from(self.group6()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(self[e1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group8(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group2()[3]]) * swizzle!(self.group8(), 1, 2, 2))
                - (Simd32x3::from([other.group2()[1], other.group2()[2], other.group2()[0]]) * swizzle!(self.group7(), 2, 0, 1))
                + (Simd32x3::from([other.group2()[2], other.group2()[0], other.group3()[3]]) * swizzle!(self.group7(), 1, 2, 2))
                + (Simd32x3::from([other.group2()[3], other.group2()[3], other.group0()[1]]) * swizzle!(self.group8(), 0, 1, 0))
                + (Simd32x3::from([other.group3()[3], other.group3()[3], other.group2()[1]]) * swizzle!(self.group7(), 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group4()[2] * other.group2()[1]) - (self.group5()[0] * other.group0()[3]) - (self.group3()[1] * other.group0()[2]) - (self.group9()[3] * other.group0()[0])),
                ((self.group4()[0] * other.group2()[2]) - (self.group5()[1] * other.group0()[3]) - (self.group3()[2] * other.group0()[0]) - (self.group9()[3] * other.group0()[1])),
                ((self.group4()[1] * other.group2()[0]) - (self.group5()[2] * other.group0()[3]) - (self.group3()[0] * other.group0()[1]) - (self.group9()[3] * other.group0()[2])),
                (-(self.group5()[2] * other.group3()[2])
                    + (self.group3()[1] * other.group0()[1])
                    + (self.group3()[2] * other.group0()[2])
                    + (self.group3()[3] * other.group0()[3])),
            ]) - (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group9()[0]]) * swizzle!(other.group1(), 0, 1, 2, 0))
                - (Simd32x4::from([self.group4()[0], self.group4()[1], self.group4()[2], self.group5()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group4()[1], self.group4()[2], self.group4()[0], self.group4()[0]]) * swizzle!(other.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group5()[1], self.group5()[2], self.group5()[0], self.group9()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))
                + (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group4()[1]]) * swizzle!(other.group2(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group5()[1]]) * swizzle!(other.group3(), 0, 1, 2, 1))
                + (Simd32x4::from([self.group9()[2], self.group9()[0], self.group9()[1], self[e45]]) * swizzle!(other.group3(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group1()[2]]) * swizzle!(self.group9(), 0, 1, 0, 2))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[3], other.group2()[3]]) * swizzle!(self.group9(), 1, 2, 2, 3))
                - (Simd32x4::from([self[e45], self[e45], self[e45], self.group4()[2]]) * swizzle!(other.group2(), 0, 1, 2, 2))
                + (swizzle!(self.group3(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e423, e431, e412
            (Simd32x3::from([
                (-(self.group9()[1] * other.group0()[2]) + (self.group9()[2] * other.group0()[1])),
                ((self.group9()[0] * other.group0()[2]) - (self.group9()[2] * other.group0()[0])),
                (-(self.group9()[0] * other.group0()[1]) + (self.group9()[1] * other.group0()[0])),
            ]) - (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from(self.group4()[0]) * Simd32x3::from([other.group0()[3], other.group3()[2], other.group1()[1]]))
                + (Simd32x3::from(self.group4()[0]) * Simd32x3::from([other.group1()[3], other.group1()[2], other.group3()[1]]))
                - (Simd32x3::from(self.group4()[1]) * Simd32x3::from([other.group1()[2], other.group0()[3], other.group3()[0]]))
                + (Simd32x3::from(self.group4()[1]) * Simd32x3::from([other.group3()[2], other.group1()[3], other.group1()[0]]))
                + (Simd32x3::from(self.group4()[2]) * Simd32x3::from([other.group1()[1], other.group3()[0], other.group1()[3]]))
                - (Simd32x3::from(self.group4()[2]) * Simd32x3::from([other.group3()[1], other.group1()[0], other.group0()[3]]))
                - (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                - (Simd32x3::from(self[e45]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group5(), 2, 0, 1))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group2()[3]]) * swizzle!(self.group5(), 1, 2, 2))
                - (Simd32x3::from([other.group2()[3], other.group2()[3], other.group0()[1]]) * swizzle!(self.group5(), 0, 1, 0))),
            // e235, e315, e125
            (Simd32x3::from([
                (-(self.group3()[1] * other.group1()[2]) - (self.group3()[1] * other.group3()[2])
                    + (self.group3()[2] * other.group1()[1])
                    + (self.group3()[2] * other.group3()[1])
                    + (self.group9()[1] * other.group2()[2])
                    - (self.group9()[2] * other.group2()[1])),
                ((self.group3()[0] * other.group1()[2]) + (self.group3()[0] * other.group3()[2])
                    - (self.group3()[2] * other.group1()[0])
                    - (self.group3()[2] * other.group3()[0])
                    - (self.group9()[0] * other.group2()[2])
                    + (self.group9()[2] * other.group2()[0])),
                (-(self.group3()[0] * other.group1()[1]) - (self.group3()[0] * other.group3()[1])
                    + (self.group3()[1] * other.group1()[0])
                    + (self.group3()[1] * other.group3()[0])
                    + (self.group9()[0] * other.group2()[1])
                    - (self.group9()[1] * other.group2()[0])),
            ]) - (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                - (Simd32x3::from(self.group9()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(self.group9()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                - (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from([other.group2()[1], other.group2()[2], other.group2()[0]]) * swizzle!(self.group5(), 2, 0, 1))
                - (Simd32x3::from([other.group2()[2], other.group2()[0], other.group3()[3]]) * swizzle!(self.group5(), 1, 2, 2))
                - (Simd32x3::from([other.group3()[3], other.group3()[3], other.group2()[1]]) * swizzle!(self.group5(), 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group7()[1] * other.group2()[2]) - (self.group8()[1] * other.group0()[2])
                    + (self.group1()[3] * other.group2()[0])
                    + (self.group6()[0] * other.group1()[3])
                    + (self.group6()[1] * other.group3()[2])
                    - (self.group6()[3] * other.group1()[0])
                    - (other.group0()[0] * self[e1])),
                ((self.group7()[2] * other.group2()[0]) - (self.group8()[2] * other.group0()[0])
                    + (self.group1()[3] * other.group2()[1])
                    + (self.group6()[1] * other.group1()[3])
                    + (self.group6()[2] * other.group3()[0])
                    - (self.group6()[3] * other.group1()[1])
                    - (other.group0()[1] * self[e1])),
                ((self.group7()[0] * other.group2()[1]) - (self.group8()[0] * other.group0()[1]) - (self.group1()[2] * other.group0()[3])
                    + (self.group1()[3] * other.group2()[2])
                    + (self.group6()[0] * other.group3()[1])
                    + (self.group6()[2] * other.group1()[3])
                    - (other.group0()[2] * self[e1])),
                (-(self.group8()[1] * other.group1()[1])
                    - (self.group8()[1] * other.group3()[1])
                    - (self.group8()[2] * other.group1()[2])
                    - (self.group8()[2] * other.group3()[2])
                    - (self.group6()[0] * other.group2()[0])
                    - (self.group6()[1] * other.group2()[1])
                    - (self.group6()[2] * other.group2()[2])),
            ]) + (Simd32x4::from(self.group0()[1]) * other.group3())
                + (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group6()[3]]))
                - (Simd32x4::from([self.group7()[2], self.group7()[0], self.group7()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group8()[0], self.group8()[1], self.group8()[2], self.group1()[1]]) * swizzle!(other.group2(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group8()[2], self.group8()[0], self.group8()[1], self[e1]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group1()[1], self.group1()[2], self.group6()[3], self.group8()[0]]) * swizzle!(other.group1(), 2, 0, 2, 0))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self[e1]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group8()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group2()[2]]) * swizzle!(self.group1(), 0, 1, 0, 2))),
            // e1234
            ((self.group0()[1] * other.group2()[3]) - (self.group7()[0] * other.group1()[0]) + (self.group7()[0] * other.group3()[0]) - (self.group7()[1] * other.group1()[1])
                + (self.group7()[1] * other.group3()[1])
                - (self.group7()[2] * other.group1()[2])
                + (self.group7()[2] * other.group3()[2])
                + (self.group1()[0] * other.group0()[0])
                + (self.group1()[1] * other.group0()[1])
                + (self.group1()[2] * other.group0()[2])
                + (self.group1()[3] * other.group0()[3])
                - (self.group1()[3] * other.group1()[3])
                - (self.group6()[0] * other.group0()[0])
                - (self.group6()[1] * other.group0()[1])
                - (self.group6()[2] * other.group0()[2])
                - (self.group6()[3] * other.group2()[3])),
        );
    }
}
impl GeometricAntiProduct<VersorRoundPoint> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       41       64        0
    //    simd2        3        3        0
    //    simd3       19       22        0
    //    simd4       14       14        0
    // Totals...
    // yes simd       77      103        0
    //  no simd      160      192        0
    fn geometric_anti_product(self, other: VersorRoundPoint) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                ((self.group9()[0] * other.group0()[0]) + (self.group9()[1] * other.group0()[1]) + (self.group9()[2] * other.group0()[2])),
                (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x2::from(other.group1()[0]) * Simd32x2::from([self[e45], self.group1()[3]]))
                + (Simd32x2::from(other.group1()[1]) * self.group0())
                + (Simd32x2::from(other.group0()[3]) * Simd32x2::from([self.group9()[3], self[e1]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group1()[0] * self.group7()[0]) + (self.group8()[0] * other.group0()[3]) + (self.group6()[1] * other.group0()[2])),
                (-(other.group1()[0] * self.group7()[1]) + (self.group8()[1] * other.group0()[3]) + (self.group6()[2] * other.group0()[0])),
                (-(other.group1()[0] * self.group7()[2]) + (self.group8()[2] * other.group0()[3]) + (self.group6()[0] * other.group0()[1])),
                (-(self.group7()[1] * other.group0()[1]) - (self.group7()[2] * other.group0()[2]) - (self.group6()[3] * other.group0()[3])),
            ]) + (Simd32x4::from(self.group0()[1]) * other.group0())
                + (Simd32x4::from(other.group1()[1]) * self.group1())
                - (Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group7()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e5
            ((self.group0()[1] * other.group1()[0])
                + (other.group1()[0] * self.group6()[3])
                + (other.group1()[1] * self[e1])
                + (self.group8()[0] * other.group0()[0])
                + (self.group8()[1] * other.group0()[1])
                + (self.group8()[2] * other.group0()[2])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                (-(self.group3()[1] * other.group0()[2]) - (self.group9()[3] * other.group0()[0])),
                (-(self.group3()[2] * other.group0()[0]) - (self.group9()[3] * other.group0()[1])),
                (-(self.group3()[0] * other.group0()[1]) - (self.group9()[3] * other.group0()[2])),
                ((self.group5()[1] * other.group0()[1]) + (self.group5()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group1()[0]) * Simd32x4::from([self.group5()[0], self.group5()[1], self.group5()[2], self[e45]]))
                + (Simd32x4::from(other.group1()[1]) * self.group3())
                - (Simd32x4::from([other.group1()[0], other.group1()[0], other.group1()[0], other.group0()[3]]) * self.group9())
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group5()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e41, e42, e43
            ((Simd32x3::from(other.group1()[1]) * self.group4())
                + (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                + (Simd32x3::from(other.group0()[3]) * self.group5())
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group4(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group4(), 1, 2, 0))),
            // e23, e31, e12
            (Simd32x3::from([
                (-(self.group9()[1] * other.group0()[2]) + (self.group9()[2] * other.group0()[1])),
                ((self.group9()[0] * other.group0()[2]) - (self.group9()[2] * other.group0()[0])),
                (-(self.group9()[0] * other.group0()[1]) + (self.group9()[1] * other.group0()[0])),
            ]) + (Simd32x3::from(other.group1()[0]) * self.group4())
                + (Simd32x3::from(other.group1()[1]) * self.group5())
                - (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group1()[0] * self.group7()[0]) + (self.group1()[1] * other.group0()[2]) + (self.group6()[3] * other.group0()[0])),
                ((other.group1()[0] * self.group7()[1]) + (self.group1()[2] * other.group0()[0]) + (self.group6()[3] * other.group0()[1])),
                ((other.group1()[0] * self.group7()[2]) + (self.group1()[0] * other.group0()[1]) + (self.group6()[3] * other.group0()[2])),
                (-(self.group6()[0] * other.group0()[0]) - (self.group6()[1] * other.group0()[1]) - (self.group6()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group1()[1]) * self.group6())
                + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group8()[0], self.group8()[1], self.group8()[2], self[e1]]))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 3))),
            // e423, e431, e412
            ((Simd32x3::from(other.group1()[1]) * self.group7()) + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                - (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group7(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group7(), 1, 2, 0))),
            // e235, e315, e125
            ((Simd32x3::from(other.group1()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group1()[0]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                + (Simd32x3::from(other.group1()[1]) * self.group8())
                - (Simd32x3::from(self[e1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group8(), 2, 0, 1))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group8(), 1, 2, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[0] * other.group0()[0]) - (self.group5()[1] * other.group0()[2])),
                (-(self.group0()[0] * other.group0()[1]) - (self.group5()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[2]) - (self.group5()[0] * other.group0()[1])),
                ((self.group3()[1] * other.group0()[1]) + (self.group3()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group1()[0]) * Simd32x4::from([self.group4()[0], self.group4()[1], self.group4()[2], self.group0()[0]]))
                + (Simd32x4::from(other.group1()[1]) * self.group9())
                + (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group3()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other.group1()[0]]) * self.group3())),
            // e1234
            ((self.group0()[0] * other.group0()[3]) + (other.group1()[1] * self[e45])
                - (self.group4()[0] * other.group0()[0])
                - (self.group4()[1] * other.group0()[1])
                - (self.group4()[2] * other.group0()[2])
                + (self.group3()[3] * other.group0()[3])),
        );
    }
}
impl GeometricAntiProduct<VersorSphere> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       52       74        0
    //    simd2        3        3        0
    //    simd3       18       20        0
    //    simd4       12       14        0
    // Totals...
    // yes simd       85      111        0
    //  no simd      160      196        0
    fn geometric_anti_product(self, other: VersorSphere) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                ((self.group0()[1] * other.group1()[1]) + (other.group1()[0] * self[e1]) + (self.group1()[3] * other.group0()[3])),
                (-(self.group0()[0] * other.group1()[1]) - (other.group1()[0] * self.group9()[3]) - (other.group0()[3] * self[e45])),
            ]) + (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group1()[0], self.group9()[0]]))
                + (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group1()[1], self.group9()[1]]))
                + (Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group1()[2], self.group9()[2]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (other.group1()[1] * self.group9()[0]) + (self.group4()[0] * other.group0()[3]) + (self.group5()[1] * other.group0()[2])),
                ((self.group0()[0] * other.group0()[1]) + (other.group1()[1] * self.group9()[1]) + (self.group4()[1] * other.group0()[3]) + (self.group5()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[2]) + (other.group1()[1] * self.group9()[2]) + (self.group4()[2] * other.group0()[3]) + (self.group5()[0] * other.group0()[1])),
                (-(other.group1()[0] * self.group3()[3]) - (other.group1()[1] * self[e45]) - (self.group4()[1] * other.group0()[1]) - (self.group4()[2] * other.group0()[2])),
            ]) - (Simd32x4::from(other.group1()[0]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[0]]))
                - (Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group4()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e5
            (-(self.group0()[0] * other.group0()[3]) - (other.group1()[1] * self.group9()[3])
                + (self.group3()[0] * other.group0()[0])
                + (self.group3()[1] * other.group0()[1])
                + (self.group3()[2] * other.group0()[2])
                + (self.group3()[3] * other.group0()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group1()[1] * self.group8()[0]) + (self.group1()[0] * other.group0()[3]) + (self.group6()[0] * other.group0()[3]) + (other.group0()[0] * self[e1])),
                ((other.group1()[1] * self.group8()[1]) + (self.group1()[1] * other.group0()[3]) + (self.group6()[1] * other.group0()[3]) + (other.group0()[1] * self[e1])),
                ((other.group1()[1] * self.group8()[2]) + (self.group1()[2] * other.group0()[3]) + (self.group6()[2] * other.group0()[3]) + (other.group0()[2] * self[e1])),
                (-(other.group1()[0] * self[e1]) - (other.group1()[1] * self.group6()[3]) - (self.group6()[1] * other.group0()[1]) - (self.group6()[2] * other.group0()[2])),
            ]) + (Simd32x4::from([self.group8()[1], self.group8()[2], self.group8()[0], self.group1()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group8()[2], self.group8()[0], self.group8()[1], self.group6()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e41, e42, e43
            (-(Simd32x3::from(other.group1()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group1()[0]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                + (Simd32x3::from(other.group1()[1]) * self.group7())
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group7(), 2, 0, 1))
                - (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group7(), 1, 2, 0))),
            // e23, e31, e12
            (Simd32x3::from([
                (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
            ]) + (Simd32x3::from(other.group1()[0]) * self.group8())
                + (Simd32x3::from(other.group1()[1]) * Simd32x3::from([self.group6()[0], self.group6()[1], self.group6()[2]]))
                - (Simd32x3::from(self.group6()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(other.group0()[3]) * self.group7())),
            // e415, e425, e435, e321
            ((Simd32x4::from(other.group1()[1])
                * Simd32x4::from([self.group5()[0], self.group5()[1], self.group5()[2], self.group3()[3]])
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                - (Simd32x4::from(other.group1()[0]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group9()[3]]))
                - (Simd32x4::from([self.group4()[0], self.group4()[1], self.group4()[2], self.group5()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group5()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))
                - (Simd32x4::from([self.group9()[1], self.group9()[2], self.group9()[0], self.group5()[2]]) * swizzle!(other.group0(), 2, 0, 1, 2))
                + (Simd32x4::from([self.group9()[2], self.group9()[0], self.group9()[1], self[e45]]) * swizzle!(other.group0(), 1, 2, 0, 3))),
            // e423, e431, e412
            (-(Simd32x3::from(other.group1()[0]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                - (Simd32x3::from(other.group1()[0]) * self.group5())
                - (Simd32x3::from(other.group1()[1]) * self.group4())
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group4(), 2, 0, 1))
                + (Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * swizzle!(self.group4(), 1, 2, 0))),
            // e235, e315, e125
            (Simd32x3::from([
                (-(self.group3()[1] * other.group0()[2]) + (self.group3()[2] * other.group0()[1])),
                ((self.group3()[0] * other.group0()[2]) - (self.group3()[2] * other.group0()[0])),
                (-(self.group3()[0] * other.group0()[1]) + (self.group3()[1] * other.group0()[0])),
            ]) - (Simd32x3::from(other.group1()[1]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                - (Simd32x3::from(self.group9()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]))
                - (Simd32x3::from(other.group0()[3]) * self.group5())),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group1()[0] * self.group8()[0]) - (other.group1()[1] * self.group1()[0]) + (self.group6()[1] * other.group0()[2])),
                (-(other.group1()[0] * self.group8()[1]) - (other.group1()[1] * self.group1()[1]) + (self.group6()[2] * other.group0()[0])),
                (-(other.group1()[0] * self.group8()[2]) - (other.group1()[1] * self.group1()[2]) + (self.group6()[0] * other.group0()[1])),
                ((other.group1()[1] * self[e1]) - (self.group8()[1] * other.group0()[1]) - (self.group8()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(self.group0()[1]) * other.group0())
                + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group6()[3]]))
                - (Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group8()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e1234
            ((self.group0()[1] * other.group1()[0]) - (other.group1()[0] * self.group6()[3])
                + (other.group1()[1] * self.group1()[3])
                + (self.group7()[0] * other.group0()[0])
                + (self.group7()[1] * other.group0()[1])
                + (self.group7()[2] * other.group0()[2])),
        );
    }
}
impl InfixGeometricAntiProduct for Plane {}
impl GeometricAntiProduct<AntiCircleRotor> for Plane {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       19        0
    //    simd3        1        2        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       15       26        0
    //  no simd       32       45        0
    fn geometric_anti_product(self, other: AntiCircleRotor) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (-(Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([0.0, 0.0, 0.0, ((other.group1()[2] * self.group0()[2]) * -1.0)])
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e235, e315, e125, e4
            (Simd32x4::from([
                (-(other.group1()[0] * self.group0()[3]) - (other.group2()[1] * self.group0()[2])),
                (-(other.group1()[1] * self.group0()[3]) - (other.group2()[2] * self.group0()[0])),
                (-(other.group1()[2] * self.group0()[3]) - (other.group2()[0] * self.group0()[1])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                ((other.group1()[2] * self.group0()[1]) + (other.group2()[3] * self.group0()[0])),
                ((other.group1()[0] * self.group0()[2]) + (other.group2()[3] * self.group0()[1])),
                ((other.group1()[1] * self.group0()[0]) + (other.group2()[3] * self.group0()[2])),
                (-(other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2]) - (other.group2()[3] * self.group0()[3])),
            ]) - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
        );
    }
}
impl GeometricAntiProduct<AntiDipoleInversion> for Plane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       30        0
    //    simd4        9        9        0
    // Totals...
    // yes simd       18       39        0
    //  no simd       45       66        0
    fn geometric_anti_product(self, other: AntiDipoleInversion) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) * -1.0),
                ((other.group0()[2] * self.group0()[0]) * -1.0),
                ((other.group0()[0] * self.group0()[1]) * -1.0),
                ((other.group3()[1] * self.group0()[1]) + (other.group3()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group3()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group3()[1] * self.group0()[2])),
                ((other.group0()[1] * self.group0()[3]) + (other.group3()[2] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[3]) + (other.group3()[0] * self.group0()[1])),
                (-(other.group1()[2] * self.group0()[2]) - (other.group2()[3] * self.group0()[3])),
            ]) - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))
                - (swizzle!(other.group1(), 3, 3, 3, 0) * swizzle!(self.group0(), 0, 1, 2, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group1()[0] * self.group0()[3]) + (other.group2()[1] * self.group0()[2])),
                ((other.group1()[1] * self.group0()[3]) + (other.group2()[2] * self.group0()[0])),
                ((other.group1()[2] * self.group0()[3]) + (other.group2()[0] * self.group0()[1])),
                0.0,
            ]) - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group0()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group0()[2]]) * swizzle!(self.group0(), 0, 1, 2, 2))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group1()[1] * self.group0()[2]) * -1.0),
                ((other.group1()[2] * self.group0()[0]) * -1.0),
                ((other.group1()[0] * self.group0()[1]) * -1.0),
                ((other.group2()[1] * self.group0()[1]) + (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum321> for Plane {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        1       11        0
    fn geometric_anti_product(self, other: AntiDualNum321) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from(0.0),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                (-(other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum4> for Plane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        7        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        9        0
    //  no simd        0       15        0
    fn geometric_anti_product(self, other: AntiDualNum4) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(other.group0()[0]) * self.group0() * Simd32x4::from(-1.0)),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group0()[3] * -1.0)]),
            // e235, e315, e125, e5
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[1] * self.group0()[3] * -1.0)]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum5> for Plane {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        5        0
    //  no simd        0       11        0
    fn geometric_anti_product(self, other: AntiDualNum5) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                0.0,
            ]),
            // e1, e2, e3, e5
            (Simd32x4::from(other.group0()[1]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
    }
}
impl GeometricAntiProduct<AntiFlatPoint> for Plane {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        8        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        3       10        0
    //  no simd        9       16        0
    fn geometric_anti_product(self, other: AntiFlatPoint) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (other.group0()[3] * self.group0()[0] * -1.0),
                (other.group0()[3] * self.group0()[1] * -1.0),
                (other.group0()[3] * self.group0()[2] * -1.0),
                0.0,
            ]),
            // e15, e25, e35, e3215
            (Simd32x4::from([0.0, 0.0, 0.0, ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]))])
                + (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (swizzle!(other.group0(), 2, 0, 1, 3) * swizzle!(self.group0(), 1, 2, 0, 3))),
        );
    }
}
impl GeometricAntiProduct<AntiFlector> for Plane {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       16        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       11       19        0
    //  no simd       20       28        0
    fn geometric_anti_product(self, other: AntiFlector) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from([
                (-(other.group0()[3] * self.group0()[0]) - (other.group1()[2] * self.group0()[1])),
                (-(other.group0()[3] * self.group0()[1]) - (other.group1()[0] * self.group0()[2])),
                (-(other.group0()[3] * self.group0()[2]) - (other.group1()[1] * self.group0()[0])),
                ((other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
            ]) + (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e15, e25, e35, e3215
            (Simd32x4::from([
                (-(other.group1()[0] * self.group0()[3]) - (other.group1()[3] * self.group0()[0])),
                (-(other.group1()[1] * self.group0()[3]) - (other.group1()[3] * self.group0()[1])),
                (-(other.group1()[2] * self.group0()[3]) - (other.group1()[3] * self.group0()[2])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) + (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (swizzle!(other.group0(), 2, 0, 1, 3) * swizzle!(self.group0(), 1, 2, 0, 3))),
        );
    }
}
impl GeometricAntiProduct<AntiLine> for Plane {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd4        3        5        0
    // Totals...
    // yes simd        4       10        0
    //  no simd       13       25        0
    fn geometric_anti_product(self, other: AntiLine) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            ((Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]])
                * swizzle!(self.group0(), 1, 2, 0, 2)
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[1]]) * swizzle!(self.group0(), 2, 0, 1, 1))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                (other.group0()[2] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                (other.group0()[1] * self.group0()[0]),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
        );
    }
}
impl GeometricAntiProduct<AntiMotor> for Plane {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       17        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       11       20        0
    //  no simd       20       29        0
    fn geometric_anti_product(self, other: AntiMotor) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from([
                ((other.group1()[2] * self.group0()[1]) + (other.group1()[3] * self.group0()[0])),
                ((other.group1()[0] * self.group0()[2]) + (other.group1()[3] * self.group0()[1])),
                ((other.group1()[1] * self.group0()[0]) + (other.group1()[3] * self.group0()[2])),
                ((other.group0()[2] * self.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[1]]) * swizzle!(self.group0(), 2, 0, 1, 1))
                - (swizzle!(other.group0(), 0, 1, 2, 0) * swizzle!(self.group0(), 3, 3, 3, 0))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) + (other.group0()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[3] * self.group0()[1])),
                ((other.group0()[1] * self.group0()[0]) + (other.group0()[3] * self.group0()[2])),
                (-(other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) - (swizzle!(other.group0(), 1, 2, 0, 3) * swizzle!(self.group0(), 2, 0, 1, 3))),
        );
    }
}
impl GeometricAntiProduct<AntiPlane> for Plane {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       14        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        5       15        0
    //  no simd        8       18        0
    fn geometric_anti_product(self, other: AntiPlane) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) * -1.0),
                ((other.group0()[0] * self.group0()[2]) * -1.0),
                ((other.group0()[1] * self.group0()[0]) * -1.0),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) + (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group0()[3] * self.group0()[0])),
                (-(other.group0()[1] * self.group0()[3]) - (other.group0()[3] * self.group0()[1])),
                (-(other.group0()[2] * self.group0()[3]) - (other.group0()[3] * self.group0()[2])),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiQuadNum> for Plane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        8        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        1       12        0
    //  no simd        1       24        0
    fn geometric_anti_product(self, other: AntiQuadNum) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(other.group0()[0]) * self.group0() * Simd32x4::from(-1.0)),
            // e415, e425, e435, e321
            (swizzle!(other.group0(), 2, 2, 2, 0) * self.group0() * Simd32x4::from(-1.0)),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                (-(other.group0()[2] * self.group0()[3]) - (other.group0()[3] * self.group0()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[3] * self.group0()[0]),
                (other.group0()[3] * self.group0()[1]),
                (other.group0()[3] * self.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiScalar> for Plane {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn geometric_anti_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (Simd32x4::from(other[e12345]) * self.group0()));
    }
}
impl GeometricAntiProduct<AntiTripleNum> for Plane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        5        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0        9        0
    //  no simd        0       21        0
    fn geometric_anti_product(self, other: AntiTripleNum) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(other.group0()[0]) * self.group0() * Simd32x4::from(-1.0)),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group0()[3] * -1.0)]),
            // e235, e315, e125, e5
            (Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group0()[2]]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[2] * self.group0()[0]),
                (other.group0()[2] * self.group0()[1]),
                (other.group0()[2] * self.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<Circle> for Plane {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       21        0
    //    simd3        1        2        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       11       27        0
    //  no simd       25       43        0
    fn geometric_anti_product(self, other: Circle) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (other.group0()[0] * self.group0()[3]),
                (other.group0()[1] * self.group0()[3]),
                (other.group0()[2] * self.group0()[3]),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) - (swizzle!(other.group1(), 3, 3, 3, 0) * swizzle!(self.group0(), 0, 1, 2, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group2()[1] * self.group0()[2]) + (other.group1()[0] * self.group0()[3])),
                ((other.group2()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3])),
                ((other.group2()[0] * self.group0()[1]) + (other.group1()[2] * self.group0()[3])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group1()[1] * self.group0()[2]) * -1.0),
                ((other.group1()[2] * self.group0()[0]) * -1.0),
                ((other.group1()[0] * self.group0()[1]) * -1.0),
                ((other.group2()[1] * self.group0()[1]) + (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<CircleRotor> for Plane {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       21        0
    //    simd3        1        2        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       12       28        0
    //  no simd       29       47        0
    fn geometric_anti_product(self, other: CircleRotor) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (other.group0()[0] * self.group0()[3]),
                (other.group0()[1] * self.group0()[3]),
                (other.group0()[2] * self.group0()[3]),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) - (swizzle!(other.group1(), 3, 3, 3, 0) * swizzle!(self.group0(), 0, 1, 2, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group1()[0] * self.group0()[3]) + (other.group2()[1] * self.group0()[2])),
                ((other.group1()[1] * self.group0()[3]) + (other.group2()[2] * self.group0()[0])),
                ((other.group1()[2] * self.group0()[3]) + (other.group2()[0] * self.group0()[1])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group1()[1] * self.group0()[2]) * -1.0),
                ((other.group1()[2] * self.group0()[0]) * -1.0),
                ((other.group1()[0] * self.group0()[1]) * -1.0),
                ((other.group2()[2] * self.group0()[2]) + (other.group2()[3] * self.group0()[3])),
            ]) - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (swizzle!(other.group2(), 3, 3, 3, 1) * swizzle!(self.group0(), 0, 1, 2, 1))),
        );
    }
}
impl GeometricAntiProduct<Dipole> for Plane {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       15        0
    //    simd3        1        2        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       11       22        0
    //  no simd       28       41        0
    fn geometric_anti_product(self, other: Dipole) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (-(Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([0.0, 0.0, 0.0, ((other.group1()[2] * self.group0()[2]) * -1.0)])
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e235, e315, e125, e4
            (Simd32x4::from([
                (-(other.group2()[1] * self.group0()[2]) - (other.group1()[0] * self.group0()[3])),
                (-(other.group2()[2] * self.group0()[0]) - (other.group1()[1] * self.group0()[3])),
                (-(other.group2()[0] * self.group0()[1]) - (other.group1()[2] * self.group0()[3])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                (other.group1()[2] * self.group0()[1]),
                (other.group1()[0] * self.group0()[2]),
                (other.group1()[1] * self.group0()[0]),
                (-(other.group2()[2] * self.group0()[2]) - (other.group1()[3] * self.group0()[3])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[1]]) * swizzle!(self.group0(), 2, 0, 1, 1))),
        );
    }
}
impl GeometricAntiProduct<DipoleInversion> for Plane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       24        0
    //    simd4        9       11        0
    // Totals...
    // yes simd       17       35        0
    //  no simd       44       68        0
    fn geometric_anti_product(self, other: DipoleInversion) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group2()[3] * self.group0()[0]) * -1.0),
                ((other.group2()[3] * self.group0()[1]) * -1.0),
                ((other.group2()[3] * self.group0()[2]) * -1.0),
                ((other.group3()[1] * self.group0()[1]) + (other.group3()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))),
            // e415, e425, e435, e321
            ((Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group2()[3]])
                * swizzle!(self.group0(), 2, 0, 1, 3)
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[2]]) * swizzle!(self.group0(), 1, 2, 0, 2))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group2()[2] * self.group0()[1]) + (other.group3()[3] * self.group0()[0])),
                ((other.group2()[0] * self.group0()[2]) + (other.group3()[3] * self.group0()[1])),
                ((other.group2()[1] * self.group0()[0]) + (other.group3()[3] * self.group0()[2])),
                ((other.group2()[2] * self.group0()[2]) * -1.0),
            ]) - (Simd32x4::from(self.group0()[3]) * other.group1())
                - (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (swizzle!(other.group2(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group1()[1] * self.group0()[2])),
                (-(other.group0()[1] * self.group0()[3]) - (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[2] * self.group0()[3]) - (other.group1()[0] * self.group0()[1])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<DualNum321> for Plane {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        1       11        0
    fn geometric_anti_product(self, other: DualNum321) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                (-(other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<DualNum4> for Plane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0       10        0
    fn geometric_anti_product(self, other: DualNum4) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(other.group0()[0]) * self.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group0()[3] * -1.0)]),
            // e15, e25, e35, e1234
            Simd32x4::from(0.0),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other.group0()[1]) * self.group0()),
        );
    }
}
impl GeometricAntiProduct<DualNum5> for Plane {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        6        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        7        0
    //  no simd        0       10        0
    fn geometric_anti_product(self, other: DualNum5) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other.group0()[1]) * self.group0()),
        );
    }
}
impl GeometricAntiProduct<FlatPoint> for Plane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2       12        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        3       13        0
    //  no simd        6       16        0
    fn geometric_anti_product(self, other: FlatPoint) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (other.group0()[3] * self.group0()[0] * -1.0),
                (other.group0()[3] * self.group0()[1] * -1.0),
                (other.group0()[3] * self.group0()[2] * -1.0),
                0.0,
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (other.group0()[2] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                (other.group0()[1] * self.group0()[0]),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self.group0()[3])),
            ]) - (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
        );
    }
}
impl GeometricAntiProduct<Flector> for Plane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       16        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       11       19        0
    //  no simd       20       28        0
    fn geometric_anti_product(self, other: Flector) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from([
                (-(other.group0()[3] * self.group0()[0]) - (other.group1()[2] * self.group0()[1])),
                (-(other.group0()[3] * self.group0()[1]) - (other.group1()[0] * self.group0()[2])),
                (-(other.group0()[3] * self.group0()[2]) - (other.group1()[1] * self.group0()[0])),
                ((other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
            ]) + (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[2]) + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[1] * self.group0()[0]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self.group0()[3])),
            ]) - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
        );
    }
}
impl GeometricAntiProduct<Line> for Plane {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       16        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        7       18        0
    //  no simd       13       24        0
    fn geometric_anti_product(self, other: Line) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group1()[1] * self.group0()[2])),
                ((other.group0()[1] * self.group0()[3]) + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[3]) + (other.group1()[0] * self.group0()[1])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) * -1.0),
                ((other.group0()[2] * self.group0()[0]) * -1.0),
                ((other.group0()[0] * self.group0()[1]) * -1.0),
                ((other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<Motor> for Plane {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       16        0
    //    simd4        4        4        0
    // Totals...
    // yes simd        8       20        0
    //  no simd       20       32        0
    fn geometric_anti_product(self, other: Motor) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group1()[1] * self.group0()[2])),
                ((other.group0()[1] * self.group0()[3]) + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[3]) + (other.group1()[0] * self.group0()[1])),
                ((other.group0()[2] * self.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) * -1.0),
                ((other.group0()[2] * self.group0()[0]) * -1.0),
                ((other.group0()[0] * self.group0()[1]) * -1.0),
                ((other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other.group1()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))
                + (swizzle!(other.group0(), 2, 0, 1, 3) * swizzle!(self.group0(), 1, 2, 0, 3))),
        );
    }
}
impl GeometricAntiProduct<MultiVector> for Plane {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       43        0
    //    simd2        3        5        0
    //    simd3        9       11        0
    //    simd4       11       13        0
    // Totals...
    // yes simd       42       72        0
    //  no simd       96      138        0
    fn geometric_anti_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from(self.group0()[3]) * Simd32x2::from([other.group1()[3], other[e45]]) * Simd32x2::from([1.0, -1.0]))
                + (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group1()[0], other.group9()[0]]))
                + (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group1()[1], other.group9()[1]]))
                + (Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group1()[2], other.group9()[2]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group4()[0] * self.group0()[3]) - (other.group5()[1] * self.group0()[2])),
                (-(other.group4()[1] * self.group0()[3]) - (other.group5()[2] * self.group0()[0])),
                (-(other.group4()[2] * self.group0()[3]) - (other.group5()[0] * self.group0()[1])),
                (other.group4()[2] * self.group0()[2]),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group4()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group4()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))),
            // e5
            (-(other.group0()[0] * self.group0()[3])
                - (other.group3()[0] * self.group0()[0])
                - (other.group3()[1] * self.group0()[1])
                - (other.group3()[2] * self.group0()[2])
                - (other.group3()[3] * self.group0()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group8()[1] * self.group0()[2]) + (other.group6()[0] * self.group0()[3])),
                ((other.group8()[2] * self.group0()[0]) + (other.group6()[1] * self.group0()[3])),
                ((other.group8()[0] * self.group0()[1]) + (other.group6()[2] * self.group0()[3])),
                ((other.group6()[2] * self.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([other.group8()[2], other.group8()[0], other.group8()[1], other.group1()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group6()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other[e1], other[e1], other[e1], other.group6()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e41, e42, e43
            ((Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group7(), 2, 0, 1))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group7(), 1, 2, 0))),
            // e23, e31, e12
            (Simd32x3::from([
                ((other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1])),
                (-(other.group1()[0] * self.group0()[2]) + (other.group1()[2] * self.group0()[0])),
                ((other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0])),
            ]) - (Simd32x3::from(other.group6()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self.group0()[3]) * other.group7())),
            // e415, e425, e435, e321
            ((Simd32x4::from([other.group9()[1], other.group9()[2], other.group9()[0], other[e45]]) * swizzle!(self.group0(), 2, 0, 1, 3) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                - (Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[2], other.group5()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group5()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))
                - (Simd32x4::from([other.group9()[2], other.group9()[0], other.group9()[1], other.group5()[2]]) * swizzle!(self.group0(), 1, 2, 0, 2))),
            // e423, e431, e412
            (-(Simd32x3::from(other[e45]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group4(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group4(), 1, 2, 0))),
            // e235, e315, e125
            (Simd32x3::from([
                (-(other.group3()[1] * self.group0()[2]) + (other.group3()[2] * self.group0()[1])),
                ((other.group3()[0] * self.group0()[2]) - (other.group3()[2] * self.group0()[0])),
                (-(other.group3()[0] * self.group0()[1]) + (other.group3()[1] * self.group0()[0])),
            ]) + (Simd32x3::from(other.group9()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                - (Simd32x3::from(self.group0()[3]) * other.group5())),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group6()[1] * self.group0()[2]) * -1.0),
                ((other.group6()[2] * self.group0()[0]) * -1.0),
                ((other.group6()[0] * self.group0()[1]) * -1.0),
                ((other.group8()[1] * self.group0()[1]) + (other.group8()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(other.group0()[1]) * self.group0())
                - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group6()[3]]))
                + (Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group8()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e1234
            (-(other.group7()[0] * self.group0()[0]) - (other.group7()[1] * self.group0()[1]) - (other.group7()[2] * self.group0()[2])),
        );
    }
}
impl GeometricAntiProduct<Plane> for Plane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       14        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        5       15        0
    //  no simd        8       18        0
    fn geometric_anti_product(self, other: Plane) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) * -1.0),
                ((other.group0()[0] * self.group0()[2]) * -1.0),
                ((other.group0()[1] * self.group0()[0]) * -1.0),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) + (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) + (other.group0()[3] * self.group0()[0])),
                (-(other.group0()[1] * self.group0()[3]) + (other.group0()[3] * self.group0()[1])),
                (-(other.group0()[2] * self.group0()[3]) + (other.group0()[3] * self.group0()[2])),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<QuadNum> for Plane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1       11        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        1       14        0
    //  no simd        1       23        0
    fn geometric_anti_product(self, other: QuadNum) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(other.group0()[0]) * self.group0()),
            // e23, e31, e12, e45
            (swizzle!(other.group0(), 2, 2, 2, 0) * self.group0() * Simd32x4::from(-1.0)),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[1] * other.group0()[1] * -1.0),
                (self.group0()[2] * other.group0()[1] * -1.0),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[3] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<RoundPoint> for Plane {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       18        0
    //    simd3        0        1        0
    // Totals...
    // yes simd        9       19        0
    //  no simd        9       21        0
    fn geometric_anti_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return AntiCircleRotor::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other.group0()[3] * -1.0),
            ]),
            // e15, e25, e35, scalar
            Simd32x4::from([
                (-(self.group0()[0] * other[e2]) - (self.group0()[3] * other.group0()[0])),
                (-(self.group0()[1] * other[e2]) - (self.group0()[3] * other.group0()[1])),
                (-(self.group0()[2] * other[e2]) - (self.group0()[3] * other.group0()[2])),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Scalar> for Plane {
    type Output = AntiPlane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn geometric_anti_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ (Simd32x4::from(other[scalar]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])));
    }
}
impl GeometricAntiProduct<Sphere> for Plane {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       10        0
    //    simd3        0        2        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        6       14        0
    //  no simd       12       24        0
    fn geometric_anti_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return CircleRotor::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other[e4315]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(-1.0)),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other[e4315] * -1.0),
            ]),
            // e235, e315, e125, e12345
            (Simd32x4::from([0.0, 0.0, 0.0, ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]))])
                - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other[e4315]]))
                + (swizzle!(self.group0(), 0, 1, 2, 0) * swizzle!(other.group0(), 3, 3, 3, 0))),
        );
    }
}
impl GeometricAntiProduct<TripleNum> for Plane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        8        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0       10        0
    //  no simd        0       16        0
    fn geometric_anti_product(self, other: TripleNum) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(other.group0()[0]) * self.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group0()[3] * -1.0)]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0] * -1.0),
                (other.group0()[1] * self.group0()[1] * -1.0),
                (other.group0()[1] * self.group0()[2] * -1.0),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other.group0()[2]) * self.group0()),
        );
    }
}
impl GeometricAntiProduct<VersorEven> for Plane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       30        0
    //    simd4       10       10        0
    // Totals...
    // yes simd       19       40        0
    //  no simd       49       70        0
    fn geometric_anti_product(self, other: VersorEven) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[2] * other.group0()[1]) * -1.0),
                ((self.group0()[0] * other.group0()[2]) * -1.0),
                ((self.group0()[1] * other.group0()[0]) * -1.0),
                ((self.group0()[2] * other.group3()[2]) + (self.group0()[3] * other.group3()[3])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group3()[3], other.group3()[1]]) * swizzle!(self.group0(), 1, 2, 2, 1))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group0()[1], other.group3()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[2] * other.group3()[1]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[0] * other.group3()[2]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[1] * other.group3()[0]) + (self.group0()[3] * other.group0()[2])),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[3] * other.group3()[3])),
            ]) - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group1()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[3], other.group1()[1]]) * swizzle!(self.group0(), 1, 2, 2, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group0()[2] * other.group2()[1]) + (self.group0()[3] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[3] * other.group1()[1])),
                ((self.group0()[1] * other.group2()[0]) + (self.group0()[3] * other.group1()[2])),
                0.0,
            ]) - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[3], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 2, 1))
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))
                - (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group0()[2]]) * swizzle!(self.group0(), 3, 3, 3, 2))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[3] * other.group0()[0]) * -1.0),
                ((self.group0()[3] * other.group0()[1]) * -1.0),
                ((self.group0()[3] * other.group0()[2]) * -1.0),
                ((self.group0()[2] * other.group2()[2]) + (self.group0()[3] * other.group0()[3])),
            ]) + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group2()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group2()[1]]) * swizzle!(self.group0(), 1, 2, 2, 1))
                - (swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group1(), 1, 2, 0, 3))),
        );
    }
}
impl GeometricAntiProduct<VersorOdd> for Plane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       23        0
    //    simd4       10       12        0
    // Totals...
    // yes simd       18       35        0
    //  no simd       48       71        0
    fn geometric_anti_product(self, other: VersorOdd) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) * -1.0),
                ((self.group0()[2] * other.group0()[0]) * -1.0),
                ((self.group0()[2] * other.group2()[3]) * -1.0),
                ((self.group0()[1] * other.group3()[1]) + (self.group0()[2] * other.group3()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[1], other.group2()[3]]) * swizzle!(self.group0(), 0, 1, 0, 3))),
            // e415, e425, e435, e321
            ((Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group2()[3]])
                * swizzle!(self.group0(), 2, 0, 1, 3)
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group1()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[3], other.group1()[1]]) * swizzle!(self.group0(), 1, 2, 2, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group2()[2])),
                ((self.group0()[1] * other.group3()[3]) + (self.group0()[2] * other.group2()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[2] * other.group3()[3])),
                (-(self.group0()[3] * other.group0()[3]) - (self.group0()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[2]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                - (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group2(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(self.group0()[2] * other.group1()[1]) - (self.group0()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[2]) - (self.group0()[3] * other.group0()[1])),
                (-(self.group0()[1] * other.group1()[0]) - (self.group0()[3] * other.group0()[2])),
                (self.group0()[2] * other.group0()[2]),
            ]) + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group0()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 2, 1))),
        );
    }
}
impl GeometricAntiProduct<VersorRoundPoint> for Plane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       21        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        9       22        0
    //  no simd        9       25        0
    fn geometric_anti_product(self, other: VersorRoundPoint) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other.group0()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group1()[0] * self.group0()[0]) - (self.group0()[3] * other.group0()[0])),
                (-(other.group1()[0] * self.group0()[1]) - (self.group0()[3] * other.group0()[1])),
                (-(other.group1()[0] * self.group0()[2]) - (self.group0()[3] * other.group0()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other.group1()[1]) * self.group0()),
        );
    }
}
impl GeometricAntiProduct<VersorSphere> for Plane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        9       29        0
    fn geometric_anti_product(self, other: VersorSphere) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group1()[0] * self.group0()[0] * -1.0),
                (other.group1()[0] * self.group0()[1] * -1.0),
                (other.group1()[0] * self.group0()[2] * -1.0),
                (-(other.group1()[0] * self.group0()[3])
                    + (self.group0()[0] * other.group0()[0])
                    + (self.group0()[1] * other.group0()[1])
                    + (self.group0()[2] * other.group0()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (other.group1()[0] * self.group0()[3] * -1.0),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) - (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) - (self.group0()[3] * other.group0()[2])),
                (other.group1()[1] * self.group0()[3] * -1.0),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group1()[1] * self.group0()[0]),
                (other.group1()[1] * self.group0()[1]),
                (other.group1()[1] * self.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl InfixGeometricAntiProduct for QuadNum {}
impl GeometricAntiProduct<AntiCircleRotor> for QuadNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       26        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       14       31        0
    //  no simd       29       46        0
    fn geometric_anti_product(self, other: AntiCircleRotor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (other.group1()[0] * self.group0()[0]),
                (other.group1()[1] * self.group0()[0]),
                (other.group1()[2] * self.group0()[0]),
                0.0,
            ]) - (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group1()[0] * self.group0()[3]) + (other.group2()[0] * self.group0()[0])),
                ((other.group1()[1] * self.group0()[3]) + (other.group2()[1] * self.group0()[0])),
                ((other.group1()[2] * self.group0()[3]) + (other.group2()[2] * self.group0()[0])),
                ((other.group2()[3] * self.group0()[2]) * -1.0),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]) * swizzle!(self.group0(), 1, 1, 1, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group2()[0] * self.group0()[2]) + (other.group2()[0] * self.group0()[3])),
                ((other.group2()[1] * self.group0()[2]) + (other.group2()[1] * self.group0()[3])),
                ((other.group2()[2] * self.group0()[2]) + (other.group2()[2] * self.group0()[3])),
                ((other.group1()[3] * self.group0()[0]) * -1.0),
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]) * swizzle!(self.group0(), 1, 1, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group0()[0] * self.group0()[1]) - (other.group1()[0] * self.group0()[2])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group1()[1] * self.group0()[2])),
                (-(other.group0()[2] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
                (other.group2()[3] * self.group0()[1]),
            ]) + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]) * swizzle!(self.group0(), 0, 0, 0, 1))),
        );
    }
}
impl GeometricAntiProduct<AntiDipoleInversion> for QuadNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       20        0
    //    simd4       11       11        0
    // Totals...
    // yes simd       14       31        0
    //  no simd       47       64        0
    fn geometric_anti_product(self, other: AntiDipoleInversion) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[2]) * -1.0),
                ((other.group0()[1] * self.group0()[2]) * -1.0),
                ((other.group0()[2] * self.group0()[2]) * -1.0),
                0.0,
            ]) + (Simd32x4::from(self.group0()[0]) * other.group3())
                + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]) * swizzle!(self.group0(), 0, 0, 0, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group2()[0] * self.group0()[0]) + (other.group3()[0] * self.group0()[2])),
                ((other.group2()[1] * self.group0()[0]) + (other.group3()[1] * self.group0()[2])),
                ((other.group2()[2] * self.group0()[0]) + (other.group3()[2] * self.group0()[2])),
                ((other.group3()[3] * self.group0()[0]) * -1.0),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]) * swizzle!(self.group0(), 1, 1, 1, 3))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]) * swizzle!(self.group0(), 3, 3, 3, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (other.group2()[0] * self.group0()[3]),
                (other.group2()[1] * self.group0()[3]),
                (other.group2()[2] * self.group0()[3]),
                0.0,
            ]) - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]) * swizzle!(self.group0(), 1, 1, 1, 2))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]) * swizzle!(self.group0(), 2, 2, 2, 3))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (other.group3()[0] * self.group0()[3]),
                (other.group3()[1] * self.group0()[3]),
                (other.group3()[2] * self.group0()[3]),
                0.0,
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]) * swizzle!(self.group0(), 1, 1, 1, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]) * swizzle!(self.group0(), 2, 2, 2, 3))
                - (swizzle!(self.group0(), 0, 0, 0, 2) * other.group2())),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum321> for QuadNum {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        1        3        0
    // no simd        4       12        0
    fn geometric_anti_product(self, other: AntiDualNum321) -> Self::Output {
        return AntiQuadNum::from_groups(
            // e1234, e3215, e45, scalar
            ((Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[1], other.group0()[0]])
                * swizzle!(self.group0(), 0, 1, 2, 2)
                * Simd32x4::from([-1.0, 1.0, -1.0, -1.0]))
                + (Simd32x4::from([other.group0()[1], other.group0()[0], other.group0()[0], other.group0()[1]]) * swizzle!(self.group0(), 0, 1, 3, 3))),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum4> for QuadNum {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4        8        0
    fn geometric_anti_product(self, other: AntiDualNum4) -> Self::Output {
        return AntiQuadNum::from_groups(/* e1234, e3215, e45, scalar */ Simd32x4::from([
            (-(other.group0()[0] * self.group0()[2]) + (other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group0()[0])),
            (other.group0()[1] * self.group0()[1]),
            (-(other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[2])),
            ((other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[3])),
        ]));
    }
}
impl GeometricAntiProduct<AntiDualNum5> for QuadNum {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4        8        0
    fn geometric_anti_product(self, other: AntiDualNum5) -> Self::Output {
        return AntiQuadNum::from_groups(/* e1234, e3215, e45, scalar */ Simd32x4::from([
            (other.group0()[1] * self.group0()[0]),
            ((other.group0()[0] * self.group0()[2]) + (other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group0()[1])),
            ((other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[2])),
            ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[3])),
        ]));
    }
}
impl GeometricAntiProduct<AntiFlatPoint> for QuadNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        9        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        3       12        0
    //  no simd        3       21        0
    fn geometric_anti_product(self, other: AntiFlatPoint) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[3] * self.group0()[2])]),
            // e415, e425, e435, e321
            (swizzle!(self.group0(), 0, 0, 0, 3) * other.group0()),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[0] * self.group0()[3])),
                ((other.group0()[1] * self.group0()[2]) + (other.group0()[1] * self.group0()[3])),
                ((other.group0()[2] * self.group0()[2]) + (other.group0()[2] * self.group0()[3])),
                (other.group0()[3] * self.group0()[1] * -1.0),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[0]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
    }
}
impl GeometricAntiProduct<AntiFlector> for QuadNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       12        0
    //    simd4        3        6        0
    // Totals...
    // yes simd        7       18        0
    //  no simd       16       36        0
    fn geometric_anti_product(self, other: AntiFlector) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group1()[0] * self.group0()[0]),
                (other.group1()[1] * self.group0()[0]),
                (other.group1()[2] * self.group0()[0]),
                ((other.group0()[3] * self.group0()[2]) + (other.group1()[3] * self.group0()[0])),
            ]),
            // e415, e425, e435, e321
            ((swizzle!(self.group0(), 2, 2, 2, 0) * other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])) + (swizzle!(self.group0(), 0, 0, 0, 3) * other.group0())),
            // e235, e315, e125, e5
            (-(Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                + (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[0]) + (other.group1()[0] * self.group0()[3])),
                (-(other.group0()[1] * self.group0()[0]) + (other.group1()[1] * self.group0()[3])),
                (-(other.group0()[2] * self.group0()[0]) + (other.group1()[2] * self.group0()[3])),
                (other.group0()[3] * self.group0()[0]),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiLine> for QuadNum {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       21        0
    //    simd3        0        1        0
    // Totals...
    // yes simd       12       22        0
    //  no simd       12       24        0
    fn geometric_anti_product(self, other: AntiLine) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group0()[0]) * other.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group1()[0] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[3]) + (other.group1()[1] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[3]) + (other.group1()[2] * self.group0()[0])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[1]) + (other.group1()[0] * self.group0()[2]) + (other.group1()[0] * self.group0()[3])),
                ((other.group0()[1] * self.group0()[1]) + (other.group1()[1] * self.group0()[2]) + (other.group1()[1] * self.group0()[3])),
                ((other.group0()[2] * self.group0()[1]) + (other.group1()[2] * self.group0()[2]) + (other.group1()[2] * self.group0()[3])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[2]) + (other.group1()[0] * self.group0()[0])),
                (-(other.group0()[1] * self.group0()[2]) + (other.group1()[1] * self.group0()[0])),
                (-(other.group0()[2] * self.group0()[2]) + (other.group1()[2] * self.group0()[0])),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiMotor> for QuadNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       23        0
    //    simd4        2        4        0
    // Totals...
    // yes simd       10       27        0
    //  no simd       16       39        0
    fn geometric_anti_product(self, other: AntiMotor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[2] * self.group0()[0]),
                ((other.group0()[3] * self.group0()[3]) + (other.group1()[3] * self.group0()[0])),
            ]),
            // e23, e31, e12, e45
            ((Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]])
                * swizzle!(self.group0(), 0, 0, 0, 2)
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]) * swizzle!(self.group0(), 3, 3, 3, 0))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[1]) + (other.group1()[0] * self.group0()[2]) + (other.group1()[0] * self.group0()[3])),
                ((other.group0()[1] * self.group0()[1]) + (other.group1()[1] * self.group0()[2]) + (other.group1()[1] * self.group0()[3])),
                ((other.group0()[2] * self.group0()[1]) + (other.group1()[2] * self.group0()[2]) + (other.group1()[2] * self.group0()[3])),
                (other.group0()[3] * self.group0()[0]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[2]) * -1.0),
                ((other.group0()[1] * self.group0()[2]) * -1.0),
                ((other.group0()[2] * self.group0()[2]) * -1.0),
                ((other.group1()[3] * self.group0()[2]) + (other.group1()[3] * self.group0()[3])),
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]) * swizzle!(self.group0(), 0, 0, 0, 1))),
        );
    }
}
impl GeometricAntiProduct<AntiPlane> for QuadNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1       11        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        1       14        0
    //  no simd        1       23        0
    fn geometric_anti_product(self, other: AntiPlane) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self.group0()[0]) * other.group0()),
            // e415, e425, e435, e321
            (swizzle!(self.group0(), 2, 2, 2, 0) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[1] * self.group0()[1] * -1.0),
                (other.group0()[2] * self.group0()[1] * -1.0),
                ((other.group0()[3] * self.group0()[2]) + (other.group0()[3] * self.group0()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3]),
                (other.group0()[1] * self.group0()[3]),
                (other.group0()[2] * self.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiQuadNum> for QuadNum {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        6       10        0
    //  no simd       12       16        0
    fn geometric_anti_product(self, other: AntiQuadNum) -> Self::Output {
        return AntiQuadNum::from_groups(
            // e1234, e3215, e45, scalar
            (Simd32x4::from([
                (-(other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[1]) + (other.group0()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[1]) - (other.group0()[3] * self.group0()[2])),
                (-(other.group0()[2] * self.group0()[2]) + (other.group0()[3] * self.group0()[3])),
            ]) + (swizzle!(other.group0(), 0, 1, 1, 0) * swizzle!(self.group0(), 3, 2, 0, 1))
                + (swizzle!(other.group0(), 3, 1, 2, 1) * swizzle!(self.group0(), 0, 3, 3, 0))),
        );
    }
}
impl GeometricAntiProduct<AntiScalar> for QuadNum {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        1        0
    // no simd        0        4        0
    fn geometric_anti_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return QuadNum::from_groups(/* e4, e5, e321, e12345 */ (Simd32x4::from(other[e12345]) * self.group0()));
    }
}
impl GeometricAntiProduct<AntiTripleNum> for QuadNum {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        5        9        0
    //  no simd        8       12        0
    fn geometric_anti_product(self, other: AntiTripleNum) -> Self::Output {
        return AntiQuadNum::from_groups(
            // e1234, e3215, e45, scalar
            (Simd32x4::from([
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[3]) + (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
                ((other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group0()[3])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[1], other.group0()[0]]) * swizzle!(self.group0(), 3, 2, 0, 1))),
        );
    }
}
impl GeometricAntiProduct<Circle> for QuadNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       24       41        0
    fn geometric_anti_product(self, other: Circle) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[0] * self.group0()[3]) + (other.group1()[0] * self.group0()[0])),
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[1] * self.group0()[3]) + (other.group1()[1] * self.group0()[0])),
                (-(other.group0()[2] * self.group0()[2]) + (other.group0()[2] * self.group0()[3]) + (other.group1()[2] * self.group0()[0])),
                (other.group1()[3] * self.group0()[2]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[1]) + (other.group2()[0] * self.group0()[0]) + (other.group1()[0] * self.group0()[3])),
                ((other.group0()[1] * self.group0()[1]) + (other.group2()[1] * self.group0()[0]) + (other.group1()[1] * self.group0()[3])),
                ((other.group0()[2] * self.group0()[1]) + (other.group2()[2] * self.group0()[0]) + (other.group1()[2] * self.group0()[3])),
                (other.group1()[3] * self.group0()[3]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((other.group2()[0] * self.group0()[2]) + (other.group2()[0] * self.group0()[3]) + (other.group1()[0] * self.group0()[1])),
                ((other.group2()[1] * self.group0()[2]) + (other.group2()[1] * self.group0()[3]) + (other.group1()[1] * self.group0()[1])),
                ((other.group2()[2] * self.group0()[2]) + (other.group2()[2] * self.group0()[3]) + (other.group1()[2] * self.group0()[1])),
                (other.group1()[3] * self.group0()[1] * -1.0),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[1]) - (other.group2()[0] * self.group0()[0]) + (other.group1()[0] * self.group0()[2])),
                ((other.group0()[1] * self.group0()[1]) - (other.group2()[1] * self.group0()[0]) + (other.group1()[1] * self.group0()[2])),
                ((other.group0()[2] * self.group0()[1]) - (other.group2()[2] * self.group0()[0]) + (other.group1()[2] * self.group0()[2])),
                (other.group1()[3] * self.group0()[0]),
            ]),
        );
    }
}
impl GeometricAntiProduct<CircleRotor> for QuadNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       23        0
    //    simd4        7        7        0
    // Totals...
    // yes simd       10       30        0
    //  no simd       31       51        0
    fn geometric_anti_product(self, other: CircleRotor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[2]) * -1.0),
                ((other.group0()[1] * self.group0()[2]) * -1.0),
                ((other.group0()[2] * self.group0()[2]) * -1.0),
                0.0,
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]) * swizzle!(self.group0(), 0, 0, 0, 3))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (other.group2()[0] * self.group0()[0]),
                (other.group2()[1] * self.group0()[0]),
                (other.group2()[2] * self.group0()[0]),
                0.0,
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]) * swizzle!(self.group0(), 1, 1, 1, 3))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]) * swizzle!(self.group0(), 3, 3, 3, 2))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group2()[0] * self.group0()[2]) + (other.group2()[0] * self.group0()[3])),
                ((other.group2()[1] * self.group0()[2]) + (other.group2()[1] * self.group0()[3])),
                ((other.group2()[2] * self.group0()[2]) + (other.group2()[2] * self.group0()[3])),
                ((other.group1()[3] * self.group0()[1]) * -1.0),
            ]) + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group2()[0] * self.group0()[0]) * -1.0),
                ((other.group2()[1] * self.group0()[0]) * -1.0),
                ((other.group2()[2] * self.group0()[0]) * -1.0),
                0.0,
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]) * swizzle!(self.group0(), 1, 1, 1, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]) * swizzle!(self.group0(), 2, 2, 2, 0))),
        );
    }
}
impl GeometricAntiProduct<Dipole> for QuadNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       24       42        0
    fn geometric_anti_product(self, other: Dipole) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[0] * self.group0()[3]) + (other.group1()[0] * self.group0()[0])),
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[1] * self.group0()[3]) + (other.group1()[1] * self.group0()[0])),
                (-(other.group0()[2] * self.group0()[2]) + (other.group0()[2] * self.group0()[3]) + (other.group1()[2] * self.group0()[0])),
                (other.group1()[3] * self.group0()[2] * -1.0),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[1]) + (other.group2()[0] * self.group0()[0]) + (other.group1()[0] * self.group0()[3])),
                ((other.group0()[1] * self.group0()[1]) + (other.group2()[1] * self.group0()[0]) + (other.group1()[1] * self.group0()[3])),
                ((other.group0()[2] * self.group0()[1]) + (other.group2()[2] * self.group0()[0]) + (other.group1()[2] * self.group0()[3])),
                (other.group1()[3] * self.group0()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group2()[0] * self.group0()[2]) + (other.group2()[0] * self.group0()[3]) + (other.group1()[0] * self.group0()[1])),
                ((other.group2()[1] * self.group0()[2]) + (other.group2()[1] * self.group0()[3]) + (other.group1()[1] * self.group0()[1])),
                ((other.group2()[2] * self.group0()[2]) + (other.group2()[2] * self.group0()[3]) + (other.group1()[2] * self.group0()[1])),
                (other.group1()[3] * self.group0()[0] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[1]) + (other.group2()[0] * self.group0()[0]) - (other.group1()[0] * self.group0()[2])),
                (-(other.group0()[1] * self.group0()[1]) + (other.group2()[1] * self.group0()[0]) - (other.group1()[1] * self.group0()[2])),
                (-(other.group0()[2] * self.group0()[1]) + (other.group2()[2] * self.group0()[0]) - (other.group1()[2] * self.group0()[2])),
                (other.group1()[3] * self.group0()[1]),
            ]),
        );
    }
}
impl GeometricAntiProduct<DipoleInversion> for QuadNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       27        0
    //    simd4        9        9        0
    // Totals...
    // yes simd       19       36        0
    //  no simd       46       63        0
    fn geometric_anti_product(self, other: DipoleInversion) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group3()[0] * self.group0()[0]) * -1.0),
                ((other.group3()[1] * self.group0()[0]) * -1.0),
                ((other.group3()[2] * self.group0()[0]) * -1.0),
                0.0,
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                - (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]) * swizzle!(self.group0(), 3, 3, 3, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (other.group2()[0] * self.group0()[0]),
                (other.group2()[1] * self.group0()[0]),
                (other.group2()[2] * self.group0()[0]),
                0.0,
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]) * swizzle!(self.group0(), 1, 1, 1, 3))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[3]]) * swizzle!(self.group0(), 2, 2, 2, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group2()[0] * self.group0()[2]) + (other.group2()[0] * self.group0()[3]) + (other.group3()[0] * self.group0()[1])),
                ((other.group2()[1] * self.group0()[2]) + (other.group2()[1] * self.group0()[3]) + (other.group3()[1] * self.group0()[1])),
                ((other.group2()[2] * self.group0()[2]) + (other.group2()[2] * self.group0()[3]) + (other.group3()[2] * self.group0()[1])),
                (-(other.group1()[3] * self.group0()[0]) - (other.group2()[3] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]) * swizzle!(self.group0(), 1, 1, 1, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group0()[0] * self.group0()[1]) - (other.group1()[0] * self.group0()[2])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group1()[1] * self.group0()[2])),
                (-(other.group0()[2] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
                (other.group3()[3] * self.group0()[3]),
            ]) + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]) * swizzle!(self.group0(), 0, 0, 0, 1))
                + (swizzle!(self.group0(), 3, 3, 3, 2) * other.group3())),
        );
    }
}
impl GeometricAntiProduct<DualNum321> for QuadNum {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        1        3        0
    // no simd        4       12        0
    fn geometric_anti_product(self, other: DualNum321) -> Self::Output {
        return QuadNum::from_groups(
            // e4, e5, e321, e12345
            ((Simd32x4::from([other.group0()[1], other.group0()[0], other.group0()[1], other.group0()[1]]) * self.group0() * Simd32x4::from([1.0, -1.0, 1.0, 1.0]))
                + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group0()[0]]) * swizzle!(self.group0(), 0, 1, 3, 2))),
        );
    }
}
impl GeometricAntiProduct<DualNum4> for QuadNum {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4        8        0
    fn geometric_anti_product(self, other: DualNum4) -> Self::Output {
        return QuadNum::from_groups(/* e4, e5, e321, e12345 */ Simd32x4::from([
            (-(other.group0()[0] * self.group0()[2]) + (other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group0()[0])),
            (other.group0()[1] * self.group0()[1]),
            ((other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[2])),
            ((other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[3])),
        ]));
    }
}
impl GeometricAntiProduct<DualNum5> for QuadNum {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4        8        0
    fn geometric_anti_product(self, other: DualNum5) -> Self::Output {
        return QuadNum::from_groups(/* e4, e5, e321, e12345 */ Simd32x4::from([
            (other.group0()[1] * self.group0()[0]),
            ((other.group0()[0] * self.group0()[2]) + (other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group0()[1])),
            (-(other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[2])),
            ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[3])),
        ]));
    }
}
impl GeometricAntiProduct<FlatPoint> for QuadNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       10        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        3       12        0
    //  no simd        3       18        0
    fn geometric_anti_product(self, other: FlatPoint) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[3] * self.group0()[2] * -1.0)]),
            // e23, e31, e12, e45
            (swizzle!(self.group0(), 0, 0, 0, 3) * other.group0()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[0] * self.group0()[3])),
                ((other.group0()[1] * self.group0()[2]) + (other.group0()[1] * self.group0()[3])),
                ((other.group0()[2] * self.group0()[2]) + (other.group0()[2] * self.group0()[3])),
                (other.group0()[3] * self.group0()[0] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            (swizzle!(self.group0(), 0, 0, 0, 1) * other.group0()),
        );
    }
}
impl GeometricAntiProduct<Flector> for QuadNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       20        0
    //    simd4        3        5        0
    // Totals...
    // yes simd       10       25        0
    //  no simd       19       40        0
    fn geometric_anti_product(self, other: Flector) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group1()[0] * self.group0()[0] * -1.0),
                (other.group1()[1] * self.group0()[0] * -1.0),
                (other.group1()[2] * self.group0()[0] * -1.0),
                (-(other.group0()[3] * self.group0()[2]) + (other.group1()[3] * self.group0()[0])),
            ]),
            // e23, e31, e12, e45
            ((swizzle!(self.group0(), 2, 2, 2, 0) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])) + (swizzle!(self.group0(), 0, 0, 0, 3) * other.group0())),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[0] * self.group0()[3]) + (other.group1()[0] * self.group0()[1])),
                ((other.group0()[1] * self.group0()[2]) + (other.group0()[1] * self.group0()[3]) + (other.group1()[1] * self.group0()[1])),
                ((other.group0()[2] * self.group0()[2]) + (other.group0()[2] * self.group0()[3]) + (other.group1()[2] * self.group0()[1])),
                (other.group0()[3] * self.group0()[0] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([0.0, 0.0, 0.0, (other.group1()[3] * self.group0()[3])])
                + (swizzle!(self.group0(), 0, 0, 0, 1) * other.group0())
                + (swizzle!(self.group0(), 3, 3, 3, 2) * other.group1())),
        );
    }
}
impl GeometricAntiProduct<Line> for QuadNum {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       21        0
    //    simd3        0        1        0
    // Totals...
    // yes simd       12       22        0
    //  no simd       12       24        0
    fn geometric_anti_product(self, other: Line) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self.group0()[0]) * other.group0()),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group1()[0] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[3]) + (other.group1()[1] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[3]) + (other.group1()[2] * self.group0()[0])),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[1]) + (other.group1()[0] * self.group0()[2]) + (other.group1()[0] * self.group0()[3])),
                ((other.group0()[1] * self.group0()[1]) + (other.group1()[1] * self.group0()[2]) + (other.group1()[1] * self.group0()[3])),
                ((other.group0()[2] * self.group0()[1]) + (other.group1()[2] * self.group0()[2]) + (other.group1()[2] * self.group0()[3])),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[2]) - (other.group1()[0] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[2]) - (other.group1()[1] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<Motor> for QuadNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       12        0
    //    simd4        3        6        0
    // Totals...
    // yes simd        7       18        0
    //  no simd       16       36        0
    fn geometric_anti_product(self, other: Motor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[2] * self.group0()[0]),
                ((other.group0()[3] * self.group0()[3]) + (other.group1()[3] * self.group0()[0])),
            ]),
            // e415, e425, e435, e321
            ((Simd32x4::from(self.group0()[0]) * other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])) + (swizzle!(self.group0(), 3, 3, 3, 2) * other.group0())),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group0()[1]) * other.group0()) + (Simd32x4::from(self.group0()[2]) * other.group1()) + (Simd32x4::from(self.group0()[3]) * other.group1())),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[2]) - (other.group1()[0] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[2]) - (other.group1()[1] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])),
                (other.group0()[3] * self.group0()[0]),
            ]),
        );
    }
}
impl GeometricAntiProduct<MultiVector> for QuadNum {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       24        0
    //    simd2        3        5        0
    //    simd3       12       16        0
    //    simd4       10       13        0
    // Totals...
    // yes simd       39       58        0
    //  no simd       96      134        0
    fn geometric_anti_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group3()[3], other.group6()[3]]) * Simd32x2::from([-1.0, 1.0]))
                + (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group9()[3], other[e1]]))
                + (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other[e45], other.group1()[3]]))
                + (Simd32x2::from(self.group0()[3]) * other.group0())),
            // e1, e2, e3, e4
            ((Simd32x4::from(self.group0()[3]) * other.group1())
                + (Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group0()[1]]) * swizzle!(self.group0(), 1, 1, 1, 0))
                - (Simd32x4::from([other.group8()[0], other.group8()[1], other.group8()[2], other.group1()[3]]) * swizzle!(self.group0(), 0, 0, 0, 2))
                + (swizzle!(self.group0(), 2, 2, 2, 0) * other.group6())),
            // e5
            ((other.group0()[1] * self.group0()[1]) - (other.group6()[3] * self.group0()[1]) + (self.group0()[2] * other[e1]) + (self.group0()[3] * other[e1])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group3()[0] * self.group0()[3]) + (other.group9()[0] * self.group0()[1])),
                ((other.group3()[1] * self.group0()[3]) + (other.group9()[1] * self.group0()[1])),
                ((other.group3()[2] * self.group0()[3]) + (other.group9()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) - (self.group0()[1] * other[e45])),
            ]) + (Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other.group3()[3]]) * swizzle!(self.group0(), 1, 1, 1, 3))
                + (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group9()[3]]) * swizzle!(self.group0(), 2, 2, 2, 0))),
            // e41, e42, e43
            (-(Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]])) + (Simd32x3::from(self.group0()[0]) * other.group5())
                - (Simd32x3::from(self.group0()[2]) * other.group4())
                + (Simd32x3::from(self.group0()[3]) * other.group4())),
            // e23, e31, e12
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]])) + (Simd32x3::from(self.group0()[1]) * other.group4())
                - (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                + (Simd32x3::from(self.group0()[3]) * other.group5())),
            // e415, e425, e435, e321
            ((Simd32x4::from([other.group6()[0], other.group6()[1], other.group6()[2], other[e1]]) * swizzle!(self.group0(), 3, 3, 3, 0) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group0()[1]]) * swizzle!(self.group0(), 1, 1, 1, 2))
                + (Simd32x4::from([other.group8()[0], other.group8()[1], other.group8()[2], other.group1()[3]]) * swizzle!(self.group0(), 0, 0, 0, 1))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group6()[3]]) * swizzle!(self.group0(), 2, 2, 2, 3))),
            // e423, e431, e412
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                - (Simd32x3::from(self.group0()[2]) * other.group7())
                + (Simd32x3::from(self.group0()[3]) * other.group7())),
            // e235, e315, e125
            (-(Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                + (Simd32x3::from(self.group0()[2]) * other.group8())
                + (Simd32x3::from(self.group0()[3]) * other.group8())),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group4()[0] * self.group0()[1]) - (other.group5()[0] * self.group0()[2])),
                (-(other.group4()[1] * self.group0()[1]) - (other.group5()[1] * self.group0()[2])),
                (-(other.group4()[2] * self.group0()[1]) - (other.group5()[2] * self.group0()[2])),
                ((other.group9()[3] * self.group0()[2]) + (other.group9()[3] * self.group0()[3])),
            ]) + (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group0()[0]]) * swizzle!(self.group0(), 0, 0, 0, 1))
                + (Simd32x4::from([other.group9()[0], other.group9()[1], other.group9()[2], other.group3()[3]]) * swizzle!(self.group0(), 3, 3, 3, 1))),
            // e1234
            ((other.group0()[0] * self.group0()[0]) - (other.group3()[3] * self.group0()[0]) - (self.group0()[2] * other[e45]) + (self.group0()[3] * other[e45])),
        );
    }
}
impl GeometricAntiProduct<Plane> for QuadNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        8        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        1       12        0
    //  no simd        1       24        0
    fn geometric_anti_product(self, other: Plane) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self.group0()[0]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e23, e31, e12, e45
            (swizzle!(self.group0(), 2, 2, 2, 0) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[2] * self.group0()[1]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3]),
                (other.group0()[1] * self.group0()[3]),
                (other.group0()[2] * self.group0()[3]),
                ((other.group0()[3] * self.group0()[2]) + (other.group0()[3] * self.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<QuadNum> for QuadNum {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        3        5        0
    // no simd       12       20        0
    fn geometric_anti_product(self, other: QuadNum) -> Self::Output {
        return QuadNum::from_groups(
            // e4, e5, e321, e12345
            ((swizzle!(other.group0(), 0, 2, 1, 3) * swizzle!(self.group0(), 2, 1, 0, 3) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (swizzle!(other.group0(), 0, 1, 0, 0) * swizzle!(self.group0(), 3, 2, 1, 1))
                + (swizzle!(other.group0(), 2, 1, 2, 1) * swizzle!(self.group0(), 0, 3, 3, 0))
                + (swizzle!(other.group0(), 3, 3, 3, 2) * swizzle!(self.group0(), 0, 1, 2, 2))),
        );
    }
}
impl GeometricAntiProduct<RoundPoint> for QuadNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4       23        0
    fn geometric_anti_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                ((self.group0()[0] * other[e2]) + (self.group0()[1] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[2] * other.group0()[0]),
                (self.group0()[2] * other.group0()[1]),
                (self.group0()[2] * other.group0()[2]),
                (-(self.group0()[0] * other[e2]) + (self.group0()[1] * other.group0()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0] * -1.0),
                (self.group0()[1] * other.group0()[1] * -1.0),
                (self.group0()[1] * other.group0()[2] * -1.0),
                ((self.group0()[2] * other[e2]) + (self.group0()[3] * other[e2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Scalar> for QuadNum {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn geometric_anti_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiQuadNum::from_groups(
            // e1234, e3215, e45, scalar
            (Simd32x4::from(other[scalar]) * self.group0() * Simd32x4::from([1.0, 1.0, -1.0, 1.0])),
        );
    }
}
impl GeometricAntiProduct<Sphere> for QuadNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4       26        0
    fn geometric_anti_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0] * -1.0),
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[0] * other.group0()[2] * -1.0),
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other[e4315])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[2] * other.group0()[0] * -1.0),
                (self.group0()[2] * other.group0()[1] * -1.0),
                (self.group0()[2] * other.group0()[2] * -1.0),
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other[e4315])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                (-(self.group0()[2] * other[e4315]) + (self.group0()[3] * other[e4315])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<TripleNum> for QuadNum {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        2        4        0
    // no simd        8       16        0
    fn geometric_anti_product(self, other: TripleNum) -> Self::Output {
        return QuadNum::from_groups(
            // e4, e5, e321, e12345
            ((Simd32x4::from([other.group0()[0], other.group0()[2], other.group0()[1], other.group0()[2]])
                * swizzle!(self.group0(), 2, 1, 0, 3)
                * Simd32x4::from([-1.0, 1.0, -1.0, 1.0]))
                + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[0], other.group0()[0]]) * swizzle!(self.group0(), 3, 2, 1, 1))
                + (Simd32x4::from([other.group0()[2], other.group0()[1], other.group0()[2], other.group0()[1]]) * swizzle!(self.group0(), 0, 3, 2, 0))),
        );
    }
}
impl GeometricAntiProduct<VersorEven> for QuadNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4       12       18        0
    // no simd       48       72        0
    fn geometric_anti_product(self, other: VersorEven) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((swizzle!(self.group0(), 2, 2, 2, 3) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                + (swizzle!(self.group0(), 0, 0, 0, 1) * other.group3())),
            // e415, e425, e435, e321
            ((Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]])
                * swizzle!(self.group0(), 3, 3, 3, 0)
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]) * swizzle!(self.group0(), 0, 0, 0, 1))
                + (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]) * swizzle!(self.group0(), 2, 2, 2, 3))
                + (swizzle!(self.group0(), 1, 1, 1, 2) * other.group0())),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))
                + (Simd32x4::from(self.group0()[2]) * other.group2())
                + (Simd32x4::from(self.group0()[3]) * other.group2())),
            // e1, e2, e3, e4
            ((Simd32x4::from(self.group0()[3]) * other.group3())
                - (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]) * swizzle!(self.group0(), 0, 0, 0, 2))
                + (swizzle!(self.group0(), 1, 1, 1, 0) * other.group0())
                + (swizzle!(self.group0(), 2, 2, 2, 0) * other.group1())),
        );
    }
}
impl GeometricAntiProduct<VersorOdd> for QuadNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       16        0
    //    simd4       10       14        0
    // Totals...
    // yes simd       18       30        0
    //  no simd       48       72        0
    fn geometric_anti_product(self, other: VersorOdd) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((swizzle!(self.group0(), 2, 2, 2, 3) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]) * swizzle!(self.group0(), 0, 0, 0, 2))),
            // e23, e31, e12, e45
            ((Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]])
                * swizzle!(self.group0(), 3, 3, 3, 2)
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]) * swizzle!(self.group0(), 1, 1, 1, 3))
                - (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[3]]) * swizzle!(self.group0(), 2, 2, 2, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group0()[2] * other.group2()[0]) + (self.group0()[3] * other.group2()[0])),
                ((self.group0()[2] * other.group2()[1]) + (self.group0()[3] * other.group2()[1])),
                ((self.group0()[2] * other.group2()[2]) + (self.group0()[3] * other.group2()[2])),
                (-(self.group0()[0] * other.group1()[3]) - (self.group0()[2] * other.group2()[3])),
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]) * swizzle!(self.group0(), 1, 1, 1, 0))
                + (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[3]]) * swizzle!(self.group0(), 1, 1, 1, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group1()[0])),
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group1()[2])),
                ((self.group0()[2] * other.group3()[3]) + (self.group0()[3] * other.group3()[3])),
            ]) + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[3]]) * swizzle!(self.group0(), 0, 0, 0, 1))
                + (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]) * swizzle!(self.group0(), 3, 3, 3, 1))),
        );
    }
}
impl GeometricAntiProduct<VersorRoundPoint> for QuadNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       27        0
    fn geometric_anti_product(self, other: VersorRoundPoint) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                ((other.group1()[0] * self.group0()[0]) + (other.group1()[1] * self.group0()[3]) + (self.group0()[1] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[2] * other.group0()[0]),
                (self.group0()[2] * other.group0()[1]),
                (self.group0()[2] * other.group0()[2]),
                (-(other.group1()[0] * self.group0()[0]) + (other.group1()[1] * self.group0()[2]) + (self.group0()[1] * other.group0()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0] * -1.0),
                (self.group0()[1] * other.group0()[1] * -1.0),
                (self.group0()[1] * other.group0()[2] * -1.0),
                ((other.group1()[0] * self.group0()[2]) + (other.group1()[0] * self.group0()[3]) + (other.group1()[1] * self.group0()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                ((other.group1()[1] * self.group0()[0]) - (self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorSphere> for QuadNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       30        0
    fn geometric_anti_product(self, other: VersorSphere) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0] * -1.0),
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[0] * other.group0()[2] * -1.0),
                ((other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[3]) + (self.group0()[0] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[2] * other.group0()[0] * -1.0),
                (self.group0()[2] * other.group0()[1] * -1.0),
                (self.group0()[2] * other.group0()[2] * -1.0),
                (-(other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[2]) + (self.group0()[0] * other.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                (-(other.group1()[0] * self.group0()[2]) + (other.group1()[0] * self.group0()[3]) + (other.group1()[1] * self.group0()[0])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                ((other.group1()[1] * self.group0()[1]) + (self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[3])),
            ]),
        );
    }
}
impl InfixGeometricAntiProduct for RoundPoint {}
impl GeometricAntiProduct<AntiCircleRotor> for RoundPoint {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       18        0
    //    simd3        2        3        0
    //    simd4        7        7        0
    // Totals...
    // yes simd       15       28        0
    //  no simd       40       55        0
    fn geometric_anti_product(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[0] * self[e2]) - (other.group1()[3] * self.group0()[0])),
                ((other.group0()[1] * self[e2]) - (other.group1()[3] * self.group0()[1])),
                ((other.group0()[2] * self[e2]) - (other.group1()[3] * self.group0()[2])),
                ((other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (other.group1()[0] * self[e2]),
                (other.group1()[1] * self[e2]),
                (other.group1()[2] * self[e2]),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) + (other.group2()[3] * self.group0()[3])),
            ]) - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (-Simd32x4::from([
                (other.group0()[0] * self[e2]),
                (other.group0()[1] * self[e2]),
                (other.group0()[2] * self[e2]),
                (other.group2()[2] * self.group0()[2]),
            ]) - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self[e2]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self[e2]]) * other.group2())
                - (swizzle!(other.group2(), 3, 3, 3, 1) * swizzle!(self.group0(), 0, 1, 2, 1))),
        );
    }
}
impl GeometricAntiProduct<AntiDipoleInversion> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       27       43        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       35       51        0
    //  no simd       59       75        0
    fn geometric_anti_product(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group1()[0] * self.group0()[3]) + (other.group3()[0] * self.group0()[3])),
                ((other.group1()[1] * self.group0()[3]) + (other.group3()[1] * self.group0()[3])),
                ((other.group1()[2] * self.group0()[3]) + (other.group3()[2] * self.group0()[3])),
                ((other.group2()[3] * self[e2]) - (other.group3()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group3()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group3()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group1()[3] * self.group0()[0]) + (other.group2()[0] * self.group0()[3]) + (other.group3()[2] * self.group0()[1])),
                ((other.group1()[3] * self.group0()[1]) + (other.group2()[1] * self.group0()[3]) + (other.group3()[0] * self.group0()[2])),
                ((other.group1()[3] * self.group0()[2]) + (other.group2()[2] * self.group0()[3]) + (other.group3()[1] * self.group0()[0])),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2]) - (other.group3()[3] * self.group0()[3])),
            ]) + (Simd32x4::from(self[e2]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group1()[0] * self[e2]) + (other.group2()[2] * self.group0()[1]) + (other.group3()[3] * self.group0()[0])),
                ((other.group1()[1] * self[e2]) + (other.group2()[0] * self.group0()[2]) + (other.group3()[3] * self.group0()[1])),
                ((other.group1()[2] * self[e2]) + (other.group2()[1] * self.group0()[0]) + (other.group3()[3] * self.group0()[2])),
                (-(other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(self[e2]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))
                - (swizzle!(other.group2(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[0] * self[e2]) - (other.group1()[1] * self.group0()[2]) - (other.group2()[0] * self.group0()[3])),
                ((other.group0()[1] * self[e2]) - (other.group1()[2] * self.group0()[0]) - (other.group2()[1] * self.group0()[3])),
                ((other.group0()[2] * self[e2]) - (other.group1()[0] * self.group0()[1]) - (other.group2()[2] * self.group0()[3])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) + (other.group1()[3] * self.group0()[3])),
            ]) + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum321> for RoundPoint {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2       16        0
    fn geometric_anti_product(self, other: AntiDualNum321) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([0.0, 0.0, 0.0, (-(other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group0()[3]))]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0] * -1.0),
                (other.group0()[1] * self.group0()[1] * -1.0),
                (other.group0()[1] * self.group0()[2] * -1.0),
                ((other.group0()[0] * self[e2]) + (other.group0()[1] * self[e2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum4> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0        7        0
    //  no simd        0       19        0
    fn geometric_anti_product(self, other: AntiDualNum4) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self[e2]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self[e2] * -1.0)]),
            // e15, e25, e35, e1234
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[1] * self.group0()[3])]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self[e2]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum5> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        0        5        0
    //  no simd        0       14        0
    fn geometric_anti_product(self, other: AntiDualNum5) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group0()[3])]),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group0()[3])]),
            // e15, e25, e35, e1234
            (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]]) * self.group0()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self[e2]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
    }
}
impl GeometricAntiProduct<AntiFlatPoint> for RoundPoint {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        9       23        0
    fn geometric_anti_product(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[3]) + (other.group0()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group0()[3]) + (other.group0()[3] * self.group0()[2])),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
                (other.group0()[3] * self.group0()[3]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3] * -1.0),
                (other.group0()[1] * self.group0()[3] * -1.0),
                (other.group0()[2] * self.group0()[3] * -1.0),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self[e2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiFlector> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       29        0
    //    simd4        2        4        0
    // Totals...
    // yes simd       18       33        0
    //  no simd       24       45        0
    fn geometric_anti_product(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group1()[0] * self.group0()[3]),
                (other.group1()[1] * self.group0()[3]),
                (other.group1()[2] * self.group0()[3]),
                (-(other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])
                    + (other.group1()[3] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[3] * self.group0()[0]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[1] * self.group0()[3]) + (other.group0()[3] * self.group0()[1]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[3]) + (other.group0()[3] * self.group0()[2]) - (other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0])),
                (other.group1()[3] * self.group0()[3] * -1.0),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[2]) + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[1] * self.group0()[0]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(self[e2]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[3]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
    }
}
impl GeometricAntiProduct<AntiLine> for RoundPoint {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       23        0
    //    simd3        0        1        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       13       25        0
    //  no simd       16       30        0
    fn geometric_anti_product(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group0()[3]) * other.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other.group1()[0] * self.group0()[3]),
                (other.group1()[1] * self.group0()[3]),
                (other.group1()[2] * self.group0()[3]),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self[e2]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[1] * self[e2]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])),
                ((other.group0()[2] * self[e2]) - (other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) + (other.group1()[0] * self.group0()[3])),
                ((other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[1]) + (other.group1()[2] * self.group0()[3])),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<AntiMotor> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       20        0
    //    simd4        3        6        0
    // Totals...
    // yes simd       15       26        0
    //  no simd       24       44        0
    fn geometric_anti_product(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other.group1()[0] * self.group0()[3]),
                (other.group1()[1] * self.group0()[3]),
                (other.group1()[2] * self.group0()[3]),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) + (other.group1()[3] * self.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self[e2]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1]) + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[1] * self[e2]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0]) + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[2] * self[e2]) - (other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0]) + (other.group1()[3] * self.group0()[2])),
                (other.group0()[3] * self.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group1(), 0, 1, 2, 2) * swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other.group1()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self[e2]]) * swizzle!(other.group0(), 1, 2, 0, 3))),
        );
    }
}
impl GeometricAntiProduct<AntiPlane> for RoundPoint {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       10        0
    //    simd3        0        1        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        6       13        0
    //  no simd       12       21        0
    fn geometric_anti_product(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return CircleRotor::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
                (other.group0()[3] * self.group0()[3] * -1.0),
            ]),
            // e235, e315, e125, e12345
            (Simd32x4::from([0.0, 0.0, 0.0, (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]))])
                + (Simd32x4::from(other.group0()[3]) * self.group0())
                - (Simd32x4::from([self[e2], self[e2], self[e2], self.group0()[0]]) * swizzle!(other.group0(), 0, 1, 2, 0))),
        );
    }
}
impl GeometricAntiProduct<AntiQuadNum> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4       29        0
    fn geometric_anti_product(self, other: AntiQuadNum) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                ((other.group0()[0] * self[e2]) + (other.group0()[1] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other.group0()[2] * self.group0()[0] * -1.0),
                (other.group0()[2] * self.group0()[1] * -1.0),
                (other.group0()[2] * self.group0()[2] * -1.0),
                (-(other.group0()[0] * self[e2]) + (other.group0()[1] * self.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                (-(other.group0()[2] * self.group0()[3]) + (other.group0()[3] * self.group0()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[3] * self.group0()[0] * -1.0),
                (other.group0()[3] * self.group0()[1] * -1.0),
                (other.group0()[3] * self.group0()[2] * -1.0),
                ((other.group0()[2] * self[e2]) + (other.group0()[3] * self[e2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiScalar> for RoundPoint {
    type Output = RoundPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        5        0
    fn geometric_anti_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return RoundPoint::from_groups(/* e1, e2, e3, e4 */ (Simd32x4::from(other[e12345]) * self.group0()), /* e5 */ (other[e12345] * self[e2]));
    }
}
impl GeometricAntiProduct<AntiTripleNum> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2       10        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        2       13        0
    //  no simd        2       22        0
    fn geometric_anti_product(self, other: AntiTripleNum) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                ((other.group0()[0] * self[e2]) + (other.group0()[1] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (-(other.group0()[0] * self[e2]) + (other.group0()[1] * self.group0()[3]))]),
            // e15, e25, e35, e1234
            (Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group0()[2]]) * self.group0()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self[e2]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
    }
}
impl GeometricAntiProduct<Circle> for RoundPoint {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       28        0
    //    simd3        2        3        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       19       35        0
    //  no simd       35       53        0
    fn geometric_anti_product(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            ((Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0))),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self[e2]) + (other.group2()[0] * self.group0()[3]) + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[1] * self[e2]) + (other.group2()[1] * self.group0()[3]) + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[2] * self[e2]) + (other.group2()[2] * self.group0()[3]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]),
            // e235, e315, e125, e4
            (Simd32x4::from([
                ((other.group2()[1] * self.group0()[2]) * -1.0),
                ((other.group2()[2] * self.group0()[0]) * -1.0),
                ((other.group2()[0] * self.group0()[1]) * -1.0),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self[e2], self[e2], self[e2], self.group0()[3]]) * other.group1())),
            // e1, e2, e3, e5
            (Simd32x4::from([
                ((other.group0()[0] * self[e2]) + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[1] * self[e2]) + (other.group1()[0] * self.group0()[2])),
                ((other.group0()[2] * self[e2]) + (other.group1()[1] * self.group0()[0])),
                (-(other.group2()[2] * self.group0()[2]) - (other.group1()[3] * self[e2])),
            ]) - (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group2()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[1]]) * swizzle!(self.group0(), 2, 0, 1, 1))),
        );
    }
}
impl GeometricAntiProduct<CircleRotor> for RoundPoint {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       29        0
    //    simd3        2        3        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       21       37        0
    //  no simd       40       58        0
    fn geometric_anti_product(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            ((Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0))),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self[e2]) + (other.group1()[3] * self.group0()[0]) + (other.group2()[0] * self.group0()[3])),
                ((other.group0()[1] * self[e2]) + (other.group1()[3] * self.group0()[1]) + (other.group2()[1] * self.group0()[3])),
                ((other.group0()[2] * self[e2]) + (other.group1()[3] * self.group0()[2]) + (other.group2()[2] * self.group0()[3])),
                (-(other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]),
            // e235, e315, e125, e4
            (Simd32x4::from([
                ((other.group2()[1] * self.group0()[2]) * -1.0),
                ((other.group2()[2] * self.group0()[0]) * -1.0),
                ((other.group2()[0] * self.group0()[1]) * -1.0),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) + (other.group2()[3] * self.group0()[3])),
            ]) + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self[e2], self[e2], self[e2], self.group0()[3]]) * other.group1())),
            // e1, e2, e3, e5
            (Simd32x4::from([
                ((other.group1()[2] * self.group0()[1]) + (other.group2()[3] * self.group0()[0])),
                ((other.group1()[0] * self.group0()[2]) + (other.group2()[3] * self.group0()[1])),
                ((other.group1()[1] * self.group0()[0]) + (other.group2()[3] * self.group0()[2])),
                (-(other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self[e2]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self[e2]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                - (swizzle!(other.group2(), 0, 1, 2, 0) * swizzle!(self.group0(), 3, 3, 3, 0))),
        );
    }
}
impl GeometricAntiProduct<Dipole> for RoundPoint {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       21        0
    //    simd3        2        3        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       16       29        0
    //  no simd       35       50        0
    fn geometric_anti_product(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[0] * self[e2]) - (other.group1()[3] * self.group0()[0])),
                ((other.group0()[1] * self[e2]) - (other.group1()[3] * self.group0()[1])),
                ((other.group0()[2] * self[e2]) - (other.group1()[3] * self.group0()[2])),
                ((other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (other.group1()[0] * self[e2]),
                (other.group1()[1] * self[e2]),
                (other.group1()[2] * self[e2]),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group0()[0] * self[e2]) + (other.group2()[0] * self.group0()[3])),
                (-(other.group0()[1] * self[e2]) + (other.group2()[1] * self.group0()[3])),
                (-(other.group0()[2] * self[e2]) + (other.group2()[2] * self.group0()[3])),
                (-(other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self[e2]]) * swizzle!(other.group1(), 1, 2, 0, 3))),
        );
    }
}
impl GeometricAntiProduct<DipoleInversion> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       23       39        0
    //    simd4        9        9        0
    // Totals...
    // yes simd       32       48        0
    //  no simd       59       75        0
    fn geometric_anti_product(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(other.group0()[2] * self.group0()[1]) - (other.group2()[3] * self.group0()[0]) - (other.group3()[0] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group2()[3] * self.group0()[1]) - (other.group3()[1] * self.group0()[3])),
                (-(other.group0()[1] * self.group0()[0]) - (other.group2()[3] * self.group0()[2]) - (other.group3()[2] * self.group0()[3])),
                ((other.group2()[3] * self[e2]) + (other.group3()[2] * self.group0()[2]) + (other.group3()[3] * self.group0()[3])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[0] * self[e2]) - (other.group1()[3] * self.group0()[0]) - (other.group3()[2] * self.group0()[1])),
                ((other.group0()[1] * self[e2]) - (other.group1()[3] * self.group0()[1]) - (other.group3()[0] * self.group0()[2])),
                ((other.group0()[2] * self[e2]) - (other.group1()[3] * self.group0()[2]) - (other.group3()[1] * self.group0()[0])),
                ((other.group1()[2] * self.group0()[2]) - (other.group2()[3] * self[e2]) + (other.group3()[3] * self.group0()[3])),
            ]) + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[1]]) * swizzle!(self.group0(), 2, 0, 1, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group1()[0] * self[e2]) + (other.group3()[0] * self[e2])),
                ((other.group1()[1] * self[e2]) + (other.group3()[1] * self[e2])),
                ((other.group1()[2] * self[e2]) + (other.group3()[2] * self[e2])),
                (other.group0()[2] * self.group0()[2]),
            ]) - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group0()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group0()[0] * self[e2]) + (other.group2()[0] * self.group0()[3])),
                (-(other.group0()[1] * self[e2]) + (other.group2()[1] * self.group0()[3])),
                (-(other.group0()[2] * self[e2]) + (other.group2()[2] * self.group0()[3])),
                (-(other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self[e2]]) * swizzle!(other.group1(), 1, 2, 0, 3))),
        );
    }
}
impl GeometricAntiProduct<DualNum321> for RoundPoint {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2       10        0
    fn geometric_anti_product(self, other: DualNum321) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([0.0, 0.0, 0.0, ((other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group0()[3]))]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                (-(other.group0()[0] * self[e2]) + (other.group0()[1] * self[e2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<DualNum4> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        0        5        0
    //  no simd        0       14        0
    fn geometric_anti_product(self, other: DualNum4) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self[e2]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self[e2])]),
            // e235, e315, e125, e5
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[1] * self[e2])]),
            // e1, e2, e3, e4
            (Simd32x4::from(other.group0()[1]) * self.group0()),
        );
    }
}
impl GeometricAntiProduct<DualNum5> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        7        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        8        0
    //  no simd        0       11        0
    fn geometric_anti_product(self, other: DualNum5) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group0()[3])]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group0()[3] * -1.0)]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                (other.group0()[1] * self[e2]),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(other.group0()[1]) * self.group0()),
        );
    }
}
impl GeometricAntiProduct<FlatPoint> for RoundPoint {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        9       21        0
    fn geometric_anti_product(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[3]) - (other.group0()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group0()[3]) - (other.group0()[3] * self.group0()[2])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
                (other.group0()[3] * self.group0()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3]),
                (other.group0()[1] * self.group0()[3]),
                (other.group0()[2] * self.group0()[3]),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]) + (other.group0()[3] * self[e2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Flector> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       24       44        0
    fn geometric_anti_product(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group1()[0] * self.group0()[3] * -1.0),
                (other.group1()[1] * self.group0()[3] * -1.0),
                (other.group1()[2] * self.group0()[3] * -1.0),
                ((other.group1()[0] * self.group0()[0]) + (other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2]) + (other.group1()[3] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[3] * self.group0()[0]) + (other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1])),
                ((other.group0()[1] * self.group0()[3]) - (other.group0()[3] * self.group0()[1]) - (other.group1()[0] * self.group0()[2]) + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[3]) - (other.group0()[3] * self.group0()[2]) + (other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0])),
                (other.group1()[3] * self.group0()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (other.group1()[0] * self[e2]) + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self[e2]) + (other.group1()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (other.group1()[2] * self[e2]) + (other.group1()[3] * self.group0()[2])),
                (other.group0()[3] * self.group0()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3]),
                (other.group0()[1] * self.group0()[3]),
                (other.group0()[2] * self.group0()[3]),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]) + (other.group0()[3] * self[e2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Line> for RoundPoint {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       15        0
    //    simd3        0        1        0
    //    simd4        2        4        0
    // Totals...
    // yes simd       10       20        0
    //  no simd       16       34        0
    fn geometric_anti_product(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self.group0()[3]) * other.group0()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other.group1()[0] * self.group0()[3]),
                (other.group1()[1] * self.group0()[3]),
                (other.group1()[2] * self.group0()[3]),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                ((other.group0()[0] * self[e2]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[1] * self[e2]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])),
                ((other.group0()[2] * self[e2]) - (other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0])),
                0.0,
            ]),
            // e1, e2, e3, e5
            ((Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]])
                * swizzle!(self.group0(), 1, 2, 0, 2)
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group1()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))),
        );
    }
}
impl GeometricAntiProduct<Motor> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       28        0
    //    simd4        2        3        0
    // Totals...
    // yes simd       18       31        0
    //  no simd       24       40        0
    fn geometric_anti_product(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other.group1()[0] * self.group0()[3]),
                (other.group1()[1] * self.group0()[3]),
                (other.group1()[2] * self.group0()[3]),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group1()[3] * self.group0()[3])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group1()[2] * self.group0()[1]) + (other.group1()[3] * self.group0()[0])),
                ((other.group1()[0] * self.group0()[2]) + (other.group1()[3] * self.group0()[1])),
                ((other.group1()[1] * self.group0()[0]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self[e2]) * other.group0())
                - (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (other.group0()[3] * self.group0()[0])
                    - (other.group1()[0] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) + (other.group0()[3] * self.group0()[1]) - (other.group1()[1] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (other.group0()[3] * self.group0()[2])
                    - (other.group1()[2] * self.group0()[3])),
                (other.group0()[3] * self.group0()[3]),
            ]),
        );
    }
}
impl GeometricAntiProduct<MultiVector> for RoundPoint {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       39       62        0
    //    simd2        2        2        0
    //    simd3       15       18        0
    //    simd4       10       10        0
    // Totals...
    // yes simd       66       92        0
    //  no simd      128      160        0
    fn geometric_anti_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                ((other.group9()[0] * self.group0()[0]) + (other.group9()[1] * self.group0()[1]) + (other.group9()[2] * self.group0()[2])),
                (-(other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x2::from(self.group0()[3]) * Simd32x2::from([other.group9()[3], other[e1]]))
                + (Simd32x2::from(self[e2]) * Simd32x2::from([other[e45], other.group1()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group7()[0] * self[e2]) - (other.group8()[0] * self.group0()[3]) - (other.group6()[1] * self.group0()[2])),
                ((other.group7()[1] * self[e2]) - (other.group8()[1] * self.group0()[3]) - (other.group6()[2] * self.group0()[0])),
                ((other.group7()[2] * self[e2]) - (other.group8()[2] * self.group0()[3]) - (other.group6()[0] * self.group0()[1])),
                ((other.group7()[1] * self.group0()[1]) + (other.group7()[2] * self.group0()[2]) + (other.group6()[3] * self.group0()[3])),
            ]) + (Simd32x4::from(other.group0()[1]) * self.group0())
                + (Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group7()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e5
            ((other.group0()[1] * self[e2])
                - (other.group8()[0] * self.group0()[0])
                - (other.group8()[1] * self.group0()[1])
                - (other.group8()[2] * self.group0()[2])
                - (other.group6()[3] * self[e2])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group5()[0] * self[e2]) - (other.group3()[1] * self.group0()[2])),
                ((other.group5()[1] * self[e2]) - (other.group3()[2] * self.group0()[0])),
                ((other.group5()[2] * self[e2]) - (other.group3()[0] * self.group0()[1])),
                ((other.group5()[2] * self.group0()[2]) - (other[e45] * self[e2])),
            ]) + (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group5()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group9()[3], other.group9()[3], other.group9()[3], other.group5()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))
                + (Simd32x4::from([self[e2], self[e2], self[e2], self.group0()[3]]) * other.group9())),
            // e41, e42, e43
            (-(Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]])) + (Simd32x3::from(self.group0()[3]) * other.group5())
                - (Simd32x3::from(other[e45]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group4(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group4(), 1, 2, 0))),
            // e23, e31, e12
            (Simd32x3::from([
                ((other.group9()[1] * self.group0()[2]) - (other.group9()[2] * self.group0()[1])),
                (-(other.group9()[0] * self.group0()[2]) + (other.group9()[2] * self.group0()[0])),
                ((other.group9()[0] * self.group0()[1]) - (other.group9()[1] * self.group0()[0])),
            ]) - (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from(self[e2]) * other.group4())),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group8()[0] * self.group0()[3]) + (other.group1()[2] * self.group0()[1]) + (other.group6()[3] * self.group0()[0])),
                ((other.group8()[1] * self.group0()[3]) + (other.group1()[0] * self.group0()[2]) + (other.group6()[3] * self.group0()[1])),
                ((other.group8()[2] * self.group0()[3]) + (other.group1()[1] * self.group0()[0]) + (other.group6()[3] * self.group0()[2])),
                (-(other.group6()[1] * self.group0()[1]) - (other.group6()[2] * self.group0()[2]) - (self.group0()[3] * other[e1])),
            ]) + (Simd32x4::from(self[e2]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group1()[3]]))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group6()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e423, e431, e412
            (-(Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                - (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group7(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group7(), 1, 2, 0))),
            // e235, e315, e125
            ((Simd32x3::from(other[e1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from(self[e2]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self[e2]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                + (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group8(), 2, 0, 1))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group8(), 1, 2, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group4()[0] * self[e2]) + (other.group5()[1] * self.group0()[2])),
                (-(other.group4()[1] * self[e2]) + (other.group5()[2] * self.group0()[0])),
                (-(other.group4()[2] * self[e2]) + (other.group5()[0] * self.group0()[1])),
                ((other.group0()[0] * self[e2]) - (other.group3()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group3()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))
                - (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group3()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self[e2]]) * other.group3())),
            // e1234
            ((other.group0()[0] * self.group0()[3]) + (other.group4()[0] * self.group0()[0]) + (other.group4()[1] * self.group0()[1]) + (other.group4()[2] * self.group0()[2])
                - (other.group3()[3] * self.group0()[3])),
        );
    }
}
impl GeometricAntiProduct<Plane> for RoundPoint {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        9        0
    //    simd3        0        2        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        6       13        0
    //  no simd       12       23        0
    fn geometric_anti_product(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return AntiCircleRotor::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]) * Simd32x3::from(-1.0)),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
                (other.group0()[3] * self.group0()[3]),
            ]),
            // e15, e25, e35, scalar
            (Simd32x4::from([0.0, 0.0, 0.0, ((other.group0()[2] * self.group0()[2]) + (other.group0()[3] * self.group0()[3]))])
                + (Simd32x4::from([self[e2], self[e2], self[e2], self.group0()[0]]) * swizzle!(other.group0(), 0, 1, 2, 0))
                + (swizzle!(other.group0(), 3, 3, 3, 1) * swizzle!(self.group0(), 0, 1, 2, 1))),
        );
    }
}
impl GeometricAntiProduct<QuadNum> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4       23        0
    fn geometric_anti_product(self, other: QuadNum) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                ((other.group0()[0] * self[e2]) + (other.group0()[1] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other.group0()[2] * self.group0()[0]),
                (other.group0()[2] * self.group0()[1]),
                (other.group0()[2] * self.group0()[2]),
                ((other.group0()[0] * self[e2]) - (other.group0()[1] * self.group0()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                (-(other.group0()[2] * self[e2]) + (other.group0()[3] * self[e2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[3] * self.group0()[0]),
                (other.group0()[3] * self.group0()[1]),
                (other.group0()[3] * self.group0()[2]),
                ((other.group0()[2] * self.group0()[3]) + (other.group0()[3] * self.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<RoundPoint> for RoundPoint {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        3        0
    //    simd3        1        2        0
    //    simd4        3        4        0
    // Totals...
    // yes simd        6        9        0
    //  no simd       17       25        0
    fn geometric_anti_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return CircleRotor::from_groups(
            // e423, e431, e412
            (-(Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))),
            // e415, e425, e435, e321
            (-(Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other[e2]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self[e2]]) * swizzle!(other.group0(), 2, 0, 1, 3))),
            // e235, e315, e125, e12345
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]) + (other.group0()[3] * self[e2])),
            ]) + (Simd32x4::from(other[e2]) * self.group0())
                - (Simd32x4::from([self[e2], self[e2], self[e2], self.group0()[0]]) * swizzle!(other.group0(), 0, 1, 2, 0))),
        );
    }
}
impl GeometricAntiProduct<Scalar> for RoundPoint {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0        9        0
    fn geometric_anti_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other[scalar]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self[e2]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e1234
            (self.group0()[3] * other[scalar]),
        );
    }
}
impl GeometricAntiProduct<Sphere> for RoundPoint {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        7        0
    //    simd3        1        2        0
    //    simd4        3        3        0
    // Totals...
    // yes simd        6       12        0
    //  no simd       17       25        0
    fn geometric_anti_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return AntiCircleRotor::from_groups(
            // e41, e42, e43
            (-(Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from(other[e4315]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))),
            // e23, e31, e12, e45
            (-Simd32x4::from([
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[2] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self[e2] * other[e4315]),
            ]) + (swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))),
            // e15, e25, e35, scalar
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[3]) + (self[e2] * other[e4315])),
            ]) + (Simd32x4::from([self[e2], self[e2], self[e2], self.group0()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))
                + (swizzle!(self.group0(), 0, 1, 2, 0) * swizzle!(other.group0(), 3, 3, 3, 0))),
        );
    }
}
impl GeometricAntiProduct<TripleNum> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2       14        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        2       15        0
    //  no simd        2       18        0
    fn geometric_anti_product(self, other: TripleNum) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                ((other.group0()[0] * self[e2]) + (other.group0()[1] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, ((other.group0()[0] * self[e2]) - (other.group0()[1] * self.group0()[3]))]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                (other.group0()[2] * self[e2]),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(other.group0()[2]) * self.group0()),
        );
    }
}
impl GeometricAntiProduct<VersorEven> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       28        0
    //    simd4       12       14        0
    // Totals...
    // yes simd       28       42        0
    //  no simd       64       84        0
    fn geometric_anti_product(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[2]])
                * swizzle!(self.group0(), 3, 3, 3, 2)
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self[e2]]) * other.group3())
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group2()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group3()[3], other.group3()[1]]) * swizzle!(self.group0(), 1, 2, 2, 1))
                - (Simd32x4::from([other.group3()[3], other.group3()[3], other.group0()[1], other.group3()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[3] * other.group2()[0]) + (other.group0()[0] * self[e2])),
                ((self.group0()[1] * other.group1()[3]) + (self.group0()[3] * other.group2()[1]) + (other.group0()[1] * self[e2])),
                ((self.group0()[2] * other.group1()[3]) + (self.group0()[3] * other.group2()[2]) + (other.group0()[2] * self[e2])),
                (-(self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2]) - (self.group0()[3] * other.group2()[3])),
            ]) + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self[e2]]) * swizzle!(other.group3(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group2()[2])),
                ((self.group0()[1] * other.group2()[3]) + (self.group0()[2] * other.group2()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[2] * other.group2()[3])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])),
            ]) + (Simd32x4::from(self[e2]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                - (Simd32x4::from(self[e2]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))
                - (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group2(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(self.group0()[2] * other.group1()[1]) - (self.group0()[3] * other.group2()[0])),
                (-(self.group0()[0] * other.group1()[2]) - (self.group0()[3] * other.group2()[1])),
                (-(self.group0()[1] * other.group1()[0]) - (self.group0()[3] * other.group2()[2])),
                ((self.group0()[3] * other.group0()[3]) + (self.group0()[3] * other.group1()[3])),
            ]) + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group0()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 2, 1))
                + (Simd32x4::from([self[e2], self[e2], self[e2], self.group0()[2]]) * swizzle!(other.group0(), 0, 1, 2, 2))),
        );
    }
}
impl GeometricAntiProduct<VersorOdd> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       40        0
    //    simd4       10       10        0
    // Totals...
    // yes simd       34       50        0
    //  no simd       64       80        0
    fn geometric_anti_product(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group0()[2]) - (self.group0()[3] * other.group3()[0])),
                (-(self.group0()[1] * other.group2()[3]) - (self.group0()[2] * other.group0()[0]) - (self.group0()[3] * other.group3()[1])),
                (-(self.group0()[0] * other.group0()[1]) - (self.group0()[2] * other.group2()[3]) - (self.group0()[3] * other.group3()[2])),
                ((self.group0()[2] * other.group3()[2]) + (self.group0()[3] * other.group3()[3]) + (other.group2()[3] * self[e2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group3()[2]) + (other.group0()[0] * self[e2])),
                (-(self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group3()[0]) + (other.group0()[1] * self[e2])),
                (-(self.group0()[0] * other.group3()[1]) - (self.group0()[2] * other.group1()[3]) + (other.group0()[2] * self[e2])),
                ((self.group0()[2] * other.group1()[2]) + (self.group0()[3] * other.group3()[3]) - (other.group2()[3] * self[e2])),
            ]) + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group1()[0] * self[e2]) + (other.group3()[0] * self[e2])),
                ((other.group1()[1] * self[e2]) + (other.group3()[1] * self[e2])),
                ((other.group1()[2] * self[e2]) + (other.group3()[2] * self[e2])),
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])),
            ]) - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group3()[3], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 2, 1))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[3] * other.group2()[0]) - (other.group0()[0] * self[e2])),
                ((self.group0()[3] * other.group2()[1]) - (other.group0()[1] * self[e2])),
                ((self.group0()[3] * other.group2()[2]) - (other.group0()[2] * self[e2])),
                (-(self.group0()[2] * other.group2()[2]) + (other.group0()[3] * self[e2])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self[e2]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group2()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group2()[1]]) * swizzle!(self.group0(), 1, 2, 2, 1))),
        );
    }
}
impl GeometricAntiProduct<VersorRoundPoint> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       10        0
    //    simd4        3        5        0
    // Totals...
    // yes simd        8       15        0
    //  no simd       17       30        0
    fn geometric_anti_product(self, other: VersorRoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]) + (other.group0()[3] * self[e2])),
            ]) + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]))
                - (swizzle!(self.group0(), 0, 1, 2, 0) * swizzle!(other.group0(), 3, 3, 3, 0))),
            // e415, e425, e435, e321
            ((Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self[e2]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 3))),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((other.group1()[0] * self.group0()[0]) - (other.group0()[0] * self[e2])),
                ((other.group1()[0] * self.group0()[1]) - (other.group0()[1] * self[e2])),
                ((other.group1()[0] * self.group0()[2]) - (other.group0()[2] * self[e2])),
                (other.group1()[1] * self[e2]),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(other.group1()[1]) * self.group0()),
        );
    }
}
impl GeometricAntiProduct<VersorSphere> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       22        0
    //    simd4        1        3        0
    // Totals...
    // yes simd       11       25        0
    //  no simd       14       34        0
    fn geometric_anti_product(self, other: VersorSphere) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(other.group1()[0] * self.group0()[0]) - (self.group0()[3] * other.group0()[0])),
                (-(other.group1()[0] * self.group0()[1]) - (self.group0()[3] * other.group0()[1])),
                (-(other.group1()[0] * self.group0()[2]) - (self.group0()[3] * other.group0()[2])),
                ((other.group1()[0] * self[e2])
                    + (self.group0()[0] * other.group0()[0])
                    + (self.group0()[1] * other.group0()[1])
                    + (self.group0()[2] * other.group0()[2])
                    + (self.group0()[3] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            (-Simd32x4::from([
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[2] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (other.group1()[0] * self[e2]),
            ]) + (swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (other.group0()[0] * self[e2])),
                ((self.group0()[1] * other.group0()[3]) + (other.group0()[1] * self[e2])),
                ((self.group0()[2] * other.group0()[3]) + (other.group0()[2] * self[e2])),
                (other.group1()[1] * self.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other.group1()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self[e2]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
    }
}
impl InfixGeometricAntiProduct for Scalar {}
impl GeometricAntiProduct<AntiCircleRotor> for Scalar {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        2        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0       22        0
    fn geometric_anti_product(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return CircleRotor::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[scalar]) * other.group0() * Simd32x3::from(-1.0)),
            // e415, e425, e435, e321
            (Simd32x4::from(self[scalar]) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e235, e315, e125, e12345
            (Simd32x4::from(self[scalar]) * other.group2() * Simd32x4::from(-1.0)),
        );
    }
}
impl GeometricAntiProduct<AntiDipoleInversion> for Scalar {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        1        0
    //    simd4        0        5        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0       23        0
    fn geometric_anti_product(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[scalar]) * other.group0()),
            // e23, e31, e12, e45
            (Simd32x4::from(self[scalar]) * other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e15, e25, e35, e1234
            (Simd32x4::from(self[scalar]) * other.group2()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[scalar]) * other.group3() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum321> for Scalar {
    type Output = DualNum321;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        2        0
    // no simd        0        4        0
    fn geometric_anti_product(self, other: AntiDualNum321) -> Self::Output {
        use crate::elements::*;
        return DualNum321::from_groups(/* e321, e12345 */ (Simd32x2::from(self[scalar]) * other.group0() * Simd32x2::from([1.0, -1.0])));
    }
}
impl GeometricAntiProduct<AntiDualNum4> for Scalar {
    type Output = DualNum4;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        2        0
    // no simd        0        4        0
    fn geometric_anti_product(self, other: AntiDualNum4) -> Self::Output {
        use crate::elements::*;
        return DualNum4::from_groups(/* e4, e12345 */ (Simd32x2::from(self[scalar]) * other.group0() * Simd32x2::from(-1.0)));
    }
}
impl GeometricAntiProduct<AntiDualNum5> for Scalar {
    type Output = DualNum5;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        2        0
    // no simd        0        4        0
    fn geometric_anti_product(self, other: AntiDualNum5) -> Self::Output {
        use crate::elements::*;
        return DualNum5::from_groups(/* e5, e12345 */ (Simd32x2::from(self[scalar]) * other.group0() * Simd32x2::from(-1.0)));
    }
}
impl GeometricAntiProduct<AntiFlatPoint> for Scalar {
    type Output = FlatPoint;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn geometric_anti_product(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return FlatPoint::from_groups(/* e15, e25, e35, e45 */ (Simd32x4::from(self[scalar]) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])));
    }
}
impl GeometricAntiProduct<AntiFlector> for Scalar {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn geometric_anti_product(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from(self[scalar]) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[scalar]) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
    }
}
impl GeometricAntiProduct<AntiLine> for Scalar {
    type Output = Line;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        4        0
    // no simd        0       12        0
    fn geometric_anti_product(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return Line::from_groups(
            // e415, e425, e435
            (Simd32x3::from(self[scalar]) * other.group0() * Simd32x3::from(-1.0)),
            // e235, e315, e125
            (Simd32x3::from(self[scalar]) * other.group1() * Simd32x3::from(-1.0)),
        );
    }
}
impl GeometricAntiProduct<AntiMotor> for Scalar {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn geometric_anti_product(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(self[scalar]) * other.group0() * Simd32x4::from(-1.0)),
            // e235, e315, e125, e5
            (Simd32x4::from(self[scalar]) * other.group1() * Simd32x4::from(-1.0)),
        );
    }
}
impl GeometricAntiProduct<AntiPlane> for Scalar {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn geometric_anti_product(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[scalar]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
    }
}
impl GeometricAntiProduct<AntiQuadNum> for Scalar {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn geometric_anti_product(self, other: AntiQuadNum) -> Self::Output {
        use crate::elements::*;
        return QuadNum::from_groups(
            // e4, e5, e321, e12345
            (Simd32x4::from(self[scalar]) * other.group0() * Simd32x4::from([-1.0, -1.0, 1.0, -1.0])),
        );
    }
}
impl GeometricAntiProduct<AntiScalar> for Scalar {
    type Output = Scalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn geometric_anti_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (other[e12345] * self[scalar]));
    }
}
impl GeometricAntiProduct<AntiTripleNum> for Scalar {
    type Output = TripleNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn geometric_anti_product(self, other: AntiTripleNum) -> Self::Output {
        use crate::elements::*;
        return TripleNum::from_groups(/* e4, e5, e12345 */ (Simd32x3::from(self[scalar]) * other.group0() * Simd32x3::from(-1.0)));
    }
}
impl GeometricAntiProduct<Circle> for Scalar {
    type Output = Dipole;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        2        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0       14        0
    fn geometric_anti_product(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return Dipole::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[scalar]) * other.group0()),
            // e23, e31, e12, e45
            (Simd32x4::from(self[scalar]) * other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e15, e25, e35
            (Simd32x3::from(self[scalar]) * other.group2()),
        );
    }
}
impl GeometricAntiProduct<CircleRotor> for Scalar {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        1        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0       15        0
    fn geometric_anti_product(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return AntiCircleRotor::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[scalar]) * other.group0()),
            // e23, e31, e12, e45
            (Simd32x4::from(self[scalar]) * other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e15, e25, e35, scalar
            (Simd32x4::from(self[scalar]) * other.group2()),
        );
    }
}
impl GeometricAntiProduct<Dipole> for Scalar {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        4        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0       20        0
    fn geometric_anti_product(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return Circle::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[scalar]) * other.group0() * Simd32x3::from(-1.0)),
            // e415, e425, e435, e321
            (Simd32x4::from(self[scalar]) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e235, e315, e125
            (Simd32x3::from(self[scalar]) * other.group2() * Simd32x3::from(-1.0)),
        );
    }
}
impl GeometricAntiProduct<DipoleInversion> for Scalar {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        2        0
    //    simd4        0        6        0
    // Totals...
    // yes simd        0        8        0
    //  no simd        0       30        0
    fn geometric_anti_product(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[scalar]) * other.group0() * Simd32x3::from(-1.0)),
            // e415, e425, e435, e321
            (Simd32x4::from(self[scalar]) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e235, e315, e125, e4
            (Simd32x4::from(self[scalar]) * other.group2() * Simd32x4::from(-1.0)),
            // e1, e2, e3, e5
            (Simd32x4::from(self[scalar]) * other.group3() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
    }
}
impl GeometricAntiProduct<DualNum321> for Scalar {
    type Output = AntiDualNum321;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        2        0
    // no simd        0        4        0
    fn geometric_anti_product(self, other: DualNum321) -> Self::Output {
        use crate::elements::*;
        return AntiDualNum321::from_groups(/* e45, scalar */ (Simd32x2::from(self[scalar]) * other.group0() * Simd32x2::from([-1.0, 1.0])));
    }
}
impl GeometricAntiProduct<DualNum4> for Scalar {
    type Output = AntiDualNum4;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        1        0
    // no simd        0        2        0
    fn geometric_anti_product(self, other: DualNum4) -> Self::Output {
        use crate::elements::*;
        return AntiDualNum4::from_groups(/* e1234, scalar */ (Simd32x2::from(self[scalar]) * other.group0()));
    }
}
impl GeometricAntiProduct<DualNum5> for Scalar {
    type Output = AntiDualNum5;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        1        0
    // no simd        0        2        0
    fn geometric_anti_product(self, other: DualNum5) -> Self::Output {
        use crate::elements::*;
        return AntiDualNum5::from_groups(/* e3215, scalar */ (Simd32x2::from(self[scalar]) * other.group0()));
    }
}
impl GeometricAntiProduct<FlatPoint> for Scalar {
    type Output = AntiFlatPoint;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn geometric_anti_product(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiFlatPoint::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from(self[scalar]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
    }
}
impl GeometricAntiProduct<Flector> for Scalar {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn geometric_anti_product(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from(self[scalar]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e1, e2, e3, e5
            (Simd32x4::from(self[scalar]) * other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
    }
}
impl GeometricAntiProduct<Line> for Scalar {
    type Output = AntiLine;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        2        0
    // no simd        0        6        0
    fn geometric_anti_product(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return AntiLine::from_groups(
            // e23, e31, e12
            (Simd32x3::from(self[scalar]) * other.group0()),
            // e15, e25, e35
            (Simd32x3::from(self[scalar]) * other.group1()),
        );
    }
}
impl GeometricAntiProduct<Motor> for Scalar {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn geometric_anti_product(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from(self[scalar]) * other.group0()),
            // e15, e25, e35, e3215
            (Simd32x4::from(self[scalar]) * other.group1()),
        );
    }
}
impl GeometricAntiProduct<MultiVector> for Scalar {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd2        0        2        0
    //    simd3        0        6        0
    //    simd4        0        8        0
    // Totals...
    // yes simd        0       19        0
    //  no simd        0       57        0
    fn geometric_anti_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from(self[scalar]) * swizzle!(other.group0(), 1, 0) * Simd32x2::from([1.0, -1.0])),
            // e1, e2, e3, e4
            (Simd32x4::from(self[scalar]) * Simd32x4::from([other.group9()[0], other.group9()[1], other.group9()[2], other[e45]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e5
            (other.group9()[3] * self[scalar] * -1.0),
            // e15, e25, e35, e45
            (Simd32x4::from(self[scalar]) * Simd32x4::from([other.group8()[0], other.group8()[1], other.group8()[2], other.group6()[3]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e41, e42, e43
            (Simd32x3::from(self[scalar]) * other.group7()),
            // e23, e31, e12
            (Simd32x3::from(self[scalar]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]])),
            // e415, e425, e435, e321
            (Simd32x4::from(self[scalar]) * Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other.group3()[3]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e423, e431, e412
            (Simd32x3::from(self[scalar]) * other.group4() * Simd32x3::from(-1.0)),
            // e235, e315, e125
            (Simd32x3::from(self[scalar]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]) * Simd32x3::from(-1.0)),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[scalar]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other[e1]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e1234
            (other.group1()[3] * self[scalar]),
        );
    }
}
impl GeometricAntiProduct<Plane> for Scalar {
    type Output = AntiPlane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn geometric_anti_product(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ (Simd32x4::from(self[scalar]) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])));
    }
}
impl GeometricAntiProduct<QuadNum> for Scalar {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn geometric_anti_product(self, other: QuadNum) -> Self::Output {
        use crate::elements::*;
        return AntiQuadNum::from_groups(
            // e1234, e3215, e45, scalar
            (Simd32x4::from(self[scalar]) * other.group0() * Simd32x4::from([1.0, 1.0, -1.0, 1.0])),
        );
    }
}
impl GeometricAntiProduct<RoundPoint> for Scalar {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0        9        0
    fn geometric_anti_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[scalar]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other[e2]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e1234
            (other.group0()[3] * self[scalar]),
        );
    }
}
impl GeometricAntiProduct<Scalar> for Scalar {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn geometric_anti_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (other[scalar] * self[scalar] * -1.0));
    }
}
impl GeometricAntiProduct<Sphere> for Scalar {
    type Output = RoundPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0       10        0
    fn geometric_anti_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return RoundPoint::from_groups(
            // e1, e2, e3, e4
            (Simd32x4::from(self[scalar]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other[e4315]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e5
            (other.group0()[3] * self[scalar] * -1.0),
        );
    }
}
impl GeometricAntiProduct<TripleNum> for Scalar {
    type Output = AntiTripleNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn geometric_anti_product(self, other: TripleNum) -> Self::Output {
        use crate::elements::*;
        return AntiTripleNum::from_groups(/* e1234, e3215, scalar */ (Simd32x3::from(self[scalar]) * other.group0()));
    }
}
impl GeometricAntiProduct<VersorEven> for Scalar {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        6        0
    // no simd        0       24        0
    fn geometric_anti_product(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self[scalar]) * other.group0()),
            // e23, e31, e12, e45
            (Simd32x4::from(self[scalar]) * other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e15, e25, e35, e1234
            (Simd32x4::from(self[scalar]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]])),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[scalar]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[3]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
    }
}
impl GeometricAntiProduct<VersorOdd> for Scalar {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        8        0
    // no simd        0       32        0
    fn geometric_anti_product(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self[scalar]) * other.group0() * Simd32x4::from(-1.0)),
            // e415, e425, e435, e321
            (Simd32x4::from(self[scalar]) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e235, e315, e125, e5
            (Simd32x4::from(self[scalar]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]) * Simd32x4::from(-1.0)),
            // e1, e2, e3, e4
            (Simd32x4::from(self[scalar]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[3]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
    }
}
impl GeometricAntiProduct<VersorRoundPoint> for Scalar {
    type Output = VersorSphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd2        0        1        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0       10        0
    fn geometric_anti_product(self, other: VersorRoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorSphere::from_groups(
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[scalar]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e1234, scalar
            (Simd32x2::from(self[scalar]) * Simd32x2::from([other.group0()[3], other.group1()[1]])),
        );
    }
}
impl GeometricAntiProduct<VersorSphere> for Scalar {
    type Output = VersorRoundPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd2        0        2        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0       12        0
    fn geometric_anti_product(self, other: VersorSphere) -> Self::Output {
        use crate::elements::*;
        return VersorRoundPoint::from_groups(
            // e1, e2, e3, e4
            (Simd32x4::from(self[scalar]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e5, e12345
            (Simd32x2::from(self[scalar]) * Simd32x2::from([other.group0()[3], other.group1()[1]]) * Simd32x2::from(-1.0)),
        );
    }
}
impl InfixGeometricAntiProduct for Sphere {}
impl GeometricAntiProduct<AntiCircleRotor> for Sphere {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       25        0
    //    simd3        2        3        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       18       34        0
    //  no simd       40       58        0
    fn geometric_anti_product(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (-(Simd32x3::from(self[e4315]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0))),
            // e415, e425, e435, e321
            (-Simd32x4::from([
                (other.group2()[0] * self[e4315]),
                (other.group2()[1] * self[e4315]),
                (other.group2()[2] * self[e4315]),
                (other.group1()[2] * self.group0()[2]),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e235, e315, e125, e4
            (Simd32x4::from([
                ((other.group1()[0] * self.group0()[3]) * -1.0),
                ((other.group1()[1] * self.group0()[3]) * -1.0),
                ((other.group1()[2] * self.group0()[3]) * -1.0),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) + (other.group1()[3] * self[e4315])),
            ]) + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self[e4315]]) * swizzle!(other.group2(), 1, 2, 0, 3))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                ((other.group1()[2] * self.group0()[1]) + (other.group2()[0] * self[e4315]) + (other.group2()[3] * self.group0()[0])),
                ((other.group1()[0] * self.group0()[2]) + (other.group2()[1] * self[e4315]) + (other.group2()[3] * self.group0()[1])),
                ((other.group1()[1] * self.group0()[0]) + (other.group2()[2] * self[e4315]) + (other.group2()[3] * self.group0()[2])),
                (-(other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2]) - (other.group2()[3] * self.group0()[3])),
            ]) - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
        );
    }
}
impl GeometricAntiProduct<AntiDipoleInversion> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       11        0
    //    simd4       14       18        0
    // Totals...
    // yes simd       18       29        0
    //  no simd       60       83        0
    fn geometric_anti_product(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[2]])
                * swizzle!(self.group0(), 2, 0, 1, 2)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from(self[e4315]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group3()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))
                + (Simd32x4::from([self[e4315], self[e4315], self[e4315], self.group0()[1]]) * swizzle!(other.group3(), 0, 1, 2, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group3()[1] * self.group0()[2])),
                ((other.group0()[1] * self.group0()[3]) + (other.group3()[2] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[3]) + (other.group3()[0] * self.group0()[1])),
                (-(other.group1()[2] * self.group0()[2]) - (other.group2()[3] * self.group0()[3])),
            ]) + (Simd32x4::from(self[e4315]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))
                - (swizzle!(other.group1(), 3, 3, 3, 0) * swizzle!(self.group0(), 0, 1, 2, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (other.group2()[1] * self.group0()[2]),
                (other.group2()[2] * self.group0()[0]),
                (other.group2()[0] * self.group0()[1]),
                0.0,
            ]) - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group0()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group0()[2]]) * swizzle!(self.group0(), 0, 1, 2, 2))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self[e4315]]) * other.group1())),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[2]])
                * swizzle!(self.group0(), 2, 0, 1, 2)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self[e4315], self[e4315], self[e4315], self.group0()[1]]) * swizzle!(other.group2(), 0, 1, 2, 1))),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum321> for Sphere {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2       13        0
    fn geometric_anti_product(self, other: AntiDualNum321) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([0.0, 0.0, 0.0, ((other.group0()[0] * self[e4315]) - (other.group0()[1] * self[e4315]))]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                (-(other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum4> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        4        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0        8        0
    //  no simd        0       20        0
    fn geometric_anti_product(self, other: AntiDualNum4) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(other.group0()[0]) * self.group0() * Simd32x4::from(-1.0)),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group0()[3] * -1.0)]),
            // e235, e315, e125, e5
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[1] * self.group0()[3] * -1.0)]),
            // e1, e2, e3, e4
            (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self[e4315]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum5> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0        7        0
    //  no simd        0       19        0
    fn geometric_anti_product(self, other: AntiDualNum5) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self[e4315] * -1.0)]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self[e4315])]),
            // e235, e315, e125, e5
            (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e1, e2, e3, e4
            (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self[e4315]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
    }
}
impl GeometricAntiProduct<AntiFlatPoint> for Sphere {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        9       20        0
    fn geometric_anti_product(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self[e4315]) - (other.group0()[3] * self.group0()[0])),
                ((other.group0()[1] * self[e4315]) - (other.group0()[3] * self.group0()[1])),
                ((other.group0()[2] * self[e4315]) - (other.group0()[3] * self.group0()[2])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
                (other.group0()[3] * self[e4315]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self[e4315]),
                (other.group0()[1] * self[e4315]),
                (other.group0()[2] * self[e4315]),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiFlector> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       24       40        0
    fn geometric_anti_product(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group1()[0] * self[e4315]),
                (other.group1()[1] * self[e4315]),
                (other.group1()[2] * self[e4315]),
                ((other.group1()[0] * self.group0()[0]) + (other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2]) + (other.group1()[3] * self[e4315])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self[e4315]) - (other.group0()[3] * self.group0()[0]) + (other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1])),
                ((other.group0()[1] * self[e4315]) - (other.group0()[3] * self.group0()[1]) - (other.group1()[0] * self.group0()[2]) + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[2] * self[e4315]) - (other.group0()[3] * self.group0()[2]) + (other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0])),
                (other.group1()[3] * self[e4315]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) - (other.group1()[0] * self.group0()[3]) - (other.group1()[3] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[3])
                    - (other.group1()[3] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) - (other.group1()[2] * self.group0()[3]) - (other.group1()[3] * self.group0()[2])),
                (other.group0()[3] * self[e4315]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self[e4315]),
                (other.group0()[1] * self[e4315]),
                (other.group0()[2] * self[e4315]),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiLine> for Sphere {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       26        0
    //    simd3        0        2        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       13       29        0
    //  no simd       16       36        0
    fn geometric_anti_product(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[e4315]) * other.group0() * Simd32x3::from(-1.0)),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other.group1()[0] * self[e4315] * -1.0),
                (other.group1()[1] * self[e4315] * -1.0),
                (other.group1()[2] * self[e4315] * -1.0),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1])),
                (-(other.group0()[1] * self.group0()[3]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[2] * self.group0()[3]) - (other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0])),
                0.0,
            ]),
            // e1, e2, e3, e5
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) + (other.group1()[0] * self[e4315])),
                ((other.group0()[0] * self.group0()[2]) + (other.group1()[1] * self[e4315])),
                ((other.group0()[1] * self.group0()[0]) + (other.group1()[2] * self[e4315])),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
        );
    }
}
impl GeometricAntiProduct<AntiMotor> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       32        0
    //    simd4        2        4        0
    // Totals...
    // yes simd       18       36        0
    //  no simd       24       48        0
    fn geometric_anti_product(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self[e4315]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]) * Simd32x4::from(-1.0)),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other.group1()[0] * self[e4315] * -1.0),
                (other.group1()[1] * self[e4315] * -1.0),
                (other.group1()[2] * self[e4315] * -1.0),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]) + (other.group1()[3] * self[e4315])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group1()[2] * self.group0()[1]) + (other.group1()[3] * self.group0()[0])),
                ((other.group1()[0] * self.group0()[2]) + (other.group1()[3] * self.group0()[1])),
                ((other.group1()[1] * self.group0()[0]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(self.group0()[3]) * other.group0())
                - (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (other.group0()[3] * self.group0()[0]) + (other.group1()[0] * self[e4315])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) + (other.group0()[3] * self.group0()[1]) + (other.group1()[1] * self[e4315])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (other.group0()[3] * self.group0()[2]) + (other.group1()[2] * self[e4315])),
                (other.group0()[3] * self[e4315] * -1.0),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiPlane> for Sphere {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       17        0
    //    simd3        0        1        0
    // Totals...
    // yes simd        9       18        0
    //  no simd        9       20        0
    fn geometric_anti_product(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return AntiCircleRotor::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[e4315]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
                (other.group0()[3] * self[e4315]),
            ]),
            // e15, e25, e35, scalar
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group0()[3] * self.group0()[0])),
                (-(other.group0()[1] * self.group0()[3]) - (other.group0()[3] * self.group0()[1])),
                (-(other.group0()[2] * self.group0()[3]) - (other.group0()[3] * self.group0()[2])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) + (other.group0()[3] * self[e4315])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiQuadNum> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4       26        0
    fn geometric_anti_product(self, other: AntiQuadNum) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                (-(other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self[e4315])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other.group0()[2] * self.group0()[0] * -1.0),
                (other.group0()[2] * self.group0()[1] * -1.0),
                (other.group0()[2] * self.group0()[2] * -1.0),
                (-(other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self[e4315])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                (-(other.group0()[2] * self.group0()[3]) - (other.group0()[3] * self.group0()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[3] * self.group0()[0]),
                (other.group0()[3] * self.group0()[1]),
                (other.group0()[3] * self.group0()[2]),
                ((other.group0()[2] * self[e4315]) - (other.group0()[3] * self[e4315])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiScalar> for Sphere {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        5        0
    fn geometric_anti_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other[e12345]) * self.group0()),
            // e1234
            (other[e12345] * self[e4315]),
        );
    }
}
impl GeometricAntiProduct<AntiTripleNum> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2       10        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        2       14        0
    //  no simd        2       26        0
    fn geometric_anti_product(self, other: AntiTripleNum) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                (-(other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self[e4315])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (-(other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self[e4315]))]),
            // e235, e315, e125, e5
            (Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group0()[2]]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e1, e2, e3, e4
            (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self[e4315]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
    }
}
impl GeometricAntiProduct<Circle> for Sphere {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       21        0
    //    simd3        2        3        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       16       29        0
    //  no simd       35       50        0
    fn geometric_anti_product(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from(self[e4315]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group2()[0] * self[e4315])),
                ((other.group0()[1] * self.group0()[3]) + (other.group2()[1] * self[e4315])),
                ((other.group0()[2] * self.group0()[3]) + (other.group2()[2] * self[e4315])),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) - (swizzle!(other.group1(), 3, 3, 3, 0) * swizzle!(self.group0(), 0, 1, 2, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (other.group2()[1] * self.group0()[2]),
                (other.group2()[2] * self.group0()[0]),
                (other.group2()[0] * self.group0()[1]),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self[e4315]]) * other.group1())),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group2()[0] * self[e4315]) - (other.group1()[1] * self.group0()[2])),
                ((other.group2()[1] * self[e4315]) - (other.group1()[2] * self.group0()[0])),
                ((other.group2()[2] * self[e4315]) - (other.group1()[0] * self.group0()[1])),
                ((other.group2()[1] * self.group0()[1]) + (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<CircleRotor> for Sphere {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       10        0
    //    simd3        2        3        0
    //    simd4        8       10        0
    // Totals...
    // yes simd       15       23        0
    //  no simd       43       59        0
    fn geometric_anti_product(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from(self[e4315]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group2()[0] * self[e4315])),
                ((other.group0()[1] * self.group0()[3]) + (other.group2()[1] * self[e4315])),
                ((other.group0()[2] * self.group0()[3]) + (other.group2()[2] * self[e4315])),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) - (swizzle!(other.group1(), 3, 3, 3, 0) * swizzle!(self.group0(), 0, 1, 2, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([0.0, 0.0, 0.0, (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]))])
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self[e4315]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self[e4315]]) * other.group1())),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[3]])
                * swizzle!(self.group0(), 2, 0, 1, 3)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self[e4315], self[e4315], self[e4315], self.group0()[1]]) * swizzle!(other.group2(), 0, 1, 2, 1))
                + (swizzle!(other.group2(), 3, 3, 3, 2) * swizzle!(self.group0(), 0, 1, 2, 2))),
        );
    }
}
impl GeometricAntiProduct<Dipole> for Sphere {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       21        0
    //    simd3        2        3        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       16       29        0
    //  no simd       35       50        0
    fn geometric_anti_product(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (-(Simd32x3::from(self[e4315]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0))),
            // e415, e425, e435, e321
            (-Simd32x4::from([
                (other.group2()[0] * self[e4315]),
                (other.group2()[1] * self[e4315]),
                (other.group2()[2] * self[e4315]),
                (other.group1()[2] * self.group0()[2]),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e235, e315, e125, e4
            (Simd32x4::from([
                (-(other.group2()[1] * self.group0()[2]) - (other.group1()[0] * self.group0()[3])),
                (-(other.group2()[2] * self.group0()[0]) - (other.group1()[1] * self.group0()[3])),
                (-(other.group2()[0] * self.group0()[1]) - (other.group1()[2] * self.group0()[3])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) + (other.group1()[3] * self[e4315])),
            ]) + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                ((other.group2()[0] * self[e4315]) + (other.group1()[2] * self.group0()[1])),
                ((other.group2()[1] * self[e4315]) + (other.group1()[0] * self.group0()[2])),
                ((other.group2()[2] * self[e4315]) + (other.group1()[1] * self.group0()[0])),
                (-(other.group2()[2] * self.group0()[2]) - (other.group1()[3] * self.group0()[3])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[1]]) * swizzle!(self.group0(), 2, 0, 1, 1))),
        );
    }
}
impl GeometricAntiProduct<DipoleInversion> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       16        0
    //    simd4       13       16        0
    // Totals...
    // yes simd       20       32        0
    //  no simd       59       80        0
    fn geometric_anti_product(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group3()[2]])
                * swizzle!(self.group0(), 0, 1, 2, 2)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                - (Simd32x4::from(self[e4315]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([self[e4315], self[e4315], self[e4315], self.group0()[1]]) * swizzle!(other.group3(), 0, 1, 2, 1))),
            // e415, e425, e435, e321
            (-(Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[2]]) * swizzle!(self.group0(), 1, 2, 0, 2))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self[e4315]]) * swizzle!(other.group3(), 1, 2, 0, 3))
                - (Simd32x4::from([self[e4315], self[e4315], self[e4315], self.group0()[3]]) * other.group2())
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group2()[2] * self.group0()[1]) + (other.group3()[3] * self.group0()[0])),
                ((other.group2()[0] * self.group0()[2]) + (other.group3()[3] * self.group0()[1])),
                ((other.group2()[1] * self.group0()[0]) + (other.group3()[3] * self.group0()[2])),
                ((other.group2()[2] * self.group0()[2]) * -1.0),
            ]) - (Simd32x4::from(self.group0()[3]) * other.group1())
                - (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (swizzle!(other.group2(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group1()[1] * self.group0()[2])),
                (-(other.group0()[1] * self.group0()[3]) - (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[2] * self.group0()[3]) - (other.group1()[0] * self.group0()[1])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self[e4315]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<DualNum321> for Sphere {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2       13        0
    fn geometric_anti_product(self, other: DualNum321) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([0.0, 0.0, 0.0, ((other.group0()[0] * self[e4315]) + (other.group0()[1] * self[e4315]))]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                (-(other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<DualNum4> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        5        0
    //  no simd        0       11        0
    fn geometric_anti_product(self, other: DualNum4) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(other.group0()[0]) * self.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group0()[3] * -1.0)]),
            // e15, e25, e35, e1234
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[1] * self[e4315])]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other.group0()[1]) * self.group0()),
        );
    }
}
impl GeometricAntiProduct<DualNum5> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        6        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        8        0
    //  no simd        0       14        0
    fn geometric_anti_product(self, other: DualNum5) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self[e4315])]),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self[e4315])]),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                (other.group0()[1] * self[e4315]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other.group0()[1]) * self.group0()),
        );
    }
}
impl GeometricAntiProduct<FlatPoint> for Sphere {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        9       20        0
    fn geometric_anti_product(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self[e4315]) - (other.group0()[3] * self.group0()[0])),
                (-(other.group0()[1] * self[e4315]) - (other.group0()[3] * self.group0()[1])),
                (-(other.group0()[2] * self[e4315]) - (other.group0()[3] * self.group0()[2])),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
                (other.group0()[3] * self[e4315]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[0] * self[e4315]),
                (other.group0()[1] * self[e4315]),
                (other.group0()[2] * self[e4315]),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group0()[3] * self.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Flector> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       28        0
    //    simd4        2        3        0
    // Totals...
    // yes simd       18       31        0
    //  no simd       24       40        0
    fn geometric_anti_product(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group1()[0] * self[e4315]),
                (other.group1()[1] * self[e4315]),
                (other.group1()[2] * self[e4315]),
                ((other.group1()[0] * self.group0()[0]) + (other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2]) - (other.group1()[3] * self[e4315])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self[e4315]) - (other.group0()[3] * self.group0()[0]) + (other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1])),
                (-(other.group0()[1] * self[e4315]) - (other.group0()[3] * self.group0()[1]) - (other.group1()[0] * self.group0()[2]) + (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[2] * self[e4315]) - (other.group0()[3] * self.group0()[2]) + (other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0])),
                (other.group1()[3] * self[e4315]),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[2]) + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[1] * self.group0()[0]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self.group0()[3])),
            ]) - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from(self[e4315]) * other.group0()),
        );
    }
}
impl GeometricAntiProduct<Line> for Sphere {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       23        0
    //    simd3        0        1        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       13       25        0
    //  no simd       16       30        0
    fn geometric_anti_product(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[e4315]) * other.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other.group1()[0] * self[e4315]),
                (other.group1()[1] * self[e4315]),
                (other.group1()[2] * self[e4315]),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1])),
                ((other.group0()[1] * self.group0()[3]) - (other.group1()[0] * self.group0()[2]) + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[3]) + (other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group1()[0] * self[e4315])),
                (-(other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self[e4315])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group1()[2] * self[e4315])),
                ((other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<Motor> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       20        0
    //    simd4        3        6        0
    // Totals...
    // yes simd       15       26        0
    //  no simd       24       44        0
    fn geometric_anti_product(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self[e4315]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other.group1()[0] * self[e4315]),
                (other.group1()[1] * self[e4315]),
                (other.group1()[2] * self[e4315]),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]) + (other.group1()[3] * self[e4315])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1]) - (other.group1()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[3]) - (other.group1()[0] * self.group0()[2]) + (other.group1()[2] * self.group0()[0]) - (other.group1()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group0()[3]) + (other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0]) - (other.group1()[3] * self.group0()[2])),
                (other.group0()[3] * self[e4315]),
            ]),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[2]])
                * swizzle!(self.group0(), 2, 0, 1, 2)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other.group1()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))
                + (Simd32x4::from([self[e4315], self[e4315], self[e4315], self.group0()[1]]) * swizzle!(other.group1(), 0, 1, 2, 1))
                + (swizzle!(other.group0(), 2, 0, 1, 3) * swizzle!(self.group0(), 1, 2, 0, 3))),
        );
    }
}
impl GeometricAntiProduct<MultiVector> for Sphere {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       54        0
    //    simd2        3        3        0
    //    simd3       14       16        0
    //    simd4       13       13        0
    // Totals...
    // yes simd       58       86        0
    //  no simd      128      160        0
    fn geometric_anti_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                ((other.group1()[3] * self.group0()[3]) + (other[e1] * self[e4315])),
                (-(other.group9()[3] * self[e4315]) - (self.group0()[3] * other[e45])),
            ]) + (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group1()[0], other.group9()[0]]))
                + (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group1()[1], other.group9()[1]]))
                + (Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group1()[2], other.group9()[2]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group4()[0] * self.group0()[3]) - (other.group5()[1] * self.group0()[2])),
                (-(other.group4()[1] * self.group0()[3]) - (other.group5()[2] * self.group0()[0])),
                (-(other.group4()[2] * self.group0()[3]) - (other.group5()[0] * self.group0()[1])),
                (-(other.group0()[0] * self[e4315]) + (other.group4()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self[e4315]) * other.group3())
                + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group4()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group4()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))),
            // e5
            (-(other.group0()[0] * self.group0()[3])
                - (other.group3()[0] * self.group0()[0])
                - (other.group3()[1] * self.group0()[1])
                - (other.group3()[2] * self.group0()[2])
                - (other.group3()[3] * self.group0()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group8()[1] * self.group0()[2]) + (other.group6()[0] * self.group0()[3])),
                ((other.group8()[2] * self.group0()[0]) + (other.group6()[1] * self.group0()[3])),
                ((other.group8()[0] * self.group0()[1]) + (other.group6()[2] * self.group0()[3])),
                (-(other.group6()[2] * self.group0()[2]) + (other[e1] * self[e4315])),
            ]) - (Simd32x4::from([other.group8()[2], other.group8()[0], other.group8()[1], other.group1()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group6()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other[e1], other[e1], other[e1], other.group6()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e41, e42, e43
            ((Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self[e4315]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self[e4315]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                + (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group7(), 2, 0, 1))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group7(), 1, 2, 0))),
            // e23, e31, e12
            (Simd32x3::from([
                ((other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1])),
                (-(other.group1()[0] * self.group0()[2]) + (other.group1()[2] * self.group0()[0])),
                ((other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0])),
            ]) - (Simd32x3::from(other.group6()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self.group0()[3]) * other.group7())
                + (Simd32x3::from(self[e4315]) * other.group8())),
            // e415, e425, e435, e321
            (-Simd32x4::from([
                (other.group3()[0] * self[e4315]),
                (other.group3()[1] * self[e4315]),
                (other.group3()[2] * self[e4315]),
                (self.group0()[3] * other[e45]),
            ]) - (Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[2], other.group5()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group5()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))
                - (Simd32x4::from([other.group9()[2], other.group9()[0], other.group9()[1], other.group5()[2]]) * swizzle!(self.group0(), 1, 2, 0, 2))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self[e4315]]) * swizzle!(other.group9(), 1, 2, 0, 3))),
            // e423, e431, e412
            (-(Simd32x3::from(other[e45]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self[e4315]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                - (Simd32x3::from(self[e4315]) * other.group5())
                - (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group4(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group4(), 1, 2, 0))),
            // e235, e315, e125
            (Simd32x3::from([
                (-(other.group3()[1] * self.group0()[2]) + (other.group3()[2] * self.group0()[1])),
                ((other.group3()[0] * self.group0()[2]) - (other.group3()[2] * self.group0()[0])),
                (-(other.group3()[0] * self.group0()[1]) + (other.group3()[1] * self.group0()[0])),
            ]) + (Simd32x3::from(other.group9()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                - (Simd32x3::from(self.group0()[3]) * other.group5())),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group8()[0] * self[e4315]) - (other.group6()[1] * self.group0()[2])),
                ((other.group8()[1] * self[e4315]) - (other.group6()[2] * self.group0()[0])),
                ((other.group8()[2] * self[e4315]) - (other.group6()[0] * self.group0()[1])),
                ((other.group8()[1] * self.group0()[1]) + (other.group8()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(other.group0()[1]) * self.group0())
                - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group6()[3]]))
                + (Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group8()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e1234
            ((other.group0()[1] * self[e4315]) - (other.group7()[0] * self.group0()[0]) - (other.group7()[1] * self.group0()[1]) - (other.group7()[2] * self.group0()[2])
                + (other.group6()[3] * self[e4315])),
        );
    }
}
impl GeometricAntiProduct<Plane> for Sphere {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        9        0
    //    simd3        0        1        0
    //    simd4        2        2        0
    // Totals...
    // yes simd        6       12        0
    //  no simd       12       20        0
    fn geometric_anti_product(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return CircleRotor::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[e4315]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
                (other.group0()[3] * self[e4315]),
            ]),
            // e235, e315, e125, e12345
            (Simd32x4::from([0.0, 0.0, 0.0, ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]))])
                - (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self[e4315]]) * other.group0())
                + (swizzle!(other.group0(), 3, 3, 3, 0) * swizzle!(self.group0(), 0, 1, 2, 0))),
        );
    }
}
impl GeometricAntiProduct<QuadNum> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4       26        0
    fn geometric_anti_product(self, other: QuadNum) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self[e4315])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other.group0()[2] * self.group0()[0] * -1.0),
                (other.group0()[2] * self.group0()[1] * -1.0),
                (other.group0()[2] * self.group0()[2] * -1.0),
                (-(other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self[e4315])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0] * -1.0),
                (other.group0()[1] * self.group0()[1] * -1.0),
                (other.group0()[1] * self.group0()[2] * -1.0),
                ((other.group0()[2] * self[e4315]) + (other.group0()[3] * self[e4315])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[3] * self.group0()[0]),
                (other.group0()[3] * self.group0()[1]),
                (other.group0()[3] * self.group0()[2]),
                (-(other.group0()[2] * self.group0()[3]) + (other.group0()[3] * self.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<RoundPoint> for Sphere {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       15        0
    //    simd3        1        2        0
    //    simd4        1        1        0
    // Totals...
    // yes simd        9       18        0
    //  no simd       14       25        0
    fn geometric_anti_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return AntiCircleRotor::from_groups(
            // e41, e42, e43
            ((Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self[e4315]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (other.group0()[1] * self.group0()[2]),
                (other.group0()[2] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other[e2] * self[e4315]),
            ]) - (swizzle!(other.group0(), 2, 0, 1, 3) * swizzle!(self.group0(), 1, 2, 0, 3))),
            // e15, e25, e35, scalar
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (self.group0()[0] * other[e2])),
                (-(other.group0()[1] * self.group0()[3]) - (self.group0()[1] * other[e2])),
                (-(other.group0()[2] * self.group0()[3]) - (self.group0()[2] * other[e2])),
                ((other.group0()[0] * self.group0()[0])
                    + (other.group0()[1] * self.group0()[1])
                    + (other.group0()[2] * self.group0()[2])
                    + (other.group0()[3] * self.group0()[3])
                    + (other[e2] * self[e4315])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Scalar> for Sphere {
    type Output = RoundPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0       10        0
    fn geometric_anti_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return RoundPoint::from_groups(
            // e1, e2, e3, e4
            (Simd32x4::from(other[scalar]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self[e4315]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e5
            (self.group0()[3] * other[scalar] * -1.0),
        );
    }
}
impl GeometricAntiProduct<Sphere> for Sphere {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        3        0
    //    simd3        1        2        0
    //    simd4        3        4        0
    // Totals...
    // yes simd        6        9        0
    //  no simd       17       25        0
    fn geometric_anti_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return CircleRotor::from_groups(
            // e423, e431, e412
            (-(Simd32x3::from(other[e4315]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self[e4315]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))),
            // e415, e425, e435, e321
            (-(Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other[e4315]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self[e4315]]) * swizzle!(other.group0(), 1, 2, 0, 3))),
            // e235, e315, e125, e12345
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) - (self.group0()[3] * other[e4315])),
            ]) - (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self[e4315]]) * other.group0())
                + (swizzle!(other.group0(), 3, 3, 3, 0) * swizzle!(self.group0(), 0, 1, 2, 0))),
        );
    }
}
impl GeometricAntiProduct<TripleNum> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2       11        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        2       13        0
    //  no simd        2       19        0
    fn geometric_anti_product(self, other: TripleNum) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self[e4315])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (-(other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self[e4315]))]),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                (other.group0()[2] * self[e4315]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other.group0()[2]) * self.group0()),
        );
    }
}
impl GeometricAntiProduct<VersorEven> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       12        0
    //    simd4       15       19        0
    // Totals...
    // yes simd       19       31        0
    //  no simd       64       88        0
    fn geometric_anti_product(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[3]])
                * swizzle!(self.group0(), 2, 0, 1, 3)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from(self[e4315]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group3()[3], other.group3()[1]]) * swizzle!(self.group0(), 1, 2, 2, 1))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group0()[1], other.group3()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))
                + (Simd32x4::from([self[e4315], self[e4315], self[e4315], self.group0()[2]]) * swizzle!(other.group3(), 0, 1, 2, 2))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[2] * other.group3()[1]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[0] * other.group3()[2]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[1] * other.group3()[0]) + (self.group0()[3] * other.group0()[2])),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[3] * other.group3()[3])),
            ]) + (Simd32x4::from(self[e4315]) * other.group2())
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group1()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[3], other.group1()[1]]) * swizzle!(self.group0(), 1, 2, 2, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (self.group0()[2] * other.group2()[1]),
                (self.group0()[0] * other.group2()[2]),
                (self.group0()[1] * other.group2()[0]),
                (other.group0()[3] * self[e4315]),
            ]) + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self[e4315]]) * other.group1())
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[3], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 2, 1))
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))
                - (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group0()[2]]) * swizzle!(self.group0(), 3, 3, 3, 2))),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(self.group0()[3]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group2()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group2()[1]]) * swizzle!(self.group0(), 1, 2, 2, 1))
                + (Simd32x4::from([self[e4315], self[e4315], self[e4315], self.group0()[2]]) * swizzle!(other.group2(), 0, 1, 2, 2))
                - (swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group1(), 1, 2, 0, 3))),
        );
    }
}
impl GeometricAntiProduct<VersorOdd> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4       15       20        0
    // Totals...
    // yes simd       19       28        0
    //  no simd       64       88        0
    fn geometric_anti_product(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from([other.group0()[2], other.group0()[0], other.group2()[3], other.group3()[2]])
                * swizzle!(self.group0(), 1, 2, 2, 2)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                - (Simd32x4::from(self[e4315]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[1], other.group2()[3]]) * swizzle!(self.group0(), 0, 1, 0, 3))
                + (Simd32x4::from([self[e4315], self[e4315], self[e4315], self.group0()[1]]) * swizzle!(other.group3(), 0, 1, 2, 1))),
            // e415, e425, e435, e321
            ((Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self[e4315]]) * swizzle!(other.group3(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group1()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[3], other.group1()[1]]) * swizzle!(self.group0(), 1, 2, 2, 1))
                - (Simd32x4::from([self[e4315], self[e4315], self[e4315], self.group0()[3]]) * other.group2())),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group2()[2])),
                ((self.group0()[1] * other.group3()[3]) + (self.group0()[2] * other.group2()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[2] * other.group3()[3])),
                (-(self.group0()[3] * other.group0()[3]) - (self.group0()[3] * other.group1()[3])),
            ]) - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[2]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                - (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group2(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            ((Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[2]])
                * swizzle!(self.group0(), 2, 0, 1, 2)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from(self[e4315]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))
                - (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self[e4315]]) * other.group0())
                + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group0()[0]]) * swizzle!(self.group0(), 0, 1, 0, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 2, 1))),
        );
    }
}
impl GeometricAntiProduct<VersorRoundPoint> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       14        0
    //    simd4        3        4        0
    // Totals...
    // yes simd        8       18        0
    //  no simd       17       30        0
    fn geometric_anti_product(self, other: VersorRoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])),
            ]) + (Simd32x4::from(self[e4315]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]))
                + (swizzle!(self.group0(), 0, 1, 2, 0) * swizzle!(other.group0(), 3, 3, 3, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (self.group0()[2] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (self.group0()[1] * other.group0()[0]),
                (other.group1()[0] * self[e4315]),
            ]) - (swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group1()[0] * self.group0()[0]) - (self.group0()[3] * other.group0()[0])),
                (-(other.group1()[0] * self.group0()[1]) - (self.group0()[3] * other.group0()[1])),
                (-(other.group1()[0] * self.group0()[2]) - (self.group0()[3] * other.group0()[2])),
                (other.group1()[1] * self[e4315]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other.group1()[1]) * self.group0()),
        );
    }
}
impl GeometricAntiProduct<VersorSphere> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       11        0
    //    simd4        3        6        0
    // Totals...
    // yes simd        8       17        0
    //  no simd       17       35        0
    fn geometric_anti_product(self, other: VersorSphere) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) - (other.group0()[3] * self[e4315])),
            ]) - (Simd32x4::from(other.group1()[0]) * self.group0())
                + (Simd32x4::from([self[e4315], self[e4315], self[e4315], self.group0()[0]]) * swizzle!(other.group0(), 0, 1, 2, 0))),
            // e415, e425, e435, e321
            ((Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self[e4315]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 3))),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) - (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) - (self.group0()[3] * other.group0()[2])),
                (other.group1()[1] * self.group0()[3] * -1.0),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(other.group1()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self[e4315]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
    }
}
impl InfixGeometricAntiProduct for TripleNum {}
impl GeometricAntiProduct<AntiCircleRotor> for TripleNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       17        0
    //    simd4        2        6        0
    // Totals...
    // yes simd       11       23        0
    //  no simd       17       41        0
    fn geometric_anti_product(self, other: AntiCircleRotor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[2]) + (self.group0()[0] * other.group1()[0])),
                ((other.group0()[1] * self.group0()[2]) + (self.group0()[0] * other.group1()[1])),
                ((other.group0()[2] * self.group0()[2]) + (self.group0()[0] * other.group1()[2])),
                (self.group0()[2] * other.group2()[3]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[1]) + (self.group0()[0] * other.group2()[0]) + (self.group0()[2] * other.group1()[0])),
                ((other.group0()[1] * self.group0()[1]) + (self.group0()[0] * other.group2()[1]) + (self.group0()[2] * other.group1()[1])),
                ((other.group0()[2] * self.group0()[1]) + (self.group0()[0] * other.group2()[2]) + (self.group0()[2] * other.group1()[2])),
                (self.group0()[2] * other.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            ((Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]]) * other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from([self.group0()[2], self.group0()[2], self.group0()[2], self.group0()[0]]) * other.group2())),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(self.group0()[1])
                * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]])
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * other.group2())),
        );
    }
}
impl GeometricAntiProduct<AntiDipoleInversion> for TripleNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       17        0
    //    simd4        6        8        0
    // Totals...
    // yes simd       12       25        0
    //  no simd       30       49        0
    fn geometric_anti_product(self, other: AntiDipoleInversion) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[2]) + (self.group0()[0] * other.group3()[0])),
                ((other.group0()[1] * self.group0()[2]) + (self.group0()[0] * other.group3()[1])),
                ((other.group0()[2] * self.group0()[2]) + (self.group0()[0] * other.group3()[2])),
                (self.group0()[1] * other.group2()[3]),
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))),
            // e415, e425, e435, e321
            ((Simd32x4::from(self.group0()[0])
                * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                + (Simd32x4::from(self.group0()[2]) * other.group1())),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (self.group0()[1] * other.group1()[0]),
                (self.group0()[1] * other.group1()[1]),
                (self.group0()[1] * other.group1()[2]),
                0.0,
            ]) - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))
                + (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[1]) - (self.group0()[0] * other.group2()[0])),
                ((other.group0()[1] * self.group0()[1]) - (self.group0()[0] * other.group2()[1])),
                ((other.group0()[2] * self.group0()[1]) - (self.group0()[0] * other.group2()[2])),
                (self.group0()[0] * other.group1()[3]),
            ]) + (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[3]]))),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum321> for TripleNum {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn geometric_anti_product(self, other: AntiDualNum321) -> Self::Output {
        return AntiQuadNum::from_groups(/* e1234, e3215, e45, scalar */ Simd32x4::from([
            (-(other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[0])),
            ((other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[1])),
            (other.group0()[0] * self.group0()[2]),
            (other.group0()[1] * self.group0()[2]),
        ]));
    }
}
impl GeometricAntiProduct<AntiDualNum4> for TripleNum {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        7        0
    fn geometric_anti_product(self, other: AntiDualNum4) -> Self::Output {
        return AntiQuadNum::from_groups(/* e1234, e3215, e45, scalar */ Simd32x4::from([
            ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[0])),
            (other.group0()[1] * self.group0()[1]),
            (other.group0()[0] * self.group0()[1] * -1.0),
            ((other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[2])),
        ]));
    }
}
impl GeometricAntiProduct<AntiDualNum5> for TripleNum {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn geometric_anti_product(self, other: AntiDualNum5) -> Self::Output {
        return AntiQuadNum::from_groups(/* e1234, e3215, e45, scalar */ Simd32x4::from([
            (other.group0()[1] * self.group0()[0]),
            ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[1])),
            (other.group0()[0] * self.group0()[0]),
            ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[2])),
        ]));
    }
}
impl GeometricAntiProduct<AntiFlatPoint> for TripleNum {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn geometric_anti_product(self, other: AntiFlatPoint) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[2]]) * other.group0()),
            // e235, e315, e125, e4
            (Simd32x4::from([self.group0()[2], self.group0()[2], self.group0()[2], self.group0()[0]]) * other.group0()),
            // e1, e2, e3, e5
            (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * other.group0() * Simd32x4::from(-1.0)),
        );
    }
}
impl GeometricAntiProduct<AntiFlector> for TripleNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       12        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        5       15        0
    //  no simd        8       24        0
    fn geometric_anti_product(self, other: AntiFlector) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self.group0()[0]) * other.group1()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (-(self.group0()[0] * other.group1()[3]) + (self.group0()[2] * other.group0()[3])),
            ]),
            // e235, e315, e125, e5
            (-(Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                + (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[0]) + (self.group0()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group1()[2])),
                (self.group0()[0] * other.group0()[3]),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiLine> for TripleNum {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       15        0
    //    simd3        0        1        0
    // Totals...
    // yes simd        6       16        0
    //  no simd        6       18        0
    fn geometric_anti_product(self, other: AntiLine) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group0()[0]) * other.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[2]) + (other.group1()[0] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[2]) + (other.group1()[1] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[2]) + (other.group1()[2] * self.group0()[0])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[1]) + (other.group1()[0] * self.group0()[2])),
                ((other.group0()[1] * self.group0()[1]) + (other.group1()[1] * self.group0()[2])),
                ((other.group0()[2] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group1()[0] * self.group0()[0]),
                (other.group1()[1] * self.group0()[0]),
                (other.group1()[2] * self.group0()[0]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiMotor> for TripleNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       24        0
    fn geometric_anti_product(self, other: AntiMotor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[2] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group0()[2])),
                (self.group0()[0] * other.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group1()[2])),
                (self.group0()[0] * other.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[2] * other.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiPlane> for TripleNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        5        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        0        8        0
    //  no simd        0       17        0
    fn geometric_anti_product(self, other: AntiPlane) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self.group0()[0]) * other.group0()),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3] * -1.0)]),
            // e235, e315, e125, e5
            (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[2]]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[2] * other.group0()[0]),
                (self.group0()[2] * other.group0()[1]),
                (self.group0()[2] * other.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiQuadNum> for TripleNum {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        2        4        0
    // no simd        8       16        0
    fn geometric_anti_product(self, other: AntiQuadNum) -> Self::Output {
        return AntiQuadNum::from_groups(
            // e1234, e3215, e45, scalar
            ((Simd32x4::from([self.group0()[0], self.group0()[2], self.group0()[1], self.group0()[2]])
                * swizzle!(other.group0(), 2, 1, 0, 3)
                * Simd32x4::from([-1.0, 1.0, -1.0, 1.0]))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[0], self.group0()[0]]) * swizzle!(other.group0(), 3, 2, 1, 1))
                + (Simd32x4::from([self.group0()[2], self.group0()[1], self.group0()[2], self.group0()[1]]) * swizzle!(other.group0(), 0, 3, 2, 0))),
        );
    }
}
impl GeometricAntiProduct<AntiScalar> for TripleNum {
    type Output = TripleNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn geometric_anti_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return TripleNum::from_groups(/* e4, e5, e12345 */ (Simd32x3::from(other[e12345]) * self.group0()));
    }
}
impl GeometricAntiProduct<AntiTripleNum> for TripleNum {
    type Output = AntiQuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        9        0
    fn geometric_anti_product(self, other: AntiTripleNum) -> Self::Output {
        return AntiQuadNum::from_groups(/* e1234, e3215, e45, scalar */ Simd32x4::from([
            ((other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])),
            ((other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
            (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
            ((other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group0()[2])),
        ]));
    }
}
impl GeometricAntiProduct<Circle> for TripleNum {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       25        0
    //    simd3        1        2        0
    // Totals...
    // yes simd       13       27        0
    //  no simd       15       31        0
    fn geometric_anti_product(self, other: Circle) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])) + (Simd32x3::from(self.group0()[2]) * other.group0())),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[1]) + (other.group2()[0] * self.group0()[0]) + (self.group0()[2] * other.group1()[0])),
                ((other.group0()[1] * self.group0()[1]) + (other.group2()[1] * self.group0()[0]) + (self.group0()[2] * other.group1()[1])),
                ((other.group0()[2] * self.group0()[1]) + (other.group2()[2] * self.group0()[0]) + (self.group0()[2] * other.group1()[2])),
                (self.group0()[2] * other.group1()[3]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                ((other.group2()[0] * self.group0()[2]) + (self.group0()[1] * other.group1()[0])),
                ((other.group2()[1] * self.group0()[2]) + (self.group0()[1] * other.group1()[1])),
                ((other.group2()[2] * self.group0()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[0] * other.group1()[3]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[1]) - (other.group2()[0] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[1]) - (other.group2()[1] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[1]) - (other.group2()[2] * self.group0()[0])),
                (self.group0()[1] * other.group1()[3] * -1.0),
            ]),
        );
    }
}
impl GeometricAntiProduct<CircleRotor> for TripleNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       29        0
    //    simd4        1        2        0
    // Totals...
    // yes simd       14       31        0
    //  no simd       17       37        0
    fn geometric_anti_product(self, other: CircleRotor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[2]) + (self.group0()[0] * other.group1()[0])),
                ((other.group0()[1] * self.group0()[2]) + (self.group0()[0] * other.group1()[1])),
                ((other.group0()[2] * self.group0()[2]) + (self.group0()[0] * other.group1()[2])),
                (self.group0()[2] * other.group2()[3]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[1]) + (self.group0()[0] * other.group2()[0]) + (self.group0()[2] * other.group1()[0])),
                ((other.group0()[1] * self.group0()[1]) + (self.group0()[0] * other.group2()[1]) + (self.group0()[2] * other.group1()[1])),
                ((other.group0()[2] * self.group0()[1]) + (self.group0()[0] * other.group2()[2]) + (self.group0()[2] * other.group1()[2])),
                (self.group0()[2] * other.group1()[3]),
            ]),
            // e235, e315, e125, e5
            ((Simd32x4::from([
                (self.group0()[2] * other.group2()[0]),
                (self.group0()[2] * other.group2()[1]),
                (self.group0()[2] * other.group2()[2]),
                (self.group0()[1] * other.group1()[3]),
            ]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[1]) - (self.group0()[0] * other.group2()[0])),
                ((other.group0()[1] * self.group0()[1]) - (self.group0()[0] * other.group2()[1])),
                ((other.group0()[2] * self.group0()[1]) - (self.group0()[0] * other.group2()[2])),
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[0] * other.group2()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Dipole> for TripleNum {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       25        0
    //    simd3        1        2        0
    // Totals...
    // yes simd       13       27        0
    //  no simd       15       31        0
    fn geometric_anti_product(self, other: Dipole) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])) + (Simd32x3::from(self.group0()[2]) * other.group0())),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[1]) + (other.group2()[0] * self.group0()[0]) + (self.group0()[2] * other.group1()[0])),
                ((other.group0()[1] * self.group0()[1]) + (other.group2()[1] * self.group0()[0]) + (self.group0()[2] * other.group1()[1])),
                ((other.group0()[2] * self.group0()[1]) + (other.group2()[2] * self.group0()[0]) + (self.group0()[2] * other.group1()[2])),
                (self.group0()[2] * other.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group2()[0] * self.group0()[2]) + (self.group0()[1] * other.group1()[0])),
                ((other.group2()[1] * self.group0()[2]) + (self.group0()[1] * other.group1()[1])),
                ((other.group2()[2] * self.group0()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[0] * other.group1()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[1]) + (other.group2()[0] * self.group0()[0])),
                (-(other.group0()[1] * self.group0()[1]) + (other.group2()[1] * self.group0()[0])),
                (-(other.group0()[2] * self.group0()[1]) + (other.group2()[2] * self.group0()[0])),
                (self.group0()[1] * other.group1()[3]),
            ]),
        );
    }
}
impl GeometricAntiProduct<DipoleInversion> for TripleNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       22        0
    //    simd4        5        7        0
    // Totals...
    // yes simd       14       29        0
    //  no simd       29       50        0
    fn geometric_anti_product(self, other: DipoleInversion) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[2]) - (self.group0()[0] * other.group3()[0])),
                ((other.group0()[1] * self.group0()[2]) - (self.group0()[0] * other.group3()[1])),
                ((other.group0()[2] * self.group0()[2]) - (self.group0()[0] * other.group3()[2])),
                (self.group0()[1] * other.group2()[3]),
            ]) + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))),
            // e23, e31, e12, e45
            ((Simd32x4::from(self.group0()[1])
                * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                + (Simd32x4::from(self.group0()[2]) * other.group1())),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[0]) + (self.group0()[1] * other.group3()[0])),
                ((self.group0()[1] * other.group1()[1]) + (self.group0()[1] * other.group3()[1])),
                ((self.group0()[1] * other.group1()[2]) + (self.group0()[1] * other.group3()[2])),
                ((self.group0()[0] * other.group1()[3]) * -1.0),
            ]) + (Simd32x4::from(self.group0()[2]) * other.group2())),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group0()[0] * self.group0()[1]) + (self.group0()[0] * other.group2()[0])),
                (-(other.group0()[1] * self.group0()[1]) + (self.group0()[0] * other.group2()[1])),
                (-(other.group0()[2] * self.group0()[1]) + (self.group0()[0] * other.group2()[2])),
                (self.group0()[1] * other.group1()[3]),
            ]) + (Simd32x4::from(self.group0()[2]) * other.group3())),
        );
    }
}
impl GeometricAntiProduct<DualNum321> for TripleNum {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn geometric_anti_product(self, other: DualNum321) -> Self::Output {
        return QuadNum::from_groups(/* e4, e5, e321, e12345 */ Simd32x4::from([
            ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[0])),
            (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[1])),
            (other.group0()[0] * self.group0()[2]),
            (other.group0()[1] * self.group0()[2]),
        ]));
    }
}
impl GeometricAntiProduct<DualNum4> for TripleNum {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn geometric_anti_product(self, other: DualNum4) -> Self::Output {
        return QuadNum::from_groups(/* e4, e5, e321, e12345 */ Simd32x4::from([
            ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[0])),
            (other.group0()[1] * self.group0()[1]),
            (other.group0()[0] * self.group0()[1]),
            ((other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[2])),
        ]));
    }
}
impl GeometricAntiProduct<DualNum5> for TripleNum {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        7        0
    fn geometric_anti_product(self, other: DualNum5) -> Self::Output {
        return QuadNum::from_groups(/* e4, e5, e321, e12345 */ Simd32x4::from([
            (other.group0()[1] * self.group0()[0]),
            ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[1])),
            (other.group0()[0] * self.group0()[0] * -1.0),
            ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[2])),
        ]));
    }
}
impl GeometricAntiProduct<FlatPoint> for TripleNum {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn geometric_anti_product(self, other: FlatPoint) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[2]]) * other.group0()),
            // e15, e25, e35, e1234
            (Simd32x4::from([self.group0()[2], self.group0()[2], self.group0()[2], self.group0()[0]]) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * other.group0()),
        );
    }
}
impl GeometricAntiProduct<Flector> for TripleNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       13        0
    //    simd4        1        4        0
    // Totals...
    // yes simd        5       17        0
    //  no simd        8       29        0
    fn geometric_anti_product(self, other: Flector) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self.group0()[0]) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[2] * other.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[1] * other.group1()[1]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group0()[2])),
                (self.group0()[0] * other.group0()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(self.group0()[2]) * other.group1()) + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * other.group0())),
        );
    }
}
impl GeometricAntiProduct<Line> for TripleNum {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       18        0
    //    simd3        0        1        0
    // Totals...
    // yes simd        6       19        0
    //  no simd        6       21        0
    fn geometric_anti_product(self, other: Line) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self.group0()[0]) * other.group0()),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[2]) + (other.group1()[0] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[2]) + (other.group1()[1] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[2]) + (other.group1()[2] * self.group0()[0])),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[1]) + (other.group1()[0] * self.group0()[2])),
                ((other.group0()[1] * self.group0()[1]) + (other.group1()[1] * self.group0()[2])),
                ((other.group0()[2] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group1()[0] * self.group0()[0] * -1.0),
                (other.group1()[1] * self.group0()[0] * -1.0),
                (other.group1()[2] * self.group0()[0] * -1.0),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<Motor> for TripleNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       13        0
    //    simd4        1        4        0
    // Totals...
    // yes simd        5       17        0
    //  no simd        8       29        0
    fn geometric_anti_product(self, other: Motor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[2] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group0()[2])),
                (self.group0()[0] * other.group1()[3] * -1.0),
            ]),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group0()[1]) * other.group0()) + (Simd32x4::from(self.group0()[2]) * other.group1())),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[0])
                * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]])
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
    }
}
impl GeometricAntiProduct<MultiVector> for TripleNum {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       14        0
    //    simd2        2        3        0
    //    simd3        8       12        0
    //    simd4        7       13        0
    // Totals...
    // yes simd       25       42        0
    //  no simd       64      108        0
    fn geometric_anti_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group9()[3], other[e1]]))
                + (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other[e45], other.group1()[3]]))
                + (Simd32x2::from(self.group0()[2]) * other.group0())),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group7()[0] * self.group0()[1]) - (other.group8()[0] * self.group0()[0])),
                ((other.group7()[1] * self.group0()[1]) - (other.group8()[1] * self.group0()[0])),
                ((other.group7()[2] * self.group0()[1]) - (other.group8()[2] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[0]) + (self.group0()[0] * other.group6()[3])),
            ]) + (Simd32x4::from(self.group0()[2]) * other.group1())),
            // e5
            ((other.group0()[1] * self.group0()[1]) - (self.group0()[1] * other.group6()[3]) + (self.group0()[2] * other[e1])),
            // e15, e25, e35, e45
            ((Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other[e45]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(self.group0()[2]) * other.group3())
                + (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]]) * other.group9())),
            // e41, e42, e43
            (-(Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                + (Simd32x3::from(self.group0()[0]) * other.group5())
                + (Simd32x3::from(self.group0()[2]) * other.group4())),
            // e23, e31, e12
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from(self.group0()[1]) * other.group4())
                + (Simd32x3::from(self.group0()[2]) * other.group5())),
            // e415, e425, e435, e321
            ((Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group8()[0], other.group8()[1], other.group8()[2], other[e1]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group1()[3]]))
                + (Simd32x4::from(self.group0()[2]) * other.group6())),
            // e423, e431, e412
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                + (Simd32x3::from(self.group0()[2]) * other.group7())),
            // e235, e315, e125
            (-(Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                + (Simd32x3::from(self.group0()[2]) * other.group8())),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(self.group0()[1])
                * Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[2], other.group0()[0]])
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from(self.group0()[2]) * other.group9())
                + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * other.group3())),
            // e1234
            ((other.group0()[0] * self.group0()[0]) - (self.group0()[0] * other.group3()[3]) + (self.group0()[2] * other[e45])),
        );
    }
}
impl GeometricAntiProduct<Plane> for TripleNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        4        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        0        7        0
    //  no simd        0       16        0
    fn geometric_anti_product(self, other: Plane) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self.group0()[0]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3])]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group0()[2]) * other.group0()),
        );
    }
}
impl GeometricAntiProduct<QuadNum> for TripleNum {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        2        4        0
    // no simd        8       16        0
    fn geometric_anti_product(self, other: QuadNum) -> Self::Output {
        return QuadNum::from_groups(
            // e4, e5, e321, e12345
            ((Simd32x4::from([self.group0()[2], self.group0()[1], self.group0()[0], self.group0()[2]])
                * swizzle!(other.group0(), 0, 2, 1, 3)
                * Simd32x4::from([1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[1], self.group0()[0]]) * swizzle!(other.group0(), 2, 3, 0, 1))
                + (Simd32x4::from([self.group0()[0], self.group0()[2], self.group0()[2], self.group0()[1]]) * swizzle!(other.group0(), 3, 1, 2, 0))),
        );
    }
}
impl GeometricAntiProduct<RoundPoint> for TripleNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2       11        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        2       13        0
    //  no simd        2       19        0
    fn geometric_anti_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                ((self.group0()[0] * other[e2]) + (self.group0()[1] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[0] * other[e2]) + (self.group0()[1] * other.group0()[3]))]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[2] * other[e2]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[2]) * other.group0()),
        );
    }
}
impl GeometricAntiProduct<Scalar> for TripleNum {
    type Output = AntiTripleNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        1        0
    // no simd        0        3        0
    fn geometric_anti_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiTripleNum::from_groups(/* e1234, e3215, scalar */ (Simd32x3::from(other[scalar]) * self.group0()));
    }
}
impl GeometricAntiProduct<Sphere> for TripleNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2       14        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        2       15        0
    //  no simd        2       18        0
    fn geometric_anti_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0] * -1.0),
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[0] * other.group0()[2] * -1.0),
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other[e4315])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, ((self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other[e4315]))]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[2] * other[e4315]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group0()[2]) * other.group0()),
        );
    }
}
impl GeometricAntiProduct<TripleNum> for TripleNum {
    type Output = QuadNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5        9        0
    fn geometric_anti_product(self, other: TripleNum) -> Self::Output {
        return QuadNum::from_groups(/* e4, e5, e321, e12345 */ Simd32x4::from([
            ((other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])),
            ((other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
            ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
            ((other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group0()[2])),
        ]));
    }
}
impl GeometricAntiProduct<VersorEven> for TripleNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        8       14        0
    // no simd       32       56        0
    fn geometric_anti_product(self, other: VersorEven) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                + (Simd32x4::from(self.group0()[2]) * other.group0())
                + (Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * other.group3())),
            // e415, e425, e435, e321
            ((Simd32x4::from(self.group0()[0]) * other.group2() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group3()[3]]))
                + (Simd32x4::from(self.group0()[2]) * other.group1())),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))
                + (Simd32x4::from(self.group0()[2]) * other.group2())),
            // e1, e2, e3, e4
            ((Simd32x4::from(self.group0()[0])
                * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]])
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from(self.group0()[2]) * other.group3())
                + (Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]]) * other.group0())),
        );
    }
}
impl GeometricAntiProduct<VersorOdd> for TripleNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       20        0
    //    simd4        6        9        0
    // Totals...
    // yes simd       14       29        0
    //  no simd       32       56        0
    fn geometric_anti_product(self, other: VersorOdd) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((Simd32x4::from([
                (self.group0()[0] * other.group3()[0]),
                (self.group0()[0] * other.group3()[1]),
                (self.group0()[0] * other.group3()[2]),
                (self.group0()[1] * other.group2()[3]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                + (Simd32x4::from(self.group0()[2]) * other.group0())),
            // e23, e31, e12, e45
            ((Simd32x4::from(self.group0()[1])
                * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                + (Simd32x4::from(self.group0()[2]) * other.group1())),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[0]) + (self.group0()[1] * other.group3()[0])),
                ((self.group0()[1] * other.group1()[1]) + (self.group0()[1] * other.group3()[1])),
                ((self.group0()[1] * other.group1()[2]) + (self.group0()[1] * other.group3()[2])),
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[0] * other.group1()[3])),
            ]) + (Simd32x4::from(self.group0()[2]) * other.group2())),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[1] * other.group0()[2])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[1] * other.group1()[3])),
            ]) + (Simd32x4::from(self.group0()[2]) * other.group3())),
        );
    }
}
impl GeometricAntiProduct<VersorRoundPoint> for TripleNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       21        0
    fn geometric_anti_product(self, other: VersorRoundPoint) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                ((other.group1()[0] * self.group0()[0]) + (other.group1()[1] * self.group0()[2]) + (self.group0()[1] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (-(other.group1()[0] * self.group0()[0]) + (self.group0()[1] * other.group0()[3]))]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0] * -1.0),
                (self.group0()[1] * other.group0()[1] * -1.0),
                (self.group0()[1] * other.group0()[2] * -1.0),
                ((other.group1()[0] * self.group0()[2]) + (other.group1()[1] * self.group0()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[2] * other.group0()[0]),
                (self.group0()[2] * other.group0()[1]),
                (self.group0()[2] * other.group0()[2]),
                ((other.group1()[1] * self.group0()[0]) + (self.group0()[2] * other.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorSphere> for TripleNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       21        0
    fn geometric_anti_product(self, other: VersorSphere) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0] * -1.0),
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[0] * other.group0()[2] * -1.0),
                ((other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[2]) + (self.group0()[0] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (-(other.group1()[0] * self.group0()[1]) + (self.group0()[0] * other.group0()[3]))]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                ((other.group1()[0] * self.group0()[2]) + (other.group1()[1] * self.group0()[0])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[2] * other.group0()[0]),
                (self.group0()[2] * other.group0()[1]),
                (self.group0()[2] * other.group0()[2]),
                ((other.group1()[1] * self.group0()[1]) + (self.group0()[2] * other.group0()[3])),
            ]),
        );
    }
}
impl InfixGeometricAntiProduct for VersorEven {}
impl GeometricAntiProduct<AntiCircleRotor> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       72        0
    //    simd4       26       26        0
    // Totals...
    // yes simd       82       98        0
    //  no simd      160      176        0
    fn geometric_anti_product(self, other: AntiCircleRotor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (other.group1()[0] * self.group3()[3])
                    + (other.group1()[2] * self.group0()[1])
                    + (other.group2()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[0])
                    + (other.group1()[0] * self.group0()[2])
                    + (other.group1()[1] * self.group3()[3])
                    + (other.group2()[3] * self.group0()[1])),
                ((other.group0()[0] * self.group3()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group3()[3])
                    + (other.group2()[3] * self.group0()[2])),
                (-(other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group3()[2], self.group1()[1], self.group2()[0]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group1()[2], self.group1()[3], self.group3()[0], self.group2()[1]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group1()[3], self.group2()[2]]))
                + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) - (other.group1()[3] * self.group3()[0]) + (other.group2()[3] * self.group1()[0])),
                (-(other.group0()[2] * self.group2()[0]) - (other.group1()[3] * self.group3()[1]) + (other.group2()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[1]) - (other.group1()[3] * self.group3()[2]) + (other.group2()[3] * self.group1()[2])),
                ((other.group0()[2] * self.group2()[2]) - (other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 3, 2, 0, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[1], other.group0()[2], other.group0()[1]]) * swizzle!(self.group2(), 1, 3, 3, 1))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[2]]) * swizzle!(self.group3(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group0()[3], self.group1()[2], self.group1()[0], self.group3()[0]]) * swizzle!(other.group1(), 0, 0, 1, 0))
                + (Simd32x4::from([self.group1()[1], self.group0()[3], self.group0()[3], self.group3()[1]]) * swizzle!(other.group1(), 2, 1, 2, 1))
                - (swizzle!(other.group2(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group1()[0] * self.group2()[3])
                    + (other.group1()[2] * self.group2()[1])
                    + (other.group1()[3] * self.group2()[0])
                    + (other.group2()[0] * self.group1()[3])
                    + (other.group2()[2] * self.group1()[1])
                    + (other.group2()[3] * self.group2()[0])),
                ((other.group1()[0] * self.group2()[2])
                    + (other.group1()[1] * self.group2()[3])
                    + (other.group1()[3] * self.group2()[1])
                    + (other.group2()[1] * self.group0()[3])
                    + (other.group2()[1] * self.group1()[3])
                    + (other.group2()[3] * self.group2()[1])),
                ((other.group1()[1] * self.group2()[0])
                    + (other.group1()[2] * self.group2()[3])
                    + (other.group1()[3] * self.group2()[2])
                    + (other.group2()[2] * self.group0()[3])
                    + (other.group2()[2] * self.group1()[3])
                    + (other.group2()[3] * self.group2()[2])),
                (-(other.group0()[1] * self.group1()[1]) + (other.group0()[1] * self.group3()[1]) - (other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]) * swizzle!(self.group3(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[3], self.group1()[2], self.group1()[0], self.group3()[3]]) * swizzle!(other.group2(), 0, 0, 1, 3))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group1()[1] * self.group3()[2]) + (other.group1()[3] * self.group1()[0]) + (other.group2()[2] * self.group0()[1]) - (other.group2()[3] * self.group3()[0])),
                (-(other.group1()[1] * self.group1()[3])
                    + (other.group1()[2] * self.group3()[0])
                    + (other.group1()[3] * self.group1()[1])
                    + (other.group2()[1] * self.group3()[3])),
                ((other.group1()[0] * self.group3()[1]) - (other.group1()[2] * self.group1()[3]) + (other.group1()[3] * self.group1()[2]) + (other.group2()[2] * self.group3()[3])),
                (-(other.group2()[1] * self.group1()[1])
                    - (other.group2()[1] * self.group3()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 3, 2, 0, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group2(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group2(), 1, 3, 3, 1))
                - (Simd32x4::from([other.group1()[2], other.group2()[3], other.group2()[3], other.group2()[0]]) * swizzle!(self.group3(), 1, 1, 2, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[3], self.group3()[2], self.group3()[0], self.group2()[2]]) * swizzle!(other.group1(), 0, 0, 1, 2))
                + (Simd32x4::from([self.group3()[3], self.group0()[2], self.group0()[0], self.group2()[3]]) * swizzle!(other.group2(), 0, 0, 1, 3))),
        );
    }
}
impl GeometricAntiProduct<AntiDipoleInversion> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       88      104        0
    //    simd4       34       34        0
    // Totals...
    // yes simd      122      138        0
    //  no simd      224      240        0
    fn geometric_anti_product(self, other: AntiDipoleInversion) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3])
                    + (other.group1()[0] * self.group3()[3])
                    + (other.group1()[2] * self.group0()[1])
                    + (other.group1()[3] * self.group0()[0])
                    + (other.group3()[0] * self.group3()[3])
                    + (other.group3()[2] * self.group0()[1])),
                ((other.group0()[1] * self.group0()[3])
                    + (other.group1()[0] * self.group0()[2])
                    + (other.group1()[1] * self.group3()[3])
                    + (other.group1()[3] * self.group0()[1])
                    + (other.group3()[0] * self.group0()[2])
                    + (other.group3()[1] * self.group3()[3])),
                ((other.group0()[2] * self.group0()[3])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group3()[3])
                    + (other.group1()[3] * self.group0()[2])
                    + (other.group3()[1] * self.group0()[0])
                    + (other.group3()[2] * self.group3()[3])),
                (-(other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group0()[2])
                    - (other.group3()[0] * self.group3()[0])
                    - (other.group3()[1] * self.group3()[1])
                    - (other.group3()[2] * self.group3()[2])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group3()[2], self.group1()[1], self.group2()[0]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group1()[2], self.group1()[3], self.group3()[0], self.group2()[1]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group1()[3], self.group2()[2]]))
                + (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[3]]) * swizzle!(self.group3(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]) * swizzle!(self.group1(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group2()[1]]) * swizzle!(self.group0(), 2, 0, 1, 1))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[0]]) * swizzle!(other.group2(), 3, 3, 3, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[2] * self.group2()[1]) + (other.group1()[2] * self.group1()[1]) + (other.group1()[3] * self.group3()[0]) - (other.group2()[1] * self.group0()[2])
                    + (other.group3()[0] * self.group1()[3])
                    + (other.group3()[2] * self.group3()[1])
                    + (other.group3()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group2()[3]) + (other.group1()[3] * self.group3()[1]) - (other.group2()[2] * self.group0()[0])
                    + (other.group2()[3] * self.group2()[1])
                    + (other.group3()[0] * self.group3()[2])
                    + (other.group3()[1] * self.group1()[3])
                    + (other.group3()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group2()[3]) + (other.group1()[3] * self.group3()[2]) - (other.group2()[0] * self.group0()[1])
                    + (other.group2()[3] * self.group2()[2])
                    + (other.group3()[1] * self.group3()[0])
                    + (other.group3()[2] * self.group1()[3])
                    + (other.group3()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[2] * self.group3()[2])
                    - (other.group3()[0] * self.group1()[0])
                    - (other.group3()[1] * self.group1()[1])
                    - (other.group3()[2] * self.group1()[2])
                    - (other.group3()[3] * self.group3()[3])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group2(), 3, 2, 0, 3))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group2()[2], other.group1()[1], other.group1()[2], other.group2()[1]]) * swizzle!(self.group0(), 1, 3, 3, 1))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[1]]) * swizzle!(self.group3(), 2, 0, 1, 1))
                + (Simd32x4::from([self.group0()[3], self.group1()[2], self.group1()[0], self.group0()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group2()[0], self.group3()[3], self.group3()[3], self.group0()[2]]) * swizzle!(other.group2(), 3, 1, 2, 2))
                + (Simd32x4::from([self.group3()[3], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 0, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group2()[2] * self.group1()[1]) + (other.group2()[2] * self.group3()[1]) + (other.group3()[3] * self.group1()[0]) + (other.group3()[3] * self.group3()[0])),
                ((other.group2()[0] * self.group3()[2]) + (other.group2()[1] * self.group1()[3]) + (other.group3()[3] * self.group1()[1]) + (other.group3()[3] * self.group3()[1])),
                ((other.group2()[1] * self.group3()[0]) + (other.group2()[2] * self.group1()[3]) + (other.group3()[3] * self.group1()[2]) + (other.group3()[3] * self.group3()[2])),
                (-(other.group2()[1] * self.group1()[1])
                    - (other.group2()[1] * self.group3()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[2])),
            ]) + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                + (Simd32x4::from([other.group1()[0], other.group1()[0], other.group1()[1], other.group3()[0]]) * swizzle!(self.group2(), 3, 2, 0, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[1], other.group1()[2], other.group3()[1]]) * swizzle!(self.group2(), 1, 3, 3, 1))
                + (Simd32x4::from([other.group2()[0], other.group2()[0], other.group2()[1], other.group3()[3]]) * swizzle!(self.group1(), 3, 2, 0, 3))
                - (Simd32x4::from([other.group3()[0], other.group3()[0], other.group3()[1], other.group1()[2]]) * swizzle!(self.group2(), 3, 2, 0, 2))
                - (Simd32x4::from([other.group3()[2], other.group3()[1], other.group3()[2], other.group1()[3]]) * swizzle!(self.group2(), 1, 3, 3, 3))
                - (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group2(), 0, 1, 2, 1))
                - (swizzle!(other.group2(), 1, 2, 0, 0) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (swizzle!(other.group2(), 1, 2, 0, 0) * swizzle!(self.group3(), 2, 0, 1, 0))
                + (swizzle!(other.group3(), 1, 2, 0, 2) * swizzle!(self.group2(), 2, 0, 1, 2))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[1])
                    + (other.group1()[2] * self.group3()[1])
                    + (other.group1()[3] * self.group1()[0])
                    + (other.group2()[3] * self.group2()[0])
                    + (other.group3()[0] * self.group0()[3])
                    + (other.group3()[2] * self.group1()[1])
                    - (other.group3()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group2()[3]) - (other.group0()[2] * self.group2()[0])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[1])
                    - (other.group2()[1] * self.group3()[3])
                    + (other.group2()[3] * self.group2()[1])
                    + (other.group3()[0] * self.group1()[2])
                    + (other.group3()[1] * self.group0()[3])),
                (-(other.group0()[0] * self.group2()[1])
                    + (other.group0()[1] * self.group2()[0])
                    + (other.group0()[2] * self.group2()[3])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[3])
                    + (other.group2()[3] * self.group2()[2])
                    + (other.group3()[1] * self.group1()[0])
                    + (other.group3()[2] * self.group0()[3])),
                ((other.group0()[0] * self.group3()[0]) - (other.group0()[1] * self.group1()[1]) + (other.group0()[1] * self.group3()[1]) - (other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])
                    - (other.group1()[2] * self.group0()[2])
                    - (other.group3()[0] * self.group0()[0])
                    - (other.group3()[1] * self.group0()[1])
                    - (other.group3()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group2()[2], other.group3()[3], other.group3()[3], other.group1()[1]]) * swizzle!(self.group0(), 1, 1, 2, 1))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group1()[3], self.group3()[2], self.group3()[0], self.group3()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[3], self.group0()[2], self.group0()[0], self.group1()[3]]) * swizzle!(other.group2(), 0, 0, 1, 3))
                + (swizzle!(other.group2(), 1, 2, 0, 3) * swizzle!(self.group0(), 2, 0, 1, 3))),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum321> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        3        8        0
    // Totals...
    // yes simd        7       16        0
    //  no simd       16       40        0
    fn geometric_anti_product(self, other: AntiDualNum321) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (Simd32x4::from(other.group0()[1]) * self.group0())),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(other.group0()[0] * self.group3()[0]) + (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group1()[1])),
                (-(other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group1()[2])),
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group1()[3])),
            ]),
            // e15, e25, e35, e1234
            ((Simd32x4::from(other.group0()[0])
                * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(other.group0()[1])
                * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[3]])
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum4> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       27        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       11       29        0
    //  no simd       17       35        0
    fn geometric_anti_product(self, other: AntiDualNum4) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[0] * self.group3()[0]) * -1.0),
                ((other.group0()[0] * self.group3()[1]) * -1.0),
                ((other.group0()[0] * self.group3()[2]) * -1.0),
                0.0,
            ]) + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))
                + (Simd32x4::from(other.group0()[1]) * self.group0())),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group1()[2])),
                (-(other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group1()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[1] * self.group2()[0]),
                (other.group0()[1] * self.group2()[1]),
                (other.group0()[1] * self.group2()[2]),
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group3()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group2()[0]) - (other.group0()[1] * self.group3()[0])),
                (-(other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group3()[1])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group3()[2])),
                (other.group0()[1] * self.group2()[3]),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum5> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       23        0
    //    simd4        2        4        0
    // Totals...
    // yes simd       10       27        0
    //  no simd       16       39        0
    fn geometric_anti_product(self, other: AntiDualNum5) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                ((other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            ((Simd32x4::from(other.group0()[1]) * self.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group3()[3]]))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[0] * self.group3()[0]) + (other.group0()[1] * self.group2()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group2()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group2()[2])),
                (other.group0()[1] * self.group3()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group3()[0]) * -1.0),
                ((other.group0()[1] * self.group3()[1]) * -1.0),
                ((other.group0()[1] * self.group3()[2]) * -1.0),
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group2()[3])),
            ]) + (Simd32x4::from(other.group0()[0]) * self.group0())),
        );
    }
}
impl GeometricAntiProduct<AntiFlatPoint> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       36        0
    //    simd4        6        8        0
    // Totals...
    // yes simd       30       44        0
    //  no simd       48       68        0
    fn geometric_anti_product(self, other: AntiFlatPoint) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[3] * self.group0()[0]),
                (other.group0()[3] * self.group0()[1]),
                (other.group0()[3] * self.group0()[2]),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])
                    + (other.group0()[3] * self.group1()[3])),
            ]),
            // e415, e425, e435, e321
            ((swizzle!(other.group0(), 1, 2, 0, 3) * swizzle!(self.group0(), 2, 0, 1, 3) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from([self.group0()[1], self.group3()[3], self.group3()[3], self.group0()[1]]) * swizzle!(other.group0(), 2, 1, 2, 1))
                + (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group3()[3], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group0(), 0, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[0] * self.group1()[3]) + (other.group0()[2] * self.group1()[1]) + (other.group0()[2] * self.group3()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group0()[3]) + (other.group0()[1] * self.group1()[3])),
                ((other.group0()[1] * self.group1()[0]) + (other.group0()[1] * self.group3()[0]) + (other.group0()[2] * self.group0()[3]) + (other.group0()[2] * self.group1()[3])),
                (-(other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group3()[2])
                    - (other.group0()[3] * self.group2()[3])),
            ]) - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group3(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])
                    + (other.group0()[3] * self.group1()[0])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group3()[3])
                    + (other.group0()[2] * self.group0()[0])
                    + (other.group0()[3] * self.group1()[1])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) - (other.group0()[2] * self.group3()[3]) + (other.group0()[3] * self.group1()[2])),
                (other.group0()[3] * self.group3()[3]),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiFlector> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       29       44        0
    //    simd4       21       21        0
    // Totals...
    // yes simd       50       65        0
    //  no simd      113      128        0
    fn geometric_anti_product(self, other: AntiFlector) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (other.group1()[2] * self.group0()[1]),
                (other.group1()[1] * self.group3()[3]),
                (other.group1()[2] * self.group3()[3]),
                (-(other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group1()[0] * self.group3()[0])
                    - (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group3()[2])),
            ]) + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group3()[3], self.group0()[2], self.group0()[0], self.group3()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group1()[0] * self.group1()[3]) + (other.group1()[2] * self.group3()[1])),
                (-(other.group0()[2] * self.group0()[0]) + (other.group1()[0] * self.group3()[2]) + (other.group1()[1] * self.group1()[3])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group1()[1] * self.group3()[0]) + (other.group1()[2] * self.group1()[3])),
                (-(other.group1()[1] * self.group1()[1]) - (other.group1()[2] * self.group1()[2]) - (other.group1()[3] * self.group3()[3])),
            ]) + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[3]]) * self.group0())
                + (Simd32x4::from([self.group0()[1], self.group3()[3], self.group3()[3], self.group0()[1]]) * swizzle!(other.group0(), 2, 1, 2, 1))
                + (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group3()[3], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group0(), 0, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[2] * self.group1()[1]) + (other.group0()[2] * self.group3()[1]) - (other.group1()[2] * self.group2()[1])),
                ((other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group1()[3]) - (other.group1()[1] * self.group2()[3])),
                ((other.group0()[1] * self.group3()[0]) + (other.group0()[2] * self.group1()[3]) - (other.group1()[2] * self.group2()[3])),
                (-(other.group0()[1] * self.group3()[1]) - (other.group0()[2] * self.group1()[2]) - (other.group0()[2] * self.group3()[2])),
            ]) + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group1()[3]]) * swizzle!(self.group1(), 3, 2, 0, 3))
                - (Simd32x4::from([other.group1()[0], other.group1()[0], other.group1()[1], other.group0()[3]]) * swizzle!(self.group2(), 3, 2, 0, 3))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[2]]) * swizzle!(other.group1(), 3, 3, 3, 2))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group3(), 2, 0, 1, 0))
                + (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group2(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group3()[3])
                    + (other.group0()[3] * self.group1()[0])
                    + (other.group1()[0] * self.group0()[3])
                    + (other.group1()[2] * self.group1()[1])),
                (-(other.group0()[1] * self.group3()[3])
                    + (other.group0()[3] * self.group1()[1])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group0()[3])),
                (-(other.group0()[2] * self.group3()[3])
                    + (other.group0()[3] * self.group1()[2])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group0()[3])),
                0.0,
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))
                - (swizzle!(other.group1(), 3, 3, 3, 2) * swizzle!(self.group0(), 0, 1, 2, 2))),
        );
    }
}
impl GeometricAntiProduct<AntiLine> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       60       76        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       65       81        0
    //  no simd       80       96        0
    fn geometric_anti_product(self, other: AntiLine) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group3()[3])),
                ((other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group3()[3])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[3]) - (other.group0()[2] * self.group1()[0]) + (other.group1()[0] * self.group0()[2])),
                (-(other.group0()[0] * self.group1()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group0()[3])
                    + (other.group1()[1] * self.group0()[0])),
                ((other.group0()[1] * self.group3()[1]) + (other.group0()[2] * self.group3()[2]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[1])
                    + (other.group1()[0] * self.group0()[3])
                    + (other.group1()[0] * self.group1()[3])
                    - (other.group1()[1] * self.group1()[2])
                    - (other.group1()[1] * self.group3()[2])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group1()[2] * self.group3()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group2()[3]) - (other.group0()[2] * self.group2()[0])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[0] * self.group3()[2])
                    + (other.group1()[1] * self.group0()[3])
                    + (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group1()[0])
                    - (other.group1()[2] * self.group3()[0])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) + (other.group0()[2] * self.group2()[3])
                    - (other.group1()[0] * self.group1()[1])
                    - (other.group1()[0] * self.group3()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[1] * self.group3()[0])
                    + (other.group1()[2] * self.group0()[3])
                    + (other.group1()[2] * self.group1()[3])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group3()[2]) + (other.group1()[0] * self.group3()[3]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[2] * self.group3()[0]) + (other.group1()[0] * self.group0()[2]) + (other.group1()[1] * self.group3()[3]) - (other.group1()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group3()[1]) - (other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0]) + (other.group1()[2] * self.group3()[3])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[2] * self.group3()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<AntiMotor> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       44       60        0
    //    simd4       17       17        0
    // Totals...
    // yes simd       61       77        0
    //  no simd      112      128        0
    fn geometric_anti_product(self, other: AntiMotor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) + (other.group0()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group3()[3]) + (other.group0()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group3()[3]) + (other.group0()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])
                    + (other.group1()[3] * self.group3()[3])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group3()[3], self.group0()[2], self.group0()[0], self.group0()[3]]) * swizzle!(other.group0(), 0, 0, 1, 3))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group1()[2] * self.group0()[1]) + (other.group1()[3] * self.group0()[0])),
                ((other.group1()[1] * self.group3()[3]) + (other.group1()[3] * self.group0()[1])),
                ((other.group1()[2] * self.group3()[3]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[3], self.group1()[2], self.group1()[0], self.group3()[0]]) * swizzle!(other.group0(), 0, 0, 1, 0))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group1()[1], self.group0()[3], self.group0()[3], self.group3()[1]]) * swizzle!(other.group0(), 2, 1, 2, 1))
                + (Simd32x4::from([self.group3()[3], self.group0()[2], self.group0()[0], self.group3()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))
                - (swizzle!(other.group0(), 1, 2, 0, 3) * swizzle!(self.group1(), 2, 0, 1, 3))
                - (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group0()[2] * self.group2()[1]) + (other.group0()[3] * self.group2()[0]) + (other.group1()[0] * self.group0()[3]) + (other.group1()[0] * self.group1()[3])
                    - (other.group1()[1] * self.group1()[2])
                    - (other.group1()[1] * self.group3()[2])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group1()[2] * self.group3()[1])
                    + (other.group1()[3] * self.group1()[0])
                    + (other.group1()[3] * self.group3()[0])),
                ((other.group0()[1] * self.group2()[3])
                    + (other.group0()[3] * self.group2()[1])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[0] * self.group3()[2])
                    + (other.group1()[1] * self.group0()[3])
                    + (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group1()[0])
                    - (other.group1()[2] * self.group3()[0])
                    + (other.group1()[3] * self.group1()[1])
                    + (other.group1()[3] * self.group3()[1])),
                ((other.group0()[2] * self.group2()[3]) + (other.group0()[3] * self.group2()[2]) - (other.group1()[0] * self.group1()[1]) - (other.group1()[0] * self.group3()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[1] * self.group3()[0])
                    + (other.group1()[2] * self.group0()[3])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])
                    + (other.group1()[3] * self.group3()[2])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group2()[3], self.group2()[2], self.group2()[0], self.group3()[3]]) * swizzle!(other.group0(), 0, 0, 1, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (other.group1()[3] * self.group0()[0]),
                (other.group1()[3] * self.group0()[1]),
                (other.group1()[3] * self.group0()[2]),
                (-(other.group1()[0] * self.group3()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[2] * self.group3()[2])),
            ]) + (Simd32x4::from([self.group0()[1], self.group3()[3], self.group3()[3], self.group1()[3]]) * swizzle!(other.group1(), 2, 1, 2, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[3], self.group3()[2], self.group3()[0], self.group2()[0]]) * swizzle!(other.group0(), 0, 0, 1, 0))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group3()[1], self.group1()[3], self.group1()[3], self.group2()[1]]) * swizzle!(other.group0(), 2, 1, 2, 1))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group3()[3], self.group0()[2], self.group0()[0], self.group0()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))),
        );
    }
}
impl GeometricAntiProduct<AntiPlane> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       33        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       24       41        0
    //  no simd       48       65        0
    fn geometric_anti_product(self, other: AntiPlane) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (other.group0()[2] * self.group0()[1]),
                (other.group0()[1] * self.group3()[3]),
                (other.group0()[2] * self.group3()[3]),
                (-(other.group0()[1] * self.group3()[1]) - (other.group0()[2] * self.group3()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group3()[3], self.group0()[2], self.group0()[0], self.group3()[3]]) * swizzle!(other.group0(), 0, 0, 1, 3))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[2] * self.group3()[1]) + (other.group0()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group1()[3]) + (other.group0()[3] * self.group0()[1])),
                ((other.group0()[1] * self.group3()[0]) + (other.group0()[2] * self.group1()[3]) + (other.group0()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2]) - (other.group0()[3] * self.group3()[3])),
            ]) - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(other.group0()[0] * self.group2()[3]) - (other.group0()[2] * self.group2()[1])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group2()[3])),
                (-(other.group0()[1] * self.group2()[0]) - (other.group0()[2] * self.group2()[3])),
                ((other.group0()[3] * self.group0()[3]) + (other.group0()[3] * self.group1()[3])),
            ]) + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                + (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group2(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[3])),
                ((other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group0()[3])),
                ((other.group0()[2] * self.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (swizzle!(other.group0(), 3, 3, 3, 1) * swizzle!(self.group0(), 0, 1, 2, 1))),
        );
    }
}
impl GeometricAntiProduct<AntiQuadNum> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       16        0
    //    simd4       10       14        0
    // Totals...
    // yes simd       18       30        0
    //  no simd       48       72        0
    fn geometric_anti_product(self, other: AntiQuadNum) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((swizzle!(other.group0(), 2, 2, 2, 3) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group3()[3]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group1()[3]]) * swizzle!(other.group0(), 0, 0, 0, 2))),
            // e23, e31, e12, e45
            ((Simd32x4::from(other.group0()[3]) * self.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]) * swizzle!(other.group0(), 0, 0, 0, 1))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[3]]) * swizzle!(other.group0(), 2, 2, 2, 0))
                + (swizzle!(other.group0(), 1, 1, 1, 2) * self.group0())),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group0()[2] * self.group2()[0]) + (other.group0()[3] * self.group2()[0])),
                ((other.group0()[2] * self.group2()[1]) + (other.group0()[3] * self.group2()[1])),
                ((other.group0()[2] * self.group2()[2]) + (other.group0()[3] * self.group2()[2])),
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[2] * self.group3()[3])),
            ]) + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]) * swizzle!(other.group0(), 1, 1, 1, 0))
                + (swizzle!(other.group0(), 1, 1, 1, 3) * self.group3())),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group0()[0] * self.group2()[0]) - (other.group0()[3] * self.group3()[0])),
                (-(other.group0()[0] * self.group2()[1]) - (other.group0()[3] * self.group3()[1])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[3] * self.group3()[2])),
                ((other.group0()[2] * self.group2()[3]) + (other.group0()[3] * self.group2()[3])),
            ]) + (Simd32x4::from(other.group0()[1]) * self.group0())
                + (swizzle!(other.group0(), 2, 2, 2, 1) * self.group1())),
        );
    }
}
impl GeometricAntiProduct<AntiScalar> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn geometric_anti_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(other[e12345]) * self.group0()),
            // e415, e425, e435, e321
            (Simd32x4::from(other[e12345]) * self.group1()),
            // e235, e315, e125, e5
            (Simd32x4::from(other[e12345]) * self.group2()),
            // e1, e2, e3, e4
            (Simd32x4::from(other[e12345]) * self.group3()),
        );
    }
}
impl GeometricAntiProduct<AntiTripleNum> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       24        0
    //    simd4        5        7        0
    // Totals...
    // yes simd       17       31        0
    //  no simd       32       52        0
    fn geometric_anti_product(self, other: AntiTripleNum) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]]) * self.group3() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))
                + (Simd32x4::from(other.group0()[2]) * self.group0())),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[2] * self.group1()[2])),
                (-(other.group0()[0] * self.group2()[3]) - (other.group0()[2] * self.group1()[3])),
            ]) + (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group3()[3]]))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group2()[0])),
                ((other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group2()[1])),
                ((other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group2()[2])),
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[0] * self.group1()[3])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group0()[2]]) * self.group3())),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group0()[0] * self.group2()[0]) - (other.group0()[2] * self.group3()[0])),
                (-(other.group0()[0] * self.group2()[1]) - (other.group0()[2] * self.group3()[1])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group3()[2])),
                ((other.group0()[1] * self.group1()[3]) + (other.group0()[2] * self.group2()[3])),
            ]) + (Simd32x4::from(other.group0()[1]) * self.group0())),
        );
    }
}
impl GeometricAntiProduct<Circle> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       80       96        0
    //    simd4       16       16        0
    // Totals...
    // yes simd       96      112        0
    //  no simd      144      160        0
    fn geometric_anti_product(self, other: Circle) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3])
                    + (other.group0()[1] * self.group3()[2])
                    + (other.group1()[0] * self.group3()[3])
                    + (other.group1()[2] * self.group0()[1])
                    + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[3])
                    + (other.group0()[2] * self.group3()[0])
                    + (other.group1()[0] * self.group0()[2])
                    + (other.group1()[1] * self.group3()[3])
                    + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[0] * self.group3()[1])
                    + (other.group0()[2] * self.group0()[3])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group3()[3])
                    + (other.group1()[3] * self.group0()[2])),
                (-(other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group3()[2], self.group1()[1], self.group2()[0]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group1()[2], self.group1()[3], self.group3()[0], self.group2()[1]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group1()[3], self.group2()[2]]))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]) * swizzle!(self.group1(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[0] * self.group2()[3]) + (other.group0()[2] * self.group2()[1]) + (other.group2()[0] * self.group3()[3]) - (other.group2()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group1()[3] * self.group3()[0])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group2()[3]) + (other.group2()[1] * self.group3()[3]) - (other.group2()[2] * self.group0()[0])
                    + (other.group1()[1] * self.group0()[3])
                    + (other.group1()[3] * self.group3()[1])),
                ((other.group0()[1] * self.group2()[0]) + (other.group0()[2] * self.group2()[3]) - (other.group2()[0] * self.group0()[1])
                    + (other.group2()[2] * self.group3()[3])
                    + (other.group1()[2] * self.group0()[3])
                    + (other.group1()[3] * self.group3()[2])),
                (-(other.group0()[1] * self.group2()[1]) - (other.group0()[2] * self.group2()[2])
                    + (other.group2()[1] * self.group0()[1])
                    + (other.group2()[2] * self.group0()[2])
                    - (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group3()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[3], self.group1()[2], self.group1()[0], self.group0()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group2()[0] * self.group0()[3])
                    + (other.group2()[0] * self.group1()[3])
                    + (other.group2()[2] * self.group1()[1])
                    + (other.group2()[2] * self.group3()[1])
                    + (other.group1()[0] * self.group2()[3])
                    + (other.group1()[2] * self.group2()[1])),
                ((other.group2()[0] * self.group1()[2])
                    + (other.group2()[0] * self.group3()[2])
                    + (other.group2()[1] * self.group0()[3])
                    + (other.group2()[1] * self.group1()[3])
                    + (other.group1()[0] * self.group2()[2])
                    + (other.group1()[1] * self.group2()[3])),
                ((other.group2()[1] * self.group1()[0])
                    + (other.group2()[1] * self.group3()[0])
                    + (other.group2()[2] * self.group0()[3])
                    + (other.group2()[2] * self.group1()[3])
                    + (other.group1()[1] * self.group2()[0])
                    + (other.group1()[2] * self.group2()[3])),
                (-(other.group2()[1] * self.group1()[1])
                    - (other.group2()[1] * self.group3()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[2])
                    - (other.group1()[2] * self.group2()[2])
                    - (other.group1()[3] * self.group2()[3])),
            ]) - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group2()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group2()[0]]) * swizzle!(self.group3(), 2, 0, 1, 0))
                - (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group2(), 0, 1, 2, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1]) - (other.group2()[0] * self.group3()[3])
                    + (other.group2()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group3()[1])
                    + (other.group1()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group2()[3]) - (other.group0()[2] * self.group2()[0]) - (other.group2()[1] * self.group3()[3])
                    + (other.group2()[2] * self.group0()[0])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[1])
                    + (other.group0()[1] * self.group2()[0])
                    + (other.group0()[2] * self.group2()[3])
                    + (other.group2()[0] * self.group0()[1])
                    - (other.group2()[2] * self.group3()[3])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])),
                (-(other.group0()[0] * self.group1()[0]) + (other.group0()[0] * self.group3()[0]) - (other.group0()[1] * self.group1()[1])
                    + (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])
                    - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[3], self.group3()[2], self.group3()[0], self.group3()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group0()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))),
        );
    }
}
impl GeometricAntiProduct<CircleRotor> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       68       84        0
    //    simd4       23       23        0
    // Totals...
    // yes simd       91      107        0
    //  no simd      160      176        0
    fn geometric_anti_product(self, other: CircleRotor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[1] * self.group3()[2])
                    + (other.group1()[0] * self.group3()[3])
                    + (other.group1()[2] * self.group0()[1])
                    + (other.group1()[3] * self.group0()[0])
                    + (other.group2()[3] * self.group0()[0])),
                ((other.group0()[2] * self.group3()[0])
                    + (other.group1()[0] * self.group0()[2])
                    + (other.group1()[1] * self.group3()[3])
                    + (other.group1()[3] * self.group0()[1])
                    + (other.group2()[3] * self.group0()[1])),
                ((other.group0()[0] * self.group3()[1])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group3()[3])
                    + (other.group1()[3] * self.group0()[2])
                    + (other.group2()[3] * self.group0()[2])),
                (-(other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group3()[2], self.group1()[1], self.group2()[0]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group1()[2], self.group1()[3], self.group3()[0], self.group2()[1]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group1()[3], self.group2()[2]]))
                + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]) * swizzle!(self.group1(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[0] * self.group2()[3]) + (other.group0()[2] * self.group2()[1]) + (other.group1()[3] * self.group3()[0]) - (other.group2()[1] * self.group0()[2])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group2()[3]) + (other.group1()[3] * self.group3()[1]) - (other.group2()[2] * self.group0()[0])),
                ((other.group0()[1] * self.group2()[0]) + (other.group0()[2] * self.group2()[3]) + (other.group1()[3] * self.group3()[2]) - (other.group2()[0] * self.group0()[1])),
                (-(other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group3()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group1()[2], other.group2()[3], other.group2()[3], other.group2()[3]]) * swizzle!(self.group1(), 1, 1, 2, 3))
                + (Simd32x4::from([other.group2()[2], other.group1()[1], other.group1()[2], other.group2()[1]]) * swizzle!(self.group0(), 1, 3, 3, 1))
                + (Simd32x4::from([self.group0()[3], self.group1()[2], self.group1()[0], self.group0()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))
                + (Simd32x4::from([self.group1()[0], self.group3()[3], self.group3()[3], self.group0()[2]]) * swizzle!(other.group2(), 3, 1, 2, 2))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group3()[3], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 0, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group1()[2] * self.group2()[1])
                    + (other.group2()[0] * self.group0()[3])
                    + (other.group2()[0] * self.group1()[3])
                    + (other.group2()[2] * self.group1()[1])
                    + (other.group2()[2] * self.group3()[1])
                    + (other.group2()[3] * self.group2()[0])),
                ((other.group1()[1] * self.group2()[3])
                    + (other.group2()[0] * self.group1()[2])
                    + (other.group2()[0] * self.group3()[2])
                    + (other.group2()[1] * self.group0()[3])
                    + (other.group2()[1] * self.group1()[3])
                    + (other.group2()[3] * self.group2()[1])),
                ((other.group1()[2] * self.group2()[3])
                    + (other.group2()[1] * self.group1()[0])
                    + (other.group2()[1] * self.group3()[0])
                    + (other.group2()[2] * self.group0()[3])
                    + (other.group2()[2] * self.group1()[3])
                    + (other.group2()[3] * self.group2()[2])),
                (-(other.group1()[2] * self.group2()[2])
                    - (other.group1()[3] * self.group2()[3])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[1] * self.group3()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[2])),
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[0], other.group1()[1], other.group2()[3]]) * swizzle!(self.group2(), 3, 2, 0, 3))
                - (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group2(), 0, 1, 2, 1))
                - (swizzle!(other.group2(), 1, 2, 0, 0) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (swizzle!(other.group2(), 1, 2, 0, 0) * swizzle!(self.group3(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1]) + (other.group1()[3] * self.group1()[0])
                    - (other.group2()[0] * self.group3()[3])
                    + (other.group2()[3] * self.group3()[0])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group2()[3]) - (other.group0()[2] * self.group2()[0])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[1])
                    - (other.group2()[1] * self.group3()[3])),
                (-(other.group0()[0] * self.group2()[1])
                    + (other.group0()[1] * self.group2()[0])
                    + (other.group0()[2] * self.group2()[3])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[3])),
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group1()[1]) + (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])
                    - (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group1()[2], other.group2()[3], other.group2()[3], other.group0()[0]]) * swizzle!(self.group3(), 1, 1, 2, 0))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[3]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group1()[3], self.group3()[2], self.group3()[0], self.group3()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<Dipole> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       64       80        0
    //    simd4       20       20        0
    // Totals...
    // yes simd       84      100        0
    //  no simd      144      160        0
    fn geometric_anti_product(self, other: Dipole) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3])
                    + (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (other.group1()[0] * self.group3()[3])
                    + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2])
                    + (other.group0()[1] * self.group0()[3])
                    + (other.group0()[2] * self.group3()[0])
                    + (other.group1()[0] * self.group0()[2])
                    + (other.group1()[1] * self.group3()[3])),
                ((other.group0()[0] * self.group3()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group0()[3])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group3()[3])),
                (-(other.group2()[2] * self.group0()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group3()[2], self.group1()[1], self.group2()[0]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group1()[2], self.group1()[3], self.group3()[0], self.group2()[1]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group1()[3], self.group2()[2]]))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) - (other.group1()[1] * self.group1()[2]) - (other.group1()[3] * self.group3()[0])),
                (-(other.group0()[2] * self.group2()[0]) - (other.group1()[2] * self.group1()[0]) - (other.group1()[3] * self.group3()[1])),
                (-(other.group0()[0] * self.group2()[1]) - (other.group1()[0] * self.group1()[1]) - (other.group1()[3] * self.group3()[2])),
                ((other.group0()[2] * self.group2()[2]) - (other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 3, 2, 0, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[1], other.group0()[2], other.group0()[1]]) * swizzle!(self.group2(), 1, 3, 3, 1))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group2()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group0()[3], self.group1()[2], self.group1()[0], self.group3()[1]]) * swizzle!(other.group1(), 0, 0, 1, 1))
                + (Simd32x4::from([self.group1()[1], self.group0()[3], self.group0()[3], self.group3()[2]]) * swizzle!(other.group1(), 2, 1, 2, 2))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group2()[0] * self.group0()[3])
                    + (other.group2()[0] * self.group1()[3])
                    + (other.group2()[2] * self.group1()[1])
                    + (other.group1()[0] * self.group2()[3])
                    + (other.group1()[2] * self.group2()[1])
                    + (other.group1()[3] * self.group2()[0])),
                ((other.group2()[0] * self.group1()[2])
                    + (other.group2()[1] * self.group0()[3])
                    + (other.group2()[1] * self.group1()[3])
                    + (other.group1()[0] * self.group2()[2])
                    + (other.group1()[1] * self.group2()[3])
                    + (other.group1()[3] * self.group2()[1])),
                ((other.group2()[1] * self.group1()[0])
                    + (other.group2()[2] * self.group0()[3])
                    + (other.group2()[2] * self.group1()[3])
                    + (other.group1()[1] * self.group2()[0])
                    + (other.group1()[2] * self.group2()[3])
                    + (other.group1()[3] * self.group2()[2])),
                (-(other.group0()[1] * self.group1()[1]) + (other.group0()[1] * self.group3()[1]) - (other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]) * swizzle!(self.group3(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group2()[0] * self.group3()[3]) - (other.group2()[1] * self.group0()[2]) + (other.group2()[2] * self.group0()[1]) + (other.group1()[1] * self.group3()[2])
                    - (other.group1()[2] * self.group3()[1])
                    + (other.group1()[3] * self.group1()[0])),
                ((other.group2()[0] * self.group0()[2]) + (other.group2()[1] * self.group3()[3]) - (other.group2()[2] * self.group0()[0]) - (other.group1()[1] * self.group1()[3])
                    + (other.group1()[2] * self.group3()[0])
                    + (other.group1()[3] * self.group1()[1])),
                (-(other.group2()[0] * self.group0()[1])
                    + (other.group2()[1] * self.group0()[0])
                    + (other.group2()[2] * self.group3()[3])
                    + (other.group1()[0] * self.group3()[1])
                    - (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])),
                (-(other.group2()[0] * self.group1()[0])
                    - (other.group2()[0] * self.group3()[0])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[1] * self.group3()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 3, 2, 0, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group2(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group2(), 1, 3, 3, 1))
                - (Simd32x4::from([self.group1()[3], self.group3()[2], self.group3()[0], self.group2()[2]]) * swizzle!(other.group1(), 0, 0, 1, 2))),
        );
    }
}
impl GeometricAntiProduct<DipoleInversion> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       72        0
    //    simd4       42       42        0
    // Totals...
    // yes simd       98      114        0
    //  no simd      224      240        0
    fn geometric_anti_product(self, other: DipoleInversion) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[2] * self.group1()[1]) + (other.group1()[2] * self.group0()[1]) - (other.group3()[0] * self.group3()[3])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[3]) + (other.group1()[0] * self.group0()[2]) - (other.group3()[1] * self.group3()[3])),
                ((other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group0()[3]) + (other.group1()[1] * self.group0()[0]) - (other.group3()[2] * self.group3()[3])),
                (-(other.group1()[2] * self.group1()[2]) - (other.group1()[3] * self.group1()[3]) - (other.group2()[2] * self.group0()[2])
                    + (other.group3()[3] * self.group3()[3])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group3()[2], self.group1()[1], self.group2()[0]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group1()[2], self.group1()[3], self.group3()[0], self.group2()[1]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group1()[3], self.group2()[2]]))
                + (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group3(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[1]]) * swizzle!(self.group3(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group2()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[2]]) * swizzle!(other.group3(), 1, 2, 0, 2))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[0]]) * swizzle!(other.group2(), 3, 3, 3, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(other.group1()[3] * self.group3()[0]) + (other.group3()[3] * self.group0()[0])),
                (-(other.group1()[3] * self.group3()[1]) + (other.group3()[3] * self.group0()[1])),
                (-(other.group1()[3] * self.group3()[2]) + (other.group3()[3] * self.group0()[2])),
                (-(other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 3, 2, 0, 0))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group2()[3]]) * swizzle!(self.group2(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[1], other.group0()[2], other.group0()[1]]) * swizzle!(self.group2(), 1, 3, 3, 1))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[2]]) * swizzle!(self.group3(), 3, 3, 3, 2))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[2]]) * swizzle!(self.group2(), 0, 1, 2, 2))
                + (Simd32x4::from([self.group0()[3], self.group1()[2], self.group1()[0], self.group3()[0]]) * swizzle!(other.group1(), 0, 0, 1, 0))
                + (Simd32x4::from([self.group1()[1], self.group0()[3], self.group0()[3], self.group3()[1]]) * swizzle!(other.group1(), 2, 1, 2, 1))
                - (Simd32x4::from([self.group1()[3], self.group3()[2], self.group3()[0], self.group1()[1]]) * swizzle!(other.group3(), 0, 0, 1, 1))
                - (Simd32x4::from([self.group3()[1], self.group1()[3], self.group1()[3], self.group1()[2]]) * swizzle!(other.group3(), 2, 1, 2, 2))
                - (swizzle!(other.group2(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (swizzle!(other.group3(), 1, 2, 0, 3) * swizzle!(self.group3(), 2, 0, 1, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group1()[0] * self.group2()[3])
                    + (other.group1()[2] * self.group2()[1])
                    + (other.group1()[3] * self.group2()[0])
                    + (other.group2()[0] * self.group1()[3])
                    + (other.group2()[2] * self.group1()[1])
                    - (other.group3()[1] * self.group2()[2])),
                ((other.group1()[0] * self.group2()[2])
                    + (other.group1()[1] * self.group2()[3])
                    + (other.group1()[3] * self.group2()[1])
                    + (other.group2()[1] * self.group0()[3])
                    + (other.group2()[1] * self.group1()[3])
                    - (other.group3()[2] * self.group2()[0])),
                ((other.group1()[1] * self.group2()[0])
                    + (other.group1()[2] * self.group2()[3])
                    + (other.group1()[3] * self.group2()[2])
                    + (other.group2()[2] * self.group0()[3])
                    + (other.group2()[2] * self.group1()[3])
                    - (other.group3()[0] * self.group2()[1])),
                (-(other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2]) + (other.group0()[2] * self.group3()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])
                    - (other.group2()[3] * self.group1()[3])),
            ]) - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]) * swizzle!(self.group3(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group0()[1]]) * swizzle!(self.group3(), 0, 1, 2, 1))
                + (Simd32x4::from([self.group0()[3], self.group1()[2], self.group1()[0], self.group0()[3]]) * swizzle!(other.group2(), 0, 0, 1, 3))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[2]]) * swizzle!(other.group3(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group2()[1], self.group2()[3], self.group2()[3], self.group0()[1]]) * swizzle!(other.group3(), 2, 1, 2, 1))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group2()[3], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group3(), 0, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group1()[1] * self.group3()[2]) - (other.group1()[2] * self.group3()[1])
                    + (other.group2()[0] * self.group3()[3])
                    + (other.group3()[0] * self.group0()[3])
                    + (other.group3()[2] * self.group1()[1])
                    + (other.group3()[3] * self.group0()[0])),
                ((other.group1()[2] * self.group3()[0]) + (other.group2()[1] * self.group3()[3]) + (other.group3()[0] * self.group1()[2]) + (other.group3()[1] * self.group0()[3])
                    - (other.group3()[2] * self.group1()[0])
                    + (other.group3()[3] * self.group0()[1])),
                ((other.group1()[0] * self.group3()[1]) + (other.group2()[2] * self.group3()[3]) - (other.group3()[0] * self.group1()[1])
                    + (other.group3()[1] * self.group1()[0])
                    + (other.group3()[2] * self.group0()[3])
                    + (other.group3()[3] * self.group0()[2])),
                (-(other.group2()[1] * self.group3()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[2])
                    - (other.group3()[0] * self.group2()[0])
                    - (other.group3()[1] * self.group2()[1])
                    - (other.group3()[2] * self.group2()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 3, 2, 0, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group2(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group2(), 1, 3, 3, 1))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group3()[3]]) * self.group1())
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group3()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group3()[1], other.group1()[1], other.group1()[2], other.group2()[1]]) * swizzle!(self.group1(), 2, 3, 3, 1))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[3], self.group3()[2], self.group3()[0], self.group2()[2]]) * swizzle!(other.group1(), 0, 0, 1, 2))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[0]]) * swizzle!(other.group2(), 3, 3, 3, 0))),
        );
    }
}
impl GeometricAntiProduct<DualNum321> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        4        8        0
    // no simd       16       32        0
    fn geometric_anti_product(self, other: DualNum321) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (Simd32x4::from(other.group0()[1]) * self.group0())),
            // e415, e425, e435, e321
            ((Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[3]]))
                + (Simd32x4::from(other.group0()[1]) * self.group1())),
            // e235, e315, e125, e5
            (-(Simd32x4::from(other.group0()[0]) * self.group2()) + (Simd32x4::from(other.group0()[1]) * self.group2())),
            // e1, e2, e3, e4
            ((Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                + (Simd32x4::from(other.group0()[1]) * self.group3())),
        );
    }
}
impl GeometricAntiProduct<DualNum4> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        8        0
    //    simd4        5        7        0
    // Totals...
    // yes simd        5       15        0
    //  no simd       20       36        0
    fn geometric_anti_product(self, other: DualNum4) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[0] * self.group3()[0]) * -1.0),
                ((other.group0()[0] * self.group3()[1]) * -1.0),
                ((other.group0()[0] * self.group3()[2]) * -1.0),
                0.0,
            ]) + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))
                + (Simd32x4::from(other.group0()[1]) * self.group0())),
            // e415, e425, e435, e321
            ((Simd32x4::from(other.group0()[0]) * self.group2()) + (Simd32x4::from(other.group0()[1]) * self.group1())),
            // e235, e315, e125, e5
            (Simd32x4::from(other.group0()[1]) * self.group2()),
            // e1, e2, e3, e4
            (Simd32x4::from([0.0, 0.0, 0.0, ((other.group0()[0] * self.group1()[3]) * -1.0)])
                + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[3]]))
                + (Simd32x4::from(other.group0()[1]) * self.group3())),
        );
    }
}
impl GeometricAntiProduct<DualNum5> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       12        0
    //    simd4        3        6        0
    // Totals...
    // yes simd        7       18        0
    //  no simd       16       36        0
    fn geometric_anti_product(self, other: DualNum5) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                ((other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            ((Simd32x4::from(other.group0()[0])
                * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group3()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(other.group0()[1]) * self.group1())),
            // e235, e315, e125, e5
            ((Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]))
                + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group1()[3]]))
                + (Simd32x4::from(other.group0()[1]) * self.group2())),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group3()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group3()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group3()[2])),
                (other.group0()[1] * self.group3()[3]),
            ]),
        );
    }
}
impl GeometricAntiProduct<FlatPoint> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       44        0
    //    simd4        5        7        0
    // Totals...
    // yes simd       33       51        0
    //  no simd       48       72        0
    fn geometric_anti_product(self, other: FlatPoint) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[3] * self.group0()[0] * -1.0),
                (other.group0()[3] * self.group0()[1] * -1.0),
                (other.group0()[3] * self.group0()[2] * -1.0),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group0()[3] * self.group1()[3])),
            ]),
            // e23, e31, e12, e45
            ((Simd32x4::from([self.group0()[1], self.group3()[3], self.group3()[3], self.group0()[2]])
                * swizzle!(other.group0(), 2, 1, 2, 2)
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group3()[3], self.group0()[2], self.group0()[0], self.group0()[3]]) * swizzle!(other.group0(), 0, 0, 1, 3))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2]) - (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (other.group0()[2] * self.group3()[1])
                    + (other.group0()[3] * self.group2()[0])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group0()[3]) + (other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group1()[0])
                    - (other.group0()[2] * self.group3()[0])
                    + (other.group0()[3] * self.group2()[1])),
                (-(other.group0()[0] * self.group1()[1]) - (other.group0()[0] * self.group3()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group0()[3])
                    + (other.group0()[2] * self.group1()[3])
                    + (other.group0()[3] * self.group2()[2])),
                (other.group0()[3] * self.group3()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) + (other.group0()[3] * self.group1()[0])),
                ((other.group0()[1] * self.group3()[3]) + (other.group0()[3] * self.group1()[1])),
                ((other.group0()[2] * self.group3()[3]) + (other.group0()[3] * self.group1()[2])),
                (-(other.group0()[0] * self.group3()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group3()[2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group3()[3], self.group0()[2], self.group0()[0], self.group2()[3]]) * swizzle!(other.group0(), 0, 0, 1, 3))),
        );
    }
}
impl GeometricAntiProduct<Flector> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       41       59        0
    //    simd4       18       18        0
    // Totals...
    // yes simd       59       77        0
    //  no simd      113      131        0
    fn geometric_anti_product(self, other: Flector) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group1()[0] * self.group3()[3]) * -1.0),
                ((other.group1()[1] * self.group3()[3]) * -1.0),
                ((other.group1()[2] * self.group3()[3]) * -1.0),
                (-(other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self.group1()[3])
                    + (other.group1()[1] * self.group3()[1])
                    + (other.group1()[2] * self.group3()[2])
                    + (other.group1()[3] * self.group3()[3])),
            ]) - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (swizzle!(other.group0(), 3, 3, 3, 0) * swizzle!(self.group0(), 0, 1, 2, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) + (other.group1()[3] * self.group0()[0])),
                ((other.group1()[2] * self.group3()[0]) + (other.group1()[3] * self.group0()[1])),
                ((other.group1()[0] * self.group3()[1]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[2] * self.group0()[2]) - (other.group1()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([other.group1()[1], other.group0()[1], other.group0()[2], other.group1()[3]]) * swizzle!(self.group3(), 2, 3, 3, 3))
                - (Simd32x4::from([self.group1()[3], self.group3()[2], self.group3()[0], self.group1()[0]]) * swizzle!(other.group1(), 0, 0, 1, 0))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group3()[1], self.group1()[3], self.group1()[3], self.group1()[1]]) * swizzle!(other.group1(), 2, 1, 2, 1))
                + (Simd32x4::from([self.group3()[3], self.group0()[2], self.group0()[0], self.group0()[3]]) * swizzle!(other.group0(), 0, 0, 1, 3))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (other.group0()[2] * self.group3()[1])
                    + (other.group0()[3] * self.group2()[0])
                    - (other.group1()[1] * self.group2()[2])
                    + (other.group1()[3] * self.group1()[0])
                    + (other.group1()[3] * self.group3()[0])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group3()[0])
                    + (other.group0()[3] * self.group2()[1])
                    - (other.group1()[2] * self.group2()[0])
                    + (other.group1()[3] * self.group1()[1])
                    + (other.group1()[3] * self.group3()[1])),
                (-(other.group0()[0] * self.group3()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (other.group0()[3] * self.group2()[2])
                    - (other.group1()[0] * self.group2()[1])
                    + (other.group1()[3] * self.group1()[2])
                    + (other.group1()[3] * self.group3()[2])),
                0.0,
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group2()[1], self.group2()[3], self.group2()[3], self.group0()[2]]) * swizzle!(other.group1(), 2, 1, 2, 2))
                + (Simd32x4::from([self.group2()[3], self.group2()[2], self.group2()[0], self.group0()[1]]) * swizzle!(other.group1(), 0, 0, 1, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group1()[0] * self.group0()[3]) + (other.group1()[2] * self.group1()[1]) + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group3()[3]) + (other.group1()[0] * self.group1()[2]) + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group3()[3]) + (other.group1()[1] * self.group1()[0]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[0] * self.group3()[0])
                    - (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group3()[2])
                    - (other.group1()[0] * self.group2()[0])
                    - (other.group1()[1] * self.group2()[1])
                    - (other.group1()[2] * self.group2()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group1()[1], other.group1()[2], other.group1()[3]]) * swizzle!(self.group0(), 1, 3, 3, 3))
                + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other.group1()[3]]) * self.group1())
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[1]]) * swizzle!(self.group1(), 2, 0, 1, 1))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group3()[3], self.group0()[2], self.group0()[0], self.group2()[3]]) * swizzle!(other.group0(), 0, 0, 1, 3))),
        );
    }
}
impl GeometricAntiProduct<Line> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       52       68        0
    //    simd4        7        7        0
    // Totals...
    // yes simd       59       75        0
    //  no simd       80       96        0
    fn geometric_anti_product(self, other: Line) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group3()[3])),
                ((other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group3()[3])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) + (other.group1()[0] * self.group3()[3])
                    - (other.group1()[1] * self.group0()[2])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0]) + (other.group1()[1] * self.group3()[3]) - (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[2] * self.group3()[3])),
                (-(other.group0()[0] * self.group3()[0]) - (other.group0()[1] * self.group3()[1]) - (other.group0()[2] * self.group3()[2])
                    + (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group1()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[0] * self.group2()[3])
                    + (other.group0()[2] * self.group2()[1])
                    + (other.group1()[0] * self.group0()[3])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group1()[2] * self.group3()[1])),
                ((other.group0()[0] * self.group2()[2])
                    + (other.group0()[1] * self.group2()[3])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[0] * self.group3()[2])
                    + (other.group1()[1] * self.group0()[3])
                    + (other.group1()[1] * self.group1()[3])),
                ((other.group0()[1] * self.group2()[0])
                    + (other.group0()[2] * self.group2()[3])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[1] * self.group3()[0])
                    + (other.group1()[2] * self.group0()[3])
                    + (other.group1()[2] * self.group1()[3])),
                (-(other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[2] * self.group3()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group1()[0]]) * swizzle!(self.group3(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group3()[2]) + (other.group0()[2] * self.group3()[1]) - (other.group1()[0] * self.group3()[3])
                    + (other.group1()[1] * self.group0()[2])),
                ((other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group3()[0]) - (other.group1()[1] * self.group3()[3])
                    + (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group3()[1])
                    + (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (other.group1()[0] * self.group0()[1])
                    - (other.group1()[2] * self.group3()[3])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<Motor> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       41       56        0
    //    simd4       18       18        0
    // Totals...
    // yes simd       59       74        0
    //  no simd      113      128        0
    fn geometric_anti_product(self, other: Motor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) + (other.group0()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group3()[3]) + (other.group0()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group3()[3]) + (other.group0()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])
                    + (other.group1()[3] * self.group3()[3])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group3()[3], self.group0()[2], self.group0()[0], self.group0()[3]]) * swizzle!(other.group0(), 0, 0, 1, 3))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[2] * self.group1()[1]) + (other.group0()[3] * self.group1()[0])),
                ((other.group0()[3] * self.group1()[1]) + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[3] * self.group1()[2]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group3()[1]) - (other.group0()[2] * self.group3()[2])),
            ]) + (Simd32x4::from([other.group1()[2], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group0(), 1, 3, 3, 1))
                + (Simd32x4::from([self.group0()[0], self.group3()[3], self.group3()[3], self.group0()[2]]) * swizzle!(other.group1(), 3, 1, 2, 2))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[3]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group0()[3], self.group1()[2], self.group1()[0], self.group1()[3]]) * swizzle!(other.group0(), 0, 0, 1, 3))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group3()[3], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group1(), 0, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[2] * self.group2()[1])
                    + (other.group0()[3] * self.group2()[0])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group1()[2] * self.group3()[1])
                    + (other.group1()[3] * self.group1()[0])
                    + (other.group1()[3] * self.group3()[0])),
                ((other.group0()[1] * self.group2()[3])
                    + (other.group0()[3] * self.group2()[1])
                    + (other.group1()[1] * self.group0()[3])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[1])
                    + (other.group1()[3] * self.group3()[1])),
                ((other.group0()[2] * self.group2()[3])
                    + (other.group0()[3] * self.group2()[2])
                    + (other.group1()[2] * self.group0()[3])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])
                    + (other.group1()[3] * self.group3()[2])),
                (-(other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[2] * self.group3()[2])),
            ]) + (Simd32x4::from([self.group0()[3], self.group1()[2], self.group1()[0], self.group0()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))
                + (Simd32x4::from([self.group1()[3], self.group3()[2], self.group3()[0], self.group1()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))
                + (swizzle!(other.group0(), 0, 0, 1, 3) * swizzle!(self.group2(), 3, 2, 0, 3))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group3(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[2] * self.group3()[1]) + (other.group0()[3] * self.group3()[0]) - (other.group1()[0] * self.group3()[3]) + (other.group1()[1] * self.group0()[2])),
                ((other.group0()[1] * self.group1()[3]) + (other.group0()[3] * self.group3()[1]) - (other.group1()[1] * self.group3()[3]) + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[2] * self.group1()[3]) + (other.group0()[3] * self.group3()[2]) + (other.group1()[0] * self.group0()[1]) - (other.group1()[2] * self.group3()[3])),
                0.0,
            ]) - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[2]]) * swizzle!(self.group0(), 0, 1, 2, 2))
                + (Simd32x4::from([self.group1()[3], self.group3()[2], self.group3()[0], self.group3()[3]]) * swizzle!(other.group0(), 0, 0, 1, 3))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<MultiVector> for VersorEven {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      148      180        0
    //    simd2       12       12        0
    //    simd3       52       52        0
    //    simd4       38       38        0
    // Totals...
    // yes simd      250      282        0
    //  no simd      480      512        0
    fn geometric_anti_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                (-(other.group3()[3] * self.group1()[3])
                    + (other.group9()[0] * self.group3()[0])
                    + (other.group9()[1] * self.group3()[1])
                    + (other.group9()[2] * self.group3()[2])),
                (-(other.group1()[0] * self.group3()[0]) - (other.group1()[1] * self.group3()[1]) - (other.group1()[2] * self.group3()[2])
                    + (other.group6()[3] * self.group1()[3])),
            ]) - (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group3()[0], other.group8()[0]]))
                - (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group3()[1], other.group8()[1]]))
                - (Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group3()[2], other.group8()[2]]))
                + (Simd32x2::from(self.group0()[3]) * other.group0())
                - (Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group5()[0], other.group6()[0]]))
                - (Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group5()[1], other.group6()[1]]))
                - (Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group5()[2], other.group6()[2]]))
                - (Simd32x2::from(self.group2()[0]) * Simd32x2::from([other.group4()[0], other.group7()[0]]))
                - (Simd32x2::from(self.group2()[1]) * Simd32x2::from([other.group4()[1], other.group7()[1]]))
                - (Simd32x2::from(self.group2()[2]) * Simd32x2::from([other.group4()[2], other.group7()[2]]))
                + (Simd32x2::from(self.group2()[3]) * Simd32x2::from([other[e45], other.group1()[3]]))
                + (Simd32x2::from(self.group3()[3]) * Simd32x2::from([other.group9()[3], other[e1]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group7()[0] * self.group2()[3]) - (other.group7()[1] * self.group2()[2]) + (other.group7()[2] * self.group2()[1]) - (other.group8()[0] * self.group3()[3])
                    + (other.group1()[0] * self.group0()[3])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group1()[3] * self.group2()[0])
                    + (other.group6()[2] * self.group3()[1])
                    + (other.group6()[3] * self.group1()[0])),
                ((other.group7()[0] * self.group2()[2]) + (other.group7()[1] * self.group2()[3]) - (other.group7()[2] * self.group2()[0]) - (other.group8()[1] * self.group3()[3])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group0()[3])
                    + (other.group1()[3] * self.group2()[1])
                    + (other.group6()[1] * self.group1()[3])
                    + (other.group6()[3] * self.group1()[1])),
                (-(other.group7()[0] * self.group2()[1]) + (other.group7()[1] * self.group2()[0]) + (other.group7()[2] * self.group2()[3])
                    - (other.group8()[2] * self.group3()[3])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group0()[3])
                    + (other.group1()[3] * self.group2()[2])
                    + (other.group6()[2] * self.group1()[3])
                    + (other.group6()[3] * self.group1()[2])),
                ((other.group7()[0] * self.group3()[0]) - (other.group7()[1] * self.group1()[1]) + (other.group7()[1] * self.group3()[1]) - (other.group7()[2] * self.group1()[2])
                    + (other.group7()[2] * self.group3()[2])
                    - (other.group1()[2] * self.group0()[2])
                    - (other.group1()[3] * self.group1()[3])
                    - (other.group6()[1] * self.group0()[1])
                    - (other.group6()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(other.group0()[1]) * self.group3())
                + (Simd32x4::from([other.group8()[1], other.group8()[2], other.group8()[0], other.group1()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group8()[2], other.group8()[0], other.group8()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group7()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group1()[3], self.group3()[2], self.group3()[0], self.group3()[3]]) * swizzle!(other.group6(), 0, 0, 1, 3))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group0()[0]]) * swizzle!(other.group6(), 1, 2, 0, 0))
                - (Simd32x4::from([other[e1], other[e1], other[e1], other.group1()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e5
            ((other.group0()[1] * self.group2()[3])
                - (other.group8()[0] * self.group1()[0])
                - (other.group8()[0] * self.group3()[0])
                - (other.group8()[1] * self.group1()[1])
                - (other.group8()[1] * self.group3()[1])
                - (other.group8()[2] * self.group1()[2])
                - (other.group8()[2] * self.group3()[2])
                + (other.group1()[0] * self.group2()[0])
                + (other.group1()[1] * self.group2()[1])
                + (other.group1()[2] * self.group2()[2])
                - (other.group6()[0] * self.group2()[0])
                - (other.group6()[1] * self.group2()[1])
                - (other.group6()[2] * self.group2()[2])
                - (other.group6()[3] * self.group2()[3])
                + (self.group0()[3] * other[e1])
                + (self.group1()[3] * other[e1])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group3()[0] * self.group1()[3])
                    + (other.group3()[2] * self.group1()[1])
                    + (other.group3()[3] * self.group2()[0])
                    + (other.group9()[2] * self.group2()[1])
                    + (other.group9()[3] * self.group1()[0])),
                ((other.group3()[1] * self.group0()[3])
                    + (other.group3()[1] * self.group1()[3])
                    + (other.group3()[3] * self.group2()[1])
                    + (other.group9()[1] * self.group2()[3])
                    + (other.group9()[3] * self.group1()[1])),
                ((other.group3()[2] * self.group0()[3])
                    + (other.group3()[2] * self.group1()[3])
                    + (other.group3()[3] * self.group2()[2])
                    + (other.group9()[2] * self.group2()[3])
                    + (other.group9()[3] * self.group1()[2])),
                ((other.group5()[2] * self.group3()[2])
                    - (other.group3()[1] * self.group0()[1])
                    - (other.group3()[2] * self.group0()[2])
                    - (other.group9()[1] * self.group1()[1])
                    - (other.group9()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group4()[0]]) * swizzle!(self.group2(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group5()[0], other.group5()[0], other.group5()[1], other.group4()[1]]) * swizzle!(self.group2(), 3, 2, 0, 1))
                - (Simd32x4::from([other.group5()[1], other.group5()[2], other.group5()[0], other[e45]]) * swizzle!(self.group2(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group5()[2], other.group5()[1], other.group5()[2], other.group4()[2]]) * swizzle!(self.group2(), 1, 3, 3, 2))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group5()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group9()[3], other.group9()[3], other.group9()[3], other.group5()[1]]) * swizzle!(self.group3(), 0, 1, 2, 1))
                + (Simd32x4::from([self.group0()[3], self.group1()[2], self.group1()[0], self.group0()[3]]) * swizzle!(other.group3(), 0, 0, 1, 3))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[0]]) * swizzle!(other.group9(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group2()[3], self.group2()[2], self.group2()[0], self.group3()[3]]) * swizzle!(other.group9(), 0, 0, 1, 3))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group0()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))),
            // e41, e42, e43
            (Simd32x3::from([
                ((other.group9()[1] * self.group0()[2]) - (other.group9()[2] * self.group0()[1])),
                (-(other.group9()[0] * self.group0()[2]) + (other.group9()[2] * self.group0()[0])),
                ((other.group9()[0] * self.group0()[1]) - (other.group9()[1] * self.group0()[0])),
            ]) + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(other.group4()[0]) * Simd32x3::from([self.group0()[3], self.group1()[2], self.group3()[1]]))
                - (Simd32x3::from(other.group4()[0]) * Simd32x3::from([self.group1()[3], self.group3()[2], self.group1()[1]]))
                - (Simd32x3::from(other.group4()[1]) * Simd32x3::from([self.group1()[2], self.group1()[3], self.group3()[0]]))
                + (Simd32x3::from(other.group4()[1]) * Simd32x3::from([self.group3()[2], self.group0()[3], self.group1()[0]]))
                + (Simd32x3::from(other.group4()[2]) * Simd32x3::from([self.group1()[1], self.group3()[0], self.group0()[3]]))
                - (Simd32x3::from(other.group4()[2]) * Simd32x3::from([self.group3()[1], self.group1()[0], self.group1()[3]]))
                - (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(other[e45]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from([self.group0()[1], self.group3()[3], self.group3()[3]]) * swizzle!(other.group5(), 2, 1, 2))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group5(), 1, 2, 0))
                + (Simd32x3::from([self.group3()[3], self.group0()[2], self.group0()[0]]) * swizzle!(other.group5(), 0, 0, 1))),
            // e23, e31, e12
            (Simd32x3::from([
                (-(other.group3()[1] * self.group0()[2]) + (other.group3()[2] * self.group0()[1]) + (other.group9()[1] * self.group3()[2])
                    - (other.group9()[2] * self.group3()[1])),
                ((other.group3()[0] * self.group0()[2]) - (other.group3()[2] * self.group0()[0]) - (other.group9()[0] * self.group3()[2]) + (other.group9()[2] * self.group3()[0])),
                (-(other.group3()[0] * self.group0()[1]) + (other.group3()[1] * self.group0()[0]) + (other.group9()[0] * self.group3()[1])
                    - (other.group9()[1] * self.group3()[0])),
            ]) + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(other.group9()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                + (Simd32x3::from([self.group0()[3], self.group1()[2], self.group1()[0]]) * swizzle!(other.group5(), 0, 0, 1))
                + (Simd32x3::from([self.group1()[1], self.group0()[3], self.group0()[3]]) * swizzle!(other.group5(), 2, 1, 2))
                - (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]) * swizzle!(other.group5(), 1, 2, 0))
                + (Simd32x3::from([self.group2()[1], self.group2()[3], self.group2()[3]]) * swizzle!(other.group4(), 2, 1, 2))
                - (Simd32x3::from([self.group2()[2], self.group2()[0], self.group2()[1]]) * swizzle!(other.group4(), 1, 2, 0))
                + (Simd32x3::from([self.group2()[3], self.group2()[2], self.group2()[0]]) * swizzle!(other.group4(), 0, 0, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group7()[2] * self.group2()[1]) + (other.group8()[0] * self.group3()[3]) - (other.group8()[1] * self.group0()[2])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[2] * self.group3()[1])
                    + (other.group1()[3] * self.group2()[0])
                    + (other.group6()[2] * self.group1()[1])
                    + (other.group6()[3] * self.group3()[0])),
                ((other.group7()[1] * self.group2()[3]) + (other.group8()[1] * self.group3()[3]) - (other.group8()[2] * self.group0()[0])
                    + (other.group1()[0] * self.group3()[2])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[3] * self.group2()[1])
                    + (other.group6()[3] * self.group3()[1])
                    + (self.group0()[1] * other[e1])),
                ((other.group7()[2] * self.group2()[3]) - (other.group8()[0] * self.group0()[1])
                    + (other.group8()[2] * self.group3()[3])
                    + (other.group1()[1] * self.group3()[0])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group2()[2])
                    + (other.group6()[3] * self.group3()[2])
                    + (self.group0()[2] * other[e1])),
                (-(other.group7()[1] * self.group2()[1]) - (other.group7()[2] * self.group2()[2]) + (other.group8()[2] * self.group0()[2])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group6()[0] * self.group3()[0])
                    - (other.group6()[1] * self.group3()[1])
                    - (other.group6()[2] * self.group3()[2])
                    - (self.group3()[3] * other[e1])),
            ]) + (Simd32x4::from(other.group0()[1]) * self.group1())
                + (Simd32x4::from([other.group7()[0], other.group7()[0], other.group7()[1], other.group1()[3]]) * swizzle!(self.group2(), 3, 2, 0, 3))
                - (Simd32x4::from([other.group7()[1], other.group7()[2], other.group7()[0], other.group7()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group8()[2], other.group8()[0], other.group8()[1], other.group8()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group6()[1], other.group6()[2], other.group6()[0], other.group1()[1]]) * swizzle!(self.group1(), 2, 0, 1, 1))
                + (Simd32x4::from([self.group0()[3], self.group1()[2], self.group1()[0], self.group0()[3]]) * swizzle!(other.group6(), 0, 0, 1, 3))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other[e1], other.group6()[1], other.group6()[2], other.group8()[1]]) * swizzle!(self.group0(), 0, 3, 3, 1))),
            // e423, e431, e412
            (Simd32x3::from([
                (-(other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1]) - (other.group6()[1] * self.group0()[2])
                    + (other.group6()[2] * self.group0()[1])),
                ((other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0]) + (other.group6()[0] * self.group0()[2]) - (other.group6()[2] * self.group0()[0])),
                (-(other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0]) - (other.group6()[0] * self.group0()[1])
                    + (other.group6()[1] * self.group0()[0])),
            ]) + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(other.group7()[0]) * Simd32x3::from([self.group0()[3], self.group1()[2], self.group3()[1]]))
                - (Simd32x3::from(other.group7()[0]) * Simd32x3::from([self.group1()[3], self.group3()[2], self.group1()[1]]))
                - (Simd32x3::from(other.group7()[1]) * Simd32x3::from([self.group1()[2], self.group1()[3], self.group3()[0]]))
                + (Simd32x3::from(other.group7()[1]) * Simd32x3::from([self.group3()[2], self.group0()[3], self.group1()[0]]))
                + (Simd32x3::from(other.group7()[2]) * Simd32x3::from([self.group1()[1], self.group3()[0], self.group0()[3]]))
                - (Simd32x3::from(other.group7()[2]) * Simd32x3::from([self.group3()[1], self.group1()[0], self.group1()[3]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(other.group6()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))),
            // e235, e315, e125
            (Simd32x3::from([
                ((other.group1()[1] * self.group2()[2]) + (other.group6()[2] * self.group2()[1])),
                ((other.group1()[2] * self.group2()[0]) + (other.group6()[0] * self.group2()[2])),
                ((other.group1()[0] * self.group2()[1]) + (other.group6()[1] * self.group2()[0])),
            ]) + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                - (Simd32x3::from(self.group2()[0]) * Simd32x3::from([other.group6()[3], other.group6()[2], other.group1()[1]]))
                - (Simd32x3::from(self.group2()[1]) * Simd32x3::from([other.group1()[2], other.group6()[3], other.group6()[0]]))
                - (Simd32x3::from(self.group2()[2]) * Simd32x3::from([other.group6()[1], other.group1()[0], other.group6()[3]]))
                - (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from([self.group0()[3], self.group1()[2], self.group1()[0]]) * swizzle!(other.group8(), 0, 0, 1))
                + (Simd32x3::from([self.group1()[1], self.group0()[3], self.group0()[3]]) * swizzle!(other.group8(), 2, 1, 2))
                - (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]) * swizzle!(other.group8(), 1, 2, 0))
                + (Simd32x3::from([self.group1()[3], self.group3()[2], self.group3()[0]]) * swizzle!(other.group8(), 0, 0, 1))
                + (Simd32x3::from([self.group3()[1], self.group1()[3], self.group1()[3]]) * swizzle!(other.group8(), 2, 1, 2))
                - (Simd32x3::from([self.group3()[2], self.group3()[0], self.group3()[1]]) * swizzle!(other.group8(), 1, 2, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group5()[1] * self.group3()[2]) + (other.group9()[0] * self.group0()[3]) + (other.group9()[2] * self.group1()[1]) + (other.group9()[3] * self.group0()[0])),
                ((other.group5()[2] * self.group3()[0]) + (other.group3()[1] * self.group3()[3]) + (other.group9()[0] * self.group1()[2]) + (other.group9()[3] * self.group0()[1])),
                ((other.group5()[0] * self.group3()[1]) + (other.group3()[2] * self.group3()[3]) + (other.group9()[1] * self.group1()[0]) + (other.group9()[3] * self.group0()[2])),
                (-(other.group3()[2] * self.group3()[2])
                    - (other.group9()[0] * self.group2()[0])
                    - (other.group9()[1] * self.group2()[1])
                    - (other.group9()[2] * self.group2()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group3()[0]]) * swizzle!(self.group3(), 0, 1, 2, 0))
                - (Simd32x4::from([other.group4()[0], other.group4()[0], other.group4()[1], other.group5()[0]]) * swizzle!(self.group2(), 3, 2, 0, 0))
                + (Simd32x4::from([other.group4()[1], other.group4()[2], other.group4()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group4()[2], other.group4()[1], other.group4()[2], other.group5()[1]]) * swizzle!(self.group2(), 1, 3, 3, 1))
                - (Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other.group3()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group3()[1]]) * swizzle!(self.group3(), 1, 2, 0, 1))
                + (Simd32x4::from([other.group3()[2], other.group9()[1], other.group9()[2], other.group9()[3]]) * swizzle!(self.group0(), 1, 3, 3, 3))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group9()[3]]) * self.group1())
                - (Simd32x4::from([other.group9()[1], other.group9()[2], other.group9()[0], other.group3()[2]]) * swizzle!(self.group1(), 2, 0, 1, 2))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[1]]) * swizzle!(other.group3(), 1, 2, 0, 1))
                + (Simd32x4::from([self.group3()[3], self.group0()[2], self.group0()[0], self.group2()[3]]) * swizzle!(other.group3(), 0, 0, 1, 3))
                - (Simd32x4::from([other[e45], other[e45], other[e45], other.group5()[2]]) * swizzle!(self.group2(), 0, 1, 2, 2))),
            // e1234
            ((other.group0()[0] * self.group3()[3]) - (other.group4()[0] * self.group1()[0]) + (other.group4()[0] * self.group3()[0]) - (other.group4()[1] * self.group1()[1])
                + (other.group4()[1] * self.group3()[1])
                - (other.group4()[2] * self.group1()[2])
                + (other.group4()[2] * self.group3()[2])
                - (other.group5()[0] * self.group0()[0])
                - (other.group5()[1] * self.group0()[1])
                - (other.group5()[2] * self.group0()[2])
                - (other.group3()[3] * self.group3()[3])
                + (other.group9()[0] * self.group0()[0])
                + (other.group9()[1] * self.group0()[1])
                + (other.group9()[2] * self.group0()[2])
                + (self.group0()[3] * other[e45])
                - (self.group1()[3] * other[e45])),
        );
    }
}
impl GeometricAntiProduct<Plane> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       20        0
    //    simd4       10       12        0
    // Totals...
    // yes simd       19       32        0
    //  no simd       49       68        0
    fn geometric_anti_product(self, other: Plane) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(other.group0()[0] * self.group3()[3]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group3()[3])),
                (-(other.group0()[1] * self.group0()[0]) - (other.group0()[2] * self.group3()[3])),
                ((other.group0()[1] * self.group3()[1]) + (other.group0()[2] * self.group3()[2]) + (other.group0()[3] * self.group3()[3])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e23, e31, e12, e45
            ((Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[2]])
                * swizzle!(other.group0(), 3, 3, 3, 2)
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                - (Simd32x4::from([self.group1()[3], self.group3()[2], self.group3()[0], self.group1()[0]]) * swizzle!(other.group0(), 0, 0, 1, 0))
                - (Simd32x4::from([self.group3()[1], self.group1()[3], self.group1()[3], self.group1()[1]]) * swizzle!(other.group0(), 2, 1, 2, 1))
                + (swizzle!(other.group0(), 1, 2, 0, 3) * swizzle!(self.group3(), 2, 0, 1, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) + (other.group0()[3] * self.group3()[0])),
                (-(other.group0()[2] * self.group2()[0]) + (other.group0()[3] * self.group3()[1])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[3] * self.group3()[2])),
                0.0,
            ]) + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group2()[1], self.group2()[3], self.group2()[3], self.group0()[1]]) * swizzle!(other.group0(), 2, 1, 2, 1))
                + (Simd32x4::from([self.group2()[3], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group0(), 0, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (other.group0()[3] * self.group0()[0]),
                (other.group0()[3] * self.group0()[1]),
                (other.group0()[3] * self.group0()[2]),
                (-(other.group0()[1] * self.group2()[1]) - (other.group0()[2] * self.group2()[2])),
            ]) + (Simd32x4::from([self.group0()[3], self.group1()[2], self.group1()[0], self.group0()[3]]) * swizzle!(other.group0(), 0, 0, 1, 3))
                + (Simd32x4::from([self.group1()[1], self.group0()[3], self.group0()[3], self.group1()[3]]) * swizzle!(other.group0(), 2, 1, 2, 3))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<QuadNum> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4       12       18        0
    // no simd       48       72        0
    fn geometric_anti_product(self, other: QuadNum) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[3]])
                * swizzle!(other.group0(), 0, 0, 0, 3)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group3()[3]]) * swizzle!(other.group0(), 2, 2, 2, 1))),
            // e415, e425, e435, e321
            ((Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]])
                * swizzle!(other.group0(), 3, 3, 3, 1)
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(other.group0()[0]) * self.group2())
                + (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group1()[3]]) * swizzle!(other.group0(), 2, 2, 2, 3))
                + (swizzle!(other.group0(), 1, 1, 1, 2) * self.group0())),
            // e235, e315, e125, e5
            ((Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]))
                + (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group1()[3]]))
                - (Simd32x4::from(other.group0()[2]) * self.group2())
                + (Simd32x4::from(other.group0()[3]) * self.group2())),
            // e1, e2, e3, e4
            ((Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[3]]))
                + (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                + (Simd32x4::from(other.group0()[3]) * self.group3())
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]) * swizzle!(other.group0(), 1, 1, 1, 0))),
        );
    }
}
impl GeometricAntiProduct<RoundPoint> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       36        0
    //    simd4       11       11        0
    // Totals...
    // yes simd       31       47        0
    //  no simd       64       80        0
    fn geometric_anti_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) + (other.group0()[3] * self.group1()[0])),
                ((other.group0()[1] * self.group3()[3]) + (other.group0()[3] * self.group1()[1])),
                ((other.group0()[2] * self.group3()[3]) + (other.group0()[3] * self.group1()[2])),
                (-(other.group0()[2] * self.group3()[2]) + (self.group3()[3] * other[e2])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group3()[3], self.group0()[2], self.group0()[0], self.group2()[3]]) * swizzle!(other.group0(), 0, 0, 1, 3))
                - (swizzle!(other.group0(), 3, 3, 3, 1) * swizzle!(self.group3(), 0, 1, 2, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[2] * self.group3()[1]) + (other.group0()[3] * self.group2()[0]) + (self.group0()[0] * other[e2])),
                ((other.group0()[1] * self.group1()[3]) + (other.group0()[3] * self.group2()[1]) + (self.group0()[1] * other[e2])),
                ((other.group0()[2] * self.group1()[3]) + (other.group0()[3] * self.group2()[2]) + (self.group0()[2] * other[e2])),
                (-(other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2]) - (self.group3()[3] * other[e2])),
            ]) + (Simd32x4::from([self.group1()[3], self.group3()[2], self.group3()[0], self.group2()[3]]) * swizzle!(other.group0(), 0, 0, 1, 3))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(other.group0()[0] * self.group2()[3]) - (other.group0()[2] * self.group2()[1])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group2()[3])),
                (-(other.group0()[1] * self.group2()[0]) - (other.group0()[2] * self.group2()[3])),
                ((other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2])),
            ]) + (Simd32x4::from(other[e2]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]))
                + (Simd32x4::from(other[e2]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group1()[3]]))
                + (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group2(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[2] * self.group1()[1]) + (other.group0()[3] * self.group2()[0])),
                ((other.group0()[1] * self.group0()[3]) + (other.group0()[3] * self.group2()[1])),
                ((other.group0()[2] * self.group0()[3]) + (other.group0()[3] * self.group2()[2])),
                (-(other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self.group1()[3])),
            ]) + (Simd32x4::from([self.group0()[3], self.group1()[2], self.group1()[0], self.group0()[3]]) * swizzle!(other.group0(), 0, 0, 1, 3))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other[e2], other[e2], other[e2], other.group0()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))),
        );
    }
}
impl GeometricAntiProduct<Scalar> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        6        0
    // no simd        0       24        0
    fn geometric_anti_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(other[scalar]) * self.group0()),
            // e23, e31, e12, e45
            (Simd32x4::from(other[scalar]) * self.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e15, e25, e35, e1234
            (Simd32x4::from(other[scalar]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]])),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other[scalar]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[3]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
    }
}
impl GeometricAntiProduct<Sphere> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       28        0
    //    simd4       12       14        0
    // Totals...
    // yes simd       28       42        0
    //  no simd       64       84        0
    fn geometric_anti_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(other.group0()[0] * self.group3()[3]) - (other.group0()[2] * self.group0()[1]) - (self.group3()[0] * other[e4315])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group3()[3]) - (self.group3()[1] * other[e4315])),
                (-(other.group0()[1] * self.group0()[0]) - (other.group0()[2] * self.group3()[3]) - (self.group3()[2] * other[e4315])),
                ((other.group0()[1] * self.group3()[1]) + (other.group0()[2] * self.group3()[2]) + (other.group0()[3] * self.group3()[3])),
            ]) + (Simd32x4::from(other[e4315]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[3] * self.group0()[0]) + (self.group2()[0] * other[e4315])),
                ((other.group0()[3] * self.group0()[1]) + (self.group2()[1] * other[e4315])),
                ((other.group0()[3] * self.group0()[2]) + (self.group2()[2] * other[e4315])),
                (-(other.group0()[2] * self.group1()[2]) - (self.group2()[3] * other[e4315])),
            ]) - (Simd32x4::from([self.group1()[3], self.group3()[2], self.group3()[0], self.group1()[0]]) * swizzle!(other.group0(), 0, 0, 1, 0))
                - (Simd32x4::from([self.group3()[1], self.group1()[3], self.group1()[3], self.group1()[1]]) * swizzle!(other.group0(), 2, 1, 2, 1))
                + (swizzle!(other.group0(), 1, 2, 0, 3) * swizzle!(self.group3(), 2, 0, 1, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) + (other.group0()[3] * self.group3()[0])),
                (-(other.group0()[2] * self.group2()[0]) + (other.group0()[3] * self.group3()[1])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[3] * self.group3()[2])),
                ((self.group0()[3] * other[e4315]) - (self.group1()[3] * other[e4315])),
            ]) + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group2()[1], self.group2()[3], self.group2()[3], self.group0()[1]]) * swizzle!(other.group0(), 2, 1, 2, 1))
                + (Simd32x4::from([self.group2()[3], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group0(), 0, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[2]])
                * swizzle!(other.group0(), 3, 3, 3, 2)
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from([self.group0()[3], self.group1()[2], self.group1()[0], self.group0()[3]]) * swizzle!(other.group0(), 0, 0, 1, 3))
                + (Simd32x4::from([self.group1()[1], self.group0()[3], self.group0()[3], self.group1()[3]]) * swizzle!(other.group0(), 2, 1, 2, 3))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other[e4315], other[e4315], other[e4315], other.group0()[1]]) * swizzle!(self.group2(), 0, 1, 2, 1))),
        );
    }
}
impl GeometricAntiProduct<TripleNum> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        4        0
    //    simd4        8       13        0
    // Totals...
    // yes simd        8       17        0
    //  no simd       32       56        0
    fn geometric_anti_product(self, other: TripleNum) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]]) * self.group3() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))
                + (Simd32x4::from(other.group0()[2]) * self.group0())),
            // e415, e425, e435, e321
            ((Simd32x4::from(other.group0()[1])
                * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group3()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(other.group0()[0]) * self.group2())
                + (Simd32x4::from(other.group0()[2]) * self.group1())),
            // e235, e315, e125, e5
            ((Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]))
                + (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group1()[3]]))
                + (Simd32x4::from(other.group0()[2]) * self.group2())),
            // e1, e2, e3, e4
            (-Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                (other.group0()[0] * self.group1()[3]),
            ]) + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[3]]))
                + (Simd32x4::from(other.group0()[2]) * self.group3())),
        );
    }
}
impl GeometricAntiProduct<VersorEven> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       72       88        0
    //    simd4       42       42        0
    // Totals...
    // yes simd      114      130        0
    //  no simd      240      256        0
    fn geometric_anti_product(self, other: VersorEven) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[3] * self.group0()[0])
                    + (other.group1()[0] * self.group3()[3])
                    + (other.group1()[2] * self.group0()[1])
                    + (other.group1()[3] * self.group0()[0])
                    + (other.group3()[2] * self.group0()[1])
                    + (other.group3()[3] * self.group1()[0])),
                ((other.group0()[1] * self.group0()[3])
                    + (other.group0()[3] * self.group0()[1])
                    + (other.group1()[0] * self.group0()[2])
                    + (other.group1()[1] * self.group3()[3])
                    + (other.group1()[3] * self.group0()[1])
                    + (other.group3()[1] * self.group3()[3])),
                ((other.group0()[2] * self.group0()[3])
                    + (other.group0()[3] * self.group0()[2])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[3] * self.group0()[2])
                    + (other.group3()[2] * self.group3()[3])
                    + (other.group3()[3] * self.group1()[2])),
                (-(other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    - (other.group3()[1] * self.group3()[1])
                    - (other.group3()[2] * self.group3()[2])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group3()[2], self.group1()[1], self.group2()[0]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group1()[2], self.group1()[3], self.group3()[0], self.group2()[1]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group1()[3], self.group2()[2]]))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group1()[2], other.group2()[3]]) * swizzle!(self.group3(), 2, 0, 3, 3))
                + (Simd32x4::from([other.group0()[2], other.group3()[3], other.group0()[1], other.group1()[3]]) * swizzle!(self.group1(), 1, 1, 0, 3))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group2()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[3], self.group1()[2], self.group3()[1], self.group0()[3]]) * swizzle!(other.group0(), 0, 0, 0, 3))
                + (Simd32x4::from([self.group3()[3], self.group0()[2], self.group0()[0], self.group2()[3]]) * swizzle!(other.group3(), 0, 0, 1, 3))
                - (swizzle!(other.group3(), 3, 3, 3, 0) * swizzle!(self.group3(), 0, 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[3] * self.group1()[0])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group1()[3] * self.group3()[0])
                    + (other.group3()[0] * self.group1()[3])
                    + (other.group3()[2] * self.group3()[1])
                    + (other.group3()[3] * self.group2()[0])),
                ((other.group0()[3] * self.group1()[1])
                    + (other.group1()[3] * self.group3()[1])
                    + (other.group2()[3] * self.group0()[1])
                    + (other.group3()[0] * self.group3()[2])
                    + (other.group3()[1] * self.group1()[3])
                    + (other.group3()[3] * self.group2()[1])),
                ((other.group0()[3] * self.group1()[2])
                    + (other.group1()[3] * self.group3()[2])
                    + (other.group2()[3] * self.group0()[2])
                    + (other.group3()[1] * self.group3()[0])
                    + (other.group3()[2] * self.group1()[3])
                    + (other.group3()[3] * self.group2()[2])),
                (-(other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[2] * self.group3()[2])
                    - (other.group3()[0] * self.group1()[0])
                    - (other.group3()[1] * self.group1()[1])
                    - (other.group3()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[1], other.group0()[2], other.group3()[3]]) * swizzle!(self.group2(), 1, 3, 3, 3))
                + (Simd32x4::from([other.group2()[2], other.group1()[1], other.group1()[2], other.group2()[1]]) * swizzle!(self.group0(), 1, 3, 3, 1))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[1]]) * swizzle!(self.group3(), 2, 0, 1, 1))
                + (Simd32x4::from([self.group0()[0], self.group3()[3], self.group3()[3], self.group0()[2]]) * swizzle!(other.group2(), 3, 1, 2, 2))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[3]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group0()[3], self.group1()[2], self.group1()[0], self.group0()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group2()[3], self.group2()[2], self.group2()[0], self.group1()[3]]) * swizzle!(other.group0(), 0, 0, 1, 3))
                + (Simd32x4::from([self.group3()[3], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 0, 0, 1, 0))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group2(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group2()[2] * self.group1()[1]) + (other.group2()[2] * self.group3()[1]) + (other.group2()[3] * self.group1()[0]) + (other.group2()[3] * self.group3()[0])),
                ((other.group2()[1] * self.group0()[3]) + (other.group2()[1] * self.group1()[3]) + (other.group2()[3] * self.group1()[1]) + (other.group2()[3] * self.group3()[1])),
                ((other.group2()[2] * self.group0()[3]) + (other.group2()[2] * self.group1()[3]) + (other.group2()[3] * self.group1()[2]) + (other.group2()[3] * self.group3()[2])),
                (-(other.group2()[1] * self.group1()[1])
                    - (other.group2()[1] * self.group3()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[2])),
            ]) + (Simd32x4::from(other.group0()[3]) * self.group2())
                + (Simd32x4::from([other.group1()[0], other.group1()[0], other.group1()[1], other.group3()[0]]) * swizzle!(self.group2(), 3, 2, 0, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[1], other.group1()[2], other.group3()[1]]) * swizzle!(self.group2(), 1, 3, 3, 1))
                - (Simd32x4::from([other.group3()[0], other.group3()[0], other.group3()[1], other.group1()[2]]) * swizzle!(self.group2(), 3, 2, 0, 2))
                - (Simd32x4::from([other.group3()[2], other.group3()[1], other.group3()[2], other.group1()[3]]) * swizzle!(self.group2(), 1, 3, 3, 3))
                + (Simd32x4::from([self.group0()[3], self.group1()[2], self.group1()[0], self.group0()[3]]) * swizzle!(other.group2(), 0, 0, 1, 3))
                + (Simd32x4::from([self.group1()[3], self.group3()[2], self.group3()[0], self.group1()[3]]) * swizzle!(other.group2(), 0, 0, 1, 3))
                - (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group2(), 0, 1, 2, 1))
                - (swizzle!(other.group2(), 1, 2, 0, 0) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (swizzle!(other.group2(), 1, 2, 0, 0) * swizzle!(self.group3(), 2, 0, 1, 0))
                + (swizzle!(other.group3(), 1, 2, 0, 2) * swizzle!(self.group2(), 2, 0, 1, 2))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group1()[2] * self.group3()[1]) + (other.group1()[3] * self.group1()[0]) - (other.group2()[0] * self.group3()[3])
                    + (other.group3()[0] * self.group0()[3])
                    + (other.group3()[2] * self.group1()[1])
                    + (other.group3()[3] * self.group2()[0])),
                ((other.group1()[1] * self.group1()[3]) + (other.group1()[3] * self.group1()[1]) - (other.group2()[1] * self.group3()[3])
                    + (other.group3()[0] * self.group1()[2])
                    + (other.group3()[1] * self.group0()[3])
                    + (other.group3()[3] * self.group2()[1])),
                ((other.group1()[2] * self.group1()[3]) + (other.group1()[3] * self.group1()[2]) - (other.group2()[2] * self.group3()[3])
                    + (other.group3()[1] * self.group1()[0])
                    + (other.group3()[2] * self.group0()[3])
                    + (other.group3()[3] * self.group2()[2])),
                (-(other.group0()[2] * self.group1()[2]) + (other.group0()[3] * self.group3()[3])
                    - (other.group3()[0] * self.group0()[0])
                    - (other.group3()[1] * self.group0()[1])
                    - (other.group3()[2] * self.group0()[2])
                    - (other.group3()[3] * self.group1()[3])),
            ]) + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group3()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group1()[2]]) * swizzle!(self.group0(), 0, 1, 2, 2))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group0()[1]]) * swizzle!(self.group1(), 2, 0, 1, 1))
                + (Simd32x4::from([self.group1()[3], self.group3()[2], self.group3()[0], self.group3()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))
                + (Simd32x4::from([self.group2()[1], self.group2()[3], self.group2()[3], self.group3()[1]]) * swizzle!(other.group0(), 2, 1, 2, 1))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group2()[3], self.group2()[2], self.group2()[0], self.group3()[0]]) * swizzle!(other.group0(), 0, 0, 1, 0))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (swizzle!(other.group0(), 3, 3, 3, 2) * swizzle!(self.group3(), 0, 1, 2, 2))),
        );
    }
}
impl GeometricAntiProduct<VersorOdd> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       60       76        0
    //    simd4       45       45        0
    // Totals...
    // yes simd      105      121        0
    //  no simd      240      256        0
    fn geometric_anti_product(self, other: VersorOdd) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group3()[1]) + (self.group0()[3] * other.group0()[0]) + (self.group1()[1] * other.group0()[2])
                    - (self.group3()[0] * other.group2()[3])
                    - (self.group3()[3] * other.group3()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[2] * other.group1()[0]) + (self.group0()[3] * other.group0()[1]) + (self.group1()[2] * other.group0()[0])
                    - (self.group3()[1] * other.group2()[3])
                    - (self.group3()[3] * other.group3()[1])),
                ((self.group0()[1] * other.group3()[0]) + (self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2]) + (self.group1()[0] * other.group0()[1])
                    - (self.group3()[2] * other.group2()[3])
                    - (self.group3()[3] * other.group3()[2])),
                (-(self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])
                    + (self.group3()[2] * other.group3()[2])
                    + (self.group3()[3] * other.group3()[3])),
            ]) - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group1()[2], other.group3()[1], other.group2()[0]]))
                - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group3()[2], other.group1()[3], other.group1()[0], other.group2()[1]]))
                - (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[3], other.group2()[2]]))
                + (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group3(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group0()[3], other.group3()[2], other.group1()[1], other.group0()[3]]) * swizzle!(self.group0(), 0, 0, 0, 3))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[1]]) * swizzle!(self.group3(), 3, 3, 3, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) + (self.group2()[3] * other.group0()[0]) - (self.group3()[0] * other.group1()[3])),
                ((self.group0()[2] * other.group2()[0]) + (self.group2()[3] * other.group0()[1]) - (self.group3()[1] * other.group1()[3])),
                ((self.group2()[3] * other.group0()[2]) - (self.group3()[2] * other.group1()[3]) + (self.group3()[3] * other.group2()[2])),
                (-(self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2]) - (self.group2()[3] * other.group2()[3])),
            ]) + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group3()[0]]) * swizzle!(other.group1(), 0, 1, 2, 0))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[1]]) * swizzle!(other.group1(), 2, 0, 1, 1))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[2]]) * swizzle!(other.group3(), 2, 0, 1, 2))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group0()[2], self.group3()[3]]) * swizzle!(other.group3(), 1, 2, 3, 3))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group2()[3], other.group0()[2]]) * swizzle!(self.group2(), 1, 2, 2, 2))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group3()[0], other.group1()[2]]) * swizzle!(self.group3(), 3, 3, 1, 2))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[1], other.group0()[1]]) * swizzle!(self.group2(), 0, 1, 0, 1))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group2()[1], other.group1()[3]]) * swizzle!(self.group0(), 0, 1, 0, 3))
                - (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group3(), 0, 1, 2, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group1()[3] * other.group2()[0]) + (self.group2()[0] * other.group1()[3]) + (self.group2()[1] * other.group1()[2]) - (self.group2()[2] * other.group3()[1])
                    + (self.group2()[3] * other.group1()[0])
                    + (self.group2()[3] * other.group3()[0])),
                ((self.group1()[3] * other.group2()[1]) - (self.group2()[0] * other.group3()[2])
                    + (self.group2()[1] * other.group1()[3])
                    + (self.group2()[2] * other.group1()[0])
                    + (self.group2()[3] * other.group1()[1])
                    + (self.group2()[3] * other.group3()[1])),
                ((self.group1()[3] * other.group2()[2]) + (self.group2()[0] * other.group1()[1]) - (self.group2()[1] * other.group3()[0])
                    + (self.group2()[2] * other.group1()[3])
                    + (self.group2()[3] * other.group1()[2])
                    + (self.group2()[3] * other.group3()[2])),
                (-(self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])
                    + (self.group3()[3] * other.group0()[3])
                    - (self.group3()[3] * other.group1()[3])),
            ]) + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[1]]) * swizzle!(other.group3(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[3]]) * swizzle!(other.group2(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[2]]) * swizzle!(other.group3(), 2, 0, 1, 2))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[3]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group3()[3], other.group0()[2]]) * swizzle!(self.group3(), 1, 2, 2, 2))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group2()[1], other.group0()[1]]) * swizzle!(self.group3(), 0, 1, 0, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) + (self.group1()[1] * other.group3()[2]) + (self.group3()[2] * other.group1()[1]) + (self.group3()[3] * other.group2()[0])),
                ((self.group0()[2] * other.group2()[0]) + (self.group1()[2] * other.group3()[0]) + (self.group3()[0] * other.group1()[2]) + (self.group3()[3] * other.group2()[1])),
                ((self.group0()[3] * other.group3()[2]) + (self.group1()[0] * other.group3()[1]) + (self.group3()[1] * other.group1()[0]) + (self.group3()[3] * other.group2()[2])),
                (-(self.group2()[1] * other.group3()[1])
                    - (self.group2()[2] * other.group1()[2])
                    - (self.group2()[2] * other.group3()[2])
                    - (self.group3()[2] * other.group2()[2])),
            ]) + (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[2], self.group1()[3]]) * swizzle!(other.group3(), 0, 1, 3, 3))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group2()[3], other.group3()[0]]) * swizzle!(self.group2(), 1, 2, 2, 0))
                - (Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group2()[0]]) * swizzle!(self.group3(), 0, 1, 0, 0))
                - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[2]]) * swizzle!(self.group1(), 3, 3, 3, 2))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group2()[1]]) * swizzle!(self.group3(), 1, 2, 2, 1))
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 0, 1, 0, 0))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group2()[1]]) * swizzle!(self.group1(), 2, 0, 1, 1))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group2()[1], other.group3()[3]]) * swizzle!(self.group0(), 0, 1, 0, 3))
                + (swizzle!(self.group2(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))),
        );
    }
}
impl GeometricAntiProduct<VersorRoundPoint> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       28        0
    //    simd4       16       18        0
    // Totals...
    // yes simd       32       46        0
    //  no simd       80      100        0
    fn geometric_anti_product(self, other: VersorRoundPoint) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[2]])
                * swizzle!(other.group0(), 3, 3, 3, 2)
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(other.group1()[1]) * self.group0())
                + (Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group2()[3]]) * swizzle!(other.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (swizzle!(self.group3(), 0, 1, 2, 1) * swizzle!(other.group0(), 3, 3, 3, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group1()[0] * self.group0()[0]) + (self.group2()[0] * other.group0()[3]) + (self.group3()[1] * other.group0()[2])),
                ((other.group1()[0] * self.group0()[1]) + (self.group2()[1] * other.group0()[3]) + (self.group3()[2] * other.group0()[0])),
                ((other.group1()[0] * self.group0()[2]) + (self.group2()[2] * other.group0()[3]) + (self.group3()[0] * other.group0()[1])),
                (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group1()[1]) * self.group1())
                + (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[3]]) * other.group0())
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group3(), 2, 0, 1, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group2()[1] * other.group0()[2]) - (self.group2()[3] * other.group0()[0])),
                (-(self.group2()[2] * other.group0()[0]) - (self.group2()[3] * other.group0()[1])),
                (-(self.group2()[0] * other.group0()[1]) - (self.group2()[3] * other.group0()[2])),
                ((self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group1()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]))
                + (Simd32x4::from(other.group1()[0]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group1()[3]]))
                + (Simd32x4::from(other.group1()[1]) * self.group2())
                + (swizzle!(self.group2(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group1()[1] * other.group0()[2]) + (self.group2()[0] * other.group0()[3])),
                ((self.group1()[2] * other.group0()[0]) + (self.group2()[1] * other.group0()[3])),
                ((self.group1()[0] * other.group0()[1]) + (self.group2()[2] * other.group0()[3])),
                (-(self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other.group0()[3])),
            ]) + (Simd32x4::from(other.group1()[1]) * self.group3())
                + (Simd32x4::from(self.group0()[3]) * other.group0())
                - (Simd32x4::from([other.group1()[0], other.group1()[0], other.group1()[0], other.group0()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))),
        );
    }
}
impl GeometricAntiProduct<VersorSphere> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       40        0
    //    simd4       14       14        0
    // Totals...
    // yes simd       38       54        0
    //  no simd       80       96        0
    fn geometric_anti_product(self, other: VersorSphere) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(other.group1()[0] * self.group3()[0]) - (self.group0()[1] * other.group0()[2]) - (self.group3()[3] * other.group0()[0])),
                (-(other.group1()[0] * self.group3()[1]) - (self.group0()[2] * other.group0()[0]) - (self.group3()[3] * other.group0()[1])),
                (-(other.group1()[0] * self.group3()[2]) - (self.group0()[0] * other.group0()[1]) - (self.group3()[3] * other.group0()[2])),
                ((self.group3()[1] * other.group0()[1]) + (self.group3()[2] * other.group0()[2]) + (self.group3()[3] * other.group0()[3])),
            ]) + (Simd32x4::from(other.group1()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))
                + (Simd32x4::from(other.group1()[1]) * self.group0())
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group1()[0] * self.group2()[0]) + (other.group1()[1] * self.group1()[0]) + (self.group3()[2] * other.group0()[1])),
                ((other.group1()[0] * self.group2()[1]) + (other.group1()[1] * self.group1()[1]) + (self.group3()[0] * other.group0()[2])),
                ((other.group1()[0] * self.group2()[2]) + (other.group1()[1] * self.group1()[2]) + (self.group3()[1] * other.group0()[0])),
                (-(other.group1()[0] * self.group2()[3]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]) - (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]]))
                + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group3()[3]]))
                - (Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(self.group2()[2] * other.group0()[1]) + (self.group3()[0] * other.group0()[3])),
                (-(self.group2()[0] * other.group0()[2]) + (self.group3()[1] * other.group0()[3])),
                (-(self.group2()[1] * other.group0()[0]) + (self.group3()[2] * other.group0()[3])),
                ((other.group1()[0] * self.group0()[3]) - (other.group1()[0] * self.group1()[3])),
            ]) + (Simd32x4::from(other.group1()[1]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[1]]) * swizzle!(other.group0(), 2, 0, 1, 1))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[2]]) * swizzle!(other.group0(), 0, 1, 2, 2))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group1()[1] * self.group3()[0]) + (self.group1()[1] * other.group0()[2])),
                (-(other.group1()[1] * self.group3()[1]) + (self.group1()[2] * other.group0()[0])),
                (-(other.group1()[1] * self.group3()[2]) + (self.group1()[0] * other.group0()[1])),
                ((other.group1()[1] * self.group2()[3]) - (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group0()[3]) * self.group0())
                - (Simd32x4::from([other.group1()[0], other.group1()[0], other.group1()[0], other.group0()[0]]) * swizzle!(self.group2(), 0, 1, 2, 0))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group1()[3]]) * other.group0())
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))),
        );
    }
}
impl InfixGeometricAntiProduct for VersorOdd {}
impl GeometricAntiProduct<AntiCircleRotor> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       56        0
    //    simd4       30       30        0
    // Totals...
    // yes simd       70       86        0
    //  no simd      160      176        0
    fn geometric_anti_product(self, other: AntiCircleRotor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[1] * self.group3()[2])
                    - (other.group0()[2] * self.group1()[1])
                    - (other.group0()[2] * self.group3()[1])
                    - (other.group1()[0] * self.group2()[3])
                    - (other.group1()[2] * self.group0()[1])
                    - (other.group2()[3] * self.group0()[0])),
                (-(other.group0()[0] * self.group3()[2]) - (other.group0()[1] * self.group1()[3]) + (other.group0()[2] * self.group3()[0])
                    - (other.group1()[0] * self.group0()[2])
                    - (other.group1()[1] * self.group2()[3])
                    - (other.group2()[3] * self.group0()[1])),
                ((other.group0()[0] * self.group3()[1])
                    - (other.group0()[1] * self.group3()[0])
                    - (other.group0()[2] * self.group1()[3])
                    - (other.group1()[1] * self.group0()[0])
                    - (other.group1()[2] * self.group2()[3])
                    - (other.group2()[3] * self.group0()[2])),
                ((other.group0()[0] * self.group2()[0])
                    + (other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])
                    + (other.group2()[0] * self.group0()[0])
                    + (other.group2()[1] * self.group0()[1])
                    + (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group1()[3]]) * swizzle!(self.group1(), 3, 2, 0, 3))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[2]]) * swizzle!(other.group1(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[2] * self.group2()[1]) - (other.group1()[3] * self.group3()[0])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group1()[3] * self.group3()[1])),
                (-(other.group0()[1] * self.group2()[0]) - (other.group1()[3] * self.group3()[2])),
                ((other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group0()[1], self.group2()[3], self.group2()[3], self.group0()[1]]) * swizzle!(other.group2(), 2, 1, 2, 1))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[3]]) * swizzle!(other.group2(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group0()[3], self.group1()[2], self.group1()[0], self.group3()[1]]) * swizzle!(other.group1(), 0, 0, 1, 1))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[2]]) * swizzle!(other.group2(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group1()[1], self.group0()[3], self.group0()[3], self.group3()[2]]) * swizzle!(other.group1(), 2, 1, 2, 2))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[3]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group2()[3], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 0, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(other.group1()[2] * self.group2()[1]) - (other.group1()[3] * self.group2()[0])),
                (-(other.group1()[3] * self.group2()[1]) - (other.group2()[3] * self.group2()[1])),
                (-(other.group1()[3] * self.group2()[2]) - (other.group2()[3] * self.group2()[2])),
                ((other.group1()[1] * self.group2()[1]) + (other.group1()[2] * self.group2()[2])),
            ]) - (Simd32x4::from(other.group2()[0]) * Simd32x4::from([self.group0()[3], self.group1()[2], self.group3()[1], self.group3()[0]]))
                + (Simd32x4::from(other.group2()[0]) * Simd32x4::from([self.group1()[3], self.group3()[2], self.group1()[1], self.group1()[0]]))
                + (Simd32x4::from(other.group2()[1]) * Simd32x4::from([self.group1()[2], self.group1()[3], self.group3()[0], self.group1()[1]]))
                + (Simd32x4::from(other.group2()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group1()[3], self.group1()[2]]))
                - (Simd32x4::from([other.group2()[1], other.group1()[1], other.group1()[2], other.group2()[1]]) * swizzle!(self.group3(), 2, 3, 3, 1))
                - (Simd32x4::from([self.group1()[1], self.group0()[3], self.group1()[0], self.group3()[2]]) * swizzle!(other.group2(), 2, 1, 1, 2))
                - (Simd32x4::from([self.group2()[0], self.group3()[0], self.group0()[3], self.group3()[3]]) * swizzle!(other.group2(), 3, 2, 2, 3))
                - (Simd32x4::from([self.group3()[3], self.group2()[2], self.group2()[0], self.group3()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))
                + (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group2(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group3()[3]) - (other.group1()[1] * self.group3()[2]) + (other.group2()[0] * self.group2()[3])
                    - (other.group2()[1] * self.group0()[2])),
                (-(other.group0()[1] * self.group3()[3]) - (other.group1()[2] * self.group3()[0]) + (other.group2()[1] * self.group2()[3])
                    - (other.group2()[2] * self.group0()[0])),
                (-(other.group0()[2] * self.group3()[3]) - (other.group1()[0] * self.group3()[1]) - (other.group2()[0] * self.group0()[1])
                    + (other.group2()[2] * self.group2()[3])),
                ((other.group0()[1] * self.group1()[1]) + (other.group0()[1] * self.group3()[1]) + (other.group0()[2] * self.group1()[2]) + (other.group0()[2] * self.group3()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group2(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[2]]) * swizzle!(self.group0(), 1, 2, 0, 2))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[0]]) * swizzle!(self.group3(), 0, 1, 2, 0))
                + (Simd32x4::from([self.group1()[3], self.group3()[2], self.group3()[0], self.group0()[0]]) * swizzle!(other.group1(), 0, 0, 1, 0))
                + (Simd32x4::from([self.group3()[1], self.group1()[3], self.group1()[3], self.group0()[1]]) * swizzle!(other.group1(), 2, 1, 2, 1))),
        );
    }
}
impl GeometricAntiProduct<AntiDipoleInversion> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       72        0
    //    simd4       42       42        0
    // Totals...
    // yes simd       98      114        0
    //  no simd      224      240        0
    fn geometric_anti_product(self, other: AntiDipoleInversion) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (other.group1()[2] * self.group0()[1])
                    + (other.group1()[3] * self.group0()[0])
                    + (other.group2()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[3]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group3()[0])
                    + (other.group1()[0] * self.group0()[2])
                    + (other.group1()[3] * self.group0()[1])
                    + (other.group2()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group3()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group0()[3])
                    + (other.group0()[2] * self.group1()[3])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[3] * self.group0()[2])
                    + (other.group2()[3] * self.group1()[2])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group3(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group3()[0]]) * swizzle!(self.group3(), 0, 1, 2, 0))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group2()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[1], self.group2()[3], self.group2()[3], self.group3()[2]]) * swizzle!(other.group3(), 2, 1, 2, 2))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))
                + (Simd32x4::from([self.group2()[3], self.group0()[2], self.group0()[0], self.group3()[1]]) * swizzle!(other.group3(), 0, 0, 1, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self.group2()[2]) + (other.group1()[0] * self.group0()[3]) + (other.group2()[2] * self.group0()[1])
                    - (other.group3()[0] * self.group1()[3])),
                ((other.group0()[1] * self.group3()[3]) - (other.group0()[2] * self.group2()[0]) + (other.group1()[1] * self.group0()[3]) + (other.group2()[0] * self.group0()[2])
                    - (other.group3()[1] * self.group1()[3])),
                (-(other.group0()[0] * self.group2()[1])
                    + (other.group0()[2] * self.group3()[3])
                    + (other.group1()[2] * self.group0()[3])
                    + (other.group2()[1] * self.group0()[0])
                    - (other.group3()[2] * self.group1()[3])),
                (-(other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    - (other.group2()[3] * self.group3()[3])
                    + (other.group3()[3] * self.group2()[3])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group3()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[2]]) * swizzle!(self.group2(), 0, 1, 2, 2))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[2]]) * swizzle!(self.group3(), 1, 2, 0, 2))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[2]]) * swizzle!(other.group3(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[1]]) * swizzle!(other.group3(), 1, 2, 0, 1))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group3(), 0, 1, 2, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group1()[2] * self.group2()[1]) + (other.group2()[2] * self.group1()[1]) + (other.group3()[1] * self.group2()[2]) + (other.group3()[3] * self.group1()[0])),
                ((other.group1()[1] * self.group3()[3]) + (other.group2()[2] * self.group3()[0]) + (other.group3()[2] * self.group2()[0]) + (other.group3()[3] * self.group1()[1])),
                ((other.group1()[2] * self.group3()[3]) + (other.group2()[2] * self.group0()[3]) + (other.group3()[0] * self.group2()[1]) + (other.group3()[3] * self.group1()[2])),
                (-(other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group3()[2])
                    - (other.group1()[2] * self.group0()[2])
                    - (other.group3()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[0], other.group0()[0]]) * swizzle!(self.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[2], other.group0()[1]]) * swizzle!(self.group1(), 2, 0, 3, 1))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group0()[1]]) * swizzle!(self.group3(), 0, 1, 2, 1))
                + (Simd32x4::from([self.group0()[3], self.group1()[2], self.group3()[1], self.group0()[3]]) * swizzle!(other.group2(), 0, 0, 0, 3))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group2()[1], self.group3()[3], self.group3()[3], self.group0()[1]]) * swizzle!(other.group3(), 2, 1, 2, 1))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group3()[2], self.group0()[3], self.group1()[0], self.group1()[3]]) * swizzle!(other.group2(), 1, 1, 1, 3))
                - (Simd32x4::from([self.group3()[3], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group3(), 0, 0, 1, 0))
                + (Simd32x4::from([self.group3()[3], self.group2()[2], self.group2()[0], self.group2()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group1()[0] * self.group1()[3]) - (other.group3()[2] * self.group1()[1])),
                ((other.group1()[1] * self.group1()[3]) - (other.group3()[1] * self.group0()[3])),
                ((other.group1()[2] * self.group1()[3]) - (other.group3()[2] * self.group0()[3])),
                (-(other.group2()[2] * self.group1()[2]) + (other.group3()[3] * self.group0()[3])),
            ]) - (Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[2]]) * swizzle!(other.group3(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group0()[1], self.group2()[3], self.group2()[3], self.group3()[2]]) * swizzle!(other.group2(), 2, 1, 2, 2))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group0()[3], self.group1()[2], self.group1()[0], self.group1()[3]]) * swizzle!(other.group3(), 0, 0, 1, 3))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[2]]) * swizzle!(other.group1(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[1]]) * swizzle!(other.group3(), 1, 2, 0, 1))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[1]]) * swizzle!(other.group2(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group2()[3], self.group0()[2], self.group0()[0], self.group3()[1]]) * swizzle!(other.group2(), 0, 0, 1, 1))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum321> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        3        8        0
    // Totals...
    // yes simd        7       16        0
    //  no simd       16       40        0
    fn geometric_anti_product(self, other: AntiDualNum321) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(other.group0()[0])
                * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                - (Simd32x4::from(other.group0()[1]) * self.group0())),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group3()[0]) - (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[0] * self.group3()[1]) - (other.group0()[1] * self.group1()[1])),
                (-(other.group0()[0] * self.group3()[2]) - (other.group0()[1] * self.group1()[2])),
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group1()[3])),
            ]),
            // e235, e315, e125, e5
            (-(Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))),
            // e1, e2, e3, e4
            ((Simd32x4::from(other.group0()[1])
                * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum4> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1       11        0
    //    simd4        4        8        0
    // Totals...
    // yes simd        5       19        0
    //  no simd       17       43        0
    fn geometric_anti_product(self, other: AntiDualNum4) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((other.group0()[0] * self.group3()[0]) * -1.0),
                ((other.group0()[0] * self.group3()[1]) * -1.0),
                ((other.group0()[0] * self.group3()[2]) * -1.0),
                0.0,
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                - (Simd32x4::from(other.group0()[1]) * self.group0())),
            // e415, e425, e435, e321
            ((Simd32x4::from(other.group0()[1]) * self.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))),
            // e235, e315, e125, e5
            (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]) * Simd32x4::from(-1.0)),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (other.group0()[1] * self.group3()[0]),
                (other.group0()[1] * self.group3()[1]),
                (other.group0()[1] * self.group3()[2]),
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group2()[3])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[3]]))),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum5> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       24        0
    //    simd4        2        3        0
    // Totals...
    // yes simd       10       27        0
    //  no simd       16       36        0
    fn geometric_anti_product(self, other: AntiDualNum5) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0] * -1.0),
                (other.group0()[1] * self.group0()[1] * -1.0),
                (other.group0()[1] * self.group0()[2] * -1.0),
                (-(other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group1()[1])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group1()[2])),
                ((other.group0()[0] * self.group2()[3]) + (other.group0()[1] * self.group1()[3])),
            ]),
            // e235, e315, e125, e5
            (-(Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]))
                + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group1()[3]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group3()[0])),
                ((other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group3()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group3()[2])),
                (other.group0()[1] * self.group2()[3] * -1.0),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiFlatPoint> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       27       40        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       33       46        0
    //  no simd       51       64        0
    fn geometric_anti_product(self, other: AntiFlatPoint) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[3] * self.group0()[0]),
                (other.group0()[3] * self.group0()[1]),
                (other.group0()[3] * self.group0()[2]),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group0()[3] * self.group1()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group2()[3]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group2()[3])),
                ((other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group2()[3])),
                (-(other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self.group0()[3])),
            ]) - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group1()[1])
                    - (other.group0()[2] * self.group3()[1])
                    - (other.group0()[3] * self.group2()[0])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group0()[3])
                    - (other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group1()[0])
                    + (other.group0()[2] * self.group3()[0])
                    - (other.group0()[3] * self.group2()[1])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group1()[0])
                    - (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group0()[3])
                    - (other.group0()[2] * self.group1()[3])
                    - (other.group0()[3] * self.group2()[2])),
                (other.group0()[3] * self.group2()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(other.group0()[2] * self.group1()[2]) + (other.group0()[2] * self.group3()[2]) - (other.group0()[3] * self.group3()[3])),
            ]) + (Simd32x4::from([self.group0()[1], self.group2()[3], self.group2()[3], self.group3()[1]]) * swizzle!(other.group0(), 2, 1, 2, 1))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group2()[3], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group0(), 0, 0, 1, 0))
                - (swizzle!(other.group0(), 3, 3, 3, 1) * swizzle!(self.group1(), 0, 1, 2, 1))),
        );
    }
}
impl GeometricAntiProduct<AntiFlector> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       37       55        0
    //    simd4       19       19        0
    // Totals...
    // yes simd       56       74        0
    //  no simd      113      131        0
    fn geometric_anti_product(self, other: AntiFlector) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (other.group0()[3] * self.group0()[0]),
                (other.group0()[3] * self.group0()[1]),
                (other.group0()[3] * self.group0()[2]),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self.group1()[3])
                    + (other.group1()[2] * self.group3()[2])
                    + (other.group1()[3] * self.group2()[3])),
            ]) - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[1], self.group2()[3], self.group2()[3], self.group3()[1]]) * swizzle!(other.group1(), 2, 1, 2, 1))
                + (Simd32x4::from([self.group2()[3], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group1(), 0, 0, 1, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) - (other.group1()[0] * self.group1()[3]) - (other.group1()[2] * self.group3()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group1()[0] * self.group3()[2]) - (other.group1()[1] * self.group1()[3])),
                ((other.group0()[1] * self.group0()[0]) - (other.group1()[1] * self.group3()[0]) - (other.group1()[2] * self.group1()[3])),
                (-(other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self.group0()[3]) + (other.group1()[2] * self.group1()[2])),
            ]) + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group1()[1])
                    - (other.group0()[2] * self.group3()[1])
                    - (other.group0()[3] * self.group2()[0])
                    + (other.group1()[1] * self.group2()[2])
                    + (other.group1()[3] * self.group1()[0])),
                (-(other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group0()[3])
                    - (other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group1()[0])
                    + (other.group0()[2] * self.group3()[0])
                    - (other.group0()[3] * self.group2()[1])
                    + (other.group1()[2] * self.group2()[0])
                    + (other.group1()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) - (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group0()[3])
                    - (other.group0()[2] * self.group1()[3])
                    - (other.group0()[3] * self.group2()[2])
                    + (other.group1()[0] * self.group2()[1])
                    + (other.group1()[3] * self.group1()[2])),
                0.0,
            ]) + (Simd32x4::from([self.group0()[3], self.group1()[2], self.group3()[1], self.group2()[3]]) * swizzle!(other.group0(), 0, 0, 0, 3))
                - (Simd32x4::from([self.group2()[1], self.group3()[3], self.group3()[3], self.group0()[1]]) * swizzle!(other.group1(), 2, 1, 2, 1))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[2]]) * swizzle!(other.group1(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group3()[3], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group1(), 0, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group1()[2] * self.group1()[1]) * -1.0),
                ((other.group1()[1] * self.group0()[3]) * -1.0),
                ((other.group1()[2] * self.group0()[3]) * -1.0),
                (-(other.group0()[2] * self.group1()[2]) + (other.group0()[2] * self.group3()[2]) - (other.group0()[3] * self.group3()[3])
                    + (other.group1()[2] * self.group2()[2])
                    + (other.group1()[3] * self.group0()[3])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group0()[1], self.group2()[3], self.group2()[3], self.group3()[1]]) * swizzle!(other.group0(), 2, 1, 2, 1))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group0()[3], self.group1()[2], self.group1()[0], self.group1()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group2()[3], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group0(), 0, 0, 1, 0))
                - (swizzle!(other.group0(), 3, 3, 3, 1) * swizzle!(self.group1(), 0, 1, 2, 1))),
        );
    }
}
impl GeometricAntiProduct<AntiLine> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       52        0
    //    simd4       11       11        0
    // Totals...
    // yes simd       47       63        0
    //  no simd       80       96        0
    fn geometric_anti_product(self, other: AntiLine) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (-(other.group0()[0] * self.group2()[3]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group2()[3])),
                (-(other.group0()[1] * self.group0()[0]) - (other.group0()[2] * self.group2()[3])),
                ((other.group0()[0] * self.group1()[0])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[2])
                    + (other.group1()[1] * self.group0()[1])
                    + (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1]) - (other.group1()[0] * self.group2()[3]) + (other.group1()[1] * self.group0()[2])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group1()[0]) - (other.group1()[1] * self.group2()[3])
                    + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) + (other.group1()[0] * self.group0()[1]) - (other.group1()[2] * self.group2()[3])),
                (-(other.group0()[0] * self.group3()[0])
                    - (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group3()[2])
                    - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group1()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(other.group0()[2] * self.group2()[1]) - (other.group1()[0] * self.group0()[3])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group1()[0] * self.group1()[2])),
                (-(other.group0()[1] * self.group2()[0]) - (other.group1()[0] * self.group3()[1])),
                ((other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2])),
            ]) + (Simd32x4::from(other.group1()[0]) * Simd32x4::from([self.group1()[3], self.group3()[2], self.group1()[1], self.group1()[0]]))
                + (Simd32x4::from(other.group1()[1]) * Simd32x4::from([self.group1()[2], self.group1()[3], self.group3()[0], self.group1()[1]]))
                - (Simd32x4::from(other.group1()[1]) * Simd32x4::from([self.group3()[2], self.group0()[3], self.group1()[0], self.group3()[1]]))
                - (Simd32x4::from(other.group1()[2]) * Simd32x4::from([self.group1()[1], self.group3()[0], self.group0()[3], self.group3()[2]]))
                + (Simd32x4::from(other.group1()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group1()[3], self.group1()[2]]))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group3()[2]) + (other.group0()[2] * self.group3()[1]) + (other.group1()[0] * self.group2()[3])
                    - (other.group1()[1] * self.group0()[2])),
                ((other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group3()[0]) + (other.group1()[1] * self.group2()[3])
                    - (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group3()[0]) + (other.group0()[2] * self.group1()[3])
                    - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[2] * self.group2()[3])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<AntiMotor> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       21       32        0
    //    simd4       23       24        0
    // Totals...
    // yes simd       44       56        0
    //  no simd      113      128        0
    fn geometric_anti_product(self, other: AntiMotor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (-(other.group0()[2] * self.group0()[1]) - (other.group0()[3] * self.group0()[0])),
                (-(other.group0()[1] * self.group2()[3]) - (other.group0()[3] * self.group0()[1])),
                (-(other.group0()[2] * self.group2()[3]) - (other.group0()[3] * self.group0()[2])),
                ((other.group0()[1] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[2])
                    + (other.group1()[0] * self.group0()[0])
                    + (other.group1()[1] * self.group0()[1])
                    + (other.group1()[2] * self.group0()[2])
                    - (other.group1()[3] * self.group2()[3])),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group2()[3], self.group0()[2], self.group0()[0], self.group0()[3]]) * swizzle!(other.group0(), 0, 0, 1, 3))),
            // e415, e425, e435, e321
            (-(Simd32x4::from([self.group0()[1], self.group2()[3], self.group2()[3], self.group0()[1]]) * swizzle!(other.group1(), 2, 1, 2, 1))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group0()[3], self.group1()[2], self.group1()[0], self.group3()[0]]) * swizzle!(other.group0(), 0, 0, 1, 0))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group1()[1], self.group0()[3], self.group0()[3], self.group3()[1]]) * swizzle!(other.group0(), 2, 1, 2, 1))
                - (Simd32x4::from([self.group2()[3], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group1(), 0, 0, 1, 0))
                + (swizzle!(other.group0(), 1, 2, 0, 3) * swizzle!(self.group1(), 2, 0, 1, 3))
                - (swizzle!(other.group1(), 3, 3, 3, 2) * swizzle!(self.group0(), 0, 1, 2, 2))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(other.group0()[2] * self.group2()[1]) - (other.group0()[3] * self.group2()[0])),
                (-(other.group0()[3] * self.group2()[1]) - (other.group1()[3] * self.group1()[1])),
                (-(other.group0()[3] * self.group2()[2]) - (other.group1()[3] * self.group1()[2])),
                ((other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2])),
            ]) - (Simd32x4::from(other.group1()[0]) * Simd32x4::from([self.group0()[3], self.group1()[2], self.group3()[1], self.group3()[0]]))
                + (Simd32x4::from(other.group1()[0]) * Simd32x4::from([self.group1()[3], self.group3()[2], self.group1()[1], self.group1()[0]]))
                + (Simd32x4::from(other.group1()[1]) * Simd32x4::from([self.group1()[2], self.group1()[3], self.group3()[0], self.group1()[1]]))
                + (Simd32x4::from(other.group1()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group1()[3], self.group1()[2]]))
                + (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group1()[3]]))
                - (Simd32x4::from([other.group1()[1], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group3(), 2, 3, 3, 1))
                - (Simd32x4::from([self.group1()[0], self.group3()[0], self.group0()[3], self.group0()[3]]) * swizzle!(other.group1(), 3, 2, 2, 3))
                - (Simd32x4::from([self.group1()[1], self.group0()[3], self.group1()[0], self.group3()[2]]) * swizzle!(other.group1(), 2, 1, 1, 2))
                - (Simd32x4::from([self.group3()[3], self.group2()[2], self.group2()[0], self.group3()[3]]) * swizzle!(other.group0(), 0, 0, 1, 3))
                + (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group2(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group1()[0] * self.group2()[3]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1]) + (other.group1()[3] * self.group0()[0])),
                ((other.group1()[0] * self.group0()[2]) + (other.group1()[1] * self.group2()[3]) - (other.group1()[2] * self.group0()[0]) + (other.group1()[3] * self.group0()[1])),
                (-(other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group2()[3])
                    + (other.group1()[3] * self.group0()[2])),
                0.0,
            ]) + (Simd32x4::from([self.group1()[3], self.group3()[2], self.group3()[0], self.group0()[0]]) * swizzle!(other.group0(), 0, 0, 1, 0))
                + (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group3()[1], self.group1()[3], self.group1()[3], self.group0()[1]]) * swizzle!(other.group0(), 2, 1, 2, 1))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))),
        );
    }
}
impl GeometricAntiProduct<AntiPlane> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       30        0
    //    simd4       10       10        0
    // Totals...
    // yes simd       19       40        0
    //  no simd       49       70        0
    fn geometric_anti_product(self, other: AntiPlane) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) * -1.0),
                ((other.group0()[2] * self.group0()[0]) * -1.0),
                ((other.group0()[0] * self.group0()[1]) * -1.0),
                ((other.group0()[2] * self.group3()[2]) + (other.group0()[3] * self.group2()[3])),
            ]) + (Simd32x4::from([self.group0()[1], self.group2()[3], self.group2()[3], self.group3()[1]]) * swizzle!(other.group0(), 2, 1, 2, 1))
                + (Simd32x4::from([self.group2()[3], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group0(), 0, 0, 1, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[2] * self.group3()[1])),
                (-(other.group0()[0] * self.group3()[2]) - (other.group0()[1] * self.group1()[3])),
                (-(other.group0()[1] * self.group3()[0]) - (other.group0()[2] * self.group1()[3])),
                ((other.group0()[2] * self.group1()[2]) + (other.group0()[3] * self.group2()[3])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) + (other.group0()[3] * self.group1()[0])),
                ((other.group0()[2] * self.group2()[0]) + (other.group0()[3] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[3] * self.group1()[2])),
                0.0,
            ]) - (Simd32x4::from([self.group2()[1], self.group3()[3], self.group3()[3], self.group0()[1]]) * swizzle!(other.group0(), 2, 1, 2, 1))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group3()[3], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group0(), 0, 0, 1, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[2] * self.group1()[1]) * -1.0),
                ((other.group0()[1] * self.group0()[3]) * -1.0),
                ((other.group0()[2] * self.group0()[3]) * -1.0),
                ((other.group0()[2] * self.group2()[2]) + (other.group0()[3] * self.group0()[3])),
            ]) + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group0()[3], self.group1()[2], self.group1()[0], self.group1()[3]]) * swizzle!(other.group0(), 0, 0, 1, 3))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<AntiQuadNum> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       20        0
    //    simd4        9       12        0
    // Totals...
    // yes simd       21       32        0
    //  no simd       48       68        0
    fn geometric_anti_product(self, other: AntiQuadNum) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((swizzle!(other.group0(), 2, 2, 2, 3) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[3]]) * swizzle!(other.group0(), 0, 0, 0, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[1] * self.group0()[0]) - (other.group0()[2] * self.group3()[0]) - (other.group0()[3] * self.group1()[0])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group3()[1]) - (other.group0()[3] * self.group1()[1])),
                (-(other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group3()[2]) - (other.group0()[3] * self.group1()[2])),
                ((other.group0()[1] * self.group2()[3]) + (other.group0()[2] * self.group0()[3]) + (other.group0()[3] * self.group1()[3])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))),
            // e235, e315, e125, e5
            (-(Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]))
                + (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group1()[3]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))
                - (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[2] * self.group1()[0]) + (other.group0()[3] * self.group3()[0])),
                ((other.group0()[2] * self.group1()[1]) + (other.group0()[3] * self.group3()[1])),
                ((other.group0()[2] * self.group1()[2]) + (other.group0()[3] * self.group3()[2])),
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[3] * self.group2()[3])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[3]]))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]) * swizzle!(other.group0(), 1, 1, 1, 2))),
        );
    }
}
impl GeometricAntiProduct<AntiScalar> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn geometric_anti_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(other[e12345]) * self.group0()),
            // e23, e31, e12, e45
            (Simd32x4::from(other[e12345]) * self.group1()),
            // e15, e25, e35, e1234
            (Simd32x4::from(other[e12345]) * self.group2()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other[e12345]) * self.group3()),
        );
    }
}
impl GeometricAntiProduct<AntiTripleNum> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       20        0
    //    simd4        6        7        0
    // Totals...
    // yes simd       14       27        0
    //  no simd       32       48        0
    fn geometric_anti_product(self, other: AntiTripleNum) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (-Simd32x4::from([
                (other.group0()[0] * self.group3()[0]),
                (other.group0()[0] * self.group3()[1]),
                (other.group0()[0] * self.group3()[2]),
                (other.group0()[1] * self.group2()[3]),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                - (Simd32x4::from(other.group0()[2]) * self.group0())),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[1] * self.group0()[0]) - (other.group0()[2] * self.group1()[0])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group1()[1])),
                (-(other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group1()[2])),
                ((other.group0()[1] * self.group2()[3]) + (other.group0()[2] * self.group1()[3])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))),
            // e235, e315, e125, e5
            (-(Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]))
                + (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group1()[3]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group3()[0])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group3()[1])),
                ((other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group3()[2])),
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[2] * self.group2()[3])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[3]]))),
        );
    }
}
impl GeometricAntiProduct<Circle> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       72       88        0
    //    simd4       18       18        0
    // Totals...
    // yes simd       90      106        0
    //  no simd      144      160        0
    fn geometric_anti_product(self, other: Circle) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (other.group0()[2] * self.group3()[1])
                    + (other.group1()[0] * self.group2()[3])
                    + (other.group1()[2] * self.group0()[1])
                    + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group0()[3]) + (other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group3()[0])
                    + (other.group1()[0] * self.group0()[2])
                    + (other.group1()[1] * self.group2()[3])
                    + (other.group1()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group3()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group0()[3])
                    + (other.group0()[2] * self.group1()[3])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group2()[3])
                    + (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self.group2()[2])
                    + (other.group2()[2] * self.group0()[1])
                    + (other.group1()[0] * self.group0()[3])
                    + (other.group1()[2] * self.group1()[1])),
                ((other.group0()[1] * self.group3()[3]) - (other.group0()[2] * self.group2()[0])
                    + (other.group2()[0] * self.group0()[2])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group0()[3])),
                (-(other.group0()[0] * self.group2()[1])
                    + (other.group0()[2] * self.group3()[3])
                    + (other.group2()[1] * self.group0()[0])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group0()[3])),
                ((other.group0()[2] * self.group2()[2])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    - (other.group1()[2] * self.group3()[2])
                    - (other.group1()[3] * self.group0()[3])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group2()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group3(), 0, 1, 2, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group2()[0] * self.group0()[3]) + (other.group2()[1] * self.group3()[2]) + (other.group2()[2] * self.group1()[1]) + (other.group1()[2] * self.group2()[1])),
                ((other.group2()[0] * self.group1()[2]) + (other.group2()[1] * self.group0()[3]) + (other.group2()[2] * self.group3()[0]) + (other.group1()[1] * self.group3()[3])),
                ((other.group2()[0] * self.group3()[1]) + (other.group2()[1] * self.group1()[0]) + (other.group2()[2] * self.group0()[3]) + (other.group1()[2] * self.group3()[3])),
                (-(other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group3()[2])
                    - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[0], other.group0()[0]]) * swizzle!(self.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[2], other.group0()[1]]) * swizzle!(self.group1(), 2, 0, 3, 1))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group3()[3], self.group2()[2], self.group2()[0], self.group2()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) + (other.group2()[0] * self.group2()[3]) - (other.group2()[1] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[1])
                    + (other.group1()[0] * self.group1()[3])),
                ((other.group0()[2] * self.group2()[0]) + (other.group2()[0] * self.group0()[2]) + (other.group2()[1] * self.group2()[3]) - (other.group2()[2] * self.group0()[0])
                    + (other.group1()[1] * self.group1()[3])),
                ((other.group0()[0] * self.group2()[1]) - (other.group2()[0] * self.group0()[1])
                    + (other.group2()[1] * self.group0()[0])
                    + (other.group2()[2] * self.group2()[3])
                    + (other.group1()[2] * self.group1()[3])),
                (-(other.group2()[1] * self.group1()[1]) + (other.group2()[1] * self.group3()[1]) - (other.group2()[2] * self.group1()[2])
                    + (other.group2()[2] * self.group3()[2])
                    - (other.group1()[2] * self.group2()[2])),
            ]) - (Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))),
        );
    }
}
impl GeometricAntiProduct<CircleRotor> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       60       76        0
    //    simd4       25       25        0
    // Totals...
    // yes simd       85      101        0
    //  no simd      160      176        0
    fn geometric_anti_product(self, other: CircleRotor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (other.group0()[2] * self.group3()[1])
                    + (other.group1()[0] * self.group2()[3])
                    + (other.group1()[2] * self.group0()[1])
                    + (other.group1()[3] * self.group0()[0])
                    + (other.group2()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group3()[0])
                    + (other.group1()[0] * self.group0()[2])
                    + (other.group1()[1] * self.group2()[3])
                    + (other.group1()[3] * self.group0()[1])
                    + (other.group2()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group3()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group2()[3])
                    + (other.group1()[3] * self.group0()[2])
                    + (other.group2()[3] * self.group0()[2])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self.group2()[2])
                    + (other.group1()[0] * self.group0()[3])
                    + (other.group2()[2] * self.group0()[1])
                    + (other.group2()[3] * self.group1()[0])),
                ((other.group0()[1] * self.group3()[3]) - (other.group0()[2] * self.group2()[0])
                    + (other.group1()[1] * self.group0()[3])
                    + (other.group2()[0] * self.group0()[2])
                    + (other.group2()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[1])
                    + (other.group0()[2] * self.group3()[3])
                    + (other.group1()[2] * self.group0()[3])
                    + (other.group2()[1] * self.group0()[0])
                    + (other.group2()[3] * self.group1()[2])),
                ((other.group0()[2] * self.group2()[2])
                    - (other.group1()[2] * self.group3()[2])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[3]]) * swizzle!(self.group1(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group3(), 0, 1, 2, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group2()[0] * self.group0()[3]) + (other.group2()[1] * self.group3()[2]) + (other.group2()[2] * self.group1()[1]) + (other.group2()[3] * self.group2()[0])),
                ((other.group1()[1] * self.group3()[3]) + (other.group2()[0] * self.group1()[2]) + (other.group2()[1] * self.group0()[3]) + (other.group2()[2] * self.group3()[0])),
                ((other.group1()[2] * self.group3()[3]) + (other.group2()[0] * self.group3()[1]) + (other.group2()[1] * self.group1()[0]) + (other.group2()[2] * self.group0()[3])),
                (-(other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group3()[2])
                    - (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group1()[2], other.group2()[3], other.group2()[3], other.group2()[3]]) * swizzle!(self.group2(), 1, 1, 2, 3))
                - (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[0], other.group0()[0]]) * swizzle!(self.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[2], other.group0()[1]]) * swizzle!(self.group1(), 2, 0, 3, 1))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group3()[3], self.group2()[2], self.group2()[0], self.group2()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) + (other.group1()[0] * self.group1()[3])),
                ((other.group0()[2] * self.group2()[0]) + (other.group1()[1] * self.group1()[3])),
                ((other.group0()[0] * self.group2()[1]) + (other.group1()[2] * self.group1()[3])),
                (-(other.group2()[1] * self.group1()[1]) - (other.group2()[2] * self.group1()[2])),
            ]) + (Simd32x4::from(other.group2()[3]) * self.group3())
                - (Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[1], self.group2()[3], self.group2()[3], self.group3()[2]]) * swizzle!(other.group2(), 2, 1, 2, 2))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[2]]) * swizzle!(other.group1(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group2()[3], self.group0()[2], self.group0()[0], self.group3()[1]]) * swizzle!(other.group2(), 0, 0, 1, 1))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))),
        );
    }
}
impl GeometricAntiProduct<Dipole> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       52       68        0
    //    simd4       23       23        0
    // Totals...
    // yes simd       75       91        0
    //  no simd      144      160        0
    fn geometric_anti_product(self, other: Dipole) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group3()[2])
                    - (other.group0()[2] * self.group1()[1])
                    - (other.group0()[2] * self.group3()[1])
                    - (other.group1()[0] * self.group2()[3])
                    - (other.group1()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group3()[2]) - (other.group0()[1] * self.group0()[3]) - (other.group0()[1] * self.group1()[3])
                    + (other.group0()[2] * self.group3()[0])
                    - (other.group1()[0] * self.group0()[2])
                    - (other.group1()[1] * self.group2()[3])),
                ((other.group0()[0] * self.group3()[1])
                    - (other.group0()[1] * self.group3()[0])
                    - (other.group0()[2] * self.group0()[3])
                    - (other.group0()[2] * self.group1()[3])
                    - (other.group1()[1] * self.group0()[0])
                    - (other.group1()[2] * self.group2()[3])),
                ((other.group0()[0] * self.group2()[0])
                    + (other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])
                    + (other.group2()[2] * self.group0()[2])
                    + (other.group1()[1] * self.group1()[1])
                    + (other.group1()[2] * self.group1()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group1()[3]]) * swizzle!(self.group1(), 3, 2, 0, 3))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[2] * self.group2()[1]) - (other.group2()[0] * self.group2()[3]) + (other.group1()[1] * self.group1()[2])
                    - (other.group1()[3] * self.group3()[0])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group2()[1] * self.group2()[3]) + (other.group1()[2] * self.group1()[0])
                    - (other.group1()[3] * self.group3()[1])),
                (-(other.group0()[1] * self.group2()[0]) - (other.group2()[2] * self.group2()[3]) + (other.group1()[0] * self.group1()[1])
                    - (other.group1()[3] * self.group3()[2])),
                ((other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2]) - (other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group0()[3], self.group1()[2], self.group1()[0], self.group3()[1]]) * swizzle!(other.group1(), 0, 0, 1, 1))
                - (Simd32x4::from([self.group1()[1], self.group0()[3], self.group0()[3], self.group3()[2]]) * swizzle!(other.group1(), 2, 1, 2, 2))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(other.group1()[2] * self.group2()[1]) - (other.group1()[3] * self.group2()[0])),
                (-(other.group1()[1] * self.group3()[3]) - (other.group1()[3] * self.group2()[1])),
                (-(other.group1()[2] * self.group3()[3]) - (other.group1()[3] * self.group2()[2])),
                ((other.group1()[1] * self.group2()[1]) + (other.group1()[2] * self.group2()[2])),
            ]) - (Simd32x4::from(other.group2()[0]) * Simd32x4::from([self.group0()[3], self.group1()[2], self.group3()[1], self.group3()[0]]))
                + (Simd32x4::from(other.group2()[0]) * Simd32x4::from([self.group1()[3], self.group3()[2], self.group1()[1], self.group1()[0]]))
                + (Simd32x4::from(other.group2()[1]) * Simd32x4::from([self.group1()[2], self.group1()[3], self.group3()[0], self.group1()[1]]))
                - (Simd32x4::from(other.group2()[1]) * Simd32x4::from([self.group3()[2], self.group0()[3], self.group1()[0], self.group3()[1]]))
                - (Simd32x4::from(other.group2()[2]) * Simd32x4::from([self.group1()[1], self.group3()[0], self.group0()[3], self.group3()[2]]))
                + (Simd32x4::from(other.group2()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group1()[3], self.group1()[2]]))
                - (Simd32x4::from([self.group3()[3], self.group2()[2], self.group2()[0], self.group3()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))
                + (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group2(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group3()[3]) - (other.group0()[2] * self.group2()[1]) + (other.group2()[0] * self.group2()[3])
                    - (other.group2()[1] * self.group0()[2])
                    - (other.group1()[1] * self.group3()[2])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group3()[3]) + (other.group2()[1] * self.group2()[3])
                    - (other.group2()[2] * self.group0()[0])
                    - (other.group1()[2] * self.group3()[0])),
                (-(other.group0()[1] * self.group2()[0]) - (other.group0()[2] * self.group3()[3]) - (other.group2()[0] * self.group0()[1])
                    + (other.group2()[2] * self.group2()[3])
                    - (other.group1()[0] * self.group3()[1])),
                ((other.group0()[0] * self.group3()[0])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[1] * self.group3()[1])
                    + (other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group2(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))
                + (Simd32x4::from([self.group1()[3], self.group3()[2], self.group3()[0], self.group0()[1]]) * swizzle!(other.group1(), 0, 0, 1, 1))
                + (Simd32x4::from([self.group3()[1], self.group1()[3], self.group1()[3], self.group0()[2]]) * swizzle!(other.group1(), 2, 1, 2, 2))),
        );
    }
}
impl GeometricAntiProduct<DipoleInversion> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       72        0
    //    simd4       42       42        0
    // Totals...
    // yes simd       98      114        0
    //  no simd      224      240        0
    fn geometric_anti_product(self, other: DipoleInversion) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3])
                    - (other.group0()[2] * self.group1()[1])
                    - (other.group1()[2] * self.group0()[1])
                    - (other.group2()[3] * self.group1()[0])
                    - (other.group2()[3] * self.group3()[0])
                    - (other.group3()[1] * self.group0()[2])),
                (-(other.group0()[1] * self.group0()[3])
                    - (other.group0()[1] * self.group1()[3])
                    - (other.group1()[0] * self.group0()[2])
                    - (other.group2()[3] * self.group1()[1])
                    - (other.group2()[3] * self.group3()[1])
                    - (other.group3()[2] * self.group0()[0])),
                (-(other.group0()[2] * self.group0()[3])
                    - (other.group0()[2] * self.group1()[3])
                    - (other.group1()[1] * self.group0()[0])
                    - (other.group2()[3] * self.group1()[2])
                    - (other.group2()[3] * self.group3()[2])
                    - (other.group3()[0] * self.group0()[1])),
                ((other.group0()[0] * self.group2()[0])
                    + (other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])
                    + (other.group2()[0] * self.group0()[0])
                    + (other.group2()[1] * self.group0()[1])
                    + (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[1], other.group1()[3]]) * swizzle!(self.group1(), 3, 2, 0, 3))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group3(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group3(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[2]]) * swizzle!(other.group1(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group0()[1], self.group2()[3], self.group2()[3], self.group3()[2]]) * swizzle!(other.group3(), 2, 1, 2, 2))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))
                + (Simd32x4::from([self.group2()[3], self.group0()[2], self.group0()[0], self.group3()[1]]) * swizzle!(other.group3(), 0, 0, 1, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[2] * self.group2()[1]) + (other.group2()[1] * self.group0()[2])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group2()[2] * self.group0()[0])),
                (-(other.group0()[1] * self.group2()[0]) + (other.group2()[0] * self.group0()[1])),
                ((other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[3]]) * self.group3())
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[2]]) * swizzle!(other.group3(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group0()[1], self.group2()[3], self.group2()[3], self.group0()[1]]) * swizzle!(other.group2(), 2, 1, 2, 1))
                - (Simd32x4::from([self.group0()[3], self.group1()[2], self.group1()[0], self.group3()[1]]) * swizzle!(other.group1(), 0, 0, 1, 1))
                - (Simd32x4::from([self.group1()[1], self.group0()[3], self.group0()[3], self.group3()[2]]) * swizzle!(other.group1(), 2, 1, 2, 2))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[3]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group1()[3], self.group3()[2], self.group3()[0], self.group1()[0]]) * swizzle!(other.group3(), 0, 0, 1, 0))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[2]]) * swizzle!(other.group2(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group2()[3], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 0, 0, 1, 0))
                - (Simd32x4::from([self.group3()[1], self.group1()[3], self.group1()[3], self.group1()[1]]) * swizzle!(other.group3(), 2, 1, 2, 1))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]) * swizzle!(other.group3(), 1, 2, 0, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(other.group1()[2] * self.group2()[1])
                    - (other.group1()[3] * self.group2()[0])
                    - (other.group3()[2] * self.group2()[1])
                    - (other.group3()[3] * self.group1()[0])),
                (-(other.group1()[3] * self.group2()[1])
                    - (other.group2()[2] * self.group3()[0])
                    - (other.group3()[1] * self.group3()[3])
                    - (other.group3()[3] * self.group1()[1])),
                (-(other.group1()[3] * self.group2()[2])
                    - (other.group2()[2] * self.group0()[3])
                    - (other.group3()[2] * self.group3()[3])
                    - (other.group3()[3] * self.group1()[2])),
                ((other.group1()[2] * self.group2()[2]) + (other.group3()[1] * self.group2()[1]) + (other.group3()[2] * self.group2()[2]) + (other.group3()[3] * self.group1()[3])),
            ]) - (Simd32x4::from(other.group2()[0]) * Simd32x4::from([self.group0()[3], self.group1()[2], self.group3()[1], self.group3()[0]]))
                + (Simd32x4::from(other.group2()[0]) * Simd32x4::from([self.group1()[3], self.group3()[2], self.group1()[1], self.group1()[0]]))
                + (Simd32x4::from(other.group2()[1]) * Simd32x4::from([self.group1()[2], self.group1()[3], self.group3()[0], self.group1()[1]]))
                + (Simd32x4::from(other.group2()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group1()[3], self.group1()[2]]))
                - (Simd32x4::from([other.group2()[1], other.group1()[1], other.group1()[2], other.group2()[1]]) * swizzle!(self.group3(), 2, 3, 3, 1))
                + (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[1]]) * swizzle!(self.group2(), 2, 0, 1, 1))
                - (Simd32x4::from([self.group1()[1], self.group0()[3], self.group1()[0], self.group3()[2]]) * swizzle!(other.group2(), 2, 1, 1, 2))
                + (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group3()[3], self.group2()[2], self.group2()[0], self.group0()[3]]) * swizzle!(other.group3(), 0, 0, 1, 3))
                - (Simd32x4::from([self.group3()[3], self.group2()[2], self.group2()[0], self.group3()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))
                + (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group2(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group3()[3]) - (other.group0()[2] * self.group2()[1]) - (other.group1()[1] * self.group3()[2])
                    + (other.group2()[0] * self.group2()[3])
                    + (other.group3()[0] * self.group0()[3])
                    + (other.group3()[3] * self.group0()[0])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group3()[3]) - (other.group1()[2] * self.group3()[0])
                    + (other.group2()[1] * self.group2()[3])
                    + (other.group3()[1] * self.group0()[3])
                    + (other.group3()[3] * self.group0()[1])),
                (-(other.group0()[1] * self.group2()[0]) - (other.group0()[2] * self.group3()[3]) - (other.group1()[0] * self.group3()[1])
                    + (other.group2()[2] * self.group2()[3])
                    + (other.group3()[2] * self.group0()[3])
                    + (other.group3()[3] * self.group0()[2])),
                ((other.group0()[0] * self.group3()[0]) + (other.group0()[1] * self.group3()[1]) + (other.group0()[2] * self.group1()[2]) + (other.group0()[2] * self.group3()[2])
                    - (other.group3()[1] * self.group0()[1])
                    - (other.group3()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]) * swizzle!(self.group2(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[2]]) * swizzle!(self.group0(), 1, 2, 0, 2))
                + (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group0()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[3], self.group3()[2], self.group3()[0], self.group0()[0]]) * swizzle!(other.group1(), 0, 0, 1, 0))
                + (Simd32x4::from([self.group3()[1], self.group1()[3], self.group1()[3], self.group0()[1]]) * swizzle!(other.group1(), 2, 1, 2, 1))
                - (swizzle!(other.group2(), 1, 2, 0, 3) * swizzle!(self.group0(), 2, 0, 1, 3))),
        );
    }
}
impl GeometricAntiProduct<DualNum321> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        4        0
    //    simd4        4        9        0
    // Totals...
    // yes simd        4       13        0
    //  no simd       16       40        0
    fn geometric_anti_product(self, other: DualNum321) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                (other.group0()[0] * self.group1()[3]),
            ]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]]) * self.group0())),
            // e23, e31, e12, e45
            (-(Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[3]]))
                + (Simd32x4::from(other.group0()[1]) * self.group1())),
            // e15, e25, e35, e1234
            ((Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]]) * self.group2() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group0()[0]]) * self.group2())),
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                + (Simd32x4::from(other.group0()[1]) * self.group3())),
        );
    }
}
impl GeometricAntiProduct<DualNum4> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       16        0
    //    simd4        3        5        0
    // Totals...
    // yes simd        8       21        0
    //  no simd       17       36        0
    fn geometric_anti_product(self, other: DualNum4) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (other.group0()[0] * self.group3()[0]),
                (other.group0()[0] * self.group3()[1]),
                (other.group0()[0] * self.group3()[2]),
                0.0,
            ]) + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                + (Simd32x4::from(other.group0()[1]) * self.group0())),
            // e23, e31, e12, e45
            ((Simd32x4::from(other.group0()[0])
                * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(other.group0()[1]) * self.group1())),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[1] * self.group2()[0]),
                (other.group0()[1] * self.group2()[1]),
                (other.group0()[1] * self.group2()[2]),
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group2()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group3()[0])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group3()[1])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group3()[2])),
                (other.group0()[1] * self.group3()[3]),
            ]),
        );
    }
}
impl GeometricAntiProduct<DualNum5> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       17        0
    //    simd4        3        4        0
    // Totals...
    // yes simd       10       21        0
    //  no simd       19       33        0
    fn geometric_anti_product(self, other: DualNum5) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                ((other.group0()[0] * self.group2()[3]) + (other.group0()[1] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            ((Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))
                + (Simd32x4::from(other.group0()[1]) * self.group1())),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) - (other.group0()[0] * self.group3()[0]) + (other.group0()[1] * self.group2()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group2()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group2()[2])),
                (other.group0()[1] * self.group2()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([0.0, 0.0, 0.0, ((other.group0()[0] * self.group1()[3]) * -1.0)])
                + (Simd32x4::from(other.group0()[0]) * self.group0())
                + (Simd32x4::from(other.group0()[1]) * self.group3())),
        );
    }
}
impl GeometricAntiProduct<FlatPoint> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       20        0
    //    simd4        9       11        0
    // Totals...
    // yes simd       21       31        0
    //  no simd       48       64        0
    fn geometric_anti_product(self, other: FlatPoint) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[3] * self.group0()[0]),
                (other.group0()[3] * self.group0()[1]),
                (other.group0()[3] * self.group0()[2]),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self.group1()[3])),
            ]),
            // e415, e425, e435, e321
            (-(Simd32x4::from([self.group0()[1], self.group2()[3], self.group2()[3], self.group0()[1]]) * swizzle!(other.group0(), 2, 1, 2, 1))
                - (Simd32x4::from([self.group2()[3], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group0(), 0, 0, 1, 0))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                + (swizzle!(other.group0(), 1, 2, 0, 3) * swizzle!(self.group0(), 2, 0, 1, 3))),
            // e235, e315, e125, e5
            (-(Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[3], self.group1()[2], self.group3()[1], self.group3()[0]]))
                + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group3()[2], self.group1()[1], self.group1()[0]]))
                + (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group1()[2], self.group1()[3], self.group3()[0], self.group1()[1]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group3()[2], self.group0()[3], self.group1()[0], self.group3()[1]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group1()[1], self.group3()[0], self.group0()[3], self.group3()[2]]))
                + (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group1()[3], self.group1()[2]]))
                - (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (other.group0()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group2()[3]) - (other.group0()[2] * self.group0()[0]) + (other.group0()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group0()[1])
                    + (other.group0()[1] * self.group0()[0])
                    + (other.group0()[2] * self.group2()[3])
                    + (other.group0()[3] * self.group1()[2])),
                (other.group0()[3] * self.group2()[3]),
            ]),
        );
    }
}
impl GeometricAntiProduct<Flector> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       29        0
    //    simd4       24       25        0
    // Totals...
    // yes simd       43       54        0
    //  no simd      115      129        0
    fn geometric_anti_product(self, other: Flector) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self.group1()[3]) + (other.group1()[2] * self.group3()[2])),
            ]) + (Simd32x4::from([self.group0()[1], self.group2()[3], self.group2()[3], self.group3()[1]]) * swizzle!(other.group1(), 2, 1, 2, 1))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group2()[3], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group1(), 0, 0, 1, 0))
                + (swizzle!(other.group0(), 3, 3, 3, 0) * swizzle!(self.group0(), 0, 1, 2, 0))),
            // e415, e425, e435, e321
            (-(Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[2]]) * swizzle!(other.group1(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group0()[1], self.group2()[3], self.group2()[3], self.group0()[1]]) * swizzle!(other.group0(), 2, 1, 2, 1))
                - (Simd32x4::from([self.group1()[3], self.group3()[2], self.group3()[0], self.group1()[0]]) * swizzle!(other.group1(), 0, 0, 1, 0))
                - (Simd32x4::from([self.group2()[3], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group0(), 0, 0, 1, 0))
                - (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group3()[1], self.group1()[3], self.group1()[3], self.group1()[1]]) * swizzle!(other.group1(), 2, 1, 2, 1))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                + (swizzle!(other.group0(), 1, 2, 0, 3) * swizzle!(self.group0(), 2, 0, 1, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(other.group1()[2] * self.group2()[1]) - (other.group1()[3] * self.group1()[0])),
                (-(other.group1()[1] * self.group3()[3]) - (other.group1()[3] * self.group1()[1])),
                (-(other.group1()[2] * self.group3()[3]) - (other.group1()[3] * self.group1()[2])),
                ((other.group1()[2] * self.group2()[2]) + (other.group1()[3] * self.group1()[3])),
            ]) - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[3], self.group1()[2], self.group3()[1], self.group3()[0]]))
                + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group3()[2], self.group1()[1], self.group1()[0]]))
                + (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group1()[2], self.group1()[3], self.group3()[0], self.group1()[1]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group3()[2], self.group0()[3], self.group1()[0], self.group3()[1]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group1()[1], self.group3()[0], self.group0()[3], self.group3()[2]]))
                + (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group1()[3], self.group1()[2]]))
                - (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))
                + (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group3()[3], self.group2()[2], self.group2()[0], self.group0()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))
                + (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group2(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1])
                    + (other.group0()[3] * self.group1()[0])
                    + (other.group1()[0] * self.group0()[3])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group2()[3])
                    + (other.group0()[3] * self.group1()[1])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group0()[3])
                    + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group2()[3])
                    + (other.group0()[3] * self.group1()[2])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group0()[3])
                    + (other.group1()[3] * self.group0()[2])),
                ((other.group1()[2] * self.group0()[2]) * -1.0),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))
                + (Simd32x4::from([self.group2()[3], self.group0()[2], self.group0()[0], self.group2()[3]]) * swizzle!(other.group0(), 0, 0, 1, 3))),
        );
    }
}
impl GeometricAntiProduct<Line> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       68       84        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       71       87        0
    //  no simd       80       96        0
    fn geometric_anti_product(self, other: Line) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[0] * self.group2()[3]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group2()[3])),
                ((other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group2()[3])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (other.group1()[0] * self.group2()[3])
                    + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[3]) - (other.group0()[2] * self.group1()[0])
                    + (other.group1()[0] * self.group0()[2])
                    + (other.group1()[1] * self.group2()[3])),
                (-(other.group0()[0] * self.group1()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group0()[3])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group2()[3])),
                (-(other.group0()[0] * self.group3()[0])
                    - (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group3()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1]) + (other.group1()[0] * self.group0()[3])
                    - (other.group1()[0] * self.group1()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[1] * self.group3()[2])
                    + (other.group1()[2] * self.group1()[1])
                    - (other.group1()[2] * self.group3()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group3()[3]) - (other.group0()[2] * self.group2()[0]) + (other.group1()[0] * self.group1()[2])
                    - (other.group1()[0] * self.group3()[2])
                    + (other.group1()[1] * self.group0()[3])
                    - (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group1()[0])
                    + (other.group1()[2] * self.group3()[0])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) + (other.group0()[2] * self.group3()[3])
                    - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[0] * self.group3()[1])
                    + (other.group1()[1] * self.group1()[0])
                    - (other.group1()[1] * self.group3()[0])
                    + (other.group1()[2] * self.group0()[3])
                    - (other.group1()[2] * self.group1()[3])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group3()[2]) + (other.group1()[0] * self.group2()[3]) - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group3()[0]) + (other.group1()[0] * self.group0()[2]) + (other.group1()[1] * self.group2()[3])
                    - (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group3()[1]) + (other.group0()[2] * self.group1()[3]) - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group2()[3])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    + (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group1()[2])
                    + (other.group1()[2] * self.group3()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<Motor> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       52       68        0
    //    simd4       15       15        0
    // Totals...
    // yes simd       67       83        0
    //  no simd      112      128        0
    fn geometric_anti_product(self, other: Motor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) + (other.group0()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group2()[3]) + (other.group0()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group2()[3]) + (other.group0()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])
                    + (other.group1()[3] * self.group2()[3])),
            ]) - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group2()[3], self.group0()[2], self.group0()[0], self.group0()[3]]) * swizzle!(other.group0(), 0, 0, 1, 3))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group0()[2] * self.group1()[1]) + (other.group0()[3] * self.group1()[0]) + (other.group1()[2] * self.group0()[1]) + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[3]) + (other.group0()[3] * self.group1()[1]) + (other.group1()[1] * self.group2()[3]) + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group0()[3]) + (other.group0()[3] * self.group1()[2]) + (other.group1()[2] * self.group2()[3]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group3()[2])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([self.group0()[3], self.group1()[2], self.group1()[0], self.group1()[3]]) * swizzle!(other.group0(), 0, 0, 1, 3))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group2()[3], self.group0()[2], self.group0()[0], self.group2()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))
                - (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group0()[2] * self.group2()[1]) + (other.group0()[3] * self.group2()[0]) + (other.group1()[0] * self.group0()[3])
                    - (other.group1()[0] * self.group1()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[1] * self.group3()[2])
                    + (other.group1()[2] * self.group1()[1])
                    - (other.group1()[2] * self.group3()[1])
                    + (other.group1()[3] * self.group1()[0])
                    - (other.group1()[3] * self.group3()[0])),
                ((other.group0()[1] * self.group3()[3]) + (other.group0()[3] * self.group2()[1]) + (other.group1()[0] * self.group1()[2]) - (other.group1()[0] * self.group3()[2])
                    + (other.group1()[1] * self.group0()[3])
                    - (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group1()[0])
                    + (other.group1()[2] * self.group3()[0])
                    + (other.group1()[3] * self.group1()[1])
                    - (other.group1()[3] * self.group3()[1])),
                ((other.group0()[2] * self.group3()[3]) + (other.group0()[3] * self.group2()[2]) - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[0] * self.group3()[1])
                    + (other.group1()[1] * self.group1()[0])
                    - (other.group1()[1] * self.group3()[0])
                    + (other.group1()[2] * self.group0()[3])
                    - (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])
                    - (other.group1()[3] * self.group3()[2])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group3()[3], self.group2()[2], self.group2()[0], self.group2()[3]]) * swizzle!(other.group0(), 0, 0, 1, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (other.group0()[3] * self.group3()[0]),
                (other.group0()[1] * self.group1()[3]),
                (other.group0()[2] * self.group1()[3]),
                (-(other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])),
            ]) + (Simd32x4::from(other.group1()[3]) * self.group0())
                + (Simd32x4::from([other.group0()[2], other.group0()[3], other.group0()[3], other.group1()[0]]) * swizzle!(self.group3(), 1, 1, 2, 0))
                + (Simd32x4::from([self.group0()[1], self.group2()[3], self.group2()[3], self.group3()[2]]) * swizzle!(other.group1(), 2, 1, 2, 2))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[3], self.group3()[2], self.group3()[0], self.group3()[3]]) * swizzle!(other.group0(), 0, 0, 1, 3))
                + (Simd32x4::from([self.group2()[3], self.group0()[2], self.group0()[0], self.group3()[1]]) * swizzle!(other.group1(), 0, 0, 1, 1))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<MultiVector> for VersorOdd {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      116      148        0
    //    simd2        4        4        0
    //    simd3       52       52        0
    //    simd4       50       50        0
    // Totals...
    // yes simd      222      254        0
    //  no simd      480      512        0
    fn geometric_anti_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                ((other.group0()[1] * self.group0()[3])
                    - (other.group7()[0] * self.group2()[0])
                    - (other.group7()[1] * self.group2()[1])
                    - (other.group7()[2] * self.group2()[2])
                    - (other.group8()[0] * self.group0()[0])
                    - (other.group8()[1] * self.group0()[1])
                    - (other.group8()[2] * self.group0()[2])
                    + (other.group1()[3] * self.group3()[3])
                    - (other.group6()[0] * self.group1()[0])
                    - (other.group6()[1] * self.group1()[1])
                    - (other.group6()[2] * self.group1()[2])
                    + (self.group2()[3] * other[e1])),
                (-(other.group0()[0] * self.group0()[3])
                    + (other.group4()[0] * self.group2()[0])
                    + (other.group4()[1] * self.group2()[1])
                    + (other.group4()[2] * self.group2()[2])
                    + (other.group5()[0] * self.group1()[0])
                    + (other.group5()[1] * self.group1()[1])
                    + (other.group5()[2] * self.group1()[2])
                    + (other.group3()[0] * self.group0()[0])
                    + (other.group3()[1] * self.group0()[1])
                    + (other.group3()[2] * self.group0()[2])
                    - (other.group9()[3] * self.group2()[3])
                    - (self.group3()[3] * other[e45])),
            ]) - (Simd32x2::from(self.group1()[3]) * Simd32x2::from([other.group6()[3], other.group3()[3]]))
                + (Simd32x2::from(self.group3()[0]) * Simd32x2::from([other.group1()[0], other.group9()[0]]))
                + (Simd32x2::from(self.group3()[1]) * Simd32x2::from([other.group1()[1], other.group9()[1]]))
                + (Simd32x2::from(self.group3()[2]) * Simd32x2::from([other.group1()[2], other.group9()[2]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group4()[0] * self.group3()[3]) - (other.group5()[1] * self.group3()[2]) + (other.group3()[0] * self.group2()[3])),
                (-(other.group4()[1] * self.group3()[3]) - (other.group5()[2] * self.group3()[0]) + (other.group3()[1] * self.group2()[3])),
                (-(other.group4()[2] * self.group3()[3]) - (other.group5()[0] * self.group3()[1]) + (other.group3()[2] * self.group2()[3])),
                ((other.group4()[2] * self.group3()[2]) - (other.group9()[2] * self.group0()[2]) - (self.group1()[3] * other[e45])),
            ]) - (Simd32x4::from(other[e45]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[3]]))
                + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group4()[0]]) * swizzle!(self.group3(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group4()[1], other.group4()[2], other.group4()[0], other.group3()[3]]) * swizzle!(self.group2(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group4()[2], other.group4()[0], other.group4()[1], other.group0()[0]]) * swizzle!(self.group2(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other.group4()[0]]) * swizzle!(self.group1(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group4()[1]]) * swizzle!(self.group3(), 1, 2, 0, 1))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group9()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group5()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group4()[1]]) * swizzle!(self.group1(), 0, 1, 2, 1))
                + (Simd32x4::from([other.group9()[0], other.group9()[1], other.group9()[2], other.group5()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group9()[2], other.group9()[0], other.group9()[1], other.group4()[2]]) * swizzle!(self.group1(), 1, 2, 0, 2))
                + (Simd32x4::from([other.group9()[3], other.group9()[3], other.group9()[3], other.group5()[2]]) * swizzle!(self.group0(), 0, 1, 2, 2))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[1]]) * swizzle!(other.group9(), 1, 2, 0, 1))),
            // e5
            (-(other.group0()[0] * self.group3()[3])
                + (other.group5()[0] * self.group2()[0])
                + (other.group5()[1] * self.group2()[1])
                + (other.group5()[2] * self.group2()[2])
                + (other.group3()[0] * self.group1()[0])
                - (other.group3()[0] * self.group3()[0])
                + (other.group3()[1] * self.group1()[1])
                - (other.group3()[1] * self.group3()[1])
                + (other.group3()[2] * self.group1()[2])
                - (other.group3()[2] * self.group3()[2])
                - (other.group3()[3] * self.group3()[3])
                + (other.group9()[0] * self.group2()[0])
                + (other.group9()[1] * self.group2()[1])
                + (other.group9()[2] * self.group2()[2])
                - (other.group9()[3] * self.group0()[3])
                + (other.group9()[3] * self.group1()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((other.group8()[0] * self.group0()[3]) + (other.group8()[1] * self.group3()[2]) - (other.group1()[2] * self.group2()[1]) + (other.group6()[0] * self.group3()[3])),
                ((other.group8()[1] * self.group0()[3]) + (other.group8()[2] * self.group3()[0]) + (other.group6()[1] * self.group3()[3]) - (self.group3()[1] * other[e1])),
                ((other.group8()[0] * self.group3()[1]) + (other.group8()[2] * self.group0()[3]) + (other.group6()[2] * self.group3()[3]) - (self.group3()[2] * other[e1])),
                ((other.group7()[2] * self.group2()[2]) + (other.group1()[2] * self.group1()[2]) - (other.group6()[3] * self.group0()[3]) + (self.group2()[3] * other[e1])),
            ]) + (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                - (Simd32x4::from(other.group8()[0]) * Simd32x4::from([self.group1()[3], self.group3()[2], self.group1()[1], self.group0()[0]]))
                - (Simd32x4::from(other.group8()[1]) * Simd32x4::from([self.group1()[2], self.group1()[3], self.group3()[0], self.group0()[1]]))
                - (Simd32x4::from(other.group8()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group1()[3], self.group0()[2]]))
                + (Simd32x4::from([other.group8()[2], other.group8()[0], other.group8()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group7()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group7()[1]]) * swizzle!(self.group2(), 1, 2, 0, 1))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[1]]) * swizzle!(other.group6(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group3()[0]]) * swizzle!(other.group6(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[3], self.group2()[2], self.group2()[0], self.group3()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))
                - (Simd32x4::from([other[e1], other.group1()[1], other.group1()[2], other.group6()[2]]) * swizzle!(self.group3(), 0, 3, 3, 2))
                + (Simd32x4::from([other[e1], other[e1], other[e1], other.group1()[1]]) * swizzle!(self.group1(), 0, 1, 2, 1))),
            // e41, e42, e43
            (Simd32x3::from([
                (-(other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1]) - (other.group6()[1] * self.group0()[2])
                    + (other.group6()[2] * self.group0()[1])),
                ((other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0]) + (other.group6()[0] * self.group0()[2]) - (other.group6()[2] * self.group0()[0])),
                (-(other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0]) - (other.group6()[0] * self.group0()[1])
                    + (other.group6()[1] * self.group0()[0])),
            ]) + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(other.group6()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                + (Simd32x3::from([self.group0()[3], self.group1()[2], self.group1()[0]]) * swizzle!(other.group7(), 0, 0, 1))
                + (Simd32x3::from([self.group1()[1], self.group0()[3], self.group0()[3]]) * swizzle!(other.group7(), 2, 1, 2))
                - (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]) * swizzle!(other.group7(), 1, 2, 0))
                + (Simd32x3::from([self.group1()[3], self.group3()[2], self.group3()[0]]) * swizzle!(other.group7(), 0, 0, 1))
                + (Simd32x3::from([self.group3()[1], self.group1()[3], self.group1()[3]]) * swizzle!(other.group7(), 2, 1, 2))
                - (Simd32x3::from([self.group3()[2], self.group3()[0], self.group3()[1]]) * swizzle!(other.group7(), 1, 2, 0))),
            // e23, e31, e12
            (Simd32x3::from([
                ((other.group1()[1] * self.group3()[2]) - (other.group1()[2] * self.group3()[1]) - (other.group6()[1] * self.group1()[2]) + (other.group6()[2] * self.group1()[1])),
                (-(other.group1()[0] * self.group3()[2]) + (other.group1()[2] * self.group3()[0]) + (other.group6()[0] * self.group1()[2])
                    - (other.group6()[2] * self.group1()[0])),
                ((other.group1()[0] * self.group3()[1]) - (other.group1()[1] * self.group3()[0]) - (other.group6()[0] * self.group1()[1]) + (other.group6()[1] * self.group1()[0])),
            ]) + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                - (Simd32x3::from(other.group6()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from([self.group0()[1], self.group2()[3], self.group2()[3]]) * swizzle!(other.group8(), 2, 1, 2))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group8(), 1, 2, 0))
                + (Simd32x3::from([self.group2()[1], self.group3()[3], self.group3()[3]]) * swizzle!(other.group7(), 2, 1, 2))
                - (Simd32x3::from([self.group2()[2], self.group2()[0], self.group2()[1]]) * swizzle!(other.group7(), 1, 2, 0))
                + (Simd32x3::from([self.group2()[3], self.group0()[2], self.group0()[0]]) * swizzle!(other.group8(), 0, 0, 1))
                + (Simd32x3::from([self.group3()[3], self.group2()[2], self.group2()[0]]) * swizzle!(other.group7(), 0, 0, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group4()[2] * self.group2()[1]) - (other.group9()[2] * self.group3()[1]) - (other.group9()[3] * self.group0()[0])),
                (-(other.group4()[0] * self.group2()[2]) - (other.group9()[1] * self.group1()[3]) - (other.group9()[3] * self.group0()[1])),
                (-(other.group4()[1] * self.group2()[0]) - (other.group9()[2] * self.group1()[3]) - (other.group9()[3] * self.group0()[2])),
                ((other.group4()[1] * self.group2()[1]) + (other.group4()[2] * self.group2()[2]) - (other.group5()[2] * self.group3()[2])),
            ]) - (Simd32x4::from(other[e45]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))
                - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group9()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))
                - (Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[2], other.group5()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group4()[1], other.group4()[2], other.group4()[0], other.group4()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other.group3()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group5()[1], other.group5()[2], other.group5()[0], other.group0()[0]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group9()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))
                - (Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group5()[1]]) * swizzle!(self.group3(), 0, 1, 2, 1))
                - (Simd32x4::from([self.group0()[1], self.group2()[3], self.group2()[3], self.group0()[2]]) * swizzle!(other.group3(), 2, 1, 2, 2))
                - (Simd32x4::from([self.group1()[3], self.group3()[2], self.group3()[0], self.group1()[2]]) * swizzle!(other.group9(), 0, 0, 1, 2))
                - (Simd32x4::from([self.group2()[3], self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group3(), 0, 0, 1, 1))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]) * swizzle!(other.group9(), 1, 2, 0, 3))
                + (swizzle!(other.group3(), 1, 2, 0, 3) * swizzle!(self.group0(), 2, 0, 1, 3))),
            // e423, e431, e412
            (Simd32x3::from([
                (-(other.group9()[1] * self.group0()[2]) + (other.group9()[2] * self.group0()[1])),
                ((other.group9()[0] * self.group0()[2]) - (other.group9()[2] * self.group0()[0])),
                (-(other.group9()[0] * self.group0()[1]) + (other.group9()[1] * self.group0()[0])),
            ]) - (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                - (Simd32x3::from(other[e45]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(other[e45]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                - (Simd32x3::from([self.group0()[1], self.group2()[3], self.group2()[3]]) * swizzle!(other.group5(), 2, 1, 2))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group5(), 1, 2, 0))
                - (Simd32x3::from([self.group0()[3], self.group1()[2], self.group1()[0]]) * swizzle!(other.group4(), 0, 0, 1))
                - (Simd32x3::from([self.group1()[1], self.group0()[3], self.group0()[3]]) * swizzle!(other.group4(), 2, 1, 2))
                + (Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]) * swizzle!(other.group4(), 1, 2, 0))
                - (Simd32x3::from([self.group1()[3], self.group3()[2], self.group3()[0]]) * swizzle!(other.group4(), 0, 0, 1))
                - (Simd32x3::from([self.group2()[3], self.group0()[2], self.group0()[0]]) * swizzle!(other.group5(), 0, 0, 1))
                - (Simd32x3::from([self.group3()[1], self.group1()[3], self.group1()[3]]) * swizzle!(other.group4(), 2, 1, 2))
                + (Simd32x3::from([self.group3()[2], self.group3()[0], self.group3()[1]]) * swizzle!(other.group4(), 1, 2, 0))),
            // e235, e315, e125
            (Simd32x3::from([
                ((other.group9()[1] * self.group2()[2]) - (other.group9()[2] * self.group2()[1])),
                (-(other.group9()[0] * self.group2()[2]) + (other.group9()[2] * self.group2()[0])),
                ((other.group9()[0] * self.group2()[1]) - (other.group9()[1] * self.group2()[0])),
            ]) - (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                - (Simd32x3::from(other.group3()[0]) * Simd32x3::from([self.group0()[3], self.group1()[2], self.group3()[1]]))
                + (Simd32x3::from(other.group3()[0]) * Simd32x3::from([self.group1()[3], self.group3()[2], self.group1()[1]]))
                + (Simd32x3::from(other.group3()[1]) * Simd32x3::from([self.group1()[2], self.group1()[3], self.group3()[0]]))
                - (Simd32x3::from(other.group3()[1]) * Simd32x3::from([self.group3()[2], self.group0()[3], self.group1()[0]]))
                - (Simd32x3::from(other.group3()[2]) * Simd32x3::from([self.group1()[1], self.group3()[0], self.group0()[3]]))
                + (Simd32x3::from(other.group3()[2]) * Simd32x3::from([self.group3()[1], self.group1()[0], self.group1()[3]]))
                - (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                - (Simd32x3::from(other.group9()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group9()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                - (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                - (Simd32x3::from([self.group2()[1], self.group3()[3], self.group3()[3]]) * swizzle!(other.group5(), 2, 1, 2))
                + (Simd32x3::from([self.group2()[2], self.group2()[0], self.group2()[1]]) * swizzle!(other.group5(), 1, 2, 0))
                - (Simd32x3::from([self.group3()[3], self.group2()[2], self.group2()[0]]) * swizzle!(other.group5(), 0, 0, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group8()[1] * self.group0()[2]) - (other.group1()[0] * self.group0()[3]) + (other.group6()[0] * self.group1()[3]) + (self.group0()[0] * other[e1])),
                (-(other.group8()[2] * self.group0()[0]) - (other.group1()[1] * self.group0()[3]) + (other.group6()[1] * self.group1()[3]) + (self.group0()[1] * other[e1])),
                (-(other.group8()[0] * self.group0()[1]) - (other.group1()[2] * self.group0()[3]) + (other.group6()[2] * self.group1()[3]) + (self.group0()[2] * other[e1])),
                ((other.group8()[1] * self.group3()[1]) - (other.group8()[2] * self.group1()[2]) + (other.group8()[2] * self.group3()[2]) - (self.group1()[3] * other[e1])),
            ]) + (Simd32x4::from(other.group0()[1]) * self.group3())
                - (Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group6()[3]]))
                + (Simd32x4::from([other.group7()[1], other.group7()[2], other.group7()[0], other.group1()[0]]) * swizzle!(self.group2(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group7()[2], other.group7()[0], other.group7()[1], other.group6()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group8()[0], other.group8()[1], other.group8()[2], other.group1()[1]]) * swizzle!(self.group2(), 3, 3, 3, 1))
                + (Simd32x4::from([other.group8()[2], other.group8()[0], other.group8()[1], other[e1]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group8()[0]]) * swizzle!(self.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group6()[1]]) * swizzle!(self.group2(), 0, 1, 2, 1))
                + (Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group8()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group6()[3], other.group6()[3], other.group6()[3], other.group8()[1]]) * swizzle!(self.group1(), 0, 1, 2, 1))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]) * swizzle!(other.group1(), 1, 2, 0, 2))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[2]]) * swizzle!(other.group6(), 1, 2, 0, 2))),
            // e1234
            ((other.group0()[1] * self.group2()[3])
                - (other.group7()[0] * self.group1()[0])
                - (other.group7()[0] * self.group3()[0])
                - (other.group7()[1] * self.group1()[1])
                - (other.group7()[1] * self.group3()[1])
                - (other.group7()[2] * self.group1()[2])
                - (other.group7()[2] * self.group3()[2])
                - (other.group1()[0] * self.group0()[0])
                - (other.group1()[1] * self.group0()[1])
                - (other.group1()[2] * self.group0()[2])
                + (other.group1()[3] * self.group0()[3])
                + (other.group1()[3] * self.group1()[3])
                - (other.group6()[0] * self.group0()[0])
                - (other.group6()[1] * self.group0()[1])
                - (other.group6()[2] * self.group0()[2])
                + (other.group6()[3] * self.group2()[3])),
        );
    }
}
impl GeometricAntiProduct<Plane> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       20        0
    //    simd4       10       11        0
    // Totals...
    // yes simd       21       31        0
    //  no simd       51       64        0
    fn geometric_anti_product(self, other: Plane) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[2] * self.group3()[2])])
                + (Simd32x4::from([self.group0()[1], self.group2()[3], self.group2()[3], self.group3()[1]]) * swizzle!(other.group0(), 2, 1, 2, 1))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group2()[3], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group0(), 0, 0, 1, 0))),
            // e415, e425, e435, e321
            (-(Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group1()[3], self.group3()[2], self.group3()[0], self.group1()[0]]) * swizzle!(other.group0(), 0, 0, 1, 0))
                - (Simd32x4::from([self.group3()[1], self.group1()[3], self.group1()[3], self.group1()[1]]) * swizzle!(other.group0(), 2, 1, 2, 1))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(other.group0()[2] * self.group2()[1]) - (other.group0()[3] * self.group1()[0])),
                (-(other.group0()[1] * self.group3()[3]) - (other.group0()[3] * self.group1()[1])),
                (-(other.group0()[2] * self.group3()[3]) - (other.group0()[3] * self.group1()[2])),
                ((other.group0()[2] * self.group2()[2]) + (other.group0()[3] * self.group1()[3])),
            ]) + (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group3()[3], self.group2()[2], self.group2()[0], self.group0()[3]]) * swizzle!(other.group0(), 0, 0, 1, 3))
                + (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group2(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[2] * self.group1()[1]) + (other.group0()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[3]) + (other.group0()[3] * self.group0()[1])),
                ((other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group0()[3]) + (other.group0()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<QuadNum> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4       11       16        0
    // Totals...
    // yes simd       15       24        0
    //  no simd       48       72        0
    fn geometric_anti_product(self, other: QuadNum) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])
                * swizzle!(other.group0(), 3, 3, 3, 2)
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                + (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[3]]) * swizzle!(other.group0(), 0, 0, 0, 1))
                + (swizzle!(other.group0(), 2, 2, 2, 3) * self.group0())),
            // e23, e31, e12, e45
            ((Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]])
                * swizzle!(other.group0(), 3, 3, 3, 2)
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]) * swizzle!(other.group0(), 1, 1, 1, 3))
                + (swizzle!(other.group0(), 0, 0, 0, 1) * self.group2())
                - (swizzle!(other.group0(), 2, 2, 2, 0) * self.group3())),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (-(other.group0()[1] * self.group3()[0]) - (other.group0()[2] * self.group2()[0])),
                (-(other.group0()[1] * self.group3()[1]) - (other.group0()[2] * self.group2()[1])),
                (-(other.group0()[1] * self.group3()[2]) - (other.group0()[2] * self.group2()[2])),
                ((other.group0()[2] * self.group2()[3]) + (other.group0()[3] * self.group2()[3])),
            ]) + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]) * swizzle!(other.group0(), 1, 1, 1, 0))
                + (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]) * swizzle!(other.group0(), 3, 3, 3, 0))),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(other.group0()[1]) * self.group0())
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                + (Simd32x4::from(other.group0()[3]) * self.group3())
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]) * swizzle!(other.group0(), 0, 0, 0, 1))),
        );
    }
}
impl GeometricAntiProduct<RoundPoint> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       16        0
    //    simd4       15       18        0
    // Totals...
    // yes simd       19       34        0
    //  no simd       64       88        0
    fn geometric_anti_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((Simd32x4::from([
                (other.group0()[1] * self.group0()[2]),
                (other.group0()[2] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (self.group2()[3] * other[e2]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from(other.group0()[3]) * self.group3())
                + (Simd32x4::from([self.group0()[1], self.group2()[3], self.group2()[3], self.group3()[1]]) * swizzle!(other.group0(), 2, 1, 2, 1))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group2()[3], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group0(), 0, 0, 1, 0))),
            // e23, e31, e12, e45
            ((Simd32x4::from([self.group3()[1], self.group1()[3], self.group1()[3], self.group1()[2]])
                * swizzle!(other.group0(), 2, 1, 2, 2)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from(other[e2]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))
                - (Simd32x4::from([self.group1()[3], self.group3()[2], self.group3()[0], self.group3()[3]]) * swizzle!(other.group0(), 0, 0, 1, 3))
                + (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            (-Simd32x4::from([
                (self.group3()[0] * other[e2]),
                (self.group3()[1] * other[e2]),
                (self.group3()[2] * other[e2]),
                (other.group0()[2] * self.group0()[2]),
            ]) - (Simd32x4::from([self.group2()[1], self.group3()[3], self.group3()[3], self.group0()[1]]) * swizzle!(other.group0(), 2, 1, 2, 1))
                + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group3()[3], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group0(), 0, 0, 1, 0))
                + (Simd32x4::from([other[e2], other[e2], other[e2], other.group0()[3]]) * self.group1())),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group0()[3] * self.group2()[0])),
                (-(other.group0()[1] * self.group0()[3]) - (other.group0()[3] * self.group2()[1])),
                (-(other.group0()[2] * self.group0()[3]) - (other.group0()[3] * self.group2()[2])),
                ((other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2])),
            ]) + (Simd32x4::from(other[e2]) * self.group0())
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other[e2]]) * swizzle!(self.group1(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<Scalar> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        8        0
    // no simd        0       32        0
    fn geometric_anti_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(other[scalar]) * self.group0() * Simd32x4::from(-1.0)),
            // e415, e425, e435, e321
            (Simd32x4::from(other[scalar]) * self.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e235, e315, e125, e5
            (Simd32x4::from(other[scalar]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]) * Simd32x4::from(-1.0)),
            // e1, e2, e3, e4
            (Simd32x4::from(other[scalar]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[3]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
    }
}
impl GeometricAntiProduct<Sphere> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       20        0
    //    simd4       13       16        0
    // Totals...
    // yes simd       25       36        0
    //  no simd       64       84        0
    fn geometric_anti_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from([other[e4315], other[e4315], other[e4315], other.group0()[2]]) * swizzle!(self.group3(), 0, 1, 2, 2) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                - (Simd32x4::from(other[e4315]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                + (Simd32x4::from([self.group0()[1], self.group2()[3], self.group2()[3], self.group3()[1]]) * swizzle!(other.group0(), 2, 1, 2, 1))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group2()[3], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group0(), 0, 0, 1, 0))),
            // e415, e425, e435, e321
            (-(Simd32x4::from(other[e4315]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group1()[3], self.group3()[2], self.group3()[0], self.group1()[0]]) * swizzle!(other.group0(), 0, 0, 1, 0))
                - (Simd32x4::from([self.group3()[1], self.group1()[3], self.group1()[3], self.group1()[1]]) * swizzle!(other.group0(), 2, 1, 2, 1))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(other.group0()[2] * self.group2()[1]) - (other.group0()[3] * self.group1()[0])),
                (-(other.group0()[1] * self.group3()[3]) - (other.group0()[3] * self.group1()[1])),
                (-(other.group0()[2] * self.group3()[3]) - (other.group0()[3] * self.group1()[2])),
                ((other.group0()[2] * self.group2()[2]) + (other.group0()[3] * self.group1()[3])),
            ]) + (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group3()[3], self.group2()[2], self.group2()[0], self.group0()[3]]) * swizzle!(other.group0(), 0, 0, 1, 3))
                + (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group2(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[2] * self.group1()[1]) + (other.group0()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[3]) + (other.group0()[3] * self.group0()[1])),
                ((other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group0()[3]) + (other.group0()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]) - (self.group1()[3] * other[e4315])),
            ]) - (Simd32x4::from(other[e4315]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[3]]))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<TripleNum> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0       16        0
    //    simd4        8       10        0
    // Totals...
    // yes simd        8       26        0
    //  no simd       32       56        0
    fn geometric_anti_product(self, other: TripleNum) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (other.group0()[0] * self.group3()[0]),
                (other.group0()[0] * self.group3()[1]),
                (other.group0()[0] * self.group3()[2]),
                (other.group0()[1] * self.group2()[3]),
            ]) + (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                + (Simd32x4::from(other.group0()[2]) * self.group0())),
            // e23, e31, e12, e45
            ((Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                (other.group0()[0] * self.group3()[3]),
            ]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(other.group0()[2]) * self.group1())
                + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]]) * self.group2())),
            // e15, e25, e35, e1234
            ((Simd32x4::from([
                (other.group0()[1] * self.group3()[0]),
                (other.group0()[1] * self.group3()[1]),
                (other.group0()[1] * self.group3()[2]),
                (other.group0()[0] * self.group0()[3]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from(other.group0()[2]) * self.group2())
                + (Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group0()[0]]) * self.group1())),
            // e4235, e4315, e4125, e3215
            (-Simd32x4::from([
                (other.group0()[0] * self.group2()[0]),
                (other.group0()[0] * self.group2()[1]),
                (other.group0()[0] * self.group2()[2]),
                (other.group0()[1] * self.group1()[3]),
            ]) + (Simd32x4::from(other.group0()[1]) * self.group0())
                + (Simd32x4::from(other.group0()[2]) * self.group3())),
        );
    }
}
impl GeometricAntiProduct<VersorEven> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       60       76        0
    //    simd4       45       45        0
    // Totals...
    // yes simd      105      121        0
    //  no simd      240      256        0
    fn geometric_anti_product(self, other: VersorEven) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((other.group0()[0] * self.group1()[3])
                    + (other.group0()[2] * self.group1()[1])
                    + (other.group0()[3] * self.group0()[0])
                    + (other.group1()[2] * self.group0()[1])
                    + (other.group1()[3] * self.group0()[0])
                    + (other.group3()[3] * self.group3()[0])),
                ((other.group0()[1] * self.group0()[3])
                    + (other.group0()[1] * self.group1()[3])
                    + (other.group0()[3] * self.group0()[1])
                    + (other.group1()[0] * self.group0()[2])
                    + (other.group1()[3] * self.group0()[1])
                    + (other.group3()[3] * self.group3()[1])),
                ((other.group0()[2] * self.group0()[3])
                    + (other.group0()[2] * self.group1()[3])
                    + (other.group0()[3] * self.group0()[2])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[3] * self.group0()[2])
                    + (other.group3()[3] * self.group3()[2])),
                (-(other.group0()[2] * self.group2()[2])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group3()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group2()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group0()[1], self.group2()[3], self.group2()[3], self.group3()[2]]) * swizzle!(other.group3(), 2, 1, 2, 2))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[3], self.group1()[2], self.group1()[0], self.group0()[3]]) * swizzle!(other.group0(), 0, 0, 1, 3))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group2()[3], self.group0()[2], self.group0()[0], self.group3()[1]]) * swizzle!(other.group3(), 0, 0, 1, 1))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2])
                    + (other.group1()[0] * self.group0()[3])
                    + (other.group2()[2] * self.group0()[1])
                    + (other.group2()[3] * self.group0()[0])
                    - (other.group3()[2] * self.group3()[1])),
                (-(other.group0()[2] * self.group2()[0])
                    + (other.group1()[1] * self.group0()[3])
                    + (other.group2()[1] * self.group2()[3])
                    + (other.group2()[3] * self.group0()[1])
                    - (other.group3()[1] * self.group1()[3])),
                (-(other.group0()[0] * self.group2()[1])
                    + (other.group1()[2] * self.group0()[3])
                    + (other.group2()[2] * self.group2()[3])
                    + (other.group2()[3] * self.group0()[2])
                    - (other.group3()[2] * self.group1()[3])),
                (-(other.group1()[2] * self.group3()[2])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    + (other.group3()[2] * self.group1()[2])),
            ]) + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[3]]) * swizzle!(self.group1(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[2]]) * swizzle!(other.group0(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[3], self.group3()[2], self.group3()[0], self.group3()[3]]) * swizzle!(other.group3(), 0, 0, 1, 3))
                + (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[1]]) * swizzle!(other.group3(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group2()[1], self.group3()[3], self.group3()[3], self.group2()[1]]) * swizzle!(other.group0(), 2, 1, 2, 1))
                + (Simd32x4::from([self.group2()[3], self.group0()[2], self.group0()[0], self.group2()[3]]) * swizzle!(other.group2(), 0, 0, 1, 3))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group3()[3], self.group2()[2], self.group2()[0], self.group2()[0]]) * swizzle!(other.group0(), 0, 0, 1, 0))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * swizzle!(self.group3(), 0, 1, 2, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((other.group1()[2] * self.group2()[1]) + (other.group2()[1] * self.group3()[2]) + (other.group2()[3] * self.group1()[0]) + (other.group3()[1] * self.group2()[2])),
                ((other.group1()[1] * self.group3()[3]) + (other.group2()[2] * self.group3()[0]) + (other.group2()[3] * self.group1()[1]) + (other.group3()[2] * self.group2()[0])),
                ((other.group1()[2] * self.group3()[3]) + (other.group2()[0] * self.group3()[1]) + (other.group2()[3] * self.group1()[2]) + (other.group3()[0] * self.group2()[1])),
                (-(other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group3()[2])
                    - (other.group1()[2] * self.group0()[2])
                    - (other.group3()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(other.group0()[3]) * self.group2())
                + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                - (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[0], other.group0()[0]]) * swizzle!(self.group1(), 3, 3, 1, 0))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[2], other.group0()[1]]) * swizzle!(self.group1(), 2, 0, 3, 1))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group3()[3]]) * swizzle!(self.group1(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[1]]) * swizzle!(self.group3(), 0, 1, 2, 1))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                - (Simd32x4::from([self.group2()[1], self.group3()[3], self.group3()[3], self.group0()[1]]) * swizzle!(other.group3(), 2, 1, 2, 1))
                - (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group3()[3], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group3(), 0, 0, 1, 0))
                + (Simd32x4::from([self.group3()[3], self.group2()[2], self.group2()[0], self.group2()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group1()[0] * self.group1()[3]) + (other.group2()[3] * self.group0()[0]) - (other.group3()[0] * self.group0()[3]) - (other.group3()[3] * self.group2()[0])),
                ((other.group1()[1] * self.group1()[3]) + (other.group2()[3] * self.group0()[1]) - (other.group3()[1] * self.group0()[3]) - (other.group3()[3] * self.group2()[1])),
                ((other.group1()[2] * self.group1()[3]) + (other.group2()[3] * self.group0()[2]) - (other.group3()[2] * self.group0()[3]) - (other.group3()[3] * self.group2()[2])),
                (-(other.group2()[2] * self.group1()[2]) - (other.group2()[3] * self.group1()[3])
                    + (other.group3()[1] * self.group2()[1])
                    + (other.group3()[2] * self.group2()[2])),
            ]) - (Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group2(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other.group2()[0]]) * swizzle!(self.group3(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[1]]) * swizzle!(self.group3(), 1, 2, 0, 1))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group2()[1]]) * swizzle!(self.group1(), 1, 2, 0, 1))
                + (Simd32x4::from([self.group0()[1], self.group2()[3], self.group2()[3], self.group0()[3]]) * swizzle!(other.group2(), 2, 1, 2, 3))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[2]]) * swizzle!(other.group1(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group3()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group2()[3], self.group0()[2], self.group0()[0], self.group3()[2]]) * swizzle!(other.group2(), 0, 0, 1, 2))
                - (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[1]]) * swizzle!(other.group1(), 1, 2, 0, 1))),
        );
    }
}
impl GeometricAntiProduct<VersorOdd> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       48       64        0
    //    simd4       48       48        0
    // Totals...
    // yes simd       96      112        0
    //  no simd      240      256        0
    fn geometric_anti_product(self, other: VersorOdd) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (-(other.group0()[2] * self.group1()[1])
                    - (other.group0()[3] * self.group0()[0])
                    - (other.group1()[2] * self.group0()[1])
                    - (other.group2()[3] * self.group1()[0])
                    - (other.group2()[3] * self.group3()[0])
                    - (other.group3()[1] * self.group0()[2])),
                (-(other.group0()[1] * self.group0()[3])
                    - (other.group0()[3] * self.group0()[1])
                    - (other.group1()[0] * self.group0()[2])
                    - (other.group2()[3] * self.group1()[1])
                    - (other.group2()[3] * self.group3()[1])
                    - (other.group3()[2] * self.group0()[0])),
                (-(other.group0()[2] * self.group0()[3])
                    - (other.group0()[3] * self.group0()[2])
                    - (other.group1()[1] * self.group0()[0])
                    - (other.group2()[3] * self.group1()[2])
                    - (other.group2()[3] * self.group3()[2])
                    - (other.group3()[0] * self.group0()[1])),
                ((other.group0()[2] * self.group2()[2])
                    + (other.group1()[2] * self.group1()[2])
                    + (other.group2()[0] * self.group0()[0])
                    + (other.group2()[1] * self.group0()[1])
                    + (other.group2()[2] * self.group0()[2])
                    + (other.group3()[2] * self.group3()[2])),
            ]) - (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group3(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group1(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group0()[1], self.group2()[3], self.group2()[3], self.group3()[1]]) * swizzle!(other.group3(), 2, 1, 2, 1))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (Simd32x4::from([self.group0()[3], self.group1()[2], self.group1()[0], self.group0()[3]]) * swizzle!(other.group0(), 0, 0, 1, 3))
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group2()[3], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group3(), 0, 0, 1, 0))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(other.group0()[2] * self.group2()[1]) - (other.group3()[3] * self.group0()[0])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group3()[3] * self.group0()[1])),
                (-(other.group0()[1] * self.group2()[0]) - (other.group3()[3] * self.group0()[2])),
                ((other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * swizzle!(self.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other.group3()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[3]]) * swizzle!(self.group1(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group2()[3]]) * self.group3())
                + (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([self.group0()[1], self.group2()[3], self.group2()[3], self.group0()[1]]) * swizzle!(other.group2(), 2, 1, 2, 1))
                - (Simd32x4::from([self.group0()[3], self.group1()[2], self.group1()[0], self.group3()[1]]) * swizzle!(other.group1(), 0, 0, 1, 1))
                - (Simd32x4::from([self.group1()[1], self.group0()[3], self.group0()[3], self.group3()[2]]) * swizzle!(other.group1(), 2, 1, 2, 2))
                - (Simd32x4::from([self.group1()[3], self.group3()[2], self.group3()[0], self.group1()[1]]) * swizzle!(other.group3(), 0, 0, 1, 1))
                - (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[2]]) * swizzle!(other.group2(), 3, 3, 3, 2))
                - (Simd32x4::from([self.group2()[3], self.group0()[2], self.group0()[0], self.group0()[0]]) * swizzle!(other.group2(), 0, 0, 1, 0))
                - (Simd32x4::from([self.group3()[1], self.group1()[3], self.group1()[3], self.group1()[2]]) * swizzle!(other.group3(), 2, 1, 2, 2))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]) * swizzle!(other.group3(), 1, 2, 0, 3))
                + (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group2(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(other.group1()[2] * self.group2()[1])
                    - (other.group1()[3] * self.group2()[0])
                    - (other.group3()[2] * self.group2()[1])
                    - (other.group3()[3] * self.group1()[0])),
                (-(other.group1()[3] * self.group2()[1])
                    - (other.group2()[2] * self.group3()[0])
                    - (other.group3()[1] * self.group3()[3])
                    - (other.group3()[3] * self.group1()[1])),
                (-(other.group1()[3] * self.group2()[2])
                    - (other.group2()[2] * self.group0()[3])
                    - (other.group3()[2] * self.group3()[3])
                    - (other.group3()[3] * self.group1()[2])),
                ((other.group1()[2] * self.group2()[2]) + (other.group3()[1] * self.group2()[1]) + (other.group3()[2] * self.group2()[2]) + (other.group3()[3] * self.group1()[3])),
            ]) - (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))
                - (Simd32x4::from(other.group2()[0]) * Simd32x4::from([self.group0()[3], self.group1()[2], self.group3()[1], self.group3()[0]]))
                + (Simd32x4::from(other.group2()[0]) * Simd32x4::from([self.group1()[3], self.group3()[2], self.group1()[1], self.group1()[0]]))
                + (Simd32x4::from(other.group2()[1]) * Simd32x4::from([self.group1()[2], self.group1()[3], self.group3()[0], self.group1()[1]]))
                + (Simd32x4::from(other.group2()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group1()[3], self.group1()[2]]))
                - (Simd32x4::from([other.group2()[1], other.group1()[1], other.group1()[2], other.group2()[1]]) * swizzle!(self.group3(), 2, 3, 3, 1))
                + (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[1]]) * swizzle!(self.group2(), 2, 0, 1, 1))
                - (Simd32x4::from([self.group1()[1], self.group0()[3], self.group1()[0], self.group3()[2]]) * swizzle!(other.group2(), 2, 1, 1, 2))
                + (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[0]]) * swizzle!(other.group3(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group3()[3], self.group2()[2], self.group2()[0], self.group0()[3]]) * swizzle!(other.group3(), 0, 0, 1, 3))
                - (Simd32x4::from([self.group3()[3], self.group2()[2], self.group2()[0], self.group3()[3]]) * swizzle!(other.group1(), 0, 0, 1, 3))
                + (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group2(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[2] * self.group2()[1]) - (other.group1()[1] * self.group3()[2])
                    + (other.group3()[0] * self.group0()[3])
                    + (other.group3()[3] * self.group0()[0])),
                (-(other.group0()[1] * self.group3()[3]) - (other.group1()[2] * self.group3()[0])
                    + (other.group3()[1] * self.group0()[3])
                    + (other.group3()[3] * self.group0()[1])),
                (-(other.group0()[2] * self.group3()[3]) - (other.group1()[0] * self.group3()[1])
                    + (other.group3()[2] * self.group0()[3])
                    + (other.group3()[3] * self.group0()[2])),
                ((other.group0()[1] * self.group3()[1]) + (other.group0()[2] * self.group3()[2]) - (other.group3()[1] * self.group0()[1]) - (other.group3()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))
                + (Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[1]]) * swizzle!(self.group1(), 0, 1, 2, 1))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[2]]) * swizzle!(self.group0(), 1, 2, 0, 2))
                + (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group0()[2]]) * swizzle!(self.group1(), 1, 2, 0, 2))
                - (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[0]]) * swizzle!(other.group3(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group1()[3], self.group3()[2], self.group3()[0], self.group0()[0]]) * swizzle!(other.group1(), 0, 0, 1, 0))
                + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group3()[1], self.group1()[3], self.group1()[3], self.group0()[1]]) * swizzle!(other.group1(), 2, 1, 2, 1))
                - (Simd32x4::from([self.group3()[3], self.group2()[2], self.group2()[0], self.group2()[3]]) * swizzle!(other.group0(), 0, 0, 1, 3))
                + (swizzle!(other.group0(), 3, 3, 3, 0) * swizzle!(self.group3(), 0, 1, 2, 0))
                - (swizzle!(other.group2(), 1, 2, 0, 3) * swizzle!(self.group0(), 2, 0, 1, 3))),
        );
    }
}
impl GeometricAntiProduct<VersorRoundPoint> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       12        0
    //    simd4       19       23        0
    // Totals...
    // yes simd       23       35        0
    //  no simd       80      104        0
    fn geometric_anti_product(self, other: VersorRoundPoint) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[3]])
                * swizzle!(other.group0(), 1, 2, 0, 3)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from(other.group1()[1]) * self.group0())
                + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                + (swizzle!(self.group3(), 0, 1, 2, 2) * swizzle!(other.group0(), 3, 3, 3, 2))),
            // e23, e31, e12, e45
            ((Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[2]])
                * swizzle!(other.group0(), 2, 0, 1, 2)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from(other.group1()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))
                + (Simd32x4::from(other.group1()[1]) * self.group1())
                - (Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group3()[3]]) * other.group0())
                + (Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[1]]) * swizzle!(other.group0(), 1, 2, 0, 1))),
            // e15, e25, e35, e1234
            (-Simd32x4::from([
                (other.group1()[0] * self.group3()[0]),
                (other.group1()[0] * self.group3()[1]),
                (other.group1()[0] * self.group3()[2]),
                (self.group0()[2] * other.group0()[2]),
            ]) + (Simd32x4::from(other.group1()[1]) * self.group2())
                + (Simd32x4::from([other.group1()[0], other.group1()[0], other.group1()[0], other.group0()[3]]) * self.group1())
                - (Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group0()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group0()[3] * other.group0()[0]) - (self.group2()[0] * other.group0()[3])),
                (-(self.group0()[3] * other.group0()[1]) - (self.group2()[1] * other.group0()[3])),
                (-(self.group0()[3] * other.group0()[2]) - (self.group2()[2] * other.group0()[3])),
                ((self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2])),
            ]) + (Simd32x4::from(other.group1()[0]) * self.group0())
                + (Simd32x4::from(other.group1()[1]) * self.group3())
                + (Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group1(), 1, 2, 0, 3))),
        );
    }
}
impl GeometricAntiProduct<VersorSphere> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       28        0
    //    simd4       16       19        0
    // Totals...
    // yes simd       32       47        0
    //  no simd       80      104        0
    fn geometric_anti_product(self, other: VersorSphere) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from([other.group1()[0], other.group1()[0], other.group1()[0], other.group0()[2]])
                * swizzle!(self.group3(), 0, 1, 2, 2)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                - (Simd32x4::from(other.group1()[0]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[3]]))
                - (Simd32x4::from(other.group1()[1]) * self.group0())
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]) * swizzle!(other.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[1]]) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e415, e425, e435, e321
            ((Simd32x4::from([
                (self.group3()[1] * other.group0()[2]),
                (self.group3()[2] * other.group0()[0]),
                (self.group3()[0] * other.group0()[1]),
                (other.group1()[1] * self.group1()[3]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                - (Simd32x4::from(other.group1()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))
                - (Simd32x4::from([other.group1()[1], other.group1()[1], other.group1()[1], other.group0()[0]]) * swizzle!(self.group1(), 0, 1, 2, 0))
                - (Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]) * swizzle!(other.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group0(), 0, 1, 2, 2))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (-(self.group2()[1] * other.group0()[2]) - (self.group3()[3] * other.group0()[0])),
                (-(self.group2()[2] * other.group0()[0]) - (self.group3()[3] * other.group0()[1])),
                (-(self.group2()[0] * other.group0()[1]) - (self.group3()[3] * other.group0()[2])),
                ((self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2])),
            ]) - (Simd32x4::from(other.group1()[1]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]))
                - (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]))
                + (Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[0]]) * swizzle!(other.group0(), 3, 3, 3, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((other.group1()[1] * self.group3()[0]) + (self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0]) + (self.group1()[1] * other.group0()[2])),
                ((other.group1()[1] * self.group3()[1]) + (self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1]) + (self.group1()[2] * other.group0()[0])),
                ((other.group1()[1] * self.group3()[2]) + (self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2]) + (self.group1()[0] * other.group0()[1])),
                (-(other.group1()[1] * self.group2()[3])
                    - (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])),
            ]) - (Simd32x4::from(other.group1()[0]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[3]]))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group1(), 2, 0, 1, 3))),
        );
    }
}
impl InfixGeometricAntiProduct for VersorRoundPoint {}
impl GeometricAntiProduct<AntiCircleRotor> for VersorRoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       30        0
    //    simd4        9        9        0
    // Totals...
    // yes simd       23       39        0
    //  no simd       50       66        0
    fn geometric_anti_product(self, other: AntiCircleRotor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group1()[1] * other.group0()[0]) + (other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) + (other.group1()[0] * self.group0()[3])),
                ((self.group1()[1] * other.group0()[1]) - (other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3])),
                ((self.group1()[1] * other.group0()[2]) + (other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) + (other.group1()[2] * self.group0()[3])),
                (self.group1()[1] * other.group2()[3]),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group1()[0] * other.group0()[0]) - (other.group1()[3] * self.group0()[0])),
                ((self.group1()[0] * other.group0()[1]) - (other.group1()[3] * self.group0()[1])),
                ((self.group1()[0] * other.group0()[2]) - (other.group1()[3] * self.group0()[2])),
                ((other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self.group1()[1]) * other.group1())
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (self.group1()[0] * other.group1()[0]),
                (self.group1()[0] * other.group1()[1]),
                (self.group1()[0] * other.group1()[2]),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([self.group1()[1], self.group1()[1], self.group1()[1], self.group0()[3]]) * other.group2())
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (-Simd32x4::from([
                (self.group1()[0] * other.group0()[0]),
                (self.group1()[0] * other.group0()[1]),
                (self.group1()[0] * other.group0()[2]),
                (other.group2()[2] * self.group0()[2]),
            ]) - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group1()[0]]) * other.group2())
                - (swizzle!(other.group2(), 3, 3, 3, 1) * swizzle!(self.group0(), 0, 1, 2, 1))),
        );
    }
}
impl GeometricAntiProduct<AntiDipoleInversion> for VersorRoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       30       46        0
    //    simd4       11       11        0
    // Totals...
    // yes simd       41       57        0
    //  no simd       74       90        0
    fn geometric_anti_product(self, other: AntiDipoleInversion) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                ((self.group1()[1] * other.group0()[0]) + (other.group1()[0] * self.group0()[3]) + (other.group3()[0] * self.group0()[3])),
                ((self.group1()[1] * other.group0()[1]) + (other.group1()[1] * self.group0()[3]) + (other.group3()[1] * self.group0()[3])),
                ((self.group1()[1] * other.group0()[2]) + (other.group1()[2] * self.group0()[3]) + (other.group3()[2] * self.group0()[3])),
                ((self.group1()[0] * other.group2()[3]) - (other.group3()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group3()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group3()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group1()[3] * self.group0()[0]) + (other.group2()[0] * self.group0()[3]) + (other.group3()[2] * self.group0()[1])),
                ((other.group1()[3] * self.group0()[1]) + (other.group2()[1] * self.group0()[3]) + (other.group3()[0] * self.group0()[2])),
                ((other.group1()[3] * self.group0()[2]) + (other.group2()[2] * self.group0()[3]) + (other.group3()[1] * self.group0()[0])),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2]) - (other.group3()[3] * self.group0()[3])),
            ]) + (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                + (Simd32x4::from(self.group1()[1]) * other.group1())
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group1()[0] * other.group1()[0]) + (other.group2()[2] * self.group0()[1]) + (other.group3()[3] * self.group0()[0])),
                ((self.group1()[0] * other.group1()[1]) + (other.group2()[0] * self.group0()[2]) + (other.group3()[3] * self.group0()[1])),
                ((self.group1()[0] * other.group1()[2]) + (other.group2()[1] * self.group0()[0]) + (other.group3()[3] * self.group0()[2])),
                (-(other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))
                + (Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                - (swizzle!(other.group2(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group1()[0] * other.group0()[0]) - (other.group1()[1] * self.group0()[2]) - (other.group2()[0] * self.group0()[3])),
                ((self.group1()[0] * other.group0()[1]) - (other.group1()[2] * self.group0()[0]) - (other.group2()[1] * self.group0()[3])),
                ((self.group1()[0] * other.group0()[2]) - (other.group1()[0] * self.group0()[1]) - (other.group2()[2] * self.group0()[3])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) + (other.group1()[3] * self.group0()[3])),
            ]) + (Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[3]]))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum321> for VersorRoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2       11        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        2       13        0
    //  no simd        2       19        0
    fn geometric_anti_product(self, other: AntiDualNum321) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[1] * self.group1()[1])]),
            // e23, e31, e12, e45
            (Simd32x4::from(other.group0()[0])
                * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]])
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e15, e25, e35, e1234
            Simd32x4::from([0.0, 0.0, 0.0, (-(other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group0()[3]))]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0] * -1.0),
                (other.group0()[1] * self.group0()[1] * -1.0),
                (other.group0()[1] * self.group0()[2] * -1.0),
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[0])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum4> for VersorRoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2       12        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        2       14        0
    //  no simd        2       20        0
    fn geometric_anti_product(self, other: AntiDualNum4) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[1])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group1()[0] * -1.0)]),
            // e15, e25, e35, e1234
            Simd32x4::from([0.0, 0.0, 0.0, ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group0()[3]))]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other.group0()[1])
                * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]])
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum5> for VersorRoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2       11        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        2       12        0
    //  no simd        2       15        0
    fn geometric_anti_product(self, other: AntiDualNum5) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, ((other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group1()[1]))]),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group0()[3])]),
            // e15, e25, e35, e1234
            (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]]) * self.group0()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0] * -1.0),
                (other.group0()[1] * self.group0()[1] * -1.0),
                (other.group0()[1] * self.group0()[2] * -1.0),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiFlatPoint> for VersorRoundPoint {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       12       27        0
    fn geometric_anti_product(self, other: AntiFlatPoint) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[3]) + (other.group0()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group0()[3]) + (other.group0()[3] * self.group0()[2])),
                (self.group1()[1] * other.group0()[3]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                ((self.group1()[1] * other.group0()[0]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((self.group1()[1] * other.group0()[1]) + (other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                ((self.group1()[1] * other.group0()[2]) - (other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
                (other.group0()[3] * self.group0()[3]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3] * -1.0),
                (other.group0()[1] * self.group0()[3] * -1.0),
                (other.group0()[2] * self.group0()[3] * -1.0),
                (-(self.group1()[0] * other.group0()[3])
                    - (other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiFlector> for VersorRoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       28        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       18       33        0
    //  no simd       33       48        0
    fn geometric_anti_product(self, other: AntiFlector) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group1()[0] * self.group0()[3]),
                (other.group1()[1] * self.group0()[3]),
                (other.group1()[2] * self.group0()[3]),
                (-(other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])
                    + (other.group1()[3] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group0()[3] * self.group0()[0]) + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[3] * self.group0()[1]) + (other.group1()[0] * self.group0()[2])),
                ((other.group0()[3] * self.group0()[2]) + (other.group1()[1] * self.group0()[0])),
                0.0,
            ]) + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group1()[1]]) * other.group0())
                - (swizzle!(other.group1(), 1, 2, 0, 3) * swizzle!(self.group0(), 2, 0, 1, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[2]) + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[1] * self.group0()[0]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                + (Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group1()[1] * other.group1()[0]) - (other.group0()[0] * self.group0()[3])),
                ((self.group1()[1] * other.group1()[1]) - (other.group0()[1] * self.group0()[3])),
                ((self.group1()[1] * other.group1()[2]) - (other.group0()[2] * self.group0()[3])),
                (other.group0()[3] * self.group0()[3]),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiLine> for VersorRoundPoint {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       25        0
    //    simd3        0        1        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       16       28        0
    //  no simd       22       36        0
    fn geometric_anti_product(self, other: AntiLine) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group0()[3]) * other.group0()),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (self.group1()[1] * other.group0()[0]),
                (self.group1()[1] * other.group0()[1]),
                (self.group1()[1] * other.group0()[2]),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group1()[0]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1])),
                ((self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group1()[1]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])),
                ((self.group1()[0] * other.group0()[2]) + (self.group1()[1] * other.group1()[2]) - (other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) + (other.group1()[0] * self.group0()[3])),
                ((other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[1]) + (other.group1()[2] * self.group0()[3])),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<AntiMotor> for VersorRoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       25        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       20       31        0
    //  no simd       38       49        0
    fn geometric_anti_product(self, other: AntiMotor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3]),
                (other.group0()[1] * self.group0()[3]),
                (other.group0()[2] * self.group0()[3]),
                ((self.group1()[1] * other.group0()[3]) + (other.group1()[3] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([0.0, 0.0, 0.0, ((other.group0()[2] * self.group0()[2]) + (other.group1()[3] * self.group0()[3]))])
                + (Simd32x4::from([self.group1()[1], self.group1()[1], self.group1()[1], self.group0()[0]]) * swizzle!(other.group0(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group1()[0]) - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])
                    + (other.group1()[3] * self.group0()[0])),
                ((self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group1()[1]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])
                    + (other.group1()[3] * self.group0()[1])),
                ((self.group1()[0] * other.group0()[2]) + (self.group1()[1] * other.group1()[2]) - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[3] * self.group0()[2])),
                (other.group0()[3] * self.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([0.0, 0.0, 0.0, ((other.group1()[2] * self.group0()[2]) * -1.0)])
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other.group1()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group1()[1]]) * other.group1())),
        );
    }
}
impl GeometricAntiProduct<AntiPlane> for VersorRoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        9       25        0
    fn geometric_anti_product(self, other: AntiPlane) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3]),
                (other.group0()[1] * self.group0()[3]),
                (other.group0()[2] * self.group0()[3]),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])
                    + (other.group0()[3] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
                (other.group0()[3] * self.group0()[3] * -1.0),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group1()[0] * other.group0()[0]) + (other.group0()[3] * self.group0()[0])),
                (-(self.group1()[0] * other.group0()[1]) + (other.group0()[3] * self.group0()[1])),
                (-(self.group1()[0] * other.group0()[2]) + (other.group0()[3] * self.group0()[2])),
                (self.group1()[1] * other.group0()[3]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group1()[1] * other.group0()[0]),
                (self.group1()[1] * other.group0()[1]),
                (self.group1()[1] * other.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiQuadNum> for VersorRoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       33        0
    fn geometric_anti_product(self, other: AntiQuadNum) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[3]) + (other.group0()[1] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other.group0()[2] * self.group0()[0] * -1.0),
                (other.group0()[2] * self.group0()[1] * -1.0),
                (other.group0()[2] * self.group0()[2] * -1.0),
                (-(self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[2]) + (other.group0()[1] * self.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                ((self.group1()[1] * other.group0()[0]) - (other.group0()[2] * self.group0()[3]) + (other.group0()[3] * self.group0()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[3] * self.group0()[0] * -1.0),
                (other.group0()[3] * self.group0()[1] * -1.0),
                (other.group0()[3] * self.group0()[2] * -1.0),
                ((self.group1()[0] * other.group0()[2]) + (self.group1()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiScalar> for VersorRoundPoint {
    type Output = VersorRoundPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd2        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        6        0
    fn geometric_anti_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return VersorRoundPoint::from_groups(
            // e1, e2, e3, e4
            (Simd32x4::from(other[e12345]) * self.group0()),
            // e5, e12345
            (Simd32x2::from(other[e12345]) * self.group1()),
        );
    }
}
impl GeometricAntiProduct<AntiTripleNum> for VersorRoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       24        0
    fn geometric_anti_product(self, other: AntiTripleNum) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[2]) + (other.group0()[1] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (-(self.group1()[0] * other.group0()[0]) + (other.group0()[1] * self.group0()[3]))]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                ((self.group1()[1] * other.group0()[0]) + (other.group0()[2] * self.group0()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[2] * self.group0()[0] * -1.0),
                (other.group0()[2] * self.group0()[1] * -1.0),
                (other.group0()[2] * self.group0()[2] * -1.0),
                ((self.group1()[0] * other.group0()[2]) + (self.group1()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Circle> for VersorRoundPoint {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       28        0
    //    simd3        3        4        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       24       37        0
    //  no simd       45       60        0
    fn geometric_anti_product(self, other: Circle) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            ((Simd32x3::from(self.group1()[1]) * other.group0()) + (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group1()[0] * other.group0()[0]) + (other.group2()[0] * self.group0()[3]) + (other.group1()[3] * self.group0()[0])),
                ((self.group1()[0] * other.group0()[1]) + (other.group2()[1] * self.group0()[3]) + (other.group1()[3] * self.group0()[1])),
                ((self.group1()[0] * other.group0()[2]) + (other.group2()[2] * self.group0()[3]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self.group1()[1]) * other.group1())),
            // e235, e315, e125, e4
            (Simd32x4::from([
                ((self.group1()[1] * other.group2()[0]) - (other.group2()[1] * self.group0()[2])),
                ((self.group1()[1] * other.group2()[1]) - (other.group2()[2] * self.group0()[0])),
                ((self.group1()[1] * other.group2()[2]) - (other.group2()[0] * self.group0()[1])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([self.group1()[0], self.group1()[0], self.group1()[0], self.group0()[3]]) * other.group1())
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                ((self.group1()[0] * other.group0()[0]) + (other.group1()[2] * self.group0()[1])),
                ((self.group1()[0] * other.group0()[1]) + (other.group1()[0] * self.group0()[2])),
                ((self.group1()[0] * other.group0()[2]) + (other.group1()[1] * self.group0()[0])),
                (-(other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group2()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 3))),
        );
    }
}
impl GeometricAntiProduct<CircleRotor> for VersorRoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       30       46        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       35       51        0
    //  no simd       50       66        0
    fn geometric_anti_product(self, other: CircleRotor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group1()[1] * other.group0()[0]) + (other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) + (other.group1()[0] * self.group0()[3])),
                ((self.group1()[1] * other.group0()[1]) - (other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3])),
                ((self.group1()[1] * other.group0()[2]) + (other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) + (other.group1()[2] * self.group0()[3])),
                (self.group1()[1] * other.group2()[3]),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group1()[0] * other.group0()[0]) + (other.group1()[3] * self.group0()[0]) + (other.group2()[0] * self.group0()[3])),
                ((self.group1()[0] * other.group0()[1]) + (other.group1()[3] * self.group0()[1]) + (other.group2()[1] * self.group0()[3])),
                ((self.group1()[0] * other.group0()[2]) + (other.group1()[3] * self.group0()[2]) + (other.group2()[2] * self.group0()[3])),
                (-(other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self.group1()[1]) * other.group1())),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((self.group1()[1] * other.group2()[0]) + (other.group2()[2] * self.group0()[1])),
                ((self.group1()[1] * other.group2()[1]) + (other.group2()[0] * self.group0()[2])),
                ((self.group1()[1] * other.group2()[2]) + (other.group2()[1] * self.group0()[0])),
                (-(self.group1()[0] * other.group1()[3]) - (other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                - (swizzle!(other.group2(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group1()[0] * other.group0()[0]) - (other.group1()[1] * self.group0()[2]) - (other.group2()[0] * self.group0()[3])),
                ((self.group1()[0] * other.group0()[1]) - (other.group1()[2] * self.group0()[0]) - (other.group2()[1] * self.group0()[3])),
                ((self.group1()[0] * other.group0()[2]) - (other.group1()[0] * self.group0()[1]) - (other.group2()[2] * self.group0()[3])),
                ((other.group0()[2] * self.group0()[2]) + (other.group1()[3] * self.group0()[3]) + (other.group2()[3] * self.group0()[3])),
            ]) + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))),
        );
    }
}
impl GeometricAntiProduct<Dipole> for VersorRoundPoint {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       24        0
    //    simd3        3        4        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       21       34        0
    //  no simd       45       60        0
    fn geometric_anti_product(self, other: Dipole) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from(self.group1()[1]) * other.group0()) + (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group1()[0] * other.group0()[0]) - (other.group1()[3] * self.group0()[0])),
                ((self.group1()[0] * other.group0()[1]) - (other.group1()[3] * self.group0()[1])),
                ((self.group1()[0] * other.group0()[2]) - (other.group1()[3] * self.group0()[2])),
                ((other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self.group1()[1]) * other.group1())
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group1()[0] * other.group1()[0]) + (self.group1()[1] * other.group2()[0])),
                ((self.group1()[0] * other.group1()[1]) + (self.group1()[1] * other.group2()[1])),
                ((self.group1()[0] * other.group1()[2]) + (self.group1()[1] * other.group2()[2])),
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group1()[0] * other.group0()[0]) + (other.group2()[0] * self.group0()[3])),
                (-(self.group1()[0] * other.group0()[1]) + (other.group2()[1] * self.group0()[3])),
                (-(self.group1()[0] * other.group0()[2]) + (other.group2()[2] * self.group0()[3])),
                (-(other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 3))),
        );
    }
}
impl GeometricAntiProduct<DipoleInversion> for VersorRoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       26       42        0
    //    simd4       12       12        0
    // Totals...
    // yes simd       38       54        0
    //  no simd       74       90        0
    fn geometric_anti_product(self, other: DipoleInversion) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group1()[1] * other.group0()[0]) - (other.group0()[2] * self.group0()[1]) - (other.group2()[3] * self.group0()[0]) - (other.group3()[0] * self.group0()[3])),
                ((self.group1()[1] * other.group0()[1]) - (other.group0()[0] * self.group0()[2]) - (other.group2()[3] * self.group0()[1]) - (other.group3()[1] * self.group0()[3])),
                ((self.group1()[1] * other.group0()[2]) - (other.group0()[1] * self.group0()[0]) - (other.group2()[3] * self.group0()[2]) - (other.group3()[2] * self.group0()[3])),
                ((self.group1()[0] * other.group2()[3]) + (other.group3()[2] * self.group0()[2]) + (other.group3()[3] * self.group0()[3])),
            ]) + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group1()[0] * other.group0()[0]) - (other.group1()[3] * self.group0()[0]) - (other.group3()[2] * self.group0()[1])),
                ((self.group1()[0] * other.group0()[1]) - (other.group1()[3] * self.group0()[1]) - (other.group3()[0] * self.group0()[2])),
                ((self.group1()[0] * other.group0()[2]) - (other.group1()[3] * self.group0()[2]) - (other.group3()[1] * self.group0()[0])),
                (-(self.group1()[0] * other.group2()[3]) + (other.group1()[2] * self.group0()[2]) + (other.group3()[3] * self.group0()[3])),
            ]) + (Simd32x4::from(self.group1()[1]) * other.group1())
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[1]]) * swizzle!(self.group0(), 2, 0, 1, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group1()[0] * other.group1()[0]) + (self.group1()[0] * other.group3()[0])),
                ((self.group1()[0] * other.group1()[1]) + (self.group1()[0] * other.group3()[1])),
                ((self.group1()[0] * other.group1()[2]) + (self.group1()[0] * other.group3()[2])),
                (other.group0()[2] * self.group0()[2]),
            ]) + (Simd32x4::from(self.group1()[1]) * other.group2())
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group0()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group1()[0] * other.group0()[0]) + (other.group2()[0] * self.group0()[3])),
                (-(self.group1()[0] * other.group0()[1]) + (other.group2()[1] * self.group0()[3])),
                (-(self.group1()[0] * other.group0()[2]) + (other.group2()[2] * self.group0()[3])),
                (-(other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self.group1()[1]) * other.group3())
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 3))),
        );
    }
}
impl GeometricAntiProduct<DualNum321> for VersorRoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        8        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        2        9        0
    //  no simd        2       12        0
    fn geometric_anti_product(self, other: DualNum321) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[1] * self.group1()[1])]),
            // e415, e425, e435, e321
            (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]])),
            // e235, e315, e125, e5
            Simd32x4::from([0.0, 0.0, 0.0, (-(other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[0]))]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<DualNum4> for VersorRoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2       15        0
    fn geometric_anti_product(self, other: DualNum4) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[1])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group1()[0])]),
            // e235, e315, e125, e5
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[1] * self.group1()[0])]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<DualNum5> for VersorRoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        9        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        2       10        0
    //  no simd        2       13        0
    fn geometric_anti_product(self, other: DualNum5) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([0.0, 0.0, 0.0, ((other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group1()[1]))]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group0()[3] * -1.0)]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0])),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(other.group0()[1]) * self.group0()),
        );
    }
}
impl GeometricAntiProduct<FlatPoint> for VersorRoundPoint {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       12       25        0
    fn geometric_anti_product(self, other: FlatPoint) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[3]) - (other.group0()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group0()[3]) - (other.group0()[3] * self.group0()[2])),
                (self.group1()[1] * other.group0()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group1()[1] * other.group0()[0]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((self.group1()[1] * other.group0()[1]) + (other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                ((self.group1()[1] * other.group0()[2]) - (other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
                (other.group0()[3] * self.group0()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3]),
                (other.group0()[1] * self.group0()[3]),
                (other.group0()[2] * self.group0()[3]),
                ((self.group1()[0] * other.group0()[3]) - (other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Flector> for VersorRoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       36        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       24       40        0
    //  no simd       36       52        0
    fn geometric_anti_product(self, other: Flector) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group1()[0] * self.group0()[3] * -1.0),
                (other.group1()[1] * self.group0()[3] * -1.0),
                (other.group1()[2] * self.group0()[3] * -1.0),
                ((other.group1()[0] * self.group0()[0]) + (other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2]) + (other.group1()[3] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (-(other.group0()[3] * self.group0()[0]) - (other.group1()[2] * self.group0()[1])),
                (-(other.group0()[3] * self.group0()[1]) - (other.group1()[0] * self.group0()[2])),
                (-(other.group0()[3] * self.group0()[2]) - (other.group1()[1] * self.group0()[0])),
                0.0,
            ]) + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group1()[1]]) * other.group0())
                + (swizzle!(other.group1(), 1, 2, 0, 3) * swizzle!(self.group0(), 2, 0, 1, 3))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group1()[0] * other.group1()[0]) + (self.group1()[1] * other.group0()[0]) - (other.group0()[1] * self.group0()[2])
                    + (other.group0()[2] * self.group0()[1])
                    + (other.group1()[3] * self.group0()[0])),
                ((self.group1()[0] * other.group1()[1]) + (self.group1()[1] * other.group0()[1]) + (other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])
                    + (other.group1()[3] * self.group0()[1])),
                ((self.group1()[0] * other.group1()[2]) + (self.group1()[1] * other.group0()[2]) - (other.group0()[0] * self.group0()[1])
                    + (other.group0()[1] * self.group0()[0])
                    + (other.group1()[3] * self.group0()[2])),
                (other.group0()[3] * self.group0()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self.group1()[1]) * other.group1())
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group1()[0]]) * other.group0())),
        );
    }
}
impl GeometricAntiProduct<Line> for VersorRoundPoint {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       21        0
    //    simd3        0        1        0
    //    simd4        2        4        0
    // Totals...
    // yes simd       16       26        0
    //  no simd       22       40        0
    fn geometric_anti_product(self, other: Line) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self.group0()[3]) * other.group0()),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group1()[1] * other.group0()[0]) + (other.group1()[0] * self.group0()[3])),
                ((self.group1()[1] * other.group0()[1]) + (other.group1()[1] * self.group0()[3])),
                ((self.group1()[1] * other.group0()[2]) + (other.group1()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group1()[0]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1])),
                ((self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group1()[1]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])),
                ((self.group1()[0] * other.group0()[2]) + (self.group1()[1] * other.group1()[2]) - (other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0])),
                0.0,
            ]),
            // e1, e2, e3, e5
            ((Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]])
                * swizzle!(self.group0(), 1, 2, 0, 2)
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group1()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))),
        );
    }
}
impl GeometricAntiProduct<Motor> for VersorRoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       36        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       23       39        0
    //  no simd       32       48        0
    fn geometric_anti_product(self, other: Motor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3]),
                (other.group0()[1] * self.group0()[3]),
                (other.group0()[2] * self.group0()[3]),
                ((self.group1()[1] * other.group0()[3]) + (other.group1()[3] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group1()[1] * other.group0()[0]) + (other.group1()[0] * self.group0()[3])),
                ((self.group1()[1] * other.group0()[1]) + (other.group1()[1] * self.group0()[3])),
                ((self.group1()[1] * other.group0()[2]) + (other.group1()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group1()[3] * self.group0()[3])),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group1()[2] * self.group0()[1]) + (other.group1()[3] * self.group0()[0])),
                ((other.group1()[0] * self.group0()[2]) + (other.group1()[3] * self.group0()[1])),
                ((other.group1()[1] * self.group0()[0]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self.group1()[0]) * other.group0())
                + (Simd32x4::from(self.group1()[1]) * other.group1())
                - (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (other.group0()[3] * self.group0()[0])
                    - (other.group1()[0] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) + (other.group0()[3] * self.group0()[1]) - (other.group1()[1] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (other.group0()[3] * self.group0()[2])
                    - (other.group1()[2] * self.group0()[3])),
                (other.group0()[3] * self.group0()[3]),
            ]),
        );
    }
}
impl GeometricAntiProduct<MultiVector> for VersorRoundPoint {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       41       64        0
    //    simd2        3        3        0
    //    simd3       19       22        0
    //    simd4       14       14        0
    // Totals...
    // yes simd       77      103        0
    //  no simd      160      192        0
    fn geometric_anti_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                ((other.group9()[0] * self.group0()[0]) + (other.group9()[1] * self.group0()[1]) + (other.group9()[2] * self.group0()[2])),
                (-(other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x2::from(self.group1()[0]) * Simd32x2::from([other[e45], other.group1()[3]]))
                + (Simd32x2::from(self.group1()[1]) * other.group0())
                + (Simd32x2::from(self.group0()[3]) * Simd32x2::from([other.group9()[3], other[e1]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group1()[0] * other.group7()[0]) - (other.group8()[0] * self.group0()[3]) - (other.group6()[1] * self.group0()[2])),
                ((self.group1()[0] * other.group7()[1]) - (other.group8()[1] * self.group0()[3]) - (other.group6()[2] * self.group0()[0])),
                ((self.group1()[0] * other.group7()[2]) - (other.group8()[2] * self.group0()[3]) - (other.group6()[0] * self.group0()[1])),
                ((other.group7()[1] * self.group0()[1]) + (other.group7()[2] * self.group0()[2]) + (other.group6()[3] * self.group0()[3])),
            ]) + (Simd32x4::from(other.group0()[1]) * self.group0())
                + (Simd32x4::from(self.group1()[1]) * other.group1())
                + (Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group7()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e5
            ((other.group0()[1] * self.group1()[0]) - (self.group1()[0] * other.group6()[3]) + (self.group1()[1] * other[e1])
                - (other.group8()[0] * self.group0()[0])
                - (other.group8()[1] * self.group0()[1])
                - (other.group8()[2] * self.group0()[2])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group1()[0] * other.group5()[0]) - (other.group3()[1] * self.group0()[2])),
                ((self.group1()[0] * other.group5()[1]) - (other.group3()[2] * self.group0()[0])),
                ((self.group1()[0] * other.group5()[2]) - (other.group3()[0] * self.group0()[1])),
                (-(self.group1()[0] * other[e45]) + (other.group5()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self.group1()[1]) * other.group3())
                + (Simd32x4::from([self.group1()[0], self.group1()[0], self.group1()[0], self.group0()[3]]) * other.group9())
                + (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group5()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group9()[3], other.group9()[3], other.group9()[3], other.group5()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e41, e42, e43
            ((Simd32x3::from(self.group1()[1]) * other.group4()) - (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                + (Simd32x3::from(self.group0()[3]) * other.group5())
                - (Simd32x3::from(other[e45]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group4(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group4(), 1, 2, 0))),
            // e23, e31, e12
            (Simd32x3::from([
                ((other.group9()[1] * self.group0()[2]) - (other.group9()[2] * self.group0()[1])),
                (-(other.group9()[0] * self.group0()[2]) + (other.group9()[2] * self.group0()[0])),
                ((other.group9()[0] * self.group0()[1]) - (other.group9()[1] * self.group0()[0])),
            ]) + (Simd32x3::from(self.group1()[0]) * other.group4())
                + (Simd32x3::from(self.group1()[1]) * other.group5())
                - (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group8()[0] * self.group0()[3]) + (other.group1()[2] * self.group0()[1]) + (other.group6()[3] * self.group0()[0])),
                ((other.group8()[1] * self.group0()[3]) + (other.group1()[0] * self.group0()[2]) + (other.group6()[3] * self.group0()[1])),
                ((other.group8()[2] * self.group0()[3]) + (other.group1()[1] * self.group0()[0]) + (other.group6()[3] * self.group0()[2])),
                (-(other.group6()[1] * self.group0()[1]) - (other.group6()[2] * self.group0()[2]) - (self.group0()[3] * other[e1])),
            ]) + (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group1()[3]]))
                + (Simd32x4::from(self.group1()[1]) * other.group6())
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group6()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e423, e431, e412
            ((Simd32x3::from(self.group1()[1]) * other.group7()) - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                - (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group7(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group7(), 1, 2, 0))),
            // e235, e315, e125
            (-(Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                + (Simd32x3::from(self.group1()[1]) * other.group8())
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group8(), 2, 0, 1))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group8(), 1, 2, 0))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group1()[0] * other.group4()[0]) + (other.group5()[1] * self.group0()[2])),
                (-(self.group1()[0] * other.group4()[1]) + (other.group5()[2] * self.group0()[0])),
                (-(self.group1()[0] * other.group4()[2]) + (other.group5()[0] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[0]) - (other.group3()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self.group1()[1]) * other.group9())
                - (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group3()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))
                - (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group3()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group1()[0]]) * other.group3())),
            // e1234
            ((other.group0()[0] * self.group0()[3])
                + (self.group1()[1] * other[e45])
                + (other.group4()[0] * self.group0()[0])
                + (other.group4()[1] * self.group0()[1])
                + (other.group4()[2] * self.group0()[2])
                - (other.group3()[3] * self.group0()[3])),
        );
    }
}
impl GeometricAntiProduct<Plane> for VersorRoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       23        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        9       24        0
    //  no simd        9       27        0
    fn geometric_anti_product(self, other: Plane) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3] * -1.0),
                (other.group0()[1] * self.group0()[3] * -1.0),
                (other.group0()[2] * self.group0()[3] * -1.0),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) + (other.group0()[3] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
                (other.group0()[3] * self.group0()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[0]) + (other.group0()[3] * self.group0()[0])),
                ((self.group1()[0] * other.group0()[1]) + (other.group0()[3] * self.group0()[1])),
                ((self.group1()[0] * other.group0()[2]) + (other.group0()[3] * self.group0()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group1()[1]) * other.group0()),
        );
    }
}
impl GeometricAntiProduct<QuadNum> for VersorRoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       27        0
    fn geometric_anti_product(self, other: QuadNum) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[3]) + (other.group0()[1] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other.group0()[2] * self.group0()[0]),
                (other.group0()[2] * self.group0()[1]),
                (other.group0()[2] * self.group0()[2]),
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[2]) - (other.group0()[1] * self.group0()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                (-(self.group1()[0] * other.group0()[2]) + (self.group1()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[3] * self.group0()[0]),
                (other.group0()[3] * self.group0()[1]),
                (other.group0()[3] * self.group0()[2]),
                ((self.group1()[1] * other.group0()[0]) + (other.group0()[2] * self.group0()[3]) + (other.group0()[3] * self.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<RoundPoint> for VersorRoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       10        0
    //    simd4        3        5        0
    // Totals...
    // yes simd        8       15        0
    //  no simd       17       30        0
    fn geometric_anti_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]) + (self.group0()[3] * other[e2])),
            ]) + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group1()[0]]) * other.group0())
                - (swizzle!(other.group0(), 3, 3, 3, 0) * swizzle!(self.group0(), 0, 1, 2, 0))),
            // e415, e425, e435, e321
            (-(Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other[e2]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 3))),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group1()[0] * other.group0()[0]) + (self.group0()[0] * other[e2])),
                (-(self.group1()[0] * other.group0()[1]) + (self.group0()[1] * other[e2])),
                (-(self.group1()[0] * other.group0()[2]) + (self.group0()[2] * other[e2])),
                (self.group1()[1] * other[e2]),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group1()[1]) * other.group0()),
        );
    }
}
impl GeometricAntiProduct<Scalar> for VersorRoundPoint {
    type Output = VersorSphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd2        0        1        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        3        0
    //  no simd        0       10        0
    fn geometric_anti_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return VersorSphere::from_groups(
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other[scalar]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e1234, scalar
            (Simd32x2::from(other[scalar]) * Simd32x2::from([self.group0()[3], self.group1()[1]])),
        );
    }
}
impl GeometricAntiProduct<Sphere> for VersorRoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       22        0
    //    simd4        1        2        0
    // Totals...
    // yes simd       11       24        0
    //  no simd       14       30        0
    fn geometric_anti_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (self.group0()[0] * other[e4315])),
                (-(other.group0()[1] * self.group0()[3]) - (self.group0()[1] * other[e4315])),
                (-(other.group0()[2] * self.group0()[3]) - (self.group0()[2] * other[e4315])),
                ((self.group1()[0] * other[e4315])
                    + (other.group0()[0] * self.group0()[0])
                    + (other.group0()[1] * self.group0()[1])
                    + (other.group0()[2] * self.group0()[2])
                    + (other.group0()[3] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            (-Simd32x4::from([
                (other.group0()[2] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                (other.group0()[1] * self.group0()[0]),
                (self.group1()[0] * other[e4315]),
            ]) + (swizzle!(other.group0(), 1, 2, 0, 3) * swizzle!(self.group0(), 2, 0, 1, 3))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[0]) + (other.group0()[3] * self.group0()[0])),
                ((self.group1()[0] * other.group0()[1]) + (other.group0()[3] * self.group0()[1])),
                ((self.group1()[0] * other.group0()[2]) + (other.group0()[3] * self.group0()[2])),
                (self.group1()[1] * other[e4315]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group1()[1]) * other.group0()),
        );
    }
}
impl GeometricAntiProduct<TripleNum> for VersorRoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       21        0
    fn geometric_anti_product(self, other: TripleNum) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[2]) + (other.group0()[1] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, ((self.group1()[0] * other.group0()[0]) - (other.group0()[1] * self.group0()[3]))]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                ((self.group1()[0] * other.group0()[2]) + (self.group1()[1] * other.group0()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[2] * self.group0()[0]),
                (other.group0()[2] * self.group0()[1]),
                (other.group0()[2] * self.group0()[2]),
                ((self.group1()[1] * other.group0()[0]) + (other.group0()[2] * self.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorEven> for VersorRoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       28        0
    //    simd4       16       18        0
    // Totals...
    // yes simd       32       46        0
    //  no simd       80      100        0
    fn geometric_anti_product(self, other: VersorEven) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[2]])
                * swizzle!(self.group0(), 3, 3, 3, 2)
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                + (Simd32x4::from(self.group1()[1]) * other.group0())
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group2()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group3()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group1()[0]]) * other.group3())
                - (swizzle!(other.group3(), 3, 3, 3, 1) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((other.group1()[3] * self.group0()[0]) + (other.group2()[0] * self.group0()[3]) + (other.group3()[2] * self.group0()[1])),
                ((other.group1()[3] * self.group0()[1]) + (other.group2()[1] * self.group0()[3]) + (other.group3()[0] * self.group0()[2])),
                ((other.group1()[3] * self.group0()[2]) + (other.group2()[2] * self.group0()[3]) + (other.group3()[1] * self.group0()[0])),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2]) - (other.group2()[3] * self.group0()[3])),
            ]) + (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group3()[3]]))
                + (Simd32x4::from(self.group1()[1]) * other.group1())
                - (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group2()[2] * self.group0()[1]) + (other.group2()[3] * self.group0()[0])),
                ((other.group2()[0] * self.group0()[2]) + (other.group2()[3] * self.group0()[1])),
                ((other.group2()[1] * self.group0()[0]) + (other.group2()[3] * self.group0()[2])),
                (-(other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                - (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))
                + (Simd32x4::from(self.group1()[1]) * other.group2())
                - (swizzle!(other.group2(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group1()[1] * self.group0()[2]) - (other.group2()[0] * self.group0()[3])),
                (-(other.group1()[2] * self.group0()[0]) - (other.group2()[1] * self.group0()[3])),
                (-(other.group1()[0] * self.group0()[1]) - (other.group2()[2] * self.group0()[3])),
                ((other.group0()[3] * self.group0()[3]) + (other.group1()[3] * self.group0()[3])),
            ]) + (Simd32x4::from(self.group1()[1]) * other.group3())
                + (Simd32x4::from([self.group1()[0], self.group1()[0], self.group1()[0], self.group0()[0]]) * swizzle!(other.group0(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]) * swizzle!(self.group0(), 1, 2, 0, 2))
                + (swizzle!(other.group0(), 3, 3, 3, 1) * swizzle!(self.group0(), 0, 1, 2, 1))),
        );
    }
}
impl GeometricAntiProduct<VersorOdd> for VersorRoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       40        0
    //    simd4       14       14        0
    // Totals...
    // yes simd       38       54        0
    //  no simd       80       96        0
    fn geometric_anti_product(self, other: VersorOdd) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                (-(other.group0()[2] * self.group0()[1]) - (other.group2()[3] * self.group0()[0]) - (other.group3()[0] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group2()[3] * self.group0()[1]) - (other.group3()[1] * self.group0()[3])),
                (-(other.group0()[1] * self.group0()[0]) - (other.group2()[3] * self.group0()[2]) - (other.group3()[2] * self.group0()[3])),
                ((self.group1()[0] * other.group2()[3]) + (other.group3()[2] * self.group0()[2]) + (other.group3()[3] * self.group0()[3])),
            ]) + (Simd32x4::from(self.group1()[1]) * other.group0())
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))
                + (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group1()[0] * other.group0()[0]) - (other.group1()[3] * self.group0()[0]) - (other.group3()[2] * self.group0()[1])),
                ((self.group1()[0] * other.group0()[1]) - (other.group1()[3] * self.group0()[1]) - (other.group3()[0] * self.group0()[2])),
                ((self.group1()[0] * other.group0()[2]) - (other.group1()[3] * self.group0()[2]) - (other.group3()[1] * self.group0()[0])),
                (-(self.group1()[0] * other.group2()[3]) + (other.group1()[2] * self.group0()[2]) + (other.group3()[3] * self.group0()[3])),
            ]) + (Simd32x4::from(self.group1()[1]) * other.group1())
                + (Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                + (Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[1]]) * swizzle!(self.group0(), 2, 0, 1, 1))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group1()[0] * other.group1()[0]) + (self.group1()[0] * other.group3()[0])),
                ((self.group1()[0] * other.group1()[1]) + (self.group1()[0] * other.group3()[1])),
                ((self.group1()[0] * other.group1()[2]) + (self.group1()[0] * other.group3()[2])),
                ((other.group0()[2] * self.group0()[2]) + (other.group0()[3] * self.group0()[3])),
            ]) + (Simd32x4::from(self.group1()[1]) * other.group2())
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group0()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group1()[0] * other.group0()[0]) + (other.group2()[0] * self.group0()[3])),
                (-(self.group1()[0] * other.group0()[1]) + (other.group2()[1] * self.group0()[3])),
                (-(self.group1()[0] * other.group0()[2]) + (other.group2()[2] * self.group0()[3])),
                ((self.group1()[0] * other.group0()[3]) - (other.group2()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self.group1()[1]) * other.group3())
                - (Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other.group2()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))
                - (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 3))),
        );
    }
}
impl GeometricAntiProduct<VersorRoundPoint> for VersorRoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        4        0
    //    simd4        5        9        0
    // Totals...
    // yes simd        8       13        0
    //  no simd       23       40        0
    fn geometric_anti_product(self, other: VersorRoundPoint) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((other.group1()[1] * self.group1()[1]) + (self.group1()[0] * other.group0()[3]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]))
                - (swizzle!(other.group0(), 3, 3, 3, 0) * swizzle!(self.group0(), 0, 1, 2, 0))),
            // e415, e425, e435, e321
            (-(Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                + (Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]) * swizzle!(other.group0(), 2, 0, 1, 3))),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group1()[0])
                * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]])
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from(other.group1()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]))),
            // e1, e2, e3, e4
            ((Simd32x4::from(other.group1()[1]) * self.group0()) + (Simd32x4::from(self.group1()[1]) * other.group0())),
        );
    }
}
impl GeometricAntiProduct<VersorSphere> for VersorRoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       20        0
    //    simd4        3        5        0
    // Totals...
    // yes simd       11       25        0
    //  no simd       20       40        0
    fn geometric_anti_product(self, other: VersorSphere) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(other.group1()[0] * self.group0()[0]) - (self.group0()[3] * other.group0()[0])),
                (-(other.group1()[0] * self.group0()[1]) - (self.group0()[3] * other.group0()[1])),
                (-(other.group1()[0] * self.group0()[2]) - (self.group0()[3] * other.group0()[2])),
                ((self.group1()[0] * other.group1()[0])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group0()[0] * other.group0()[0])
                    + (self.group0()[1] * other.group0()[1])
                    + (self.group0()[2] * other.group0()[2])
                    + (self.group0()[3] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            (-Simd32x4::from([
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[2] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group1()[0] * other.group1()[0]),
            ]) + (swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (self.group1()[0] * other.group0()[0]),
                (self.group1()[0] * other.group0()[1]),
                (self.group1()[0] * other.group0()[2]),
                (self.group1()[1] * other.group1()[0]),
            ]) + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other.group1()[1]]) * self.group0())),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(other.group1()[1])
                * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]])
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from(self.group1()[1]) * other.group0())),
        );
    }
}
impl InfixGeometricAntiProduct for VersorSphere {}
impl GeometricAntiProduct<AntiCircleRotor> for VersorSphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       31        0
    //    simd4        9       10        0
    // Totals...
    // yes simd       23       41        0
    //  no simd       50       71        0
    fn geometric_anti_product(self, other: AntiCircleRotor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group0()[0]) + (other.group0()[1] * self.group0()[2])
                    - (other.group0()[2] * self.group0()[1])),
                (-(self.group1()[0] * other.group1()[1]) - (self.group1()[1] * other.group0()[1]) - (other.group0()[0] * self.group0()[2])
                    + (other.group0()[2] * self.group0()[0])),
                (-(self.group1()[0] * other.group1()[2]) - (self.group1()[1] * other.group0()[2]) + (other.group0()[0] * self.group0()[1])
                    - (other.group0()[1] * self.group0()[0])),
                (self.group1()[1] * other.group2()[3] * -1.0),
            ]),
            // e415, e425, e435, e321
            ((Simd32x4::from([
                (self.group1()[0] * other.group2()[0]),
                (self.group1()[0] * other.group2()[1]),
                (self.group1()[0] * other.group2()[2]),
                (self.group1()[1] * other.group1()[3]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                - (Simd32x4::from([self.group1()[1], self.group1()[1], self.group1()[1], self.group0()[0]]) * swizzle!(other.group1(), 0, 1, 2, 0))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (swizzle!(other.group1(), 3, 3, 3, 2) * swizzle!(self.group0(), 0, 1, 2, 2))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (other.group2()[2] * self.group0()[1]),
                (other.group2()[0] * self.group0()[2]),
                (other.group2()[1] * self.group0()[0]),
                (-(other.group2()[2] * self.group0()[2]) - (other.group2()[3] * self.group0()[3])),
            ]) - (Simd32x4::from(self.group0()[3]) * other.group1())
                - (Simd32x4::from([self.group1()[1], self.group1()[1], self.group1()[1], self.group0()[0]]) * swizzle!(other.group2(), 0, 1, 2, 0))
                - (swizzle!(other.group2(), 1, 2, 0, 1) * swizzle!(self.group0(), 2, 0, 1, 1))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group1()[1] * self.group0()[2])),
                (-(other.group0()[1] * self.group0()[3]) - (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[2] * self.group0()[3]) - (other.group1()[0] * self.group0()[1])),
                (-(self.group1()[0] * other.group2()[3]) + (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))),
        );
    }
}
impl GeometricAntiProduct<AntiDipoleInversion> for VersorSphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       30        0
    //    simd4       15       15        0
    // Totals...
    // yes simd       30       45        0
    //  no simd       75       90        0
    fn geometric_anti_product(self, other: AntiDipoleInversion) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                ((self.group1()[1] * other.group0()[0]) - (other.group0()[1] * self.group0()[2])),
                ((self.group1()[1] * other.group0()[1]) - (other.group0()[2] * self.group0()[0])),
                ((self.group1()[1] * other.group0()[2]) - (other.group0()[0] * self.group0()[1])),
                (other.group3()[2] * self.group0()[2]),
            ]) + (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                + (Simd32x4::from([self.group1()[0], self.group1()[0], self.group1()[0], self.group0()[0]]) * swizzle!(other.group3(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group3()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group1()[1] * other.group1()[0]) + (other.group0()[0] * self.group0()[3]) + (other.group3()[1] * self.group0()[2])),
                ((self.group1()[1] * other.group1()[1]) + (other.group0()[1] * self.group0()[3]) + (other.group3()[2] * self.group0()[0])),
                ((self.group1()[1] * other.group1()[2]) + (other.group0()[2] * self.group0()[3]) + (other.group3()[0] * self.group0()[1])),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2]) - (other.group2()[3] * self.group0()[3])),
            ]) + (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                - (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (other.group2()[1] * self.group0()[2]),
                (other.group2()[2] * self.group0()[0]),
                (other.group2()[0] * self.group0()[1]),
                0.0,
            ]) + (Simd32x4::from(self.group1()[1]) * other.group2())
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group0()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group0()[2]]) * swizzle!(self.group0(), 0, 1, 2, 2))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group1()[0]]) * other.group1())),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group1()[1] * other.group3()[0]) - (other.group1()[1] * self.group0()[2])),
                (-(self.group1()[1] * other.group3()[1]) - (other.group1()[2] * self.group0()[0])),
                (-(self.group1()[1] * other.group3()[2]) - (other.group1()[0] * self.group0()[1])),
                ((self.group1()[1] * other.group3()[3]) + (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([self.group1()[0], self.group1()[0], self.group1()[0], self.group0()[0]]) * swizzle!(other.group2(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum321> for VersorSphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        9        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        2       11        0
    //  no simd        2       17        0
    fn geometric_anti_product(self, other: AntiDualNum321) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[1] * self.group1()[1] * -1.0)]),
            // e415, e425, e435, e321
            (Simd32x4::from(other.group0()[0])
                * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]])
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e235, e315, e125, e5
            Simd32x4::from([0.0, 0.0, 0.0, (-(other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group0()[3]))]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                ((other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group1()[0])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum4> for VersorSphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2       17        0
    fn geometric_anti_product(self, other: AntiDualNum4) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                (-(other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group1()[1])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group0()[3] * -1.0)]),
            // e235, e315, e125, e5
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[1] * self.group0()[3] * -1.0)]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                (-(other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum5> for VersorSphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        8        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        2       10        0
    //  no simd        2       16        0
    fn geometric_anti_product(self, other: AntiDualNum5) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group1()[1]))]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group1()[0])]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                (-(other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group0()[3])),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
    }
}
impl GeometricAntiProduct<AntiFlatPoint> for VersorSphere {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       12       25        0
    fn geometric_anti_product(self, other: AntiFlatPoint) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[0]) - (other.group0()[3] * self.group0()[0])),
                ((self.group1()[0] * other.group0()[1]) - (other.group0()[3] * self.group0()[1])),
                ((self.group1()[0] * other.group0()[2]) - (other.group0()[3] * self.group0()[2])),
                (self.group1()[1] * other.group0()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group1()[1] * other.group0()[0]) + (other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                ((self.group1()[1] * other.group0()[1]) - (other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])),
                ((self.group1()[1] * other.group0()[2]) + (other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
                (self.group1()[0] * other.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group1()[0] * other.group0()[0]),
                (self.group1()[0] * other.group0()[1]),
                (self.group1()[0] * other.group0()[2]),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiFlector> for VersorSphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       21       39        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       24       42        0
    //  no simd       33       51        0
    fn geometric_anti_product(self, other: AntiFlector) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group1()[0] * other.group1()[0]),
                (self.group1()[0] * other.group1()[1]),
                (self.group1()[0] * other.group1()[2]),
                ((self.group1()[0] * other.group1()[3]) + (other.group1()[0] * self.group0()[0]) + (other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1])),
                (-(other.group1()[0] * self.group0()[2]) + (other.group1()[2] * self.group0()[0])),
                ((other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0])),
                0.0,
            ]) + (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group1()[1] * other.group0()[0]) + (other.group0()[1] * self.group0()[2])
                    - (other.group0()[2] * self.group0()[1])
                    - (other.group1()[0] * self.group0()[3])
                    - (other.group1()[3] * self.group0()[0])),
                ((self.group1()[1] * other.group0()[1]) - (other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[3])
                    - (other.group1()[3] * self.group0()[1])),
                ((self.group1()[1] * other.group0()[2]) + (other.group0()[0] * self.group0()[1])
                    - (other.group0()[1] * self.group0()[0])
                    - (other.group1()[2] * self.group0()[3])
                    - (other.group1()[3] * self.group0()[2])),
                (self.group1()[0] * other.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group1()[1] * other.group1()[0]) * -1.0),
                ((self.group1()[1] * other.group1()[1]) * -1.0),
                ((self.group1()[1] * other.group1()[2]) * -1.0),
                ((self.group1()[1] * other.group1()[3]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self.group0()[3])),
            ]) + (Simd32x4::from([self.group1()[0], self.group1()[0], self.group1()[0], self.group0()[0]]) * swizzle!(other.group0(), 0, 1, 2, 0))),
        );
    }
}
impl GeometricAntiProduct<AntiLine> for VersorSphere {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       29        0
    //    simd3        0        2        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       19       32        0
    //  no simd       22       39        0
    fn geometric_anti_product(self, other: AntiLine) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self.group1()[0]) * other.group0() * Simd32x3::from(-1.0)),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group0()[0])),
                (-(self.group1()[0] * other.group1()[1]) - (self.group1()[1] * other.group0()[1])),
                (-(self.group1()[0] * other.group1()[2]) - (self.group1()[1] * other.group0()[2])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (-(self.group1()[1] * other.group1()[0]) - (other.group0()[0] * self.group0()[3]) - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])),
                (-(self.group1()[1] * other.group1()[1]) - (other.group0()[1] * self.group0()[3]) + (other.group1()[0] * self.group0()[2])
                    - (other.group1()[2] * self.group0()[0])),
                (-(self.group1()[1] * other.group1()[2]) - (other.group0()[2] * self.group0()[3]) - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])),
                0.0,
            ]),
            // e1, e2, e3, e5
            (Simd32x4::from([
                ((self.group1()[0] * other.group1()[0]) + (other.group0()[2] * self.group0()[1])),
                ((self.group1()[0] * other.group1()[1]) + (other.group0()[0] * self.group0()[2])),
                ((self.group1()[0] * other.group1()[2]) + (other.group0()[1] * self.group0()[0])),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]) * swizzle!(self.group0(), 2, 0, 1, 0))),
        );
    }
}
impl GeometricAntiProduct<AntiMotor> for VersorSphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       39        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       20       43        0
    //  no simd       32       55        0
    fn geometric_anti_product(self, other: AntiMotor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group1()[0] * other.group0()[0] * -1.0),
                (self.group1()[0] * other.group0()[1] * -1.0),
                (self.group1()[0] * other.group0()[2] * -1.0),
                (-(self.group1()[0] * other.group1()[3]) - (self.group1()[1] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                ((self.group1()[0] * other.group1()[0]) * -1.0),
                ((self.group1()[0] * other.group1()[1]) * -1.0),
                ((self.group1()[0] * other.group1()[2]) * -1.0),
                ((self.group1()[0] * other.group1()[3]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([self.group1()[1], self.group1()[1], self.group1()[1], self.group0()[0]]) * swizzle!(other.group0(), 0, 1, 2, 0))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group1()[2] * self.group0()[1]) + (other.group1()[3] * self.group0()[0])),
                ((other.group1()[0] * self.group0()[2]) + (other.group1()[3] * self.group0()[1])),
                ((other.group1()[1] * self.group0()[0]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(self.group1()[1]) * other.group1())
                - (Simd32x4::from(self.group0()[3]) * other.group0())
                - (swizzle!(other.group1(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group1()[0] * other.group1()[0]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (other.group0()[3] * self.group0()[0])),
                ((self.group1()[0] * other.group1()[1]) + (other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) + (other.group0()[3] * self.group0()[1])),
                ((self.group1()[0] * other.group1()[2]) - (other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (other.group0()[3] * self.group0()[2])),
                (self.group1()[0] * other.group0()[3] * -1.0),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiPlane> for VersorSphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       20        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        9       22        0
    //  no simd        9       28        0
    fn geometric_anti_product(self, other: AntiPlane) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group1()[0] * other.group0()[0]),
                (self.group1()[0] * other.group0()[1]),
                (self.group1()[0] * other.group0()[2]),
                ((self.group1()[0] * other.group0()[3]) + (other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
                (self.group1()[0] * other.group0()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group0()[3] * self.group0()[0])),
                (-(other.group0()[1] * self.group0()[3]) - (other.group0()[3] * self.group0()[1])),
                (-(other.group0()[2] * self.group0()[3]) - (other.group0()[3] * self.group0()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group1()[1]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
    }
}
impl GeometricAntiProduct<AntiQuadNum> for VersorSphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       30        0
    fn geometric_anti_product(self, other: AntiQuadNum) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                (-(self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[3]) - (other.group0()[0] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other.group0()[2] * self.group0()[0] * -1.0),
                (other.group0()[2] * self.group0()[1] * -1.0),
                (other.group0()[2] * self.group0()[2] * -1.0),
                ((self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[2]) - (other.group0()[0] * self.group0()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                (-(self.group1()[1] * other.group0()[1]) - (other.group0()[2] * self.group0()[3]) - (other.group0()[3] * self.group0()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[3] * self.group0()[0]),
                (other.group0()[3] * self.group0()[1]),
                (other.group0()[3] * self.group0()[2]),
                ((self.group1()[0] * other.group0()[2]) - (self.group1()[0] * other.group0()[3]) - (self.group1()[1] * other.group0()[0])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiScalar> for VersorSphere {
    type Output = VersorSphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd2        0        1        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        0        2        0
    //  no simd        0        6        0
    fn geometric_anti_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return VersorSphere::from_groups(
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other[e12345]) * self.group0()),
            // e1234, scalar
            (Simd32x2::from(other[e12345]) * self.group1()),
        );
    }
}
impl GeometricAntiProduct<AntiTripleNum> for VersorSphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       21        0
    fn geometric_anti_product(self, other: AntiTripleNum) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                (-(self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[2]) - (other.group0()[0] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, ((self.group1()[0] * other.group0()[1]) - (other.group0()[0] * self.group0()[3]))]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                (-(self.group1()[1] * other.group0()[1]) - (other.group0()[2] * self.group0()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[2] * self.group0()[0]),
                (other.group0()[2] * self.group0()[1]),
                (other.group0()[2] * self.group0()[2]),
                (-(self.group1()[0] * other.group0()[2]) - (self.group1()[1] * other.group0()[0])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Circle> for VersorSphere {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       28        0
    //    simd3        3        4        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       24       37        0
    //  no simd       45       60        0
    fn geometric_anti_product(self, other: Circle) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group1()[1]) * other.group0())
                + (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group1()[0] * other.group2()[0]) + (self.group1()[1] * other.group1()[0]) + (other.group0()[0] * self.group0()[3])),
                ((self.group1()[0] * other.group2()[1]) + (self.group1()[1] * other.group1()[1]) + (other.group0()[1] * self.group0()[3])),
                ((self.group1()[0] * other.group2()[2]) + (self.group1()[1] * other.group1()[2]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                ((self.group1()[1] * other.group2()[0]) + (other.group2()[1] * self.group0()[2])),
                ((self.group1()[1] * other.group2()[1]) + (other.group2()[2] * self.group0()[0])),
                ((self.group1()[1] * other.group2()[2]) + (other.group2()[0] * self.group0()[1])),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group1()[0]]) * other.group1())),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group1()[0] * other.group2()[0]) - (other.group1()[1] * self.group0()[2])),
                ((self.group1()[0] * other.group2()[1]) - (other.group1()[2] * self.group0()[0])),
                ((self.group1()[0] * other.group2()[2]) - (other.group1()[0] * self.group0()[1])),
                ((other.group2()[1] * self.group0()[1]) + (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<CircleRotor> for VersorSphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       30        0
    //    simd4        8       10        0
    // Totals...
    // yes simd       26       40        0
    //  no simd       50       70        0
    fn geometric_anti_product(self, other: CircleRotor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group1()[0] * other.group1()[0]) + (self.group1()[1] * other.group0()[0]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((self.group1()[0] * other.group1()[1]) + (self.group1()[1] * other.group0()[1]) + (other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                ((self.group1()[0] * other.group1()[2]) + (self.group1()[1] * other.group0()[2]) - (other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
                (self.group1()[1] * other.group2()[3]),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group1()[0] * other.group2()[0]) + (self.group1()[1] * other.group1()[0]) + (other.group0()[0] * self.group0()[3])),
                ((self.group1()[0] * other.group2()[1]) + (self.group1()[1] * other.group1()[1]) + (other.group0()[1] * self.group0()[3])),
                ((self.group1()[0] * other.group2()[2]) + (self.group1()[1] * other.group1()[2]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (other.group2()[1] * self.group0()[2]),
                (other.group2()[2] * self.group0()[0]),
                (other.group2()[0] * self.group0()[1]),
                (-(other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([self.group1()[1], self.group1()[1], self.group1()[1], self.group1()[0]]) * other.group2())
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group1()[0]]) * other.group1())),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[3]])
                * swizzle!(self.group0(), 2, 0, 1, 3)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([self.group1()[0], self.group1()[0], self.group1()[0], self.group0()[0]]) * swizzle!(other.group2(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))
                + (swizzle!(other.group2(), 3, 3, 3, 2) * swizzle!(self.group0(), 0, 1, 2, 2))),
        );
    }
}
impl GeometricAntiProduct<Dipole> for VersorSphere {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       24        0
    //    simd3        3        4        0
    //    simd4        6        7        0
    // Totals...
    // yes simd       21       35        0
    //  no simd       45       64        0
    fn geometric_anti_product(self, other: Dipole) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (-(Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(self.group1()[1]) * other.group0())
                - (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group0(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group0(), 1, 2, 0))),
            // e415, e425, e435, e321
            ((Simd32x4::from([
                (self.group1()[0] * other.group2()[0]),
                (self.group1()[0] * other.group2()[1]),
                (self.group1()[0] * other.group2()[2]),
                (self.group1()[1] * other.group1()[3]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                - (Simd32x4::from([self.group1()[1], self.group1()[1], self.group1()[1], self.group0()[0]]) * swizzle!(other.group1(), 0, 1, 2, 0))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (swizzle!(other.group1(), 3, 3, 3, 2) * swizzle!(self.group0(), 0, 1, 2, 2))),
            // e235, e315, e125, e4
            (Simd32x4::from([
                (-(self.group1()[1] * other.group2()[0]) - (other.group2()[1] * self.group0()[2]) - (other.group1()[0] * self.group0()[3])),
                (-(self.group1()[1] * other.group2()[1]) - (other.group2()[2] * self.group0()[0]) - (other.group1()[1] * self.group0()[3])),
                (-(self.group1()[1] * other.group2()[2]) - (other.group2()[0] * self.group0()[1]) - (other.group1()[2] * self.group0()[3])),
                ((self.group1()[0] * other.group1()[3]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e1, e2, e3, e5
            (Simd32x4::from([
                ((self.group1()[0] * other.group2()[0]) + (other.group1()[2] * self.group0()[1])),
                ((self.group1()[0] * other.group2()[1]) + (other.group1()[0] * self.group0()[2])),
                ((self.group1()[0] * other.group2()[2]) + (other.group1()[1] * self.group0()[0])),
                (-(other.group2()[2] * self.group0()[2]) - (other.group1()[3] * self.group0()[3])),
            ]) - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[1]]) * swizzle!(self.group0(), 2, 0, 1, 1))),
        );
    }
}
impl GeometricAntiProduct<DipoleInversion> for VersorSphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       31        0
    //    simd4       15       16        0
    // Totals...
    // yes simd       29       47        0
    //  no simd       74       95        0
    fn geometric_anti_product(self, other: DipoleInversion) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                (-(self.group1()[1] * other.group0()[0]) - (other.group2()[3] * self.group0()[0])),
                (-(self.group1()[1] * other.group0()[1]) - (other.group2()[3] * self.group0()[1])),
                (-(self.group1()[1] * other.group0()[2]) - (other.group2()[3] * self.group0()[2])),
                (other.group3()[2] * self.group0()[2]),
            ]) - (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                + (Simd32x4::from([self.group1()[0], self.group1()[0], self.group1()[0], self.group0()[0]]) * swizzle!(other.group3(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[1]]) * swizzle!(self.group0(), 2, 0, 1, 1))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))),
            // e415, e425, e435, e321
            ((Simd32x4::from([
                (other.group3()[2] * self.group0()[1]),
                (other.group3()[0] * self.group0()[2]),
                (other.group3()[1] * self.group0()[0]),
                (self.group1()[1] * other.group1()[3]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                - (Simd32x4::from([self.group1()[0], self.group1()[0], self.group1()[0], self.group0()[3]]) * other.group2())
                - (Simd32x4::from([self.group1()[1], self.group1()[1], self.group1()[1], self.group0()[0]]) * swizzle!(other.group1(), 0, 1, 2, 0))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group3(), 1, 2, 0, 3))
                - (swizzle!(other.group1(), 3, 3, 3, 2) * swizzle!(self.group0(), 0, 1, 2, 2))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group2()[2] * self.group0()[1]) + (other.group3()[3] * self.group0()[0])),
                ((other.group2()[0] * self.group0()[2]) + (other.group3()[3] * self.group0()[1])),
                ((other.group2()[1] * self.group0()[0]) + (other.group3()[3] * self.group0()[2])),
                ((other.group2()[2] * self.group0()[2]) * -1.0),
            ]) - (Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                - (Simd32x4::from(self.group0()[3]) * other.group1())
                - (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (swizzle!(other.group2(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group1()[1] * other.group3()[0]) - (other.group0()[0] * self.group0()[3]) - (other.group1()[1] * self.group0()[2])),
                ((self.group1()[1] * other.group3()[1]) - (other.group0()[1] * self.group0()[3]) - (other.group1()[2] * self.group0()[0])),
                ((self.group1()[1] * other.group3()[2]) - (other.group0()[2] * self.group0()[3]) - (other.group1()[0] * self.group0()[1])),
                (-(self.group1()[1] * other.group2()[3]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<DualNum321> for VersorSphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        8        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        2       10        0
    //  no simd        2       16        0
    fn geometric_anti_product(self, other: DualNum321) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[1] * self.group1()[1])]),
            // e23, e31, e12, e45
            (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]) * Simd32x4::from(-1.0)),
            // e15, e25, e35, e1234
            Simd32x4::from([0.0, 0.0, 0.0, ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[0]))]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                (-(other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<DualNum4> for VersorSphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        9        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        2       10        0
    //  no simd        2       13        0
    fn geometric_anti_product(self, other: DualNum4) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group1()[1])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group0()[3] * -1.0)]),
            // e15, e25, e35, e1234
            Simd32x4::from([0.0, 0.0, 0.0, ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]))]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other.group0()[1]) * self.group0()),
        );
    }
}
impl GeometricAntiProduct<DualNum5> for VersorSphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2       12        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        2       13        0
    //  no simd        2       16        0
    fn geometric_anti_product(self, other: DualNum5) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[1]))]),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group1()[0])]),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                (other.group0()[1] * self.group1()[0]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<FlatPoint> for VersorSphere {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       12       24        0
    fn geometric_anti_product(self, other: FlatPoint) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group1()[0] * other.group0()[0]) - (other.group0()[3] * self.group0()[0])),
                (-(self.group1()[0] * other.group0()[1]) - (other.group0()[3] * self.group0()[1])),
                (-(self.group1()[0] * other.group0()[2]) - (other.group0()[3] * self.group0()[2])),
                (self.group1()[1] * other.group0()[3]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (-(self.group1()[1] * other.group0()[0]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                (-(self.group1()[1] * other.group0()[1]) + (other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                (-(self.group1()[1] * other.group0()[2]) - (other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
                (self.group1()[0] * other.group0()[3]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group1()[0] * other.group0()[0]),
                (self.group1()[0] * other.group0()[1]),
                (self.group1()[0] * other.group0()[2]),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group0()[3] * self.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Flector> for VersorSphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       32        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       20       36        0
    //  no simd       32       48        0
    fn geometric_anti_product(self, other: Flector) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group1()[0] * other.group1()[0]),
                (self.group1()[0] * other.group1()[1]),
                (self.group1()[0] * other.group1()[2]),
                (-(self.group1()[0] * other.group1()[3])
                    + (other.group1()[0] * self.group0()[0])
                    + (other.group1()[1] * self.group0()[1])
                    + (other.group1()[2] * self.group0()[2])),
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(self.group1()[0] * other.group0()[0]) - (other.group0()[3] * self.group0()[0]) - (other.group1()[2] * self.group0()[1])),
                (-(self.group1()[0] * other.group0()[1]) - (other.group0()[3] * self.group0()[1]) - (other.group1()[0] * self.group0()[2])),
                (-(self.group1()[0] * other.group0()[2]) - (other.group0()[3] * self.group0()[2]) - (other.group1()[1] * self.group0()[0])),
                (self.group1()[1] * other.group0()[3]),
            ]) + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group1(), 1, 2, 0, 3))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group0()[2] * self.group0()[1]) + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[2]) + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[1] * self.group0()[0]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self.group0()[3])),
            ]) - (Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * swizzle!(self.group0(), 2, 0, 1, 0))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group1()[0])),
                ((self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group1()[1])),
                ((self.group1()[0] * other.group0()[2]) + (self.group1()[1] * other.group1()[2])),
                (self.group1()[0] * other.group0()[3]),
            ]),
        );
    }
}
impl GeometricAntiProduct<Line> for VersorSphere {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       29        0
    //    simd3        0        1        0
    //    simd4        1        1        0
    // Totals...
    // yes simd       19       31        0
    //  no simd       22       36        0
    fn geometric_anti_product(self, other: Line) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group1()[0]) * other.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group1()[0] * other.group1()[0]) + (self.group1()[1] * other.group0()[0])),
                ((self.group1()[0] * other.group1()[1]) + (self.group1()[1] * other.group0()[1])),
                ((self.group1()[0] * other.group1()[2]) + (self.group1()[1] * other.group0()[2])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group1()[1] * other.group1()[0]) + (other.group0()[0] * self.group0()[3]) + (other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1])),
                ((self.group1()[1] * other.group1()[1]) + (other.group0()[1] * self.group0()[3]) - (other.group1()[0] * self.group0()[2]) + (other.group1()[2] * self.group0()[0])),
                ((self.group1()[1] * other.group1()[2]) + (other.group0()[2] * self.group0()[3]) + (other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group1()[0] * other.group1()[0]) - (other.group0()[1] * self.group0()[2])),
                ((self.group1()[0] * other.group1()[1]) - (other.group0()[2] * self.group0()[0])),
                ((self.group1()[0] * other.group1()[2]) - (other.group0()[0] * self.group0()[1])),
                ((other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<Motor> for VersorSphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       35        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       20       39        0
    //  no simd       32       51        0
    fn geometric_anti_product(self, other: Motor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group1()[0] * other.group0()[0]),
                (self.group1()[0] * other.group0()[1]),
                (self.group1()[0] * other.group0()[2]),
                ((self.group1()[0] * other.group1()[3]) + (self.group1()[1] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (self.group1()[1] * other.group0()[0]),
                (self.group1()[1] * other.group0()[1]),
                (self.group1()[1] * other.group0()[2]),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self.group1()[0]) * other.group1())),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group1()[1] * other.group1()[0]) + (other.group0()[0] * self.group0()[3]) + (other.group1()[1] * self.group0()[2])
                    - (other.group1()[2] * self.group0()[1])
                    - (other.group1()[3] * self.group0()[0])),
                ((self.group1()[1] * other.group1()[1]) + (other.group0()[1] * self.group0()[3]) - (other.group1()[0] * self.group0()[2]) + (other.group1()[2] * self.group0()[0])
                    - (other.group1()[3] * self.group0()[1])),
                ((self.group1()[1] * other.group1()[2]) + (other.group0()[2] * self.group0()[3]) + (other.group1()[0] * self.group0()[1])
                    - (other.group1()[1] * self.group0()[0])
                    - (other.group1()[3] * self.group0()[2])),
                (self.group1()[0] * other.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) * -1.0),
                ((other.group0()[2] * self.group0()[0]) * -1.0),
                ((other.group0()[0] * self.group0()[1]) * -1.0),
                ((other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
            ]) + (Simd32x4::from([self.group1()[0], self.group1()[0], self.group1()[0], self.group1()[1]]) * other.group1())
                + (Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other.group1()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))
                + (swizzle!(other.group0(), 2, 0, 1, 3) * swizzle!(self.group0(), 1, 2, 0, 3))),
        );
    }
}
impl GeometricAntiProduct<MultiVector> for VersorSphere {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       48       74        0
    //    simd2        3        3        0
    //    simd3       18       20        0
    //    simd4       13       13        0
    // Totals...
    // yes simd       82      110        0
    //  no simd      160      192        0
    fn geometric_anti_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from([
                ((other.group0()[1] * self.group1()[1]) + (self.group1()[0] * other[e1]) + (other.group1()[3] * self.group0()[3])),
                (-(other.group0()[0] * self.group1()[1]) - (self.group1()[0] * other.group9()[3]) - (self.group0()[3] * other[e45])),
            ]) + (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group1()[0], other.group9()[0]]))
                + (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group1()[1], other.group9()[1]]))
                + (Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group1()[2], other.group9()[2]]))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group1()[1] * other.group9()[0]) - (other.group4()[0] * self.group0()[3]) - (other.group5()[1] * self.group0()[2])),
                ((self.group1()[1] * other.group9()[1]) - (other.group4()[1] * self.group0()[3]) - (other.group5()[2] * self.group0()[0])),
                ((self.group1()[1] * other.group9()[2]) - (other.group4()[2] * self.group0()[3]) - (other.group5()[0] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[0]) - (self.group1()[1] * other[e45]) + (other.group4()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self.group1()[0]) * other.group3())
                + (Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group4()[0]]) * swizzle!(self.group0(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group4()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))),
            // e5
            (-(other.group0()[0] * self.group0()[3])
                - (self.group1()[1] * other.group9()[3])
                - (other.group3()[0] * self.group0()[0])
                - (other.group3()[1] * self.group0()[1])
                - (other.group3()[2] * self.group0()[2])
                - (other.group3()[3] * self.group0()[3])),
            // e15, e25, e35, e45
            (Simd32x4::from([
                ((self.group1()[1] * other.group8()[0]) + (other.group8()[1] * self.group0()[2]) + (other.group6()[0] * self.group0()[3])),
                ((self.group1()[1] * other.group8()[1]) + (other.group8()[2] * self.group0()[0]) + (other.group6()[1] * self.group0()[3])),
                ((self.group1()[1] * other.group8()[2]) + (other.group8()[0] * self.group0()[1]) + (other.group6()[2] * self.group0()[3])),
                ((self.group1()[0] * other[e1]) - (self.group1()[1] * other.group6()[3]) - (other.group6()[2] * self.group0()[2])),
            ]) - (Simd32x4::from([other.group8()[2], other.group8()[0], other.group8()[1], other.group1()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                - (Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group6()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other[e1], other[e1], other[e1], other.group6()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))),
            // e41, e42, e43
            ((Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                + (Simd32x3::from(self.group1()[1]) * other.group7())
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group7(), 2, 0, 1))
                - (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group7(), 1, 2, 0))),
            // e23, e31, e12
            (Simd32x3::from([
                ((other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1])),
                (-(other.group1()[0] * self.group0()[2]) + (other.group1()[2] * self.group0()[0])),
                ((other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0])),
            ]) + (Simd32x3::from(self.group1()[0]) * other.group8())
                + (Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group6()[0], other.group6()[1], other.group6()[2]]))
                - (Simd32x3::from(other.group6()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self.group0()[3]) * other.group7())),
            // e415, e425, e435, e321
            (Simd32x4::from([
                (-(self.group1()[0] * other.group3()[0]) - (self.group1()[1] * other.group5()[0])),
                (-(self.group1()[0] * other.group3()[1]) - (self.group1()[1] * other.group5()[1])),
                (-(self.group1()[0] * other.group3()[2]) - (self.group1()[1] * other.group5()[2])),
                ((self.group1()[1] * other.group3()[3]) - (self.group0()[3] * other[e45])),
            ]) - (Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[2], other.group5()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))
                - (Simd32x4::from([other.group3()[3], other.group3()[3], other.group3()[3], other.group5()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))
                - (Simd32x4::from([other.group9()[2], other.group9()[0], other.group9()[1], other.group5()[2]]) * swizzle!(self.group0(), 1, 2, 0, 2))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group9(), 1, 2, 0, 3))),
            // e423, e431, e412
            ((Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                - (Simd32x3::from(self.group1()[0]) * other.group5())
                - (Simd32x3::from(self.group1()[1]) * other.group4())
                - (Simd32x3::from(other[e45]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * swizzle!(other.group4(), 2, 0, 1))
                + (Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * swizzle!(other.group4(), 1, 2, 0))),
            // e235, e315, e125
            (Simd32x3::from([
                (-(other.group3()[1] * self.group0()[2]) + (other.group3()[2] * self.group0()[1])),
                ((other.group3()[0] * self.group0()[2]) - (other.group3()[2] * self.group0()[0])),
                (-(other.group3()[0] * self.group0()[1]) + (other.group3()[1] * self.group0()[0])),
            ]) - (Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from(other.group9()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]))
                - (Simd32x3::from(self.group0()[3]) * other.group5())),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                ((self.group1()[0] * other.group8()[0]) - (self.group1()[1] * other.group1()[0]) - (other.group6()[1] * self.group0()[2])),
                ((self.group1()[0] * other.group8()[1]) - (self.group1()[1] * other.group1()[1]) - (other.group6()[2] * self.group0()[0])),
                ((self.group1()[0] * other.group8()[2]) - (self.group1()[1] * other.group1()[2]) - (other.group6()[0] * self.group0()[1])),
                ((self.group1()[1] * other[e1]) + (other.group8()[1] * self.group0()[1]) + (other.group8()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(other.group0()[1]) * self.group0())
                - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group6()[3]]))
                + (Simd32x4::from([other.group6()[2], other.group6()[0], other.group6()[1], other.group8()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e1234
            ((other.group0()[1] * self.group1()[0]) + (self.group1()[0] * other.group6()[3]) + (self.group1()[1] * other.group1()[3])
                - (other.group7()[0] * self.group0()[0])
                - (other.group7()[1] * self.group0()[1])
                - (other.group7()[2] * self.group0()[2])),
        );
    }
}
impl GeometricAntiProduct<Plane> for VersorSphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        9       25        0
    fn geometric_anti_product(self, other: Plane) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group1()[0] * other.group0()[0]),
                (self.group1()[0] * other.group0()[1]),
                (self.group1()[0] * other.group0()[2]),
                (-(self.group1()[0] * other.group0()[3])
                    + (other.group0()[0] * self.group0()[0])
                    + (other.group0()[1] * self.group0()[1])
                    + (other.group0()[2] * self.group0()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
                (self.group1()[0] * other.group0()[3]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) + (other.group0()[3] * self.group0()[0])),
                (-(other.group0()[1] * self.group0()[3]) + (other.group0()[3] * self.group0()[1])),
                (-(other.group0()[2] * self.group0()[3]) + (other.group0()[3] * self.group0()[2])),
                (self.group1()[1] * other.group0()[3] * -1.0),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group1()[1] * other.group0()[0]),
                (self.group1()[1] * other.group0()[1]),
                (self.group1()[1] * other.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<QuadNum> for VersorSphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       30        0
    fn geometric_anti_product(self, other: QuadNum) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                ((self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[3]) + (other.group0()[0] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other.group0()[2] * self.group0()[0] * -1.0),
                (other.group0()[2] * self.group0()[1] * -1.0),
                (other.group0()[2] * self.group0()[2] * -1.0),
                ((self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[2]) - (other.group0()[0] * self.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0] * -1.0),
                (other.group0()[1] * self.group0()[1] * -1.0),
                (other.group0()[1] * self.group0()[2] * -1.0),
                ((self.group1()[0] * other.group0()[2]) + (self.group1()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[0])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[3] * self.group0()[0]),
                (other.group0()[3] * self.group0()[1]),
                (other.group0()[3] * self.group0()[2]),
                ((self.group1()[1] * other.group0()[1]) - (other.group0()[2] * self.group0()[3]) + (other.group0()[3] * self.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<RoundPoint> for VersorSphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       14        0
    //    simd4        3        5        0
    // Totals...
    // yes simd        8       19        0
    //  no simd       17       34        0
    fn geometric_anti_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) + (other.group0()[3] * self.group0()[3])),
            ]) + (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other[e2]]))
                + (swizzle!(other.group0(), 3, 3, 3, 0) * swizzle!(self.group0(), 0, 1, 2, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (other.group0()[1] * self.group0()[2]),
                (other.group0()[2] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (self.group1()[0] * other[e2]),
            ]) - (swizzle!(other.group0(), 2, 0, 1, 3) * swizzle!(self.group0(), 1, 2, 0, 3))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (self.group0()[0] * other[e2])),
                (-(other.group0()[1] * self.group0()[3]) - (self.group0()[1] * other[e2])),
                (-(other.group0()[2] * self.group0()[3]) - (self.group0()[2] * other[e2])),
                (self.group1()[1] * other.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other[e2]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
    }
}
impl GeometricAntiProduct<Scalar> for VersorSphere {
    type Output = VersorRoundPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd2        0        2        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0       12        0
    fn geometric_anti_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return VersorRoundPoint::from_groups(
            // e1, e2, e3, e4
            (Simd32x4::from(other[scalar]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e5, e12345
            (Simd32x2::from(other[scalar]) * Simd32x2::from([self.group0()[3], self.group1()[1]]) * Simd32x2::from(-1.0)),
        );
    }
}
impl GeometricAntiProduct<Sphere> for VersorSphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       11        0
    //    simd4        3        6        0
    // Totals...
    // yes simd        8       17        0
    //  no simd       17       35        0
    fn geometric_anti_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group1()[0] * other.group0()[3]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(other[e4315]) * self.group0())
                + (Simd32x4::from([self.group1()[0], self.group1()[0], self.group1()[0], self.group0()[0]]) * swizzle!(other.group0(), 0, 1, 2, 0))),
            // e415, e425, e435, e321
            (-(Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other[e4315]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 3))),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) + (other.group0()[3] * self.group0()[0])),
                (-(other.group0()[1] * self.group0()[3]) + (other.group0()[3] * self.group0()[1])),
                (-(other.group0()[2] * self.group0()[3]) + (other.group0()[3] * self.group0()[2])),
                (self.group1()[1] * other.group0()[3] * -1.0),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other[e4315]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
    }
}
impl GeometricAntiProduct<TripleNum> for VersorSphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        5       21        0
    fn geometric_anti_product(self, other: TripleNum) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                ((self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[2]) + (other.group0()[0] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, ((self.group1()[0] * other.group0()[1]) - (other.group0()[0] * self.group0()[3]))]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0] * -1.0),
                (other.group0()[1] * self.group0()[1] * -1.0),
                (other.group0()[1] * self.group0()[2] * -1.0),
                ((self.group1()[0] * other.group0()[2]) + (self.group1()[1] * other.group0()[0])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[2] * self.group0()[0]),
                (other.group0()[2] * self.group0()[1]),
                (other.group0()[2] * self.group0()[2]),
                ((self.group1()[1] * other.group0()[1]) + (other.group0()[2] * self.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorEven> for VersorSphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       24        0
    //    simd4       17       19        0
    // Totals...
    // yes simd       29       43        0
    //  no simd       80      100        0
    fn geometric_anti_product(self, other: VersorEven) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[3]])
                * swizzle!(self.group0(), 2, 0, 1, 3)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                + (Simd32x4::from(self.group1()[1]) * other.group0())
                + (Simd32x4::from([self.group1()[0], self.group1()[0], self.group1()[0], self.group0()[0]]) * swizzle!(other.group3(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group3()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))
                + (swizzle!(other.group3(), 3, 3, 3, 2) * swizzle!(self.group0(), 0, 1, 2, 2))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                ((self.group1()[1] * other.group1()[0]) + (other.group0()[0] * self.group0()[3]) + (other.group3()[1] * self.group0()[2])),
                ((self.group1()[1] * other.group1()[1]) + (other.group0()[1] * self.group0()[3]) + (other.group3()[2] * self.group0()[0])),
                ((self.group1()[1] * other.group1()[2]) + (other.group0()[2] * self.group0()[3]) + (other.group3()[0] * self.group0()[1])),
                (-(other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2]) - (other.group3()[3] * self.group0()[3])),
            ]) + (Simd32x4::from(self.group1()[0]) * other.group2())
                - (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]))
                - (Simd32x4::from([other.group3()[2], other.group3()[0], other.group3()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (other.group2()[1] * self.group0()[2]),
                (other.group2()[2] * self.group0()[0]),
                (other.group2()[0] * self.group0()[1]),
                (self.group1()[0] * other.group0()[3]),
            ]) + (Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                - (Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))
                - (Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group0()[1]]) * swizzle!(self.group0(), 0, 1, 2, 1))
                - (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group0()[2]]) * swizzle!(self.group0(), 3, 3, 3, 2))
                + (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group1()[0]]) * other.group1())),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (-(self.group1()[1] * other.group3()[0]) - (other.group1()[1] * self.group0()[2])),
                (-(self.group1()[1] * other.group3()[1]) - (other.group1()[2] * self.group0()[0])),
                (-(self.group1()[1] * other.group3()[2]) - (other.group1()[0] * self.group0()[1])),
                ((other.group2()[1] * self.group0()[1]) + (other.group2()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(other.group0()[3]) * self.group0())
                - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from([self.group1()[0], self.group1()[0], self.group1()[0], self.group1()[1]]) * other.group2())
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[0]]) * swizzle!(self.group0(), 1, 2, 0, 0))),
        );
    }
}
impl GeometricAntiProduct<VersorOdd> for VersorSphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       20        0
    //    simd4       18       21        0
    // Totals...
    // yes simd       26       41        0
    //  no simd       80      104        0
    fn geometric_anti_product(self, other: VersorOdd) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[3], other.group3()[2]])
                * swizzle!(self.group0(), 0, 1, 2, 2)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                - (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                - (Simd32x4::from(self.group1()[1]) * other.group0())
                + (Simd32x4::from([self.group1()[0], self.group1()[0], self.group1()[0], self.group0()[0]]) * swizzle!(other.group3(), 0, 1, 2, 0))
                + (Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[1]]) * swizzle!(self.group0(), 2, 0, 1, 1))
                - (Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]) * swizzle!(self.group0(), 1, 2, 0, 3))),
            // e415, e425, e435, e321
            ((Simd32x4::from([
                (other.group3()[2] * self.group0()[1]),
                (other.group3()[0] * self.group0()[2]),
                (other.group3()[1] * self.group0()[0]),
                (self.group1()[1] * other.group1()[3]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                - (Simd32x4::from([self.group1()[0], self.group1()[0], self.group1()[0], self.group0()[3]]) * other.group2())
                - (Simd32x4::from([self.group1()[1], self.group1()[1], self.group1()[1], self.group0()[0]]) * swizzle!(other.group1(), 0, 1, 2, 0))
                - (Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]]) * swizzle!(self.group0(), 3, 3, 3, 1))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group3(), 1, 2, 0, 3))
                - (swizzle!(other.group1(), 3, 3, 3, 2) * swizzle!(self.group0(), 0, 1, 2, 2))),
            // e235, e315, e125, e5
            (Simd32x4::from([
                ((other.group2()[2] * self.group0()[1]) + (other.group3()[3] * self.group0()[0])),
                ((other.group2()[0] * self.group0()[2]) + (other.group3()[3] * self.group0()[1])),
                ((other.group2()[1] * self.group0()[0]) + (other.group3()[3] * self.group0()[2])),
                (-(other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                - (Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]) * swizzle!(self.group0(), 2, 0, 1, 3))
                - (Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[0]]) * swizzle!(self.group0(), 3, 3, 3, 0))),
            // e1, e2, e3, e4
            (Simd32x4::from([
                ((self.group1()[1] * other.group3()[0]) - (other.group1()[1] * self.group0()[2])),
                ((self.group1()[1] * other.group3()[1]) - (other.group1()[2] * self.group0()[0])),
                ((self.group1()[1] * other.group3()[2]) - (other.group1()[0] * self.group0()[1])),
                (-(self.group1()[1] * other.group2()[3]) + (other.group0()[2] * self.group0()[2])),
            ]) + (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))
                + (Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[1]]) * swizzle!(self.group0(), 1, 2, 0, 1))
                - (Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group1()[0]]) * other.group0())
                + (swizzle!(other.group0(), 3, 3, 3, 0) * swizzle!(self.group0(), 0, 1, 2, 0))),
        );
    }
}
impl GeometricAntiProduct<VersorRoundPoint> for VersorSphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       16        0
    //    simd4        4        6        0
    // Totals...
    // yes simd       11       22        0
    //  no simd       23       40        0
    fn geometric_anti_product(self, other: VersorRoundPoint) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                ((other.group1()[1] * self.group1()[1]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) + (other.group0()[3] * self.group0()[3])),
            ]) + (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]))
                + (swizzle!(other.group0(), 3, 3, 3, 0) * swizzle!(self.group0(), 0, 1, 2, 0))),
            // e23, e31, e12, e45
            (Simd32x4::from([
                (other.group0()[1] * self.group0()[2]),
                (other.group0()[2] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group1()[0] * self.group1()[0]),
            ]) - (swizzle!(other.group0(), 2, 0, 1, 3) * swizzle!(self.group0(), 1, 2, 0, 3))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group1()[0] * self.group0()[0]) - (other.group0()[0] * self.group0()[3])),
                (-(other.group1()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[3])),
                (-(other.group1()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[3])),
                ((other.group1()[1] * self.group1()[0]) + (self.group1()[1] * other.group0()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(self.group1()[1])
                * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]])
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))
                + (Simd32x4::from(other.group1()[1]) * self.group0())),
        );
    }
}
impl GeometricAntiProduct<VersorSphere> for VersorSphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       12        0
    //    simd4        4        7        0
    // Totals...
    // yes simd       11       19        0
    //  no simd       23       40        0
    fn geometric_anti_product(self, other: VersorSphere) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(other.group1()[1] * self.group1()[1]) - (self.group1()[0] * other.group0()[3])
                    + (other.group0()[1] * self.group0()[1])
                    + (other.group0()[2] * self.group0()[2])),
            ]) - (Simd32x4::from(other.group1()[0]) * self.group0())
                + (Simd32x4::from([self.group1()[0], self.group1()[0], self.group1()[0], self.group0()[0]]) * swizzle!(other.group0(), 0, 1, 2, 0))),
            // e415, e425, e435, e321
            (-(Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]) * swizzle!(self.group0(), 1, 2, 0, 3))
                + (Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]) * swizzle!(other.group0(), 1, 2, 0, 3))),
            // e235, e315, e125, e5
            ((Simd32x4::from(other.group0()[3])
                * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
                - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group1()[1] * self.group0()[0]) + (self.group1()[1] * other.group0()[0])),
                ((other.group1()[1] * self.group0()[1]) + (self.group1()[1] * other.group0()[1])),
                ((other.group1()[1] * self.group0()[2]) + (self.group1()[1] * other.group0()[2])),
                (-(other.group1()[0] * self.group1()[1]) - (other.group1()[1] * self.group1()[0])),
            ]),
        );
    }
}
