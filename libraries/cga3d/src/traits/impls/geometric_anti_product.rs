// Note on Operative Statistics:
// Operative Statistics are not a precise predictor of performance or performance comparisons.
// This is due to varying hardware capabilities and compiler optimizations.
// As always, where performance is a concern, there is no substitute for
// real measurements on real work-loads on real hardware.
// Disclaimer aside, enjoy the fun information =)
//
// Total Implementations: 625
//
// Yes SIMD:   add/sub     mul     div
//  Minimum:         0       1       0
//   Median:        28      43       0
//  Average:        56      71       0
//  Maximum:       992    1024       0
//
//  No SIMD:   add/sub     mul     div
//  Minimum:         0       1       0
//   Median:        28      43       0
//  Average:        56      71       0
//  Maximum:       992    1024       0
impl InfixGeometricAntiProduct for AntiCircleRotor {}
impl GeometricAntiProduct<AntiCircleRotor> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      105      121        0
    fn geometric_anti_product(self, other: AntiCircleRotor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[0] * self.group2()[3]) + (other.group0()[1] * self.group1()[2])
                    - (other.group0()[2] * self.group1()[1])
                    + (self.group0()[0] * other.group1()[3])
                    - (self.group0()[0] * other.group2()[3])
                    - (self.group0()[1] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[1])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group1()[3]) - (other.group0()[1] * self.group2()[3])
                    + (other.group0()[2] * self.group1()[0])
                    + (self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group1()[3])
                    - (self.group0()[1] * other.group2()[3])
                    - (self.group0()[2] * other.group1()[0])),
                ((other.group0()[0] * self.group1()[1])
                    - (other.group0()[1] * self.group1()[0])
                    - (other.group0()[2] * self.group1()[3])
                    - (other.group0()[2] * self.group2()[3])
                    - (self.group0()[0] * other.group1()[1])
                    + (self.group0()[1] * other.group1()[0])
                    + (self.group0()[2] * other.group1()[3])
                    - (self.group0()[2] * other.group2()[3])),
                ((other.group0()[0] * self.group2()[0])
                    + (other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])
                    + (self.group0()[0] * other.group2()[0])
                    + (self.group0()[1] * other.group2()[1])
                    + (self.group0()[2] * other.group2()[2])
                    + (other.group1()[0] * self.group1()[0])
                    + (other.group1()[1] * self.group1()[1])
                    + (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])
                    - (other.group2()[3] * self.group2()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1]) - (self.group0()[1] * other.group2()[2]) + (self.group0()[2] * other.group2()[1])
                    - (other.group1()[0] * self.group2()[3])
                    + (other.group1()[1] * self.group1()[2])
                    - (other.group1()[2] * self.group1()[1])
                    - (other.group2()[3] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group0()[2] * self.group2()[0]) + (self.group0()[0] * other.group2()[2])
                    - (self.group0()[2] * other.group2()[0])
                    - (other.group1()[0] * self.group1()[2])
                    - (other.group1()[1] * self.group2()[3])
                    + (other.group1()[2] * self.group1()[0])
                    - (other.group2()[3] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) - (self.group0()[0] * other.group2()[1])
                    + (self.group0()[1] * other.group2()[0])
                    + (other.group1()[0] * self.group1()[1])
                    - (other.group1()[1] * self.group1()[0])
                    - (other.group1()[2] * self.group2()[3])
                    - (other.group2()[3] * self.group1()[2])),
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    + (other.group1()[3] * self.group2()[3])
                    + (other.group2()[3] * self.group1()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((other.group1()[1] * self.group2()[2]) - (other.group1()[2] * self.group2()[1]) - (other.group1()[3] * self.group2()[0]) + (other.group2()[0] * self.group1()[3])
                    - (other.group2()[0] * self.group2()[3])
                    + (other.group2()[1] * self.group1()[2])
                    - (other.group2()[2] * self.group1()[1])
                    - (other.group2()[3] * self.group2()[0])),
                (-(other.group1()[0] * self.group2()[2]) + (other.group1()[2] * self.group2()[0])
                    - (other.group1()[3] * self.group2()[1])
                    - (other.group2()[0] * self.group1()[2])
                    + (other.group2()[1] * self.group1()[3])
                    - (other.group2()[1] * self.group2()[3])
                    + (other.group2()[2] * self.group1()[0])
                    - (other.group2()[3] * self.group2()[1])),
                ((other.group1()[0] * self.group2()[1]) - (other.group1()[1] * self.group2()[0]) - (other.group1()[3] * self.group2()[2]) + (other.group2()[0] * self.group1()[1])
                    - (other.group2()[1] * self.group1()[0])
                    + (other.group2()[2] * self.group1()[3])
                    - (other.group2()[2] * self.group2()[3])
                    - (other.group2()[3] * self.group2()[2])),
                ((other.group1()[0] * self.group2()[0])
                    + (other.group1()[1] * self.group2()[1])
                    + (other.group1()[2] * self.group2()[2])
                    + (other.group2()[0] * self.group1()[0])
                    + (other.group2()[1] * self.group1()[1])
                    + (other.group2()[2] * self.group1()[2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1]) + (self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group0()[2] * self.group2()[0]) - (self.group0()[0] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[0])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) + (self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])),
                ((other.group0()[0] * self.group1()[0])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[2])
                    + (self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDipoleInversion> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      149      165        0
    fn geometric_anti_product(self, other: AntiDipoleInversion) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) + (self.group0()[1] * other.group3()[2])
                    - (self.group0()[2] * other.group1()[1])
                    - (self.group0()[2] * other.group3()[1])
                    + (other.group0()[0] * self.group1()[3])
                    + (other.group0()[0] * self.group2()[3])
                    - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (self.group1()[0] * other.group2()[3])),
                (-(self.group0()[0] * other.group1()[2]) - (self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group0()[2] * other.group3()[0])
                    + (other.group0()[0] * self.group1()[2])
                    + (other.group0()[1] * self.group1()[3])
                    + (other.group0()[1] * self.group2()[3])
                    - (other.group0()[2] * self.group1()[0])
                    + (self.group1()[1] * other.group2()[3])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group1()[0]) - (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group1()[3])
                    - (other.group0()[0] * self.group1()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (other.group0()[2] * self.group2()[3])
                    + (self.group1()[2] * other.group2()[3])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1]) - (other.group0()[1] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[1])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])
                    - (self.group1()[3] * other.group3()[0])
                    + (self.group2()[0] * other.group2()[3])
                    + (self.group2()[3] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[2])
                    + (self.group0()[1] * other.group3()[3])
                    + (self.group0()[2] * other.group2()[0])
                    + (other.group0()[0] * self.group2()[2])
                    - (other.group0()[2] * self.group2()[0])
                    - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[2] * other.group1()[0])
                    - (self.group1()[3] * other.group3()[1])
                    + (self.group2()[1] * other.group2()[3])
                    + (self.group2()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) + (self.group0()[2] * other.group3()[3]) - (other.group0()[0] * self.group2()[1])
                    + (other.group0()[1] * self.group2()[0])
                    + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[0])
                    - (self.group1()[3] * other.group3()[2])
                    + (self.group2()[2] * other.group2()[3])
                    + (self.group2()[3] * other.group1()[2])),
                (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])
                    + (other.group0()[0] * self.group2()[0])
                    + (other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])
                    + (self.group1()[0] * other.group3()[0])
                    + (self.group1()[1] * other.group3()[1])
                    + (self.group1()[2] * other.group3()[2])
                    - (self.group2()[3] * other.group1()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group1()[0] * other.group3()[3]) + (self.group1()[1] * other.group2()[2])
                    - (self.group1()[2] * other.group2()[1])
                    - (self.group1()[3] * other.group2()[0])
                    - (self.group2()[0] * other.group1()[3])
                    + (self.group2()[1] * other.group1()[2])
                    - (self.group2()[1] * other.group3()[2])
                    - (self.group2()[2] * other.group1()[1])
                    + (self.group2()[2] * other.group3()[1])
                    + (self.group2()[3] * other.group2()[0])),
                (-(self.group1()[0] * other.group2()[2]) + (self.group1()[1] * other.group3()[3]) + (self.group1()[2] * other.group2()[0])
                    - (self.group1()[3] * other.group2()[1])
                    - (self.group2()[0] * other.group1()[2])
                    + (self.group2()[0] * other.group3()[2])
                    - (self.group2()[1] * other.group1()[3])
                    + (self.group2()[2] * other.group1()[0])
                    - (self.group2()[2] * other.group3()[0])
                    + (self.group2()[3] * other.group2()[1])),
                ((self.group1()[0] * other.group2()[1]) - (self.group1()[1] * other.group2()[0]) + (self.group1()[2] * other.group3()[3]) - (self.group1()[3] * other.group2()[2])
                    + (self.group2()[0] * other.group1()[1])
                    - (self.group2()[0] * other.group3()[1])
                    - (self.group2()[1] * other.group1()[0])
                    + (self.group2()[1] * other.group3()[0])
                    - (self.group2()[2] * other.group1()[3])
                    + (self.group2()[3] * other.group2()[2])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[0] * other.group3()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])
                    - (other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    + (self.group1()[3] * other.group2()[3])
                    + (self.group2()[3] * other.group2()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1]) + (other.group0()[1] * self.group2()[2])
                    - (other.group0()[2] * self.group2()[1])
                    - (self.group1()[0] * other.group1()[3])
                    - (self.group1()[1] * other.group3()[2])
                    + (self.group1()[2] * other.group3()[1])
                    + (self.group1()[3] * other.group1()[0])
                    - (self.group2()[0] * other.group2()[3])
                    - (self.group2()[3] * other.group3()[0])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group3()[3]) + (self.group0()[2] * other.group2()[0])
                    - (other.group0()[0] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[0])
                    + (self.group1()[0] * other.group3()[2])
                    - (self.group1()[1] * other.group1()[3])
                    - (self.group1()[2] * other.group3()[0])
                    + (self.group1()[3] * other.group1()[1])
                    - (self.group2()[1] * other.group2()[3])
                    - (self.group2()[3] * other.group3()[1])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) + (self.group0()[2] * other.group3()[3]) + (other.group0()[0] * self.group2()[1])
                    - (other.group0()[1] * self.group2()[0])
                    - (self.group1()[0] * other.group3()[1])
                    + (self.group1()[1] * other.group3()[0])
                    - (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])
                    - (self.group2()[2] * other.group2()[3])
                    - (self.group2()[3] * other.group3()[2])),
                (-(self.group1()[0] * other.group2()[0])
                    - (self.group1()[1] * other.group2()[1])
                    - (self.group1()[2] * other.group2()[2])
                    - (self.group1()[3] * other.group3()[3])
                    - (self.group2()[0] * other.group1()[0])
                    + (self.group2()[0] * other.group3()[0])
                    - (self.group2()[1] * other.group1()[1])
                    + (self.group2()[1] * other.group3()[1])
                    - (self.group2()[2] * other.group1()[2])
                    + (self.group2()[2] * other.group3()[2])
                    + (self.group2()[3] * other.group3()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        7       29        0
    fn geometric_anti_product(self, other: AntiDualNum) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group0()[2])),
                (other.group0()[1] * self.group2()[3] * -1.0),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group2()[0]) - (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other.group0()[1] * self.group2()[0] * -1.0),
                (other.group0()[1] * self.group2()[1] * -1.0),
                (other.group0()[1] * self.group2()[2] * -1.0),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[0] * self.group2()[0] * -1.0),
                (other.group0()[0] * self.group2()[1] * -1.0),
                (other.group0()[0] * self.group2()[2] * -1.0),
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[0] * self.group2()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiFlatPoint> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       29       44        0
    fn geometric_anti_product(self, other: AntiFlatPoint) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group2()[3] * other.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1]) - (self.group1()[3] * other.group0()[0]) - (self.group2()[0] * other.group0()[3])
                    + (self.group2()[3] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0])
                    - (self.group1()[3] * other.group0()[1])
                    - (self.group2()[1] * other.group0()[3])
                    + (self.group2()[3] * other.group0()[1])),
                ((self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0]) - (self.group1()[3] * other.group0()[2]) - (self.group2()[2] * other.group0()[3])
                    + (self.group2()[3] * other.group0()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) - (self.group1()[0] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0]) - (self.group1()[1] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) - (self.group1()[2] * other.group0()[3])),
                (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiFlector> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       72       88        0
    fn geometric_anti_product(self, other: AntiFlector) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[3]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) - (self.group1()[3] * other.group1()[0])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group0()[0])
                    - (self.group1()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group1()[3]) - (self.group1()[3] * other.group1()[2])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group1()[0] * other.group1()[0])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[2] * other.group1()[2])
                    - (self.group2()[3] * other.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group1()[0] * other.group1()[3]) + (self.group1()[1] * other.group0()[2])
                    - (self.group1()[2] * other.group0()[1])
                    - (self.group1()[3] * other.group0()[0])
                    - (self.group2()[0] * other.group0()[3])
                    - (self.group2()[1] * other.group1()[2])
                    + (self.group2()[2] * other.group1()[1])
                    + (self.group2()[3] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[2]) + (self.group1()[1] * other.group1()[3]) + (self.group1()[2] * other.group0()[0])
                    - (self.group1()[3] * other.group0()[1])
                    + (self.group2()[0] * other.group1()[2])
                    - (self.group2()[1] * other.group0()[3])
                    - (self.group2()[2] * other.group1()[0])
                    + (self.group2()[3] * other.group0()[1])),
                ((self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0]) + (self.group1()[2] * other.group1()[3])
                    - (self.group1()[3] * other.group0()[2])
                    - (self.group2()[0] * other.group1()[1])
                    + (self.group2()[1] * other.group1()[0])
                    - (self.group2()[2] * other.group0()[3])
                    + (self.group2()[3] * other.group0()[2])),
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[2])
                    - (self.group0()[2] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[3])
                    - (self.group1()[1] * other.group1()[2])
                    + (self.group1()[2] * other.group1()[1])
                    - (self.group2()[3] * other.group1()[0])),
                (-(self.group0()[0] * other.group0()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group0()[0])
                    + (self.group1()[0] * other.group1()[2])
                    - (self.group1()[1] * other.group0()[3])
                    - (self.group1()[2] * other.group1()[0])
                    - (self.group2()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group1()[3]) - (self.group1()[0] * other.group1()[1])
                    + (self.group1()[1] * other.group1()[0])
                    - (self.group1()[2] * other.group0()[3])
                    - (self.group2()[3] * other.group1()[2])),
                (-(self.group1()[0] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group1()[3])
                    + (self.group2()[0] * other.group1()[0])
                    + (self.group2()[1] * other.group1()[1])
                    + (self.group2()[2] * other.group1()[2])
                    + (self.group2()[3] * other.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiLine> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       50       66        0
    fn geometric_anti_product(self, other: AntiLine) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[2])
                    + (other.group0()[0] * self.group1()[0])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1]) - (other.group0()[0] * self.group2()[3])
                    + (other.group0()[1] * self.group1()[2])
                    - (other.group0()[2] * self.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0]) - (other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group2()[3])
                    + (other.group0()[2] * self.group1()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) + (other.group0()[0] * self.group1()[1])
                    - (other.group0()[1] * self.group1()[0])
                    - (other.group0()[2] * self.group2()[3])),
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1]) + (other.group1()[0] * self.group1()[3]) - (other.group1()[0] * self.group2()[3])
                    + (other.group1()[1] * self.group1()[2])
                    - (other.group1()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group0()[2] * self.group2()[0]) - (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group1()[3])
                    - (other.group1()[1] * self.group2()[3])
                    + (other.group1()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) + (other.group1()[0] * self.group1()[1]) - (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group1()[3])
                    - (other.group1()[2] * self.group2()[3])),
                ((other.group0()[0] * self.group2()[0])
                    + (other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])
                    + (other.group1()[0] * self.group1()[0])
                    + (other.group1()[1] * self.group1()[1])
                    + (other.group1()[2] * self.group1()[2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) + (other.group0()[0] * self.group1()[3])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0]) + (other.group0()[1] * self.group1()[3])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (other.group0()[2] * self.group1()[3])),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiMotor> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       72       88        0
    fn geometric_anti_product(self, other: AntiMotor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group0()[3]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group0()[3])),
                ((self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[2])
                    + (self.group1()[0] * other.group0()[0])
                    + (self.group1()[1] * other.group0()[1])
                    + (self.group1()[2] * other.group0()[2])
                    - (self.group2()[3] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])
                    - (self.group1()[0] * other.group0()[3])
                    - (self.group1()[1] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[1])
                    - (self.group2()[3] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group1()[0]) + (self.group1()[0] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[3])
                    - (self.group1()[2] * other.group0()[0])
                    - (self.group2()[3] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])
                    - (self.group0()[2] * other.group1()[3])
                    - (self.group1()[0] * other.group0()[1])
                    + (self.group1()[1] * other.group0()[0])
                    - (self.group1()[2] * other.group0()[3])
                    - (self.group2()[3] * other.group0()[2])),
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])
                    + (self.group1()[3] * other.group0()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group1()[0] * other.group1()[3]) - (self.group1()[1] * other.group1()[2])
                    + (self.group1()[2] * other.group1()[1])
                    + (self.group1()[3] * other.group1()[0])
                    - (self.group2()[0] * other.group0()[3])
                    - (self.group2()[1] * other.group0()[2])
                    + (self.group2()[2] * other.group0()[1])
                    - (self.group2()[3] * other.group1()[0])),
                ((self.group1()[0] * other.group1()[2]) - (self.group1()[1] * other.group1()[3]) - (self.group1()[2] * other.group1()[0])
                    + (self.group1()[3] * other.group1()[1])
                    + (self.group2()[0] * other.group0()[2])
                    - (self.group2()[1] * other.group0()[3])
                    - (self.group2()[2] * other.group0()[0])
                    - (self.group2()[3] * other.group1()[1])),
                (-(self.group1()[0] * other.group1()[1]) + (self.group1()[1] * other.group1()[0]) - (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])
                    - (self.group2()[0] * other.group0()[1])
                    + (self.group2()[1] * other.group0()[0])
                    - (self.group2()[2] * other.group0()[3])
                    - (self.group2()[3] * other.group1()[2])),
                ((self.group1()[0] * other.group1()[0])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[2] * other.group1()[2])
                    + (self.group1()[3] * other.group1()[3])
                    + (self.group2()[0] * other.group0()[0])
                    + (self.group2()[1] * other.group0()[1])
                    + (self.group2()[2] * other.group0()[2])
                    - (self.group2()[3] * other.group1()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) + (self.group1()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[3]) + (self.group1()[3] * other.group0()[2])),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiPlane> for AntiCircleRotor {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       29       44        0
    fn geometric_anti_product(self, other: AntiPlane) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group1()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) - (self.group1()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) - (self.group1()[3] * other.group0()[2])),
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) - (self.group2()[1] * other.group0()[2]) + (self.group2()[2] * other.group0()[1])),
                ((self.group1()[1] * other.group0()[3]) + (self.group2()[0] * other.group0()[2]) - (self.group2()[2] * other.group0()[0])),
                ((self.group1()[2] * other.group0()[3]) - (self.group2()[0] * other.group0()[1]) + (self.group2()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1]) - (self.group2()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0]) - (self.group2()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) - (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0]) - (self.group2()[3] * other.group0()[2])),
                (-(self.group1()[3] * other.group0()[3])
                    + (self.group2()[0] * other.group0()[0])
                    + (self.group2()[1] * other.group0()[1])
                    + (self.group2()[2] * other.group0()[2])
                    + (self.group2()[3] * other.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiScalar> for AntiCircleRotor {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0       11        0
    fn geometric_anti_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from([(self.group0()[0] * other[e12345]), (self.group0()[1] * other[e12345]), (self.group0()[2] * other[e12345])]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group1()[0] * other[e12345]),
                (self.group1()[1] * other[e12345]),
                (self.group1()[2] * other[e12345]),
                (self.group1()[3] * other[e12345]),
            ]),
            // e15, e25, e35, scalar
            Simd32x4::from([
                (self.group2()[0] * other[e12345]),
                (self.group2()[1] * other[e12345]),
                (self.group2()[2] * other[e12345]),
                (self.group2()[3] * other[e12345]),
            ]),
        );
    }
}
impl GeometricAntiProduct<Circle> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       94      110        0
    fn geometric_anti_product(self, other: Circle) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])
                    + (other.group0()[0] * self.group1()[3])
                    + (other.group0()[0] * self.group2()[3])
                    - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[1])),
                (-(self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (other.group0()[0] * self.group1()[2])
                    + (other.group0()[1] * self.group1()[3])
                    + (other.group0()[1] * self.group2()[3])
                    - (other.group0()[2] * self.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[3]) - (other.group0()[0] * self.group1()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (other.group0()[2] * self.group2()[3])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1]) - (other.group0()[1] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[1])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])
                    + (self.group2()[3] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[2] * other.group2()[0]) + (other.group0()[0] * self.group2()[2])
                    - (other.group0()[2] * self.group2()[0])
                    - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[2] * other.group1()[0])
                    + (self.group2()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) - (other.group0()[0] * self.group2()[1])
                    + (other.group0()[1] * self.group2()[0])
                    + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[0])
                    + (self.group2()[3] * other.group1()[2])),
                (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])
                    + (other.group0()[0] * self.group2()[0])
                    + (other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])
                    - (self.group2()[3] * other.group1()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group2()[0] * self.group1()[3]) + (other.group2()[0] * self.group2()[3]) - (other.group2()[1] * self.group1()[2])
                    + (other.group2()[2] * self.group1()[1])
                    - (self.group2()[0] * other.group1()[3])
                    + (self.group2()[1] * other.group1()[2])
                    - (self.group2()[2] * other.group1()[1])),
                ((other.group2()[0] * self.group1()[2]) - (other.group2()[1] * self.group1()[3]) + (other.group2()[1] * self.group2()[3])
                    - (other.group2()[2] * self.group1()[0])
                    - (self.group2()[0] * other.group1()[2])
                    - (self.group2()[1] * other.group1()[3])
                    + (self.group2()[2] * other.group1()[0])),
                (-(other.group2()[0] * self.group1()[1]) + (other.group2()[1] * self.group1()[0]) - (other.group2()[2] * self.group1()[3])
                    + (other.group2()[2] * self.group2()[3])
                    + (self.group2()[0] * other.group1()[1])
                    - (self.group2()[1] * other.group1()[0])
                    - (self.group2()[2] * other.group1()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1]) + (other.group0()[1] * self.group2()[2])
                    - (other.group0()[2] * self.group2()[1])
                    - (self.group1()[0] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[2] * other.group2()[0]) - (other.group0()[0] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[0])
                    - (self.group1()[1] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) + (other.group0()[0] * self.group2()[1])
                    - (other.group0()[1] * self.group2()[0])
                    - (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])),
                (-(other.group2()[0] * self.group1()[0])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (self.group2()[0] * other.group1()[0])
                    - (self.group2()[1] * other.group1()[1])
                    - (self.group2()[2] * other.group1()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<CircleRotor> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      105      121        0
    fn geometric_anti_product(self, other: CircleRotor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])
                    + (other.group0()[0] * self.group1()[3])
                    + (other.group0()[0] * self.group2()[3])
                    - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[1])),
                (-(self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[1] * other.group2()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (other.group0()[0] * self.group1()[2])
                    + (other.group0()[1] * self.group1()[3])
                    + (other.group0()[1] * self.group2()[3])
                    - (other.group0()[2] * self.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[3]) + (self.group0()[2] * other.group2()[3])
                    - (other.group0()[0] * self.group1()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (other.group0()[2] * self.group2()[3])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])
                    + (self.group2()[3] * other.group2()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1]) - (other.group0()[1] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[1])
                    + (self.group1()[0] * other.group2()[3])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])
                    + (self.group2()[3] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[2] * other.group2()[0]) + (other.group0()[0] * self.group2()[2])
                    - (other.group0()[2] * self.group2()[0])
                    - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[1] * other.group2()[3])
                    + (self.group1()[2] * other.group1()[0])
                    + (self.group2()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) - (other.group0()[0] * self.group2()[1])
                    + (other.group0()[1] * self.group2()[0])
                    + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[0])
                    + (self.group1()[2] * other.group2()[3])
                    + (self.group2()[3] * other.group1()[2])),
                (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])
                    + (other.group0()[0] * self.group2()[0])
                    + (other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])
                    + (self.group1()[3] * other.group2()[3])
                    - (self.group2()[3] * other.group1()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group1()[1] * other.group2()[2]) - (self.group1()[2] * other.group2()[1]) - (self.group1()[3] * other.group2()[0]) - (self.group2()[0] * other.group1()[3])
                    + (self.group2()[0] * other.group2()[3])
                    + (self.group2()[1] * other.group1()[2])
                    - (self.group2()[2] * other.group1()[1])
                    + (self.group2()[3] * other.group2()[0])),
                (-(self.group1()[0] * other.group2()[2]) + (self.group1()[2] * other.group2()[0])
                    - (self.group1()[3] * other.group2()[1])
                    - (self.group2()[0] * other.group1()[2])
                    - (self.group2()[1] * other.group1()[3])
                    + (self.group2()[1] * other.group2()[3])
                    + (self.group2()[2] * other.group1()[0])
                    + (self.group2()[3] * other.group2()[1])),
                ((self.group1()[0] * other.group2()[1]) - (self.group1()[1] * other.group2()[0]) - (self.group1()[3] * other.group2()[2]) + (self.group2()[0] * other.group1()[1])
                    - (self.group2()[1] * other.group1()[0])
                    - (self.group2()[2] * other.group1()[3])
                    + (self.group2()[2] * other.group2()[3])
                    + (self.group2()[3] * other.group2()[2])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1]) + (other.group0()[1] * self.group2()[2])
                    - (other.group0()[2] * self.group2()[1])
                    - (self.group1()[0] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[2] * other.group2()[0]) - (other.group0()[0] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[0])
                    - (self.group1()[1] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) + (other.group0()[0] * self.group2()[1])
                    - (other.group0()[1] * self.group2()[0])
                    - (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])),
                (-(self.group1()[0] * other.group2()[0])
                    - (self.group1()[1] * other.group2()[1])
                    - (self.group1()[2] * other.group2()[2])
                    - (self.group2()[0] * other.group1()[0])
                    - (self.group2()[1] * other.group1()[1])
                    - (self.group2()[2] * other.group1()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Dipole> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       94      110        0
    fn geometric_anti_product(self, other: Dipole) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])
                    - (other.group0()[0] * self.group1()[3])
                    - (other.group0()[0] * self.group2()[3])
                    + (other.group0()[1] * self.group1()[2])
                    - (other.group0()[2] * self.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3])
                    - (self.group0()[2] * other.group1()[0])
                    - (other.group0()[0] * self.group1()[2])
                    - (other.group0()[1] * self.group1()[3])
                    - (other.group0()[1] * self.group2()[3])
                    + (other.group0()[2] * self.group1()[0])),
                (-(self.group0()[0] * other.group1()[1])
                    + (self.group0()[1] * other.group1()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (other.group0()[0] * self.group1()[1])
                    - (other.group0()[1] * self.group1()[0])
                    - (other.group0()[2] * self.group1()[3])
                    - (other.group0()[2] * self.group2()[3])),
                ((self.group0()[0] * other.group2()[0])
                    + (self.group0()[1] * other.group2()[1])
                    + (self.group0()[2] * other.group2()[2])
                    + (other.group0()[0] * self.group2()[0])
                    + (other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])
                    + (self.group1()[0] * other.group1()[0])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[1] * other.group2()[2]) + (self.group0()[2] * other.group2()[1]) + (other.group0()[1] * self.group2()[2])
                    - (other.group0()[2] * self.group2()[1])
                    - (self.group1()[1] * other.group1()[2])
                    + (self.group1()[2] * other.group1()[1])
                    - (self.group2()[3] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[2] * other.group2()[0]) - (other.group0()[0] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[0])
                    + (self.group1()[0] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[0])
                    - (self.group2()[3] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[0]) + (other.group0()[0] * self.group2()[1])
                    - (other.group0()[1] * self.group2()[0])
                    - (self.group1()[0] * other.group1()[1])
                    + (self.group1()[1] * other.group1()[0])
                    - (self.group2()[3] * other.group1()[2])),
                (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])
                    + (other.group0()[0] * self.group2()[0])
                    + (other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])
                    + (self.group2()[3] * other.group1()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((other.group2()[0] * self.group1()[3]) - (other.group2()[0] * self.group2()[3]) + (other.group2()[1] * self.group1()[2])
                    - (other.group2()[2] * self.group1()[1])
                    - (self.group2()[0] * other.group1()[3])
                    - (self.group2()[1] * other.group1()[2])
                    + (self.group2()[2] * other.group1()[1])),
                (-(other.group2()[0] * self.group1()[2]) + (other.group2()[1] * self.group1()[3]) - (other.group2()[1] * self.group2()[3])
                    + (other.group2()[2] * self.group1()[0])
                    + (self.group2()[0] * other.group1()[2])
                    - (self.group2()[1] * other.group1()[3])
                    - (self.group2()[2] * other.group1()[0])),
                ((other.group2()[0] * self.group1()[1]) - (other.group2()[1] * self.group1()[0]) + (other.group2()[2] * self.group1()[3])
                    - (other.group2()[2] * self.group2()[3])
                    - (self.group2()[0] * other.group1()[1])
                    + (self.group2()[1] * other.group1()[0])
                    - (self.group2()[2] * other.group1()[3])),
                ((other.group2()[0] * self.group1()[0])
                    + (other.group2()[1] * self.group1()[1])
                    + (other.group2()[2] * self.group1()[2])
                    + (self.group2()[0] * other.group1()[0])
                    + (self.group2()[1] * other.group1()[1])
                    + (self.group2()[2] * other.group1()[2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1]) + (other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[2] * other.group2()[0]) - (other.group0()[0] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[0])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) + (other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0])
                    + (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])),
                ((self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[2])
                    + (other.group0()[0] * self.group1()[0])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<DipoleInversion> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      149      165        0
    fn geometric_anti_product(self, other: DipoleInversion) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group1()[2]) + (self.group0()[1] * other.group3()[2]) + (self.group0()[2] * other.group1()[1])
                    - (self.group0()[2] * other.group3()[1])
                    - (other.group0()[0] * self.group1()[3])
                    - (other.group0()[0] * self.group2()[3])
                    + (other.group0()[1] * self.group1()[2])
                    - (other.group0()[2] * self.group1()[1])
                    - (self.group1()[0] * other.group2()[3])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group1()[0])
                    + (self.group0()[2] * other.group3()[0])
                    - (other.group0()[0] * self.group1()[2])
                    - (other.group0()[1] * self.group1()[3])
                    - (other.group0()[1] * self.group2()[3])
                    + (other.group0()[2] * self.group1()[0])
                    - (self.group1()[1] * other.group2()[3])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group1()[0])
                    - (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (other.group0()[0] * self.group1()[1])
                    - (other.group0()[1] * self.group1()[0])
                    - (other.group0()[2] * self.group1()[3])
                    - (other.group0()[2] * self.group2()[3])
                    - (self.group1()[2] * other.group2()[3])),
                ((self.group0()[0] * other.group2()[0])
                    + (self.group0()[1] * other.group2()[1])
                    + (self.group0()[2] * other.group2()[2])
                    + (other.group0()[0] * self.group2()[0])
                    + (other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])
                    + (self.group1()[0] * other.group1()[0])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group3()[3]) - (self.group0()[1] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[1])
                    + (other.group0()[1] * self.group2()[2])
                    - (other.group0()[2] * self.group2()[1])
                    - (self.group1()[1] * other.group1()[2])
                    + (self.group1()[2] * other.group1()[1])
                    - (self.group1()[3] * other.group3()[0])
                    - (self.group2()[0] * other.group2()[3])
                    - (self.group2()[3] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[1] * other.group3()[3]) - (self.group0()[2] * other.group2()[0]) - (other.group0()[0] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[0])
                    + (self.group1()[0] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[0])
                    - (self.group1()[3] * other.group3()[1])
                    - (self.group2()[1] * other.group2()[3])
                    - (self.group2()[3] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[0]) - (self.group0()[2] * other.group3()[3])
                    + (other.group0()[0] * self.group2()[1])
                    - (other.group0()[1] * self.group2()[0])
                    - (self.group1()[0] * other.group1()[1])
                    + (self.group1()[1] * other.group1()[0])
                    - (self.group1()[3] * other.group3()[2])
                    - (self.group2()[2] * other.group2()[3])
                    - (self.group2()[3] * other.group1()[2])),
                (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])
                    + (other.group0()[0] * self.group2()[0])
                    + (other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])
                    - (self.group1()[0] * other.group3()[0])
                    - (self.group1()[1] * other.group3()[1])
                    - (self.group1()[2] * other.group3()[2])
                    + (self.group2()[3] * other.group1()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group1()[0] * other.group3()[3]) - (self.group1()[1] * other.group2()[2])
                    + (self.group1()[2] * other.group2()[1])
                    + (self.group1()[3] * other.group2()[0])
                    - (self.group2()[0] * other.group1()[3])
                    - (self.group2()[1] * other.group1()[2])
                    - (self.group2()[1] * other.group3()[2])
                    + (self.group2()[2] * other.group1()[1])
                    + (self.group2()[2] * other.group3()[1])
                    - (self.group2()[3] * other.group2()[0])),
                ((self.group1()[0] * other.group2()[2]) - (self.group1()[1] * other.group3()[3]) - (self.group1()[2] * other.group2()[0])
                    + (self.group1()[3] * other.group2()[1])
                    + (self.group2()[0] * other.group1()[2])
                    + (self.group2()[0] * other.group3()[2])
                    - (self.group2()[1] * other.group1()[3])
                    - (self.group2()[2] * other.group1()[0])
                    - (self.group2()[2] * other.group3()[0])
                    - (self.group2()[3] * other.group2()[1])),
                (-(self.group1()[0] * other.group2()[1]) + (self.group1()[1] * other.group2()[0]) - (self.group1()[2] * other.group3()[3])
                    + (self.group1()[3] * other.group2()[2])
                    - (self.group2()[0] * other.group1()[1])
                    - (self.group2()[0] * other.group3()[1])
                    + (self.group2()[1] * other.group1()[0])
                    + (self.group2()[1] * other.group3()[0])
                    - (self.group2()[2] * other.group1()[3])
                    - (self.group2()[3] * other.group2()[2])),
                ((self.group1()[0] * other.group2()[0])
                    + (self.group1()[1] * other.group2()[1])
                    + (self.group1()[2] * other.group2()[2])
                    + (self.group1()[3] * other.group3()[3])
                    + (self.group2()[0] * other.group1()[0])
                    + (self.group2()[0] * other.group3()[0])
                    + (self.group2()[1] * other.group1()[1])
                    + (self.group2()[1] * other.group3()[1])
                    + (self.group2()[2] * other.group1()[2])
                    + (self.group2()[2] * other.group3()[2])
                    - (self.group2()[3] * other.group3()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1]) + (other.group0()[1] * self.group2()[2])
                    - (other.group0()[2] * self.group2()[1])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group3()[2])
                    - (self.group1()[2] * other.group3()[1])
                    + (self.group1()[3] * other.group1()[0])
                    - (self.group2()[0] * other.group2()[3])
                    + (self.group2()[3] * other.group3()[0])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group3()[3]) + (self.group0()[2] * other.group2()[0])
                    - (other.group0()[0] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[0])
                    - (self.group1()[0] * other.group3()[2])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group3()[0])
                    + (self.group1()[3] * other.group1()[1])
                    - (self.group2()[1] * other.group2()[3])
                    + (self.group2()[3] * other.group3()[1])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) + (self.group0()[2] * other.group3()[3]) + (other.group0()[0] * self.group2()[1])
                    - (other.group0()[1] * self.group2()[0])
                    + (self.group1()[0] * other.group3()[1])
                    - (self.group1()[1] * other.group3()[0])
                    + (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])
                    - (self.group2()[2] * other.group2()[3])
                    + (self.group2()[3] * other.group3()[2])),
                ((self.group0()[0] * other.group1()[0]) - (self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group1()[1]) - (self.group0()[1] * other.group3()[1])
                    + (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])
                    + (other.group0()[0] * self.group1()[0])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[2])
                    - (self.group1()[3] * other.group2()[3])
                    - (self.group2()[3] * other.group2()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<DualNum> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        7       25        0
    fn geometric_anti_product(self, other: DualNum) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[2])),
                (other.group0()[1] * self.group2()[3]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[1] * self.group2()[0]),
                (other.group0()[1] * self.group2()[1]),
                (other.group0()[1] * self.group2()[2]),
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[0] * self.group2()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group2()[0] * -1.0),
                (other.group0()[0] * self.group2()[1] * -1.0),
                (other.group0()[0] * self.group2()[2] * -1.0),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<FlatPoint> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       29       44        0
    fn geometric_anti_product(self, other: FlatPoint) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group2()[3] * other.group0()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1]) + (self.group1()[3] * other.group0()[0])
                    - (self.group2()[0] * other.group0()[3])
                    - (self.group2()[3] * other.group0()[0])),
                ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0]) + (self.group1()[3] * other.group0()[1])
                    - (self.group2()[1] * other.group0()[3])
                    - (self.group2()[3] * other.group0()[1])),
                (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0]) + (self.group1()[3] * other.group0()[2])
                    - (self.group2()[2] * other.group0()[3])
                    - (self.group2()[3] * other.group0()[2])),
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (self.group1()[0] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[3])),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<Flector> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       72       88        0
    fn geometric_anti_product(self, other: Flector) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[3]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])
                    - (self.group1()[3] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group0()[0]) - (self.group1()[3] * other.group1()[1])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[3])
                    - (self.group1()[3] * other.group1()[2])),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])
                    + (self.group2()[3] * other.group0()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group1()[0] * other.group1()[3]) - (self.group1()[1] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[1])
                    + (self.group1()[3] * other.group0()[0])
                    - (self.group2()[0] * other.group0()[3])
                    - (self.group2()[1] * other.group1()[2])
                    + (self.group2()[2] * other.group1()[1])
                    - (self.group2()[3] * other.group0()[0])),
                ((self.group1()[0] * other.group0()[2]) - (self.group1()[1] * other.group1()[3]) - (self.group1()[2] * other.group0()[0])
                    + (self.group1()[3] * other.group0()[1])
                    + (self.group2()[0] * other.group1()[2])
                    - (self.group2()[1] * other.group0()[3])
                    - (self.group2()[2] * other.group1()[0])
                    - (self.group2()[3] * other.group0()[1])),
                (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0]) - (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group0()[2])
                    - (self.group2()[0] * other.group1()[1])
                    + (self.group2()[1] * other.group1()[0])
                    - (self.group2()[2] * other.group0()[3])
                    - (self.group2()[3] * other.group0()[2])),
                ((self.group1()[0] * other.group0()[0])
                    + (self.group1()[1] * other.group0()[1])
                    + (self.group1()[2] * other.group0()[2])
                    + (self.group1()[3] * other.group1()[3])
                    + (self.group2()[0] * other.group1()[0])
                    + (self.group2()[1] * other.group1()[1])
                    + (self.group2()[2] * other.group1()[2])
                    - (self.group2()[3] * other.group1()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])
                    + (self.group1()[0] * other.group0()[3])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])
                    + (self.group2()[3] * other.group1()[0])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group0()[0])
                    - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group1()[2] * other.group1()[0])
                    + (self.group2()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group1()[3]) + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[0])
                    + (self.group1()[2] * other.group0()[3])
                    + (self.group2()[3] * other.group1()[2])),
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Line> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       50       66        0
    fn geometric_anti_product(self, other: Line) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) + (other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[1])),
                (-(self.group0()[0] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[0])
                    + (other.group0()[0] * self.group1()[2])
                    + (other.group0()[1] * self.group2()[3])
                    - (other.group0()[2] * self.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) - (other.group0()[0] * self.group1()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group2()[3])),
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1]) - (other.group1()[0] * self.group1()[3])
                    + (other.group1()[0] * self.group2()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group2()[0]) + (other.group1()[0] * self.group1()[2]) - (other.group1()[1] * self.group1()[3])
                    + (other.group1()[1] * self.group2()[3])
                    - (other.group1()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    - (other.group1()[2] * self.group1()[3])
                    + (other.group1()[2] * self.group2()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) + (other.group0()[0] * self.group1()[3])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0]) + (other.group0()[1] * self.group1()[3])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (other.group0()[2] * self.group1()[3])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Motor> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       72       88        0
    fn geometric_anti_product(self, other: Motor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[3]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])
                    + (self.group2()[3] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])
                    + (self.group1()[0] * other.group0()[3])
                    + (self.group1()[1] * other.group0()[2])
                    - (self.group1()[2] * other.group0()[1])
                    + (self.group2()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group1()[0])
                    - (self.group1()[0] * other.group0()[2])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group1()[2] * other.group0()[0])
                    + (self.group2()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[3]) + (self.group1()[0] * other.group0()[1])
                    - (self.group1()[1] * other.group0()[0])
                    + (self.group1()[2] * other.group0()[3])
                    + (self.group2()[3] * other.group0()[2])),
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])
                    + (self.group1()[3] * other.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group1()[0] * other.group1()[3]) + (self.group1()[1] * other.group1()[2]) - (self.group1()[2] * other.group1()[1]) - (self.group1()[3] * other.group1()[0])
                    + (self.group2()[0] * other.group0()[3])
                    + (self.group2()[1] * other.group0()[2])
                    - (self.group2()[2] * other.group0()[1])
                    + (self.group2()[3] * other.group1()[0])),
                (-(self.group1()[0] * other.group1()[2]) + (self.group1()[1] * other.group1()[3]) + (self.group1()[2] * other.group1()[0])
                    - (self.group1()[3] * other.group1()[1])
                    - (self.group2()[0] * other.group0()[2])
                    + (self.group2()[1] * other.group0()[3])
                    + (self.group2()[2] * other.group0()[0])
                    + (self.group2()[3] * other.group1()[1])),
                ((self.group1()[0] * other.group1()[1]) - (self.group1()[1] * other.group1()[0]) + (self.group1()[2] * other.group1()[3]) - (self.group1()[3] * other.group1()[2])
                    + (self.group2()[0] * other.group0()[1])
                    - (self.group2()[1] * other.group0()[0])
                    + (self.group2()[2] * other.group0()[3])
                    + (self.group2()[3] * other.group1()[2])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) + (self.group1()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[3]) + (self.group1()[3] * other.group0()[2])),
                (-(self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])
                    + (self.group2()[3] * other.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<MultiVector> for AntiCircleRotor {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      320      352        0
    fn geometric_anti_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((other.group0()[1] * self.group2()[3])
                    - (self.group0()[0] * other.group8()[0])
                    - (self.group0()[1] * other.group8()[1])
                    - (self.group0()[2] * other.group8()[2])
                    - (other.group7()[0] * self.group2()[0])
                    - (other.group7()[1] * self.group2()[1])
                    - (other.group7()[2] * self.group2()[2])
                    - (self.group1()[0] * other.group6()[0])
                    - (self.group1()[1] * other.group6()[1])
                    - (self.group1()[2] * other.group6()[2])
                    - (self.group1()[3] * other.group6()[3])),
                (-(other.group0()[0] * self.group2()[3])
                    + (self.group0()[0] * other.group3()[0])
                    + (self.group0()[1] * other.group3()[1])
                    + (self.group0()[2] * other.group3()[2])
                    + (other.group4()[0] * self.group2()[0])
                    + (other.group4()[1] * self.group2()[1])
                    + (other.group4()[2] * self.group2()[2])
                    + (other.group5()[0] * self.group1()[0])
                    + (other.group5()[1] * self.group1()[1])
                    + (other.group5()[2] * self.group1()[2])
                    - (self.group1()[3] * other.group3()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group9()[3]) + (self.group0()[1] * other.group3()[2]) - (self.group0()[2] * other.group3()[1]) + (other.group4()[1] * self.group2()[2])
                    - (other.group4()[2] * self.group2()[1])
                    + (other.group5()[0] * self.group1()[3])
                    + (self.group1()[0] * other.group3()[3])
                    + (self.group1()[1] * other.group9()[2])
                    - (self.group1()[2] * other.group9()[1])
                    - (self.group2()[0] * other[e45])
                    + (self.group2()[3] * other.group9()[0])),
                (-(self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group9()[3]) + (self.group0()[2] * other.group3()[0])
                    - (other.group4()[0] * self.group2()[2])
                    + (other.group4()[2] * self.group2()[0])
                    + (other.group5()[1] * self.group1()[3])
                    - (self.group1()[0] * other.group9()[2])
                    + (self.group1()[1] * other.group3()[3])
                    + (self.group1()[2] * other.group9()[0])
                    - (self.group2()[1] * other[e45])
                    + (self.group2()[3] * other.group9()[1])),
                ((self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group3()[0]) + (self.group0()[2] * other.group9()[3]) + (other.group4()[0] * self.group2()[1])
                    - (other.group4()[1] * self.group2()[0])
                    + (other.group5()[2] * self.group1()[3])
                    + (self.group1()[0] * other.group9()[1])
                    - (self.group1()[1] * other.group9()[0])
                    + (self.group1()[2] * other.group3()[3])
                    - (self.group2()[2] * other[e45])
                    + (self.group2()[3] * other.group9()[2])),
                ((self.group0()[0] * other.group5()[0]) - (self.group0()[0] * other.group9()[0]) + (self.group0()[1] * other.group5()[1]) - (self.group0()[1] * other.group9()[1])
                    + (self.group0()[2] * other.group5()[2])
                    - (self.group0()[2] * other.group9()[2])
                    + (other.group4()[0] * self.group1()[0])
                    + (other.group4()[1] * self.group1()[1])
                    + (other.group4()[2] * self.group1()[2])
                    - (self.group1()[3] * other[e45])
                    - (self.group2()[3] * other[e45])),
            ]),
            // e5
            ((other.group5()[0] * self.group2()[0])
                + (other.group5()[1] * self.group2()[1])
                + (other.group5()[2] * self.group2()[2])
                + (self.group1()[0] * other.group3()[0])
                + (self.group1()[1] * other.group3()[1])
                + (self.group1()[2] * other.group3()[2])
                + (self.group1()[3] * other.group9()[3])
                + (self.group2()[0] * other.group9()[0])
                + (self.group2()[1] * other.group9()[1])
                + (self.group2()[2] * other.group9()[2])
                - (self.group2()[3] * other.group9()[3])),
            // e15, e25, e35, e45
            Simd32x4::from([
                ((other.group0()[1] * self.group2()[0]) - (other.group8()[0] * self.group1()[3]) + (other.group8()[0] * self.group2()[3]) - (other.group8()[1] * self.group1()[2])
                    + (other.group8()[2] * self.group1()[1])
                    + (self.group1()[0] * other[e1])
                    - (self.group2()[0] * other.group6()[3])
                    - (self.group2()[1] * other.group1()[2])
                    + (self.group2()[1] * other.group6()[2])
                    + (self.group2()[2] * other.group1()[1])
                    - (self.group2()[2] * other.group6()[1])),
                ((other.group0()[1] * self.group2()[1]) + (other.group8()[0] * self.group1()[2]) - (other.group8()[1] * self.group1()[3]) + (other.group8()[1] * self.group2()[3])
                    - (other.group8()[2] * self.group1()[0])
                    + (self.group1()[1] * other[e1])
                    + (self.group2()[0] * other.group1()[2])
                    - (self.group2()[0] * other.group6()[2])
                    - (self.group2()[1] * other.group6()[3])
                    - (self.group2()[2] * other.group1()[0])
                    + (self.group2()[2] * other.group6()[0])),
                ((other.group0()[1] * self.group2()[2]) - (other.group8()[0] * self.group1()[1]) + (other.group8()[1] * self.group1()[0]) - (other.group8()[2] * self.group1()[3])
                    + (other.group8()[2] * self.group2()[3])
                    + (self.group1()[2] * other[e1])
                    - (self.group2()[0] * other.group1()[1])
                    + (self.group2()[0] * other.group6()[1])
                    + (self.group2()[1] * other.group1()[0])
                    - (self.group2()[1] * other.group6()[0])
                    - (self.group2()[2] * other.group6()[3])),
                ((other.group0()[1] * self.group1()[3]) - (self.group0()[0] * other.group8()[0]) - (self.group0()[1] * other.group8()[1]) - (self.group0()[2] * other.group8()[2])
                    + (other.group7()[0] * self.group2()[0])
                    + (other.group7()[1] * self.group2()[1])
                    + (other.group7()[2] * self.group2()[2])
                    + (self.group1()[0] * other.group1()[0])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[2] * other.group1()[2])
                    - (self.group2()[3] * other.group6()[3])),
            ]),
            // e41, e42, e43
            Simd32x3::from([
                ((other.group0()[1] * self.group0()[0]) + (self.group0()[0] * other.group6()[3]) + (self.group0()[1] * other.group1()[2]) + (self.group0()[1] * other.group6()[2])
                    - (self.group0()[2] * other.group1()[1])
                    - (self.group0()[2] * other.group6()[1])
                    + (other.group7()[0] * self.group1()[3])
                    + (other.group7()[0] * self.group2()[3])
                    - (other.group7()[1] * self.group1()[2])
                    + (other.group7()[2] * self.group1()[1])
                    + (self.group1()[0] * other.group1()[3])),
                ((other.group0()[1] * self.group0()[1]) - (self.group0()[0] * other.group1()[2]) - (self.group0()[0] * other.group6()[2])
                    + (self.group0()[1] * other.group6()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group0()[2] * other.group6()[0])
                    + (other.group7()[0] * self.group1()[2])
                    + (other.group7()[1] * self.group1()[3])
                    + (other.group7()[1] * self.group2()[3])
                    - (other.group7()[2] * self.group1()[0])
                    + (self.group1()[1] * other.group1()[3])),
                ((other.group0()[1] * self.group0()[2]) + (self.group0()[0] * other.group1()[1]) + (self.group0()[0] * other.group6()[1])
                    - (self.group0()[1] * other.group1()[0])
                    - (self.group0()[1] * other.group6()[0])
                    + (self.group0()[2] * other.group6()[3])
                    - (other.group7()[0] * self.group1()[1])
                    + (other.group7()[1] * self.group1()[0])
                    + (other.group7()[2] * self.group1()[3])
                    + (other.group7()[2] * self.group2()[3])
                    + (self.group1()[2] * other.group1()[3])),
            ]),
            // e23, e31, e12
            Simd32x3::from([
                ((other.group0()[1] * self.group1()[0]) + (self.group0()[0] * other[e1]) + (self.group0()[1] * other.group8()[2])
                    - (self.group0()[2] * other.group8()[1])
                    - (other.group7()[1] * self.group2()[2])
                    + (other.group7()[2] * self.group2()[1])
                    + (self.group1()[1] * other.group6()[2])
                    - (self.group1()[2] * other.group6()[1])
                    - (self.group1()[3] * other.group1()[0])
                    + (self.group2()[0] * other.group1()[3])
                    + (self.group2()[3] * other.group6()[0])),
                ((other.group0()[1] * self.group1()[1]) - (self.group0()[0] * other.group8()[2])
                    + (self.group0()[1] * other[e1])
                    + (self.group0()[2] * other.group8()[0])
                    + (other.group7()[0] * self.group2()[2])
                    - (other.group7()[2] * self.group2()[0])
                    - (self.group1()[0] * other.group6()[2])
                    + (self.group1()[2] * other.group6()[0])
                    - (self.group1()[3] * other.group1()[1])
                    + (self.group2()[1] * other.group1()[3])
                    + (self.group2()[3] * other.group6()[1])),
                ((other.group0()[1] * self.group1()[2]) + (self.group0()[0] * other.group8()[1]) - (self.group0()[1] * other.group8()[0]) + (self.group0()[2] * other[e1])
                    - (other.group7()[0] * self.group2()[1])
                    + (other.group7()[1] * self.group2()[0])
                    + (self.group1()[0] * other.group6()[1])
                    - (self.group1()[1] * other.group6()[0])
                    - (self.group1()[3] * other.group1()[2])
                    + (self.group2()[2] * other.group1()[3])
                    + (self.group2()[3] * other.group6()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[0]) - (self.group0()[0] * other.group9()[3]) - (self.group0()[1] * other.group3()[2])
                    + (self.group0()[2] * other.group3()[1])
                    + (other.group4()[1] * self.group2()[2])
                    - (other.group4()[2] * self.group2()[1])
                    - (other.group5()[0] * self.group2()[3])
                    + (other.group5()[1] * self.group1()[2])
                    - (other.group5()[2] * self.group1()[1])
                    - (self.group1()[3] * other.group9()[0])
                    - (self.group2()[0] * other[e45])),
                (-(other.group0()[0] * self.group1()[1]) + (self.group0()[0] * other.group3()[2])
                    - (self.group0()[1] * other.group9()[3])
                    - (self.group0()[2] * other.group3()[0])
                    - (other.group4()[0] * self.group2()[2])
                    + (other.group4()[2] * self.group2()[0])
                    - (other.group5()[0] * self.group1()[2])
                    - (other.group5()[1] * self.group2()[3])
                    + (other.group5()[2] * self.group1()[0])
                    - (self.group1()[3] * other.group9()[1])
                    - (self.group2()[1] * other[e45])),
                (-(other.group0()[0] * self.group1()[2]) - (self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group3()[0])
                    - (self.group0()[2] * other.group9()[3])
                    + (other.group4()[0] * self.group2()[1])
                    - (other.group4()[1] * self.group2()[0])
                    + (other.group5()[0] * self.group1()[1])
                    - (other.group5()[1] * self.group1()[0])
                    - (other.group5()[2] * self.group2()[3])
                    - (self.group1()[3] * other.group9()[2])
                    - (self.group2()[2] * other[e45])),
                ((other.group0()[0] * self.group1()[3]) - (self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group3()[1]) - (self.group0()[2] * other.group3()[2])
                    + (other.group4()[0] * self.group2()[0])
                    + (other.group4()[1] * self.group2()[1])
                    + (other.group4()[2] * self.group2()[2])
                    - (self.group1()[0] * other.group9()[0])
                    - (self.group1()[1] * other.group9()[1])
                    - (self.group1()[2] * other.group9()[2])
                    + (self.group2()[3] * other.group3()[3])),
            ]),
            // e423, e431, e412
            Simd32x3::from([
                (-(other.group0()[0] * self.group0()[0]) + (self.group0()[0] * other.group3()[3]) - (self.group0()[1] * other.group5()[2])
                    + (self.group0()[1] * other.group9()[2])
                    + (self.group0()[2] * other.group5()[1])
                    - (self.group0()[2] * other.group9()[1])
                    - (other.group4()[0] * self.group1()[3])
                    - (other.group4()[0] * self.group2()[3])
                    + (other.group4()[1] * self.group1()[2])
                    - (other.group4()[2] * self.group1()[1])
                    - (self.group1()[0] * other[e45])),
                (-(other.group0()[0] * self.group0()[1]) + (self.group0()[0] * other.group5()[2]) - (self.group0()[0] * other.group9()[2])
                    + (self.group0()[1] * other.group3()[3])
                    - (self.group0()[2] * other.group5()[0])
                    + (self.group0()[2] * other.group9()[0])
                    - (other.group4()[0] * self.group1()[2])
                    - (other.group4()[1] * self.group1()[3])
                    - (other.group4()[1] * self.group2()[3])
                    + (other.group4()[2] * self.group1()[0])
                    - (self.group1()[1] * other[e45])),
                (-(other.group0()[0] * self.group0()[2]) - (self.group0()[0] * other.group5()[1])
                    + (self.group0()[0] * other.group9()[1])
                    + (self.group0()[1] * other.group5()[0])
                    - (self.group0()[1] * other.group9()[0])
                    + (self.group0()[2] * other.group3()[3])
                    + (other.group4()[0] * self.group1()[1])
                    - (other.group4()[1] * self.group1()[0])
                    - (other.group4()[2] * self.group1()[3])
                    - (other.group4()[2] * self.group2()[3])
                    - (self.group1()[2] * other[e45])),
            ]),
            // e235, e315, e125
            Simd32x3::from([
                (-(other.group0()[0] * self.group2()[0]) + (other.group5()[1] * self.group2()[2])
                    - (other.group5()[2] * self.group2()[1])
                    - (self.group1()[0] * other.group9()[3])
                    - (self.group1()[1] * other.group3()[2])
                    + (self.group1()[2] * other.group3()[1])
                    + (self.group1()[3] * other.group3()[0])
                    - (self.group2()[0] * other.group3()[3])
                    - (self.group2()[1] * other.group9()[2])
                    + (self.group2()[2] * other.group9()[1])
                    - (self.group2()[3] * other.group3()[0])),
                (-(other.group0()[0] * self.group2()[1]) - (other.group5()[0] * self.group2()[2])
                    + (other.group5()[2] * self.group2()[0])
                    + (self.group1()[0] * other.group3()[2])
                    - (self.group1()[1] * other.group9()[3])
                    - (self.group1()[2] * other.group3()[0])
                    + (self.group1()[3] * other.group3()[1])
                    + (self.group2()[0] * other.group9()[2])
                    - (self.group2()[1] * other.group3()[3])
                    - (self.group2()[2] * other.group9()[0])
                    - (self.group2()[3] * other.group3()[1])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group5()[0] * self.group2()[1])
                    - (other.group5()[1] * self.group2()[0])
                    - (self.group1()[0] * other.group3()[1])
                    + (self.group1()[1] * other.group3()[0])
                    - (self.group1()[2] * other.group9()[3])
                    + (self.group1()[3] * other.group3()[2])
                    - (self.group2()[0] * other.group9()[1])
                    + (self.group2()[1] * other.group9()[0])
                    - (self.group2()[2] * other.group3()[3])
                    - (self.group2()[3] * other.group3()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other[e1]) + (self.group0()[1] * other.group8()[2]) - (self.group0()[2] * other.group8()[1]) + (other.group7()[1] * self.group2()[2])
                    - (other.group7()[2] * self.group2()[1])
                    - (self.group1()[0] * other.group6()[3])
                    - (self.group1()[1] * other.group1()[2])
                    + (self.group1()[2] * other.group1()[1])
                    + (self.group1()[3] * other.group6()[0])
                    - (self.group2()[0] * other.group1()[3])
                    - (self.group2()[3] * other.group1()[0])),
                (-(self.group0()[0] * other.group8()[2]) + (self.group0()[1] * other[e1]) + (self.group0()[2] * other.group8()[0]) - (other.group7()[0] * self.group2()[2])
                    + (other.group7()[2] * self.group2()[0])
                    + (self.group1()[0] * other.group1()[2])
                    - (self.group1()[1] * other.group6()[3])
                    - (self.group1()[2] * other.group1()[0])
                    + (self.group1()[3] * other.group6()[1])
                    - (self.group2()[1] * other.group1()[3])
                    - (self.group2()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group8()[1]) - (self.group0()[1] * other.group8()[0]) + (self.group0()[2] * other[e1]) + (other.group7()[0] * self.group2()[1])
                    - (other.group7()[1] * self.group2()[0])
                    - (self.group1()[0] * other.group1()[1])
                    + (self.group1()[1] * other.group1()[0])
                    - (self.group1()[2] * other.group6()[3])
                    + (self.group1()[3] * other.group6()[2])
                    - (self.group2()[2] * other.group1()[3])
                    - (self.group2()[3] * other.group1()[2])),
                (-(other.group8()[0] * self.group1()[0]) - (other.group8()[1] * self.group1()[1]) - (other.group8()[2] * self.group1()[2]) - (self.group1()[3] * other[e1])
                    + (self.group2()[0] * other.group1()[0])
                    - (self.group2()[0] * other.group6()[0])
                    + (self.group2()[1] * other.group1()[1])
                    - (self.group2()[1] * other.group6()[1])
                    + (self.group2()[2] * other.group1()[2])
                    - (self.group2()[2] * other.group6()[2])
                    + (self.group2()[3] * other[e1])),
            ]),
            // e1234
            (-(self.group0()[0] * other.group1()[0])
                - (self.group0()[0] * other.group6()[0])
                - (self.group0()[1] * other.group1()[1])
                - (self.group0()[1] * other.group6()[1])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[2] * other.group6()[2])
                - (other.group7()[0] * self.group1()[0])
                - (other.group7()[1] * self.group1()[1])
                - (other.group7()[2] * self.group1()[2])
                + (self.group1()[3] * other.group1()[3])
                + (self.group2()[3] * other.group1()[3])),
        );
    }
}
impl GeometricAntiProduct<Plane> for AntiCircleRotor {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       29       44        0
    fn geometric_anti_product(self, other: Plane) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group1()[3] * other.group0()[0])),
                (-(self.group0()[1] * other.group0()[3]) - (self.group1()[3] * other.group0()[1])),
                (-(self.group0()[2] * other.group0()[3]) - (self.group1()[3] * other.group0()[2])),
                (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (-(self.group1()[0] * other.group0()[3]) - (self.group2()[1] * other.group0()[2]) + (self.group2()[2] * other.group0()[1])),
                (-(self.group1()[1] * other.group0()[3]) + (self.group2()[0] * other.group0()[2]) - (self.group2()[2] * other.group0()[0])),
                (-(self.group1()[2] * other.group0()[3]) - (self.group2()[0] * other.group0()[1]) + (self.group2()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1]) + (self.group2()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) - (self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0]) + (self.group2()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0]) + (self.group2()[3] * other.group0()[2])),
                ((self.group1()[3] * other.group0()[3]) + (self.group2()[0] * other.group0()[0]) + (self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2])
                    - (self.group2()[3] * other.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<RoundPoint> for AntiCircleRotor {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       40       55        0
    fn geometric_anti_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (self.group1()[0] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other[e2]) - (self.group1()[3] * other.group0()[0]) + (self.group2()[0] * other.group0()[3])),
                ((self.group0()[1] * other[e2]) - (self.group1()[3] * other.group0()[1]) + (self.group2()[1] * other.group0()[3])),
                ((self.group0()[2] * other[e2]) - (self.group1()[3] * other.group0()[2]) + (self.group2()[2] * other.group0()[3])),
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group1()[0] * other[e2]) - (self.group2()[1] * other.group0()[2]) + (self.group2()[2] * other.group0()[1])),
                ((self.group1()[1] * other[e2]) + (self.group2()[0] * other.group0()[2]) - (self.group2()[2] * other.group0()[0])),
                ((self.group1()[2] * other[e2]) - (self.group2()[0] * other.group0()[1]) + (self.group2()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group1()[3] * other.group0()[3])
                    + (self.group2()[3] * other.group0()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other[e2]) - (self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])
                    - (self.group2()[0] * other.group0()[3])
                    - (self.group2()[3] * other.group0()[0])),
                ((self.group0()[1] * other[e2]) + (self.group1()[0] * other.group0()[2])
                    - (self.group1()[2] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[3])
                    - (self.group2()[3] * other.group0()[1])),
                ((self.group0()[2] * other[e2]) - (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])
                    - (self.group2()[2] * other.group0()[3])
                    - (self.group2()[3] * other.group0()[2])),
                (-(self.group1()[3] * other[e2])
                    + (self.group2()[0] * other.group0()[0])
                    + (self.group2()[1] * other.group0()[1])
                    + (self.group2()[2] * other.group0()[2])
                    + (self.group2()[3] * other[e2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Scalar> for AntiCircleRotor {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0       21        0
    fn geometric_anti_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                (self.group0()[0] * other[scalar] * -1.0),
                (self.group0()[1] * other[scalar] * -1.0),
                (self.group0()[2] * other[scalar] * -1.0),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group1()[0] * other[scalar] * -1.0),
                (self.group1()[1] * other[scalar] * -1.0),
                (self.group1()[2] * other[scalar] * -1.0),
                (self.group1()[3] * other[scalar]),
            ]),
            // e235, e315, e125, e12345
            Simd32x4::from([
                (self.group2()[0] * other[scalar] * -1.0),
                (self.group2()[1] * other[scalar] * -1.0),
                (self.group2()[2] * other[scalar] * -1.0),
                (self.group2()[3] * other[scalar] * -1.0),
            ]),
        );
    }
}
impl GeometricAntiProduct<Sphere> for AntiCircleRotor {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       40       55        0
    fn geometric_anti_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) - (self.group1()[0] * other[e4315])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0]) - (self.group1()[1] * other[e4315])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) - (self.group1()[2] * other[e4315])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group1()[3] * other.group0()[0]) - (self.group2()[0] * other[e4315])),
                (-(self.group0()[1] * other.group0()[3]) - (self.group1()[3] * other.group0()[1]) - (self.group2()[1] * other[e4315])),
                (-(self.group0()[2] * other.group0()[3]) - (self.group1()[3] * other.group0()[2]) - (self.group2()[2] * other[e4315])),
                (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (-(self.group1()[0] * other.group0()[3]) - (self.group2()[1] * other.group0()[2]) + (self.group2()[2] * other.group0()[1])),
                (-(self.group1()[1] * other.group0()[3]) + (self.group2()[0] * other.group0()[2]) - (self.group2()[2] * other.group0()[0])),
                (-(self.group1()[2] * other.group0()[3]) - (self.group2()[0] * other.group0()[1]) + (self.group2()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group1()[3] * other[e4315])
                    - (self.group2()[3] * other[e4315])),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1]) - (self.group2()[0] * other[e4315])
                    + (self.group2()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) - (self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0]) - (self.group2()[1] * other[e4315])
                    + (self.group2()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0]) - (self.group2()[2] * other[e4315])
                    + (self.group2()[3] * other.group0()[2])),
                ((self.group1()[3] * other.group0()[3]) + (self.group2()[0] * other.group0()[0]) + (self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2])
                    - (self.group2()[3] * other.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorEven> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      160      176        0
    fn geometric_anti_product(self, other: VersorEven) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) + (self.group0()[1] * other.group3()[2])
                    - (self.group0()[2] * other.group1()[1])
                    - (self.group0()[2] * other.group3()[1])
                    + (self.group1()[0] * other.group3()[3])
                    + (self.group1()[1] * other.group0()[2])
                    - (self.group1()[2] * other.group0()[1])
                    + (self.group1()[3] * other.group0()[0])
                    + (self.group2()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[2]) - (self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group0()[3])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group0()[2] * other.group3()[0])
                    - (self.group1()[0] * other.group0()[2])
                    + (self.group1()[1] * other.group3()[3])
                    + (self.group1()[2] * other.group0()[0])
                    + (self.group1()[3] * other.group0()[1])
                    + (self.group2()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group1()[0]) - (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group0()[3])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group1()[0] * other.group0()[1])
                    - (self.group1()[1] * other.group0()[0])
                    + (self.group1()[2] * other.group3()[3])
                    + (self.group1()[3] * other.group0()[2])
                    + (self.group2()[3] * other.group0()[2])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])
                    + (self.group2()[3] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])
                    + (self.group1()[0] * other.group0()[3])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])
                    - (self.group1()[3] * other.group3()[0])
                    + (self.group2()[0] * other.group3()[3])
                    + (self.group2()[1] * other.group0()[2])
                    - (self.group2()[2] * other.group0()[1])
                    + (self.group2()[3] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group2()[3]) + (self.group0()[2] * other.group2()[0])
                    - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group1()[2] * other.group1()[0])
                    - (self.group1()[3] * other.group3()[1])
                    - (self.group2()[0] * other.group0()[2])
                    + (self.group2()[1] * other.group3()[3])
                    + (self.group2()[2] * other.group0()[0])
                    + (self.group2()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) + (self.group0()[2] * other.group2()[3]) + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[0])
                    + (self.group1()[2] * other.group0()[3])
                    - (self.group1()[3] * other.group3()[2])
                    + (self.group2()[0] * other.group0()[1])
                    - (self.group2()[1] * other.group0()[0])
                    + (self.group2()[2] * other.group3()[3])
                    + (self.group2()[3] * other.group1()[2])),
                (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])
                    + (self.group1()[0] * other.group3()[0])
                    + (self.group1()[1] * other.group3()[1])
                    + (self.group1()[2] * other.group3()[2])
                    + (self.group1()[3] * other.group0()[3])
                    + (self.group2()[0] * other.group0()[0])
                    + (self.group2()[1] * other.group0()[1])
                    + (self.group2()[2] * other.group0()[2])
                    - (self.group2()[3] * other.group1()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group1()[0] * other.group2()[3]) + (self.group1()[1] * other.group2()[2]) - (self.group1()[2] * other.group2()[1]) - (self.group1()[3] * other.group2()[0])
                    + (self.group2()[0] * other.group0()[3])
                    - (self.group2()[0] * other.group1()[3])
                    + (self.group2()[1] * other.group1()[2])
                    - (self.group2()[1] * other.group3()[2])
                    - (self.group2()[2] * other.group1()[1])
                    + (self.group2()[2] * other.group3()[1])
                    + (self.group2()[3] * other.group2()[0])),
                (-(self.group1()[0] * other.group2()[2]) + (self.group1()[1] * other.group2()[3]) + (self.group1()[2] * other.group2()[0])
                    - (self.group1()[3] * other.group2()[1])
                    - (self.group2()[0] * other.group1()[2])
                    + (self.group2()[0] * other.group3()[2])
                    + (self.group2()[1] * other.group0()[3])
                    - (self.group2()[1] * other.group1()[3])
                    + (self.group2()[2] * other.group1()[0])
                    - (self.group2()[2] * other.group3()[0])
                    + (self.group2()[3] * other.group2()[1])),
                ((self.group1()[0] * other.group2()[1]) - (self.group1()[1] * other.group2()[0]) + (self.group1()[2] * other.group2()[3]) - (self.group1()[3] * other.group2()[2])
                    + (self.group2()[0] * other.group1()[1])
                    - (self.group2()[0] * other.group3()[1])
                    - (self.group2()[1] * other.group1()[0])
                    + (self.group2()[1] * other.group3()[0])
                    + (self.group2()[2] * other.group0()[3])
                    - (self.group2()[2] * other.group1()[3])
                    + (self.group2()[3] * other.group2()[2])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[0] * other.group3()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])
                    + (self.group1()[3] * other.group3()[3])
                    + (self.group2()[3] * other.group3()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group2()[2])
                    - (self.group0()[2] * other.group2()[1])
                    - (self.group1()[0] * other.group1()[3])
                    - (self.group1()[1] * other.group3()[2])
                    + (self.group1()[2] * other.group3()[1])
                    + (self.group1()[3] * other.group1()[0])
                    - (self.group2()[0] * other.group3()[3])
                    - (self.group2()[1] * other.group0()[2])
                    + (self.group2()[2] * other.group0()[1])
                    - (self.group2()[3] * other.group3()[0])),
                (-(self.group0()[0] * other.group2()[2])
                    + (self.group0()[1] * other.group2()[3])
                    + (self.group0()[2] * other.group2()[0])
                    + (self.group1()[0] * other.group3()[2])
                    - (self.group1()[1] * other.group1()[3])
                    - (self.group1()[2] * other.group3()[0])
                    + (self.group1()[3] * other.group1()[1])
                    + (self.group2()[0] * other.group0()[2])
                    - (self.group2()[1] * other.group3()[3])
                    - (self.group2()[2] * other.group0()[0])
                    - (self.group2()[3] * other.group3()[1])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) + (self.group0()[2] * other.group2()[3]) - (self.group1()[0] * other.group3()[1])
                    + (self.group1()[1] * other.group3()[0])
                    - (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])
                    - (self.group2()[0] * other.group0()[1])
                    + (self.group2()[1] * other.group0()[0])
                    - (self.group2()[2] * other.group3()[3])
                    - (self.group2()[3] * other.group3()[2])),
                (-(self.group1()[0] * other.group2()[0])
                    - (self.group1()[1] * other.group2()[1])
                    - (self.group1()[2] * other.group2()[2])
                    - (self.group1()[3] * other.group2()[3])
                    - (self.group2()[0] * other.group1()[0])
                    + (self.group2()[0] * other.group3()[0])
                    - (self.group2()[1] * other.group1()[1])
                    + (self.group2()[1] * other.group3()[1])
                    - (self.group2()[2] * other.group1()[2])
                    + (self.group2()[2] * other.group3()[2])
                    + (self.group2()[3] * other.group2()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorOdd> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      160      176        0
    fn geometric_anti_product(self, other: VersorOdd) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) + (self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group1()[2])
                    + (self.group0()[1] * other.group3()[2])
                    + (self.group0()[2] * other.group1()[1])
                    - (self.group0()[2] * other.group3()[1])
                    - (self.group1()[0] * other.group2()[3])
                    - (self.group1()[1] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[1])
                    - (self.group1()[3] * other.group0()[0])
                    - (self.group2()[3] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[0] * other.group3()[2]) - (self.group0()[1] * other.group0()[3]) + (self.group0()[1] * other.group1()[3])
                    - (self.group0()[2] * other.group1()[0])
                    + (self.group0()[2] * other.group3()[0])
                    + (self.group1()[0] * other.group0()[2])
                    - (self.group1()[1] * other.group2()[3])
                    - (self.group1()[2] * other.group0()[0])
                    - (self.group1()[3] * other.group0()[1])
                    - (self.group2()[3] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group1()[0])
                    - (self.group0()[1] * other.group3()[0])
                    - (self.group0()[2] * other.group0()[3])
                    + (self.group0()[2] * other.group1()[3])
                    - (self.group1()[0] * other.group0()[1])
                    + (self.group1()[1] * other.group0()[0])
                    - (self.group1()[2] * other.group2()[3])
                    - (self.group1()[3] * other.group0()[2])
                    - (self.group2()[3] * other.group0()[2])),
                ((self.group0()[0] * other.group2()[0])
                    + (self.group0()[1] * other.group2()[1])
                    + (self.group0()[2] * other.group2()[2])
                    + (self.group1()[0] * other.group1()[0])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])
                    + (self.group2()[0] * other.group0()[0])
                    + (self.group2()[1] * other.group0()[1])
                    + (self.group2()[2] * other.group0()[2])
                    - (self.group2()[3] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group3()[3]) - (self.group0()[1] * other.group2()[2]) + (self.group0()[2] * other.group2()[1])
                    - (self.group1()[0] * other.group0()[3])
                    - (self.group1()[1] * other.group1()[2])
                    + (self.group1()[2] * other.group1()[1])
                    - (self.group1()[3] * other.group3()[0])
                    - (self.group2()[0] * other.group2()[3])
                    - (self.group2()[1] * other.group0()[2])
                    + (self.group2()[2] * other.group0()[1])
                    - (self.group2()[3] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[1] * other.group3()[3]) - (self.group0()[2] * other.group2()[0]) + (self.group1()[0] * other.group1()[2])
                    - (self.group1()[1] * other.group0()[3])
                    - (self.group1()[2] * other.group1()[0])
                    - (self.group1()[3] * other.group3()[1])
                    + (self.group2()[0] * other.group0()[2])
                    - (self.group2()[1] * other.group2()[3])
                    - (self.group2()[2] * other.group0()[0])
                    - (self.group2()[3] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[0])
                    - (self.group0()[2] * other.group3()[3])
                    - (self.group1()[0] * other.group1()[1])
                    + (self.group1()[1] * other.group1()[0])
                    - (self.group1()[2] * other.group0()[3])
                    - (self.group1()[3] * other.group3()[2])
                    - (self.group2()[0] * other.group0()[1])
                    + (self.group2()[1] * other.group0()[0])
                    - (self.group2()[2] * other.group2()[3])
                    - (self.group2()[3] * other.group1()[2])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group1()[0] * other.group3()[0])
                    - (self.group1()[1] * other.group3()[1])
                    - (self.group1()[2] * other.group3()[2])
                    + (self.group1()[3] * other.group0()[3])
                    + (self.group2()[0] * other.group0()[0])
                    + (self.group2()[1] * other.group0()[1])
                    + (self.group2()[2] * other.group0()[2])
                    + (self.group2()[3] * other.group1()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group1()[0] * other.group3()[3]) - (self.group1()[1] * other.group2()[2])
                    + (self.group1()[2] * other.group2()[1])
                    + (self.group1()[3] * other.group2()[0])
                    - (self.group2()[0] * other.group0()[3])
                    - (self.group2()[0] * other.group1()[3])
                    - (self.group2()[1] * other.group1()[2])
                    - (self.group2()[1] * other.group3()[2])
                    + (self.group2()[2] * other.group1()[1])
                    + (self.group2()[2] * other.group3()[1])
                    - (self.group2()[3] * other.group2()[0])),
                ((self.group1()[0] * other.group2()[2]) - (self.group1()[1] * other.group3()[3]) - (self.group1()[2] * other.group2()[0])
                    + (self.group1()[3] * other.group2()[1])
                    + (self.group2()[0] * other.group1()[2])
                    + (self.group2()[0] * other.group3()[2])
                    - (self.group2()[1] * other.group0()[3])
                    - (self.group2()[1] * other.group1()[3])
                    - (self.group2()[2] * other.group1()[0])
                    - (self.group2()[2] * other.group3()[0])
                    - (self.group2()[3] * other.group2()[1])),
                (-(self.group1()[0] * other.group2()[1]) + (self.group1()[1] * other.group2()[0]) - (self.group1()[2] * other.group3()[3])
                    + (self.group1()[3] * other.group2()[2])
                    - (self.group2()[0] * other.group1()[1])
                    - (self.group2()[0] * other.group3()[1])
                    + (self.group2()[1] * other.group1()[0])
                    + (self.group2()[1] * other.group3()[0])
                    - (self.group2()[2] * other.group0()[3])
                    - (self.group2()[2] * other.group1()[3])
                    - (self.group2()[3] * other.group2()[2])),
                ((self.group1()[0] * other.group2()[0])
                    + (self.group1()[1] * other.group2()[1])
                    + (self.group1()[2] * other.group2()[2])
                    + (self.group1()[3] * other.group3()[3])
                    + (self.group2()[0] * other.group1()[0])
                    + (self.group2()[0] * other.group3()[0])
                    + (self.group2()[1] * other.group1()[1])
                    + (self.group2()[1] * other.group3()[1])
                    + (self.group2()[2] * other.group1()[2])
                    + (self.group2()[2] * other.group3()[2])
                    - (self.group2()[3] * other.group3()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group3()[2])
                    - (self.group1()[2] * other.group3()[1])
                    + (self.group1()[3] * other.group1()[0])
                    - (self.group2()[0] * other.group2()[3])
                    - (self.group2()[1] * other.group0()[2])
                    + (self.group2()[2] * other.group0()[1])
                    + (self.group2()[3] * other.group3()[0])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group3()[3]) + (self.group0()[2] * other.group2()[0])
                    - (self.group1()[0] * other.group3()[2])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group3()[0])
                    + (self.group1()[3] * other.group1()[1])
                    + (self.group2()[0] * other.group0()[2])
                    - (self.group2()[1] * other.group2()[3])
                    - (self.group2()[2] * other.group0()[0])
                    + (self.group2()[3] * other.group3()[1])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) + (self.group0()[2] * other.group3()[3]) + (self.group1()[0] * other.group3()[1])
                    - (self.group1()[1] * other.group3()[0])
                    + (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])
                    - (self.group2()[0] * other.group0()[1])
                    + (self.group2()[1] * other.group0()[0])
                    - (self.group2()[2] * other.group2()[3])
                    + (self.group2()[3] * other.group3()[2])),
                ((self.group0()[0] * other.group1()[0]) - (self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group1()[1]) - (self.group0()[1] * other.group3()[1])
                    + (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])
                    + (self.group1()[0] * other.group0()[0])
                    + (self.group1()[1] * other.group0()[1])
                    + (self.group1()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group2()[3])
                    - (self.group2()[3] * other.group2()[3])),
            ]),
        );
    }
}
impl InfixGeometricAntiProduct for AntiDipoleInversion {}
impl GeometricAntiProduct<AntiCircleRotor> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      149      165        0
    fn geometric_anti_product(self, other: AntiCircleRotor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group1()[1])
                    - (other.group0()[2] * self.group3()[1])
                    - (self.group0()[0] * other.group1()[3])
                    + (self.group0()[0] * other.group2()[3])
                    + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])
                    + (other.group1()[0] * self.group2()[3])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[0] * self.group3()[2]) - (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group1()[0])
                    + (other.group0()[2] * self.group3()[0])
                    - (self.group0()[0] * other.group1()[2])
                    - (self.group0()[1] * other.group1()[3])
                    + (self.group0()[1] * other.group2()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (other.group1()[1] * self.group2()[3])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group1()[0])
                    - (other.group0()[1] * self.group3()[0])
                    - (other.group0()[2] * self.group1()[3])
                    + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])
                    - (self.group0()[2] * other.group1()[3])
                    + (self.group0()[2] * other.group2()[3])
                    + (other.group1()[2] * self.group2()[3])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1]) + (self.group0()[1] * other.group2()[2])
                    - (self.group0()[2] * other.group2()[1])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])
                    - (other.group1()[3] * self.group3()[0])
                    + (other.group2()[0] * self.group2()[3])
                    + (other.group2()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group3()[3]) - (other.group0()[2] * self.group2()[0]) - (self.group0()[0] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[0])
                    + (other.group1()[0] * self.group1()[2])
                    - (other.group1()[2] * self.group1()[0])
                    - (other.group1()[3] * self.group3()[1])
                    + (other.group2()[1] * self.group2()[3])
                    + (other.group2()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[1])
                    + (other.group0()[1] * self.group2()[0])
                    + (other.group0()[2] * self.group3()[3])
                    + (self.group0()[0] * other.group2()[1])
                    - (self.group0()[1] * other.group2()[0])
                    - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    - (other.group1()[3] * self.group3()[2])
                    + (other.group2()[2] * self.group2()[3])
                    + (other.group2()[3] * self.group1()[2])),
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    + (other.group1()[0] * self.group3()[0])
                    + (other.group1()[1] * self.group3()[1])
                    + (other.group1()[2] * self.group3()[2])
                    - (other.group2()[3] * self.group1()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group1()[0] * self.group3()[3]) - (other.group1()[1] * self.group2()[2])
                    + (other.group1()[2] * self.group2()[1])
                    + (other.group1()[3] * self.group2()[0])
                    + (other.group2()[0] * self.group1()[3])
                    - (other.group2()[1] * self.group1()[2])
                    - (other.group2()[1] * self.group3()[2])
                    + (other.group2()[2] * self.group1()[1])
                    + (other.group2()[2] * self.group3()[1])
                    + (other.group2()[3] * self.group2()[0])),
                ((other.group1()[0] * self.group2()[2]) + (other.group1()[1] * self.group3()[3]) - (other.group1()[2] * self.group2()[0])
                    + (other.group1()[3] * self.group2()[1])
                    + (other.group2()[0] * self.group1()[2])
                    + (other.group2()[0] * self.group3()[2])
                    + (other.group2()[1] * self.group1()[3])
                    - (other.group2()[2] * self.group1()[0])
                    - (other.group2()[2] * self.group3()[0])
                    + (other.group2()[3] * self.group2()[1])),
                (-(other.group1()[0] * self.group2()[1])
                    + (other.group1()[1] * self.group2()[0])
                    + (other.group1()[2] * self.group3()[3])
                    + (other.group1()[3] * self.group2()[2])
                    - (other.group2()[0] * self.group1()[1])
                    - (other.group2()[0] * self.group3()[1])
                    + (other.group2()[1] * self.group1()[0])
                    + (other.group2()[1] * self.group3()[0])
                    + (other.group2()[2] * self.group1()[3])
                    + (other.group2()[3] * self.group2()[2])),
                (-(other.group0()[0] * self.group1()[0]) + (other.group0()[0] * self.group3()[0]) - (other.group0()[1] * self.group1()[1])
                    + (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group1()[3] * self.group2()[3])
                    + (other.group2()[3] * self.group2()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1])
                    + (self.group0()[1] * other.group2()[2])
                    - (self.group0()[2] * other.group2()[1])
                    - (other.group1()[0] * self.group1()[3])
                    + (other.group1()[1] * self.group3()[2])
                    - (other.group1()[2] * self.group3()[1])
                    + (other.group1()[3] * self.group1()[0])
                    + (other.group2()[0] * self.group2()[3])
                    - (other.group2()[3] * self.group3()[0])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group3()[3]) + (other.group0()[2] * self.group2()[0])
                    - (self.group0()[0] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[0])
                    - (other.group1()[0] * self.group3()[2])
                    - (other.group1()[1] * self.group1()[3])
                    + (other.group1()[2] * self.group3()[0])
                    + (other.group1()[3] * self.group1()[1])
                    + (other.group2()[1] * self.group2()[3])
                    - (other.group2()[3] * self.group3()[1])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) - (other.group0()[2] * self.group3()[3]) + (self.group0()[0] * other.group2()[1])
                    - (self.group0()[1] * other.group2()[0])
                    + (other.group1()[0] * self.group3()[1])
                    - (other.group1()[1] * self.group3()[0])
                    - (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])
                    + (other.group2()[2] * self.group2()[3])
                    - (other.group2()[3] * self.group3()[2])),
                (-(other.group1()[0] * self.group2()[0]) - (other.group1()[1] * self.group2()[1]) - (other.group1()[2] * self.group2()[2])
                    + (other.group1()[3] * self.group3()[3])
                    - (other.group2()[0] * self.group1()[0])
                    - (other.group2()[0] * self.group3()[0])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[1] * self.group3()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[2])
                    + (other.group2()[3] * self.group3()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDipoleInversion> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      209      225        0
    fn geometric_anti_product(self, other: AntiDipoleInversion) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group1()[1])
                    - (other.group0()[2] * self.group3()[1])
                    + (self.group0()[0] * other.group1()[3])
                    + (self.group0()[1] * other.group1()[2])
                    + (self.group0()[1] * other.group3()[2])
                    - (self.group0()[2] * other.group1()[1])
                    - (self.group0()[2] * other.group3()[1])
                    + (other.group1()[0] * self.group2()[3])
                    + (other.group2()[3] * self.group1()[0])
                    - (other.group2()[3] * self.group3()[0])
                    + (other.group3()[0] * self.group2()[3])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[0] * self.group3()[2]) - (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group1()[0])
                    + (other.group0()[2] * self.group3()[0])
                    - (self.group0()[0] * other.group1()[2])
                    - (self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group0()[2] * other.group3()[0])
                    + (other.group1()[1] * self.group2()[3])
                    + (other.group2()[3] * self.group1()[1])
                    - (other.group2()[3] * self.group3()[1])
                    + (other.group3()[1] * self.group2()[3])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group1()[0])
                    - (other.group0()[1] * self.group3()[0])
                    - (other.group0()[2] * self.group1()[3])
                    + (self.group0()[0] * other.group1()[1])
                    + (self.group0()[0] * other.group3()[1])
                    - (self.group0()[1] * other.group1()[0])
                    - (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (other.group1()[2] * self.group2()[3])
                    + (other.group2()[3] * self.group1()[2])
                    - (other.group2()[3] * self.group3()[2])
                    + (other.group3()[2] * self.group2()[3])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    + (other.group1()[3] * self.group1()[3])
                    + (other.group2()[3] * self.group3()[3])
                    - (other.group3()[0] * self.group3()[0])
                    - (other.group3()[1] * self.group3()[1])
                    - (other.group3()[2] * self.group3()[2])
                    + (other.group3()[3] * self.group2()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[1])
                    + (self.group0()[0] * other.group3()[3])
                    + (self.group0()[1] * other.group2()[2])
                    - (self.group0()[2] * other.group2()[1])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group1()[3] * self.group3()[0])
                    + (other.group2()[0] * self.group2()[3])
                    + (other.group2()[3] * self.group2()[0])
                    + (other.group3()[0] * self.group1()[3])
                    - (other.group3()[1] * self.group3()[2])
                    + (other.group3()[2] * self.group3()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group3()[3]) - (other.group0()[2] * self.group2()[0]) - (self.group0()[0] * other.group2()[2])
                    + (self.group0()[1] * other.group3()[3])
                    + (self.group0()[2] * other.group2()[0])
                    + (other.group1()[0] * self.group1()[2])
                    - (other.group1()[2] * self.group1()[0])
                    + (other.group1()[3] * self.group3()[1])
                    + (other.group2()[1] * self.group2()[3])
                    + (other.group2()[3] * self.group2()[1])
                    + (other.group3()[0] * self.group3()[2])
                    + (other.group3()[1] * self.group1()[3])
                    - (other.group3()[2] * self.group3()[0])),
                (-(other.group0()[0] * self.group2()[1])
                    + (other.group0()[1] * self.group2()[0])
                    + (other.group0()[2] * self.group3()[3])
                    + (self.group0()[0] * other.group2()[1])
                    - (self.group0()[1] * other.group2()[0])
                    + (self.group0()[2] * other.group3()[3])
                    - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[3] * self.group3()[2])
                    + (other.group2()[2] * self.group2()[3])
                    + (other.group2()[3] * self.group2()[2])
                    - (other.group3()[0] * self.group3()[1])
                    + (other.group3()[1] * self.group3()[0])
                    + (other.group3()[2] * self.group1()[3])),
                (-(other.group0()[0] * self.group2()[0]) - (other.group0()[1] * self.group2()[1]) - (other.group0()[2] * self.group2()[2])
                    + (self.group0()[0] * other.group2()[0])
                    + (self.group0()[1] * other.group2()[1])
                    + (self.group0()[2] * other.group2()[2])
                    - (other.group1()[0] * self.group3()[0])
                    - (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group3()[2])
                    + (other.group2()[3] * self.group3()[3])
                    - (other.group3()[0] * self.group1()[0])
                    - (other.group3()[1] * self.group1()[1])
                    - (other.group3()[2] * self.group1()[2])
                    - (other.group3()[3] * self.group2()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((other.group1()[0] * self.group3()[3]) - (other.group1()[1] * self.group2()[2]) + (other.group1()[2] * self.group2()[1]) - (other.group1()[3] * self.group2()[0])
                    + (other.group2()[0] * self.group1()[3])
                    - (other.group2()[1] * self.group1()[2])
                    - (other.group2()[1] * self.group3()[2])
                    + (other.group2()[2] * self.group1()[1])
                    + (other.group2()[2] * self.group3()[1])
                    - (other.group3()[0] * self.group3()[3])
                    + (other.group3()[1] * self.group2()[2])
                    - (other.group3()[2] * self.group2()[1])
                    + (other.group3()[3] * self.group1()[0])
                    + (other.group3()[3] * self.group3()[0])),
                ((other.group1()[0] * self.group2()[2]) + (other.group1()[1] * self.group3()[3]) - (other.group1()[2] * self.group2()[0]) - (other.group1()[3] * self.group2()[1])
                    + (other.group2()[0] * self.group1()[2])
                    + (other.group2()[0] * self.group3()[2])
                    + (other.group2()[1] * self.group1()[3])
                    - (other.group2()[2] * self.group1()[0])
                    - (other.group2()[2] * self.group3()[0])
                    - (other.group3()[0] * self.group2()[2])
                    - (other.group3()[1] * self.group3()[3])
                    + (other.group3()[2] * self.group2()[0])
                    + (other.group3()[3] * self.group1()[1])
                    + (other.group3()[3] * self.group3()[1])),
                (-(other.group1()[0] * self.group2()[1]) + (other.group1()[1] * self.group2()[0]) + (other.group1()[2] * self.group3()[3])
                    - (other.group1()[3] * self.group2()[2])
                    - (other.group2()[0] * self.group1()[1])
                    - (other.group2()[0] * self.group3()[1])
                    + (other.group2()[1] * self.group1()[0])
                    + (other.group2()[1] * self.group3()[0])
                    + (other.group2()[2] * self.group1()[3])
                    + (other.group3()[0] * self.group2()[1])
                    - (other.group3()[1] * self.group2()[0])
                    - (other.group3()[2] * self.group3()[3])
                    + (other.group3()[3] * self.group1()[2])
                    + (other.group3()[3] * self.group3()[2])),
                (-(other.group1()[0] * self.group2()[0])
                    - (other.group1()[1] * self.group2()[1])
                    - (other.group1()[2] * self.group2()[2])
                    - (other.group1()[3] * self.group3()[3])
                    - (other.group2()[0] * self.group1()[0])
                    - (other.group2()[0] * self.group3()[0])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[1] * self.group3()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[2])
                    + (other.group3()[0] * self.group2()[0])
                    + (other.group3()[1] * self.group2()[1])
                    + (other.group3()[2] * self.group2()[2])
                    + (other.group3()[3] * self.group1()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1])
                    - (self.group0()[0] * other.group3()[3])
                    - (self.group0()[1] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[1])
                    + (other.group1()[0] * self.group1()[3])
                    - (other.group1()[1] * self.group3()[2])
                    + (other.group1()[2] * self.group3()[1])
                    + (other.group1()[3] * self.group1()[0])
                    - (other.group2()[0] * self.group2()[3])
                    + (other.group2()[3] * self.group2()[0])
                    - (other.group3()[1] * self.group1()[2])
                    + (other.group3()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group3()[3]) - (other.group0()[2] * self.group2()[0]) + (self.group0()[0] * other.group2()[2])
                    - (self.group0()[1] * other.group3()[3])
                    - (self.group0()[2] * other.group2()[0])
                    + (other.group1()[0] * self.group3()[2])
                    + (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group3()[0])
                    + (other.group1()[3] * self.group1()[1])
                    - (other.group2()[1] * self.group2()[3])
                    + (other.group2()[3] * self.group2()[1])
                    + (other.group3()[0] * self.group1()[2])
                    - (other.group3()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) + (other.group0()[2] * self.group3()[3])
                    - (self.group0()[0] * other.group2()[1])
                    + (self.group0()[1] * other.group2()[0])
                    - (self.group0()[2] * other.group3()[3])
                    - (other.group1()[0] * self.group3()[1])
                    + (other.group1()[1] * self.group3()[0])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])
                    - (other.group2()[2] * self.group2()[3])
                    + (other.group2()[3] * self.group2()[2])
                    - (other.group3()[0] * self.group1()[1])
                    + (other.group3()[1] * self.group1()[0])),
                (-(other.group0()[0] * self.group1()[0]) + (other.group0()[0] * self.group3()[0]) - (other.group0()[1] * self.group1()[1])
                    + (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[0] * other.group3()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])
                    + (other.group1()[3] * self.group2()[3])
                    - (other.group2()[3] * self.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       14       30        0
    fn geometric_anti_product(self, other: AntiDualNum) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) - (other.group0()[0] * self.group3()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group0()[2])),
                (other.group0()[0] * self.group3()[3]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group1()[2])),
                (-(other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self.group1()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[1] * self.group2()[0]),
                (other.group0()[1] * self.group2()[1]),
                (other.group0()[1] * self.group2()[2]),
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group2()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group2()[0]) - (other.group0()[1] * self.group3()[0])),
                (-(other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group3()[1])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group3()[2])),
                (other.group0()[1] * self.group3()[3]),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiFlatPoint> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       44       60        0
    fn geometric_anti_product(self, other: AntiFlatPoint) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group1()[3] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (self.group2()[3] * other.group0()[0]) + (self.group3()[0] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[2])
                    + (self.group0()[2] * other.group0()[0])
                    + (self.group2()[3] * other.group0()[1])
                    + (self.group3()[1] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group2()[3] * other.group0()[2]) + (self.group3()[2] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1]) + (self.group1()[3] * other.group0()[0]) - (self.group2()[0] * other.group0()[3])
                    + (self.group3()[1] * other.group0()[2])
                    - (self.group3()[2] * other.group0()[1])),
                (-(self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0]) + (self.group1()[3] * other.group0()[1])
                    - (self.group2()[1] * other.group0()[3])
                    - (self.group3()[0] * other.group0()[2])
                    + (self.group3()[2] * other.group0()[0])),
                ((self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0]) + (self.group1()[3] * other.group0()[2]) - (self.group2()[2] * other.group0()[3])
                    + (self.group3()[0] * other.group0()[1])
                    - (self.group3()[1] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])
                    - (self.group3()[0] * other.group0()[0])
                    - (self.group3()[1] * other.group0()[1])
                    - (self.group3()[2] * other.group0()[2])
                    - (self.group3()[3] * other.group0()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1]) + (self.group1()[0] * other.group0()[3])
                    - (self.group2()[3] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3]) - (self.group2()[3] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[3])
                    - (self.group2()[3] * other.group0()[2])),
                (self.group2()[3] * other.group0()[3]),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiFlector> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      104      120        0
    fn geometric_anti_product(self, other: AntiFlector) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) + (self.group2()[3] * other.group1()[0])),
                (-(self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group0()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group2()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group0()[3]) + (self.group2()[3] * other.group1()[2])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group1()[3] * other.group0()[3])
                    + (self.group2()[3] * other.group1()[3])
                    - (self.group3()[0] * other.group1()[0])
                    - (self.group3()[1] * other.group1()[1])
                    - (self.group3()[2] * other.group1()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])
                    + (self.group1()[3] * other.group1()[0])
                    + (self.group2()[3] * other.group0()[0])
                    + (self.group3()[0] * other.group0()[3])
                    + (self.group3()[1] * other.group1()[2])
                    - (self.group3()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group0()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group0()[0])
                    + (self.group1()[3] * other.group1()[1])
                    + (self.group2()[3] * other.group0()[1])
                    - (self.group3()[0] * other.group1()[2])
                    + (self.group3()[1] * other.group0()[3])
                    + (self.group3()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])
                    + (self.group2()[3] * other.group0()[2])
                    + (self.group3()[0] * other.group1()[1])
                    - (self.group3()[1] * other.group1()[0])
                    + (self.group3()[2] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group2()[3] * other.group1()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group1()[0] * other.group1()[3]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1]) + (self.group1()[3] * other.group0()[0])
                    - (self.group2()[0] * other.group0()[3])
                    - (self.group2()[1] * other.group1()[2])
                    + (self.group2()[2] * other.group1()[1])
                    + (self.group3()[0] * other.group1()[3])
                    + (self.group3()[1] * other.group0()[2])
                    - (self.group3()[2] * other.group0()[1])
                    - (self.group3()[3] * other.group1()[0])),
                (-(self.group1()[0] * other.group0()[2])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group0()[0])
                    + (self.group1()[3] * other.group0()[1])
                    + (self.group2()[0] * other.group1()[2])
                    - (self.group2()[1] * other.group0()[3])
                    - (self.group2()[2] * other.group1()[0])
                    - (self.group3()[0] * other.group0()[2])
                    + (self.group3()[1] * other.group1()[3])
                    + (self.group3()[2] * other.group0()[0])
                    - (self.group3()[3] * other.group1()[1])),
                ((self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0]) + (self.group1()[2] * other.group1()[3]) + (self.group1()[3] * other.group0()[2])
                    - (self.group2()[0] * other.group1()[1])
                    + (self.group2()[1] * other.group1()[0])
                    - (self.group2()[2] * other.group0()[3])
                    + (self.group3()[0] * other.group0()[1])
                    - (self.group3()[1] * other.group0()[0])
                    + (self.group3()[2] * other.group1()[3])
                    - (self.group3()[3] * other.group1()[2])),
                (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])
                    + (self.group1()[3] * other.group1()[3])
                    + (self.group2()[0] * other.group1()[0])
                    + (self.group2()[1] * other.group1()[1])
                    + (self.group2()[2] * other.group1()[2])
                    - (self.group3()[0] * other.group0()[0])
                    - (self.group3()[1] * other.group0()[1])
                    - (self.group3()[2] * other.group0()[2])
                    - (self.group3()[3] * other.group0()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group0()[2])
                    + (self.group0()[2] * other.group0()[1])
                    + (self.group1()[0] * other.group0()[3])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])
                    - (self.group2()[3] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group0()[0]) - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group1()[2] * other.group1()[0])
                    - (self.group2()[3] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group1()[3])
                    + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[0])
                    + (self.group1()[2] * other.group0()[3])
                    - (self.group2()[3] * other.group0()[2])),
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])
                    + (self.group2()[3] * other.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiLine> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       74       90        0
    fn geometric_anti_product(self, other: AntiLine) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (other.group0()[0] * self.group2()[3])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0]) + (other.group0()[1] * self.group2()[3])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (other.group0()[2] * self.group2()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (other.group1()[0] * self.group2()[3])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0]) + (other.group0()[0] * self.group1()[2])
                    - (other.group0()[2] * self.group1()[0])
                    + (other.group1()[1] * self.group2()[3])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) - (other.group0()[0] * self.group1()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group2()[3])),
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])
                    + (other.group0()[0] * self.group3()[0])
                    + (other.group0()[1] * self.group3()[1])
                    + (other.group0()[2] * self.group3()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1]) + (other.group1()[0] * self.group1()[3])
                    - (other.group1()[1] * self.group1()[2])
                    - (other.group1()[1] * self.group3()[2])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group1()[2] * self.group3()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group3()[3]) - (other.group0()[2] * self.group2()[0])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[0] * self.group3()[2])
                    + (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group1()[0])
                    - (other.group1()[2] * self.group3()[0])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) + (other.group0()[2] * self.group3()[3])
                    - (other.group1()[0] * self.group1()[1])
                    - (other.group1()[0] * self.group3()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[1] * self.group3()[0])
                    + (other.group1()[2] * self.group1()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) - (other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group3()[2])
                    - (other.group0()[2] * self.group3()[1])
                    + (other.group1()[0] * self.group2()[3])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])
                    - (other.group0()[0] * self.group3()[2])
                    - (other.group0()[1] * self.group1()[3])
                    + (other.group0()[2] * self.group3()[0])
                    + (other.group1()[1] * self.group2()[3])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (other.group0()[0] * self.group3()[1])
                    - (other.group0()[1] * self.group3()[0])
                    - (other.group0()[2] * self.group1()[3])
                    + (other.group1()[2] * self.group2()[3])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[0] * self.group3()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[2] * self.group3()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiMotor> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      104      120        0
    fn geometric_anti_product(self, other: AntiMotor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (self.group2()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[2])
                    + (self.group0()[1] * other.group0()[3])
                    + (self.group0()[2] * other.group0()[0])
                    + (self.group2()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[3]) + (self.group2()[3] * other.group0()[2])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])
                    + (self.group2()[3] * other.group1()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])
                    + (self.group1()[0] * other.group0()[3])
                    + (self.group1()[1] * other.group0()[2])
                    - (self.group1()[2] * other.group0()[1])
                    + (self.group2()[3] * other.group1()[0])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group1()[0])
                    - (self.group1()[0] * other.group0()[2])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group1()[2] * other.group0()[0])
                    + (self.group2()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[3]) + (self.group1()[0] * other.group0()[1])
                    - (self.group1()[1] * other.group0()[0])
                    + (self.group1()[2] * other.group0()[3])
                    + (self.group2()[3] * other.group1()[2])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group0()[3])
                    + (self.group2()[3] * other.group1()[3])
                    + (self.group3()[0] * other.group0()[0])
                    + (self.group3()[1] * other.group0()[1])
                    + (self.group3()[2] * other.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group1()[0] * other.group1()[3]) + (self.group1()[1] * other.group1()[2]) - (self.group1()[2] * other.group1()[1])
                    + (self.group1()[3] * other.group1()[0])
                    + (self.group2()[0] * other.group0()[3])
                    + (self.group2()[1] * other.group0()[2])
                    - (self.group2()[2] * other.group0()[1])
                    + (self.group3()[0] * other.group1()[3])
                    + (self.group3()[1] * other.group1()[2])
                    - (self.group3()[2] * other.group1()[1])
                    + (self.group3()[3] * other.group0()[0])),
                (-(self.group1()[0] * other.group1()[2])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group1()[0])
                    + (self.group1()[3] * other.group1()[1])
                    - (self.group2()[0] * other.group0()[2])
                    + (self.group2()[1] * other.group0()[3])
                    + (self.group2()[2] * other.group0()[0])
                    - (self.group3()[0] * other.group1()[2])
                    + (self.group3()[1] * other.group1()[3])
                    + (self.group3()[2] * other.group1()[0])
                    + (self.group3()[3] * other.group0()[1])),
                ((self.group1()[0] * other.group1()[1]) - (self.group1()[1] * other.group1()[0])
                    + (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])
                    + (self.group2()[0] * other.group0()[1])
                    - (self.group2()[1] * other.group0()[0])
                    + (self.group2()[2] * other.group0()[3])
                    + (self.group3()[0] * other.group1()[1])
                    - (self.group3()[1] * other.group1()[0])
                    + (self.group3()[2] * other.group1()[3])
                    + (self.group3()[3] * other.group0()[2])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group2()[3] * other.group0()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) - (self.group1()[3] * other.group0()[0])
                    + (self.group2()[3] * other.group1()[0])
                    - (self.group3()[0] * other.group0()[3])
                    - (self.group3()[1] * other.group0()[2])
                    + (self.group3()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group1()[0])
                    - (self.group1()[3] * other.group0()[1])
                    + (self.group2()[3] * other.group1()[1])
                    + (self.group3()[0] * other.group0()[2])
                    - (self.group3()[1] * other.group0()[3])
                    - (self.group3()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[3]) - (self.group1()[3] * other.group0()[2])
                    + (self.group2()[3] * other.group1()[2])
                    - (self.group3()[0] * other.group0()[1])
                    + (self.group3()[1] * other.group0()[0])
                    - (self.group3()[2] * other.group0()[3])),
                (-(self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1]) - (self.group1()[2] * other.group1()[2])
                    + (self.group1()[3] * other.group1()[3])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])
                    - (self.group3()[0] * other.group1()[0])
                    - (self.group3()[1] * other.group1()[1])
                    - (self.group3()[2] * other.group1()[2])
                    + (self.group3()[3] * other.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiPlane> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       44       60        0
    fn geometric_anti_product(self, other: AntiPlane) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (self.group2()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0]) + (self.group2()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group2()[3] * other.group0()[2])),
                ((self.group2()[3] * other.group0()[3]) - (self.group3()[0] * other.group0()[0]) - (self.group3()[1] * other.group0()[1]) - (self.group3()[2] * other.group0()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[3] * other.group0()[0]) + (self.group3()[1] * other.group0()[2]) - (self.group3()[2] * other.group0()[1])),
                ((self.group0()[1] * other.group0()[3]) + (self.group1()[3] * other.group0()[1]) - (self.group3()[0] * other.group0()[2]) + (self.group3()[2] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[3] * other.group0()[2]) + (self.group3()[0] * other.group0()[1]) - (self.group3()[1] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])
                    - (self.group2()[3] * other.group0()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) - (self.group2()[1] * other.group0()[2]) + (self.group2()[2] * other.group0()[1]) + (self.group3()[0] * other.group0()[3])
                    - (self.group3()[3] * other.group0()[0])),
                ((self.group1()[1] * other.group0()[3]) + (self.group2()[0] * other.group0()[2]) - (self.group2()[2] * other.group0()[0]) + (self.group3()[1] * other.group0()[3])
                    - (self.group3()[3] * other.group0()[1])),
                ((self.group1()[2] * other.group0()[3]) - (self.group2()[0] * other.group0()[1]) + (self.group2()[1] * other.group0()[0]) + (self.group3()[2] * other.group0()[3])
                    - (self.group3()[3] * other.group0()[2])),
                ((self.group1()[3] * other.group0()[3]) + (self.group2()[0] * other.group0()[0]) + (self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])),
                (-(self.group0()[1] * other.group0()[3]) - (self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiScalar> for AntiDipoleInversion {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0       15        0
    fn geometric_anti_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from([(self.group0()[0] * other[e12345]), (self.group0()[1] * other[e12345]), (self.group0()[2] * other[e12345])]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group1()[0] * other[e12345]),
                (self.group1()[1] * other[e12345]),
                (self.group1()[2] * other[e12345]),
                (self.group1()[3] * other[e12345]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (self.group2()[0] * other[e12345]),
                (self.group2()[1] * other[e12345]),
                (self.group2()[2] * other[e12345]),
                (self.group2()[3] * other[e12345]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group3()[0] * other[e12345]),
                (self.group3()[1] * other[e12345]),
                (self.group3()[2] * other[e12345]),
                (self.group3()[3] * other[e12345]),
            ]),
        );
    }
}
impl GeometricAntiProduct<Circle> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      134      150        0
    fn geometric_anti_product(self, other: Circle) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])
                    - (other.group0()[0] * self.group1()[3])
                    - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group1()[1])
                    - (other.group0()[2] * self.group3()[1])
                    + (self.group2()[3] * other.group1()[0])),
                (-(self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (other.group0()[0] * self.group1()[2])
                    - (other.group0()[0] * self.group3()[2])
                    - (other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group1()[0])
                    + (other.group0()[2] * self.group3()[0])
                    + (self.group2()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[3]) - (other.group0()[0] * self.group1()[1])
                    + (other.group0()[0] * self.group3()[1])
                    + (other.group0()[1] * self.group1()[0])
                    - (other.group0()[1] * self.group3()[0])
                    - (other.group0()[2] * self.group1()[3])
                    + (self.group2()[3] * other.group1()[2])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])
                    + (self.group1()[3] * other.group1()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1]) + (other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[1])
                    + (other.group2()[0] * self.group2()[3])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])
                    + (self.group3()[0] * other.group1()[3])),
                (-(self.group0()[0] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[0])
                    + (other.group0()[0] * self.group2()[2])
                    + (other.group0()[1] * self.group3()[3])
                    - (other.group0()[2] * self.group2()[0])
                    + (other.group2()[1] * self.group2()[3])
                    - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[2] * other.group1()[0])
                    + (self.group3()[1] * other.group1()[3])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) - (other.group0()[0] * self.group2()[1])
                    + (other.group0()[1] * self.group2()[0])
                    + (other.group0()[2] * self.group3()[3])
                    + (other.group2()[2] * self.group2()[3])
                    + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[0])
                    + (self.group3()[2] * other.group1()[3])),
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group2()[1]) + (self.group0()[2] * other.group2()[2])
                    - (other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (self.group3()[0] * other.group1()[0])
                    - (self.group3()[1] * other.group1()[1])
                    - (self.group3()[2] * other.group1()[2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((other.group2()[0] * self.group1()[3]) - (other.group2()[1] * self.group1()[2]) - (other.group2()[1] * self.group3()[2])
                    + (other.group2()[2] * self.group1()[1])
                    + (other.group2()[2] * self.group3()[1])
                    - (self.group2()[0] * other.group1()[3])
                    + (self.group2()[1] * other.group1()[2])
                    - (self.group2()[2] * other.group1()[1])
                    + (self.group3()[3] * other.group1()[0])),
                ((other.group2()[0] * self.group1()[2]) + (other.group2()[0] * self.group3()[2]) + (other.group2()[1] * self.group1()[3])
                    - (other.group2()[2] * self.group1()[0])
                    - (other.group2()[2] * self.group3()[0])
                    - (self.group2()[0] * other.group1()[2])
                    - (self.group2()[1] * other.group1()[3])
                    + (self.group2()[2] * other.group1()[0])
                    + (self.group3()[3] * other.group1()[1])),
                (-(other.group2()[0] * self.group1()[1]) - (other.group2()[0] * self.group3()[1])
                    + (other.group2()[1] * self.group1()[0])
                    + (other.group2()[1] * self.group3()[0])
                    + (other.group2()[2] * self.group1()[3])
                    + (self.group2()[0] * other.group1()[1])
                    - (self.group2()[1] * other.group1()[0])
                    - (self.group2()[2] * other.group1()[3])
                    + (self.group3()[3] * other.group1()[2])),
                (-(other.group2()[0] * self.group1()[0])
                    - (other.group2()[0] * self.group3()[0])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[1] * self.group3()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[2])
                    - (self.group2()[0] * other.group1()[0])
                    - (self.group2()[1] * other.group1()[1])
                    - (self.group2()[2] * other.group1()[2])
                    - (self.group3()[3] * other.group1()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[1] * other.group2()[2]) + (self.group0()[2] * other.group2()[1]) + (other.group0()[0] * self.group3()[3])
                    - (other.group0()[1] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[1])
                    - (other.group2()[0] * self.group2()[3])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[0])
                    + (self.group3()[1] * other.group1()[2])
                    - (self.group3()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[2] * other.group2()[0]) + (other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group3()[3])
                    - (other.group0()[2] * self.group2()[0])
                    - (other.group2()[1] * self.group2()[3])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[1])
                    - (self.group3()[0] * other.group1()[2])
                    + (self.group3()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[0]) - (other.group0()[0] * self.group2()[1])
                    + (other.group0()[1] * self.group2()[0])
                    + (other.group0()[2] * self.group3()[3])
                    - (other.group2()[2] * self.group2()[3])
                    + (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])
                    + (self.group3()[0] * other.group1()[1])
                    - (self.group3()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group1()[0])
                    + (other.group0()[0] * self.group3()[0])
                    - (other.group0()[1] * self.group1()[1])
                    + (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])
                    + (self.group2()[3] * other.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<CircleRotor> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      149      165        0
    fn geometric_anti_product(self, other: CircleRotor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])
                    - (other.group0()[0] * self.group1()[3])
                    - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group1()[1])
                    - (other.group0()[2] * self.group3()[1])
                    + (self.group2()[3] * other.group1()[0])),
                (-(self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[1] * other.group2()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (other.group0()[0] * self.group1()[2])
                    - (other.group0()[0] * self.group3()[2])
                    - (other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group1()[0])
                    + (other.group0()[2] * self.group3()[0])
                    + (self.group2()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[3]) + (self.group0()[2] * other.group2()[3])
                    - (other.group0()[0] * self.group1()[1])
                    + (other.group0()[0] * self.group3()[1])
                    + (other.group0()[1] * self.group1()[0])
                    - (other.group0()[1] * self.group3()[0])
                    - (other.group0()[2] * self.group1()[3])
                    + (self.group2()[3] * other.group1()[2])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])
                    + (self.group1()[3] * other.group1()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1]) + (other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[1])
                    + (self.group1()[0] * other.group2()[3])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])
                    + (self.group2()[3] * other.group2()[0])
                    + (self.group3()[0] * other.group1()[3])),
                (-(self.group0()[0] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[0])
                    + (other.group0()[0] * self.group2()[2])
                    + (other.group0()[1] * self.group3()[3])
                    - (other.group0()[2] * self.group2()[0])
                    - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[1] * other.group2()[3])
                    + (self.group1()[2] * other.group1()[0])
                    + (self.group2()[3] * other.group2()[1])
                    + (self.group3()[1] * other.group1()[3])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) - (other.group0()[0] * self.group2()[1])
                    + (other.group0()[1] * self.group2()[0])
                    + (other.group0()[2] * self.group3()[3])
                    + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[0])
                    + (self.group1()[2] * other.group2()[3])
                    + (self.group2()[3] * other.group2()[2])
                    + (self.group3()[2] * other.group1()[3])),
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group2()[1]) + (self.group0()[2] * other.group2()[2])
                    - (other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    + (self.group1()[3] * other.group2()[3])
                    - (self.group3()[0] * other.group1()[0])
                    - (self.group3()[1] * other.group1()[1])
                    - (self.group3()[2] * other.group1()[2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group1()[1] * other.group2()[2]) - (self.group1()[2] * other.group2()[1]) + (self.group1()[3] * other.group2()[0]) - (self.group2()[0] * other.group1()[3])
                    + (self.group2()[0] * other.group2()[3])
                    + (self.group2()[1] * other.group1()[2])
                    - (self.group2()[2] * other.group1()[1])
                    + (self.group3()[1] * other.group2()[2])
                    - (self.group3()[2] * other.group2()[1])
                    + (self.group3()[3] * other.group1()[0])),
                (-(self.group1()[0] * other.group2()[2]) + (self.group1()[2] * other.group2()[0]) + (self.group1()[3] * other.group2()[1])
                    - (self.group2()[0] * other.group1()[2])
                    - (self.group2()[1] * other.group1()[3])
                    + (self.group2()[1] * other.group2()[3])
                    + (self.group2()[2] * other.group1()[0])
                    - (self.group3()[0] * other.group2()[2])
                    + (self.group3()[2] * other.group2()[0])
                    + (self.group3()[3] * other.group1()[1])),
                ((self.group1()[0] * other.group2()[1]) - (self.group1()[1] * other.group2()[0]) + (self.group1()[3] * other.group2()[2]) + (self.group2()[0] * other.group1()[1])
                    - (self.group2()[1] * other.group1()[0])
                    - (self.group2()[2] * other.group1()[3])
                    + (self.group2()[2] * other.group2()[3])
                    + (self.group3()[0] * other.group2()[1])
                    - (self.group3()[1] * other.group2()[0])
                    + (self.group3()[3] * other.group1()[2])),
                (-(self.group1()[0] * other.group2()[0])
                    - (self.group1()[1] * other.group2()[1])
                    - (self.group1()[2] * other.group2()[2])
                    - (self.group2()[0] * other.group1()[0])
                    - (self.group2()[1] * other.group1()[1])
                    - (self.group2()[2] * other.group1()[2])
                    - (self.group3()[0] * other.group2()[0])
                    - (self.group3()[1] * other.group2()[1])
                    - (self.group3()[2] * other.group2()[2])
                    - (self.group3()[3] * other.group1()[3])
                    + (self.group3()[3] * other.group2()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[1] * other.group2()[2]) + (self.group0()[2] * other.group2()[1]) + (other.group0()[0] * self.group3()[3])
                    - (other.group0()[1] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[1])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[0])
                    - (self.group2()[3] * other.group2()[0])
                    + (self.group3()[0] * other.group2()[3])
                    + (self.group3()[1] * other.group1()[2])
                    - (self.group3()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[2] * other.group2()[0]) + (other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group3()[3])
                    - (other.group0()[2] * self.group2()[0])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[1])
                    - (self.group2()[3] * other.group2()[1])
                    - (self.group3()[0] * other.group1()[2])
                    + (self.group3()[1] * other.group2()[3])
                    + (self.group3()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[0]) - (other.group0()[0] * self.group2()[1])
                    + (other.group0()[1] * self.group2()[0])
                    + (other.group0()[2] * self.group3()[3])
                    + (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])
                    - (self.group2()[3] * other.group2()[2])
                    + (self.group3()[0] * other.group1()[1])
                    - (self.group3()[1] * other.group1()[0])
                    + (self.group3()[2] * other.group2()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group1()[0])
                    + (other.group0()[0] * self.group3()[0])
                    - (other.group0()[1] * self.group1()[1])
                    + (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])
                    + (self.group2()[3] * other.group1()[3])
                    + (self.group2()[3] * other.group2()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Dipole> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      134      150        0
    fn geometric_anti_product(self, other: Dipole) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])
                    - (other.group0()[0] * self.group1()[3])
                    - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group1()[1])
                    - (other.group0()[2] * self.group3()[1])
                    + (self.group2()[3] * other.group1()[0])),
                (-(self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (other.group0()[0] * self.group1()[2])
                    - (other.group0()[0] * self.group3()[2])
                    - (other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group1()[0])
                    + (other.group0()[2] * self.group3()[0])
                    + (self.group2()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group1()[3]) - (other.group0()[0] * self.group1()[1])
                    + (other.group0()[0] * self.group3()[1])
                    + (other.group0()[1] * self.group1()[0])
                    - (other.group0()[1] * self.group3()[0])
                    - (other.group0()[2] * self.group1()[3])
                    + (self.group2()[3] * other.group1()[2])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1]) + (other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[1])
                    + (other.group2()[0] * self.group2()[3])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])
                    - (self.group3()[0] * other.group1()[3])),
                (-(self.group0()[0] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[0])
                    + (other.group0()[0] * self.group2()[2])
                    + (other.group0()[1] * self.group3()[3])
                    - (other.group0()[2] * self.group2()[0])
                    + (other.group2()[1] * self.group2()[3])
                    - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[2] * other.group1()[0])
                    - (self.group3()[1] * other.group1()[3])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) - (other.group0()[0] * self.group2()[1])
                    + (other.group0()[1] * self.group2()[0])
                    + (other.group0()[2] * self.group3()[3])
                    + (other.group2()[2] * self.group2()[3])
                    + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[0])
                    - (self.group3()[2] * other.group1()[3])),
                (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])
                    + (other.group0()[0] * self.group2()[0])
                    + (other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])
                    + (self.group3()[0] * other.group1()[0])
                    + (self.group3()[1] * other.group1()[1])
                    + (self.group3()[2] * other.group1()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group2()[0] * self.group1()[3]) - (other.group2()[1] * self.group1()[2]) - (other.group2()[1] * self.group3()[2])
                    + (other.group2()[2] * self.group1()[1])
                    + (other.group2()[2] * self.group3()[1])
                    + (self.group2()[0] * other.group1()[3])
                    + (self.group2()[1] * other.group1()[2])
                    - (self.group2()[2] * other.group1()[1])
                    + (self.group3()[3] * other.group1()[0])),
                ((other.group2()[0] * self.group1()[2]) + (other.group2()[0] * self.group3()[2]) + (other.group2()[1] * self.group1()[3])
                    - (other.group2()[2] * self.group1()[0])
                    - (other.group2()[2] * self.group3()[0])
                    - (self.group2()[0] * other.group1()[2])
                    + (self.group2()[1] * other.group1()[3])
                    + (self.group2()[2] * other.group1()[0])
                    + (self.group3()[3] * other.group1()[1])),
                (-(other.group2()[0] * self.group1()[1]) - (other.group2()[0] * self.group3()[1])
                    + (other.group2()[1] * self.group1()[0])
                    + (other.group2()[1] * self.group3()[0])
                    + (other.group2()[2] * self.group1()[3])
                    + (self.group2()[0] * other.group1()[1])
                    - (self.group2()[1] * other.group1()[0])
                    + (self.group2()[2] * other.group1()[3])
                    + (self.group3()[3] * other.group1()[2])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group1()[0])
                    + (other.group0()[0] * self.group3()[0])
                    - (other.group0()[1] * self.group1()[1])
                    + (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])
                    - (self.group2()[3] * other.group1()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1]) - (other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self.group2()[2])
                    - (other.group0()[2] * self.group2()[1])
                    + (other.group2()[0] * self.group2()[3])
                    + (self.group1()[0] * other.group1()[3])
                    - (self.group1()[3] * other.group1()[0])
                    - (self.group3()[1] * other.group1()[2])
                    + (self.group3()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[2] * other.group2()[0])
                    - (other.group0()[0] * self.group2()[2])
                    - (other.group0()[1] * self.group3()[3])
                    + (other.group0()[2] * self.group2()[0])
                    + (other.group2()[1] * self.group2()[3])
                    + (self.group1()[1] * other.group1()[3])
                    - (self.group1()[3] * other.group1()[1])
                    + (self.group3()[0] * other.group1()[2])
                    - (self.group3()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) + (other.group0()[0] * self.group2()[1])
                    - (other.group0()[1] * self.group2()[0])
                    - (other.group0()[2] * self.group3()[3])
                    + (other.group2()[2] * self.group2()[3])
                    + (self.group1()[2] * other.group1()[3])
                    - (self.group1()[3] * other.group1()[2])
                    - (self.group3()[0] * other.group1()[1])
                    + (self.group3()[1] * other.group1()[0])),
                (-(other.group2()[0] * self.group1()[0])
                    - (other.group2()[0] * self.group3()[0])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[1] * self.group3()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[2])
                    - (self.group2()[0] * other.group1()[0])
                    - (self.group2()[1] * other.group1()[1])
                    - (self.group2()[2] * other.group1()[2])
                    + (self.group3()[3] * other.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<DipoleInversion> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      209      225        0
    fn geometric_anti_product(self, other: DipoleInversion) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[1] * other.group3()[2])
                    - (self.group0()[2] * other.group1()[1])
                    + (self.group0()[2] * other.group3()[1])
                    - (other.group0()[0] * self.group1()[3])
                    - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group1()[1])
                    - (other.group0()[2] * self.group3()[1])
                    + (self.group1()[0] * other.group2()[3])
                    + (self.group2()[3] * other.group1()[0])
                    - (self.group2()[3] * other.group3()[0])
                    - (self.group3()[0] * other.group2()[3])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[0] * other.group3()[2]) - (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    - (self.group0()[2] * other.group3()[0])
                    + (other.group0()[0] * self.group1()[2])
                    - (other.group0()[0] * self.group3()[2])
                    - (other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group1()[0])
                    + (other.group0()[2] * self.group3()[0])
                    + (self.group1()[1] * other.group2()[3])
                    + (self.group2()[3] * other.group1()[1])
                    - (self.group2()[3] * other.group3()[1])
                    - (self.group3()[1] * other.group2()[3])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group0()[1] * other.group3()[0])
                    - (self.group0()[2] * other.group1()[3])
                    - (other.group0()[0] * self.group1()[1])
                    + (other.group0()[0] * self.group3()[1])
                    + (other.group0()[1] * self.group1()[0])
                    - (other.group0()[1] * self.group3()[0])
                    - (other.group0()[2] * self.group1()[3])
                    + (self.group1()[2] * other.group2()[3])
                    + (self.group2()[3] * other.group1()[2])
                    - (self.group2()[3] * other.group3()[2])
                    - (self.group3()[2] * other.group2()[3])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])
                    + (self.group2()[3] * other.group3()[3])
                    + (self.group3()[0] * other.group3()[0])
                    + (self.group3()[1] * other.group3()[1])
                    + (self.group3()[2] * other.group3()[2])
                    + (self.group3()[3] * other.group2()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1]) + (other.group0()[0] * self.group3()[3])
                    - (other.group0()[1] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[1])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])
                    - (self.group1()[3] * other.group3()[0])
                    + (self.group2()[0] * other.group2()[3])
                    + (self.group2()[3] * other.group2()[0])
                    - (self.group3()[0] * other.group1()[3])
                    - (self.group3()[1] * other.group3()[2])
                    + (self.group3()[2] * other.group3()[1])),
                (-(self.group0()[0] * other.group2()[2])
                    + (self.group0()[1] * other.group3()[3])
                    + (self.group0()[2] * other.group2()[0])
                    + (other.group0()[0] * self.group2()[2])
                    + (other.group0()[1] * self.group3()[3])
                    - (other.group0()[2] * self.group2()[0])
                    - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[2] * other.group1()[0])
                    - (self.group1()[3] * other.group3()[1])
                    + (self.group2()[1] * other.group2()[3])
                    + (self.group2()[3] * other.group2()[1])
                    + (self.group3()[0] * other.group3()[2])
                    - (self.group3()[1] * other.group1()[3])
                    - (self.group3()[2] * other.group3()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) + (self.group0()[2] * other.group3()[3]) - (other.group0()[0] * self.group2()[1])
                    + (other.group0()[1] * self.group2()[0])
                    + (other.group0()[2] * self.group3()[3])
                    + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[0])
                    - (self.group1()[3] * other.group3()[2])
                    + (self.group2()[2] * other.group2()[3])
                    + (self.group2()[3] * other.group2()[2])
                    - (self.group3()[0] * other.group3()[1])
                    + (self.group3()[1] * other.group3()[0])
                    - (self.group3()[2] * other.group1()[3])),
                (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])
                    + (other.group0()[0] * self.group2()[0])
                    + (other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])
                    - (self.group1()[0] * other.group3()[0])
                    - (self.group1()[1] * other.group3()[1])
                    - (self.group1()[2] * other.group3()[2])
                    + (self.group2()[3] * other.group3()[3])
                    + (self.group3()[0] * other.group1()[0])
                    + (self.group3()[1] * other.group1()[1])
                    + (self.group3()[2] * other.group1()[2])
                    - (self.group3()[3] * other.group2()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group1()[0] * other.group3()[3]) + (self.group1()[1] * other.group2()[2]) - (self.group1()[2] * other.group2()[1])
                    + (self.group1()[3] * other.group2()[0])
                    + (self.group2()[0] * other.group1()[3])
                    + (self.group2()[1] * other.group1()[2])
                    + (self.group2()[1] * other.group3()[2])
                    - (self.group2()[2] * other.group1()[1])
                    - (self.group2()[2] * other.group3()[1])
                    + (self.group3()[0] * other.group3()[3])
                    + (self.group3()[1] * other.group2()[2])
                    - (self.group3()[2] * other.group2()[1])
                    + (self.group3()[3] * other.group1()[0])
                    + (self.group3()[3] * other.group3()[0])),
                (-(self.group1()[0] * other.group2()[2])
                    + (self.group1()[1] * other.group3()[3])
                    + (self.group1()[2] * other.group2()[0])
                    + (self.group1()[3] * other.group2()[1])
                    - (self.group2()[0] * other.group1()[2])
                    - (self.group2()[0] * other.group3()[2])
                    + (self.group2()[1] * other.group1()[3])
                    + (self.group2()[2] * other.group1()[0])
                    + (self.group2()[2] * other.group3()[0])
                    - (self.group3()[0] * other.group2()[2])
                    + (self.group3()[1] * other.group3()[3])
                    + (self.group3()[2] * other.group2()[0])
                    + (self.group3()[3] * other.group1()[1])
                    + (self.group3()[3] * other.group3()[1])),
                ((self.group1()[0] * other.group2()[1]) - (self.group1()[1] * other.group2()[0])
                    + (self.group1()[2] * other.group3()[3])
                    + (self.group1()[3] * other.group2()[2])
                    + (self.group2()[0] * other.group1()[1])
                    + (self.group2()[0] * other.group3()[1])
                    - (self.group2()[1] * other.group1()[0])
                    - (self.group2()[1] * other.group3()[0])
                    + (self.group2()[2] * other.group1()[3])
                    + (self.group3()[0] * other.group2()[1])
                    - (self.group3()[1] * other.group2()[0])
                    + (self.group3()[2] * other.group3()[3])
                    + (self.group3()[3] * other.group1()[2])
                    + (self.group3()[3] * other.group3()[2])),
                (-(self.group0()[0] * other.group1()[0]) + (self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group1()[1])
                    + (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group1()[2])
                    + (self.group0()[2] * other.group3()[2])
                    - (other.group0()[0] * self.group1()[0])
                    + (other.group0()[0] * self.group3()[0])
                    - (other.group0()[1] * self.group1()[1])
                    + (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])
                    - (self.group1()[3] * other.group2()[3])
                    - (self.group2()[3] * other.group1()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1]) - (other.group0()[0] * self.group3()[3])
                    + (other.group0()[1] * self.group2()[2])
                    - (other.group0()[2] * self.group2()[1])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group3()[2])
                    - (self.group1()[2] * other.group3()[1])
                    - (self.group1()[3] * other.group1()[0])
                    - (self.group2()[0] * other.group2()[3])
                    + (self.group2()[3] * other.group2()[0])
                    - (self.group3()[1] * other.group1()[2])
                    + (self.group3()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group3()[3]) + (self.group0()[2] * other.group2()[0])
                    - (other.group0()[0] * self.group2()[2])
                    - (other.group0()[1] * self.group3()[3])
                    + (other.group0()[2] * self.group2()[0])
                    - (self.group1()[0] * other.group3()[2])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group3()[0])
                    - (self.group1()[3] * other.group1()[1])
                    - (self.group2()[1] * other.group2()[3])
                    + (self.group2()[3] * other.group2()[1])
                    + (self.group3()[0] * other.group1()[2])
                    - (self.group3()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) + (self.group0()[2] * other.group3()[3]) + (other.group0()[0] * self.group2()[1])
                    - (other.group0()[1] * self.group2()[0])
                    - (other.group0()[2] * self.group3()[3])
                    + (self.group1()[0] * other.group3()[1])
                    - (self.group1()[1] * other.group3()[0])
                    + (self.group1()[2] * other.group1()[3])
                    - (self.group1()[3] * other.group1()[2])
                    - (self.group2()[2] * other.group2()[3])
                    + (self.group2()[3] * other.group2()[2])
                    - (self.group3()[0] * other.group1()[1])
                    + (self.group3()[1] * other.group1()[0])),
                (-(self.group1()[0] * other.group2()[0]) - (self.group1()[1] * other.group2()[1]) - (self.group1()[2] * other.group2()[2])
                    + (self.group1()[3] * other.group3()[3])
                    - (self.group2()[0] * other.group1()[0])
                    - (self.group2()[0] * other.group3()[0])
                    - (self.group2()[1] * other.group1()[1])
                    - (self.group2()[1] * other.group3()[1])
                    - (self.group2()[2] * other.group1()[2])
                    - (self.group2()[2] * other.group3()[2])
                    - (self.group3()[0] * other.group2()[0])
                    - (self.group3()[1] * other.group2()[1])
                    - (self.group3()[2] * other.group2()[2])
                    + (self.group3()[3] * other.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<DualNum> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       14       30        0
    fn geometric_anti_product(self, other: DualNum) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) - (other.group0()[0] * self.group3()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group0()[2])),
                (other.group0()[0] * self.group3()[3]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group1()[2])),
                ((other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self.group1()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other.group0()[1] * self.group2()[0]),
                (other.group0()[1] * self.group2()[1]),
                (other.group0()[1] * self.group2()[2]),
                (other.group0()[1] * self.group3()[3]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group3()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group3()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group3()[2])),
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group2()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<FlatPoint> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       44       64        0
    fn geometric_anti_product(self, other: FlatPoint) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (self.group2()[3] * other.group0()[0]) - (self.group3()[0] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0]) + (self.group2()[3] * other.group0()[1])
                    - (self.group3()[1] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group2()[3] * other.group0()[2]) - (self.group3()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])
                    + (self.group1()[3] * other.group0()[0])
                    + (self.group2()[0] * other.group0()[3])
                    + (self.group3()[1] * other.group0()[2])
                    - (self.group3()[2] * other.group0()[1])),
                (-(self.group1()[0] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[0])
                    + (self.group1()[3] * other.group0()[1])
                    + (self.group2()[1] * other.group0()[3])
                    - (self.group3()[0] * other.group0()[2])
                    + (self.group3()[2] * other.group0()[0])),
                ((self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])
                    + (self.group1()[3] * other.group0()[2])
                    + (self.group2()[2] * other.group0()[3])
                    + (self.group3()[0] * other.group0()[1])
                    - (self.group3()[1] * other.group0()[0])),
                (self.group2()[3] * other.group0()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (self.group1()[0] * other.group0()[3]) + (self.group2()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[2])
                    + (self.group0()[2] * other.group0()[0])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group2()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[3]) + (self.group2()[3] * other.group0()[2])),
                (-(self.group1()[0] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])
                    - (self.group3()[0] * other.group0()[0])
                    - (self.group3()[1] * other.group0()[1])
                    - (self.group3()[2] * other.group0()[2])
                    + (self.group3()[3] * other.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Flector> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      104      120        0
    fn geometric_anti_product(self, other: Flector) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])
                    - (self.group2()[3] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group0()[3]) - (self.group0()[2] * other.group1()[0]) - (self.group2()[3] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])
                    - (self.group0()[2] * other.group0()[3])
                    - (self.group2()[3] * other.group1()[2])),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group0()[3])
                    + (self.group2()[3] * other.group1()[3])
                    + (self.group3()[0] * other.group1()[0])
                    + (self.group3()[1] * other.group1()[1])
                    + (self.group3()[2] * other.group1()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) - (self.group1()[3] * other.group1()[0])
                    + (self.group2()[3] * other.group0()[0])
                    - (self.group3()[0] * other.group0()[3])
                    - (self.group3()[1] * other.group1()[2])
                    + (self.group3()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group0()[0])
                    - (self.group1()[3] * other.group1()[1])
                    + (self.group2()[3] * other.group0()[1])
                    + (self.group3()[0] * other.group1()[2])
                    - (self.group3()[1] * other.group0()[3])
                    - (self.group3()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group1()[3]) - (self.group1()[3] * other.group1()[2])
                    + (self.group2()[3] * other.group0()[2])
                    - (self.group3()[0] * other.group1()[1])
                    + (self.group3()[1] * other.group1()[0])
                    - (self.group3()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])
                    + (self.group2()[3] * other.group1()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group1()[0] * other.group1()[3]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])
                    + (self.group1()[3] * other.group0()[0])
                    + (self.group2()[0] * other.group0()[3])
                    + (self.group2()[1] * other.group1()[2])
                    - (self.group2()[2] * other.group1()[1])
                    + (self.group3()[0] * other.group1()[3])
                    + (self.group3()[1] * other.group0()[2])
                    - (self.group3()[2] * other.group0()[1])
                    + (self.group3()[3] * other.group1()[0])),
                (-(self.group1()[0] * other.group0()[2])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group0()[0])
                    + (self.group1()[3] * other.group0()[1])
                    - (self.group2()[0] * other.group1()[2])
                    + (self.group2()[1] * other.group0()[3])
                    + (self.group2()[2] * other.group1()[0])
                    - (self.group3()[0] * other.group0()[2])
                    + (self.group3()[1] * other.group1()[3])
                    + (self.group3()[2] * other.group0()[0])
                    + (self.group3()[3] * other.group1()[1])),
                ((self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])
                    + (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group0()[2])
                    + (self.group2()[0] * other.group1()[1])
                    - (self.group2()[1] * other.group1()[0])
                    + (self.group2()[2] * other.group0()[3])
                    + (self.group3()[0] * other.group0()[1])
                    - (self.group3()[1] * other.group0()[0])
                    + (self.group3()[2] * other.group1()[3])
                    + (self.group3()[3] * other.group1()[2])),
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1]) + (self.group0()[2] * other.group1()[2]) - (self.group2()[3] * other.group0()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])
                    + (self.group1()[0] * other.group0()[3])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])
                    + (self.group2()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group0()[0])
                    - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group1()[2] * other.group1()[0])
                    + (self.group2()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group1()[3]) + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[0])
                    + (self.group1()[2] * other.group0()[3])
                    + (self.group2()[3] * other.group0()[2])),
                (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])
                    + (self.group1()[3] * other.group1()[3])
                    - (self.group2()[0] * other.group1()[0])
                    - (self.group2()[1] * other.group1()[1])
                    - (self.group2()[2] * other.group1()[2])
                    - (self.group3()[0] * other.group0()[0])
                    - (self.group3()[1] * other.group0()[1])
                    - (self.group3()[2] * other.group0()[2])
                    + (self.group3()[3] * other.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Line> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       74       90        0
    fn geometric_anti_product(self, other: Line) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (other.group0()[0] * self.group2()[3])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0]) + (other.group0()[1] * self.group2()[3])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (other.group0()[2] * self.group2()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (other.group1()[0] * self.group2()[3])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0]) + (other.group0()[0] * self.group1()[2])
                    - (other.group0()[2] * self.group1()[0])
                    + (other.group1()[1] * self.group2()[3])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) - (other.group0()[0] * self.group1()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group2()[3])),
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1]) + (self.group0()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group3()[0])
                    - (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group3()[2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1]) + (other.group1()[0] * self.group1()[3])
                    - (other.group1()[1] * self.group1()[2])
                    - (other.group1()[1] * self.group3()[2])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group1()[2] * self.group3()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group3()[3]) - (other.group0()[2] * self.group2()[0])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[0] * self.group3()[2])
                    + (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group1()[0])
                    - (other.group1()[2] * self.group3()[0])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) + (other.group0()[2] * self.group3()[3])
                    - (other.group1()[0] * self.group1()[1])
                    - (other.group1()[0] * self.group3()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[1] * self.group3()[0])
                    + (other.group1()[2] * self.group1()[3])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[0] * self.group3()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[2] * self.group3()[2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1]) + (other.group0()[0] * self.group1()[3])
                    - (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group3()[1])
                    - (other.group1()[0] * self.group2()[3])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0]) + (other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group3()[0])
                    - (other.group1()[1] * self.group2()[3])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) - (other.group0()[0] * self.group3()[1])
                    + (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group1()[3])
                    - (other.group1()[2] * self.group2()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Motor> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      104      120        0
    fn geometric_anti_product(self, other: Motor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (self.group2()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[2])
                    + (self.group0()[1] * other.group0()[3])
                    + (self.group0()[2] * other.group0()[0])
                    + (self.group2()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[3]) + (self.group2()[3] * other.group0()[2])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])
                    + (self.group2()[3] * other.group1()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])
                    + (self.group1()[0] * other.group0()[3])
                    + (self.group1()[1] * other.group0()[2])
                    - (self.group1()[2] * other.group0()[1])
                    + (self.group2()[3] * other.group1()[0])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group1()[0])
                    - (self.group1()[0] * other.group0()[2])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group1()[2] * other.group0()[0])
                    + (self.group2()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[3]) + (self.group1()[0] * other.group0()[1])
                    - (self.group1()[1] * other.group0()[0])
                    + (self.group1()[2] * other.group0()[3])
                    + (self.group2()[3] * other.group1()[2])),
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1]) + (self.group0()[2] * other.group1()[2]) + (self.group1()[3] * other.group0()[3])
                    - (self.group2()[3] * other.group1()[3])
                    - (self.group3()[0] * other.group0()[0])
                    - (self.group3()[1] * other.group0()[1])
                    - (self.group3()[2] * other.group0()[2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group1()[0] * other.group1()[3]) + (self.group1()[1] * other.group1()[2]) - (self.group1()[2] * other.group1()[1])
                    + (self.group1()[3] * other.group1()[0])
                    + (self.group2()[0] * other.group0()[3])
                    + (self.group2()[1] * other.group0()[2])
                    - (self.group2()[2] * other.group0()[1])
                    + (self.group3()[0] * other.group1()[3])
                    + (self.group3()[1] * other.group1()[2])
                    - (self.group3()[2] * other.group1()[1])
                    + (self.group3()[3] * other.group0()[0])),
                (-(self.group1()[0] * other.group1()[2])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group1()[0])
                    + (self.group1()[3] * other.group1()[1])
                    - (self.group2()[0] * other.group0()[2])
                    + (self.group2()[1] * other.group0()[3])
                    + (self.group2()[2] * other.group0()[0])
                    - (self.group3()[0] * other.group1()[2])
                    + (self.group3()[1] * other.group1()[3])
                    + (self.group3()[2] * other.group1()[0])
                    + (self.group3()[3] * other.group0()[1])),
                ((self.group1()[0] * other.group1()[1]) - (self.group1()[1] * other.group1()[0])
                    + (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])
                    + (self.group2()[0] * other.group0()[1])
                    - (self.group2()[1] * other.group0()[0])
                    + (self.group2()[2] * other.group0()[3])
                    + (self.group3()[0] * other.group1()[1])
                    - (self.group3()[1] * other.group1()[0])
                    + (self.group3()[2] * other.group1()[3])
                    + (self.group3()[3] * other.group0()[2])),
                (-(self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1]) - (self.group1()[2] * other.group1()[2])
                    + (self.group1()[3] * other.group1()[3])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])
                    - (self.group3()[0] * other.group1()[0])
                    - (self.group3()[1] * other.group1()[1])
                    - (self.group3()[2] * other.group1()[2])
                    + (self.group3()[3] * other.group0()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[1])
                    + (self.group1()[3] * other.group0()[0])
                    - (self.group2()[3] * other.group1()[0])
                    + (self.group3()[0] * other.group0()[3])
                    + (self.group3()[1] * other.group0()[2])
                    - (self.group3()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group1()[0]) + (self.group1()[3] * other.group0()[1])
                    - (self.group2()[3] * other.group1()[1])
                    - (self.group3()[0] * other.group0()[2])
                    + (self.group3()[1] * other.group0()[3])
                    + (self.group3()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group0()[2])
                    - (self.group2()[3] * other.group1()[2])
                    + (self.group3()[0] * other.group0()[1])
                    - (self.group3()[1] * other.group0()[0])
                    + (self.group3()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group2()[3] * other.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<MultiVector> for AntiDipoleInversion {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      448      480        0
    fn geometric_anti_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group0()[0] * other.group3()[0])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group3()[2])
                    - (other.group4()[0] * self.group2()[0])
                    - (other.group4()[1] * self.group2()[1])
                    - (other.group4()[2] * self.group2()[2])
                    - (other.group5()[0] * self.group1()[0])
                    - (other.group5()[1] * self.group1()[1])
                    - (other.group5()[2] * self.group1()[2])
                    - (self.group1()[3] * other.group3()[3])
                    + (self.group2()[3] * other.group9()[3])
                    + (self.group3()[0] * other.group9()[0])
                    + (self.group3()[1] * other.group9()[1])
                    + (self.group3()[2] * other.group9()[2])
                    + (self.group3()[3] * other[e45])),
                (-(self.group0()[0] * other.group8()[0])
                    - (self.group0()[1] * other.group8()[1])
                    - (self.group0()[2] * other.group8()[2])
                    - (other.group7()[0] * self.group2()[0])
                    - (other.group7()[1] * self.group2()[1])
                    - (other.group7()[2] * self.group2()[2])
                    - (self.group1()[0] * other.group6()[0])
                    - (self.group1()[1] * other.group6()[1])
                    - (self.group1()[2] * other.group6()[2])
                    + (self.group1()[3] * other.group6()[3])
                    + (self.group2()[3] * other[e1])
                    - (self.group3()[0] * other.group1()[0])
                    - (self.group3()[1] * other.group1()[1])
                    - (self.group3()[2] * other.group1()[2])
                    + (self.group3()[3] * other.group1()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[1] * self.group3()[0]) - (self.group0()[0] * other[e1]) - (self.group0()[1] * other.group8()[2])
                    + (self.group0()[2] * other.group8()[1])
                    + (other.group7()[0] * self.group3()[3])
                    - (other.group7()[1] * self.group2()[2])
                    + (other.group7()[2] * self.group2()[1])
                    - (other.group8()[0] * self.group2()[3])
                    + (self.group1()[0] * other.group6()[3])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])
                    + (self.group1()[3] * other.group6()[0])
                    + (self.group2()[0] * other.group1()[3])
                    + (self.group3()[1] * other.group6()[2])
                    - (self.group3()[2] * other.group6()[1])),
                ((other.group0()[1] * self.group3()[1]) + (self.group0()[0] * other.group8()[2]) - (self.group0()[1] * other[e1]) - (self.group0()[2] * other.group8()[0])
                    + (other.group7()[0] * self.group2()[2])
                    + (other.group7()[1] * self.group3()[3])
                    - (other.group7()[2] * self.group2()[0])
                    - (other.group8()[1] * self.group2()[3])
                    - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[1] * other.group6()[3])
                    + (self.group1()[2] * other.group1()[0])
                    + (self.group1()[3] * other.group6()[1])
                    + (self.group2()[1] * other.group1()[3])
                    - (self.group3()[0] * other.group6()[2])
                    + (self.group3()[2] * other.group6()[0])),
                ((other.group0()[1] * self.group3()[2]) - (self.group0()[0] * other.group8()[1]) + (self.group0()[1] * other.group8()[0])
                    - (self.group0()[2] * other[e1])
                    - (other.group7()[0] * self.group2()[1])
                    + (other.group7()[1] * self.group2()[0])
                    + (other.group7()[2] * self.group3()[3])
                    - (other.group8()[2] * self.group2()[3])
                    + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[0])
                    + (self.group1()[2] * other.group6()[3])
                    + (self.group1()[3] * other.group6()[2])
                    + (self.group2()[2] * other.group1()[3])
                    + (self.group3()[0] * other.group6()[1])
                    - (self.group3()[1] * other.group6()[0])),
                ((other.group0()[1] * self.group2()[3])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[0] * other.group6()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[1] * other.group6()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group6()[2])
                    - (other.group7()[0] * self.group1()[0])
                    + (other.group7()[0] * self.group3()[0])
                    - (other.group7()[1] * self.group1()[1])
                    + (other.group7()[1] * self.group3()[1])
                    - (other.group7()[2] * self.group1()[2])
                    + (other.group7()[2] * self.group3()[2])
                    - (self.group1()[3] * other.group1()[3])
                    + (self.group2()[3] * other.group6()[3])),
            ]),
            // e5
            ((other.group0()[1] * self.group3()[3])
                - (other.group8()[0] * self.group1()[0])
                - (other.group8()[0] * self.group3()[0])
                - (other.group8()[1] * self.group1()[1])
                - (other.group8()[1] * self.group3()[1])
                - (other.group8()[2] * self.group1()[2])
                - (other.group8()[2] * self.group3()[2])
                + (self.group1()[3] * other[e1])
                + (self.group2()[0] * other.group1()[0])
                - (self.group2()[0] * other.group6()[0])
                + (self.group2()[1] * other.group1()[1])
                - (self.group2()[1] * other.group6()[1])
                + (self.group2()[2] * other.group1()[2])
                - (self.group2()[2] * other.group6()[2])
                - (self.group3()[3] * other.group6()[3])),
            // e15, e25, e35, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) + (other.group5()[0] * self.group3()[3]) - (other.group5()[1] * self.group2()[2])
                    + (other.group5()[2] * self.group2()[1])
                    + (self.group1()[0] * other.group9()[3])
                    + (self.group1()[1] * other.group3()[2])
                    - (self.group1()[2] * other.group3()[1])
                    + (self.group1()[3] * other.group3()[0])
                    + (self.group2()[0] * other.group3()[3])
                    + (self.group2()[1] * other.group9()[2])
                    - (self.group2()[2] * other.group9()[1])
                    + (self.group3()[0] * other.group9()[3])
                    + (self.group3()[1] * other.group3()[2])
                    - (self.group3()[2] * other.group3()[1])
                    + (self.group3()[3] * other.group9()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group5()[0] * self.group2()[2]) + (other.group5()[1] * self.group3()[3])
                    - (other.group5()[2] * self.group2()[0])
                    - (self.group1()[0] * other.group3()[2])
                    + (self.group1()[1] * other.group9()[3])
                    + (self.group1()[2] * other.group3()[0])
                    + (self.group1()[3] * other.group3()[1])
                    - (self.group2()[0] * other.group9()[2])
                    + (self.group2()[1] * other.group3()[3])
                    + (self.group2()[2] * other.group9()[0])
                    - (self.group3()[0] * other.group3()[2])
                    + (self.group3()[1] * other.group9()[3])
                    + (self.group3()[2] * other.group3()[0])
                    + (self.group3()[3] * other.group9()[1])),
                ((other.group0()[0] * self.group2()[2]) - (other.group5()[0] * self.group2()[1])
                    + (other.group5()[1] * self.group2()[0])
                    + (other.group5()[2] * self.group3()[3])
                    + (self.group1()[0] * other.group3()[1])
                    - (self.group1()[1] * other.group3()[0])
                    + (self.group1()[2] * other.group9()[3])
                    + (self.group1()[3] * other.group3()[2])
                    + (self.group2()[0] * other.group9()[1])
                    - (self.group2()[1] * other.group9()[0])
                    + (self.group2()[2] * other.group3()[3])
                    + (self.group3()[0] * other.group3()[1])
                    - (self.group3()[1] * other.group3()[0])
                    + (self.group3()[2] * other.group9()[3])
                    + (self.group3()[3] * other.group9()[2])),
                (-(other.group0()[0] * self.group1()[3])
                    - (self.group0()[0] * other.group3()[0])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group3()[2])
                    + (other.group4()[0] * self.group2()[0])
                    + (other.group4()[1] * self.group2()[1])
                    + (other.group4()[2] * self.group2()[2])
                    + (other.group5()[0] * self.group3()[0])
                    + (other.group5()[1] * self.group3()[1])
                    + (other.group5()[2] * self.group3()[2])
                    - (self.group1()[0] * other.group9()[0])
                    - (self.group1()[1] * other.group9()[1])
                    - (self.group1()[2] * other.group9()[2])
                    + (self.group2()[3] * other.group9()[3])
                    - (self.group3()[3] * other[e45])),
            ]),
            // e41, e42, e43
            Simd32x3::from([
                ((other.group0()[0] * self.group0()[0]) - (self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group5()[2])
                    - (self.group0()[1] * other.group9()[2])
                    - (self.group0()[2] * other.group5()[1])
                    + (self.group0()[2] * other.group9()[1])
                    - (other.group4()[0] * self.group1()[3])
                    - (other.group4()[1] * self.group1()[2])
                    + (other.group4()[1] * self.group3()[2])
                    + (other.group4()[2] * self.group1()[1])
                    - (other.group4()[2] * self.group3()[1])
                    + (other.group5()[0] * self.group2()[3])
                    + (self.group1()[0] * other[e45])
                    - (self.group2()[3] * other.group9()[0])
                    - (self.group3()[0] * other[e45])),
                ((other.group0()[0] * self.group0()[1]) - (self.group0()[0] * other.group5()[2]) + (self.group0()[0] * other.group9()[2]) - (self.group0()[1] * other.group3()[3])
                    + (self.group0()[2] * other.group5()[0])
                    - (self.group0()[2] * other.group9()[0])
                    + (other.group4()[0] * self.group1()[2])
                    - (other.group4()[0] * self.group3()[2])
                    - (other.group4()[1] * self.group1()[3])
                    - (other.group4()[2] * self.group1()[0])
                    + (other.group4()[2] * self.group3()[0])
                    + (other.group5()[1] * self.group2()[3])
                    + (self.group1()[1] * other[e45])
                    - (self.group2()[3] * other.group9()[1])
                    - (self.group3()[1] * other[e45])),
                ((other.group0()[0] * self.group0()[2]) + (self.group0()[0] * other.group5()[1]) - (self.group0()[0] * other.group9()[1]) - (self.group0()[1] * other.group5()[0])
                    + (self.group0()[1] * other.group9()[0])
                    - (self.group0()[2] * other.group3()[3])
                    - (other.group4()[0] * self.group1()[1])
                    + (other.group4()[0] * self.group3()[1])
                    + (other.group4()[1] * self.group1()[0])
                    - (other.group4()[1] * self.group3()[0])
                    - (other.group4()[2] * self.group1()[3])
                    + (other.group5()[2] * self.group2()[3])
                    + (self.group1()[2] * other[e45])
                    - (self.group2()[3] * other.group9()[2])
                    - (self.group3()[2] * other[e45])),
            ]),
            // e23, e31, e12
            Simd32x3::from([
                ((other.group0()[0] * self.group1()[0]) + (self.group0()[0] * other.group9()[3]) + (self.group0()[1] * other.group3()[2]) - (self.group0()[2] * other.group3()[1])
                    + (other.group4()[0] * self.group3()[3])
                    - (other.group4()[1] * self.group2()[2])
                    + (other.group4()[2] * self.group2()[1])
                    - (other.group5()[1] * self.group1()[2])
                    + (other.group5()[2] * self.group1()[1])
                    - (self.group1()[3] * other.group9()[0])
                    + (self.group2()[0] * other[e45])
                    + (self.group2()[3] * other.group3()[0])
                    - (self.group3()[0] * other.group3()[3])
                    - (self.group3()[1] * other.group9()[2])
                    + (self.group3()[2] * other.group9()[1])),
                ((other.group0()[0] * self.group1()[1]) - (self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group9()[3])
                    + (self.group0()[2] * other.group3()[0])
                    + (other.group4()[0] * self.group2()[2])
                    + (other.group4()[1] * self.group3()[3])
                    - (other.group4()[2] * self.group2()[0])
                    + (other.group5()[0] * self.group1()[2])
                    - (other.group5()[2] * self.group1()[0])
                    - (self.group1()[3] * other.group9()[1])
                    + (self.group2()[1] * other[e45])
                    + (self.group2()[3] * other.group3()[1])
                    + (self.group3()[0] * other.group9()[2])
                    - (self.group3()[1] * other.group3()[3])
                    - (self.group3()[2] * other.group9()[0])),
                ((other.group0()[0] * self.group1()[2]) + (self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group3()[0]) + (self.group0()[2] * other.group9()[3])
                    - (other.group4()[0] * self.group2()[1])
                    + (other.group4()[1] * self.group2()[0])
                    + (other.group4()[2] * self.group3()[3])
                    - (other.group5()[0] * self.group1()[1])
                    + (other.group5()[1] * self.group1()[0])
                    - (self.group1()[3] * other.group9()[2])
                    + (self.group2()[2] * other[e45])
                    + (self.group2()[3] * other.group3()[2])
                    - (self.group3()[0] * other.group9()[1])
                    + (self.group3()[1] * other.group9()[0])
                    - (self.group3()[2] * other.group3()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[1] * self.group1()[0]) + (self.group0()[0] * other[e1]) + (self.group0()[1] * other.group8()[2]) - (self.group0()[2] * other.group8()[1])
                    + (other.group7()[0] * self.group3()[3])
                    - (other.group7()[1] * self.group2()[2])
                    + (other.group7()[2] * self.group2()[1])
                    + (other.group8()[0] * self.group2()[3])
                    + (self.group1()[1] * other.group6()[2])
                    - (self.group1()[2] * other.group6()[1])
                    + (self.group1()[3] * other.group1()[0])
                    + (self.group2()[0] * other.group1()[3])
                    + (self.group3()[0] * other.group6()[3])
                    + (self.group3()[1] * other.group1()[2])
                    - (self.group3()[2] * other.group1()[1])),
                ((other.group0()[1] * self.group1()[1]) - (self.group0()[0] * other.group8()[2])
                    + (self.group0()[1] * other[e1])
                    + (self.group0()[2] * other.group8()[0])
                    + (other.group7()[0] * self.group2()[2])
                    + (other.group7()[1] * self.group3()[3])
                    - (other.group7()[2] * self.group2()[0])
                    + (other.group8()[1] * self.group2()[3])
                    - (self.group1()[0] * other.group6()[2])
                    + (self.group1()[2] * other.group6()[0])
                    + (self.group1()[3] * other.group1()[1])
                    + (self.group2()[1] * other.group1()[3])
                    - (self.group3()[0] * other.group1()[2])
                    + (self.group3()[1] * other.group6()[3])
                    + (self.group3()[2] * other.group1()[0])),
                ((other.group0()[1] * self.group1()[2]) + (self.group0()[0] * other.group8()[1]) - (self.group0()[1] * other.group8()[0]) + (self.group0()[2] * other[e1])
                    - (other.group7()[0] * self.group2()[1])
                    + (other.group7()[1] * self.group2()[0])
                    + (other.group7()[2] * self.group3()[3])
                    + (other.group8()[2] * self.group2()[3])
                    + (self.group1()[0] * other.group6()[1])
                    - (self.group1()[1] * other.group6()[0])
                    + (self.group1()[3] * other.group1()[2])
                    + (self.group2()[2] * other.group1()[3])
                    + (self.group3()[0] * other.group1()[1])
                    - (self.group3()[1] * other.group1()[0])
                    + (self.group3()[2] * other.group6()[3])),
                ((other.group0()[1] * self.group1()[3]) + (self.group0()[0] * other.group8()[0]) + (self.group0()[1] * other.group8()[1]) + (self.group0()[2] * other.group8()[2])
                    - (other.group7()[0] * self.group2()[0])
                    - (other.group7()[1] * self.group2()[1])
                    - (other.group7()[2] * self.group2()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group2()[3] * other[e1])
                    - (self.group3()[0] * other.group6()[0])
                    - (self.group3()[1] * other.group6()[1])
                    - (self.group3()[2] * other.group6()[2])
                    + (self.group3()[3] * other.group1()[3])),
            ]),
            // e423, e431, e412
            Simd32x3::from([
                ((other.group0()[1] * self.group0()[0]) + (self.group0()[0] * other.group6()[3]) + (self.group0()[1] * other.group1()[2]) + (self.group0()[1] * other.group6()[2])
                    - (self.group0()[2] * other.group1()[1])
                    - (self.group0()[2] * other.group6()[1])
                    - (other.group7()[0] * self.group1()[3])
                    - (other.group7()[1] * self.group1()[2])
                    + (other.group7()[1] * self.group3()[2])
                    + (other.group7()[2] * self.group1()[1])
                    - (other.group7()[2] * self.group3()[1])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group2()[3] * other.group1()[0])
                    + (self.group2()[3] * other.group6()[0])
                    - (self.group3()[0] * other.group1()[3])),
                ((other.group0()[1] * self.group0()[1]) - (self.group0()[0] * other.group1()[2]) - (self.group0()[0] * other.group6()[2])
                    + (self.group0()[1] * other.group6()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group0()[2] * other.group6()[0])
                    + (other.group7()[0] * self.group1()[2])
                    - (other.group7()[0] * self.group3()[2])
                    - (other.group7()[1] * self.group1()[3])
                    - (other.group7()[2] * self.group1()[0])
                    + (other.group7()[2] * self.group3()[0])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group2()[3] * other.group1()[1])
                    + (self.group2()[3] * other.group6()[1])
                    - (self.group3()[1] * other.group1()[3])),
                ((other.group0()[1] * self.group0()[2]) + (self.group0()[0] * other.group1()[1]) + (self.group0()[0] * other.group6()[1])
                    - (self.group0()[1] * other.group1()[0])
                    - (self.group0()[1] * other.group6()[0])
                    + (self.group0()[2] * other.group6()[3])
                    - (other.group7()[0] * self.group1()[1])
                    + (other.group7()[0] * self.group3()[1])
                    + (other.group7()[1] * self.group1()[0])
                    - (other.group7()[1] * self.group3()[0])
                    - (other.group7()[2] * self.group1()[3])
                    + (self.group1()[2] * other.group1()[3])
                    + (self.group2()[3] * other.group1()[2])
                    + (self.group2()[3] * other.group6()[2])
                    - (self.group3()[2] * other.group1()[3])),
            ]),
            // e235, e315, e125
            Simd32x3::from([
                ((other.group0()[1] * self.group2()[0]) + (other.group8()[0] * self.group1()[3]) - (other.group8()[1] * self.group1()[2]) - (other.group8()[1] * self.group3()[2])
                    + (other.group8()[2] * self.group1()[1])
                    + (other.group8()[2] * self.group3()[1])
                    + (self.group1()[0] * other[e1])
                    - (self.group2()[0] * other.group6()[3])
                    - (self.group2()[1] * other.group1()[2])
                    + (self.group2()[1] * other.group6()[2])
                    + (self.group2()[2] * other.group1()[1])
                    - (self.group2()[2] * other.group6()[1])
                    + (self.group3()[0] * other[e1])
                    - (self.group3()[3] * other.group1()[0])
                    + (self.group3()[3] * other.group6()[0])),
                ((other.group0()[1] * self.group2()[1]) + (other.group8()[0] * self.group1()[2]) + (other.group8()[0] * self.group3()[2]) + (other.group8()[1] * self.group1()[3])
                    - (other.group8()[2] * self.group1()[0])
                    - (other.group8()[2] * self.group3()[0])
                    + (self.group1()[1] * other[e1])
                    + (self.group2()[0] * other.group1()[2])
                    - (self.group2()[0] * other.group6()[2])
                    - (self.group2()[1] * other.group6()[3])
                    - (self.group2()[2] * other.group1()[0])
                    + (self.group2()[2] * other.group6()[0])
                    + (self.group3()[1] * other[e1])
                    - (self.group3()[3] * other.group1()[1])
                    + (self.group3()[3] * other.group6()[1])),
                ((other.group0()[1] * self.group2()[2]) - (other.group8()[0] * self.group1()[1]) - (other.group8()[0] * self.group3()[1])
                    + (other.group8()[1] * self.group1()[0])
                    + (other.group8()[1] * self.group3()[0])
                    + (other.group8()[2] * self.group1()[3])
                    + (self.group1()[2] * other[e1])
                    - (self.group2()[0] * other.group1()[1])
                    + (self.group2()[0] * other.group6()[1])
                    + (self.group2()[1] * other.group1()[0])
                    - (self.group2()[1] * other.group6()[0])
                    - (self.group2()[2] * other.group6()[3])
                    + (self.group3()[2] * other[e1])
                    - (self.group3()[3] * other.group1()[2])
                    + (self.group3()[3] * other.group6()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group3()[0]) + (self.group0()[0] * other.group9()[3]) + (self.group0()[1] * other.group3()[2])
                    - (self.group0()[2] * other.group3()[1])
                    - (other.group4()[0] * self.group3()[3])
                    + (other.group4()[1] * self.group2()[2])
                    - (other.group4()[2] * self.group2()[1])
                    - (other.group5()[0] * self.group1()[3])
                    + (other.group5()[1] * self.group3()[2])
                    - (other.group5()[2] * self.group3()[1])
                    + (self.group1()[0] * other.group3()[3])
                    + (self.group1()[1] * other.group9()[2])
                    - (self.group1()[2] * other.group9()[1])
                    - (self.group2()[0] * other[e45])
                    + (self.group2()[3] * other.group3()[0])),
                (-(other.group0()[0] * self.group3()[1]) - (self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group9()[3])
                    + (self.group0()[2] * other.group3()[0])
                    - (other.group4()[0] * self.group2()[2])
                    - (other.group4()[1] * self.group3()[3])
                    + (other.group4()[2] * self.group2()[0])
                    - (other.group5()[0] * self.group3()[2])
                    - (other.group5()[1] * self.group1()[3])
                    + (other.group5()[2] * self.group3()[0])
                    - (self.group1()[0] * other.group9()[2])
                    + (self.group1()[1] * other.group3()[3])
                    + (self.group1()[2] * other.group9()[0])
                    - (self.group2()[1] * other[e45])
                    + (self.group2()[3] * other.group3()[1])),
                (-(other.group0()[0] * self.group3()[2]) + (self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group9()[3])
                    + (other.group4()[0] * self.group2()[1])
                    - (other.group4()[1] * self.group2()[0])
                    - (other.group4()[2] * self.group3()[3])
                    + (other.group5()[0] * self.group3()[1])
                    - (other.group5()[1] * self.group3()[0])
                    - (other.group5()[2] * self.group1()[3])
                    + (self.group1()[0] * other.group9()[1])
                    - (self.group1()[1] * other.group9()[0])
                    + (self.group1()[2] * other.group3()[3])
                    - (self.group2()[2] * other[e45])
                    + (self.group2()[3] * other.group3()[2])),
                ((other.group0()[0] * self.group3()[3])
                    - (other.group5()[0] * self.group2()[0])
                    - (other.group5()[1] * self.group2()[1])
                    - (other.group5()[2] * self.group2()[2])
                    - (self.group1()[0] * other.group3()[0])
                    - (self.group1()[1] * other.group3()[1])
                    - (self.group1()[2] * other.group3()[2])
                    + (self.group1()[3] * other.group9()[3])
                    - (self.group2()[0] * other.group9()[0])
                    - (self.group2()[1] * other.group9()[1])
                    - (self.group2()[2] * other.group9()[2])
                    - (self.group3()[0] * other.group3()[0])
                    - (self.group3()[1] * other.group3()[1])
                    - (self.group3()[2] * other.group3()[2])
                    + (self.group3()[3] * other.group3()[3])),
            ]),
            // e1234
            ((other.group0()[0] * self.group2()[3]) - (self.group0()[0] * other.group5()[0]) + (self.group0()[0] * other.group9()[0]) - (self.group0()[1] * other.group5()[1])
                + (self.group0()[1] * other.group9()[1])
                - (self.group0()[2] * other.group5()[2])
                + (self.group0()[2] * other.group9()[2])
                - (other.group4()[0] * self.group1()[0])
                + (other.group4()[0] * self.group3()[0])
                - (other.group4()[1] * self.group1()[1])
                + (other.group4()[1] * self.group3()[1])
                - (other.group4()[2] * self.group1()[2])
                + (other.group4()[2] * self.group3()[2])
                - (self.group1()[3] * other[e45])
                - (self.group2()[3] * other.group3()[3])),
        );
    }
}
impl GeometricAntiProduct<Plane> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       44       60        0
    fn geometric_anti_product(self, other: Plane) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1]) - (self.group2()[3] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0]) - (self.group2()[3] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) - (self.group2()[3] * other.group0()[2])),
                ((self.group2()[3] * other.group0()[3]) + (self.group3()[0] * other.group0()[0]) + (self.group3()[1] * other.group0()[1]) + (self.group3()[2] * other.group0()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group1()[3] * other.group0()[0]) - (self.group3()[1] * other.group0()[2]) + (self.group3()[2] * other.group0()[1])),
                ((self.group0()[1] * other.group0()[3]) - (self.group1()[3] * other.group0()[1]) + (self.group3()[0] * other.group0()[2]) - (self.group3()[2] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[3]) - (self.group1()[3] * other.group0()[2]) - (self.group3()[0] * other.group0()[1]) + (self.group3()[1] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])
                    + (self.group2()[3] * other.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group2()[1] * other.group0()[2]) - (self.group2()[2] * other.group0()[1])
                    + (self.group3()[0] * other.group0()[3])
                    + (self.group3()[3] * other.group0()[0])),
                ((self.group1()[1] * other.group0()[3]) - (self.group2()[0] * other.group0()[2])
                    + (self.group2()[2] * other.group0()[0])
                    + (self.group3()[1] * other.group0()[3])
                    + (self.group3()[3] * other.group0()[1])),
                ((self.group1()[2] * other.group0()[3]) + (self.group2()[0] * other.group0()[1]) - (self.group2()[1] * other.group0()[0])
                    + (self.group3()[2] * other.group0()[3])
                    + (self.group3()[3] * other.group0()[2])),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])),
                ((self.group0()[1] * other.group0()[3]) - (self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])),
                ((self.group1()[3] * other.group0()[3]) - (self.group2()[0] * other.group0()[0]) - (self.group2()[1] * other.group0()[1]) - (self.group2()[2] * other.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<RoundPoint> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       59       75        0
    fn geometric_anti_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (self.group1()[0] * other.group0()[3]) + (self.group2()[3] * other.group0()[0])
                    - (self.group3()[0] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[2])
                    + (self.group0()[2] * other.group0()[0])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group2()[3] * other.group0()[1])
                    - (self.group3()[1] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[3]) + (self.group2()[3] * other.group0()[2])
                    - (self.group3()[2] * other.group0()[3])),
                ((self.group2()[3] * other[e2]) - (self.group3()[0] * other.group0()[0]) - (self.group3()[1] * other.group0()[1]) - (self.group3()[2] * other.group0()[2])
                    + (self.group3()[3] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other[e2]) + (self.group1()[3] * other.group0()[0]) + (self.group2()[0] * other.group0()[3]) + (self.group3()[1] * other.group0()[2])
                    - (self.group3()[2] * other.group0()[1])),
                ((self.group0()[1] * other[e2]) + (self.group1()[3] * other.group0()[1]) + (self.group2()[1] * other.group0()[3]) - (self.group3()[0] * other.group0()[2])
                    + (self.group3()[2] * other.group0()[0])),
                ((self.group0()[2] * other[e2]) + (self.group1()[3] * other.group0()[2]) + (self.group2()[2] * other.group0()[3]) + (self.group3()[0] * other.group0()[1])
                    - (self.group3()[1] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2]) - (self.group2()[3] * other[e2])
                    + (self.group3()[3] * other.group0()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group1()[0] * other[e2]) - (self.group2()[1] * other.group0()[2]) + (self.group2()[2] * other.group0()[1]) + (self.group3()[0] * other[e2])
                    - (self.group3()[3] * other.group0()[0])),
                ((self.group1()[1] * other[e2]) + (self.group2()[0] * other.group0()[2]) - (self.group2()[2] * other.group0()[0]) + (self.group3()[1] * other[e2])
                    - (self.group3()[3] * other.group0()[1])),
                ((self.group1()[2] * other[e2]) - (self.group2()[0] * other.group0()[1]) + (self.group2()[1] * other.group0()[0]) + (self.group3()[2] * other[e2])
                    - (self.group3()[3] * other.group0()[2])),
                ((self.group1()[3] * other[e2]) + (self.group2()[0] * other.group0()[0]) + (self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[0] * other[e2]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1]) + (self.group2()[0] * other.group0()[3])),
                (-(self.group0()[1] * other[e2]) - (self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0]) + (self.group2()[1] * other.group0()[3])),
                (-(self.group0()[2] * other[e2]) + (self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0]) + (self.group2()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Scalar> for AntiDipoleInversion {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0       19        0
    fn geometric_anti_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from([(self.group0()[0] * other[scalar]), (self.group0()[1] * other[scalar]), (self.group0()[2] * other[scalar])]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group1()[0] * other[scalar]),
                (self.group1()[1] * other[scalar]),
                (self.group1()[2] * other[scalar]),
                (self.group1()[3] * other[scalar] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group2()[0] * other[scalar]),
                (self.group2()[1] * other[scalar]),
                (self.group2()[2] * other[scalar]),
                (self.group2()[3] * other[scalar]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group3()[0] * other[scalar] * -1.0),
                (self.group3()[1] * other[scalar] * -1.0),
                (self.group3()[2] * other[scalar] * -1.0),
                (self.group3()[3] * other[scalar]),
            ]),
        );
    }
}
impl GeometricAntiProduct<Sphere> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       59       75        0
    fn geometric_anti_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1]) + (self.group1()[0] * other[e4315])
                    - (self.group2()[3] * other.group0()[0])
                    - (self.group3()[0] * other[e4315])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0]) + (self.group1()[1] * other[e4315])
                    - (self.group2()[3] * other.group0()[1])
                    - (self.group3()[1] * other[e4315])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) + (self.group1()[2] * other[e4315])
                    - (self.group2()[3] * other.group0()[2])
                    - (self.group3()[2] * other[e4315])),
                ((self.group2()[3] * other.group0()[3])
                    + (self.group3()[0] * other.group0()[0])
                    + (self.group3()[1] * other.group0()[1])
                    + (self.group3()[2] * other.group0()[2])
                    + (self.group3()[3] * other[e4315])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group1()[3] * other.group0()[0]) + (self.group2()[0] * other[e4315]) - (self.group3()[1] * other.group0()[2])
                    + (self.group3()[2] * other.group0()[1])),
                ((self.group0()[1] * other.group0()[3]) - (self.group1()[3] * other.group0()[1]) + (self.group2()[1] * other[e4315]) + (self.group3()[0] * other.group0()[2])
                    - (self.group3()[2] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[3]) - (self.group1()[3] * other.group0()[2]) + (self.group2()[2] * other[e4315]) - (self.group3()[0] * other.group0()[1])
                    + (self.group3()[1] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])
                    + (self.group2()[3] * other.group0()[3])
                    - (self.group3()[3] * other[e4315])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group2()[1] * other.group0()[2]) - (self.group2()[2] * other.group0()[1])
                    + (self.group3()[0] * other.group0()[3])
                    + (self.group3()[3] * other.group0()[0])),
                ((self.group1()[1] * other.group0()[3]) - (self.group2()[0] * other.group0()[2])
                    + (self.group2()[2] * other.group0()[0])
                    + (self.group3()[1] * other.group0()[3])
                    + (self.group3()[3] * other.group0()[1])),
                ((self.group1()[2] * other.group0()[3]) + (self.group2()[0] * other.group0()[1]) - (self.group2()[1] * other.group0()[0])
                    + (self.group3()[2] * other.group0()[3])
                    + (self.group3()[3] * other.group0()[2])),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other[e4315])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1]) - (self.group2()[0] * other[e4315])),
                ((self.group0()[1] * other.group0()[3]) - (self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0]) - (self.group2()[1] * other[e4315])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0]) - (self.group2()[2] * other[e4315])),
                ((self.group1()[3] * other.group0()[3]) - (self.group2()[0] * other.group0()[0]) - (self.group2()[1] * other.group0()[1]) - (self.group2()[2] * other.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorEven> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      224      240        0
    fn geometric_anti_product(self, other: VersorEven) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) + (self.group0()[1] * other.group3()[2])
                    - (self.group0()[2] * other.group1()[1])
                    - (self.group0()[2] * other.group3()[1])
                    + (self.group1()[0] * other.group3()[3])
                    + (self.group1()[1] * other.group0()[2])
                    - (self.group1()[2] * other.group0()[1])
                    - (self.group1()[3] * other.group0()[0])
                    + (self.group2()[3] * other.group1()[0])
                    + (self.group2()[3] * other.group3()[0])
                    - (self.group3()[0] * other.group3()[3])
                    - (self.group3()[1] * other.group0()[2])
                    + (self.group3()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[2]) - (self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group0()[3])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group0()[2] * other.group3()[0])
                    - (self.group1()[0] * other.group0()[2])
                    + (self.group1()[1] * other.group3()[3])
                    + (self.group1()[2] * other.group0()[0])
                    - (self.group1()[3] * other.group0()[1])
                    + (self.group2()[3] * other.group1()[1])
                    + (self.group2()[3] * other.group3()[1])
                    + (self.group3()[0] * other.group0()[2])
                    - (self.group3()[1] * other.group3()[3])
                    - (self.group3()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group1()[0]) - (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group0()[3])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group1()[0] * other.group0()[1])
                    - (self.group1()[1] * other.group0()[0])
                    + (self.group1()[2] * other.group3()[3])
                    - (self.group1()[3] * other.group0()[2])
                    + (self.group2()[3] * other.group1()[2])
                    + (self.group2()[3] * other.group3()[2])
                    - (self.group3()[0] * other.group0()[1])
                    + (self.group3()[1] * other.group0()[0])
                    - (self.group3()[2] * other.group3()[3])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])
                    + (self.group1()[3] * other.group1()[3])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])
                    + (self.group2()[3] * other.group2()[3])
                    - (self.group3()[0] * other.group3()[0])
                    - (self.group3()[1] * other.group3()[1])
                    - (self.group3()[2] * other.group3()[2])
                    + (self.group3()[3] * other.group3()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])
                    + (self.group1()[0] * other.group0()[3])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])
                    + (self.group1()[3] * other.group3()[0])
                    + (self.group2()[0] * other.group3()[3])
                    + (self.group2()[1] * other.group0()[2])
                    - (self.group2()[2] * other.group0()[1])
                    + (self.group2()[3] * other.group2()[0])
                    + (self.group3()[0] * other.group1()[3])
                    + (self.group3()[1] * other.group3()[2])
                    - (self.group3()[2] * other.group3()[1])
                    + (self.group3()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group2()[3]) + (self.group0()[2] * other.group2()[0])
                    - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group1()[2] * other.group1()[0])
                    + (self.group1()[3] * other.group3()[1])
                    - (self.group2()[0] * other.group0()[2])
                    + (self.group2()[1] * other.group3()[3])
                    + (self.group2()[2] * other.group0()[0])
                    + (self.group2()[3] * other.group2()[1])
                    - (self.group3()[0] * other.group3()[2])
                    + (self.group3()[1] * other.group1()[3])
                    + (self.group3()[2] * other.group3()[0])
                    + (self.group3()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) + (self.group0()[2] * other.group2()[3]) + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[0])
                    + (self.group1()[2] * other.group0()[3])
                    + (self.group1()[3] * other.group3()[2])
                    + (self.group2()[0] * other.group0()[1])
                    - (self.group2()[1] * other.group0()[0])
                    + (self.group2()[2] * other.group3()[3])
                    + (self.group2()[3] * other.group2()[2])
                    + (self.group3()[0] * other.group3()[1])
                    - (self.group3()[1] * other.group3()[0])
                    + (self.group3()[2] * other.group1()[3])
                    + (self.group3()[3] * other.group0()[2])),
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group2()[1]) + (self.group0()[2] * other.group2()[2])
                    - (self.group1()[0] * other.group3()[0])
                    - (self.group1()[1] * other.group3()[1])
                    - (self.group1()[2] * other.group3()[2])
                    + (self.group1()[3] * other.group0()[3])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])
                    - (self.group2()[3] * other.group2()[3])
                    - (self.group3()[0] * other.group1()[0])
                    - (self.group3()[1] * other.group1()[1])
                    - (self.group3()[2] * other.group1()[2])
                    + (self.group3()[3] * other.group3()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group1()[0] * other.group2()[3]) + (self.group1()[1] * other.group2()[2]) - (self.group1()[2] * other.group2()[1])
                    + (self.group1()[3] * other.group2()[0])
                    + (self.group2()[0] * other.group0()[3])
                    - (self.group2()[0] * other.group1()[3])
                    + (self.group2()[1] * other.group1()[2])
                    - (self.group2()[1] * other.group3()[2])
                    - (self.group2()[2] * other.group1()[1])
                    + (self.group2()[2] * other.group3()[1])
                    + (self.group3()[0] * other.group2()[3])
                    + (self.group3()[1] * other.group2()[2])
                    - (self.group3()[2] * other.group2()[1])
                    + (self.group3()[3] * other.group1()[0])
                    - (self.group3()[3] * other.group3()[0])),
                (-(self.group1()[0] * other.group2()[2])
                    + (self.group1()[1] * other.group2()[3])
                    + (self.group1()[2] * other.group2()[0])
                    + (self.group1()[3] * other.group2()[1])
                    - (self.group2()[0] * other.group1()[2])
                    + (self.group2()[0] * other.group3()[2])
                    + (self.group2()[1] * other.group0()[3])
                    - (self.group2()[1] * other.group1()[3])
                    + (self.group2()[2] * other.group1()[0])
                    - (self.group2()[2] * other.group3()[0])
                    - (self.group3()[0] * other.group2()[2])
                    + (self.group3()[1] * other.group2()[3])
                    + (self.group3()[2] * other.group2()[0])
                    + (self.group3()[3] * other.group1()[1])
                    - (self.group3()[3] * other.group3()[1])),
                ((self.group1()[0] * other.group2()[1]) - (self.group1()[1] * other.group2()[0])
                    + (self.group1()[2] * other.group2()[3])
                    + (self.group1()[3] * other.group2()[2])
                    + (self.group2()[0] * other.group1()[1])
                    - (self.group2()[0] * other.group3()[1])
                    - (self.group2()[1] * other.group1()[0])
                    + (self.group2()[1] * other.group3()[0])
                    + (self.group2()[2] * other.group0()[3])
                    - (self.group2()[2] * other.group1()[3])
                    + (self.group3()[0] * other.group2()[1])
                    - (self.group3()[1] * other.group2()[0])
                    + (self.group3()[2] * other.group2()[3])
                    + (self.group3()[3] * other.group1()[2])
                    - (self.group3()[3] * other.group3()[2])),
                (-(self.group1()[0] * other.group2()[0]) - (self.group1()[1] * other.group2()[1]) - (self.group1()[2] * other.group2()[2])
                    + (self.group1()[3] * other.group2()[3])
                    - (self.group2()[0] * other.group1()[0])
                    + (self.group2()[0] * other.group3()[0])
                    - (self.group2()[1] * other.group1()[1])
                    + (self.group2()[1] * other.group3()[1])
                    - (self.group2()[2] * other.group1()[2])
                    + (self.group2()[2] * other.group3()[2])
                    - (self.group3()[0] * other.group2()[0])
                    - (self.group3()[1] * other.group2()[1])
                    - (self.group3()[2] * other.group2()[2])
                    + (self.group3()[3] * other.group0()[3])
                    - (self.group3()[3] * other.group1()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[1])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group3()[2])
                    - (self.group1()[2] * other.group3()[1])
                    + (self.group1()[3] * other.group1()[0])
                    + (self.group2()[0] * other.group3()[3])
                    + (self.group2()[1] * other.group0()[2])
                    - (self.group2()[2] * other.group0()[1])
                    - (self.group2()[3] * other.group2()[0])
                    + (self.group3()[0] * other.group0()[3])
                    + (self.group3()[1] * other.group1()[2])
                    - (self.group3()[2] * other.group1()[1])
                    + (self.group3()[3] * other.group0()[0])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[1] * other.group2()[3]) - (self.group0()[2] * other.group2()[0]) - (self.group1()[0] * other.group3()[2])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group3()[0])
                    + (self.group1()[3] * other.group1()[1])
                    - (self.group2()[0] * other.group0()[2])
                    + (self.group2()[1] * other.group3()[3])
                    + (self.group2()[2] * other.group0()[0])
                    - (self.group2()[3] * other.group2()[1])
                    - (self.group3()[0] * other.group1()[2])
                    + (self.group3()[1] * other.group0()[3])
                    + (self.group3()[2] * other.group1()[0])
                    + (self.group3()[3] * other.group0()[1])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[0]) - (self.group0()[2] * other.group2()[3])
                    + (self.group1()[0] * other.group3()[1])
                    - (self.group1()[1] * other.group3()[0])
                    + (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])
                    + (self.group2()[0] * other.group0()[1])
                    - (self.group2()[1] * other.group0()[0])
                    + (self.group2()[2] * other.group3()[3])
                    - (self.group2()[3] * other.group2()[2])
                    + (self.group3()[0] * other.group1()[1])
                    - (self.group3()[1] * other.group1()[0])
                    + (self.group3()[2] * other.group0()[3])
                    + (self.group3()[3] * other.group0()[2])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[0] * other.group3()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group3()[3])
                    + (self.group2()[3] * other.group0()[3])
                    + (self.group2()[3] * other.group1()[3])
                    + (self.group3()[0] * other.group0()[0])
                    + (self.group3()[1] * other.group0()[1])
                    + (self.group3()[2] * other.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorOdd> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      224      240        0
    fn geometric_anti_product(self, other: VersorOdd) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[1] * other.group3()[2])
                    - (self.group0()[2] * other.group1()[1])
                    + (self.group0()[2] * other.group3()[1])
                    + (self.group1()[0] * other.group2()[3])
                    + (self.group1()[1] * other.group0()[2])
                    - (self.group1()[2] * other.group0()[1])
                    - (self.group1()[3] * other.group0()[0])
                    + (self.group2()[3] * other.group1()[0])
                    - (self.group2()[3] * other.group3()[0])
                    - (self.group3()[0] * other.group2()[3])
                    - (self.group3()[1] * other.group0()[2])
                    + (self.group3()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group0()[3])
                    - (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    - (self.group0()[2] * other.group3()[0])
                    - (self.group1()[0] * other.group0()[2])
                    + (self.group1()[1] * other.group2()[3])
                    + (self.group1()[2] * other.group0()[0])
                    - (self.group1()[3] * other.group0()[1])
                    + (self.group2()[3] * other.group1()[1])
                    - (self.group2()[3] * other.group3()[1])
                    + (self.group3()[0] * other.group0()[2])
                    - (self.group3()[1] * other.group2()[3])
                    - (self.group3()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group1()[0])
                    + (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group0()[3])
                    - (self.group0()[2] * other.group1()[3])
                    + (self.group1()[0] * other.group0()[1])
                    - (self.group1()[1] * other.group0()[0])
                    + (self.group1()[2] * other.group2()[3])
                    - (self.group1()[3] * other.group0()[2])
                    + (self.group2()[3] * other.group1()[2])
                    - (self.group2()[3] * other.group3()[2])
                    - (self.group3()[0] * other.group0()[1])
                    + (self.group3()[1] * other.group0()[0])
                    - (self.group3()[2] * other.group2()[3])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])
                    + (self.group2()[3] * other.group3()[3])
                    + (self.group3()[0] * other.group3()[0])
                    + (self.group3()[1] * other.group3()[1])
                    + (self.group3()[2] * other.group3()[2])
                    + (self.group3()[3] * other.group2()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])
                    + (self.group1()[0] * other.group0()[3])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])
                    - (self.group1()[3] * other.group3()[0])
                    + (self.group2()[0] * other.group2()[3])
                    + (self.group2()[1] * other.group0()[2])
                    - (self.group2()[2] * other.group0()[1])
                    + (self.group2()[3] * other.group2()[0])
                    - (self.group3()[0] * other.group1()[3])
                    - (self.group3()[1] * other.group3()[2])
                    + (self.group3()[2] * other.group3()[1])
                    + (self.group3()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group3()[3]) + (self.group0()[2] * other.group2()[0])
                    - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group1()[2] * other.group1()[0])
                    - (self.group1()[3] * other.group3()[1])
                    - (self.group2()[0] * other.group0()[2])
                    + (self.group2()[1] * other.group2()[3])
                    + (self.group2()[2] * other.group0()[0])
                    + (self.group2()[3] * other.group2()[1])
                    + (self.group3()[0] * other.group3()[2])
                    - (self.group3()[1] * other.group1()[3])
                    - (self.group3()[2] * other.group3()[0])
                    + (self.group3()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) + (self.group0()[2] * other.group3()[3]) + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[0])
                    + (self.group1()[2] * other.group0()[3])
                    - (self.group1()[3] * other.group3()[2])
                    + (self.group2()[0] * other.group0()[1])
                    - (self.group2()[1] * other.group0()[0])
                    + (self.group2()[2] * other.group2()[3])
                    + (self.group2()[3] * other.group2()[2])
                    - (self.group3()[0] * other.group3()[1])
                    + (self.group3()[1] * other.group3()[0])
                    - (self.group3()[2] * other.group1()[3])
                    + (self.group3()[3] * other.group0()[2])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group1()[0] * other.group3()[0])
                    - (self.group1()[1] * other.group3()[1])
                    - (self.group1()[2] * other.group3()[2])
                    - (self.group1()[3] * other.group0()[3])
                    + (self.group2()[0] * other.group0()[0])
                    + (self.group2()[1] * other.group0()[1])
                    + (self.group2()[2] * other.group0()[2])
                    + (self.group2()[3] * other.group3()[3])
                    + (self.group3()[0] * other.group1()[0])
                    + (self.group3()[1] * other.group1()[1])
                    + (self.group3()[2] * other.group1()[2])
                    - (self.group3()[3] * other.group2()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group1()[0] * other.group3()[3]) + (self.group1()[1] * other.group2()[2]) - (self.group1()[2] * other.group2()[1])
                    + (self.group1()[3] * other.group2()[0])
                    + (self.group2()[0] * other.group0()[3])
                    + (self.group2()[0] * other.group1()[3])
                    + (self.group2()[1] * other.group1()[2])
                    + (self.group2()[1] * other.group3()[2])
                    - (self.group2()[2] * other.group1()[1])
                    - (self.group2()[2] * other.group3()[1])
                    + (self.group3()[0] * other.group3()[3])
                    + (self.group3()[1] * other.group2()[2])
                    - (self.group3()[2] * other.group2()[1])
                    + (self.group3()[3] * other.group1()[0])
                    + (self.group3()[3] * other.group3()[0])),
                (-(self.group1()[0] * other.group2()[2])
                    + (self.group1()[1] * other.group3()[3])
                    + (self.group1()[2] * other.group2()[0])
                    + (self.group1()[3] * other.group2()[1])
                    - (self.group2()[0] * other.group1()[2])
                    - (self.group2()[0] * other.group3()[2])
                    + (self.group2()[1] * other.group0()[3])
                    + (self.group2()[1] * other.group1()[3])
                    + (self.group2()[2] * other.group1()[0])
                    + (self.group2()[2] * other.group3()[0])
                    - (self.group3()[0] * other.group2()[2])
                    + (self.group3()[1] * other.group3()[3])
                    + (self.group3()[2] * other.group2()[0])
                    + (self.group3()[3] * other.group1()[1])
                    + (self.group3()[3] * other.group3()[1])),
                ((self.group1()[0] * other.group2()[1]) - (self.group1()[1] * other.group2()[0])
                    + (self.group1()[2] * other.group3()[3])
                    + (self.group1()[3] * other.group2()[2])
                    + (self.group2()[0] * other.group1()[1])
                    + (self.group2()[0] * other.group3()[1])
                    - (self.group2()[1] * other.group1()[0])
                    - (self.group2()[1] * other.group3()[0])
                    + (self.group2()[2] * other.group0()[3])
                    + (self.group2()[2] * other.group1()[3])
                    + (self.group3()[0] * other.group2()[1])
                    - (self.group3()[1] * other.group2()[0])
                    + (self.group3()[2] * other.group3()[3])
                    + (self.group3()[3] * other.group1()[2])
                    + (self.group3()[3] * other.group3()[2])),
                (-(self.group0()[0] * other.group1()[0]) + (self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group1()[1])
                    + (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group1()[2])
                    + (self.group0()[2] * other.group3()[2])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group2()[3])
                    + (self.group2()[3] * other.group0()[3])
                    - (self.group2()[3] * other.group1()[3])
                    + (self.group3()[0] * other.group0()[0])
                    + (self.group3()[1] * other.group0()[1])
                    + (self.group3()[2] * other.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group3()[2])
                    - (self.group1()[2] * other.group3()[1])
                    - (self.group1()[3] * other.group1()[0])
                    - (self.group2()[0] * other.group2()[3])
                    - (self.group2()[1] * other.group0()[2])
                    + (self.group2()[2] * other.group0()[1])
                    + (self.group2()[3] * other.group2()[0])
                    - (self.group3()[0] * other.group0()[3])
                    - (self.group3()[1] * other.group1()[2])
                    + (self.group3()[2] * other.group1()[1])
                    - (self.group3()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group3()[3]) + (self.group0()[2] * other.group2()[0])
                    - (self.group1()[0] * other.group3()[2])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group3()[0])
                    - (self.group1()[3] * other.group1()[1])
                    + (self.group2()[0] * other.group0()[2])
                    - (self.group2()[1] * other.group2()[3])
                    - (self.group2()[2] * other.group0()[0])
                    + (self.group2()[3] * other.group2()[1])
                    + (self.group3()[0] * other.group1()[2])
                    - (self.group3()[1] * other.group0()[3])
                    - (self.group3()[2] * other.group1()[0])
                    - (self.group3()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) + (self.group0()[2] * other.group3()[3]) + (self.group1()[0] * other.group3()[1])
                    - (self.group1()[1] * other.group3()[0])
                    + (self.group1()[2] * other.group1()[3])
                    - (self.group1()[3] * other.group1()[2])
                    - (self.group2()[0] * other.group0()[1])
                    + (self.group2()[1] * other.group0()[0])
                    - (self.group2()[2] * other.group2()[3])
                    + (self.group2()[3] * other.group2()[2])
                    - (self.group3()[0] * other.group1()[1])
                    + (self.group3()[1] * other.group1()[0])
                    - (self.group3()[2] * other.group0()[3])
                    - (self.group3()[3] * other.group0()[2])),
                (-(self.group1()[0] * other.group2()[0]) - (self.group1()[1] * other.group2()[1]) - (self.group1()[2] * other.group2()[2])
                    + (self.group1()[3] * other.group3()[3])
                    - (self.group2()[0] * other.group1()[0])
                    - (self.group2()[0] * other.group3()[0])
                    - (self.group2()[1] * other.group1()[1])
                    - (self.group2()[1] * other.group3()[1])
                    - (self.group2()[2] * other.group1()[2])
                    - (self.group2()[2] * other.group3()[2])
                    - (self.group3()[0] * other.group2()[0])
                    - (self.group3()[1] * other.group2()[1])
                    - (self.group3()[2] * other.group2()[2])
                    + (self.group3()[3] * other.group0()[3])
                    + (self.group3()[3] * other.group1()[3])),
            ]),
        );
    }
}
impl InfixGeometricAntiProduct for AntiDualNum {}
impl GeometricAntiProduct<AntiCircleRotor> for AntiDualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        7       26        0
    fn geometric_anti_product(self, other: AntiCircleRotor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group0()[2])),
                (self.group0()[1] * other.group2()[3] * -1.0),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[2]) - (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[1] * other.group2()[0] * -1.0),
                (self.group0()[1] * other.group2()[1] * -1.0),
                (self.group0()[1] * other.group2()[2] * -1.0),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other.group2()[0]),
                (self.group0()[0] * other.group2()[1]),
                (self.group0()[0] * other.group2()[2]),
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[0] * other.group2()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDipoleInversion> for AntiDualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       14       30        0
    fn geometric_anti_product(self, other: AntiDipoleInversion) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group0()[2])),
                (self.group0()[0] * other.group3()[3]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group1()[2])),
                ((self.group0()[0] * other.group3()[3]) - (self.group0()[1] * other.group1()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group2()[0]),
                (self.group0()[1] * other.group2()[1]),
                (self.group0()[1] * other.group2()[2]),
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group2()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group3()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group3()[1])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[1] * other.group3()[2])),
                (self.group0()[1] * other.group3()[3]),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum> for AntiDualNum {
    type Output = DualNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        1        4        0
    fn geometric_anti_product(self, other: AntiDualNum) -> Self::Output {
        return DualNum::from_groups(/* e4, e12345 */ Simd32x2::from([
            (-(other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
            (other.group0()[1] * self.group0()[1] * -1.0),
        ]));
    }
}
impl GeometricAntiProduct<AntiFlatPoint> for AntiDualNum {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0       12        0
    fn geometric_anti_product(self, other: AntiFlatPoint) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (self.group0()[1] * other.group0()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[0] * other.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiFlector> for AntiDualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4       20        0
    fn geometric_anti_product(self, other: AntiFlector) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                (self.group0()[0] * other.group1()[3]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[0] * other.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3]),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiLine> for AntiDualNum {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3       21        0
    fn geometric_anti_product(self, other: AntiLine) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                (self.group0()[0] * other.group0()[0] * -1.0),
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[0] * other.group0()[2] * -1.0),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group0()[2])),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (self.group0()[1] * other.group1()[0] * -1.0),
                (self.group0()[1] * other.group1()[1] * -1.0),
                (self.group0()[1] * other.group1()[2] * -1.0),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiMotor> for AntiDualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4       28        0
    fn geometric_anti_product(self, other: AntiMotor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0] * -1.0),
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[0] * other.group0()[2] * -1.0),
                (-(self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group0()[2])),
                (self.group0()[0] * other.group1()[3]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[1] * other.group1()[0] * -1.0),
                (self.group0()[1] * other.group1()[1] * -1.0),
                (self.group0()[1] * other.group1()[2] * -1.0),
                (self.group0()[1] * other.group1()[3] * -1.0),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                (self.group0()[0] * other.group0()[3] * -1.0),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiPlane> for AntiDualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0       12        0
    fn geometric_anti_product(self, other: AntiPlane) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (self.group0()[0] * other.group0()[3]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3])]),
            // e15, e25, e35, e1234
            Simd32x4::from(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0] * -1.0),
                (self.group0()[1] * other.group0()[1] * -1.0),
                (self.group0()[1] * other.group0()[2] * -1.0),
                (self.group0()[1] * other.group0()[3]),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiScalar> for AntiDualNum {
    type Output = AntiDualNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn geometric_anti_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiDualNum::from_groups(/* e1234, scalar */ Simd32x2::from([(self.group0()[0] * other[e12345]), (self.group0()[1] * other[e12345])]));
    }
}
impl GeometricAntiProduct<Circle> for AntiDualNum {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       21        0
    fn geometric_anti_product(self, other: Circle) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group2()[0]),
                (self.group0()[1] * other.group2()[1]),
                (self.group0()[1] * other.group2()[2]),
                (self.group0()[0] * other.group1()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group2()[0]),
                (self.group0()[0] * other.group2()[1]),
                (self.group0()[0] * other.group2()[2]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<CircleRotor> for AntiDualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        7       23        0
    fn geometric_anti_product(self, other: CircleRotor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[2])),
                (self.group0()[1] * other.group2()[3]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group2()[0]),
                (self.group0()[1] * other.group2()[1]),
                (self.group0()[1] * other.group2()[2]),
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[0] * other.group2()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group2()[0]),
                (self.group0()[0] * other.group2()[1]),
                (self.group0()[0] * other.group2()[2]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<Dipole> for AntiDualNum {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       23        0
    fn geometric_anti_product(self, other: Dipole) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group0()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[2]) - (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (self.group0()[1] * other.group2()[0] * -1.0),
                (self.group0()[1] * other.group2()[1] * -1.0),
                (self.group0()[1] * other.group2()[2] * -1.0),
                (self.group0()[0] * other.group1()[3]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[0] * other.group2()[0]),
                (self.group0()[0] * other.group2()[1]),
                (self.group0()[0] * other.group2()[2]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<DipoleInversion> for AntiDualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       14       35        0
    fn geometric_anti_product(self, other: DipoleInversion) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[0]) + (self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[0] * other.group3()[2]) - (self.group0()[1] * other.group0()[2])),
                (self.group0()[0] * other.group3()[3] * -1.0),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[2]) - (self.group0()[1] * other.group1()[2])),
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group1()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[1] * other.group2()[0] * -1.0),
                (self.group0()[1] * other.group2()[1] * -1.0),
                (self.group0()[1] * other.group2()[2] * -1.0),
                (self.group0()[1] * other.group3()[3] * -1.0),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group3()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group3()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group3()[2])),
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group2()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<DualNum> for AntiDualNum {
    type Output = AntiDualNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        1        3        0
    fn geometric_anti_product(self, other: DualNum) -> Self::Output {
        return AntiDualNum::from_groups(/* e1234, scalar */ Simd32x2::from([
            ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
            (self.group0()[1] * other.group0()[1]),
        ]));
    }
}
impl GeometricAntiProduct<FlatPoint> for AntiDualNum {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0       17        0
    fn geometric_anti_product(self, other: FlatPoint) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0] * -1.0),
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[0] * other.group0()[2] * -1.0),
                (self.group0()[1] * other.group0()[3]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0] * -1.0),
                (self.group0()[1] * other.group0()[1] * -1.0),
                (self.group0()[1] * other.group0()[2] * -1.0),
                (self.group0()[0] * other.group0()[3]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<Flector> for AntiDualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4       28        0
    fn geometric_anti_product(self, other: Flector) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                (self.group0()[0] * other.group1()[3] * -1.0),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0] * -1.0),
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[0] * other.group0()[2] * -1.0),
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0] * -1.0),
                (self.group0()[1] * other.group0()[1] * -1.0),
                (self.group0()[1] * other.group0()[2] * -1.0),
                (self.group0()[1] * other.group1()[3] * -1.0),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[0] * other.group0()[3]),
            ]),
        );
    }
}
impl GeometricAntiProduct<Line> for AntiDualNum {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3       15        0
    fn geometric_anti_product(self, other: Line) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from([(self.group0()[0] * other.group0()[0]), (self.group0()[0] * other.group0()[1]), (self.group0()[0] * other.group0()[2])]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[2])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group1()[0]),
                (self.group0()[1] * other.group1()[1]),
                (self.group0()[1] * other.group1()[2]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<Motor> for AntiDualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4       20        0
    fn geometric_anti_product(self, other: Motor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[2])),
                (self.group0()[0] * other.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group1()[0]),
                (self.group0()[1] * other.group1()[1]),
                (self.group0()[1] * other.group1()[2]),
                (self.group0()[0] * other.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                (self.group0()[1] * other.group1()[3]),
            ]),
        );
    }
}
impl GeometricAntiProduct<MultiVector> for AntiDualNum {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       32       68        0
    fn geometric_anti_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((self.group0()[0] * other[e1]) + (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[0] * other.group9()[3]) - (self.group0()[1] * other.group0()[0])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group9()[0])),
                ((self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group9()[1])),
                ((self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group9()[2])),
                (-(self.group0()[0] * other.group0()[0]) + (self.group0()[0] * other.group3()[3]) - (self.group0()[1] * other[e45])),
            ]),
            // e5
            (self.group0()[1] * other.group9()[3] * -1.0),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group0()[1] * other.group8()[0]),
                (self.group0()[1] * other.group8()[1]),
                (self.group0()[1] * other.group8()[2]),
                ((self.group0()[0] * other[e1]) - (self.group0()[1] * other.group6()[3])),
            ]),
            // e41, e42, e43
            Simd32x3::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[0] * other.group6()[0]) + (self.group0()[1] * other.group7()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[0] * other.group6()[1]) + (self.group0()[1] * other.group7()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[0] * other.group6()[2]) + (self.group0()[1] * other.group7()[2])),
            ]),
            // e23, e31, e12
            Simd32x3::from([
                ((self.group0()[0] * other.group8()[0]) + (self.group0()[1] * other.group6()[0])),
                ((self.group0()[0] * other.group8()[1]) + (self.group0()[1] * other.group6()[1])),
                ((self.group0()[0] * other.group8()[2]) + (self.group0()[1] * other.group6()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group5()[0])),
                (-(self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group5()[1])),
                (-(self.group0()[0] * other.group3()[2]) - (self.group0()[1] * other.group5()[2])),
                ((self.group0()[0] * other.group9()[3]) + (self.group0()[1] * other.group3()[3])),
            ]),
            // e423, e431, e412
            Simd32x3::from([
                (-(self.group0()[0] * other.group5()[0]) + (self.group0()[0] * other.group9()[0]) - (self.group0()[1] * other.group4()[0])),
                (-(self.group0()[0] * other.group5()[1]) + (self.group0()[0] * other.group9()[1]) - (self.group0()[1] * other.group4()[1])),
                (-(self.group0()[0] * other.group5()[2]) + (self.group0()[0] * other.group9()[2]) - (self.group0()[1] * other.group4()[2])),
            ]),
            // e235, e315, e125
            Simd32x3::from([
                (self.group0()[1] * other.group3()[0] * -1.0),
                (self.group0()[1] * other.group3()[1] * -1.0),
                (self.group0()[1] * other.group3()[2] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group8()[0]) - (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group8()[1]) - (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group8()[2]) - (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other[e1]),
            ]),
            // e1234
            ((self.group0()[0] * other.group0()[1]) + (self.group0()[0] * other.group6()[3]) + (self.group0()[1] * other.group1()[3])),
        );
    }
}
impl GeometricAntiProduct<Plane> for AntiDualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0       11        0
    fn geometric_anti_product(self, other: Plane) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (self.group0()[0] * other.group0()[3] * -1.0),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3])]),
            // e235, e315, e125, e5
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other.group0()[3] * -1.0)]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<RoundPoint> for AntiDualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0       13        0
    fn geometric_anti_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (self.group0()[0] * other[e2]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other[e2])]),
            // e15, e25, e35, e1234
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other.group0()[3])]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0] * -1.0),
                (self.group0()[1] * other.group0()[1] * -1.0),
                (self.group0()[1] * other.group0()[2] * -1.0),
                (self.group0()[1] * other[e2]),
            ]),
        );
    }
}
impl GeometricAntiProduct<Scalar> for AntiDualNum {
    type Output = DualNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        4        0
    fn geometric_anti_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return DualNum::from_groups(
            // e4, e12345
            Simd32x2::from([(self.group0()[0] * other[scalar] * -1.0), (self.group0()[1] * other[scalar] * -1.0)]),
        );
    }
}
impl GeometricAntiProduct<Sphere> for AntiDualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0       13        0
    fn geometric_anti_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (self.group0()[0] * other.group0()[3] * -1.0),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3])]),
            // e235, e315, e125, e5
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other.group0()[3] * -1.0)]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[1] * other[e4315] * -1.0),
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorEven> for AntiDualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       16       32        0
    fn geometric_anti_product(self, other: VersorEven) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group0()[2])),
                ((self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group1()[2])),
                ((self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group1()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group2()[0]),
                (self.group0()[1] * other.group2()[1]),
                (self.group0()[1] * other.group2()[2]),
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group3()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group3()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group3()[1])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[1] * other.group3()[2])),
                (self.group0()[1] * other.group2()[3]),
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorOdd> for AntiDualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       16       36        0
    fn geometric_anti_product(self, other: VersorOdd) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[0]) + (self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[0] * other.group3()[2]) - (self.group0()[1] * other.group0()[2])),
                (-(self.group0()[0] * other.group3()[3]) - (self.group0()[1] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[2]) - (self.group0()[1] * other.group1()[2])),
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group1()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[1] * other.group2()[0] * -1.0),
                (self.group0()[1] * other.group2()[1] * -1.0),
                (self.group0()[1] * other.group2()[2] * -1.0),
                (self.group0()[1] * other.group3()[3] * -1.0),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group3()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group3()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group3()[2])),
                (-(self.group0()[0] * other.group0()[3]) + (self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group2()[3])),
            ]),
        );
    }
}
impl InfixGeometricAntiProduct for AntiFlatPoint {}
impl GeometricAntiProduct<AntiCircleRotor> for AntiFlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       29       47        0
    fn geometric_anti_product(self, other: AntiCircleRotor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3] * -1.0),
                (other.group0()[1] * self.group0()[3] * -1.0),
                (other.group0()[2] * self.group0()[3] * -1.0),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group1()[3] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) - (other.group2()[3] * self.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])
                    + (other.group1()[3] * self.group0()[0])
                    + (other.group2()[0] * self.group0()[3])
                    + (other.group2()[3] * self.group0()[0])),
                ((other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])
                    + (other.group1()[3] * self.group0()[1])
                    + (other.group2()[1] * self.group0()[3])
                    + (other.group2()[3] * self.group0()[1])),
                (-(other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[3] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[3])
                    + (other.group2()[3] * self.group0()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) - (other.group1()[0] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0]) - (other.group1()[1] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) - (other.group1()[2] * self.group0()[3])),
                (-(other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDipoleInversion> for AntiFlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       44       64        0
    fn geometric_anti_product(self, other: AntiDipoleInversion) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3] * -1.0),
                (other.group0()[1] * self.group0()[3] * -1.0),
                (other.group0()[2] * self.group0()[3] * -1.0),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])
                    + (other.group1()[3] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2])
                    + (other.group0()[2] * self.group0()[1])
                    + (other.group2()[3] * self.group0()[0])
                    + (other.group3()[0] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) + (other.group2()[3] * self.group0()[1]) + (other.group3()[1] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[1])
                    + (other.group0()[1] * self.group0()[0])
                    + (other.group2()[3] * self.group0()[2])
                    + (other.group3()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1]) - (other.group1()[3] * self.group0()[0])
                    + (other.group2()[0] * self.group0()[3])
                    + (other.group3()[1] * self.group0()[2])
                    - (other.group3()[2] * self.group0()[1])),
                ((other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0]) - (other.group1()[3] * self.group0()[1]) + (other.group2()[1] * self.group0()[3])
                    - (other.group3()[0] * self.group0()[2])
                    + (other.group3()[2] * self.group0()[0])),
                (-(other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0]) - (other.group1()[3] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[3])
                    + (other.group3()[0] * self.group0()[1])
                    - (other.group3()[1] * self.group0()[0])),
                (-(other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])
                    + (other.group3()[0] * self.group0()[0])
                    + (other.group3()[1] * self.group0()[1])
                    + (other.group3()[2] * self.group0()[2])
                    + (other.group3()[3] * self.group0()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2])
                    + (other.group0()[2] * self.group0()[1])
                    + (other.group1()[0] * self.group0()[3])
                    + (other.group2()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3]) + (other.group2()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[1])
                    + (other.group0()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group0()[3])
                    + (other.group2()[3] * self.group0()[2])),
                (other.group2()[3] * self.group0()[3] * -1.0),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum> for AntiFlatPoint {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0       16        0
    fn geometric_anti_product(self, other: AntiDualNum) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                (other.group0()[1] * self.group0()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                (other.group0()[0] * self.group0()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiFlatPoint> for AntiFlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        7        0
    fn geometric_anti_product(self, other: AntiFlatPoint) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[3] * self.group0()[3])]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[3]) - (other.group0()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group0()[3]) - (other.group0()[3] * self.group0()[2])),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiFlector> for AntiFlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       12       20        0
    fn geometric_anti_product(self, other: AntiFlector) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[1])
                    + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group0()[3]) - (self.group0()[2] * other.group1()[0]) + (self.group0()[3] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group0()[3])
                    + (self.group0()[3] * other.group0()[2])),
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1]) + (self.group0()[2] * other.group1()[2]) + (self.group0()[3] * other.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiLine> for AntiFlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       18        0
    fn geometric_anti_product(self, other: AntiLine) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (other.group1()[0] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (other.group1()[2] * self.group0()[3])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3] * -1.0),
                (other.group0()[1] * self.group0()[3] * -1.0),
                (other.group0()[2] * self.group0()[3] * -1.0),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiMotor> for AntiFlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       12       24        0
    fn geometric_anti_product(self, other: AntiMotor) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (self.group0()[3] * other.group1()[0])),
                (-(self.group0()[0] * other.group0()[2])
                    + (self.group0()[1] * other.group0()[3])
                    + (self.group0()[2] * other.group0()[0])
                    + (self.group0()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group1()[2])),
                (self.group0()[3] * other.group0()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group0()[3] * other.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiPlane> for AntiFlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       13        0
    fn geometric_anti_product(self, other: AntiPlane) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiScalar> for AntiFlatPoint {
    type Output = AntiFlatPoint;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        4        0
    fn geometric_anti_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiFlatPoint::from_groups(/* e235, e315, e125, e321 */ Simd32x4::from([
            (self.group0()[0] * other[e12345]),
            (self.group0()[1] * other[e12345]),
            (self.group0()[2] * other[e12345]),
            (self.group0()[3] * other[e12345]),
        ]));
    }
}
impl GeometricAntiProduct<Circle> for AntiFlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       25       43        0
    fn geometric_anti_product(self, other: Circle) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3] * -1.0),
                (other.group0()[1] * self.group0()[3] * -1.0),
                (other.group0()[2] * self.group0()[3] * -1.0),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])
                    + (self.group0()[3] * other.group1()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((other.group2()[0] * self.group0()[3]) - (self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                ((other.group2()[1] * self.group0()[3]) - (self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group1()[0])),
                ((other.group2()[2] * self.group0()[3]) + (self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group1()[3])),
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (self.group0()[3] * other.group1()[0])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) + (self.group0()[3] * other.group1()[1])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (self.group0()[3] * other.group1()[2])),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<CircleRotor> for AntiFlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       29       47        0
    fn geometric_anti_product(self, other: CircleRotor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3] * -1.0),
                (other.group0()[1] * self.group0()[3] * -1.0),
                (other.group0()[2] * self.group0()[3] * -1.0),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])
                    + (self.group0()[3] * other.group1()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])
                    + (self.group0()[3] * other.group2()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[3]) + (self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])
                    + (self.group0()[3] * other.group2()[0])),
                (-(self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group1()[3])
                    + (self.group0()[1] * other.group2()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group0()[3] * other.group2()[1])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group1()[3])
                    + (self.group0()[2] * other.group2()[3])
                    + (self.group0()[3] * other.group2()[2])),
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (self.group0()[3] * other.group1()[0])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) + (self.group0()[3] * other.group1()[1])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (self.group0()[3] * other.group1()[2])),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<Dipole> for AntiFlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       25       43        0
    fn geometric_anti_product(self, other: Dipole) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3] * -1.0),
                (other.group0()[1] * self.group0()[3] * -1.0),
                (other.group0()[2] * self.group0()[3] * -1.0),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (self.group0()[3] * other.group1()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group2()[0] * self.group0()[3]) + (self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                ((other.group2()[1] * self.group0()[3]) - (self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group1()[0])),
                ((other.group2()[2] * self.group0()[3]) + (self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[3])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) - (self.group0()[3] * other.group1()[0])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0]) - (self.group0()[3] * other.group1()[1])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) - (self.group0()[3] * other.group1()[2])),
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<DipoleInversion> for AntiFlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       44       64        0
    fn geometric_anti_product(self, other: DipoleInversion) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3] * -1.0),
                (other.group0()[1] * self.group0()[3] * -1.0),
                (other.group0()[2] * self.group0()[3] * -1.0),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (self.group0()[3] * other.group1()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (self.group0()[0] * other.group2()[3])
                    - (self.group0()[3] * other.group3()[0])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) + (self.group0()[1] * other.group2()[3]) - (self.group0()[3] * other.group3()[1])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (self.group0()[2] * other.group2()[3])
                    - (self.group0()[3] * other.group3()[2])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) + (self.group0()[1] * other.group3()[2])
                    - (self.group0()[2] * other.group1()[1])
                    - (self.group0()[2] * other.group3()[1])
                    + (self.group0()[3] * other.group2()[0])),
                (-(self.group0()[0] * other.group1()[2]) - (self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group0()[2] * other.group3()[0])
                    + (self.group0()[3] * other.group2()[1])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group1()[0]) - (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group0()[3] * other.group2()[2])),
                (self.group0()[3] * other.group2()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) - (self.group0()[0] * other.group2()[3]) - (self.group0()[3] * other.group1()[0])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])
                    - (self.group0()[1] * other.group2()[3])
                    - (self.group0()[3] * other.group1()[1])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) - (self.group0()[2] * other.group2()[3]) - (self.group0()[3] * other.group1()[2])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[0] * other.group3()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])
                    + (self.group0()[3] * other.group3()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<DualNum> for AntiFlatPoint {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0       12        0
    fn geometric_anti_product(self, other: DualNum) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                (other.group0()[1] * self.group0()[3]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                (other.group0()[0] * self.group0()[3] * -1.0),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<FlatPoint> for AntiFlatPoint {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        8        0
    fn geometric_anti_product(self, other: FlatPoint) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[3] * -1.0)]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<Flector> for AntiFlatPoint {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       12       24        0
    fn geometric_anti_product(self, other: Flector) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0] * -1.0),
                (self.group0()[3] * other.group1()[1] * -1.0),
                (self.group0()[3] * other.group1()[2] * -1.0),
                (self.group0()[3] * other.group0()[3] * -1.0),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) + (self.group0()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group0()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])
                    + (self.group0()[3] * other.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Line> for AntiFlatPoint {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       15        0
    fn geometric_anti_product(self, other: Line) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (other.group1()[0] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (other.group1()[2] * self.group0()[3])),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3]),
                (other.group0()[1] * self.group0()[3]),
                (other.group0()[2] * self.group0()[3]),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Motor> for AntiFlatPoint {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       12       20        0
    fn geometric_anti_product(self, other: Motor) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (self.group0()[3] * other.group1()[0])),
                (-(self.group0()[0] * other.group0()[2])
                    + (self.group0()[1] * other.group0()[3])
                    + (self.group0()[2] * other.group0()[0])
                    + (self.group0()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group1()[2])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group0()[3] * other.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<MultiVector> for AntiFlatPoint {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       96      136        0
    fn geometric_anti_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(other.group4()[0] * self.group0()[0])
                    - (other.group4()[1] * self.group0()[1])
                    - (other.group4()[2] * self.group0()[2])
                    - (self.group0()[3] * other.group3()[3])),
                (-(other.group7()[0] * self.group0()[0]) - (other.group7()[1] * self.group0()[1]) - (other.group7()[2] * self.group0()[2])
                    + (self.group0()[3] * other.group6()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group7()[1] * self.group0()[2])
                    + (other.group7()[2] * self.group0()[1])
                    + (self.group0()[0] * other.group1()[3])
                    + (self.group0()[3] * other.group6()[0])),
                ((other.group7()[0] * self.group0()[2]) - (other.group7()[2] * self.group0()[0]) + (self.group0()[1] * other.group1()[3]) + (self.group0()[3] * other.group6()[1])),
                (-(other.group7()[0] * self.group0()[1])
                    + (other.group7()[1] * self.group0()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group0()[3] * other.group6()[2])),
                (self.group0()[3] * other.group1()[3] * -1.0),
            ]),
            // e5
            ((self.group0()[0] * other.group1()[0]) - (self.group0()[0] * other.group6()[0]) + (self.group0()[1] * other.group1()[1]) - (self.group0()[1] * other.group6()[1])
                + (self.group0()[2] * other.group1()[2])
                - (self.group0()[2] * other.group6()[2])
                + (self.group0()[3] * other[e1])),
            // e15, e25, e35, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[0]) - (other.group5()[1] * self.group0()[2])
                    + (other.group5()[2] * self.group0()[1])
                    + (self.group0()[0] * other.group3()[3])
                    + (self.group0()[1] * other.group9()[2])
                    - (self.group0()[2] * other.group9()[1])
                    + (self.group0()[3] * other.group3()[0])),
                ((other.group0()[0] * self.group0()[1]) + (other.group5()[0] * self.group0()[2]) - (other.group5()[2] * self.group0()[0]) - (self.group0()[0] * other.group9()[2])
                    + (self.group0()[1] * other.group3()[3])
                    + (self.group0()[2] * other.group9()[0])
                    + (self.group0()[3] * other.group3()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group5()[0] * self.group0()[1]) + (other.group5()[1] * self.group0()[0]) + (self.group0()[0] * other.group9()[1])
                    - (self.group0()[1] * other.group9()[0])
                    + (self.group0()[2] * other.group3()[3])
                    + (self.group0()[3] * other.group3()[2])),
                (-(other.group0()[0] * self.group0()[3])
                    + (other.group4()[0] * self.group0()[0])
                    + (other.group4()[1] * self.group0()[1])
                    + (other.group4()[2] * self.group0()[2])),
            ]),
            // e41, e42, e43
            Simd32x3::from([
                (other.group4()[0] * self.group0()[3] * -1.0),
                (other.group4()[1] * self.group0()[3] * -1.0),
                (other.group4()[2] * self.group0()[3] * -1.0),
            ]),
            // e23, e31, e12
            Simd32x3::from([
                (-(other.group4()[1] * self.group0()[2]) + (other.group4()[2] * self.group0()[1]) + (self.group0()[0] * other[e45]) - (self.group0()[3] * other.group9()[0])),
                ((other.group4()[0] * self.group0()[2]) - (other.group4()[2] * self.group0()[0]) + (self.group0()[1] * other[e45]) - (self.group0()[3] * other.group9()[1])),
                (-(other.group4()[0] * self.group0()[1]) + (other.group4()[1] * self.group0()[0]) + (self.group0()[2] * other[e45]) - (self.group0()[3] * other.group9()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group7()[1] * self.group0()[2])
                    + (other.group7()[2] * self.group0()[1])
                    + (self.group0()[0] * other.group1()[3])
                    + (self.group0()[3] * other.group1()[0])),
                ((other.group7()[0] * self.group0()[2]) - (other.group7()[2] * self.group0()[0]) + (self.group0()[1] * other.group1()[3]) + (self.group0()[3] * other.group1()[1])),
                (-(other.group7()[0] * self.group0()[1])
                    + (other.group7()[1] * self.group0()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group0()[3] * other.group1()[2])),
                ((other.group0()[1] * self.group0()[3]) - (other.group7()[0] * self.group0()[0]) - (other.group7()[1] * self.group0()[1]) - (other.group7()[2] * self.group0()[2])),
            ]),
            // e423, e431, e412
            Simd32x3::from([
                (other.group7()[0] * self.group0()[3] * -1.0),
                (other.group7()[1] * self.group0()[3] * -1.0),
                (other.group7()[2] * self.group0()[3] * -1.0),
            ]),
            // e235, e315, e125
            Simd32x3::from([
                ((other.group0()[1] * self.group0()[0]) + (other.group8()[0] * self.group0()[3]) - (self.group0()[0] * other.group6()[3]) - (self.group0()[1] * other.group1()[2])
                    + (self.group0()[1] * other.group6()[2])
                    + (self.group0()[2] * other.group1()[1])
                    - (self.group0()[2] * other.group6()[1])),
                ((other.group0()[1] * self.group0()[1]) + (other.group8()[1] * self.group0()[3]) + (self.group0()[0] * other.group1()[2])
                    - (self.group0()[0] * other.group6()[2])
                    - (self.group0()[1] * other.group6()[3])
                    - (self.group0()[2] * other.group1()[0])
                    + (self.group0()[2] * other.group6()[0])),
                ((other.group0()[1] * self.group0()[2]) + (other.group8()[2] * self.group0()[3]) - (self.group0()[0] * other.group1()[1])
                    + (self.group0()[0] * other.group6()[1])
                    + (self.group0()[1] * other.group1()[0])
                    - (self.group0()[1] * other.group6()[0])
                    - (self.group0()[2] * other.group6()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((other.group4()[1] * self.group0()[2]) - (other.group4()[2] * self.group0()[1]) - (other.group5()[0] * self.group0()[3]) - (self.group0()[0] * other[e45])),
                (-(other.group4()[0] * self.group0()[2]) + (other.group4()[2] * self.group0()[0]) - (other.group5()[1] * self.group0()[3]) - (self.group0()[1] * other[e45])),
                ((other.group4()[0] * self.group0()[1]) - (other.group4()[1] * self.group0()[0]) - (other.group5()[2] * self.group0()[3]) - (self.group0()[2] * other[e45])),
                (-(other.group5()[0] * self.group0()[0])
                    - (other.group5()[1] * self.group0()[1])
                    - (other.group5()[2] * self.group0()[2])
                    - (self.group0()[0] * other.group9()[0])
                    - (self.group0()[1] * other.group9()[1])
                    - (self.group0()[2] * other.group9()[2])
                    + (self.group0()[3] * other.group9()[3])),
            ]),
            // e1234
            (self.group0()[3] * other[e45] * -1.0),
        );
    }
}
impl GeometricAntiProduct<Plane> for AntiFlatPoint {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       16        0
    fn geometric_anti_product(self, other: Plane) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                0.0,
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group0()[3] * other.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<RoundPoint> for AntiFlatPoint {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        9       21        0
    fn geometric_anti_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other.group0()[3] * -1.0),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other[e2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Scalar> for AntiFlatPoint {
    type Output = FlatPoint;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        5        0
    fn geometric_anti_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return FlatPoint::from_groups(/* e15, e25, e35, e45 */ Simd32x4::from([
            (self.group0()[0] * other[scalar]),
            (self.group0()[1] * other[scalar]),
            (self.group0()[2] * other[scalar]),
            (self.group0()[3] * other[scalar] * -1.0),
        ]));
    }
}
impl GeometricAntiProduct<Sphere> for AntiFlatPoint {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        9       24        0
    fn geometric_anti_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other[e4315]) - (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other[e4315]) - (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other[e4315]) - (self.group0()[3] * other.group0()[2])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other[e4315] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other[e4315] * -1.0),
                (self.group0()[1] * other[e4315] * -1.0),
                (self.group0()[2] * other[e4315] * -1.0),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group0()[3] * other.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorEven> for AntiFlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       48       68        0
    fn geometric_anti_product(self, other: VersorEven) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group0()[3] * other.group1()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (self.group0()[3] * other.group3()[0])),
                (-(self.group0()[0] * other.group0()[2])
                    + (self.group0()[1] * other.group3()[3])
                    + (self.group0()[2] * other.group0()[0])
                    + (self.group0()[3] * other.group3()[1])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group3()[3]) + (self.group0()[3] * other.group3()[2])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group0()[3] * other.group0()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[1] * other.group3()[2])
                    - (self.group0()[2] * other.group1()[1])
                    + (self.group0()[2] * other.group3()[1])
                    + (self.group0()[3] * other.group2()[0])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group0()[3])
                    - (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    - (self.group0()[2] * other.group3()[0])
                    + (self.group0()[3] * other.group2()[1])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group1()[0])
                    + (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group0()[3])
                    - (self.group0()[2] * other.group1()[3])
                    + (self.group0()[3] * other.group2()[2])),
                (-(self.group0()[0] * other.group1()[0]) + (self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group1()[1])
                    + (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group1()[2])
                    + (self.group0()[2] * other.group3()[2])
                    + (self.group0()[3] * other.group2()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (self.group0()[3] * other.group1()[0])),
                (-(self.group0()[0] * other.group0()[2])
                    + (self.group0()[1] * other.group3()[3])
                    + (self.group0()[2] * other.group0()[0])
                    + (self.group0()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group3()[3]) + (self.group0()[3] * other.group1()[2])),
                (self.group0()[3] * other.group3()[3] * -1.0),
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorOdd> for AntiFlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       48       68        0
    fn geometric_anti_product(self, other: VersorOdd) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[3] * other.group1()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) - (self.group0()[3] * other.group3()[0])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group2()[3]) + (self.group0()[2] * other.group0()[0])
                    - (self.group0()[3] * other.group3()[1])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group2()[3]) - (self.group0()[3] * other.group3()[2])),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) - (self.group0()[3] * other.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) + (self.group0()[1] * other.group3()[2])
                    - (self.group0()[2] * other.group1()[1])
                    - (self.group0()[2] * other.group3()[1])
                    + (self.group0()[3] * other.group2()[0])),
                (-(self.group0()[0] * other.group1()[2]) - (self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group0()[3])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group0()[2] * other.group3()[0])
                    + (self.group0()[3] * other.group2()[1])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group1()[0]) - (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group0()[3])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group0()[3] * other.group2()[2])),
                (self.group0()[3] * other.group2()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])
                    - (self.group0()[3] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group2()[3]) - (self.group0()[2] * other.group0()[0]) - (self.group0()[3] * other.group1()[1])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])
                    - (self.group0()[2] * other.group2()[3])
                    - (self.group0()[3] * other.group1()[2])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[0] * other.group3()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])
                    + (self.group0()[3] * other.group3()[3])),
            ]),
        );
    }
}
impl InfixGeometricAntiProduct for AntiFlector {}
impl GeometricAntiProduct<AntiCircleRotor> for AntiFlector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       72       88        0
    fn geometric_anti_product(self, other: AntiCircleRotor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group0()[3]) + (other.group0()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) - (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group1()[3] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) - (other.group1()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group0()[0]) - (other.group1()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group1()[3])
                    - (other.group1()[3] * self.group1()[2])),
                ((other.group0()[0] * self.group0()[0])
                    + (other.group0()[1] * self.group0()[1])
                    + (other.group0()[2] * self.group0()[2])
                    + (other.group1()[0] * self.group1()[0])
                    + (other.group1()[1] * self.group1()[1])
                    + (other.group1()[2] * self.group1()[2])
                    - (other.group2()[3] * self.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group1()[0] * self.group1()[3]) - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])
                    + (other.group1()[3] * self.group0()[0])
                    + (other.group2()[0] * self.group0()[3])
                    - (other.group2()[1] * self.group1()[2])
                    + (other.group2()[2] * self.group1()[1])
                    + (other.group2()[3] * self.group0()[0])),
                ((other.group1()[0] * self.group0()[2]) + (other.group1()[1] * self.group1()[3]) - (other.group1()[2] * self.group0()[0])
                    + (other.group1()[3] * self.group0()[1])
                    + (other.group2()[0] * self.group1()[2])
                    + (other.group2()[1] * self.group0()[3])
                    - (other.group2()[2] * self.group1()[0])
                    + (other.group2()[3] * self.group0()[1])),
                (-(other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group0()[2])
                    - (other.group2()[0] * self.group1()[1])
                    + (other.group2()[1] * self.group1()[0])
                    + (other.group2()[2] * self.group0()[3])
                    + (other.group2()[3] * self.group0()[2])),
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group0()[2])
                    - (other.group0()[2] * self.group0()[1])
                    - (other.group1()[0] * self.group0()[3])
                    + (other.group1()[1] * self.group1()[2])
                    - (other.group1()[2] * self.group1()[1])
                    - (other.group2()[3] * self.group1()[0])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group1()[3]) + (other.group0()[2] * self.group0()[0])
                    - (other.group1()[0] * self.group1()[2])
                    - (other.group1()[1] * self.group0()[3])
                    + (other.group1()[2] * self.group1()[0])
                    - (other.group2()[3] * self.group1()[1])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) - (other.group0()[2] * self.group1()[3]) + (other.group1()[0] * self.group1()[1])
                    - (other.group1()[1] * self.group1()[0])
                    - (other.group1()[2] * self.group0()[3])
                    - (other.group2()[3] * self.group1()[2])),
                (-(other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])
                    + (other.group1()[3] * self.group1()[3])
                    - (other.group2()[0] * self.group1()[0])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[2] * self.group1()[2])
                    + (other.group2()[3] * self.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDipoleInversion> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      104      120        0
    fn geometric_anti_product(self, other: AntiDipoleInversion) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group1()[2])
                    - (other.group0()[2] * self.group1()[1])
                    - (other.group2()[3] * self.group1()[0])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group0()[3]) + (other.group0()[2] * self.group1()[0])
                    - (other.group2()[3] * self.group1()[1])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) - (other.group0()[2] * self.group0()[3]) - (other.group2()[3] * self.group1()[2])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])
                    + (other.group1()[3] * self.group0()[3])
                    + (other.group2()[3] * self.group1()[3])
                    - (other.group3()[0] * self.group1()[0])
                    - (other.group3()[1] * self.group1()[1])
                    - (other.group3()[2] * self.group1()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group0()[2])
                    + (other.group0()[2] * self.group0()[1])
                    + (other.group1()[3] * self.group1()[0])
                    + (other.group2()[3] * self.group0()[0])
                    + (other.group3()[0] * self.group0()[3])
                    - (other.group3()[1] * self.group1()[2])
                    + (other.group3()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group0()[0])
                    + (other.group1()[3] * self.group1()[1])
                    + (other.group2()[3] * self.group0()[1])
                    + (other.group3()[0] * self.group1()[2])
                    + (other.group3()[1] * self.group0()[3])
                    - (other.group3()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group0()[1])
                    + (other.group0()[1] * self.group0()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])
                    + (other.group2()[3] * self.group0()[2])
                    - (other.group3()[0] * self.group1()[1])
                    + (other.group3()[1] * self.group1()[0])
                    + (other.group3()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    + (other.group2()[3] * self.group1()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((other.group1()[0] * self.group1()[3]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1]) - (other.group1()[3] * self.group0()[0])
                    + (other.group2()[0] * self.group0()[3])
                    - (other.group2()[1] * self.group1()[2])
                    + (other.group2()[2] * self.group1()[1])
                    - (other.group3()[0] * self.group1()[3])
                    + (other.group3()[1] * self.group0()[2])
                    - (other.group3()[2] * self.group0()[1])
                    + (other.group3()[3] * self.group1()[0])),
                ((other.group1()[0] * self.group0()[2]) + (other.group1()[1] * self.group1()[3]) - (other.group1()[2] * self.group0()[0]) - (other.group1()[3] * self.group0()[1])
                    + (other.group2()[0] * self.group1()[2])
                    + (other.group2()[1] * self.group0()[3])
                    - (other.group2()[2] * self.group1()[0])
                    - (other.group3()[0] * self.group0()[2])
                    - (other.group3()[1] * self.group1()[3])
                    + (other.group3()[2] * self.group0()[0])
                    + (other.group3()[3] * self.group1()[1])),
                (-(other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0]) + (other.group1()[2] * self.group1()[3])
                    - (other.group1()[3] * self.group0()[2])
                    - (other.group2()[0] * self.group1()[1])
                    + (other.group2()[1] * self.group1()[0])
                    + (other.group2()[2] * self.group0()[3])
                    + (other.group3()[0] * self.group0()[1])
                    - (other.group3()[1] * self.group0()[0])
                    - (other.group3()[2] * self.group1()[3])
                    + (other.group3()[3] * self.group1()[2])),
                (-(other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])
                    - (other.group1()[3] * self.group1()[3])
                    - (other.group2()[0] * self.group1()[0])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[2] * self.group1()[2])
                    + (other.group3()[0] * self.group0()[0])
                    + (other.group3()[1] * self.group0()[1])
                    + (other.group3()[2] * self.group0()[2])
                    + (other.group3()[3] * self.group0()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (other.group1()[0] * self.group0()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group2()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group0()[0])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group0()[3])
                    - (other.group1()[2] * self.group1()[0])
                    + (other.group2()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group1()[3])
                    - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group0()[3])
                    + (other.group2()[3] * self.group0()[2])),
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2]) - (other.group2()[3] * self.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum> for AntiFlector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4       24        0
    fn geometric_anti_product(self, other: AntiDualNum) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group1()[0] * -1.0),
                (other.group0()[0] * self.group1()[1] * -1.0),
                (other.group0()[0] * self.group1()[2] * -1.0),
                (other.group0()[0] * self.group1()[3]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                (other.group0()[0] * self.group0()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group1()[1])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3]),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiFlatPoint> for AntiFlector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       12       20        0
    fn geometric_anti_product(self, other: AntiFlatPoint) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (other.group0()[3] * self.group1()[0]),
                (other.group0()[3] * self.group1()[1]),
                (other.group0()[3] * self.group1()[2]),
                (other.group0()[3] * self.group0()[3]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) - (other.group0()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[3]) - (other.group0()[2] * self.group1()[0]) - (other.group0()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group0()[3])
                    - (other.group0()[3] * self.group0()[2])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group0()[3] * self.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiFlector> for AntiFlector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       40       48        0
    fn geometric_anti_product(self, other: AntiFlector) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                ((other.group0()[3] * self.group1()[0]) + (other.group1()[0] * self.group0()[3]) - (other.group1()[1] * self.group1()[2]) + (other.group1()[2] * self.group1()[1])),
                ((other.group0()[3] * self.group1()[1]) + (other.group1()[0] * self.group1()[2]) + (other.group1()[1] * self.group0()[3]) - (other.group1()[2] * self.group1()[0])),
                ((other.group0()[3] * self.group1()[2]) - (other.group1()[0] * self.group1()[1]) + (other.group1()[1] * self.group1()[0]) + (other.group1()[2] * self.group0()[3])),
                ((other.group0()[3] * self.group0()[3]) - (other.group1()[0] * self.group1()[0]) - (other.group1()[1] * self.group1()[1]) - (other.group1()[2] * self.group1()[2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1])
                    - (other.group0()[3] * self.group0()[0])
                    - (other.group1()[0] * self.group1()[3])
                    + (other.group1()[1] * self.group0()[2])
                    - (other.group1()[2] * self.group0()[1])
                    + (other.group1()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[3])
                    - (other.group0()[2] * self.group1()[0])
                    - (other.group0()[3] * self.group0()[1])
                    - (other.group1()[0] * self.group0()[2])
                    - (other.group1()[1] * self.group1()[3])
                    + (other.group1()[2] * self.group0()[0])
                    + (other.group1()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group0()[3])
                    - (other.group0()[3] * self.group0()[2])
                    + (other.group1()[0] * self.group0()[1])
                    - (other.group1()[1] * self.group0()[0])
                    - (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group0()[3] * self.group1()[3])
                    + (other.group1()[0] * self.group0()[0])
                    + (other.group1()[1] * self.group0()[1])
                    + (other.group1()[2] * self.group0()[2])
                    + (other.group1()[3] * self.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiLine> for AntiFlector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       28       36        0
    fn geometric_anti_product(self, other: AntiLine) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (other.group1()[0] * self.group0()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group0()[0])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group0()[3])
                    - (other.group1()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group1()[3])
                    - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group0()[3])),
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group0()[3]) + (other.group0()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) - (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiMotor> for AntiFlector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       40       48        0
    fn geometric_anti_product(self, other: AntiMotor) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])
                    + (self.group0()[3] * other.group1()[0])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])
                    + (self.group1()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[2])
                    + (self.group0()[1] * other.group0()[3])
                    + (self.group0()[2] * other.group0()[0])
                    + (self.group0()[3] * other.group1()[1])
                    - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group1()[0])
                    + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])
                    + (self.group0()[2] * other.group0()[3])
                    + (self.group0()[3] * other.group1()[2])
                    + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[0])
                    + (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group0()[2])),
                (-(self.group0()[3] * other.group0()[3])
                    + (self.group1()[0] * other.group0()[0])
                    + (self.group1()[1] * other.group0()[1])
                    + (self.group1()[2] * other.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(self.group0()[3] * other.group0()[0]) - (self.group1()[0] * other.group0()[3]) - (self.group1()[1] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[1])),
                (-(self.group0()[3] * other.group0()[1]) + (self.group1()[0] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[3])
                    - (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[3] * other.group0()[2]) - (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])
                    - (self.group1()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group0()[3] * other.group1()[3])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])
                    + (self.group1()[3] * other.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiPlane> for AntiFlector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       20       28        0
    fn geometric_anti_product(self, other: AntiPlane) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                ((self.group0()[3] * other.group0()[0]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])),
                ((self.group0()[3] * other.group0()[1]) - (self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[3] * other.group0()[2]) + (self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1]) + (self.group1()[0] * other.group0()[3])
                    - (self.group1()[3] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3]) - (self.group1()[3] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[3])
                    - (self.group1()[3] * other.group0()[2])),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiScalar> for AntiFlector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        8        0
    fn geometric_anti_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (self.group0()[0] * other[e12345]),
                (self.group0()[1] * other[e12345]),
                (self.group0()[2] * other[e12345]),
                (self.group0()[3] * other[e12345]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group1()[0] * other[e12345]),
                (self.group1()[1] * other[e12345]),
                (self.group1()[2] * other[e12345]),
                (self.group1()[3] * other[e12345]),
            ]),
        );
    }
}
impl GeometricAntiProduct<Circle> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       64       80        0
    fn geometric_anti_product(self, other: Circle) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group0()[3]) + (other.group0()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) - (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])
                    + (self.group0()[3] * other.group1()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (self.group1()[0] * other.group1()[3])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group0()[0]) + (self.group1()[1] * other.group1()[3])),
                (-(other.group0()[0] * self.group0()[1])
                    + (other.group0()[1] * self.group0()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (self.group1()[2] * other.group1()[3])),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((other.group2()[0] * self.group0()[3]) - (other.group2()[1] * self.group1()[2]) + (other.group2()[2] * self.group1()[1]) - (self.group0()[0] * other.group1()[3])
                    + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])
                    + (self.group1()[3] * other.group1()[0])),
                ((other.group2()[0] * self.group1()[2]) + (other.group2()[1] * self.group0()[3])
                    - (other.group2()[2] * self.group1()[0])
                    - (self.group0()[0] * other.group1()[2])
                    - (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group1()[3] * other.group1()[1])),
                (-(other.group2()[0] * self.group1()[1])
                    + (other.group2()[1] * self.group1()[0])
                    + (other.group2()[2] * self.group0()[3])
                    + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])
                    - (self.group0()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])),
                (-(other.group2()[0] * self.group1()[0])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group0()[2])
                    + (other.group0()[2] * self.group0()[1])
                    + (self.group0()[3] * other.group1()[0])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group0()[0]) + (self.group0()[3] * other.group1()[1])
                    - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[2] * other.group1()[0])),
                (-(other.group0()[0] * self.group0()[1])
                    + (other.group0()[1] * self.group0()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (self.group0()[3] * other.group1()[2])
                    + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[0])),
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<CircleRotor> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       72       88        0
    fn geometric_anti_product(self, other: CircleRotor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group0()[3]) + (other.group0()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) - (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])
                    + (self.group0()[3] * other.group1()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (self.group1()[0] * other.group1()[3])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group0()[0]) + (self.group1()[1] * other.group1()[3])),
                (-(other.group0()[0] * self.group0()[1])
                    + (other.group0()[1] * self.group0()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (self.group1()[2] * other.group1()[3])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])
                    + (self.group0()[3] * other.group2()[3])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[3]) + (self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])
                    + (self.group0()[3] * other.group2()[0])
                    + (self.group1()[1] * other.group2()[2])
                    - (self.group1()[2] * other.group2()[1])
                    + (self.group1()[3] * other.group1()[0])),
                (-(self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group1()[3])
                    + (self.group0()[1] * other.group2()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group0()[3] * other.group2()[1])
                    - (self.group1()[0] * other.group2()[2])
                    + (self.group1()[2] * other.group2()[0])
                    + (self.group1()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group1()[3])
                    + (self.group0()[2] * other.group2()[3])
                    + (self.group0()[3] * other.group2()[2])
                    + (self.group1()[0] * other.group2()[1])
                    - (self.group1()[1] * other.group2()[0])
                    + (self.group1()[3] * other.group1()[2])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[0] * other.group2()[0])
                    - (self.group1()[1] * other.group2()[1])
                    - (self.group1()[2] * other.group2()[2])
                    - (self.group1()[3] * other.group1()[3])
                    + (self.group1()[3] * other.group2()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group0()[2])
                    + (other.group0()[2] * self.group0()[1])
                    + (self.group0()[3] * other.group1()[0])
                    + (self.group1()[0] * other.group2()[3])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group0()[0]) + (self.group0()[3] * other.group1()[1])
                    - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[1] * other.group2()[3])
                    + (self.group1()[2] * other.group1()[0])),
                (-(other.group0()[0] * self.group0()[1])
                    + (other.group0()[1] * self.group0()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (self.group0()[3] * other.group1()[2])
                    + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[0])
                    + (self.group1()[2] * other.group2()[3])),
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Dipole> for AntiFlector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       64       80        0
    fn geometric_anti_product(self, other: Dipole) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group0()[3]) + (other.group0()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) - (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (self.group0()[3] * other.group1()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) - (self.group1()[0] * other.group1()[3])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group0()[0]) - (self.group1()[1] * other.group1()[3])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group1()[3])
                    - (self.group1()[2] * other.group1()[3])),
                ((other.group0()[0] * self.group0()[0])
                    + (other.group0()[1] * self.group0()[1])
                    + (other.group0()[2] * self.group0()[2])
                    + (self.group1()[0] * other.group1()[0])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[2] * other.group1()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group2()[0] * self.group0()[3]) - (other.group2()[1] * self.group1()[2])
                    + (other.group2()[2] * self.group1()[1])
                    + (self.group0()[0] * other.group1()[3])
                    + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])
                    + (self.group1()[3] * other.group1()[0])),
                ((other.group2()[0] * self.group1()[2]) + (other.group2()[1] * self.group0()[3]) - (other.group2()[2] * self.group1()[0]) - (self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group1()[3] * other.group1()[1])),
                (-(other.group2()[0] * self.group1()[1])
                    + (other.group2()[1] * self.group1()[0])
                    + (other.group2()[2] * self.group0()[3])
                    + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])),
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group0()[2])
                    - (other.group0()[2] * self.group0()[1])
                    - (self.group0()[3] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[2])
                    + (self.group1()[2] * other.group1()[1])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group1()[3]) + (other.group0()[2] * self.group0()[0])
                    - (self.group0()[3] * other.group1()[1])
                    + (self.group1()[0] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[0])),
                ((other.group0()[0] * self.group0()[1])
                    - (other.group0()[1] * self.group0()[0])
                    - (other.group0()[2] * self.group1()[3])
                    - (self.group0()[3] * other.group1()[2])
                    - (self.group1()[0] * other.group1()[1])
                    + (self.group1()[1] * other.group1()[0])),
                (-(other.group2()[0] * self.group1()[0])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    + (self.group1()[3] * other.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<DipoleInversion> for AntiFlector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      104      120        0
    fn geometric_anti_product(self, other: DipoleInversion) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group1()[2])
                    - (other.group0()[2] * self.group1()[1])
                    - (self.group1()[0] * other.group2()[3])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group0()[3]) + (other.group0()[2] * self.group1()[0])
                    - (self.group1()[1] * other.group2()[3])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) - (other.group0()[2] * self.group0()[3]) - (self.group1()[2] * other.group2()[3])),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (self.group0()[3] * other.group1()[3])
                    + (self.group1()[0] * other.group3()[0])
                    + (self.group1()[1] * other.group3()[1])
                    + (self.group1()[2] * other.group3()[2])
                    + (self.group1()[3] * other.group2()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (self.group0()[0] * other.group2()[3])
                    - (self.group0()[3] * other.group3()[0])
                    - (self.group1()[0] * other.group1()[3])
                    - (self.group1()[1] * other.group3()[2])
                    + (self.group1()[2] * other.group3()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group0()[0]) + (self.group0()[1] * other.group2()[3])
                    - (self.group0()[3] * other.group3()[1])
                    + (self.group1()[0] * other.group3()[2])
                    - (self.group1()[1] * other.group1()[3])
                    - (self.group1()[2] * other.group3()[0])),
                (-(other.group0()[0] * self.group0()[1])
                    + (other.group0()[1] * self.group0()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (self.group0()[2] * other.group2()[3])
                    - (self.group0()[3] * other.group3()[2])
                    - (self.group1()[0] * other.group3()[1])
                    + (self.group1()[1] * other.group3()[0])
                    - (self.group1()[2] * other.group1()[3])),
                ((other.group0()[0] * self.group0()[0])
                    + (other.group0()[1] * self.group0()[1])
                    + (other.group0()[2] * self.group0()[2])
                    + (self.group1()[0] * other.group1()[0])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group2()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) + (self.group0()[1] * other.group3()[2])
                    - (self.group0()[2] * other.group1()[1])
                    - (self.group0()[2] * other.group3()[1])
                    + (self.group0()[3] * other.group2()[0])
                    + (self.group1()[0] * other.group3()[3])
                    + (self.group1()[1] * other.group2()[2])
                    - (self.group1()[2] * other.group2()[1])
                    + (self.group1()[3] * other.group1()[0])
                    + (self.group1()[3] * other.group3()[0])),
                (-(self.group0()[0] * other.group1()[2]) - (self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group0()[2] * other.group3()[0])
                    + (self.group0()[3] * other.group2()[1])
                    - (self.group1()[0] * other.group2()[2])
                    + (self.group1()[1] * other.group3()[3])
                    + (self.group1()[2] * other.group2()[0])
                    + (self.group1()[3] * other.group1()[1])
                    + (self.group1()[3] * other.group3()[1])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group1()[0]) - (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group0()[3] * other.group2()[2])
                    + (self.group1()[0] * other.group2()[1])
                    - (self.group1()[1] * other.group2()[0])
                    + (self.group1()[2] * other.group3()[3])
                    + (self.group1()[3] * other.group1()[2])
                    + (self.group1()[3] * other.group3()[2])),
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2]) - (self.group0()[3] * other.group2()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group0()[2])
                    - (other.group0()[2] * self.group0()[1])
                    - (self.group0()[0] * other.group2()[3])
                    - (self.group0()[3] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[2])
                    + (self.group1()[2] * other.group1()[1])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group1()[3]) + (other.group0()[2] * self.group0()[0])
                    - (self.group0()[1] * other.group2()[3])
                    - (self.group0()[3] * other.group1()[1])
                    + (self.group1()[0] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[0])),
                ((other.group0()[0] * self.group0()[1])
                    - (other.group0()[1] * self.group0()[0])
                    - (other.group0()[2] * self.group1()[3])
                    - (self.group0()[2] * other.group2()[3])
                    - (self.group0()[3] * other.group1()[2])
                    - (self.group1()[0] * other.group1()[1])
                    + (self.group1()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[0] * other.group3()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])
                    + (self.group0()[3] * other.group3()[3])
                    - (self.group1()[0] * other.group2()[0])
                    - (self.group1()[1] * other.group2()[1])
                    - (self.group1()[2] * other.group2()[2])
                    + (self.group1()[3] * other.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<DualNum> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4       24        0
    fn geometric_anti_product(self, other: DualNum) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group1()[0] * -1.0),
                (other.group0()[0] * self.group1()[1] * -1.0),
                (other.group0()[0] * self.group1()[2] * -1.0),
                (other.group0()[0] * self.group1()[3]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group0()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                (other.group0()[1] * self.group1()[3]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group1()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group1()[2])),
                (other.group0()[0] * self.group0()[3] * -1.0),
            ]),
        );
    }
}
impl GeometricAntiProduct<FlatPoint> for AntiFlector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       12       24        0
    fn geometric_anti_product(self, other: FlatPoint) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3] * -1.0),
                (self.group1()[1] * other.group0()[3] * -1.0),
                (self.group1()[2] * other.group0()[3] * -1.0),
                (self.group0()[3] * other.group0()[3] * -1.0),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1]) - (self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2]) + (self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])
                    + (self.group1()[3] * other.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Flector> for AntiFlector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       40       48        0
    fn geometric_anti_product(self, other: Flector) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (-(self.group0()[3] * other.group1()[0]) - (self.group1()[0] * other.group0()[3]) - (self.group1()[1] * other.group1()[2])
                    + (self.group1()[2] * other.group1()[1])),
                (-(self.group0()[3] * other.group1()[1]) + (self.group1()[0] * other.group1()[2])
                    - (self.group1()[1] * other.group0()[3])
                    - (self.group1()[2] * other.group1()[0])),
                (-(self.group0()[3] * other.group1()[2]) - (self.group1()[0] * other.group1()[1]) + (self.group1()[1] * other.group1()[0])
                    - (self.group1()[2] * other.group0()[3])),
                (-(self.group0()[3] * other.group0()[3])
                    + (self.group1()[0] * other.group1()[0])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[2] * other.group1()[2])),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])
                    + (self.group0()[3] * other.group0()[0])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group0()[2])
                    - (self.group1()[2] * other.group0()[1])
                    + (self.group1()[3] * other.group1()[0])),
                (-(self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group0()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group0()[3] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[2])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group0()[0])
                    + (self.group1()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])
                    + (self.group0()[2] * other.group0()[3])
                    + (self.group0()[3] * other.group0()[2])
                    + (self.group1()[0] * other.group0()[1])
                    - (self.group1()[1] * other.group0()[0])
                    + (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])),
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])
                    + (self.group0()[3] * other.group1()[3])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])
                    + (self.group1()[3] * other.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Line> for AntiFlector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       28       36        0
    fn geometric_anti_product(self, other: Line) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (other.group1()[0] * self.group0()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group0()[0])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group0()[3])
                    - (other.group1()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group1()[3])
                    - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[3]) - (other.group0()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Motor> for AntiFlector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       40       48        0
    fn geometric_anti_product(self, other: Motor) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])
                    + (self.group0()[3] * other.group1()[0])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])
                    + (self.group1()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[2])
                    + (self.group0()[1] * other.group0()[3])
                    + (self.group0()[2] * other.group0()[0])
                    + (self.group0()[3] * other.group1()[1])
                    - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group1()[0])
                    + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])
                    + (self.group0()[2] * other.group0()[3])
                    + (self.group0()[3] * other.group1()[2])
                    + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[0])
                    + (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group0()[2])),
                ((self.group0()[3] * other.group0()[3]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                ((self.group0()[3] * other.group0()[0]) + (self.group1()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])),
                ((self.group0()[3] * other.group0()[1]) - (self.group1()[0] * other.group0()[2]) + (self.group1()[1] * other.group0()[3]) + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[3] * other.group0()[2]) + (self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group0()[3] * other.group1()[3])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])
                    + (self.group1()[3] * other.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<MultiVector> for AntiFlector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      224      256        0
    fn geometric_anti_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(other.group4()[0] * self.group0()[0])
                    - (other.group4()[1] * self.group0()[1])
                    - (other.group4()[2] * self.group0()[2])
                    - (self.group0()[3] * other.group3()[3])
                    + (self.group1()[0] * other.group9()[0])
                    + (self.group1()[1] * other.group9()[1])
                    + (self.group1()[2] * other.group9()[2])
                    + (self.group1()[3] * other[e45])),
                (-(other.group7()[0] * self.group0()[0]) - (other.group7()[1] * self.group0()[1]) - (other.group7()[2] * self.group0()[2])
                    + (self.group0()[3] * other.group6()[3])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])
                    + (self.group1()[3] * other.group1()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[1] * self.group1()[0]) + (other.group7()[0] * self.group1()[3]) - (other.group7()[1] * self.group0()[2])
                    + (other.group7()[2] * self.group0()[1])
                    + (self.group0()[0] * other.group1()[3])
                    + (self.group0()[3] * other.group6()[0])
                    + (self.group1()[1] * other.group6()[2])
                    - (self.group1()[2] * other.group6()[1])),
                ((other.group0()[1] * self.group1()[1]) + (other.group7()[0] * self.group0()[2]) + (other.group7()[1] * self.group1()[3]) - (other.group7()[2] * self.group0()[0])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[3] * other.group6()[1])
                    - (self.group1()[0] * other.group6()[2])
                    + (self.group1()[2] * other.group6()[0])),
                ((other.group0()[1] * self.group1()[2]) - (other.group7()[0] * self.group0()[1])
                    + (other.group7()[1] * self.group0()[0])
                    + (other.group7()[2] * self.group1()[3])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group0()[3] * other.group6()[2])
                    + (self.group1()[0] * other.group6()[1])
                    - (self.group1()[1] * other.group6()[0])),
                ((other.group7()[0] * self.group1()[0]) + (other.group7()[1] * self.group1()[1]) + (other.group7()[2] * self.group1()[2]) - (self.group0()[3] * other.group1()[3])),
            ]),
            // e5
            ((other.group0()[1] * self.group1()[3]) - (other.group8()[0] * self.group1()[0]) - (other.group8()[1] * self.group1()[1]) - (other.group8()[2] * self.group1()[2])
                + (self.group0()[0] * other.group1()[0])
                - (self.group0()[0] * other.group6()[0])
                + (self.group0()[1] * other.group1()[1])
                - (self.group0()[1] * other.group6()[1])
                + (self.group0()[2] * other.group1()[2])
                - (self.group0()[2] * other.group6()[2])
                + (self.group0()[3] * other[e1])
                - (self.group1()[3] * other.group6()[3])),
            // e15, e25, e35, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[0]) + (other.group5()[0] * self.group1()[3]) - (other.group5()[1] * self.group0()[2])
                    + (other.group5()[2] * self.group0()[1])
                    + (self.group0()[0] * other.group3()[3])
                    + (self.group0()[1] * other.group9()[2])
                    - (self.group0()[2] * other.group9()[1])
                    + (self.group0()[3] * other.group3()[0])
                    + (self.group1()[0] * other.group9()[3])
                    + (self.group1()[1] * other.group3()[2])
                    - (self.group1()[2] * other.group3()[1])
                    + (self.group1()[3] * other.group9()[0])),
                ((other.group0()[0] * self.group0()[1]) + (other.group5()[0] * self.group0()[2]) + (other.group5()[1] * self.group1()[3])
                    - (other.group5()[2] * self.group0()[0])
                    - (self.group0()[0] * other.group9()[2])
                    + (self.group0()[1] * other.group3()[3])
                    + (self.group0()[2] * other.group9()[0])
                    + (self.group0()[3] * other.group3()[1])
                    - (self.group1()[0] * other.group3()[2])
                    + (self.group1()[1] * other.group9()[3])
                    + (self.group1()[2] * other.group3()[0])
                    + (self.group1()[3] * other.group9()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group5()[0] * self.group0()[1])
                    + (other.group5()[1] * self.group0()[0])
                    + (other.group5()[2] * self.group1()[3])
                    + (self.group0()[0] * other.group9()[1])
                    - (self.group0()[1] * other.group9()[0])
                    + (self.group0()[2] * other.group3()[3])
                    + (self.group0()[3] * other.group3()[2])
                    + (self.group1()[0] * other.group3()[1])
                    - (self.group1()[1] * other.group3()[0])
                    + (self.group1()[2] * other.group9()[3])
                    + (self.group1()[3] * other.group9()[2])),
                (-(other.group0()[0] * self.group0()[3])
                    + (other.group4()[0] * self.group0()[0])
                    + (other.group4()[1] * self.group0()[1])
                    + (other.group4()[2] * self.group0()[2])
                    + (other.group5()[0] * self.group1()[0])
                    + (other.group5()[1] * self.group1()[1])
                    + (other.group5()[2] * self.group1()[2])
                    - (self.group1()[3] * other[e45])),
            ]),
            // e41, e42, e43
            Simd32x3::from([
                (-(other.group4()[0] * self.group0()[3]) + (other.group4()[1] * self.group1()[2]) - (other.group4()[2] * self.group1()[1]) - (self.group1()[0] * other[e45])),
                (-(other.group4()[0] * self.group1()[2]) - (other.group4()[1] * self.group0()[3]) + (other.group4()[2] * self.group1()[0]) - (self.group1()[1] * other[e45])),
                ((other.group4()[0] * self.group1()[1]) - (other.group4()[1] * self.group1()[0]) - (other.group4()[2] * self.group0()[3]) - (self.group1()[2] * other[e45])),
            ]),
            // e23, e31, e12
            Simd32x3::from([
                ((other.group4()[0] * self.group1()[3]) - (other.group4()[1] * self.group0()[2]) + (other.group4()[2] * self.group0()[1]) + (self.group0()[0] * other[e45])
                    - (self.group0()[3] * other.group9()[0])
                    - (self.group1()[0] * other.group3()[3])
                    - (self.group1()[1] * other.group9()[2])
                    + (self.group1()[2] * other.group9()[1])),
                ((other.group4()[0] * self.group0()[2]) + (other.group4()[1] * self.group1()[3]) - (other.group4()[2] * self.group0()[0]) + (self.group0()[1] * other[e45])
                    - (self.group0()[3] * other.group9()[1])
                    + (self.group1()[0] * other.group9()[2])
                    - (self.group1()[1] * other.group3()[3])
                    - (self.group1()[2] * other.group9()[0])),
                (-(other.group4()[0] * self.group0()[1]) + (other.group4()[1] * self.group0()[0]) + (other.group4()[2] * self.group1()[3]) + (self.group0()[2] * other[e45])
                    - (self.group0()[3] * other.group9()[2])
                    - (self.group1()[0] * other.group9()[1])
                    + (self.group1()[1] * other.group9()[0])
                    - (self.group1()[2] * other.group3()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group7()[0] * self.group1()[3]) - (other.group7()[1] * self.group0()[2])
                    + (other.group7()[2] * self.group0()[1])
                    + (self.group0()[0] * other.group1()[3])
                    + (self.group0()[3] * other.group1()[0])
                    + (self.group1()[0] * other.group6()[3])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])),
                ((other.group7()[0] * self.group0()[2]) + (other.group7()[1] * self.group1()[3]) - (other.group7()[2] * self.group0()[0])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[3] * other.group1()[1])
                    - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[1] * other.group6()[3])
                    + (self.group1()[2] * other.group1()[0])),
                (-(other.group7()[0] * self.group0()[1])
                    + (other.group7()[1] * self.group0()[0])
                    + (other.group7()[2] * self.group1()[3])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group0()[3] * other.group1()[2])
                    + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[0])
                    + (self.group1()[2] * other.group6()[3])),
                ((other.group0()[1] * self.group0()[3])
                    - (other.group7()[0] * self.group0()[0])
                    - (other.group7()[1] * self.group0()[1])
                    - (other.group7()[2] * self.group0()[2])
                    - (self.group1()[0] * other.group6()[0])
                    - (self.group1()[1] * other.group6()[1])
                    - (self.group1()[2] * other.group6()[2])
                    + (self.group1()[3] * other.group1()[3])),
            ]),
            // e423, e431, e412
            Simd32x3::from([
                (-(other.group7()[0] * self.group0()[3]) + (other.group7()[1] * self.group1()[2])
                    - (other.group7()[2] * self.group1()[1])
                    - (self.group1()[0] * other.group1()[3])),
                (-(other.group7()[0] * self.group1()[2]) - (other.group7()[1] * self.group0()[3]) + (other.group7()[2] * self.group1()[0])
                    - (self.group1()[1] * other.group1()[3])),
                ((other.group7()[0] * self.group1()[1]) - (other.group7()[1] * self.group1()[0]) - (other.group7()[2] * self.group0()[3]) - (self.group1()[2] * other.group1()[3])),
            ]),
            // e235, e315, e125
            Simd32x3::from([
                ((other.group0()[1] * self.group0()[0]) + (other.group8()[0] * self.group0()[3]) - (other.group8()[1] * self.group1()[2]) + (other.group8()[2] * self.group1()[1])
                    - (self.group0()[0] * other.group6()[3])
                    - (self.group0()[1] * other.group1()[2])
                    + (self.group0()[1] * other.group6()[2])
                    + (self.group0()[2] * other.group1()[1])
                    - (self.group0()[2] * other.group6()[1])
                    + (self.group1()[0] * other[e1])
                    - (self.group1()[3] * other.group1()[0])
                    + (self.group1()[3] * other.group6()[0])),
                ((other.group0()[1] * self.group0()[1]) + (other.group8()[0] * self.group1()[2]) + (other.group8()[1] * self.group0()[3]) - (other.group8()[2] * self.group1()[0])
                    + (self.group0()[0] * other.group1()[2])
                    - (self.group0()[0] * other.group6()[2])
                    - (self.group0()[1] * other.group6()[3])
                    - (self.group0()[2] * other.group1()[0])
                    + (self.group0()[2] * other.group6()[0])
                    + (self.group1()[1] * other[e1])
                    - (self.group1()[3] * other.group1()[1])
                    + (self.group1()[3] * other.group6()[1])),
                ((other.group0()[1] * self.group0()[2]) - (other.group8()[0] * self.group1()[1]) + (other.group8()[1] * self.group1()[0]) + (other.group8()[2] * self.group0()[3])
                    - (self.group0()[0] * other.group1()[1])
                    + (self.group0()[0] * other.group6()[1])
                    + (self.group0()[1] * other.group1()[0])
                    - (self.group0()[1] * other.group6()[0])
                    - (self.group0()[2] * other.group6()[3])
                    + (self.group1()[2] * other[e1])
                    - (self.group1()[3] * other.group1()[2])
                    + (self.group1()[3] * other.group6()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[0]) - (other.group4()[0] * self.group1()[3]) + (other.group4()[1] * self.group0()[2])
                    - (other.group4()[2] * self.group0()[1])
                    - (other.group5()[0] * self.group0()[3])
                    + (other.group5()[1] * self.group1()[2])
                    - (other.group5()[2] * self.group1()[1])
                    - (self.group0()[0] * other[e45])),
                (-(other.group0()[0] * self.group1()[1]) - (other.group4()[0] * self.group0()[2]) - (other.group4()[1] * self.group1()[3])
                    + (other.group4()[2] * self.group0()[0])
                    - (other.group5()[0] * self.group1()[2])
                    - (other.group5()[1] * self.group0()[3])
                    + (other.group5()[2] * self.group1()[0])
                    - (self.group0()[1] * other[e45])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group4()[0] * self.group0()[1])
                    - (other.group4()[1] * self.group0()[0])
                    - (other.group4()[2] * self.group1()[3])
                    + (other.group5()[0] * self.group1()[1])
                    - (other.group5()[1] * self.group1()[0])
                    - (other.group5()[2] * self.group0()[3])
                    - (self.group0()[2] * other[e45])),
                ((other.group0()[0] * self.group1()[3])
                    - (other.group5()[0] * self.group0()[0])
                    - (other.group5()[1] * self.group0()[1])
                    - (other.group5()[2] * self.group0()[2])
                    - (self.group0()[0] * other.group9()[0])
                    - (self.group0()[1] * other.group9()[1])
                    - (self.group0()[2] * other.group9()[2])
                    + (self.group0()[3] * other.group9()[3])
                    - (self.group1()[0] * other.group3()[0])
                    - (self.group1()[1] * other.group3()[1])
                    - (self.group1()[2] * other.group3()[2])
                    + (self.group1()[3] * other.group3()[3])),
            ]),
            // e1234
            ((other.group4()[0] * self.group1()[0]) + (other.group4()[1] * self.group1()[1]) + (other.group4()[2] * self.group1()[2]) - (self.group0()[3] * other[e45])),
        );
    }
}
impl GeometricAntiProduct<Plane> for AntiFlector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       20       28        0
    fn geometric_anti_product(self, other: Plane) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (-(self.group0()[3] * other.group0()[0]) - (self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                (-(self.group0()[3] * other.group0()[1]) + (self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[3] * other.group0()[2]) - (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (self.group1()[0] * other.group0()[3]) + (self.group1()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[2])
                    + (self.group0()[2] * other.group0()[0])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[3]) + (self.group1()[3] * other.group0()[2])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group0()[3] * other.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<RoundPoint> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       24       44        0
    fn geometric_anti_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3] * -1.0),
                (self.group1()[1] * other.group0()[3] * -1.0),
                (self.group1()[2] * other.group0()[3] * -1.0),
                (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])
                    + (self.group1()[3] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1]) - (self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2]) + (self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])),
                (self.group1()[3] * other.group0()[3]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1]) + (self.group1()[0] * other[e2]) - (self.group1()[3] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0]) + (self.group1()[1] * other[e2]) - (self.group1()[3] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) + (self.group1()[2] * other[e2]) - (self.group1()[3] * other.group0()[2])),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other[e2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (self.group0()[3] * other.group0()[3] * -1.0),
            ]),
        );
    }
}
impl GeometricAntiProduct<Scalar> for AntiFlector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0       12        0
    fn geometric_anti_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group0()[0] * other[scalar]),
                (self.group0()[1] * other[scalar]),
                (self.group0()[2] * other[scalar]),
                (self.group0()[3] * other[scalar] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group1()[0] * other[scalar] * -1.0),
                (self.group1()[1] * other[scalar] * -1.0),
                (self.group1()[2] * other[scalar] * -1.0),
                (self.group1()[3] * other[scalar]),
            ]),
        );
    }
}
impl GeometricAntiProduct<Sphere> for AntiFlector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       24       48        0
    fn geometric_anti_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group1()[0] * other[e4315] * -1.0),
                (self.group1()[1] * other[e4315] * -1.0),
                (self.group1()[2] * other[e4315] * -1.0),
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2]) + (self.group1()[3] * other[e4315])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other[e4315]) - (self.group0()[3] * other.group0()[0]) - (self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group0()[1] * other[e4315]) - (self.group0()[3] * other.group0()[1]) + (self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                ((self.group0()[2] * other[e4315]) - (self.group0()[3] * other.group0()[2]) - (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                (self.group1()[3] * other[e4315] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (self.group1()[0] * other.group0()[3]) + (self.group1()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[2])
                    + (self.group0()[2] * other.group0()[0])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[3]) + (self.group1()[3] * other.group0()[2])),
                (self.group0()[3] * other[e4315] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other[e4315] * -1.0),
                (self.group0()[1] * other[e4315] * -1.0),
                (self.group0()[2] * other[e4315] * -1.0),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group0()[3] * other.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorEven> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      112      128        0
    fn geometric_anti_product(self, other: VersorEven) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[3] * other.group0()[0]) - (self.group1()[0] * other.group3()[3]) - (self.group1()[1] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[1])),
                (-(self.group0()[3] * other.group0()[1]) + (self.group1()[0] * other.group0()[2])
                    - (self.group1()[1] * other.group3()[3])
                    - (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[3] * other.group0()[2]) - (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])
                    - (self.group1()[2] * other.group3()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group0()[3] * other.group1()[3])
                    - (self.group1()[0] * other.group3()[0])
                    - (self.group1()[1] * other.group3()[1])
                    - (self.group1()[2] * other.group3()[2])
                    + (self.group1()[3] * other.group3()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])
                    + (self.group0()[3] * other.group3()[0])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group3()[2])
                    - (self.group1()[2] * other.group3()[1])
                    + (self.group1()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[2])
                    + (self.group0()[1] * other.group3()[3])
                    + (self.group0()[2] * other.group0()[0])
                    + (self.group0()[3] * other.group3()[1])
                    - (self.group1()[0] * other.group3()[2])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group3()[0])
                    + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])
                    + (self.group0()[2] * other.group3()[3])
                    + (self.group0()[3] * other.group3()[2])
                    + (self.group1()[0] * other.group3()[1])
                    - (self.group1()[1] * other.group3()[0])
                    + (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group0()[2])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group0()[3] * other.group0()[3])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])
                    + (self.group1()[3] * other.group3()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[1] * other.group3()[2])
                    - (self.group0()[2] * other.group1()[1])
                    + (self.group0()[2] * other.group3()[1])
                    + (self.group0()[3] * other.group2()[0])
                    + (self.group1()[0] * other.group2()[3])
                    + (self.group1()[1] * other.group2()[2])
                    - (self.group1()[2] * other.group2()[1])
                    + (self.group1()[3] * other.group1()[0])
                    - (self.group1()[3] * other.group3()[0])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group0()[3])
                    - (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    - (self.group0()[2] * other.group3()[0])
                    + (self.group0()[3] * other.group2()[1])
                    - (self.group1()[0] * other.group2()[2])
                    + (self.group1()[1] * other.group2()[3])
                    + (self.group1()[2] * other.group2()[0])
                    + (self.group1()[3] * other.group1()[1])
                    - (self.group1()[3] * other.group3()[1])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group1()[0])
                    + (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group0()[3])
                    - (self.group0()[2] * other.group1()[3])
                    + (self.group0()[3] * other.group2()[2])
                    + (self.group1()[0] * other.group2()[1])
                    - (self.group1()[1] * other.group2()[0])
                    + (self.group1()[2] * other.group2()[3])
                    + (self.group1()[3] * other.group1()[2])
                    - (self.group1()[3] * other.group3()[2])),
                (-(self.group0()[0] * other.group1()[0]) + (self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group1()[1])
                    + (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group1()[2])
                    + (self.group0()[2] * other.group3()[2])
                    + (self.group0()[3] * other.group2()[3])
                    - (self.group1()[0] * other.group2()[0])
                    - (self.group1()[1] * other.group2()[1])
                    - (self.group1()[2] * other.group2()[2])
                    + (self.group1()[3] * other.group0()[3])
                    - (self.group1()[3] * other.group1()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])
                    + (self.group0()[3] * other.group1()[0])
                    + (self.group1()[0] * other.group0()[3])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])
                    + (self.group1()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[2])
                    + (self.group0()[1] * other.group3()[3])
                    + (self.group0()[2] * other.group0()[0])
                    + (self.group0()[3] * other.group1()[1])
                    - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group1()[2] * other.group1()[0])
                    + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])
                    + (self.group0()[2] * other.group3()[3])
                    + (self.group0()[3] * other.group1()[2])
                    + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[0])
                    + (self.group1()[2] * other.group0()[3])
                    + (self.group1()[3] * other.group0()[2])),
                (-(self.group0()[3] * other.group3()[3])
                    + (self.group1()[0] * other.group0()[0])
                    + (self.group1()[1] * other.group0()[1])
                    + (self.group1()[2] * other.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorOdd> for AntiFlector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      112      128        0
    fn geometric_anti_product(self, other: VersorOdd) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(self.group0()[3] * other.group0()[0]) - (self.group1()[0] * other.group2()[3]) - (self.group1()[1] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[1])),
                (-(self.group0()[3] * other.group0()[1]) + (self.group1()[0] * other.group0()[2])
                    - (self.group1()[1] * other.group2()[3])
                    - (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[3] * other.group0()[2]) - (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])
                    - (self.group1()[2] * other.group2()[3])),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[3] * other.group1()[3])
                    + (self.group1()[0] * other.group3()[0])
                    + (self.group1()[1] * other.group3()[1])
                    + (self.group1()[2] * other.group3()[2])
                    + (self.group1()[3] * other.group2()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group0()[2])
                    - (self.group0()[2] * other.group0()[1])
                    - (self.group0()[3] * other.group3()[0])
                    - (self.group1()[0] * other.group1()[3])
                    - (self.group1()[1] * other.group3()[2])
                    + (self.group1()[2] * other.group3()[1])
                    + (self.group1()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group2()[3]) + (self.group0()[2] * other.group0()[0])
                    - (self.group0()[3] * other.group3()[1])
                    + (self.group1()[0] * other.group3()[2])
                    - (self.group1()[1] * other.group1()[3])
                    - (self.group1()[2] * other.group3()[0])
                    + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group2()[3])
                    - (self.group0()[3] * other.group3()[2])
                    - (self.group1()[0] * other.group3()[1])
                    + (self.group1()[1] * other.group3()[0])
                    - (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group0()[2])),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) - (self.group0()[3] * other.group0()[3])
                    + (self.group1()[0] * other.group1()[0])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group2()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) + (self.group0()[1] * other.group3()[2])
                    - (self.group0()[2] * other.group1()[1])
                    - (self.group0()[2] * other.group3()[1])
                    + (self.group0()[3] * other.group2()[0])
                    + (self.group1()[0] * other.group3()[3])
                    + (self.group1()[1] * other.group2()[2])
                    - (self.group1()[2] * other.group2()[1])
                    + (self.group1()[3] * other.group1()[0])
                    + (self.group1()[3] * other.group3()[0])),
                (-(self.group0()[0] * other.group1()[2]) - (self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group0()[3])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group0()[2] * other.group3()[0])
                    + (self.group0()[3] * other.group2()[1])
                    - (self.group1()[0] * other.group2()[2])
                    + (self.group1()[1] * other.group3()[3])
                    + (self.group1()[2] * other.group2()[0])
                    + (self.group1()[3] * other.group1()[1])
                    + (self.group1()[3] * other.group3()[1])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group1()[0]) - (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group0()[3])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group0()[3] * other.group2()[2])
                    + (self.group1()[0] * other.group2()[1])
                    - (self.group1()[1] * other.group2()[0])
                    + (self.group1()[2] * other.group3()[3])
                    + (self.group1()[3] * other.group1()[2])
                    + (self.group1()[3] * other.group3()[2])),
                (-(self.group0()[3] * other.group2()[3])
                    + (self.group1()[0] * other.group0()[0])
                    + (self.group1()[1] * other.group0()[1])
                    + (self.group1()[2] * other.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])
                    - (self.group0()[3] * other.group1()[0])
                    - (self.group1()[0] * other.group0()[3])
                    - (self.group1()[1] * other.group1()[2])
                    + (self.group1()[2] * other.group1()[1])
                    - (self.group1()[3] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group2()[3]) - (self.group0()[2] * other.group0()[0]) - (self.group0()[3] * other.group1()[1])
                    + (self.group1()[0] * other.group1()[2])
                    - (self.group1()[1] * other.group0()[3])
                    - (self.group1()[2] * other.group1()[0])
                    - (self.group1()[3] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])
                    - (self.group0()[2] * other.group2()[3])
                    - (self.group0()[3] * other.group1()[2])
                    - (self.group1()[0] * other.group1()[1])
                    + (self.group1()[1] * other.group1()[0])
                    - (self.group1()[2] * other.group0()[3])
                    - (self.group1()[3] * other.group0()[2])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[0] * other.group3()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])
                    + (self.group0()[3] * other.group3()[3])
                    - (self.group1()[0] * other.group2()[0])
                    - (self.group1()[1] * other.group2()[1])
                    - (self.group1()[2] * other.group2()[2])
                    + (self.group1()[3] * other.group0()[3])
                    + (self.group1()[3] * other.group1()[3])),
            ]),
        );
    }
}
impl InfixGeometricAntiProduct for AntiLine {}
impl GeometricAntiProduct<AntiCircleRotor> for AntiLine {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       50       66        0
    fn geometric_anti_product(self, other: AntiCircleRotor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[0])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[2])
                    + (self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1]) - (self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[1])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group1()[0]) + (self.group0()[0] * other.group1()[2])
                    - (self.group0()[1] * other.group2()[3])
                    - (self.group0()[2] * other.group1()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) - (self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])
                    - (self.group0()[2] * other.group2()[3])),
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group0()[1] * other.group2()[2]) + (self.group0()[2] * other.group2()[1])
                    - (self.group1()[0] * other.group1()[3])
                    - (self.group1()[0] * other.group2()[3])
                    - (self.group1()[1] * other.group1()[2])
                    + (self.group1()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[2] * other.group2()[0]) + (self.group1()[0] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[3])
                    - (self.group1()[1] * other.group2()[3])
                    - (self.group1()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[0]) - (self.group1()[0] * other.group1()[1])
                    + (self.group1()[1] * other.group1()[0])
                    - (self.group1()[2] * other.group1()[3])
                    - (self.group1()[2] * other.group2()[3])),
                ((self.group0()[0] * other.group2()[0])
                    + (self.group0()[1] * other.group2()[1])
                    + (self.group0()[2] * other.group2()[2])
                    + (self.group1()[0] * other.group1()[0])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[2] * other.group1()[2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1]) + (self.group0()[0] * other.group1()[3])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group1()[0]) + (self.group0()[1] * other.group1()[3])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) + (self.group0()[2] * other.group1()[3])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDipoleInversion> for AntiLine {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       74       90        0
    fn geometric_anti_product(self, other: AntiDipoleInversion) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (self.group0()[0] * other.group2()[3])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) + (self.group0()[1] * other.group2()[3])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (self.group0()[2] * other.group2()[3])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])
                    + (self.group1()[0] * other.group2()[3])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0]) - (self.group0()[0] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group1()[1] * other.group2()[3])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])
                    + (self.group1()[2] * other.group2()[3])),
                ((other.group0()[0] * self.group1()[0])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[2])
                    + (self.group0()[0] * other.group3()[0])
                    + (self.group0()[1] * other.group3()[1])
                    + (self.group0()[2] * other.group3()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1]) - (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[1] * other.group3()[2])
                    - (self.group1()[2] * other.group1()[1])
                    + (self.group1()[2] * other.group3()[1])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group3()[3]) + (self.group0()[2] * other.group2()[0])
                    - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[0] * other.group3()[2])
                    - (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group1()[0])
                    - (self.group1()[2] * other.group3()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) + (self.group0()[2] * other.group3()[3]) + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[0] * other.group3()[1])
                    - (self.group1()[1] * other.group1()[0])
                    + (self.group1()[1] * other.group3()[0])
                    - (self.group1()[2] * other.group1()[3])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1]) - (self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group3()[2])
                    + (self.group0()[2] * other.group3()[1])
                    - (self.group1()[0] * other.group2()[3])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group1()[0]) + (self.group0()[0] * other.group3()[2])
                    - (self.group0()[1] * other.group1()[3])
                    - (self.group0()[2] * other.group3()[0])
                    - (self.group1()[1] * other.group2()[3])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) - (self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group3()[0])
                    - (self.group0()[2] * other.group1()[3])
                    - (self.group1()[2] * other.group2()[3])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group1()[0] * other.group1()[0])
                    + (self.group1()[0] * other.group3()[0])
                    - (self.group1()[1] * other.group1()[1])
                    + (self.group1()[1] * other.group3()[1])
                    - (self.group1()[2] * other.group1()[2])
                    + (self.group1()[2] * other.group3()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum> for AntiLine {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3       24        0
    fn geometric_anti_product(self, other: AntiDualNum) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group0()[2])),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (other.group0()[1] * self.group1()[0] * -1.0),
                (other.group0()[1] * self.group1()[1] * -1.0),
                (other.group0()[1] * self.group1()[2] * -1.0),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[0] * self.group1()[0] * -1.0),
                (other.group0()[0] * self.group1()[1] * -1.0),
                (other.group0()[0] * self.group1()[2] * -1.0),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiFlatPoint> for AntiLine {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       18        0
    fn geometric_anti_product(self, other: AntiFlatPoint) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) - (self.group1()[0] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0]) - (self.group1()[1] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) - (self.group1()[2] * other.group0()[3])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiFlector> for AntiLine {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       28       36        0
    fn geometric_anti_product(self, other: AntiFlector) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[2])
                    - (self.group0()[2] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[3])
                    - (self.group1()[1] * other.group1()[2])
                    + (self.group1()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group0()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group0()[0])
                    + (self.group1()[0] * other.group1()[2])
                    - (self.group1()[1] * other.group0()[3])
                    - (self.group1()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group1()[3]) - (self.group1()[0] * other.group1()[1])
                    + (self.group1()[1] * other.group1()[0])
                    - (self.group1()[2] * other.group0()[3])),
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1]) + (self.group0()[2] * other.group1()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group0()[3]) - (self.group0()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group1()[0] * other.group1()[0])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[2] * other.group1()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiLine> for AntiLine {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       19       27        0
    fn geometric_anti_product(self, other: AntiLine) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1]) + (other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group1()[0]) - (other.group1()[0] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) + (other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[0])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[2])
                    + (other.group1()[0] * self.group0()[0])
                    + (other.group1()[1] * self.group0()[1])
                    + (other.group1()[2] * self.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiMotor> for AntiLine {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       28       36        0
    fn geometric_anti_product(self, other: AntiMotor) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group0()[3]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])
                    - (self.group1()[0] * other.group0()[3])
                    - (self.group1()[1] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group1()[0]) + (self.group1()[0] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[3])
                    - (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])
                    - (self.group0()[2] * other.group1()[3])
                    - (self.group1()[0] * other.group0()[1])
                    + (self.group1()[1] * other.group0()[0])
                    - (self.group1()[2] * other.group0()[3])),
                ((self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[2])
                    + (self.group1()[0] * other.group0()[0])
                    + (self.group1()[1] * other.group0()[1])
                    + (self.group1()[2] * other.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiPlane> for AntiLine {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       13       21        0
    fn geometric_anti_product(self, other: AntiPlane) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group0()[1] * other.group0()[3]) + (self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[3]) - (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiScalar> for AntiLine {
    type Output = AntiLine;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        6        0
    fn geometric_anti_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from([(self.group0()[0] * other[e12345]), (self.group0()[1] * other[e12345]), (self.group0()[2] * other[e12345])]),
            // e15, e25, e35
            Simd32x3::from([(self.group1()[0] * other[e12345]), (self.group1()[1] * other[e12345]), (self.group1()[2] * other[e12345])]),
        );
    }
}
impl GeometricAntiProduct<Circle> for AntiLine {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       44       60        0
    fn geometric_anti_product(self, other: Circle) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0]) - (self.group1()[0] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])),
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1]) - (self.group1()[0] * other.group1()[3]) + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[2] * other.group2()[0])
                    - (self.group1()[0] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[0])
                    - (self.group1()[2] * other.group1()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[3]) - (self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                (-(self.group0()[1] * other.group1()[3]) + (self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[2] * other.group1()[3]) - (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<CircleRotor> for AntiLine {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       50       66        0
    fn geometric_anti_product(self, other: CircleRotor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) + (self.group1()[1] * other.group0()[2])
                    - (self.group1()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group2()[3]) + (self.group0()[2] * other.group1()[0])
                    - (self.group1()[0] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group2()[3]) + (self.group1()[0] * other.group0()[1])
                    - (self.group1()[1] * other.group0()[0])),
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1]) - (self.group1()[0] * other.group1()[3])
                    + (self.group1()[0] * other.group2()[3])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[2] * other.group2()[0])
                    - (self.group1()[0] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[3])
                    + (self.group1()[1] * other.group2()[3])
                    + (self.group1()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[0])
                    - (self.group1()[2] * other.group1()[3])
                    + (self.group1()[2] * other.group2()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[3]) - (self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                (-(self.group0()[1] * other.group1()[3]) + (self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[2] * other.group1()[3]) - (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Dipole> for AntiLine {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       44       60        0
    fn geometric_anti_product(self, other: Dipole) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[2])
                    + (self.group1()[0] * other.group0()[0])
                    + (self.group1()[1] * other.group0()[1])
                    + (self.group1()[2] * other.group0()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1]) - (self.group1()[1] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0]) + (self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) - (self.group1()[0] * other.group0()[1])
                    + (self.group1()[1] * other.group0()[0])),
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group0()[1] * other.group2()[2]) + (self.group0()[2] * other.group2()[1])
                    - (self.group1()[0] * other.group1()[3])
                    - (self.group1()[1] * other.group1()[2])
                    + (self.group1()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[2] * other.group2()[0]) + (self.group1()[0] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[3])
                    - (self.group1()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[0]) - (self.group1()[0] * other.group1()[1])
                    + (self.group1()[1] * other.group1()[0])
                    - (self.group1()[2] * other.group1()[3])),
                ((self.group0()[0] * other.group2()[0])
                    + (self.group0()[1] * other.group2()[1])
                    + (self.group0()[2] * other.group2()[2])
                    + (self.group1()[0] * other.group1()[0])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[2] * other.group1()[2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) - (self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group0()[1] * other.group1()[3]) + (self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                ((self.group0()[2] * other.group1()[3]) - (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<DipoleInversion> for AntiLine {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       74       90        0
    fn geometric_anti_product(self, other: DipoleInversion) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group2()[3]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group2()[3])),
                ((self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[2])
                    + (self.group1()[0] * other.group0()[0])
                    + (self.group1()[1] * other.group0()[1])
                    + (self.group1()[2] * other.group0()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])
                    - (self.group1()[0] * other.group2()[3])
                    - (self.group1()[1] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0]) + (self.group1()[0] * other.group0()[2])
                    - (self.group1()[1] * other.group2()[3])
                    - (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) - (self.group1()[0] * other.group0()[1])
                    + (self.group1()[1] * other.group0()[0])
                    - (self.group1()[2] * other.group2()[3])),
                (-(self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group3()[1]) - (self.group0()[2] * other.group3()[2])
                    + (self.group1()[0] * other.group0()[0])
                    + (self.group1()[1] * other.group0()[1])
                    + (self.group1()[2] * other.group0()[2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group0()[0] * other.group3()[3]) - (self.group0()[1] * other.group2()[2]) + (self.group0()[2] * other.group2()[1])
                    - (self.group1()[0] * other.group1()[3])
                    - (self.group1()[1] * other.group1()[2])
                    - (self.group1()[1] * other.group3()[2])
                    + (self.group1()[2] * other.group1()[1])
                    + (self.group1()[2] * other.group3()[1])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[1] * other.group3()[3]) - (self.group0()[2] * other.group2()[0])
                    + (self.group1()[0] * other.group1()[2])
                    + (self.group1()[0] * other.group3()[2])
                    - (self.group1()[1] * other.group1()[3])
                    - (self.group1()[2] * other.group1()[0])
                    - (self.group1()[2] * other.group3()[0])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[0])
                    - (self.group0()[2] * other.group3()[3])
                    - (self.group1()[0] * other.group1()[1])
                    - (self.group1()[0] * other.group3()[1])
                    + (self.group1()[1] * other.group1()[0])
                    + (self.group1()[1] * other.group3()[0])
                    - (self.group1()[2] * other.group1()[3])),
                ((self.group0()[0] * other.group2()[0])
                    + (self.group0()[1] * other.group2()[1])
                    + (self.group0()[2] * other.group2()[2])
                    + (self.group1()[0] * other.group1()[0])
                    + (self.group1()[0] * other.group3()[0])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[1] * other.group3()[1])
                    + (self.group1()[2] * other.group1()[2])
                    + (self.group1()[2] * other.group3()[2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group3()[2])
                    - (self.group0()[2] * other.group3()[1])
                    - (self.group1()[0] * other.group2()[3])
                    - (self.group1()[1] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group3()[0])
                    + (self.group1()[0] * other.group0()[2])
                    - (self.group1()[1] * other.group2()[3])
                    - (self.group1()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group3()[0]) + (self.group0()[2] * other.group1()[3]) - (self.group1()[0] * other.group0()[1])
                    + (self.group1()[1] * other.group0()[0])
                    - (self.group1()[2] * other.group2()[3])),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<DualNum> for AntiLine {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3       18        0
    fn geometric_anti_product(self, other: DualNum) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from([(other.group0()[0] * self.group0()[0]), (other.group0()[0] * self.group0()[1]), (other.group0()[0] * self.group0()[2])]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[2])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[1] * self.group1()[0]),
                (other.group0()[1] * self.group1()[1]),
                (other.group0()[1] * self.group1()[2]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group1()[0] * -1.0),
                (other.group0()[0] * self.group1()[1] * -1.0),
                (other.group0()[0] * self.group1()[2] * -1.0),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<FlatPoint> for AntiLine {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       15        0
    fn geometric_anti_product(self, other: FlatPoint) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1]) - (self.group1()[0] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0]) - (self.group1()[1] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) - (self.group1()[2] * other.group0()[3])),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Flector> for AntiLine {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       28       36        0
    fn geometric_anti_product(self, other: Flector) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[3])
                    - (self.group1()[1] * other.group1()[2])
                    + (self.group1()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group0()[0]) + (self.group1()[0] * other.group1()[2])
                    - (self.group1()[1] * other.group0()[3])
                    - (self.group1()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[3])
                    - (self.group1()[0] * other.group1()[1])
                    + (self.group1()[1] * other.group1()[0])
                    - (self.group1()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[3]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[0])
                    + (self.group0()[1] * other.group0()[1])
                    + (self.group0()[2] * other.group0()[2])
                    + (self.group1()[0] * other.group1()[0])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[2] * other.group1()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Line> for AntiLine {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       19       27        0
    fn geometric_anti_product(self, other: Line) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0]) - (self.group1()[0] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Motor> for AntiLine {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       28       36        0
    fn geometric_anti_product(self, other: Motor) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[3]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])
                    + (self.group1()[0] * other.group0()[3])
                    + (self.group1()[1] * other.group0()[2])
                    - (self.group1()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group1()[0])
                    - (self.group1()[0] * other.group0()[2])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[3]) + (self.group1()[0] * other.group0()[1])
                    - (self.group1()[1] * other.group0()[0])
                    + (self.group1()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<MultiVector> for AntiLine {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      160      192        0
    fn geometric_anti_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group0()[0] * other.group6()[0])
                    - (self.group0()[1] * other.group6()[1])
                    - (self.group0()[2] * other.group6()[2])
                    - (self.group1()[0] * other.group7()[0])
                    - (self.group1()[1] * other.group7()[1])
                    - (self.group1()[2] * other.group7()[2])),
                ((self.group0()[0] * other.group5()[0])
                    + (self.group0()[1] * other.group5()[1])
                    + (self.group0()[2] * other.group5()[2])
                    + (self.group1()[0] * other.group4()[0])
                    + (self.group1()[1] * other.group4()[1])
                    + (self.group1()[2] * other.group4()[2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group9()[2])
                    - (self.group0()[2] * other.group9()[1])
                    - (self.group1()[0] * other[e45])
                    - (self.group1()[1] * other.group4()[2])
                    + (self.group1()[2] * other.group4()[1])),
                (-(self.group0()[0] * other.group9()[2])
                    + (self.group0()[1] * other.group3()[3])
                    + (self.group0()[2] * other.group9()[0])
                    + (self.group1()[0] * other.group4()[2])
                    - (self.group1()[1] * other[e45])
                    - (self.group1()[2] * other.group4()[0])),
                ((self.group0()[0] * other.group9()[1]) - (self.group0()[1] * other.group9()[0]) + (self.group0()[2] * other.group3()[3]) - (self.group1()[0] * other.group4()[1])
                    + (self.group1()[1] * other.group4()[0])
                    - (self.group1()[2] * other[e45])),
                ((self.group0()[0] * other.group4()[0]) + (self.group0()[1] * other.group4()[1]) + (self.group0()[2] * other.group4()[2])),
            ]),
            // e5
            ((self.group0()[0] * other.group3()[0])
                + (self.group0()[1] * other.group3()[1])
                + (self.group0()[2] * other.group3()[2])
                + (self.group1()[0] * other.group5()[0])
                + (self.group1()[0] * other.group9()[0])
                + (self.group1()[1] * other.group5()[1])
                + (self.group1()[1] * other.group9()[1])
                + (self.group1()[2] * other.group5()[2])
                + (self.group1()[2] * other.group9()[2])),
            // e15, e25, e35, e45
            Simd32x4::from([
                ((other.group0()[1] * self.group1()[0]) + (self.group0()[0] * other[e1]) + (self.group0()[1] * other.group8()[2])
                    - (self.group0()[2] * other.group8()[1])
                    - (self.group1()[0] * other.group6()[3])
                    - (self.group1()[1] * other.group1()[2])
                    + (self.group1()[1] * other.group6()[2])
                    + (self.group1()[2] * other.group1()[1])
                    - (self.group1()[2] * other.group6()[1])),
                ((other.group0()[1] * self.group1()[1]) - (self.group0()[0] * other.group8()[2])
                    + (self.group0()[1] * other[e1])
                    + (self.group0()[2] * other.group8()[0])
                    + (self.group1()[0] * other.group1()[2])
                    - (self.group1()[0] * other.group6()[2])
                    - (self.group1()[1] * other.group6()[3])
                    - (self.group1()[2] * other.group1()[0])
                    + (self.group1()[2] * other.group6()[0])),
                ((other.group0()[1] * self.group1()[2]) + (self.group0()[0] * other.group8()[1]) - (self.group0()[1] * other.group8()[0]) + (self.group0()[2] * other[e1])
                    - (self.group1()[0] * other.group1()[1])
                    + (self.group1()[0] * other.group6()[1])
                    + (self.group1()[1] * other.group1()[0])
                    - (self.group1()[1] * other.group6()[0])
                    - (self.group1()[2] * other.group6()[3])),
                ((self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[2])
                    + (self.group1()[0] * other.group7()[0])
                    + (self.group1()[1] * other.group7()[1])
                    + (self.group1()[2] * other.group7()[2])),
            ]),
            // e41, e42, e43
            Simd32x3::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group7()[2]) - (self.group0()[2] * other.group7()[1])),
                (-(self.group0()[0] * other.group7()[2]) + (self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group7()[0])),
                ((self.group0()[0] * other.group7()[1]) - (self.group0()[1] * other.group7()[0]) + (self.group0()[2] * other.group1()[3])),
            ]),
            // e23, e31, e12
            Simd32x3::from([
                ((other.group0()[1] * self.group0()[0]) + (self.group0()[1] * other.group6()[2]) - (self.group0()[2] * other.group6()[1])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group7()[2])
                    - (self.group1()[2] * other.group7()[1])),
                ((other.group0()[1] * self.group0()[1]) - (self.group0()[0] * other.group6()[2]) + (self.group0()[2] * other.group6()[0]) - (self.group1()[0] * other.group7()[2])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group7()[0])),
                ((other.group0()[1] * self.group0()[2]) + (self.group0()[0] * other.group6()[1]) - (self.group0()[1] * other.group6()[0]) + (self.group1()[0] * other.group7()[1])
                    - (self.group1()[1] * other.group7()[0])
                    + (self.group1()[2] * other.group1()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[0]) - (self.group0()[1] * other.group5()[2]) + (self.group0()[2] * other.group5()[1])
                    - (self.group1()[0] * other[e45])
                    - (self.group1()[1] * other.group4()[2])
                    + (self.group1()[2] * other.group4()[1])),
                (-(other.group0()[0] * self.group0()[1]) + (self.group0()[0] * other.group5()[2]) - (self.group0()[2] * other.group5()[0])
                    + (self.group1()[0] * other.group4()[2])
                    - (self.group1()[1] * other[e45])
                    - (self.group1()[2] * other.group4()[0])),
                (-(other.group0()[0] * self.group0()[2]) - (self.group0()[0] * other.group5()[1]) + (self.group0()[1] * other.group5()[0])
                    - (self.group1()[0] * other.group4()[1])
                    + (self.group1()[1] * other.group4()[0])
                    - (self.group1()[2] * other[e45])),
                (-(self.group0()[0] * other.group9()[0]) - (self.group0()[1] * other.group9()[1]) - (self.group0()[2] * other.group9()[2])
                    + (self.group1()[0] * other.group4()[0])
                    + (self.group1()[1] * other.group4()[1])
                    + (self.group1()[2] * other.group4()[2])),
            ]),
            // e423, e431, e412
            Simd32x3::from([
                (-(self.group0()[0] * other[e45]) - (self.group0()[1] * other.group4()[2]) + (self.group0()[2] * other.group4()[1])),
                ((self.group0()[0] * other.group4()[2]) - (self.group0()[1] * other[e45]) - (self.group0()[2] * other.group4()[0])),
                (-(self.group0()[0] * other.group4()[1]) + (self.group0()[1] * other.group4()[0]) - (self.group0()[2] * other[e45])),
            ]),
            // e235, e315, e125
            Simd32x3::from([
                (-(other.group0()[0] * self.group1()[0]) - (self.group0()[0] * other.group9()[3]) - (self.group0()[1] * other.group3()[2])
                    + (self.group0()[2] * other.group3()[1])
                    - (self.group1()[0] * other.group3()[3])
                    - (self.group1()[1] * other.group5()[2])
                    - (self.group1()[1] * other.group9()[2])
                    + (self.group1()[2] * other.group5()[1])
                    + (self.group1()[2] * other.group9()[1])),
                (-(other.group0()[0] * self.group1()[1]) + (self.group0()[0] * other.group3()[2])
                    - (self.group0()[1] * other.group9()[3])
                    - (self.group0()[2] * other.group3()[0])
                    + (self.group1()[0] * other.group5()[2])
                    + (self.group1()[0] * other.group9()[2])
                    - (self.group1()[1] * other.group3()[3])
                    - (self.group1()[2] * other.group5()[0])
                    - (self.group1()[2] * other.group9()[0])),
                (-(other.group0()[0] * self.group1()[2]) - (self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group3()[0])
                    - (self.group0()[2] * other.group9()[3])
                    - (self.group1()[0] * other.group5()[1])
                    - (self.group1()[0] * other.group9()[1])
                    + (self.group1()[1] * other.group5()[0])
                    + (self.group1()[1] * other.group9()[0])
                    - (self.group1()[2] * other.group3()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(self.group0()[0] * other.group6()[3]) - (self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])
                    - (self.group1()[0] * other.group1()[3])
                    - (self.group1()[1] * other.group7()[2])
                    + (self.group1()[2] * other.group7()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group6()[3]) - (self.group0()[2] * other.group1()[0]) + (self.group1()[0] * other.group7()[2])
                    - (self.group1()[1] * other.group1()[3])
                    - (self.group1()[2] * other.group7()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])
                    - (self.group0()[2] * other.group6()[3])
                    - (self.group1()[0] * other.group7()[1])
                    + (self.group1()[1] * other.group7()[0])
                    - (self.group1()[2] * other.group1()[3])),
                (-(self.group0()[0] * other.group8()[0]) - (self.group0()[1] * other.group8()[1]) - (self.group0()[2] * other.group8()[2])
                    + (self.group1()[0] * other.group1()[0])
                    - (self.group1()[0] * other.group6()[0])
                    + (self.group1()[1] * other.group1()[1])
                    - (self.group1()[1] * other.group6()[1])
                    + (self.group1()[2] * other.group1()[2])
                    - (self.group1()[2] * other.group6()[2])),
            ]),
            // e1234
            (-(self.group0()[0] * other.group7()[0]) - (self.group0()[1] * other.group7()[1]) - (self.group0()[2] * other.group7()[2])),
        );
    }
}
impl GeometricAntiProduct<Plane> for AntiLine {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       13       21        0
    fn geometric_anti_product(self, other: Plane) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                (-(self.group0()[1] * other.group0()[3]) + (self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[2] * other.group0()[3]) - (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<RoundPoint> for AntiLine {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       16       30        0
    fn geometric_anti_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from([(self.group0()[0] * other.group0()[3]), (self.group0()[1] * other.group0()[3]), (self.group0()[2] * other.group0()[3])]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other[e2]) - (self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group0()[1] * other[e2]) + (self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                ((self.group0()[2] * other[e2]) - (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1]) - (self.group1()[0] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0]) - (self.group1()[1] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) - (self.group1()[2] * other.group0()[3])),
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Scalar> for AntiLine {
    type Output = Line;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0       12        0
    fn geometric_anti_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Line::from_groups(
            // e415, e425, e435
            Simd32x3::from([
                (self.group0()[0] * other[scalar] * -1.0),
                (self.group0()[1] * other[scalar] * -1.0),
                (self.group0()[2] * other[scalar] * -1.0),
            ]),
            // e235, e315, e125
            Simd32x3::from([
                (self.group1()[0] * other[scalar] * -1.0),
                (self.group1()[1] * other[scalar] * -1.0),
                (self.group1()[2] * other[scalar] * -1.0),
            ]),
        );
    }
}
impl GeometricAntiProduct<Sphere> for AntiLine {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       16       36        0
    fn geometric_anti_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                (self.group0()[0] * other[e4315] * -1.0),
                (self.group0()[1] * other[e4315] * -1.0),
                (self.group0()[2] * other[e4315] * -1.0),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group1()[0] * other[e4315] * -1.0),
                (self.group1()[1] * other[e4315] * -1.0),
                (self.group1()[2] * other[e4315] * -1.0),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                (-(self.group0()[1] * other.group0()[3]) + (self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[2] * other.group0()[3]) - (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) - (self.group1()[0] * other[e4315])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0]) - (self.group1()[1] * other[e4315])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) - (self.group1()[2] * other[e4315])),
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorEven> for AntiLine {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       80       96        0
    fn geometric_anti_product(self, other: VersorEven) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group3()[3]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group3()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])
                    + (self.group1()[0] * other.group3()[3])
                    + (self.group1()[1] * other.group0()[2])
                    - (self.group1()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[3]) + (self.group0()[2] * other.group1()[0])
                    - (self.group1()[0] * other.group0()[2])
                    + (self.group1()[1] * other.group3()[3])
                    + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1])
                    - (self.group1()[1] * other.group0()[0])
                    + (self.group1()[2] * other.group3()[3])),
                ((self.group0()[0] * other.group3()[0])
                    + (self.group0()[1] * other.group3()[1])
                    + (self.group0()[2] * other.group3()[2])
                    + (self.group1()[0] * other.group0()[0])
                    + (self.group1()[1] * other.group0()[1])
                    + (self.group1()[2] * other.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1]) + (self.group1()[0] * other.group0()[3])
                    - (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[1] * other.group3()[2])
                    - (self.group1()[2] * other.group1()[1])
                    + (self.group1()[2] * other.group3()[1])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group2()[3]) + (self.group0()[2] * other.group2()[0])
                    - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[0] * other.group3()[2])
                    + (self.group1()[1] * other.group0()[3])
                    - (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group1()[0])
                    - (self.group1()[2] * other.group3()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) + (self.group0()[2] * other.group2()[3]) + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[0] * other.group3()[1])
                    - (self.group1()[1] * other.group1()[0])
                    + (self.group1()[1] * other.group3()[0])
                    + (self.group1()[2] * other.group0()[3])
                    - (self.group1()[2] * other.group1()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group3()[2]) + (self.group0()[2] * other.group3()[1])
                    - (self.group1()[0] * other.group3()[3])
                    - (self.group1()[1] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group3()[2]) - (self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group3()[0]) + (self.group1()[0] * other.group0()[2])
                    - (self.group1()[1] * other.group3()[3])
                    - (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group3()[0])
                    - (self.group0()[2] * other.group1()[3])
                    - (self.group1()[0] * other.group0()[1])
                    + (self.group1()[1] * other.group0()[0])
                    - (self.group1()[2] * other.group3()[3])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group1()[0] * other.group1()[0])
                    + (self.group1()[0] * other.group3()[0])
                    - (self.group1()[1] * other.group1()[1])
                    + (self.group1()[1] * other.group3()[1])
                    - (self.group1()[2] * other.group1()[2])
                    + (self.group1()[2] * other.group3()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorOdd> for AntiLine {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       80       96        0
    fn geometric_anti_product(self, other: VersorOdd) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group2()[3]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group2()[3])),
                ((self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[2])
                    + (self.group1()[0] * other.group0()[0])
                    + (self.group1()[1] * other.group0()[1])
                    + (self.group1()[2] * other.group0()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])
                    - (self.group1()[0] * other.group2()[3])
                    - (self.group1()[1] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group0()[3]) - (self.group0()[2] * other.group1()[0]) + (self.group1()[0] * other.group0()[2])
                    - (self.group1()[1] * other.group2()[3])
                    - (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])
                    - (self.group0()[2] * other.group0()[3])
                    - (self.group1()[0] * other.group0()[1])
                    + (self.group1()[1] * other.group0()[0])
                    - (self.group1()[2] * other.group2()[3])),
                (-(self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group3()[1]) - (self.group0()[2] * other.group3()[2])
                    + (self.group1()[0] * other.group0()[0])
                    + (self.group1()[1] * other.group0()[1])
                    + (self.group1()[2] * other.group0()[2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group0()[0] * other.group3()[3]) - (self.group0()[1] * other.group2()[2]) + (self.group0()[2] * other.group2()[1])
                    - (self.group1()[0] * other.group0()[3])
                    - (self.group1()[0] * other.group1()[3])
                    - (self.group1()[1] * other.group1()[2])
                    - (self.group1()[1] * other.group3()[2])
                    + (self.group1()[2] * other.group1()[1])
                    + (self.group1()[2] * other.group3()[1])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[1] * other.group3()[3]) - (self.group0()[2] * other.group2()[0])
                    + (self.group1()[0] * other.group1()[2])
                    + (self.group1()[0] * other.group3()[2])
                    - (self.group1()[1] * other.group0()[3])
                    - (self.group1()[1] * other.group1()[3])
                    - (self.group1()[2] * other.group1()[0])
                    - (self.group1()[2] * other.group3()[0])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[0])
                    - (self.group0()[2] * other.group3()[3])
                    - (self.group1()[0] * other.group1()[1])
                    - (self.group1()[0] * other.group3()[1])
                    + (self.group1()[1] * other.group1()[0])
                    + (self.group1()[1] * other.group3()[0])
                    - (self.group1()[2] * other.group0()[3])
                    - (self.group1()[2] * other.group1()[3])),
                ((self.group0()[0] * other.group2()[0])
                    + (self.group0()[1] * other.group2()[1])
                    + (self.group0()[2] * other.group2()[2])
                    + (self.group1()[0] * other.group1()[0])
                    + (self.group1()[0] * other.group3()[0])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[1] * other.group3()[1])
                    + (self.group1()[2] * other.group1()[2])
                    + (self.group1()[2] * other.group3()[2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group3()[2])
                    - (self.group0()[2] * other.group3()[1])
                    - (self.group1()[0] * other.group2()[3])
                    - (self.group1()[1] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group3()[0])
                    + (self.group1()[0] * other.group0()[2])
                    - (self.group1()[1] * other.group2()[3])
                    - (self.group1()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group3()[0]) + (self.group0()[2] * other.group1()[3]) - (self.group1()[0] * other.group0()[1])
                    + (self.group1()[1] * other.group0()[0])
                    - (self.group1()[2] * other.group2()[3])),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]),
        );
    }
}
impl InfixGeometricAntiProduct for AntiMotor {}
impl GeometricAntiProduct<AntiCircleRotor> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       72       88        0
    fn geometric_anti_product(self, other: AntiCircleRotor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group0()[3]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) - (other.group0()[2] * self.group0()[3])),
                ((other.group0()[0] * self.group1()[0])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[2])
                    + (other.group1()[0] * self.group0()[0])
                    + (other.group1()[1] * self.group0()[1])
                    + (other.group1()[2] * self.group0()[2])
                    - (other.group2()[3] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group1()[2])
                    - (other.group0()[2] * self.group1()[1])
                    - (other.group1()[0] * self.group0()[3])
                    + (other.group1()[1] * self.group0()[2])
                    - (other.group1()[2] * self.group0()[1])
                    - (other.group2()[3] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group1()[3]) + (other.group0()[2] * self.group1()[0])
                    - (other.group1()[0] * self.group0()[2])
                    - (other.group1()[1] * self.group0()[3])
                    + (other.group1()[2] * self.group0()[0])
                    - (other.group2()[3] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) - (other.group0()[2] * self.group1()[3]) + (other.group1()[0] * self.group0()[1])
                    - (other.group1()[1] * self.group0()[0])
                    - (other.group1()[2] * self.group0()[3])
                    - (other.group2()[3] * self.group0()[2])),
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2]) + (other.group1()[3] * self.group0()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(other.group1()[0] * self.group1()[3]) + (other.group1()[1] * self.group1()[2])
                    - (other.group1()[2] * self.group1()[1])
                    - (other.group1()[3] * self.group1()[0])
                    - (other.group2()[0] * self.group0()[3])
                    + (other.group2()[1] * self.group0()[2])
                    - (other.group2()[2] * self.group0()[1])
                    - (other.group2()[3] * self.group1()[0])),
                (-(other.group1()[0] * self.group1()[2]) - (other.group1()[1] * self.group1()[3]) + (other.group1()[2] * self.group1()[0])
                    - (other.group1()[3] * self.group1()[1])
                    - (other.group2()[0] * self.group0()[2])
                    - (other.group2()[1] * self.group0()[3])
                    + (other.group2()[2] * self.group0()[0])
                    - (other.group2()[3] * self.group1()[1])),
                ((other.group1()[0] * self.group1()[1]) - (other.group1()[1] * self.group1()[0]) - (other.group1()[2] * self.group1()[3]) - (other.group1()[3] * self.group1()[2])
                    + (other.group2()[0] * self.group0()[1])
                    - (other.group2()[1] * self.group0()[0])
                    - (other.group2()[2] * self.group0()[3])
                    - (other.group2()[3] * self.group1()[2])),
                ((other.group1()[0] * self.group1()[0]) + (other.group1()[1] * self.group1()[1]) + (other.group1()[2] * self.group1()[2]) - (other.group1()[3] * self.group1()[3])
                    + (other.group2()[0] * self.group0()[0])
                    + (other.group2()[1] * self.group0()[1])
                    + (other.group2()[2] * self.group0()[2])
                    - (other.group2()[3] * self.group1()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1])
                    + (other.group1()[3] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group1()[3])
                    + (other.group0()[2] * self.group1()[0])
                    + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) - (other.group0()[2] * self.group1()[3]) + (other.group1()[3] * self.group0()[2])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDipoleInversion> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      104      120        0
    fn geometric_anti_product(self, other: AntiDipoleInversion) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (other.group2()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[3]) - (other.group0()[2] * self.group0()[0]) + (other.group2()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[1])
                    + (other.group0()[1] * self.group0()[0])
                    + (other.group0()[2] * self.group0()[3])
                    + (other.group2()[3] * self.group0()[2])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])
                    + (other.group2()[3] * self.group1()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) + (other.group1()[0] * self.group0()[3])
                    - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])
                    + (other.group2()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group1()[0])
                    + (other.group1()[0] * self.group0()[2])
                    + (other.group1()[1] * self.group0()[3])
                    - (other.group1()[2] * self.group0()[0])
                    + (other.group2()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group1()[3])
                    - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group0()[3])
                    + (other.group2()[3] * self.group1()[2])),
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group0()[3])
                    - (other.group2()[3] * self.group1()[3])
                    + (other.group3()[0] * self.group0()[0])
                    + (other.group3()[1] * self.group0()[1])
                    + (other.group3()[2] * self.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group1()[0] * self.group1()[3]) - (other.group1()[1] * self.group1()[2]) + (other.group1()[2] * self.group1()[1]) - (other.group1()[3] * self.group1()[0])
                    + (other.group2()[0] * self.group0()[3])
                    - (other.group2()[1] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[1])
                    - (other.group3()[0] * self.group1()[3])
                    + (other.group3()[1] * self.group1()[2])
                    - (other.group3()[2] * self.group1()[1])
                    + (other.group3()[3] * self.group0()[0])),
                ((other.group1()[0] * self.group1()[2]) + (other.group1()[1] * self.group1()[3]) - (other.group1()[2] * self.group1()[0]) - (other.group1()[3] * self.group1()[1])
                    + (other.group2()[0] * self.group0()[2])
                    + (other.group2()[1] * self.group0()[3])
                    - (other.group2()[2] * self.group0()[0])
                    - (other.group3()[0] * self.group1()[2])
                    - (other.group3()[1] * self.group1()[3])
                    + (other.group3()[2] * self.group1()[0])
                    + (other.group3()[3] * self.group0()[1])),
                (-(other.group1()[0] * self.group1()[1]) + (other.group1()[1] * self.group1()[0]) + (other.group1()[2] * self.group1()[3])
                    - (other.group1()[3] * self.group1()[2])
                    - (other.group2()[0] * self.group0()[1])
                    + (other.group2()[1] * self.group0()[0])
                    + (other.group2()[2] * self.group0()[3])
                    + (other.group3()[0] * self.group1()[1])
                    - (other.group3()[1] * self.group1()[0])
                    - (other.group3()[2] * self.group1()[3])
                    + (other.group3()[3] * self.group0()[2])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])
                    + (other.group2()[3] * self.group0()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group1()[2])
                    - (other.group0()[2] * self.group1()[1])
                    - (other.group1()[3] * self.group0()[0])
                    - (other.group2()[3] * self.group1()[0])
                    - (other.group3()[0] * self.group0()[3])
                    + (other.group3()[1] * self.group0()[2])
                    - (other.group3()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group1()[3]) + (other.group0()[2] * self.group1()[0])
                    - (other.group1()[3] * self.group0()[1])
                    - (other.group2()[3] * self.group1()[1])
                    - (other.group3()[0] * self.group0()[2])
                    - (other.group3()[1] * self.group0()[3])
                    + (other.group3()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1])
                    - (other.group0()[1] * self.group1()[0])
                    - (other.group0()[2] * self.group1()[3])
                    - (other.group1()[3] * self.group0()[2])
                    - (other.group2()[3] * self.group1()[2])
                    + (other.group3()[0] * self.group0()[1])
                    - (other.group3()[1] * self.group0()[0])
                    - (other.group3()[2] * self.group0()[3])),
                (-(other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    + (other.group3()[0] * self.group1()[0])
                    + (other.group3()[1] * self.group1()[1])
                    + (other.group3()[2] * self.group1()[2])
                    + (other.group3()[3] * self.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4       32        0
    fn geometric_anti_product(self, other: AntiDualNum) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group0()[2])),
                (other.group0()[0] * self.group1()[3] * -1.0),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other.group0()[1] * self.group1()[0] * -1.0),
                (other.group0()[1] * self.group1()[1] * -1.0),
                (other.group0()[1] * self.group1()[2] * -1.0),
                (other.group0()[1] * self.group1()[3] * -1.0),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[0] * self.group1()[0] * -1.0),
                (other.group0()[0] * self.group1()[1] * -1.0),
                (other.group0()[0] * self.group1()[2] * -1.0),
                (other.group0()[0] * self.group0()[3] * -1.0),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiFlatPoint> for AntiMotor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       12       24        0
    fn geometric_anti_product(self, other: AntiFlatPoint) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) - (other.group0()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[3]) - (other.group0()[2] * self.group0()[0]) - (other.group0()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group0()[3])
                    - (other.group0()[3] * self.group1()[2])),
                (other.group0()[3] * self.group0()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[3] * self.group0()[0] * -1.0),
                (other.group0()[3] * self.group0()[1] * -1.0),
                (other.group0()[3] * self.group0()[2] * -1.0),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group0()[3] * self.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiFlector> for AntiMotor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       40       48        0
    fn geometric_anti_product(self, other: AntiFlector) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])
                    - (other.group0()[3] * self.group1()[0])
                    - (other.group1()[0] * self.group1()[3])
                    + (other.group1()[1] * self.group1()[2])
                    - (other.group1()[2] * self.group1()[1])
                    + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[3])
                    - (other.group0()[2] * self.group0()[0])
                    - (other.group0()[3] * self.group1()[1])
                    - (other.group1()[0] * self.group1()[2])
                    - (other.group1()[1] * self.group1()[3])
                    + (other.group1()[2] * self.group1()[0])
                    + (other.group1()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group0()[3])
                    - (other.group0()[3] * self.group1()[2])
                    + (other.group1()[0] * self.group1()[1])
                    - (other.group1()[1] * self.group1()[0])
                    - (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[3] * self.group0()[3])
                    + (other.group1()[0] * self.group0()[0])
                    + (other.group1()[1] * self.group0()[1])
                    + (other.group1()[2] * self.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[3] * self.group0()[0]) - (other.group1()[0] * self.group0()[3]) + (other.group1()[1] * self.group0()[2])
                    - (other.group1()[2] * self.group0()[1])),
                (-(other.group0()[3] * self.group0()[1]) - (other.group1()[0] * self.group0()[2]) - (other.group1()[1] * self.group0()[3])
                    + (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[3] * self.group0()[2]) + (other.group1()[0] * self.group0()[1])
                    - (other.group1()[1] * self.group0()[0])
                    - (other.group1()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group0()[3] * self.group1()[3])
                    + (other.group1()[0] * self.group1()[0])
                    + (other.group1()[1] * self.group1()[1])
                    + (other.group1()[2] * self.group1()[2])
                    + (other.group1()[3] * self.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiLine> for AntiMotor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       28       36        0
    fn geometric_anti_product(self, other: AntiLine) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group0()[3]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) - (other.group0()[2] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group1()[2])
                    - (other.group0()[2] * self.group1()[1])
                    - (other.group1()[0] * self.group0()[3])
                    + (other.group1()[1] * self.group0()[2])
                    - (other.group1()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group1()[3]) + (other.group0()[2] * self.group1()[0])
                    - (other.group1()[0] * self.group0()[2])
                    - (other.group1()[1] * self.group0()[3])
                    + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) - (other.group0()[2] * self.group1()[3]) + (other.group1()[0] * self.group0()[1])
                    - (other.group1()[1] * self.group0()[0])
                    - (other.group1()[2] * self.group0()[3])),
                ((other.group0()[0] * self.group1()[0])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[2])
                    + (other.group1()[0] * self.group0()[0])
                    + (other.group1()[1] * self.group0()[1])
                    + (other.group1()[2] * self.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiMotor> for AntiMotor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       40       48        0
    fn geometric_anti_product(self, other: AntiMotor) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group0()[2])
                    - (other.group0()[2] * self.group0()[1])
                    - (other.group0()[3] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group0()[3]) + (other.group0()[2] * self.group0()[0])
                    - (other.group0()[3] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) - (other.group0()[2] * self.group0()[3]) - (other.group0()[3] * self.group0()[2])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self.group0()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group1()[2])
                    - (other.group0()[2] * self.group1()[1])
                    - (other.group0()[3] * self.group1()[0])
                    - (other.group1()[0] * self.group0()[3])
                    + (other.group1()[1] * self.group0()[2])
                    - (other.group1()[2] * self.group0()[1])
                    - (other.group1()[3] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group1()[3]) + (other.group0()[2] * self.group1()[0])
                    - (other.group0()[3] * self.group1()[1])
                    - (other.group1()[0] * self.group0()[2])
                    - (other.group1()[1] * self.group0()[3])
                    + (other.group1()[2] * self.group0()[0])
                    - (other.group1()[3] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) - (other.group0()[2] * self.group1()[3]) - (other.group0()[3] * self.group1()[2])
                    + (other.group1()[0] * self.group0()[1])
                    - (other.group1()[1] * self.group0()[0])
                    - (other.group1()[2] * self.group0()[3])
                    - (other.group1()[3] * self.group0()[2])),
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2]) - (other.group0()[3] * self.group1()[3])
                    + (other.group1()[0] * self.group0()[0])
                    + (other.group1()[1] * self.group0()[1])
                    + (other.group1()[2] * self.group0()[2])
                    - (other.group1()[3] * self.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiPlane> for AntiMotor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       20       28        0
    fn geometric_anti_product(self, other: AntiPlane) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1]) - (self.group1()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0]) - (self.group1()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) - (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0]) - (self.group1()[3] * other.group0()[2])),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1]) - (self.group0()[3] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0]) - (self.group0()[3] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) - (self.group0()[3] * other.group0()[2])),
                ((self.group0()[3] * other.group0()[3]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiScalar> for AntiMotor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        8        0
    fn geometric_anti_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self.group0()[0] * other[e12345]),
                (self.group0()[1] * other[e12345]),
                (self.group0()[2] * other[e12345]),
                (self.group0()[3] * other[e12345]),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self.group1()[0] * other[e12345]),
                (self.group1()[1] * other[e12345]),
                (self.group1()[2] * other[e12345]),
                (self.group1()[3] * other[e12345]),
            ]),
        );
    }
}
impl GeometricAntiProduct<Circle> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       64       80        0
    fn geometric_anti_product(self, other: Circle) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[3]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])
                    + (self.group0()[3] * other.group1()[0])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group1()[0]) - (self.group0()[0] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group0()[3] * other.group1()[1])),
                (-(other.group0()[0] * self.group1()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])
                    + (self.group0()[3] * other.group1()[2])),
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2]) - (self.group0()[3] * other.group1()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group2()[0] * self.group0()[3]) - (other.group2()[1] * self.group0()[2]) + (other.group2()[2] * self.group0()[1]) - (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])
                    + (self.group1()[3] * other.group1()[0])),
                ((other.group2()[0] * self.group0()[2]) + (other.group2()[1] * self.group0()[3])
                    - (other.group2()[2] * self.group0()[0])
                    - (self.group1()[0] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group1()[0])
                    + (self.group1()[3] * other.group1()[1])),
                (-(other.group2()[0] * self.group0()[1])
                    + (other.group2()[1] * self.group0()[0])
                    + (other.group2()[2] * self.group0()[3])
                    + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[0])
                    - (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group1()[2])
                    - (other.group0()[2] * self.group1()[1])
                    - (self.group0()[0] * other.group1()[3])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group1()[3]) + (other.group0()[2] * self.group1()[0])
                    - (self.group0()[1] * other.group1()[3])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) - (other.group0()[2] * self.group1()[3]) - (self.group0()[2] * other.group1()[3])),
                (-(other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<CircleRotor> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       72       88        0
    fn geometric_anti_product(self, other: CircleRotor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[3]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    + (self.group0()[3] * other.group2()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (self.group0()[0] * other.group2()[3])
                    + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])
                    + (self.group0()[3] * other.group1()[0])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group1()[0]) - (self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group2()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group0()[3] * other.group1()[1])),
                (-(other.group0()[0] * self.group1()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])
                    + (self.group0()[2] * other.group2()[3])
                    + (self.group0()[3] * other.group1()[2])),
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2]) - (self.group0()[3] * other.group1()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1]) + (self.group0()[3] * other.group2()[0]) - (self.group1()[0] * other.group1()[3])
                    + (self.group1()[0] * other.group2()[3])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])
                    + (self.group1()[3] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[2] * other.group2()[0]) + (self.group0()[3] * other.group2()[1])
                    - (self.group1()[0] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[3])
                    + (self.group1()[1] * other.group2()[3])
                    + (self.group1()[2] * other.group1()[0])
                    + (self.group1()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) + (self.group0()[3] * other.group2()[2]) + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[0])
                    - (self.group1()[2] * other.group1()[3])
                    + (self.group1()[2] * other.group2()[3])
                    + (self.group1()[3] * other.group1()[2])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group1()[2])
                    - (other.group0()[2] * self.group1()[1])
                    - (self.group0()[0] * other.group1()[3])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group1()[3]) + (other.group0()[2] * self.group1()[0])
                    - (self.group0()[1] * other.group1()[3])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) - (other.group0()[2] * self.group1()[3]) - (self.group0()[2] * other.group1()[3])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])
                    + (self.group1()[3] * other.group2()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Dipole> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       64       80        0
    fn geometric_anti_product(self, other: Dipole) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group0()[3]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) - (other.group0()[2] * self.group0()[3])),
                ((other.group0()[0] * self.group1()[0])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[2])
                    + (self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group1()[2])
                    - (other.group0()[2] * self.group1()[1])
                    - (self.group0()[1] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[1])
                    - (self.group0()[3] * other.group1()[0])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group1()[3])
                    + (other.group0()[2] * self.group1()[0])
                    + (self.group0()[0] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[0])
                    - (self.group0()[3] * other.group1()[1])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) - (other.group0()[2] * self.group1()[3]) - (self.group0()[0] * other.group1()[1])
                    + (self.group0()[1] * other.group1()[0])
                    - (self.group0()[3] * other.group1()[2])),
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2]) + (self.group0()[3] * other.group1()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(other.group2()[0] * self.group0()[3]) + (other.group2()[1] * self.group0()[2])
                    - (other.group2()[2] * self.group0()[1])
                    - (self.group1()[0] * other.group1()[3])
                    - (self.group1()[1] * other.group1()[2])
                    + (self.group1()[2] * other.group1()[1])
                    - (self.group1()[3] * other.group1()[0])),
                (-(other.group2()[0] * self.group0()[2]) - (other.group2()[1] * self.group0()[3])
                    + (other.group2()[2] * self.group0()[0])
                    + (self.group1()[0] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[3])
                    - (self.group1()[2] * other.group1()[0])
                    - (self.group1()[3] * other.group1()[1])),
                ((other.group2()[0] * self.group0()[1]) - (other.group2()[1] * self.group0()[0]) - (other.group2()[2] * self.group0()[3]) - (self.group1()[0] * other.group1()[1])
                    + (self.group1()[1] * other.group1()[0])
                    - (self.group1()[2] * other.group1()[3])
                    - (self.group1()[3] * other.group1()[2])),
                ((other.group2()[0] * self.group0()[0])
                    + (other.group2()[1] * self.group0()[1])
                    + (other.group2()[2] * self.group0()[2])
                    + (self.group1()[0] * other.group1()[0])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1])
                    + (self.group0()[0] * other.group1()[3])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group1()[3])
                    + (other.group0()[2] * self.group1()[0])
                    + (self.group0()[1] * other.group1()[3])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) - (other.group0()[2] * self.group1()[3]) + (self.group0()[2] * other.group1()[3])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<DipoleInversion> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      104      120        0
    fn geometric_anti_product(self, other: DipoleInversion) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group0()[2])
                    - (other.group0()[2] * self.group0()[1])
                    - (self.group0()[0] * other.group2()[3])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group0()[3]) + (other.group0()[2] * self.group0()[0])
                    - (self.group0()[1] * other.group2()[3])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) - (other.group0()[2] * self.group0()[3]) - (self.group0()[2] * other.group2()[3])),
                ((other.group0()[0] * self.group1()[0])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[2])
                    + (self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group2()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group1()[2])
                    - (other.group0()[2] * self.group1()[1])
                    - (self.group0()[1] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[1])
                    - (self.group0()[3] * other.group1()[0])
                    - (self.group1()[0] * other.group2()[3])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group1()[3])
                    + (other.group0()[2] * self.group1()[0])
                    + (self.group0()[0] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[0])
                    - (self.group0()[3] * other.group1()[1])
                    - (self.group1()[1] * other.group2()[3])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) - (other.group0()[2] * self.group1()[3]) - (self.group0()[0] * other.group1()[1])
                    + (self.group0()[1] * other.group1()[0])
                    - (self.group0()[3] * other.group1()[2])
                    - (self.group1()[2] * other.group2()[3])),
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group3()[0])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group3()[2])
                    + (self.group0()[3] * other.group1()[3])
                    - (self.group1()[3] * other.group2()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group0()[0] * other.group3()[3]) - (self.group0()[1] * other.group2()[2]) + (self.group0()[2] * other.group2()[1])
                    - (self.group0()[3] * other.group2()[0])
                    - (self.group1()[0] * other.group1()[3])
                    - (self.group1()[1] * other.group1()[2])
                    - (self.group1()[1] * other.group3()[2])
                    + (self.group1()[2] * other.group1()[1])
                    + (self.group1()[2] * other.group3()[1])
                    - (self.group1()[3] * other.group1()[0])
                    - (self.group1()[3] * other.group3()[0])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[1] * other.group3()[3]) - (self.group0()[2] * other.group2()[0]) - (self.group0()[3] * other.group2()[1])
                    + (self.group1()[0] * other.group1()[2])
                    + (self.group1()[0] * other.group3()[2])
                    - (self.group1()[1] * other.group1()[3])
                    - (self.group1()[2] * other.group1()[0])
                    - (self.group1()[2] * other.group3()[0])
                    - (self.group1()[3] * other.group1()[1])
                    - (self.group1()[3] * other.group3()[1])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[0])
                    - (self.group0()[2] * other.group3()[3])
                    - (self.group0()[3] * other.group2()[2])
                    - (self.group1()[0] * other.group1()[1])
                    - (self.group1()[0] * other.group3()[1])
                    + (self.group1()[1] * other.group1()[0])
                    + (self.group1()[1] * other.group3()[0])
                    - (self.group1()[2] * other.group1()[3])
                    - (self.group1()[3] * other.group1()[2])
                    - (self.group1()[3] * other.group3()[2])),
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group2()[1]) + (self.group0()[2] * other.group2()[2]) - (self.group0()[3] * other.group3()[3])
                    + (self.group1()[0] * other.group1()[0])
                    + (self.group1()[0] * other.group3()[0])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[1] * other.group3()[1])
                    + (self.group1()[2] * other.group1()[2])
                    + (self.group1()[2] * other.group3()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1])
                    + (self.group0()[0] * other.group1()[3])
                    + (self.group0()[1] * other.group3()[2])
                    - (self.group0()[2] * other.group3()[1])
                    + (self.group0()[3] * other.group3()[0])
                    - (self.group1()[0] * other.group2()[3])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group1()[3]) + (other.group0()[2] * self.group1()[0])
                    - (self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group3()[0])
                    + (self.group0()[3] * other.group3()[1])
                    - (self.group1()[1] * other.group2()[3])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) - (other.group0()[2] * self.group1()[3]) + (self.group0()[0] * other.group3()[1])
                    - (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group0()[3] * other.group3()[2])
                    - (self.group1()[2] * other.group2()[3])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) - (self.group0()[3] * other.group2()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<DualNum> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4       24        0
    fn geometric_anti_product(self, other: DualNum) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[2])),
                (other.group0()[0] * self.group1()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[1] * self.group1()[0]),
                (other.group0()[1] * self.group1()[1]),
                (other.group0()[1] * self.group1()[2]),
                (other.group0()[0] * self.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group1()[0] * -1.0),
                (other.group0()[0] * self.group1()[1] * -1.0),
                (other.group0()[0] * self.group1()[2] * -1.0),
                (other.group0()[1] * self.group1()[3]),
            ]),
        );
    }
}
impl GeometricAntiProduct<FlatPoint> for AntiMotor {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       12       20        0
    fn geometric_anti_product(self, other: FlatPoint) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])
                    - (self.group0()[3] * other.group0()[0])
                    - (self.group1()[0] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0]) - (self.group0()[3] * other.group0()[1]) - (self.group1()[1] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])
                    - (self.group0()[3] * other.group0()[2])
                    - (self.group1()[2] * other.group0()[3])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Flector> for AntiMotor {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       40       48        0
    fn geometric_anti_product(self, other: Flector) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])
                    - (self.group0()[3] * other.group0()[0])
                    - (self.group1()[0] * other.group0()[3])
                    - (self.group1()[1] * other.group1()[2])
                    + (self.group1()[2] * other.group1()[1])
                    - (self.group1()[3] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group0()[0]) - (self.group0()[3] * other.group0()[1])
                    + (self.group1()[0] * other.group1()[2])
                    - (self.group1()[1] * other.group0()[3])
                    - (self.group1()[2] * other.group1()[0])
                    - (self.group1()[3] * other.group1()[1])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[3])
                    - (self.group0()[3] * other.group0()[2])
                    - (self.group1()[0] * other.group1()[1])
                    + (self.group1()[1] * other.group1()[0])
                    - (self.group1()[2] * other.group0()[3])
                    - (self.group1()[3] * other.group1()[2])),
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])
                    + (self.group0()[3] * other.group0()[3])),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) + (self.group0()[3] * other.group1()[0])),
                (-(self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group0()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group0()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group1()[2])),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) - (self.group0()[3] * other.group1()[3])
                    + (self.group1()[0] * other.group1()[0])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Line> for AntiMotor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       28       36        0
    fn geometric_anti_product(self, other: Line) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[3]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) + (other.group1()[0] * self.group0()[3])
                    - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group1()[0])
                    + (other.group1()[0] * self.group0()[2])
                    + (other.group1()[1] * self.group0()[3])
                    - (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group1()[3])
                    - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Motor> for AntiMotor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       40       48        0
    fn geometric_anti_product(self, other: Motor) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (self.group0()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[2])
                    + (self.group0()[1] * other.group0()[3])
                    + (self.group0()[2] * other.group0()[0])
                    + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group0()[3] * other.group0()[3])),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])
                    + (self.group0()[3] * other.group1()[0])
                    + (self.group1()[0] * other.group0()[3])
                    + (self.group1()[1] * other.group0()[2])
                    - (self.group1()[2] * other.group0()[1])
                    + (self.group1()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group0()[3] * other.group1()[1])
                    - (self.group1()[0] * other.group0()[2])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group1()[2] * other.group0()[0])
                    + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group0()[3] * other.group1()[2])
                    + (self.group1()[0] * other.group0()[1])
                    - (self.group1()[1] * other.group0()[0])
                    + (self.group1()[2] * other.group0()[3])
                    + (self.group1()[3] * other.group0()[2])),
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])
                    + (self.group0()[3] * other.group1()[3])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])
                    + (self.group1()[3] * other.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<MultiVector> for AntiMotor {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      224      256        0
    fn geometric_anti_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((other.group0()[1] * self.group0()[3])
                    - (other.group7()[0] * self.group1()[0])
                    - (other.group7()[1] * self.group1()[1])
                    - (other.group7()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group6()[0])
                    - (self.group0()[1] * other.group6()[1])
                    - (self.group0()[2] * other.group6()[2])
                    + (self.group1()[3] * other.group1()[3])),
                (-(other.group0()[0] * self.group0()[3])
                    + (other.group4()[0] * self.group1()[0])
                    + (other.group4()[1] * self.group1()[1])
                    + (other.group4()[2] * self.group1()[2])
                    + (other.group5()[0] * self.group0()[0])
                    + (other.group5()[1] * self.group0()[1])
                    + (other.group5()[2] * self.group0()[2])
                    - (self.group1()[3] * other[e45])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group4()[0] * self.group1()[3]) + (other.group4()[1] * self.group1()[2]) - (other.group4()[2] * self.group1()[1])
                    + (self.group0()[0] * other.group3()[3])
                    + (self.group0()[1] * other.group9()[2])
                    - (self.group0()[2] * other.group9()[1])
                    + (self.group0()[3] * other.group9()[0])
                    - (self.group1()[0] * other[e45])),
                (-(other.group4()[0] * self.group1()[2]) - (other.group4()[1] * self.group1()[3]) + (other.group4()[2] * self.group1()[0])
                    - (self.group0()[0] * other.group9()[2])
                    + (self.group0()[1] * other.group3()[3])
                    + (self.group0()[2] * other.group9()[0])
                    + (self.group0()[3] * other.group9()[1])
                    - (self.group1()[1] * other[e45])),
                ((other.group4()[0] * self.group1()[1]) - (other.group4()[1] * self.group1()[0]) - (other.group4()[2] * self.group1()[3]) + (self.group0()[0] * other.group9()[1])
                    - (self.group0()[1] * other.group9()[0])
                    + (self.group0()[2] * other.group3()[3])
                    + (self.group0()[3] * other.group9()[2])
                    - (self.group1()[2] * other[e45])),
                ((other.group4()[0] * self.group0()[0]) + (other.group4()[1] * self.group0()[1]) + (other.group4()[2] * self.group0()[2]) - (self.group0()[3] * other[e45])),
            ]),
            // e5
            (-(other.group0()[0] * self.group1()[3])
                + (other.group5()[0] * self.group1()[0])
                + (other.group5()[1] * self.group1()[1])
                + (other.group5()[2] * self.group1()[2])
                + (self.group0()[0] * other.group3()[0])
                + (self.group0()[1] * other.group3()[1])
                + (self.group0()[2] * other.group3()[2])
                - (self.group0()[3] * other.group9()[3])
                + (self.group1()[0] * other.group9()[0])
                + (self.group1()[1] * other.group9()[1])
                + (self.group1()[2] * other.group9()[2])
                - (self.group1()[3] * other.group3()[3])),
            // e15, e25, e35, e45
            Simd32x4::from([
                ((other.group0()[1] * self.group1()[0]) + (other.group8()[0] * self.group0()[3]) - (other.group8()[1] * self.group0()[2])
                    + (other.group8()[2] * self.group0()[1])
                    + (self.group0()[0] * other[e1])
                    - (self.group1()[0] * other.group6()[3])
                    - (self.group1()[1] * other.group1()[2])
                    + (self.group1()[1] * other.group6()[2])
                    + (self.group1()[2] * other.group1()[1])
                    - (self.group1()[2] * other.group6()[1])
                    - (self.group1()[3] * other.group1()[0])
                    + (self.group1()[3] * other.group6()[0])),
                ((other.group0()[1] * self.group1()[1]) + (other.group8()[0] * self.group0()[2]) + (other.group8()[1] * self.group0()[3]) - (other.group8()[2] * self.group0()[0])
                    + (self.group0()[1] * other[e1])
                    + (self.group1()[0] * other.group1()[2])
                    - (self.group1()[0] * other.group6()[2])
                    - (self.group1()[1] * other.group6()[3])
                    - (self.group1()[2] * other.group1()[0])
                    + (self.group1()[2] * other.group6()[0])
                    - (self.group1()[3] * other.group1()[1])
                    + (self.group1()[3] * other.group6()[1])),
                ((other.group0()[1] * self.group1()[2]) - (other.group8()[0] * self.group0()[1])
                    + (other.group8()[1] * self.group0()[0])
                    + (other.group8()[2] * self.group0()[3])
                    + (self.group0()[2] * other[e1])
                    - (self.group1()[0] * other.group1()[1])
                    + (self.group1()[0] * other.group6()[1])
                    + (self.group1()[1] * other.group1()[0])
                    - (self.group1()[1] * other.group6()[0])
                    - (self.group1()[2] * other.group6()[3])
                    - (self.group1()[3] * other.group1()[2])
                    + (self.group1()[3] * other.group6()[2])),
                ((other.group7()[0] * self.group1()[0])
                    + (other.group7()[1] * self.group1()[1])
                    + (other.group7()[2] * self.group1()[2])
                    + (self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[2])
                    - (self.group0()[3] * other.group6()[3])
                    - (self.group1()[3] * other.group1()[3])),
            ]),
            // e41, e42, e43
            Simd32x3::from([
                ((other.group7()[0] * self.group0()[3]) - (other.group7()[1] * self.group0()[2]) + (other.group7()[2] * self.group0()[1]) + (self.group0()[0] * other.group1()[3])),
                ((other.group7()[0] * self.group0()[2]) + (other.group7()[1] * self.group0()[3]) - (other.group7()[2] * self.group0()[0]) + (self.group0()[1] * other.group1()[3])),
                (-(other.group7()[0] * self.group0()[1])
                    + (other.group7()[1] * self.group0()[0])
                    + (other.group7()[2] * self.group0()[3])
                    + (self.group0()[2] * other.group1()[3])),
            ]),
            // e23, e31, e12
            Simd32x3::from([
                ((other.group0()[1] * self.group0()[0]) + (other.group7()[0] * self.group1()[3]) - (other.group7()[1] * self.group1()[2])
                    + (other.group7()[2] * self.group1()[1])
                    + (self.group0()[1] * other.group6()[2])
                    - (self.group0()[2] * other.group6()[1])
                    + (self.group0()[3] * other.group6()[0])
                    + (self.group1()[0] * other.group1()[3])),
                ((other.group0()[1] * self.group0()[1]) + (other.group7()[0] * self.group1()[2]) + (other.group7()[1] * self.group1()[3])
                    - (other.group7()[2] * self.group1()[0])
                    - (self.group0()[0] * other.group6()[2])
                    + (self.group0()[2] * other.group6()[0])
                    + (self.group0()[3] * other.group6()[1])
                    + (self.group1()[1] * other.group1()[3])),
                ((other.group0()[1] * self.group0()[2]) - (other.group7()[0] * self.group1()[1])
                    + (other.group7()[1] * self.group1()[0])
                    + (other.group7()[2] * self.group1()[3])
                    + (self.group0()[0] * other.group6()[1])
                    - (self.group0()[1] * other.group6()[0])
                    + (self.group0()[3] * other.group6()[2])
                    + (self.group1()[2] * other.group1()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[0]) - (other.group4()[0] * self.group1()[3]) + (other.group4()[1] * self.group1()[2])
                    - (other.group4()[2] * self.group1()[1])
                    - (other.group5()[0] * self.group0()[3])
                    + (other.group5()[1] * self.group0()[2])
                    - (other.group5()[2] * self.group0()[1])
                    - (self.group1()[0] * other[e45])),
                (-(other.group0()[0] * self.group0()[1]) - (other.group4()[0] * self.group1()[2]) - (other.group4()[1] * self.group1()[3])
                    + (other.group4()[2] * self.group1()[0])
                    - (other.group5()[0] * self.group0()[2])
                    - (other.group5()[1] * self.group0()[3])
                    + (other.group5()[2] * self.group0()[0])
                    - (self.group1()[1] * other[e45])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group4()[0] * self.group1()[1])
                    - (other.group4()[1] * self.group1()[0])
                    - (other.group4()[2] * self.group1()[3])
                    + (other.group5()[0] * self.group0()[1])
                    - (other.group5()[1] * self.group0()[0])
                    - (other.group5()[2] * self.group0()[3])
                    - (self.group1()[2] * other[e45])),
                ((other.group4()[0] * self.group1()[0]) + (other.group4()[1] * self.group1()[1]) + (other.group4()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group9()[0])
                    - (self.group0()[1] * other.group9()[1])
                    - (self.group0()[2] * other.group9()[2])
                    + (self.group0()[3] * other.group3()[3])
                    - (self.group1()[3] * other[e45])),
            ]),
            // e423, e431, e412
            Simd32x3::from([
                (-(other.group4()[0] * self.group0()[3]) + (other.group4()[1] * self.group0()[2]) - (other.group4()[2] * self.group0()[1]) - (self.group0()[0] * other[e45])),
                (-(other.group4()[0] * self.group0()[2]) - (other.group4()[1] * self.group0()[3]) + (other.group4()[2] * self.group0()[0]) - (self.group0()[1] * other[e45])),
                ((other.group4()[0] * self.group0()[1]) - (other.group4()[1] * self.group0()[0]) - (other.group4()[2] * self.group0()[3]) - (self.group0()[2] * other[e45])),
            ]),
            // e235, e315, e125
            Simd32x3::from([
                (-(other.group0()[0] * self.group1()[0]) - (other.group5()[0] * self.group1()[3]) + (other.group5()[1] * self.group1()[2])
                    - (other.group5()[2] * self.group1()[1])
                    - (self.group0()[0] * other.group9()[3])
                    - (self.group0()[1] * other.group3()[2])
                    + (self.group0()[2] * other.group3()[1])
                    - (self.group0()[3] * other.group3()[0])
                    - (self.group1()[0] * other.group3()[3])
                    - (self.group1()[1] * other.group9()[2])
                    + (self.group1()[2] * other.group9()[1])
                    - (self.group1()[3] * other.group9()[0])),
                (-(other.group0()[0] * self.group1()[1]) - (other.group5()[0] * self.group1()[2]) - (other.group5()[1] * self.group1()[3])
                    + (other.group5()[2] * self.group1()[0])
                    + (self.group0()[0] * other.group3()[2])
                    - (self.group0()[1] * other.group9()[3])
                    - (self.group0()[2] * other.group3()[0])
                    - (self.group0()[3] * other.group3()[1])
                    + (self.group1()[0] * other.group9()[2])
                    - (self.group1()[1] * other.group3()[3])
                    - (self.group1()[2] * other.group9()[0])
                    - (self.group1()[3] * other.group9()[1])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group5()[0] * self.group1()[1])
                    - (other.group5()[1] * self.group1()[0])
                    - (other.group5()[2] * self.group1()[3])
                    - (self.group0()[0] * other.group3()[1])
                    + (self.group0()[1] * other.group3()[0])
                    - (self.group0()[2] * other.group9()[3])
                    - (self.group0()[3] * other.group3()[2])
                    - (self.group1()[0] * other.group9()[1])
                    + (self.group1()[1] * other.group9()[0])
                    - (self.group1()[2] * other.group3()[3])
                    - (self.group1()[3] * other.group9()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group7()[0] * self.group1()[3]) + (other.group7()[1] * self.group1()[2])
                    - (other.group7()[2] * self.group1()[1])
                    - (self.group0()[0] * other.group6()[3])
                    - (self.group0()[1] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[1])
                    - (self.group0()[3] * other.group1()[0])
                    - (self.group1()[0] * other.group1()[3])),
                (-(other.group7()[0] * self.group1()[2]) - (other.group7()[1] * self.group1()[3])
                    + (other.group7()[2] * self.group1()[0])
                    + (self.group0()[0] * other.group1()[2])
                    - (self.group0()[1] * other.group6()[3])
                    - (self.group0()[2] * other.group1()[0])
                    - (self.group0()[3] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[3])),
                ((other.group7()[0] * self.group1()[1]) - (other.group7()[1] * self.group1()[0]) - (other.group7()[2] * self.group1()[3]) - (self.group0()[0] * other.group1()[1])
                    + (self.group0()[1] * other.group1()[0])
                    - (self.group0()[2] * other.group6()[3])
                    - (self.group0()[3] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[3])),
                ((other.group0()[1] * self.group1()[3]) - (other.group8()[0] * self.group0()[0]) - (other.group8()[1] * self.group0()[1]) - (other.group8()[2] * self.group0()[2])
                    + (self.group0()[3] * other[e1])
                    + (self.group1()[0] * other.group1()[0])
                    - (self.group1()[0] * other.group6()[0])
                    + (self.group1()[1] * other.group1()[1])
                    - (self.group1()[1] * other.group6()[1])
                    + (self.group1()[2] * other.group1()[2])
                    - (self.group1()[2] * other.group6()[2])
                    - (self.group1()[3] * other.group6()[3])),
            ]),
            // e1234
            (-(other.group7()[0] * self.group0()[0]) - (other.group7()[1] * self.group0()[1]) - (other.group7()[2] * self.group0()[2]) + (self.group0()[3] * other.group1()[3])),
        );
    }
}
impl GeometricAntiProduct<Plane> for AntiMotor {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       20       28        0
    fn geometric_anti_product(self, other: Plane) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])
                    - (self.group1()[3] * other.group0()[0])),
                (-(self.group0()[1] * other.group0()[3]) + (self.group1()[0] * other.group0()[2])
                    - (self.group1()[2] * other.group0()[0])
                    - (self.group1()[3] * other.group0()[1])),
                (-(self.group0()[2] * other.group0()[3]) - (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])
                    - (self.group1()[3] * other.group0()[2])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (self.group0()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group0()[3] * other.group0()[2])),
                (-(self.group0()[3] * other.group0()[3])
                    + (self.group1()[0] * other.group0()[0])
                    + (self.group1()[1] * other.group0()[1])
                    + (self.group1()[2] * other.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<RoundPoint> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       24       40        0
    fn geometric_anti_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (self.group1()[3] * other.group0()[3]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other[e2]) - (self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1]) - (self.group1()[3] * other.group0()[0])),
                ((self.group0()[1] * other[e2]) + (self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0]) - (self.group1()[3] * other.group0()[1])),
                ((self.group0()[2] * other[e2]) - (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0]) - (self.group1()[3] * other.group0()[2])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])
                    - (self.group0()[3] * other.group0()[0])
                    - (self.group1()[0] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0]) - (self.group0()[3] * other.group0()[1]) - (self.group1()[1] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])
                    - (self.group0()[3] * other.group0()[2])
                    - (self.group1()[2] * other.group0()[3])),
                ((self.group0()[3] * other[e2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Scalar> for AntiMotor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0       16        0
    fn geometric_anti_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[0] * other[scalar] * -1.0),
                (self.group0()[1] * other[scalar] * -1.0),
                (self.group0()[2] * other[scalar] * -1.0),
                (self.group0()[3] * other[scalar] * -1.0),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group1()[0] * other[scalar] * -1.0),
                (self.group1()[1] * other[scalar] * -1.0),
                (self.group1()[2] * other[scalar] * -1.0),
                (self.group1()[3] * other[scalar] * -1.0),
            ]),
        );
    }
}
impl GeometricAntiProduct<Sphere> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       24       48        0
    fn geometric_anti_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other[e4315] * -1.0),
                (self.group0()[1] * other[e4315] * -1.0),
                (self.group0()[2] * other[e4315] * -1.0),
                (self.group1()[3] * other[e4315] * -1.0),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group1()[0] * other[e4315] * -1.0),
                (self.group1()[1] * other[e4315] * -1.0),
                (self.group1()[2] * other[e4315] * -1.0),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other[e4315])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])
                    - (self.group1()[3] * other.group0()[0])),
                (-(self.group0()[1] * other.group0()[3]) + (self.group1()[0] * other.group0()[2])
                    - (self.group1()[2] * other.group0()[0])
                    - (self.group1()[3] * other.group0()[1])),
                (-(self.group0()[2] * other.group0()[3]) - (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])
                    - (self.group1()[3] * other.group0()[2])),
                (-(self.group0()[3] * other.group0()[3])
                    + (self.group1()[0] * other.group0()[0])
                    + (self.group1()[1] * other.group0()[1])
                    + (self.group1()[2] * other.group0()[2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (self.group0()[3] * other.group0()[0]) - (self.group1()[0] * other[e4315])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0]) + (self.group0()[3] * other.group0()[1]) - (self.group1()[1] * other[e4315])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group0()[3] * other.group0()[2]) - (self.group1()[2] * other[e4315])),
                (self.group0()[3] * other[e4315] * -1.0),
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorEven> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      112      128        0
    fn geometric_anti_product(self, other: VersorEven) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (self.group0()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[2])
                    + (self.group0()[1] * other.group3()[3])
                    + (self.group0()[2] * other.group0()[0])
                    + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group3()[3]) + (self.group0()[3] * other.group0()[2])),
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])
                    + (self.group0()[3] * other.group0()[3])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])
                    + (self.group1()[3] * other.group3()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])
                    + (self.group0()[3] * other.group1()[0])
                    + (self.group1()[0] * other.group3()[3])
                    + (self.group1()[1] * other.group0()[2])
                    - (self.group1()[2] * other.group0()[1])
                    + (self.group1()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group0()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group0()[3] * other.group1()[1])
                    - (self.group1()[0] * other.group0()[2])
                    + (self.group1()[1] * other.group3()[3])
                    + (self.group1()[2] * other.group0()[0])
                    + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])
                    + (self.group0()[2] * other.group0()[3])
                    + (self.group0()[3] * other.group1()[2])
                    + (self.group1()[0] * other.group0()[1])
                    - (self.group1()[1] * other.group0()[0])
                    + (self.group1()[2] * other.group3()[3])
                    + (self.group1()[3] * other.group0()[2])),
                ((self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group3()[1]) + (self.group0()[2] * other.group3()[2]) - (self.group0()[3] * other.group1()[3])
                    + (self.group1()[0] * other.group0()[0])
                    + (self.group1()[1] * other.group0()[1])
                    + (self.group1()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group3()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])
                    + (self.group0()[3] * other.group2()[0])
                    + (self.group1()[0] * other.group0()[3])
                    - (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[1] * other.group3()[2])
                    - (self.group1()[2] * other.group1()[1])
                    + (self.group1()[2] * other.group3()[1])
                    + (self.group1()[3] * other.group1()[0])
                    - (self.group1()[3] * other.group3()[0])),
                (-(self.group0()[0] * other.group2()[2])
                    + (self.group0()[1] * other.group2()[3])
                    + (self.group0()[2] * other.group2()[0])
                    + (self.group0()[3] * other.group2()[1])
                    - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[0] * other.group3()[2])
                    + (self.group1()[1] * other.group0()[3])
                    - (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group1()[0])
                    - (self.group1()[2] * other.group3()[0])
                    + (self.group1()[3] * other.group1()[1])
                    - (self.group1()[3] * other.group3()[1])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0])
                    + (self.group0()[2] * other.group2()[3])
                    + (self.group0()[3] * other.group2()[2])
                    + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[0] * other.group3()[1])
                    - (self.group1()[1] * other.group1()[0])
                    + (self.group1()[1] * other.group3()[0])
                    + (self.group1()[2] * other.group0()[3])
                    - (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])
                    - (self.group1()[3] * other.group3()[2])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group0()[3] * other.group3()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group3()[2]) + (self.group0()[2] * other.group3()[1])
                    - (self.group0()[3] * other.group3()[0])
                    - (self.group1()[0] * other.group3()[3])
                    - (self.group1()[1] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[1])
                    - (self.group1()[3] * other.group0()[0])),
                ((self.group0()[0] * other.group3()[2]) - (self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group3()[0]) - (self.group0()[3] * other.group3()[1])
                    + (self.group1()[0] * other.group0()[2])
                    - (self.group1()[1] * other.group3()[3])
                    - (self.group1()[2] * other.group0()[0])
                    - (self.group1()[3] * other.group0()[1])),
                (-(self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group3()[0])
                    - (self.group0()[2] * other.group1()[3])
                    - (self.group0()[3] * other.group3()[2])
                    - (self.group1()[0] * other.group0()[1])
                    + (self.group1()[1] * other.group0()[0])
                    - (self.group1()[2] * other.group3()[3])
                    - (self.group1()[3] * other.group0()[2])),
                (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])
                    + (self.group0()[3] * other.group2()[3])
                    - (self.group1()[0] * other.group1()[0])
                    + (self.group1()[0] * other.group3()[0])
                    - (self.group1()[1] * other.group1()[1])
                    + (self.group1()[1] * other.group3()[1])
                    - (self.group1()[2] * other.group1()[2])
                    + (self.group1()[2] * other.group3()[2])
                    + (self.group1()[3] * other.group0()[3])
                    - (self.group1()[3] * other.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorOdd> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      112      128        0
    fn geometric_anti_product(self, other: VersorOdd) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])
                    - (self.group0()[3] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group2()[3]) - (self.group0()[2] * other.group0()[0]) - (self.group0()[3] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])
                    - (self.group0()[2] * other.group2()[3])
                    - (self.group0()[3] * other.group0()[2])),
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1]) + (self.group0()[2] * other.group1()[2]) - (self.group0()[3] * other.group0()[3])
                    + (self.group1()[0] * other.group0()[0])
                    + (self.group1()[1] * other.group0()[1])
                    + (self.group1()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group2()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])
                    - (self.group0()[3] * other.group1()[0])
                    - (self.group1()[0] * other.group2()[3])
                    - (self.group1()[1] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[1])
                    - (self.group1()[3] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group0()[3]) - (self.group0()[2] * other.group1()[0]) - (self.group0()[3] * other.group1()[1])
                    + (self.group1()[0] * other.group0()[2])
                    - (self.group1()[1] * other.group2()[3])
                    - (self.group1()[2] * other.group0()[0])
                    - (self.group1()[3] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])
                    - (self.group0()[2] * other.group0()[3])
                    - (self.group0()[3] * other.group1()[2])
                    - (self.group1()[0] * other.group0()[1])
                    + (self.group1()[1] * other.group0()[0])
                    - (self.group1()[2] * other.group2()[3])
                    - (self.group1()[3] * other.group0()[2])),
                (-(self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group3()[1]) - (self.group0()[2] * other.group3()[2])
                    + (self.group0()[3] * other.group1()[3])
                    + (self.group1()[0] * other.group0()[0])
                    + (self.group1()[1] * other.group0()[1])
                    + (self.group1()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group2()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group0()[0] * other.group3()[3]) - (self.group0()[1] * other.group2()[2]) + (self.group0()[2] * other.group2()[1])
                    - (self.group0()[3] * other.group2()[0])
                    - (self.group1()[0] * other.group0()[3])
                    - (self.group1()[0] * other.group1()[3])
                    - (self.group1()[1] * other.group1()[2])
                    - (self.group1()[1] * other.group3()[2])
                    + (self.group1()[2] * other.group1()[1])
                    + (self.group1()[2] * other.group3()[1])
                    - (self.group1()[3] * other.group1()[0])
                    - (self.group1()[3] * other.group3()[0])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[1] * other.group3()[3]) - (self.group0()[2] * other.group2()[0]) - (self.group0()[3] * other.group2()[1])
                    + (self.group1()[0] * other.group1()[2])
                    + (self.group1()[0] * other.group3()[2])
                    - (self.group1()[1] * other.group0()[3])
                    - (self.group1()[1] * other.group1()[3])
                    - (self.group1()[2] * other.group1()[0])
                    - (self.group1()[2] * other.group3()[0])
                    - (self.group1()[3] * other.group1()[1])
                    - (self.group1()[3] * other.group3()[1])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[0])
                    - (self.group0()[2] * other.group3()[3])
                    - (self.group0()[3] * other.group2()[2])
                    - (self.group1()[0] * other.group1()[1])
                    - (self.group1()[0] * other.group3()[1])
                    + (self.group1()[1] * other.group1()[0])
                    + (self.group1()[1] * other.group3()[0])
                    - (self.group1()[2] * other.group0()[3])
                    - (self.group1()[2] * other.group1()[3])
                    - (self.group1()[3] * other.group1()[2])
                    - (self.group1()[3] * other.group3()[2])),
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group2()[1]) + (self.group0()[2] * other.group2()[2]) - (self.group0()[3] * other.group3()[3])
                    + (self.group1()[0] * other.group1()[0])
                    + (self.group1()[0] * other.group3()[0])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[1] * other.group3()[1])
                    + (self.group1()[2] * other.group1()[2])
                    + (self.group1()[2] * other.group3()[2])
                    - (self.group1()[3] * other.group0()[3])
                    - (self.group1()[3] * other.group1()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group3()[2]) - (self.group0()[2] * other.group3()[1]) + (self.group0()[3] * other.group3()[0])
                    - (self.group1()[0] * other.group2()[3])
                    - (self.group1()[1] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[1])
                    - (self.group1()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group3()[0])
                    + (self.group0()[3] * other.group3()[1])
                    + (self.group1()[0] * other.group0()[2])
                    - (self.group1()[1] * other.group2()[3])
                    - (self.group1()[2] * other.group0()[0])
                    - (self.group1()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group3()[0]) + (self.group0()[2] * other.group1()[3]) + (self.group0()[3] * other.group3()[2])
                    - (self.group1()[0] * other.group0()[1])
                    + (self.group1()[1] * other.group0()[0])
                    - (self.group1()[2] * other.group2()[3])
                    - (self.group1()[3] * other.group0()[2])),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) - (self.group0()[3] * other.group2()[3])),
            ]),
        );
    }
}
impl InfixGeometricAntiProduct for AntiPlane {}
impl GeometricAntiProduct<AntiCircleRotor> for AntiPlane {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       29       44        0
    fn geometric_anti_product(self, other: AntiCircleRotor) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group1()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[3]) - (other.group1()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group0()[3]) - (other.group1()[3] * self.group0()[2])),
                ((other.group1()[0] * self.group0()[0]) + (other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group1()[0] * self.group0()[3]) - (other.group2()[1] * self.group0()[2]) + (other.group2()[2] * self.group0()[1])),
                ((other.group1()[1] * self.group0()[3]) + (other.group2()[0] * self.group0()[2]) - (other.group2()[2] * self.group0()[0])),
                ((other.group1()[2] * self.group0()[3]) - (other.group2()[0] * self.group0()[1]) + (other.group2()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) + (other.group1()[1] * self.group0()[2])
                    - (other.group1()[2] * self.group0()[1])
                    - (other.group2()[3] * self.group0()[0])),
                (-(other.group0()[1] * self.group0()[3]) - (other.group1()[0] * self.group0()[2]) + (other.group1()[2] * self.group0()[0])
                    - (other.group2()[3] * self.group0()[1])),
                (-(other.group0()[2] * self.group0()[3]) + (other.group1()[0] * self.group0()[1])
                    - (other.group1()[1] * self.group0()[0])
                    - (other.group2()[3] * self.group0()[2])),
                ((other.group1()[3] * self.group0()[3]) - (other.group2()[0] * self.group0()[0]) - (other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2])
                    + (other.group2()[3] * self.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDipoleInversion> for AntiPlane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       44       60        0
    fn geometric_anti_product(self, other: AntiDipoleInversion) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) - (other.group2()[3] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0]) - (other.group2()[3] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) - (other.group2()[3] * self.group0()[2])),
                ((other.group2()[3] * self.group0()[3]) - (other.group3()[0] * self.group0()[0]) - (other.group3()[1] * self.group0()[1]) - (other.group3()[2] * self.group0()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group1()[3] * self.group0()[0]) - (other.group3()[1] * self.group0()[2]) + (other.group3()[2] * self.group0()[1])),
                ((other.group0()[1] * self.group0()[3]) + (other.group1()[3] * self.group0()[1]) + (other.group3()[0] * self.group0()[2]) - (other.group3()[2] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[3]) + (other.group1()[3] * self.group0()[2]) - (other.group3()[0] * self.group0()[1]) + (other.group3()[1] * self.group0()[0])),
                (-(other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])
                    + (other.group2()[3] * self.group0()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((other.group1()[0] * self.group0()[3]) - (other.group2()[1] * self.group0()[2]) + (other.group2()[2] * self.group0()[1]) - (other.group3()[0] * self.group0()[3])
                    + (other.group3()[3] * self.group0()[0])),
                ((other.group1()[1] * self.group0()[3]) + (other.group2()[0] * self.group0()[2]) - (other.group2()[2] * self.group0()[0]) - (other.group3()[1] * self.group0()[3])
                    + (other.group3()[3] * self.group0()[1])),
                ((other.group1()[2] * self.group0()[3]) - (other.group2()[0] * self.group0()[1]) + (other.group2()[1] * self.group0()[0]) - (other.group3()[2] * self.group0()[3])
                    + (other.group3()[3] * self.group0()[2])),
                (-(other.group1()[3] * self.group0()[3])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[1] * self.group0()[3]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[3]) - (other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum> for AntiPlane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0       16        0
    fn geometric_anti_product(self, other: AntiDualNum) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                (other.group0()[0] * self.group0()[3]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group0()[3] * -1.0)]),
            // e15, e25, e35, e1234
            Simd32x4::from(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0] * -1.0),
                (other.group0()[1] * self.group0()[1] * -1.0),
                (other.group0()[1] * self.group0()[2] * -1.0),
                (other.group0()[1] * self.group0()[3]),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiFlatPoint> for AntiPlane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       13        0
    fn geometric_anti_product(self, other: AntiFlatPoint) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (other.group0()[3] * self.group0()[0]),
                (other.group0()[3] * self.group0()[1]),
                (other.group0()[3] * self.group0()[2]),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group0()[3] * self.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiFlector> for AntiPlane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       20       28        0
    fn geometric_anti_product(self, other: AntiFlector) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                ((other.group0()[3] * self.group0()[0]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[3] * self.group0()[1]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])),
                ((other.group0()[3] * self.group0()[2]) - (other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0])),
                (-(other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) - (other.group1()[0] * self.group0()[3])
                    + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) - (other.group1()[1] * self.group0()[3]) + (other.group1()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) - (other.group1()[2] * self.group0()[3])
                    + (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group0()[3] * self.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiLine> for AntiPlane {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       13       21        0
    fn geometric_anti_product(self, other: AntiLine) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[1] * self.group0()[3]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[3]) - (other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
                (-(other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiMotor> for AntiPlane {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       20       28        0
    fn geometric_anti_product(self, other: AntiMotor) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1]) + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[3]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0]) + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group0()[3]) - (other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0]) + (other.group1()[3] * self.group0()[2])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) - (other.group0()[3] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0]) - (other.group0()[3] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) - (other.group0()[3] * self.group0()[2])),
                ((other.group0()[3] * self.group0()[3]) - (other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiPlane> for AntiPlane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       15        0
    fn geometric_anti_product(self, other: AntiPlane) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) + (other.group0()[3] * self.group0()[0])),
                (-(other.group0()[1] * self.group0()[3]) + (other.group0()[3] * self.group0()[1])),
                (-(other.group0()[2] * self.group0()[3]) + (other.group0()[3] * self.group0()[2])),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiScalar> for AntiPlane {
    type Output = AntiPlane;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        4        0
    fn geometric_anti_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from([
            (self.group0()[0] * other[e12345]),
            (self.group0()[1] * other[e12345]),
            (self.group0()[2] * other[e12345]),
            (self.group0()[3] * other[e12345]),
        ]));
    }
}
impl GeometricAntiProduct<Circle> for AntiPlane {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       25       40        0
    fn geometric_anti_product(self, other: Circle) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (self.group0()[0] * other.group1()[3])),
                ((other.group0()[1] * self.group0()[3]) + (self.group0()[1] * other.group1()[3])),
                ((other.group0()[2] * self.group0()[3]) + (self.group0()[2] * other.group1()[3])),
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (-(other.group2()[1] * self.group0()[2]) + (other.group2()[2] * self.group0()[1]) + (self.group0()[3] * other.group1()[0])),
                ((other.group2()[0] * self.group0()[2]) - (other.group2()[2] * self.group0()[0]) + (self.group0()[3] * other.group1()[1])),
                (-(other.group2()[0] * self.group0()[1]) + (other.group2()[1] * self.group0()[0]) + (self.group0()[3] * other.group1()[2])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                ((other.group0()[1] * self.group0()[3]) - (self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                ((other.group0()[2] * self.group0()[3]) + (self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                (-(other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    - (self.group0()[3] * other.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<CircleRotor> for AntiPlane {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       29       44        0
    fn geometric_anti_product(self, other: CircleRotor) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (self.group0()[0] * other.group1()[3])),
                ((other.group0()[1] * self.group0()[3]) + (self.group0()[1] * other.group1()[3])),
                ((other.group0()[2] * self.group0()[3]) + (self.group0()[2] * other.group1()[3])),
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1]) + (self.group0()[3] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[2] * other.group2()[0]) + (self.group0()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) + (self.group0()[3] * other.group1()[2])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                ((other.group0()[1] * self.group0()[3]) - (self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group2()[3]) + (self.group0()[2] * other.group1()[0])),
                ((other.group0()[2] * self.group0()[3]) + (self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group2()[3])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group0()[3] * other.group1()[3])
                    + (self.group0()[3] * other.group2()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Dipole> for AntiPlane {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       25       40        0
    fn geometric_anti_product(self, other: Dipole) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (self.group0()[0] * other.group1()[3])),
                ((other.group0()[1] * self.group0()[3]) - (self.group0()[1] * other.group1()[3])),
                ((other.group0()[2] * self.group0()[3]) - (self.group0()[2] * other.group1()[3])),
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1]) + (self.group0()[2] * other.group1()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group2()[1] * self.group0()[2]) + (other.group2()[2] * self.group0()[1]) + (self.group0()[3] * other.group1()[0])),
                ((other.group2()[0] * self.group0()[2]) - (other.group2()[2] * self.group0()[0]) + (self.group0()[3] * other.group1()[1])),
                (-(other.group2()[0] * self.group0()[1]) + (other.group2()[1] * self.group0()[0]) + (self.group0()[3] * other.group1()[2])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])),
                (-(other.group0()[1] * self.group0()[3]) + (self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0])),
                (-(other.group0()[2] * self.group0()[3]) - (self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
                (-(other.group2()[0] * self.group0()[0]) - (other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2])
                    + (self.group0()[3] * other.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<DipoleInversion> for AntiPlane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       44       60        0
    fn geometric_anti_product(self, other: DipoleInversion) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) - (self.group0()[0] * other.group2()[3])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0]) - (self.group0()[1] * other.group2()[3])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) - (self.group0()[2] * other.group2()[3])),
                ((self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group3()[1]) + (self.group0()[2] * other.group3()[2]) + (self.group0()[3] * other.group2()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group3()[2]) + (self.group0()[2] * other.group3()[1])),
                ((other.group0()[1] * self.group0()[3]) + (self.group0()[0] * other.group3()[2]) - (self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group3()[0])),
                ((other.group0()[2] * self.group0()[3]) - (self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group3()[0]) - (self.group0()[2] * other.group1()[3])),
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1]) + (self.group0()[2] * other.group1()[2]) - (self.group0()[3] * other.group2()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])
                    + (self.group0()[3] * other.group1()[0])
                    + (self.group0()[3] * other.group3()[0])),
                (-(self.group0()[0] * other.group2()[2])
                    + (self.group0()[1] * other.group3()[3])
                    + (self.group0()[2] * other.group2()[0])
                    + (self.group0()[3] * other.group1()[1])
                    + (self.group0()[3] * other.group3()[1])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0])
                    + (self.group0()[2] * other.group3()[3])
                    + (self.group0()[3] * other.group1()[2])
                    + (self.group0()[3] * other.group3()[2])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])),
                (-(other.group0()[1] * self.group0()[3]) + (self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0])),
                (-(other.group0()[2] * self.group0()[3]) - (self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])
                    + (self.group0()[3] * other.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<DualNum> for AntiPlane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0       12        0
    fn geometric_anti_product(self, other: DualNum) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                (other.group0()[0] * self.group0()[3]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group0()[3])]),
            // e235, e315, e125, e5
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[1] * self.group0()[3])]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<FlatPoint> for AntiPlane {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       16        0
    fn geometric_anti_product(self, other: FlatPoint) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                0.0,
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group0()[3] * other.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Flector> for AntiPlane {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       20       28        0
    fn geometric_anti_product(self, other: Flector) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group0()[3]) - (self.group0()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group0()[3])),
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1]) + (self.group0()[2] * other.group1()[2])),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (self.group0()[3] * other.group1()[0])),
                (-(self.group0()[0] * other.group0()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group0()[0])
                    + (self.group0()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group1()[3]) + (self.group0()[3] * other.group1()[2])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group0()[3] * other.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Line> for AntiPlane {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       13       21        0
    fn geometric_anti_product(self, other: Line) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[1] * self.group0()[3]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[3]) - (other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
                (-(other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Motor> for AntiPlane {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       20       28        0
    fn geometric_anti_product(self, other: Motor) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) + (self.group0()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[3]) + (self.group0()[3] * other.group0()[2])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[3]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])
                    + (self.group0()[3] * other.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<MultiVector> for AntiPlane {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       96      128        0
    fn geometric_anti_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((self.group0()[0] * other.group9()[0]) + (self.group0()[1] * other.group9()[1]) + (self.group0()[2] * other.group9()[2]) + (self.group0()[3] * other[e45])),
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])
                    + (self.group0()[3] * other.group1()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[0]) + (other.group7()[0] * self.group0()[3]) + (self.group0()[1] * other.group6()[2]) - (self.group0()[2] * other.group6()[1])),
                ((other.group0()[1] * self.group0()[1]) + (other.group7()[1] * self.group0()[3]) - (self.group0()[0] * other.group6()[2]) + (self.group0()[2] * other.group6()[0])),
                ((other.group0()[1] * self.group0()[2]) + (other.group7()[2] * self.group0()[3]) + (self.group0()[0] * other.group6()[1]) - (self.group0()[1] * other.group6()[0])),
                ((other.group7()[0] * self.group0()[0]) + (other.group7()[1] * self.group0()[1]) + (other.group7()[2] * self.group0()[2])),
            ]),
            // e5
            ((other.group0()[1] * self.group0()[3])
                - (other.group8()[0] * self.group0()[0])
                - (other.group8()[1] * self.group0()[1])
                - (other.group8()[2] * self.group0()[2])
                - (self.group0()[3] * other.group6()[3])),
            // e15, e25, e35, e45
            Simd32x4::from([
                ((other.group5()[0] * self.group0()[3]) + (self.group0()[0] * other.group9()[3]) + (self.group0()[1] * other.group3()[2]) - (self.group0()[2] * other.group3()[1])
                    + (self.group0()[3] * other.group9()[0])),
                ((other.group5()[1] * self.group0()[3]) - (self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group9()[3])
                    + (self.group0()[2] * other.group3()[0])
                    + (self.group0()[3] * other.group9()[1])),
                ((other.group5()[2] * self.group0()[3]) + (self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group9()[3])
                    + (self.group0()[3] * other.group9()[2])),
                ((other.group5()[0] * self.group0()[0]) + (other.group5()[1] * self.group0()[1]) + (other.group5()[2] * self.group0()[2]) - (self.group0()[3] * other[e45])),
            ]),
            // e41, e42, e43
            Simd32x3::from([
                ((other.group4()[1] * self.group0()[2]) - (other.group4()[2] * self.group0()[1]) - (self.group0()[0] * other[e45])),
                (-(other.group4()[0] * self.group0()[2]) + (other.group4()[2] * self.group0()[0]) - (self.group0()[1] * other[e45])),
                ((other.group4()[0] * self.group0()[1]) - (other.group4()[1] * self.group0()[0]) - (self.group0()[2] * other[e45])),
            ]),
            // e23, e31, e12
            Simd32x3::from([
                ((other.group4()[0] * self.group0()[3]) - (self.group0()[0] * other.group3()[3]) - (self.group0()[1] * other.group9()[2]) + (self.group0()[2] * other.group9()[1])),
                ((other.group4()[1] * self.group0()[3]) + (self.group0()[0] * other.group9()[2]) - (self.group0()[1] * other.group3()[3]) - (self.group0()[2] * other.group9()[0])),
                ((other.group4()[2] * self.group0()[3]) - (self.group0()[0] * other.group9()[1]) + (self.group0()[1] * other.group9()[0]) - (self.group0()[2] * other.group3()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group7()[0] * self.group0()[3]) + (self.group0()[0] * other.group6()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                ((other.group7()[1] * self.group0()[3]) - (self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group6()[3]) + (self.group0()[2] * other.group1()[0])),
                ((other.group7()[2] * self.group0()[3]) + (self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group6()[3])),
                (-(self.group0()[0] * other.group6()[0]) - (self.group0()[1] * other.group6()[1]) - (self.group0()[2] * other.group6()[2])
                    + (self.group0()[3] * other.group1()[3])),
            ]),
            // e423, e431, e412
            Simd32x3::from([
                ((other.group7()[1] * self.group0()[2]) - (other.group7()[2] * self.group0()[1]) - (self.group0()[0] * other.group1()[3])),
                (-(other.group7()[0] * self.group0()[2]) + (other.group7()[2] * self.group0()[0]) - (self.group0()[1] * other.group1()[3])),
                ((other.group7()[0] * self.group0()[1]) - (other.group7()[1] * self.group0()[0]) - (self.group0()[2] * other.group1()[3])),
            ]),
            // e235, e315, e125
            Simd32x3::from([
                (-(other.group8()[1] * self.group0()[2]) + (other.group8()[2] * self.group0()[1]) + (self.group0()[0] * other[e1]) - (self.group0()[3] * other.group1()[0])
                    + (self.group0()[3] * other.group6()[0])),
                ((other.group8()[0] * self.group0()[2]) - (other.group8()[2] * self.group0()[0]) + (self.group0()[1] * other[e1]) - (self.group0()[3] * other.group1()[1])
                    + (self.group0()[3] * other.group6()[1])),
                (-(other.group8()[0] * self.group0()[1]) + (other.group8()[1] * self.group0()[0]) + (self.group0()[2] * other[e1]) - (self.group0()[3] * other.group1()[2])
                    + (self.group0()[3] * other.group6()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[0]) - (other.group4()[0] * self.group0()[3]) + (other.group5()[1] * self.group0()[2])
                    - (other.group5()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[1]) - (other.group4()[1] * self.group0()[3]) - (other.group5()[0] * self.group0()[2])
                    + (other.group5()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group4()[2] * self.group0()[3]) + (other.group5()[0] * self.group0()[1])
                    - (other.group5()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[3]) - (self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group3()[1]) - (self.group0()[2] * other.group3()[2])
                    + (self.group0()[3] * other.group3()[3])),
            ]),
            // e1234
            ((other.group4()[0] * self.group0()[0]) + (other.group4()[1] * self.group0()[1]) + (other.group4()[2] * self.group0()[2])),
        );
    }
}
impl GeometricAntiProduct<Plane> for AntiPlane {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       15        0
    fn geometric_anti_product(self, other: Plane) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<RoundPoint> for AntiPlane {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        9       23        0
    fn geometric_anti_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e235, e315, e125, e12345
            Simd32x4::from([
                ((self.group0()[0] * other[e2]) - (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other[e2]) - (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other[e2]) - (self.group0()[3] * other.group0()[2])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group0()[3] * other.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Scalar> for AntiPlane {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        7        0
    fn geometric_anti_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group0()[0] * other[scalar] * -1.0),
            (self.group0()[1] * other[scalar] * -1.0),
            (self.group0()[2] * other[scalar] * -1.0),
            (self.group0()[3] * other[scalar]),
        ]));
    }
}
impl GeometricAntiProduct<Sphere> for AntiPlane {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        9       24        0
    fn geometric_anti_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from([
                (self.group0()[0] * other[e4315] * -1.0),
                (self.group0()[1] * other[e4315] * -1.0),
                (self.group0()[2] * other[e4315] * -1.0),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other[e4315] * -1.0),
            ]),
            // e15, e25, e35, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other[e4315])),
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorEven> for AntiPlane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       48       64        0
    fn geometric_anti_product(self, other: VersorEven) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[0] * other.group3()[3]) - (self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group3()[3]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group3()[3])),
                (-(self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group3()[1]) - (self.group0()[2] * other.group3()[2])
                    + (self.group0()[3] * other.group3()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group3()[2]) - (self.group0()[2] * other.group3()[1]) + (self.group0()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group3()[0])
                    + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group3()[0]) + (self.group0()[2] * other.group1()[3]) + (self.group0()[3] * other.group0()[2])),
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])
                    + (self.group0()[3] * other.group3()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1]) + (self.group0()[3] * other.group1()[0])
                    - (self.group0()[3] * other.group3()[0])),
                (-(self.group0()[0] * other.group2()[2])
                    + (self.group0()[1] * other.group2()[3])
                    + (self.group0()[2] * other.group2()[0])
                    + (self.group0()[3] * other.group1()[1])
                    - (self.group0()[3] * other.group3()[1])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) + (self.group0()[2] * other.group2()[3]) + (self.group0()[3] * other.group1()[2])
                    - (self.group0()[3] * other.group3()[2])),
                (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])
                    + (self.group0()[3] * other.group0()[3])
                    - (self.group0()[3] * other.group1()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) + (self.group0()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group0()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorOdd> for AntiPlane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       48       64        0
    fn geometric_anti_product(self, other: VersorOdd) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group2()[3]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group2()[3])),
                ((self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group3()[1]) + (self.group0()[2] * other.group3()[2]) + (self.group0()[3] * other.group2()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group3()[2])
                    + (self.group0()[2] * other.group3()[1])
                    + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[0] * other.group3()[2]) - (self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group3()[0]) + (self.group0()[3] * other.group0()[1])),
                (-(self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group3()[0]) - (self.group0()[2] * other.group1()[3])
                    + (self.group0()[3] * other.group0()[2])),
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1]) + (self.group0()[2] * other.group1()[2]) - (self.group0()[3] * other.group2()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])
                    + (self.group0()[3] * other.group1()[0])
                    + (self.group0()[3] * other.group3()[0])),
                (-(self.group0()[0] * other.group2()[2])
                    + (self.group0()[1] * other.group3()[3])
                    + (self.group0()[2] * other.group2()[0])
                    + (self.group0()[3] * other.group1()[1])
                    + (self.group0()[3] * other.group3()[1])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0])
                    + (self.group0()[2] * other.group3()[3])
                    + (self.group0()[3] * other.group1()[2])
                    + (self.group0()[3] * other.group3()[2])),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])
                    - (self.group0()[3] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group0()[3]) - (self.group0()[2] * other.group1()[0]) - (self.group0()[3] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])
                    - (self.group0()[2] * other.group0()[3])
                    - (self.group0()[3] * other.group0()[2])),
                (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])
                    + (self.group0()[3] * other.group0()[3])
                    + (self.group0()[3] * other.group1()[3])),
            ]),
        );
    }
}
impl InfixGeometricAntiProduct for AntiScalar {}
impl GeometricAntiProduct<AntiCircleRotor> for AntiScalar {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0       11        0
    fn geometric_anti_product(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from([(other.group0()[0] * self[e12345]), (other.group0()[1] * self[e12345]), (other.group0()[2] * self[e12345])]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other.group1()[0] * self[e12345]),
                (other.group1()[1] * self[e12345]),
                (other.group1()[2] * self[e12345]),
                (other.group1()[3] * self[e12345]),
            ]),
            // e15, e25, e35, scalar
            Simd32x4::from([
                (other.group2()[0] * self[e12345]),
                (other.group2()[1] * self[e12345]),
                (other.group2()[2] * self[e12345]),
                (other.group2()[3] * self[e12345]),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDipoleInversion> for AntiScalar {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0       15        0
    fn geometric_anti_product(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from([(other.group0()[0] * self[e12345]), (other.group0()[1] * self[e12345]), (other.group0()[2] * self[e12345])]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other.group1()[0] * self[e12345]),
                (other.group1()[1] * self[e12345]),
                (other.group1()[2] * self[e12345]),
                (other.group1()[3] * self[e12345]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (other.group2()[0] * self[e12345]),
                (other.group2()[1] * self[e12345]),
                (other.group2()[2] * self[e12345]),
                (other.group2()[3] * self[e12345]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group3()[0] * self[e12345]),
                (other.group3()[1] * self[e12345]),
                (other.group3()[2] * self[e12345]),
                (other.group3()[3] * self[e12345]),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum> for AntiScalar {
    type Output = AntiDualNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn geometric_anti_product(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return AntiDualNum::from_groups(/* e1234, scalar */ Simd32x2::from([(other.group0()[0] * self[e12345]), (other.group0()[1] * self[e12345])]));
    }
}
impl GeometricAntiProduct<AntiFlatPoint> for AntiScalar {
    type Output = AntiFlatPoint;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        4        0
    fn geometric_anti_product(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiFlatPoint::from_groups(/* e235, e315, e125, e321 */ Simd32x4::from([
            (other.group0()[0] * self[e12345]),
            (other.group0()[1] * self[e12345]),
            (other.group0()[2] * self[e12345]),
            (other.group0()[3] * self[e12345]),
        ]));
    }
}
impl GeometricAntiProduct<AntiFlector> for AntiScalar {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        8        0
    fn geometric_anti_product(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (other.group0()[0] * self[e12345]),
                (other.group0()[1] * self[e12345]),
                (other.group0()[2] * self[e12345]),
                (other.group0()[3] * self[e12345]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group1()[0] * self[e12345]),
                (other.group1()[1] * self[e12345]),
                (other.group1()[2] * self[e12345]),
                (other.group1()[3] * self[e12345]),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiLine> for AntiScalar {
    type Output = AntiLine;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        6        0
    fn geometric_anti_product(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from([(other.group0()[0] * self[e12345]), (other.group0()[1] * self[e12345]), (other.group0()[2] * self[e12345])]),
            // e15, e25, e35
            Simd32x3::from([(other.group1()[0] * self[e12345]), (other.group1()[1] * self[e12345]), (other.group1()[2] * self[e12345])]),
        );
    }
}
impl GeometricAntiProduct<AntiMotor> for AntiScalar {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        8        0
    fn geometric_anti_product(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (other.group0()[0] * self[e12345]),
                (other.group0()[1] * self[e12345]),
                (other.group0()[2] * self[e12345]),
                (other.group0()[3] * self[e12345]),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (other.group1()[0] * self[e12345]),
                (other.group1()[1] * self[e12345]),
                (other.group1()[2] * self[e12345]),
                (other.group1()[3] * self[e12345]),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiPlane> for AntiScalar {
    type Output = AntiPlane;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        4        0
    fn geometric_anti_product(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from([
            (other.group0()[0] * self[e12345]),
            (other.group0()[1] * self[e12345]),
            (other.group0()[2] * self[e12345]),
            (other.group0()[3] * self[e12345]),
        ]));
    }
}
impl GeometricAntiProduct<AntiScalar> for AntiScalar {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn geometric_anti_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (other[e12345] * self[e12345]));
    }
}
impl GeometricAntiProduct<Circle> for AntiScalar {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0       10        0
    fn geometric_anti_product(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return Circle::from_groups(
            // e423, e431, e412
            Simd32x3::from([(other.group0()[0] * self[e12345]), (other.group0()[1] * self[e12345]), (other.group0()[2] * self[e12345])]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other.group1()[0] * self[e12345]),
                (other.group1()[1] * self[e12345]),
                (other.group1()[2] * self[e12345]),
                (other.group1()[3] * self[e12345]),
            ]),
            // e235, e315, e125
            Simd32x3::from([(other.group2()[0] * self[e12345]), (other.group2()[1] * self[e12345]), (other.group2()[2] * self[e12345])]),
        );
    }
}
impl GeometricAntiProduct<CircleRotor> for AntiScalar {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0       11        0
    fn geometric_anti_product(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from([(other.group0()[0] * self[e12345]), (other.group0()[1] * self[e12345]), (other.group0()[2] * self[e12345])]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other.group1()[0] * self[e12345]),
                (other.group1()[1] * self[e12345]),
                (other.group1()[2] * self[e12345]),
                (other.group1()[3] * self[e12345]),
            ]),
            // e235, e315, e125, e12345
            Simd32x4::from([
                (other.group2()[0] * self[e12345]),
                (other.group2()[1] * self[e12345]),
                (other.group2()[2] * self[e12345]),
                (other.group2()[3] * self[e12345]),
            ]),
        );
    }
}
impl GeometricAntiProduct<Dipole> for AntiScalar {
    type Output = Dipole;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0       10        0
    fn geometric_anti_product(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from([(other.group0()[0] * self[e12345]), (other.group0()[1] * self[e12345]), (other.group0()[2] * self[e12345])]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other.group1()[0] * self[e12345]),
                (other.group1()[1] * self[e12345]),
                (other.group1()[2] * self[e12345]),
                (other.group1()[3] * self[e12345]),
            ]),
            // e15, e25, e35
            Simd32x3::from([(other.group2()[0] * self[e12345]), (other.group2()[1] * self[e12345]), (other.group2()[2] * self[e12345])]),
        );
    }
}
impl GeometricAntiProduct<DipoleInversion> for AntiScalar {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0       15        0
    fn geometric_anti_product(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from([(other.group0()[0] * self[e12345]), (other.group0()[1] * self[e12345]), (other.group0()[2] * self[e12345])]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other.group1()[0] * self[e12345]),
                (other.group1()[1] * self[e12345]),
                (other.group1()[2] * self[e12345]),
                (other.group1()[3] * self[e12345]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group2()[0] * self[e12345]),
                (other.group2()[1] * self[e12345]),
                (other.group2()[2] * self[e12345]),
                (other.group2()[3] * self[e12345]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group3()[0] * self[e12345]),
                (other.group3()[1] * self[e12345]),
                (other.group3()[2] * self[e12345]),
                (other.group3()[3] * self[e12345]),
            ]),
        );
    }
}
impl GeometricAntiProduct<DualNum> for AntiScalar {
    type Output = DualNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn geometric_anti_product(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return DualNum::from_groups(/* e4, e12345 */ Simd32x2::from([(other.group0()[0] * self[e12345]), (other.group0()[1] * self[e12345])]));
    }
}
impl GeometricAntiProduct<FlatPoint> for AntiScalar {
    type Output = FlatPoint;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        4        0
    fn geometric_anti_product(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return FlatPoint::from_groups(/* e15, e25, e35, e45 */ Simd32x4::from([
            (other.group0()[0] * self[e12345]),
            (other.group0()[1] * self[e12345]),
            (other.group0()[2] * self[e12345]),
            (other.group0()[3] * self[e12345]),
        ]));
    }
}
impl GeometricAntiProduct<Flector> for AntiScalar {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        8        0
    fn geometric_anti_product(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (other.group0()[0] * self[e12345]),
                (other.group0()[1] * self[e12345]),
                (other.group0()[2] * self[e12345]),
                (other.group0()[3] * self[e12345]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group1()[0] * self[e12345]),
                (other.group1()[1] * self[e12345]),
                (other.group1()[2] * self[e12345]),
                (other.group1()[3] * self[e12345]),
            ]),
        );
    }
}
impl GeometricAntiProduct<Line> for AntiScalar {
    type Output = Line;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        6        0
    fn geometric_anti_product(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return Line::from_groups(
            // e415, e425, e435
            Simd32x3::from([(other.group0()[0] * self[e12345]), (other.group0()[1] * self[e12345]), (other.group0()[2] * self[e12345])]),
            // e235, e315, e125
            Simd32x3::from([(other.group1()[0] * self[e12345]), (other.group1()[1] * self[e12345]), (other.group1()[2] * self[e12345])]),
        );
    }
}
impl GeometricAntiProduct<Motor> for AntiScalar {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        8        0
    fn geometric_anti_product(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (other.group0()[0] * self[e12345]),
                (other.group0()[1] * self[e12345]),
                (other.group0()[2] * self[e12345]),
                (other.group0()[3] * self[e12345]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other.group1()[0] * self[e12345]),
                (other.group1()[1] * self[e12345]),
                (other.group1()[2] * self[e12345]),
                (other.group1()[3] * self[e12345]),
            ]),
        );
    }
}
impl GeometricAntiProduct<MultiVector> for AntiScalar {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0       32        0
    fn geometric_anti_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([(other.group0()[0] * self[e12345]), (other.group0()[1] * self[e12345])]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group1()[0] * self[e12345]),
                (other.group1()[1] * self[e12345]),
                (other.group1()[2] * self[e12345]),
                (other.group1()[3] * self[e12345]),
            ]),
            // e5
            (self[e12345] * other[e1]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other.group3()[0] * self[e12345]),
                (other.group3()[1] * self[e12345]),
                (other.group3()[2] * self[e12345]),
                (other.group3()[3] * self[e12345]),
            ]),
            // e41, e42, e43
            Simd32x3::from([(other.group4()[0] * self[e12345]), (other.group4()[1] * self[e12345]), (other.group4()[2] * self[e12345])]),
            // e23, e31, e12
            Simd32x3::from([(other.group5()[0] * self[e12345]), (other.group5()[1] * self[e12345]), (other.group5()[2] * self[e12345])]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other.group6()[0] * self[e12345]),
                (other.group6()[1] * self[e12345]),
                (other.group6()[2] * self[e12345]),
                (other.group6()[3] * self[e12345]),
            ]),
            // e423, e431, e412
            Simd32x3::from([(other.group7()[0] * self[e12345]), (other.group7()[1] * self[e12345]), (other.group7()[2] * self[e12345])]),
            // e235, e315, e125
            Simd32x3::from([(other.group8()[0] * self[e12345]), (other.group8()[1] * self[e12345]), (other.group8()[2] * self[e12345])]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group9()[0] * self[e12345]),
                (other.group9()[1] * self[e12345]),
                (other.group9()[2] * self[e12345]),
                (other.group9()[3] * self[e12345]),
            ]),
            // e1234
            (self[e12345] * other[e45]),
        );
    }
}
impl GeometricAntiProduct<Plane> for AntiScalar {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        4        0
    fn geometric_anti_product(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (other.group0()[0] * self[e12345]),
            (other.group0()[1] * self[e12345]),
            (other.group0()[2] * self[e12345]),
            (other.group0()[3] * self[e12345]),
        ]));
    }
}
impl GeometricAntiProduct<RoundPoint> for AntiScalar {
    type Output = RoundPoint;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        5        0
    fn geometric_anti_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return RoundPoint::from_groups(
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[0] * self[e12345]),
                (other.group0()[1] * self[e12345]),
                (other.group0()[2] * self[e12345]),
                (other.group0()[3] * self[e12345]),
            ]),
            // e5
            (self[e12345] * other[e2]),
        );
    }
}
impl GeometricAntiProduct<Scalar> for AntiScalar {
    type Output = Scalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn geometric_anti_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self[e12345] * other[scalar]));
    }
}
impl GeometricAntiProduct<Sphere> for AntiScalar {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        5        0
    fn geometric_anti_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self[e12345]),
                (other.group0()[1] * self[e12345]),
                (other.group0()[2] * self[e12345]),
                (other.group0()[3] * self[e12345]),
            ]),
            // e1234
            (self[e12345] * other[e4315]),
        );
    }
}
impl GeometricAntiProduct<VersorEven> for AntiScalar {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0       16        0
    fn geometric_anti_product(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self[e12345]),
                (other.group0()[1] * self[e12345]),
                (other.group0()[2] * self[e12345]),
                (other.group0()[3] * self[e12345]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other.group1()[0] * self[e12345]),
                (other.group1()[1] * self[e12345]),
                (other.group1()[2] * self[e12345]),
                (other.group1()[3] * self[e12345]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other.group2()[0] * self[e12345]),
                (other.group2()[1] * self[e12345]),
                (other.group2()[2] * self[e12345]),
                (other.group2()[3] * self[e12345]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group3()[0] * self[e12345]),
                (other.group3()[1] * self[e12345]),
                (other.group3()[2] * self[e12345]),
                (other.group3()[3] * self[e12345]),
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorOdd> for AntiScalar {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0       16        0
    fn geometric_anti_product(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self[e12345]),
                (other.group0()[1] * self[e12345]),
                (other.group0()[2] * self[e12345]),
                (other.group0()[3] * self[e12345]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other.group1()[0] * self[e12345]),
                (other.group1()[1] * self[e12345]),
                (other.group1()[2] * self[e12345]),
                (other.group1()[3] * self[e12345]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group2()[0] * self[e12345]),
                (other.group2()[1] * self[e12345]),
                (other.group2()[2] * self[e12345]),
                (other.group2()[3] * self[e12345]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group3()[0] * self[e12345]),
                (other.group3()[1] * self[e12345]),
                (other.group3()[2] * self[e12345]),
                (other.group3()[3] * self[e12345]),
            ]),
        );
    }
}
impl InfixGeometricAntiProduct for Circle {}
impl GeometricAntiProduct<AntiCircleRotor> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       94      110        0
    fn geometric_anti_product(self, other: AntiCircleRotor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1])
                    - (self.group0()[0] * other.group1()[3])
                    + (self.group0()[0] * other.group2()[3])
                    + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])),
                ((other.group0()[0] * self.group1()[2])
                    - (other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group1()[0])
                    - (self.group0()[0] * other.group1()[2])
                    - (self.group0()[1] * other.group1()[3])
                    + (self.group0()[1] * other.group2()[3])
                    + (self.group0()[2] * other.group1()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) - (other.group0()[2] * self.group1()[3])
                    + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])
                    - (self.group0()[2] * other.group1()[3])
                    + (self.group0()[2] * other.group2()[3])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1]) + (self.group0()[1] * other.group2()[2])
                    - (self.group0()[2] * other.group2()[1])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group2()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group2()[0]) - (self.group0()[0] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[0])
                    + (other.group1()[0] * self.group1()[2])
                    - (other.group1()[2] * self.group1()[0])
                    + (other.group2()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) + (self.group0()[0] * other.group2()[1])
                    - (self.group0()[1] * other.group2()[0])
                    - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group2()[3] * self.group1()[2])),
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (other.group2()[3] * self.group1()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group2()[0] * other.group1()[3]) + (self.group2()[0] * other.group2()[3]) + (self.group2()[1] * other.group1()[2]) - (self.group2()[2] * other.group1()[1])
                    + (other.group2()[0] * self.group1()[3])
                    - (other.group2()[1] * self.group1()[2])
                    + (other.group2()[2] * self.group1()[1])),
                (-(self.group2()[0] * other.group1()[2])
                    + (self.group2()[1] * other.group1()[3])
                    + (self.group2()[1] * other.group2()[3])
                    + (self.group2()[2] * other.group1()[0])
                    + (other.group2()[0] * self.group1()[2])
                    + (other.group2()[1] * self.group1()[3])
                    - (other.group2()[2] * self.group1()[0])),
                ((self.group2()[0] * other.group1()[1]) - (self.group2()[1] * other.group1()[0]) + (self.group2()[2] * other.group1()[3]) + (self.group2()[2] * other.group2()[3])
                    - (other.group2()[0] * self.group1()[1])
                    + (other.group2()[1] * self.group1()[0])
                    + (other.group2()[2] * self.group1()[3])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1]) + (self.group0()[1] * other.group2()[2])
                    - (self.group0()[2] * other.group2()[1])
                    - (other.group1()[0] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group0()[2] * self.group2()[0]) - (self.group0()[0] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[0])
                    - (other.group1()[1] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) + (self.group0()[0] * other.group2()[1])
                    - (self.group0()[1] * other.group2()[0])
                    - (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])),
                (-(self.group2()[0] * other.group1()[0])
                    - (self.group2()[1] * other.group1()[1])
                    - (self.group2()[2] * other.group1()[2])
                    - (other.group2()[0] * self.group1()[0])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[2] * self.group1()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDipoleInversion> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      134      150        0
    fn geometric_anti_product(self, other: AntiDipoleInversion) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (self.group0()[0] * other.group1()[3])
                    + (self.group0()[1] * other.group1()[2])
                    + (self.group0()[1] * other.group3()[2])
                    - (self.group0()[2] * other.group1()[1])
                    - (self.group0()[2] * other.group3()[1])
                    + (other.group2()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group1()[2])
                    - (other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group1()[0])
                    - (self.group0()[0] * other.group1()[2])
                    - (self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group0()[2] * other.group3()[0])
                    + (other.group2()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) - (other.group0()[2] * self.group1()[3])
                    + (self.group0()[0] * other.group1()[1])
                    + (self.group0()[0] * other.group3()[1])
                    - (self.group0()[1] * other.group1()[0])
                    - (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (other.group2()[3] * self.group1()[2])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    + (other.group1()[3] * self.group1()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[1])
                    + (self.group0()[0] * other.group3()[3])
                    + (self.group0()[1] * other.group2()[2])
                    - (self.group0()[2] * other.group2()[1])
                    + (self.group2()[0] * other.group2()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group3()[0] * self.group1()[3])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group2()[0]) - (self.group0()[0] * other.group2()[2])
                    + (self.group0()[1] * other.group3()[3])
                    + (self.group0()[2] * other.group2()[0])
                    + (self.group2()[1] * other.group2()[3])
                    + (other.group1()[0] * self.group1()[2])
                    - (other.group1()[2] * self.group1()[0])
                    + (other.group3()[1] * self.group1()[3])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) + (self.group0()[0] * other.group2()[1])
                    - (self.group0()[1] * other.group2()[0])
                    + (self.group0()[2] * other.group3()[3])
                    + (self.group2()[2] * other.group2()[3])
                    - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group3()[2] * self.group1()[3])),
                (-(other.group0()[0] * self.group2()[0]) - (other.group0()[1] * self.group2()[1]) - (other.group0()[2] * self.group2()[2])
                    + (self.group0()[0] * other.group2()[0])
                    + (self.group0()[1] * other.group2()[1])
                    + (self.group0()[2] * other.group2()[2])
                    - (other.group3()[0] * self.group1()[0])
                    - (other.group3()[1] * self.group1()[1])
                    - (other.group3()[2] * self.group1()[2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group2()[0] * other.group1()[3]) + (self.group2()[1] * other.group1()[2])
                    - (self.group2()[1] * other.group3()[2])
                    - (self.group2()[2] * other.group1()[1])
                    + (self.group2()[2] * other.group3()[1])
                    + (other.group2()[0] * self.group1()[3])
                    - (other.group2()[1] * self.group1()[2])
                    + (other.group2()[2] * self.group1()[1])
                    + (other.group3()[3] * self.group1()[0])),
                (-(self.group2()[0] * other.group1()[2]) + (self.group2()[0] * other.group3()[2]) - (self.group2()[1] * other.group1()[3])
                    + (self.group2()[2] * other.group1()[0])
                    - (self.group2()[2] * other.group3()[0])
                    + (other.group2()[0] * self.group1()[2])
                    + (other.group2()[1] * self.group1()[3])
                    - (other.group2()[2] * self.group1()[0])
                    + (other.group3()[3] * self.group1()[1])),
                ((self.group2()[0] * other.group1()[1]) - (self.group2()[0] * other.group3()[1]) - (self.group2()[1] * other.group1()[0]) + (self.group2()[1] * other.group3()[0])
                    - (self.group2()[2] * other.group1()[3])
                    - (other.group2()[0] * self.group1()[1])
                    + (other.group2()[1] * self.group1()[0])
                    + (other.group2()[2] * self.group1()[3])
                    + (other.group3()[3] * self.group1()[2])),
                (-(self.group2()[0] * other.group1()[0]) + (self.group2()[0] * other.group3()[0]) - (self.group2()[1] * other.group1()[1])
                    + (self.group2()[1] * other.group3()[1])
                    - (self.group2()[2] * other.group1()[2])
                    + (self.group2()[2] * other.group3()[2])
                    - (other.group2()[0] * self.group1()[0])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[2] * self.group1()[2])
                    + (other.group3()[3] * self.group1()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1])
                    - (self.group0()[0] * other.group3()[3])
                    - (self.group0()[1] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[1])
                    + (self.group2()[0] * other.group2()[3])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[0])
                    - (other.group3()[1] * self.group1()[2])
                    + (other.group3()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group2()[0]) + (self.group0()[0] * other.group2()[2])
                    - (self.group0()[1] * other.group3()[3])
                    - (self.group0()[2] * other.group2()[0])
                    + (self.group2()[1] * other.group2()[3])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[1])
                    + (other.group3()[0] * self.group1()[2])
                    - (other.group3()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) - (self.group0()[0] * other.group2()[1])
                    + (self.group0()[1] * other.group2()[0])
                    - (self.group0()[2] * other.group3()[3])
                    + (self.group2()[2] * other.group2()[3])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])
                    - (other.group3()[0] * self.group1()[1])
                    + (other.group3()[1] * self.group1()[0])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[0] * other.group3()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])
                    - (other.group2()[3] * self.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum> for Circle {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       25        0
    fn geometric_anti_product(self, other: AntiDualNum) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[1] * self.group2()[0]),
                (other.group0()[1] * self.group2()[1]),
                (other.group0()[1] * self.group2()[2]),
                (other.group0()[0] * self.group1()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group2()[0] * -1.0),
                (other.group0()[0] * self.group2()[1] * -1.0),
                (other.group0()[0] * self.group2()[2] * -1.0),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiFlatPoint> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       25       40        0
    fn geometric_anti_product(self, other: AntiFlatPoint) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (other.group0()[3] * self.group1()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group2()[0] * other.group0()[3]) + (other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[1])),
                (-(self.group2()[1] * other.group0()[3]) + (other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group1()[0])),
                (-(self.group2()[2] * other.group0()[3]) - (other.group0()[0] * self.group1()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group1()[3])),
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1]) + (other.group0()[3] * self.group1()[0])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0]) + (other.group0()[3] * self.group1()[1])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) + (other.group0()[3] * self.group1()[2])),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiFlector> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       64       80        0
    fn geometric_anti_product(self, other: AntiFlector) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[3]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (other.group0()[3] * self.group1()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (other.group1()[0] * self.group1()[3])),
                (-(self.group0()[0] * other.group0()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group0()[0])
                    + (other.group1()[1] * self.group1()[3])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group1()[3]) + (other.group1()[2] * self.group1()[3])),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group2()[0] * other.group0()[3]) - (self.group2()[1] * other.group1()[2])
                    + (self.group2()[2] * other.group1()[1])
                    + (other.group0()[0] * self.group1()[3])
                    - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (other.group1()[3] * self.group1()[0])),
                ((self.group2()[0] * other.group1()[2]) - (self.group2()[1] * other.group0()[3]) - (self.group2()[2] * other.group1()[0])
                    + (other.group0()[0] * self.group1()[2])
                    + (other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group1()[0])
                    + (other.group1()[3] * self.group1()[1])),
                (-(self.group2()[0] * other.group1()[1]) + (self.group2()[1] * other.group1()[0])
                    - (self.group2()[2] * other.group0()[3])
                    - (other.group0()[0] * self.group1()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])),
                ((self.group2()[0] * other.group1()[0]) + (self.group2()[1] * other.group1()[1]) + (self.group2()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    + (other.group1()[3] * self.group1()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group0()[2])
                    + (self.group0()[2] * other.group0()[1])
                    + (other.group0()[3] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group0()[0])
                    + (other.group0()[3] * self.group1()[1])
                    + (other.group1()[0] * self.group1()[2])
                    - (other.group1()[2] * self.group1()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group1()[3])
                    + (other.group0()[3] * self.group1()[2])
                    - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])),
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiLine> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       44       60        0
    fn geometric_anti_product(self, other: AntiLine) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])),
                (-(other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1]) + (other.group1()[0] * self.group1()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group2()[0]) + (other.group1()[0] * self.group1()[2]) + (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group1()[3])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1])),
                (-(other.group0()[1] * self.group1()[3]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[2] * self.group1()[3]) - (other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiMotor> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       64       80        0
    fn geometric_anti_product(self, other: AntiMotor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[3]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (other.group0()[3] * self.group1()[0])),
                (-(self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (other.group0()[0] * self.group1()[2])
                    - (other.group0()[2] * self.group1()[0])
                    + (other.group0()[3] * self.group1()[1])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[3]) - (other.group0()[0] * self.group1()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[3] * self.group1()[2])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[3] * self.group1()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group2()[0] * other.group0()[3]) + (self.group2()[1] * other.group0()[2]) - (self.group2()[2] * other.group0()[1]) + (other.group1()[0] * self.group1()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group1()[3] * self.group1()[0])),
                (-(self.group2()[0] * other.group0()[2])
                    + (self.group2()[1] * other.group0()[3])
                    + (self.group2()[2] * other.group0()[0])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group1()[0])
                    + (other.group1()[3] * self.group1()[1])),
                ((self.group2()[0] * other.group0()[1]) - (self.group2()[1] * other.group0()[0]) + (self.group2()[2] * other.group0()[3]) - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) - (other.group0()[0] * self.group1()[3])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group1()[0])
                    - (other.group0()[1] * self.group1()[3])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[3]) - (other.group0()[2] * self.group1()[3])),
                (-(self.group2()[0] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    + (other.group1()[3] * self.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiPlane> for Circle {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       25       40        0
    fn geometric_anti_product(self, other: AntiPlane) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (other.group0()[0] * self.group1()[3])),
                ((self.group0()[1] * other.group0()[3]) + (other.group0()[1] * self.group1()[3])),
                ((self.group0()[2] * other.group0()[3]) + (other.group0()[2] * self.group1()[3])),
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (-(self.group2()[1] * other.group0()[2]) + (self.group2()[2] * other.group0()[1]) + (other.group0()[3] * self.group1()[0])),
                ((self.group2()[0] * other.group0()[2]) - (self.group2()[2] * other.group0()[0]) + (other.group0()[3] * self.group1()[1])),
                (-(self.group2()[0] * other.group0()[1]) + (self.group2()[1] * other.group0()[0]) + (other.group0()[3] * self.group1()[2])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1])),
                (-(self.group0()[1] * other.group0()[3]) + (other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0])),
                (-(self.group0()[2] * other.group0()[3]) - (other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0])),
                ((self.group2()[0] * other.group0()[0]) + (self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2]) + (other.group0()[3] * self.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiScalar> for Circle {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0       10        0
    fn geometric_anti_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return Circle::from_groups(
            // e423, e431, e412
            Simd32x3::from([(self.group0()[0] * other[e12345]), (self.group0()[1] * other[e12345]), (self.group0()[2] * other[e12345])]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group1()[0] * other[e12345]),
                (self.group1()[1] * other[e12345]),
                (self.group1()[2] * other[e12345]),
                (self.group1()[3] * other[e12345]),
            ]),
            // e235, e315, e125
            Simd32x3::from([(self.group2()[0] * other[e12345]), (self.group2()[1] * other[e12345]), (self.group2()[2] * other[e12345])]),
        );
    }
}
impl GeometricAntiProduct<Circle> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       84      100        0
    fn geometric_anti_product(self, other: Circle) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (self.group0()[0] * other.group1()[3])
                    + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group1()[0]) - (self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) - (other.group0()[2] * self.group1()[3])
                    + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])
                    + (self.group0()[2] * other.group1()[3])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    + (other.group1()[3] * self.group1()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1]) - (other.group2()[1] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[1])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group2()[0]) + (other.group2()[0] * self.group0()[2]) - (other.group2()[2] * self.group0()[0])
                    + (other.group1()[0] * self.group1()[2])
                    - (other.group1()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) - (other.group2()[0] * self.group0()[1])
                    + (other.group2()[1] * self.group0()[0])
                    - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[0]) - (other.group0()[1] * self.group2()[1]) - (other.group0()[2] * self.group2()[2])
                    + (other.group2()[0] * self.group0()[0])
                    + (other.group2()[1] * self.group0()[1])
                    + (other.group2()[2] * self.group0()[2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((other.group2()[0] * self.group1()[3]) - (other.group2()[1] * self.group1()[2]) + (other.group2()[2] * self.group1()[1]) - (self.group2()[0] * other.group1()[3])
                    + (self.group2()[1] * other.group1()[2])
                    - (self.group2()[2] * other.group1()[1])),
                ((other.group2()[0] * self.group1()[2]) + (other.group2()[1] * self.group1()[3])
                    - (other.group2()[2] * self.group1()[0])
                    - (self.group2()[0] * other.group1()[2])
                    - (self.group2()[1] * other.group1()[3])
                    + (self.group2()[2] * other.group1()[0])),
                (-(other.group2()[0] * self.group1()[1])
                    + (other.group2()[1] * self.group1()[0])
                    + (other.group2()[2] * self.group1()[3])
                    + (self.group2()[0] * other.group1()[1])
                    - (self.group2()[1] * other.group1()[0])
                    - (self.group2()[2] * other.group1()[3])),
                (-(other.group2()[0] * self.group1()[0])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (self.group2()[0] * other.group1()[0])
                    - (self.group2()[1] * other.group1()[1])
                    - (self.group2()[2] * other.group1()[2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1]) + (other.group2()[1] * self.group0()[2])
                    - (other.group2()[2] * self.group0()[1])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group2()[0]) - (other.group2()[0] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[0])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) + (other.group2()[0] * self.group0()[1])
                    - (other.group2()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<CircleRotor> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       94      110        0
    fn geometric_anti_product(self, other: CircleRotor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])
                    - (other.group0()[0] * self.group1()[3])
                    - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[1])),
                (-(self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[1] * other.group2()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (other.group0()[0] * self.group1()[2])
                    - (other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[3]) + (self.group0()[2] * other.group2()[3])
                    - (other.group0()[0] * self.group1()[1])
                    + (other.group0()[1] * self.group1()[0])
                    - (other.group0()[2] * self.group1()[3])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])
                    + (self.group1()[3] * other.group1()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1]) + (self.group2()[1] * other.group0()[2]) - (self.group2()[2] * other.group0()[1])
                    + (self.group1()[0] * other.group2()[3])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[2] * other.group2()[0]) - (self.group2()[0] * other.group0()[2])
                    + (self.group2()[2] * other.group0()[0])
                    - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[1] * other.group2()[3])
                    + (self.group1()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) + (self.group2()[0] * other.group0()[1]) - (self.group2()[1] * other.group0()[0])
                    + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[0])
                    + (self.group1()[2] * other.group2()[3])),
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group2()[1]) + (self.group0()[2] * other.group2()[2])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])
                    + (self.group1()[3] * other.group2()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group2()[0] * other.group1()[3]) + (self.group2()[0] * other.group2()[3]) + (self.group2()[1] * other.group1()[2])
                    - (self.group2()[2] * other.group1()[1])
                    + (self.group1()[1] * other.group2()[2])
                    - (self.group1()[2] * other.group2()[1])
                    + (self.group1()[3] * other.group2()[0])),
                (-(self.group2()[0] * other.group1()[2]) - (self.group2()[1] * other.group1()[3])
                    + (self.group2()[1] * other.group2()[3])
                    + (self.group2()[2] * other.group1()[0])
                    - (self.group1()[0] * other.group2()[2])
                    + (self.group1()[2] * other.group2()[0])
                    + (self.group1()[3] * other.group2()[1])),
                ((self.group2()[0] * other.group1()[1]) - (self.group2()[1] * other.group1()[0]) - (self.group2()[2] * other.group1()[3])
                    + (self.group2()[2] * other.group2()[3])
                    + (self.group1()[0] * other.group2()[1])
                    - (self.group1()[1] * other.group2()[0])
                    + (self.group1()[3] * other.group2()[2])),
                (-(self.group2()[0] * other.group1()[0])
                    - (self.group2()[1] * other.group1()[1])
                    - (self.group2()[2] * other.group1()[2])
                    - (self.group1()[0] * other.group2()[0])
                    - (self.group1()[1] * other.group2()[1])
                    - (self.group1()[2] * other.group2()[2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[1] * other.group2()[2]) + (self.group0()[2] * other.group2()[1]) + (self.group2()[1] * other.group0()[2])
                    - (self.group2()[2] * other.group0()[1])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[2] * other.group2()[0]) - (self.group2()[0] * other.group0()[2])
                    + (self.group2()[2] * other.group0()[0])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[0]) + (self.group2()[0] * other.group0()[1])
                    - (self.group2()[1] * other.group0()[0])
                    + (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Dipole> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       84      100        0
    fn geometric_anti_product(self, other: Dipole) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])
                    - (other.group0()[0] * self.group1()[3])
                    - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (other.group0()[0] * self.group1()[2])
                    - (other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group1()[3]) - (other.group0()[0] * self.group1()[1])
                    + (other.group0()[1] * self.group1()[0])
                    - (other.group0()[2] * self.group1()[3])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1]) + (self.group2()[1] * other.group0()[2]) - (self.group2()[2] * other.group0()[1])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[2] * other.group2()[0]) - (self.group2()[0] * other.group0()[2])
                    + (self.group2()[2] * other.group0()[0])
                    - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) + (self.group2()[0] * other.group0()[1]) - (self.group2()[1] * other.group0()[0])
                    + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])
                    + (self.group2()[0] * other.group0()[0])
                    + (self.group2()[1] * other.group0()[1])
                    + (self.group2()[2] * other.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group2()[0] * other.group1()[3]) + (self.group2()[1] * other.group1()[2]) - (self.group2()[2] * other.group1()[1]) + (other.group2()[0] * self.group1()[3])
                    - (other.group2()[1] * self.group1()[2])
                    + (other.group2()[2] * self.group1()[1])),
                (-(self.group2()[0] * other.group1()[2])
                    + (self.group2()[1] * other.group1()[3])
                    + (self.group2()[2] * other.group1()[0])
                    + (other.group2()[0] * self.group1()[2])
                    + (other.group2()[1] * self.group1()[3])
                    - (other.group2()[2] * self.group1()[0])),
                ((self.group2()[0] * other.group1()[1]) - (self.group2()[1] * other.group1()[0]) + (self.group2()[2] * other.group1()[3]) - (other.group2()[0] * self.group1()[1])
                    + (other.group2()[1] * self.group1()[0])
                    + (other.group2()[2] * self.group1()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1]) - (self.group2()[1] * other.group0()[2])
                    + (self.group2()[2] * other.group0()[1])
                    + (self.group1()[0] * other.group1()[3])
                    - (self.group1()[3] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[2] * other.group2()[0]) + (self.group2()[0] * other.group0()[2])
                    - (self.group2()[2] * other.group0()[0])
                    + (self.group1()[1] * other.group1()[3])
                    - (self.group1()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) - (self.group2()[0] * other.group0()[1])
                    + (self.group2()[1] * other.group0()[0])
                    + (self.group1()[2] * other.group1()[3])
                    - (self.group1()[3] * other.group1()[2])),
                (-(self.group2()[0] * other.group1()[0])
                    - (self.group2()[1] * other.group1()[1])
                    - (self.group2()[2] * other.group1()[2])
                    - (other.group2()[0] * self.group1()[0])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[2] * self.group1()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<DipoleInversion> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      134      150        0
    fn geometric_anti_product(self, other: DipoleInversion) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[1] * other.group3()[2])
                    - (self.group0()[2] * other.group1()[1])
                    + (self.group0()[2] * other.group3()[1])
                    - (other.group0()[0] * self.group1()[3])
                    - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (self.group1()[0] * other.group2()[3])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[0] * other.group3()[2]) - (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    - (self.group0()[2] * other.group3()[0])
                    + (other.group0()[0] * self.group1()[2])
                    - (other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group1()[0])
                    + (self.group1()[1] * other.group2()[3])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group0()[1] * other.group3()[0])
                    - (self.group0()[2] * other.group1()[3])
                    - (other.group0()[0] * self.group1()[1])
                    + (other.group0()[1] * self.group1()[0])
                    - (other.group0()[2] * self.group1()[3])
                    + (self.group1()[2] * other.group2()[3])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])
                    + (self.group2()[0] * other.group2()[3])
                    + (self.group2()[1] * other.group0()[2])
                    - (self.group2()[2] * other.group0()[1])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])
                    - (self.group1()[3] * other.group3()[0])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group3()[3]) + (self.group0()[2] * other.group2()[0])
                    - (self.group2()[0] * other.group0()[2])
                    + (self.group2()[1] * other.group2()[3])
                    + (self.group2()[2] * other.group0()[0])
                    - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[2] * other.group1()[0])
                    - (self.group1()[3] * other.group3()[1])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) + (self.group0()[2] * other.group3()[3]) + (self.group2()[0] * other.group0()[1])
                    - (self.group2()[1] * other.group0()[0])
                    + (self.group2()[2] * other.group2()[3])
                    + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[0])
                    - (self.group1()[3] * other.group3()[2])),
                (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])
                    + (self.group2()[0] * other.group0()[0])
                    + (self.group2()[1] * other.group0()[1])
                    + (self.group2()[2] * other.group0()[2])
                    - (self.group1()[0] * other.group3()[0])
                    - (self.group1()[1] * other.group3()[1])
                    - (self.group1()[2] * other.group3()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group2()[0] * other.group1()[3]) + (self.group2()[1] * other.group1()[2]) + (self.group2()[1] * other.group3()[2])
                    - (self.group2()[2] * other.group1()[1])
                    - (self.group2()[2] * other.group3()[1])
                    + (self.group1()[0] * other.group3()[3])
                    + (self.group1()[1] * other.group2()[2])
                    - (self.group1()[2] * other.group2()[1])
                    + (self.group1()[3] * other.group2()[0])),
                (-(self.group2()[0] * other.group1()[2]) - (self.group2()[0] * other.group3()[2])
                    + (self.group2()[1] * other.group1()[3])
                    + (self.group2()[2] * other.group1()[0])
                    + (self.group2()[2] * other.group3()[0])
                    - (self.group1()[0] * other.group2()[2])
                    + (self.group1()[1] * other.group3()[3])
                    + (self.group1()[2] * other.group2()[0])
                    + (self.group1()[3] * other.group2()[1])),
                ((self.group2()[0] * other.group1()[1]) + (self.group2()[0] * other.group3()[1]) - (self.group2()[1] * other.group1()[0]) - (self.group2()[1] * other.group3()[0])
                    + (self.group2()[2] * other.group1()[3])
                    + (self.group1()[0] * other.group2()[1])
                    - (self.group1()[1] * other.group2()[0])
                    + (self.group1()[2] * other.group3()[3])
                    + (self.group1()[3] * other.group2()[2])),
                (-(self.group0()[0] * other.group1()[0]) + (self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group1()[1])
                    + (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group1()[2])
                    + (self.group0()[2] * other.group3()[2])
                    - (other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group1()[3] * other.group2()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group2()[2])
                    - (self.group0()[2] * other.group2()[1])
                    - (self.group2()[0] * other.group2()[3])
                    - (self.group2()[1] * other.group0()[2])
                    + (self.group2()[2] * other.group0()[1])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group3()[2])
                    - (self.group1()[2] * other.group3()[1])
                    - (self.group1()[3] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[2])
                    + (self.group0()[1] * other.group3()[3])
                    + (self.group0()[2] * other.group2()[0])
                    + (self.group2()[0] * other.group0()[2])
                    - (self.group2()[1] * other.group2()[3])
                    - (self.group2()[2] * other.group0()[0])
                    - (self.group1()[0] * other.group3()[2])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group3()[0])
                    - (self.group1()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) + (self.group0()[2] * other.group3()[3]) - (self.group2()[0] * other.group0()[1])
                    + (self.group2()[1] * other.group0()[0])
                    - (self.group2()[2] * other.group2()[3])
                    + (self.group1()[0] * other.group3()[1])
                    - (self.group1()[1] * other.group3()[0])
                    + (self.group1()[2] * other.group1()[3])
                    - (self.group1()[3] * other.group1()[2])),
                (-(self.group2()[0] * other.group1()[0])
                    - (self.group2()[0] * other.group3()[0])
                    - (self.group2()[1] * other.group1()[1])
                    - (self.group2()[1] * other.group3()[1])
                    - (self.group2()[2] * other.group1()[2])
                    - (self.group2()[2] * other.group3()[2])
                    - (self.group1()[0] * other.group2()[0])
                    - (self.group1()[1] * other.group2()[1])
                    - (self.group1()[2] * other.group2()[2])
                    + (self.group1()[3] * other.group3()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<DualNum> for Circle {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       21        0
    fn geometric_anti_product(self, other: DualNum) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (other.group0()[1] * self.group2()[0]),
                (other.group0()[1] * self.group2()[1]),
                (other.group0()[1] * self.group2()[2]),
                (other.group0()[0] * self.group1()[3] * -1.0),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[0] * self.group2()[0]),
                (other.group0()[0] * self.group2()[1]),
                (other.group0()[0] * self.group2()[2]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<FlatPoint> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       25       43        0
    fn geometric_anti_product(self, other: FlatPoint) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group2()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1]) + (self.group1()[3] * other.group0()[0])),
                ((self.group2()[1] * other.group0()[3]) - (self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0]) + (self.group1()[3] * other.group0()[1])),
                ((self.group2()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0]) + (self.group1()[3] * other.group0()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (self.group1()[0] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[3])),
                (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Flector> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       64       80        0
    fn geometric_anti_product(self, other: Flector) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group0()[3]) - (self.group0()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) - (self.group1()[3] * other.group1()[0])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group0()[0])
                    - (self.group1()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group1()[3]) - (self.group1()[3] * other.group1()[2])),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group2()[0] * other.group0()[3]) + (self.group2()[1] * other.group1()[2]) - (self.group2()[2] * other.group1()[1])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group0()[2])
                    - (self.group1()[2] * other.group0()[1])
                    + (self.group1()[3] * other.group0()[0])),
                (-(self.group2()[0] * other.group1()[2]) + (self.group2()[1] * other.group0()[3]) + (self.group2()[2] * other.group1()[0])
                    - (self.group1()[0] * other.group0()[2])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group0()[0])
                    + (self.group1()[3] * other.group0()[1])),
                ((self.group2()[0] * other.group1()[1]) - (self.group2()[1] * other.group1()[0]) + (self.group2()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1])
                    - (self.group1()[1] * other.group0()[0])
                    + (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group0()[2])),
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1]) + (self.group0()[2] * other.group1()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])
                    + (self.group1()[0] * other.group0()[3])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group0()[0])
                    - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group1()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group1()[3]) + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[0])
                    + (self.group1()[2] * other.group0()[3])),
                (-(self.group2()[0] * other.group1()[0])
                    - (self.group2()[1] * other.group1()[1])
                    - (self.group2()[2] * other.group1()[2])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])
                    + (self.group1()[3] * other.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Line> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       44       60        0
    fn geometric_anti_product(self, other: Line) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0]) + (other.group0()[0] * self.group1()[2])
                    - (other.group0()[2] * self.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) - (other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0])),
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1]) + (self.group0()[2] * other.group1()[2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group2()[1] * other.group0()[2]) - (self.group2()[2] * other.group0()[1]) + (other.group1()[0] * self.group1()[3]) - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])),
                (-(self.group2()[0] * other.group0()[2])
                    + (self.group2()[2] * other.group0()[0])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group1()[0])),
                ((self.group2()[0] * other.group0()[1]) - (self.group2()[1] * other.group0()[0]) - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group1()[3])),
                (-(self.group2()[0] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1]) + (other.group0()[0] * self.group1()[3])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0]) + (other.group0()[1] * self.group1()[3])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) + (other.group0()[2] * self.group1()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Motor> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       64       80        0
    fn geometric_anti_product(self, other: Motor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[3]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])
                    + (self.group1()[0] * other.group0()[3])
                    + (self.group1()[1] * other.group0()[2])
                    - (self.group1()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group1()[0])
                    - (self.group1()[0] * other.group0()[2])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[3]) + (self.group1()[0] * other.group0()[1])
                    - (self.group1()[1] * other.group0()[0])
                    + (self.group1()[2] * other.group0()[3])),
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1]) + (self.group0()[2] * other.group1()[2]) + (self.group1()[3] * other.group0()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group2()[0] * other.group0()[3]) + (self.group2()[1] * other.group0()[2]) - (self.group2()[2] * other.group0()[1])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])
                    + (self.group1()[3] * other.group1()[0])),
                (-(self.group2()[0] * other.group0()[2]) + (self.group2()[1] * other.group0()[3]) + (self.group2()[2] * other.group0()[0])
                    - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group1()[0])
                    + (self.group1()[3] * other.group1()[1])),
                ((self.group2()[0] * other.group0()[1]) - (self.group2()[1] * other.group0()[0]) + (self.group2()[2] * other.group0()[3]) + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[0])
                    + (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])),
                (-(self.group2()[0] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])
                    + (self.group1()[3] * other.group1()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[1])
                    + (self.group1()[3] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group1()[0]) + (self.group1()[3] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group0()[2])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<MultiVector> for Circle {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      288      320        0
    fn geometric_anti_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group0()[0] * other.group3()[0])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group3()[2])
                    - (self.group2()[0] * other.group4()[0])
                    - (self.group2()[1] * other.group4()[1])
                    - (self.group2()[2] * other.group4()[2])
                    - (other.group5()[0] * self.group1()[0])
                    - (other.group5()[1] * self.group1()[1])
                    - (other.group5()[2] * self.group1()[2])
                    - (self.group1()[3] * other.group3()[3])),
                (-(self.group0()[0] * other.group8()[0])
                    - (self.group0()[1] * other.group8()[1])
                    - (self.group0()[2] * other.group8()[2])
                    - (self.group2()[0] * other.group7()[0])
                    - (self.group2()[1] * other.group7()[1])
                    - (self.group2()[2] * other.group7()[2])
                    - (self.group1()[0] * other.group6()[0])
                    - (self.group1()[1] * other.group6()[1])
                    - (self.group1()[2] * other.group6()[2])
                    + (self.group1()[3] * other.group6()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[0] * other[e1]) - (self.group0()[1] * other.group8()[2])
                    + (self.group0()[2] * other.group8()[1])
                    + (self.group2()[0] * other.group1()[3])
                    + (self.group2()[1] * other.group7()[2])
                    - (self.group2()[2] * other.group7()[1])
                    + (self.group1()[0] * other.group6()[3])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])
                    + (self.group1()[3] * other.group6()[0])),
                ((self.group0()[0] * other.group8()[2]) - (self.group0()[1] * other[e1]) - (self.group0()[2] * other.group8()[0]) - (self.group2()[0] * other.group7()[2])
                    + (self.group2()[1] * other.group1()[3])
                    + (self.group2()[2] * other.group7()[0])
                    - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[1] * other.group6()[3])
                    + (self.group1()[2] * other.group1()[0])
                    + (self.group1()[3] * other.group6()[1])),
                (-(self.group0()[0] * other.group8()[1]) + (self.group0()[1] * other.group8()[0]) - (self.group0()[2] * other[e1]) + (self.group2()[0] * other.group7()[1])
                    - (self.group2()[1] * other.group7()[0])
                    + (self.group2()[2] * other.group1()[3])
                    + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[0])
                    + (self.group1()[2] * other.group6()[3])
                    + (self.group1()[3] * other.group6()[2])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[0] * other.group6()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[1] * other.group6()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group6()[2])
                    - (other.group7()[0] * self.group1()[0])
                    - (other.group7()[1] * self.group1()[1])
                    - (other.group7()[2] * self.group1()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]),
            // e5
            ((self.group2()[0] * other.group1()[0]) - (self.group2()[0] * other.group6()[0]) + (self.group2()[1] * other.group1()[1]) - (self.group2()[1] * other.group6()[1])
                + (self.group2()[2] * other.group1()[2])
                - (self.group2()[2] * other.group6()[2])
                - (other.group8()[0] * self.group1()[0])
                - (other.group8()[1] * self.group1()[1])
                - (other.group8()[2] * self.group1()[2])
                + (self.group1()[3] * other[e1])),
            // e15, e25, e35, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) + (self.group2()[0] * other.group3()[3]) + (self.group2()[1] * other.group5()[2]) + (self.group2()[1] * other.group9()[2])
                    - (self.group2()[2] * other.group5()[1])
                    - (self.group2()[2] * other.group9()[1])
                    + (self.group1()[0] * other.group9()[3])
                    + (self.group1()[1] * other.group3()[2])
                    - (self.group1()[2] * other.group3()[1])
                    + (self.group1()[3] * other.group3()[0])),
                ((other.group0()[0] * self.group2()[1]) - (self.group2()[0] * other.group5()[2]) - (self.group2()[0] * other.group9()[2])
                    + (self.group2()[1] * other.group3()[3])
                    + (self.group2()[2] * other.group5()[0])
                    + (self.group2()[2] * other.group9()[0])
                    - (self.group1()[0] * other.group3()[2])
                    + (self.group1()[1] * other.group9()[3])
                    + (self.group1()[2] * other.group3()[0])
                    + (self.group1()[3] * other.group3()[1])),
                ((other.group0()[0] * self.group2()[2]) + (self.group2()[0] * other.group5()[1]) + (self.group2()[0] * other.group9()[1])
                    - (self.group2()[1] * other.group5()[0])
                    - (self.group2()[1] * other.group9()[0])
                    + (self.group2()[2] * other.group3()[3])
                    + (self.group1()[0] * other.group3()[1])
                    - (self.group1()[1] * other.group3()[0])
                    + (self.group1()[2] * other.group9()[3])
                    + (self.group1()[3] * other.group3()[2])),
                (-(other.group0()[0] * self.group1()[3])
                    - (self.group0()[0] * other.group3()[0])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group3()[2])
                    + (self.group2()[0] * other.group4()[0])
                    + (self.group2()[1] * other.group4()[1])
                    + (self.group2()[2] * other.group4()[2])
                    - (self.group1()[0] * other.group9()[0])
                    - (self.group1()[1] * other.group9()[1])
                    - (self.group1()[2] * other.group9()[2])),
            ]),
            // e41, e42, e43
            Simd32x3::from([
                ((other.group0()[0] * self.group0()[0]) - (self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group5()[2])
                    - (self.group0()[1] * other.group9()[2])
                    - (self.group0()[2] * other.group5()[1])
                    + (self.group0()[2] * other.group9()[1])
                    - (other.group4()[0] * self.group1()[3])
                    - (other.group4()[1] * self.group1()[2])
                    + (other.group4()[2] * self.group1()[1])
                    + (self.group1()[0] * other[e45])),
                ((other.group0()[0] * self.group0()[1]) - (self.group0()[0] * other.group5()[2]) + (self.group0()[0] * other.group9()[2]) - (self.group0()[1] * other.group3()[3])
                    + (self.group0()[2] * other.group5()[0])
                    - (self.group0()[2] * other.group9()[0])
                    + (other.group4()[0] * self.group1()[2])
                    - (other.group4()[1] * self.group1()[3])
                    - (other.group4()[2] * self.group1()[0])
                    + (self.group1()[1] * other[e45])),
                ((other.group0()[0] * self.group0()[2]) + (self.group0()[0] * other.group5()[1]) - (self.group0()[0] * other.group9()[1]) - (self.group0()[1] * other.group5()[0])
                    + (self.group0()[1] * other.group9()[0])
                    - (self.group0()[2] * other.group3()[3])
                    - (other.group4()[0] * self.group1()[1])
                    + (other.group4()[1] * self.group1()[0])
                    - (other.group4()[2] * self.group1()[3])
                    + (self.group1()[2] * other[e45])),
            ]),
            // e23, e31, e12
            Simd32x3::from([
                ((other.group0()[0] * self.group1()[0]) + (self.group0()[0] * other.group9()[3]) + (self.group0()[1] * other.group3()[2]) - (self.group0()[2] * other.group3()[1])
                    + (self.group2()[0] * other[e45])
                    + (self.group2()[1] * other.group4()[2])
                    - (self.group2()[2] * other.group4()[1])
                    - (other.group5()[1] * self.group1()[2])
                    + (other.group5()[2] * self.group1()[1])
                    - (self.group1()[3] * other.group9()[0])),
                ((other.group0()[0] * self.group1()[1]) - (self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group9()[3]) + (self.group0()[2] * other.group3()[0])
                    - (self.group2()[0] * other.group4()[2])
                    + (self.group2()[1] * other[e45])
                    + (self.group2()[2] * other.group4()[0])
                    + (other.group5()[0] * self.group1()[2])
                    - (other.group5()[2] * self.group1()[0])
                    - (self.group1()[3] * other.group9()[1])),
                ((other.group0()[0] * self.group1()[2]) + (self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group9()[3])
                    + (self.group2()[0] * other.group4()[1])
                    - (self.group2()[1] * other.group4()[0])
                    + (self.group2()[2] * other[e45])
                    - (other.group5()[0] * self.group1()[1])
                    + (other.group5()[1] * self.group1()[0])
                    - (self.group1()[3] * other.group9()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[1] * self.group1()[0]) + (self.group0()[0] * other[e1]) + (self.group0()[1] * other.group8()[2]) - (self.group0()[2] * other.group8()[1])
                    + (self.group2()[0] * other.group1()[3])
                    + (self.group2()[1] * other.group7()[2])
                    - (self.group2()[2] * other.group7()[1])
                    + (self.group1()[1] * other.group6()[2])
                    - (self.group1()[2] * other.group6()[1])
                    + (self.group1()[3] * other.group1()[0])),
                ((other.group0()[1] * self.group1()[1]) - (self.group0()[0] * other.group8()[2]) + (self.group0()[1] * other[e1]) + (self.group0()[2] * other.group8()[0])
                    - (self.group2()[0] * other.group7()[2])
                    + (self.group2()[1] * other.group1()[3])
                    + (self.group2()[2] * other.group7()[0])
                    - (self.group1()[0] * other.group6()[2])
                    + (self.group1()[2] * other.group6()[0])
                    + (self.group1()[3] * other.group1()[1])),
                ((other.group0()[1] * self.group1()[2]) + (self.group0()[0] * other.group8()[1]) - (self.group0()[1] * other.group8()[0])
                    + (self.group0()[2] * other[e1])
                    + (self.group2()[0] * other.group7()[1])
                    - (self.group2()[1] * other.group7()[0])
                    + (self.group2()[2] * other.group1()[3])
                    + (self.group1()[0] * other.group6()[1])
                    - (self.group1()[1] * other.group6()[0])
                    + (self.group1()[3] * other.group1()[2])),
                ((other.group0()[1] * self.group1()[3]) + (self.group0()[0] * other.group8()[0]) + (self.group0()[1] * other.group8()[1]) + (self.group0()[2] * other.group8()[2])
                    - (self.group2()[0] * other.group7()[0])
                    - (self.group2()[1] * other.group7()[1])
                    - (self.group2()[2] * other.group7()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]),
            // e423, e431, e412
            Simd32x3::from([
                ((other.group0()[1] * self.group0()[0]) + (self.group0()[0] * other.group6()[3]) + (self.group0()[1] * other.group1()[2]) + (self.group0()[1] * other.group6()[2])
                    - (self.group0()[2] * other.group1()[1])
                    - (self.group0()[2] * other.group6()[1])
                    - (other.group7()[0] * self.group1()[3])
                    - (other.group7()[1] * self.group1()[2])
                    + (other.group7()[2] * self.group1()[1])
                    + (self.group1()[0] * other.group1()[3])),
                ((other.group0()[1] * self.group0()[1]) - (self.group0()[0] * other.group1()[2]) - (self.group0()[0] * other.group6()[2])
                    + (self.group0()[1] * other.group6()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group0()[2] * other.group6()[0])
                    + (other.group7()[0] * self.group1()[2])
                    - (other.group7()[1] * self.group1()[3])
                    - (other.group7()[2] * self.group1()[0])
                    + (self.group1()[1] * other.group1()[3])),
                ((other.group0()[1] * self.group0()[2]) + (self.group0()[0] * other.group1()[1]) + (self.group0()[0] * other.group6()[1])
                    - (self.group0()[1] * other.group1()[0])
                    - (self.group0()[1] * other.group6()[0])
                    + (self.group0()[2] * other.group6()[3])
                    - (other.group7()[0] * self.group1()[1])
                    + (other.group7()[1] * self.group1()[0])
                    - (other.group7()[2] * self.group1()[3])
                    + (self.group1()[2] * other.group1()[3])),
            ]),
            // e235, e315, e125
            Simd32x3::from([
                ((other.group0()[1] * self.group2()[0]) - (self.group2()[0] * other.group6()[3]) - (self.group2()[1] * other.group1()[2])
                    + (self.group2()[1] * other.group6()[2])
                    + (self.group2()[2] * other.group1()[1])
                    - (self.group2()[2] * other.group6()[1])
                    + (other.group8()[0] * self.group1()[3])
                    - (other.group8()[1] * self.group1()[2])
                    + (other.group8()[2] * self.group1()[1])
                    + (self.group1()[0] * other[e1])),
                ((other.group0()[1] * self.group2()[1]) + (self.group2()[0] * other.group1()[2])
                    - (self.group2()[0] * other.group6()[2])
                    - (self.group2()[1] * other.group6()[3])
                    - (self.group2()[2] * other.group1()[0])
                    + (self.group2()[2] * other.group6()[0])
                    + (other.group8()[0] * self.group1()[2])
                    + (other.group8()[1] * self.group1()[3])
                    - (other.group8()[2] * self.group1()[0])
                    + (self.group1()[1] * other[e1])),
                ((other.group0()[1] * self.group2()[2]) - (self.group2()[0] * other.group1()[1]) + (self.group2()[0] * other.group6()[1]) + (self.group2()[1] * other.group1()[0])
                    - (self.group2()[1] * other.group6()[0])
                    - (self.group2()[2] * other.group6()[3])
                    - (other.group8()[0] * self.group1()[1])
                    + (other.group8()[1] * self.group1()[0])
                    + (other.group8()[2] * self.group1()[3])
                    + (self.group1()[2] * other[e1])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group9()[3]) + (self.group0()[1] * other.group3()[2])
                    - (self.group0()[2] * other.group3()[1])
                    - (self.group2()[0] * other[e45])
                    - (self.group2()[1] * other.group4()[2])
                    + (self.group2()[2] * other.group4()[1])
                    - (other.group5()[0] * self.group1()[3])
                    + (self.group1()[0] * other.group3()[3])
                    + (self.group1()[1] * other.group9()[2])
                    - (self.group1()[2] * other.group9()[1])),
                (-(self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group9()[3])
                    + (self.group0()[2] * other.group3()[0])
                    + (self.group2()[0] * other.group4()[2])
                    - (self.group2()[1] * other[e45])
                    - (self.group2()[2] * other.group4()[0])
                    - (other.group5()[1] * self.group1()[3])
                    - (self.group1()[0] * other.group9()[2])
                    + (self.group1()[1] * other.group3()[3])
                    + (self.group1()[2] * other.group9()[0])),
                ((self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group3()[0]) + (self.group0()[2] * other.group9()[3]) - (self.group2()[0] * other.group4()[1])
                    + (self.group2()[1] * other.group4()[0])
                    - (self.group2()[2] * other[e45])
                    - (other.group5()[2] * self.group1()[3])
                    + (self.group1()[0] * other.group9()[1])
                    - (self.group1()[1] * other.group9()[0])
                    + (self.group1()[2] * other.group3()[3])),
                (-(self.group2()[0] * other.group5()[0])
                    - (self.group2()[0] * other.group9()[0])
                    - (self.group2()[1] * other.group5()[1])
                    - (self.group2()[1] * other.group9()[1])
                    - (self.group2()[2] * other.group5()[2])
                    - (self.group2()[2] * other.group9()[2])
                    - (self.group1()[0] * other.group3()[0])
                    - (self.group1()[1] * other.group3()[1])
                    - (self.group1()[2] * other.group3()[2])
                    + (self.group1()[3] * other.group9()[3])),
            ]),
            // e1234
            (-(self.group0()[0] * other.group5()[0]) + (self.group0()[0] * other.group9()[0]) - (self.group0()[1] * other.group5()[1]) + (self.group0()[1] * other.group9()[1])
                - (self.group0()[2] * other.group5()[2])
                + (self.group0()[2] * other.group9()[2])
                - (other.group4()[0] * self.group1()[0])
                - (other.group4()[1] * self.group1()[1])
                - (other.group4()[2] * self.group1()[2])
                - (self.group1()[3] * other[e45])),
        );
    }
}
impl GeometricAntiProduct<Plane> for Circle {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       25       40        0
    fn geometric_anti_product(self, other: Plane) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group1()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) - (self.group1()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) - (self.group1()[3] * other.group0()[2])),
                (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group2()[1] * other.group0()[2]) - (self.group2()[2] * other.group0()[1]) + (self.group1()[0] * other.group0()[3])),
                (-(self.group2()[0] * other.group0()[2]) + (self.group2()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3])),
                ((self.group2()[0] * other.group0()[1]) - (self.group2()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])),
                ((self.group0()[1] * other.group0()[3]) - (self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])),
                (-(self.group2()[0] * other.group0()[0]) - (self.group2()[1] * other.group0()[1]) - (self.group2()[2] * other.group0()[2])
                    + (self.group1()[3] * other.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<RoundPoint> for Circle {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       35       50        0
    fn geometric_anti_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (self.group1()[0] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other[e2]) + (self.group2()[0] * other.group0()[3]) + (self.group1()[3] * other.group0()[0])),
                ((self.group0()[1] * other[e2]) + (self.group2()[1] * other.group0()[3]) + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[2] * other[e2]) + (self.group2()[2] * other.group0()[3]) + (self.group1()[3] * other.group0()[2])),
                (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (-(self.group2()[1] * other.group0()[2]) + (self.group2()[2] * other.group0()[1]) + (self.group1()[0] * other[e2])),
                ((self.group2()[0] * other.group0()[2]) - (self.group2()[2] * other.group0()[0]) + (self.group1()[1] * other[e2])),
                (-(self.group2()[0] * other.group0()[1]) + (self.group2()[1] * other.group0()[0]) + (self.group1()[2] * other[e2])),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group0()[3])),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (-(self.group0()[0] * other[e2]) + (self.group2()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])),
                (-(self.group0()[1] * other[e2]) + (self.group2()[1] * other.group0()[3]) - (self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[2] * other[e2]) + (self.group2()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])),
                ((self.group2()[0] * other.group0()[0]) + (self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2]) + (self.group1()[3] * other[e2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Scalar> for Circle {
    type Output = Dipole;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0       11        0
    fn geometric_anti_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from([(self.group0()[0] * other[scalar]), (self.group0()[1] * other[scalar]), (self.group0()[2] * other[scalar])]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group1()[0] * other[scalar]),
                (self.group1()[1] * other[scalar]),
                (self.group1()[2] * other[scalar]),
                (self.group1()[3] * other[scalar] * -1.0),
            ]),
            // e15, e25, e35
            Simd32x3::from([(self.group2()[0] * other[scalar]), (self.group2()[1] * other[scalar]), (self.group2()[2] * other[scalar])]),
        );
    }
}
impl GeometricAntiProduct<Sphere> for Circle {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       35       50        0
    fn geometric_anti_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1]) + (self.group1()[0] * other[e4315])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0]) + (self.group1()[1] * other[e4315])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) + (self.group1()[2] * other[e4315])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group2()[0] * other[e4315]) - (self.group1()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group2()[1] * other[e4315]) - (self.group1()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group2()[2] * other[e4315]) - (self.group1()[3] * other.group0()[2])),
                (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group2()[1] * other.group0()[2]) - (self.group2()[2] * other.group0()[1]) + (self.group1()[0] * other.group0()[3])),
                (-(self.group2()[0] * other.group0()[2]) + (self.group2()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3])),
                ((self.group2()[0] * other.group0()[1]) - (self.group2()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other[e4315])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group2()[0] * other[e4315]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])),
                ((self.group0()[1] * other.group0()[3]) - (self.group2()[1] * other[e4315]) - (self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[3]) - (self.group2()[2] * other[e4315]) + (self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])),
                (-(self.group2()[0] * other.group0()[0]) - (self.group2()[1] * other.group0()[1]) - (self.group2()[2] * other.group0()[2])
                    + (self.group1()[3] * other.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorEven> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      144      160        0
    fn geometric_anti_product(self, other: VersorEven) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) + (self.group0()[1] * other.group3()[2])
                    - (self.group0()[2] * other.group1()[1])
                    - (self.group0()[2] * other.group3()[1])
                    + (self.group1()[0] * other.group3()[3])
                    + (self.group1()[1] * other.group0()[2])
                    - (self.group1()[2] * other.group0()[1])
                    - (self.group1()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[2]) - (self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group0()[3])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group0()[2] * other.group3()[0])
                    - (self.group1()[0] * other.group0()[2])
                    + (self.group1()[1] * other.group3()[3])
                    + (self.group1()[2] * other.group0()[0])
                    - (self.group1()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group1()[0]) - (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group0()[3])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group1()[0] * other.group0()[1])
                    - (self.group1()[1] * other.group0()[0])
                    + (self.group1()[2] * other.group3()[3])
                    - (self.group1()[3] * other.group0()[2])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])
                    + (self.group1()[3] * other.group1()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])
                    + (self.group2()[0] * other.group3()[3])
                    + (self.group2()[1] * other.group0()[2])
                    - (self.group2()[2] * other.group0()[1])
                    + (self.group1()[0] * other.group0()[3])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])
                    + (self.group1()[3] * other.group3()[0])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group2()[3]) + (self.group0()[2] * other.group2()[0])
                    - (self.group2()[0] * other.group0()[2])
                    + (self.group2()[1] * other.group3()[3])
                    + (self.group2()[2] * other.group0()[0])
                    - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group1()[2] * other.group1()[0])
                    + (self.group1()[3] * other.group3()[1])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) + (self.group0()[2] * other.group2()[3]) + (self.group2()[0] * other.group0()[1])
                    - (self.group2()[1] * other.group0()[0])
                    + (self.group2()[2] * other.group3()[3])
                    + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[0])
                    + (self.group1()[2] * other.group0()[3])
                    + (self.group1()[3] * other.group3()[2])),
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group2()[1]) + (self.group0()[2] * other.group2()[2])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])
                    - (self.group1()[0] * other.group3()[0])
                    - (self.group1()[1] * other.group3()[1])
                    - (self.group1()[2] * other.group3()[2])
                    + (self.group1()[3] * other.group0()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group2()[0] * other.group0()[3]) - (self.group2()[0] * other.group1()[3]) + (self.group2()[1] * other.group1()[2])
                    - (self.group2()[1] * other.group3()[2])
                    - (self.group2()[2] * other.group1()[1])
                    + (self.group2()[2] * other.group3()[1])
                    + (self.group1()[0] * other.group2()[3])
                    + (self.group1()[1] * other.group2()[2])
                    - (self.group1()[2] * other.group2()[1])
                    + (self.group1()[3] * other.group2()[0])),
                (-(self.group2()[0] * other.group1()[2]) + (self.group2()[0] * other.group3()[2]) + (self.group2()[1] * other.group0()[3])
                    - (self.group2()[1] * other.group1()[3])
                    + (self.group2()[2] * other.group1()[0])
                    - (self.group2()[2] * other.group3()[0])
                    - (self.group1()[0] * other.group2()[2])
                    + (self.group1()[1] * other.group2()[3])
                    + (self.group1()[2] * other.group2()[0])
                    + (self.group1()[3] * other.group2()[1])),
                ((self.group2()[0] * other.group1()[1]) - (self.group2()[0] * other.group3()[1]) - (self.group2()[1] * other.group1()[0])
                    + (self.group2()[1] * other.group3()[0])
                    + (self.group2()[2] * other.group0()[3])
                    - (self.group2()[2] * other.group1()[3])
                    + (self.group1()[0] * other.group2()[1])
                    - (self.group1()[1] * other.group2()[0])
                    + (self.group1()[2] * other.group2()[3])
                    + (self.group1()[3] * other.group2()[2])),
                (-(self.group2()[0] * other.group1()[0]) + (self.group2()[0] * other.group3()[0]) - (self.group2()[1] * other.group1()[1])
                    + (self.group2()[1] * other.group3()[1])
                    - (self.group2()[2] * other.group1()[2])
                    + (self.group2()[2] * other.group3()[2])
                    - (self.group1()[0] * other.group2()[0])
                    - (self.group1()[1] * other.group2()[1])
                    - (self.group1()[2] * other.group2()[2])
                    + (self.group1()[3] * other.group2()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[1])
                    + (self.group2()[0] * other.group3()[3])
                    + (self.group2()[1] * other.group0()[2])
                    - (self.group2()[2] * other.group0()[1])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group3()[2])
                    - (self.group1()[2] * other.group3()[1])
                    + (self.group1()[3] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[1] * other.group2()[3]) - (self.group0()[2] * other.group2()[0]) - (self.group2()[0] * other.group0()[2])
                    + (self.group2()[1] * other.group3()[3])
                    + (self.group2()[2] * other.group0()[0])
                    - (self.group1()[0] * other.group3()[2])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group3()[0])
                    + (self.group1()[3] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[0]) - (self.group0()[2] * other.group2()[3])
                    + (self.group2()[0] * other.group0()[1])
                    - (self.group2()[1] * other.group0()[0])
                    + (self.group2()[2] * other.group3()[3])
                    + (self.group1()[0] * other.group3()[1])
                    - (self.group1()[1] * other.group3()[0])
                    + (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[0] * other.group3()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group3()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorOdd> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      144      160        0
    fn geometric_anti_product(self, other: VersorOdd) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[1] * other.group3()[2])
                    - (self.group0()[2] * other.group1()[1])
                    + (self.group0()[2] * other.group3()[1])
                    + (self.group1()[0] * other.group2()[3])
                    + (self.group1()[1] * other.group0()[2])
                    - (self.group1()[2] * other.group0()[1])
                    - (self.group1()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group0()[3])
                    - (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    - (self.group0()[2] * other.group3()[0])
                    - (self.group1()[0] * other.group0()[2])
                    + (self.group1()[1] * other.group2()[3])
                    + (self.group1()[2] * other.group0()[0])
                    - (self.group1()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group1()[0])
                    + (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group0()[3])
                    - (self.group0()[2] * other.group1()[3])
                    + (self.group1()[0] * other.group0()[1])
                    - (self.group1()[1] * other.group0()[0])
                    + (self.group1()[2] * other.group2()[3])
                    - (self.group1()[3] * other.group0()[2])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])
                    + (self.group2()[0] * other.group2()[3])
                    + (self.group2()[1] * other.group0()[2])
                    - (self.group2()[2] * other.group0()[1])
                    + (self.group1()[0] * other.group0()[3])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])
                    - (self.group1()[3] * other.group3()[0])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group3()[3]) + (self.group0()[2] * other.group2()[0])
                    - (self.group2()[0] * other.group0()[2])
                    + (self.group2()[1] * other.group2()[3])
                    + (self.group2()[2] * other.group0()[0])
                    - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group1()[2] * other.group1()[0])
                    - (self.group1()[3] * other.group3()[1])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) + (self.group0()[2] * other.group3()[3]) + (self.group2()[0] * other.group0()[1])
                    - (self.group2()[1] * other.group0()[0])
                    + (self.group2()[2] * other.group2()[3])
                    + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[0])
                    + (self.group1()[2] * other.group0()[3])
                    - (self.group1()[3] * other.group3()[2])),
                (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])
                    + (self.group2()[0] * other.group0()[0])
                    + (self.group2()[1] * other.group0()[1])
                    + (self.group2()[2] * other.group0()[2])
                    - (self.group1()[0] * other.group3()[0])
                    - (self.group1()[1] * other.group3()[1])
                    - (self.group1()[2] * other.group3()[2])
                    - (self.group1()[3] * other.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group2()[0] * other.group0()[3]) + (self.group2()[0] * other.group1()[3]) + (self.group2()[1] * other.group1()[2]) + (self.group2()[1] * other.group3()[2])
                    - (self.group2()[2] * other.group1()[1])
                    - (self.group2()[2] * other.group3()[1])
                    + (self.group1()[0] * other.group3()[3])
                    + (self.group1()[1] * other.group2()[2])
                    - (self.group1()[2] * other.group2()[1])
                    + (self.group1()[3] * other.group2()[0])),
                (-(self.group2()[0] * other.group1()[2]) - (self.group2()[0] * other.group3()[2])
                    + (self.group2()[1] * other.group0()[3])
                    + (self.group2()[1] * other.group1()[3])
                    + (self.group2()[2] * other.group1()[0])
                    + (self.group2()[2] * other.group3()[0])
                    - (self.group1()[0] * other.group2()[2])
                    + (self.group1()[1] * other.group3()[3])
                    + (self.group1()[2] * other.group2()[0])
                    + (self.group1()[3] * other.group2()[1])),
                ((self.group2()[0] * other.group1()[1]) + (self.group2()[0] * other.group3()[1]) - (self.group2()[1] * other.group1()[0]) - (self.group2()[1] * other.group3()[0])
                    + (self.group2()[2] * other.group0()[3])
                    + (self.group2()[2] * other.group1()[3])
                    + (self.group1()[0] * other.group2()[1])
                    - (self.group1()[1] * other.group2()[0])
                    + (self.group1()[2] * other.group3()[3])
                    + (self.group1()[3] * other.group2()[2])),
                (-(self.group0()[0] * other.group1()[0]) + (self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group1()[1])
                    + (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group1()[2])
                    + (self.group0()[2] * other.group3()[2])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group2()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group2()[2])
                    - (self.group0()[2] * other.group2()[1])
                    - (self.group2()[0] * other.group2()[3])
                    - (self.group2()[1] * other.group0()[2])
                    + (self.group2()[2] * other.group0()[1])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group3()[2])
                    - (self.group1()[2] * other.group3()[1])
                    - (self.group1()[3] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[2])
                    + (self.group0()[1] * other.group3()[3])
                    + (self.group0()[2] * other.group2()[0])
                    + (self.group2()[0] * other.group0()[2])
                    - (self.group2()[1] * other.group2()[3])
                    - (self.group2()[2] * other.group0()[0])
                    - (self.group1()[0] * other.group3()[2])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group3()[0])
                    - (self.group1()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) + (self.group0()[2] * other.group3()[3]) - (self.group2()[0] * other.group0()[1])
                    + (self.group2()[1] * other.group0()[0])
                    - (self.group2()[2] * other.group2()[3])
                    + (self.group1()[0] * other.group3()[1])
                    - (self.group1()[1] * other.group3()[0])
                    + (self.group1()[2] * other.group1()[3])
                    - (self.group1()[3] * other.group1()[2])),
                (-(self.group2()[0] * other.group1()[0])
                    - (self.group2()[0] * other.group3()[0])
                    - (self.group2()[1] * other.group1()[1])
                    - (self.group2()[1] * other.group3()[1])
                    - (self.group2()[2] * other.group1()[2])
                    - (self.group2()[2] * other.group3()[2])
                    - (self.group1()[0] * other.group2()[0])
                    - (self.group1()[1] * other.group2()[1])
                    - (self.group1()[2] * other.group2()[2])
                    + (self.group1()[3] * other.group3()[3])),
            ]),
        );
    }
}
impl InfixGeometricAntiProduct for CircleRotor {}
impl GeometricAntiProduct<AntiCircleRotor> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      105      121        0
    fn geometric_anti_product(self, other: AntiCircleRotor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[1])
                    - (self.group0()[0] * other.group1()[3])
                    + (self.group0()[0] * other.group2()[3])
                    + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group1()[3]) + (other.group0()[1] * self.group2()[3])
                    - (other.group0()[2] * self.group1()[0])
                    - (self.group0()[0] * other.group1()[2])
                    - (self.group0()[1] * other.group1()[3])
                    + (self.group0()[1] * other.group2()[3])
                    + (self.group0()[2] * other.group1()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) - (other.group0()[2] * self.group1()[3])
                    + (other.group0()[2] * self.group2()[3])
                    + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])
                    - (self.group0()[2] * other.group1()[3])
                    + (self.group0()[2] * other.group2()[3])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])
                    + (other.group2()[3] * self.group2()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1]) + (self.group0()[1] * other.group2()[2])
                    - (self.group0()[2] * other.group2()[1])
                    + (other.group1()[0] * self.group2()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group2()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group2()[0]) - (self.group0()[0] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[0])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group2()[3])
                    - (other.group1()[2] * self.group1()[0])
                    + (other.group2()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) + (self.group0()[0] * other.group2()[1])
                    - (self.group0()[1] * other.group2()[0])
                    - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group2()[3])
                    + (other.group2()[3] * self.group1()[2])),
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    + (other.group1()[3] * self.group2()[3])
                    - (other.group2()[3] * self.group1()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group1()[1] * self.group2()[2])
                    + (other.group1()[2] * self.group2()[1])
                    + (other.group1()[3] * self.group2()[0])
                    + (other.group2()[0] * self.group1()[3])
                    + (other.group2()[0] * self.group2()[3])
                    - (other.group2()[1] * self.group1()[2])
                    + (other.group2()[2] * self.group1()[1])
                    + (other.group2()[3] * self.group2()[0])),
                ((other.group1()[0] * self.group2()[2]) - (other.group1()[2] * self.group2()[0])
                    + (other.group1()[3] * self.group2()[1])
                    + (other.group2()[0] * self.group1()[2])
                    + (other.group2()[1] * self.group1()[3])
                    + (other.group2()[1] * self.group2()[3])
                    - (other.group2()[2] * self.group1()[0])
                    + (other.group2()[3] * self.group2()[1])),
                (-(other.group1()[0] * self.group2()[1]) + (other.group1()[1] * self.group2()[0]) + (other.group1()[3] * self.group2()[2])
                    - (other.group2()[0] * self.group1()[1])
                    + (other.group2()[1] * self.group1()[0])
                    + (other.group2()[2] * self.group1()[3])
                    + (other.group2()[2] * self.group2()[3])
                    + (other.group2()[3] * self.group2()[2])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1]) + (self.group0()[1] * other.group2()[2])
                    - (self.group0()[2] * other.group2()[1])
                    - (other.group1()[0] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group0()[2] * self.group2()[0]) - (self.group0()[0] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[0])
                    - (other.group1()[1] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) + (self.group0()[0] * other.group2()[1])
                    - (self.group0()[1] * other.group2()[0])
                    - (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])),
                (-(other.group1()[0] * self.group2()[0])
                    - (other.group1()[1] * self.group2()[1])
                    - (other.group1()[2] * self.group2()[2])
                    - (other.group2()[0] * self.group1()[0])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[2] * self.group1()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDipoleInversion> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      149      165        0
    fn geometric_anti_product(self, other: AntiDipoleInversion) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (self.group0()[0] * other.group1()[3])
                    + (self.group0()[1] * other.group1()[2])
                    + (self.group0()[1] * other.group3()[2])
                    - (self.group0()[2] * other.group1()[1])
                    - (self.group0()[2] * other.group3()[1])
                    + (other.group2()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group1()[3]) + (other.group0()[1] * self.group2()[3])
                    - (other.group0()[2] * self.group1()[0])
                    - (self.group0()[0] * other.group1()[2])
                    - (self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group0()[2] * other.group3()[0])
                    + (other.group2()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) - (other.group0()[2] * self.group1()[3])
                    + (other.group0()[2] * self.group2()[3])
                    + (self.group0()[0] * other.group1()[1])
                    + (self.group0()[0] * other.group3()[1])
                    - (self.group0()[1] * other.group1()[0])
                    - (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (other.group2()[3] * self.group1()[2])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    + (other.group1()[3] * self.group1()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[1])
                    + (self.group0()[0] * other.group3()[3])
                    + (self.group0()[1] * other.group2()[2])
                    - (self.group0()[2] * other.group2()[1])
                    + (other.group1()[0] * self.group2()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group2()[3] * self.group2()[0])
                    + (other.group3()[0] * self.group1()[3])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group2()[0]) - (self.group0()[0] * other.group2()[2])
                    + (self.group0()[1] * other.group3()[3])
                    + (self.group0()[2] * other.group2()[0])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group2()[3])
                    - (other.group1()[2] * self.group1()[0])
                    + (other.group2()[3] * self.group2()[1])
                    + (other.group3()[1] * self.group1()[3])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) + (self.group0()[0] * other.group2()[1])
                    - (self.group0()[1] * other.group2()[0])
                    + (self.group0()[2] * other.group3()[3])
                    - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group2()[3])
                    + (other.group2()[3] * self.group2()[2])
                    + (other.group3()[2] * self.group1()[3])),
                (-(other.group0()[0] * self.group2()[0]) - (other.group0()[1] * self.group2()[1]) - (other.group0()[2] * self.group2()[2])
                    + (self.group0()[0] * other.group2()[0])
                    + (self.group0()[1] * other.group2()[1])
                    + (self.group0()[2] * other.group2()[2])
                    + (other.group1()[3] * self.group2()[3])
                    - (other.group3()[0] * self.group1()[0])
                    - (other.group3()[1] * self.group1()[1])
                    - (other.group3()[2] * self.group1()[2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(other.group1()[1] * self.group2()[2]) + (other.group1()[2] * self.group2()[1]) - (other.group1()[3] * self.group2()[0])
                    + (other.group2()[0] * self.group1()[3])
                    + (other.group2()[0] * self.group2()[3])
                    - (other.group2()[1] * self.group1()[2])
                    + (other.group2()[2] * self.group1()[1])
                    + (other.group3()[1] * self.group2()[2])
                    - (other.group3()[2] * self.group2()[1])
                    + (other.group3()[3] * self.group1()[0])),
                ((other.group1()[0] * self.group2()[2]) - (other.group1()[2] * self.group2()[0]) - (other.group1()[3] * self.group2()[1])
                    + (other.group2()[0] * self.group1()[2])
                    + (other.group2()[1] * self.group1()[3])
                    + (other.group2()[1] * self.group2()[3])
                    - (other.group2()[2] * self.group1()[0])
                    - (other.group3()[0] * self.group2()[2])
                    + (other.group3()[2] * self.group2()[0])
                    + (other.group3()[3] * self.group1()[1])),
                (-(other.group1()[0] * self.group2()[1]) + (other.group1()[1] * self.group2()[0])
                    - (other.group1()[3] * self.group2()[2])
                    - (other.group2()[0] * self.group1()[1])
                    + (other.group2()[1] * self.group1()[0])
                    + (other.group2()[2] * self.group1()[3])
                    + (other.group2()[2] * self.group2()[3])
                    + (other.group3()[0] * self.group2()[1])
                    - (other.group3()[1] * self.group2()[0])
                    + (other.group3()[3] * self.group1()[2])),
                (-(other.group1()[0] * self.group2()[0])
                    - (other.group1()[1] * self.group2()[1])
                    - (other.group1()[2] * self.group2()[2])
                    - (other.group2()[0] * self.group1()[0])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[2] * self.group1()[2])
                    + (other.group3()[0] * self.group2()[0])
                    + (other.group3()[1] * self.group2()[1])
                    + (other.group3()[2] * self.group2()[2])
                    + (other.group3()[3] * self.group1()[3])
                    + (other.group3()[3] * self.group2()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1])
                    - (self.group0()[0] * other.group3()[3])
                    - (self.group0()[1] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[1])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[0])
                    + (other.group2()[3] * self.group2()[0])
                    + (other.group3()[0] * self.group2()[3])
                    - (other.group3()[1] * self.group1()[2])
                    + (other.group3()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group2()[0]) + (self.group0()[0] * other.group2()[2])
                    - (self.group0()[1] * other.group3()[3])
                    - (self.group0()[2] * other.group2()[0])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[1])
                    + (other.group2()[3] * self.group2()[1])
                    + (other.group3()[0] * self.group1()[2])
                    + (other.group3()[1] * self.group2()[3])
                    - (other.group3()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) - (self.group0()[0] * other.group2()[1])
                    + (self.group0()[1] * other.group2()[0])
                    - (self.group0()[2] * other.group3()[3])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])
                    + (other.group2()[3] * self.group2()[2])
                    - (other.group3()[0] * self.group1()[1])
                    + (other.group3()[1] * self.group1()[0])
                    + (other.group3()[2] * self.group2()[3])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[0] * other.group3()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])
                    - (other.group2()[3] * self.group1()[3])
                    + (other.group2()[3] * self.group2()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        7       26        0
    fn geometric_anti_product(self, other: AntiDualNum) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[2])),
                (other.group0()[1] * self.group2()[3]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[1] * self.group2()[0]),
                (other.group0()[1] * self.group2()[1]),
                (other.group0()[1] * self.group2()[2]),
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[0] * self.group2()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group2()[0] * -1.0),
                (other.group0()[0] * self.group2()[1] * -1.0),
                (other.group0()[0] * self.group2()[2] * -1.0),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiFlatPoint> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       29       44        0
    fn geometric_anti_product(self, other: AntiFlatPoint) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (other.group0()[3] * self.group1()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) + (other.group0()[3] * self.group2()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1])
                    - (other.group0()[3] * self.group2()[0])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group1()[3]) + (other.group0()[1] * self.group2()[3])
                    - (other.group0()[2] * self.group1()[0])
                    - (other.group0()[3] * self.group2()[1])),
                (-(other.group0()[0] * self.group1()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (other.group0()[2] * self.group2()[3])
                    - (other.group0()[3] * self.group2()[2])),
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1]) + (other.group0()[3] * self.group1()[0])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0]) + (other.group0()[3] * self.group1()[1])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) + (other.group0()[3] * self.group1()[2])),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiFlector> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       72       88        0
    fn geometric_anti_product(self, other: AntiFlector) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[3]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (other.group0()[3] * self.group1()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (other.group1()[0] * self.group1()[3])),
                (-(self.group0()[0] * other.group0()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group0()[0])
                    + (other.group1()[1] * self.group1()[3])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group1()[3]) + (other.group1()[2] * self.group1()[3])),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) + (other.group0()[3] * self.group2()[3])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1])
                    - (other.group0()[3] * self.group2()[0])
                    + (other.group1()[1] * self.group2()[2])
                    - (other.group1()[2] * self.group2()[1])
                    + (other.group1()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group1()[3]) + (other.group0()[1] * self.group2()[3])
                    - (other.group0()[2] * self.group1()[0])
                    - (other.group0()[3] * self.group2()[1])
                    - (other.group1()[0] * self.group2()[2])
                    + (other.group1()[2] * self.group2()[0])
                    + (other.group1()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group1()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (other.group0()[2] * self.group2()[3])
                    - (other.group0()[3] * self.group2()[2])
                    + (other.group1()[0] * self.group2()[1])
                    - (other.group1()[1] * self.group2()[0])
                    + (other.group1()[3] * self.group1()[2])),
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])
                    + (other.group1()[0] * self.group2()[0])
                    + (other.group1()[1] * self.group2()[1])
                    + (other.group1()[2] * self.group2()[2])
                    + (other.group1()[3] * self.group1()[3])
                    + (other.group1()[3] * self.group2()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group0()[2])
                    + (self.group0()[2] * other.group0()[1])
                    + (other.group0()[3] * self.group1()[0])
                    + (other.group1()[0] * self.group2()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group0()[0])
                    + (other.group0()[3] * self.group1()[1])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group2()[3])
                    - (other.group1()[2] * self.group1()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group1()[3])
                    + (other.group0()[3] * self.group1()[2])
                    - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group2()[3])),
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiLine> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       50       66        0
    fn geometric_anti_product(self, other: AntiLine) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group2()[3]) - (other.group0()[2] * self.group1()[0]) + (other.group1()[0] * self.group0()[2])
                    - (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group2()[3])
                    - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])),
                (-(other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[1])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[0] * self.group2()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group2()[0])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[1] * self.group2()[3])
                    - (other.group1()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[2] * self.group2()[3])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1])),
                (-(other.group0()[1] * self.group1()[3]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[2] * self.group1()[3]) - (other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiMotor> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       72       88        0
    fn geometric_anti_product(self, other: AntiMotor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[3]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    + (other.group0()[3] * self.group2()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) + (other.group0()[0] * self.group2()[3])
                    - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (other.group0()[3] * self.group1()[0])),
                (-(self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (other.group0()[0] * self.group1()[2])
                    + (other.group0()[1] * self.group2()[3])
                    - (other.group0()[2] * self.group1()[0])
                    + (other.group0()[3] * self.group1()[1])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[3]) - (other.group0()[0] * self.group1()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group2()[3])
                    + (other.group0()[3] * self.group1()[2])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[3] * self.group1()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[1])
                    + (other.group0()[3] * self.group2()[0])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[0] * self.group2()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group1()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group2()[0])
                    + (other.group0()[3] * self.group2()[1])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[1] * self.group2()[3])
                    - (other.group1()[2] * self.group1()[0])
                    + (other.group1()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) + (other.group0()[3] * self.group2()[2])
                    - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[2] * self.group2()[3])
                    + (other.group1()[3] * self.group1()[2])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) - (other.group0()[0] * self.group1()[3])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group1()[0])
                    - (other.group0()[1] * self.group1()[3])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[3]) - (other.group0()[2] * self.group1()[3])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    + (other.group1()[3] * self.group1()[3])
                    + (other.group1()[3] * self.group2()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiPlane> for CircleRotor {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       29       44        0
    fn geometric_anti_product(self, other: AntiPlane) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (other.group0()[0] * self.group1()[3])),
                ((self.group0()[1] * other.group0()[3]) + (other.group0()[1] * self.group1()[3])),
                ((self.group0()[2] * other.group0()[3]) + (other.group0()[2] * self.group1()[3])),
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1]) + (other.group0()[3] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group0()[2] * self.group2()[0]) + (other.group0()[3] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) + (other.group0()[3] * self.group1()[2])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) + (other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[1])),
                (-(self.group0()[1] * other.group0()[3]) + (other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group2()[3])
                    - (other.group0()[2] * self.group1()[0])),
                (-(self.group0()[2] * other.group0()[3]) - (other.group0()[0] * self.group1()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group2()[3])),
                ((other.group0()[0] * self.group2()[0])
                    + (other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])
                    + (other.group0()[3] * self.group1()[3])
                    + (other.group0()[3] * self.group2()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiScalar> for CircleRotor {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0       11        0
    fn geometric_anti_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from([(self.group0()[0] * other[e12345]), (self.group0()[1] * other[e12345]), (self.group0()[2] * other[e12345])]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group1()[0] * other[e12345]),
                (self.group1()[1] * other[e12345]),
                (self.group1()[2] * other[e12345]),
                (self.group1()[3] * other[e12345]),
            ]),
            // e235, e315, e125, e12345
            Simd32x4::from([
                (self.group2()[0] * other[e12345]),
                (self.group2()[1] * other[e12345]),
                (self.group2()[2] * other[e12345]),
                (self.group2()[3] * other[e12345]),
            ]),
        );
    }
}
impl GeometricAntiProduct<Circle> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       94      110        0
    fn geometric_anti_product(self, other: Circle) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (self.group0()[0] * other.group1()[3])
                    + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group1()[3]) + (other.group0()[1] * self.group2()[3])
                    - (other.group0()[2] * self.group1()[0])
                    - (self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) - (other.group0()[2] * self.group1()[3])
                    + (other.group0()[2] * self.group2()[3])
                    + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])
                    + (self.group0()[2] * other.group1()[3])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    + (other.group1()[3] * self.group1()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1]) - (other.group2()[1] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[1])
                    + (other.group1()[0] * self.group2()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group2()[0]) + (other.group2()[0] * self.group0()[2]) - (other.group2()[2] * self.group0()[0])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group2()[3])
                    - (other.group1()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) - (other.group2()[0] * self.group0()[1])
                    + (other.group2()[1] * self.group0()[0])
                    - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group2()[3])),
                (-(other.group0()[0] * self.group2()[0]) - (other.group0()[1] * self.group2()[1]) - (other.group0()[2] * self.group2()[2])
                    + (other.group2()[0] * self.group0()[0])
                    + (other.group2()[1] * self.group0()[1])
                    + (other.group2()[2] * self.group0()[2])
                    + (other.group1()[3] * self.group2()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((other.group2()[0] * self.group1()[3]) + (other.group2()[0] * self.group2()[3]) - (other.group2()[1] * self.group1()[2]) + (other.group2()[2] * self.group1()[1])
                    - (other.group1()[1] * self.group2()[2])
                    + (other.group1()[2] * self.group2()[1])
                    - (other.group1()[3] * self.group2()[0])),
                ((other.group2()[0] * self.group1()[2]) + (other.group2()[1] * self.group1()[3]) + (other.group2()[1] * self.group2()[3]) - (other.group2()[2] * self.group1()[0])
                    + (other.group1()[0] * self.group2()[2])
                    - (other.group1()[2] * self.group2()[0])
                    - (other.group1()[3] * self.group2()[1])),
                (-(other.group2()[0] * self.group1()[1])
                    + (other.group2()[1] * self.group1()[0])
                    + (other.group2()[2] * self.group1()[3])
                    + (other.group2()[2] * self.group2()[3])
                    - (other.group1()[0] * self.group2()[1])
                    + (other.group1()[1] * self.group2()[0])
                    - (other.group1()[3] * self.group2()[2])),
                (-(other.group2()[0] * self.group1()[0])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group1()[0] * self.group2()[0])
                    - (other.group1()[1] * self.group2()[1])
                    - (other.group1()[2] * self.group2()[2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1]) + (other.group2()[1] * self.group0()[2])
                    - (other.group2()[2] * self.group0()[1])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group2()[0]) - (other.group2()[0] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[0])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) + (other.group2()[0] * self.group0()[1])
                    - (other.group2()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<CircleRotor> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      105      121        0
    fn geometric_anti_product(self, other: CircleRotor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (self.group0()[0] * other.group1()[3])
                    + (self.group0()[0] * other.group2()[3])
                    + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group1()[3]) + (other.group0()[1] * self.group2()[3])
                    - (other.group0()[2] * self.group1()[0])
                    - (self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[1] * other.group2()[3])
                    + (self.group0()[2] * other.group1()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) - (other.group0()[2] * self.group1()[3])
                    + (other.group0()[2] * self.group2()[3])
                    + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group0()[2] * other.group2()[3])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    + (other.group1()[3] * self.group1()[3])
                    + (other.group2()[3] * self.group2()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1]) + (self.group0()[1] * other.group2()[2])
                    - (self.group0()[2] * other.group2()[1])
                    + (other.group1()[0] * self.group2()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group2()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group2()[0]) - (self.group0()[0] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[0])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group2()[3])
                    - (other.group1()[2] * self.group1()[0])
                    + (other.group2()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) + (self.group0()[0] * other.group2()[1])
                    - (self.group0()[1] * other.group2()[0])
                    - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group2()[3])
                    + (other.group2()[3] * self.group1()[2])),
                (-(other.group0()[0] * self.group2()[0]) - (other.group0()[1] * self.group2()[1]) - (other.group0()[2] * self.group2()[2])
                    + (self.group0()[0] * other.group2()[0])
                    + (self.group0()[1] * other.group2()[1])
                    + (self.group0()[2] * other.group2()[2])
                    + (other.group1()[3] * self.group2()[3])
                    + (other.group2()[3] * self.group1()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(other.group1()[1] * self.group2()[2]) + (other.group1()[2] * self.group2()[1]) - (other.group1()[3] * self.group2()[0])
                    + (other.group2()[0] * self.group1()[3])
                    + (other.group2()[0] * self.group2()[3])
                    - (other.group2()[1] * self.group1()[2])
                    + (other.group2()[2] * self.group1()[1])
                    + (other.group2()[3] * self.group2()[0])),
                ((other.group1()[0] * self.group2()[2]) - (other.group1()[2] * self.group2()[0]) - (other.group1()[3] * self.group2()[1])
                    + (other.group2()[0] * self.group1()[2])
                    + (other.group2()[1] * self.group1()[3])
                    + (other.group2()[1] * self.group2()[3])
                    - (other.group2()[2] * self.group1()[0])
                    + (other.group2()[3] * self.group2()[1])),
                (-(other.group1()[0] * self.group2()[1]) + (other.group1()[1] * self.group2()[0])
                    - (other.group1()[3] * self.group2()[2])
                    - (other.group2()[0] * self.group1()[1])
                    + (other.group2()[1] * self.group1()[0])
                    + (other.group2()[2] * self.group1()[3])
                    + (other.group2()[2] * self.group2()[3])
                    + (other.group2()[3] * self.group2()[2])),
                (-(other.group1()[0] * self.group2()[0])
                    - (other.group1()[1] * self.group2()[1])
                    - (other.group1()[2] * self.group2()[2])
                    - (other.group2()[0] * self.group1()[0])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[2] * self.group1()[2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1]) - (self.group0()[1] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[1])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group2()[0]) + (self.group0()[0] * other.group2()[2]) - (self.group0()[2] * other.group2()[0])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) - (self.group0()[0] * other.group2()[1])
                    + (self.group0()[1] * other.group2()[0])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Dipole> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       94      110        0
    fn geometric_anti_product(self, other: Dipole) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])
                    - (other.group0()[0] * self.group1()[3])
                    + (other.group0()[0] * self.group2()[3])
                    - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (other.group0()[0] * self.group1()[2])
                    - (other.group0()[1] * self.group1()[3])
                    + (other.group0()[1] * self.group2()[3])
                    - (other.group0()[2] * self.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group1()[3]) - (other.group0()[0] * self.group1()[1])
                    + (other.group0()[1] * self.group1()[0])
                    - (other.group0()[2] * self.group1()[3])
                    + (other.group0()[2] * self.group2()[3])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1]) - (other.group0()[1] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[1])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])
                    + (self.group2()[3] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[2] * other.group2()[0]) + (other.group0()[0] * self.group2()[2])
                    - (other.group0()[2] * self.group2()[0])
                    - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[2] * other.group1()[0])
                    + (self.group2()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) - (other.group0()[0] * self.group2()[1])
                    + (other.group0()[1] * self.group2()[0])
                    + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[0])
                    + (self.group2()[3] * other.group1()[2])),
                (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])
                    + (other.group0()[0] * self.group2()[0])
                    + (other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])
                    + (self.group2()[3] * other.group1()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group2()[0] * self.group1()[3]) + (other.group2()[0] * self.group2()[3]) - (other.group2()[1] * self.group1()[2])
                    + (other.group2()[2] * self.group1()[1])
                    + (self.group2()[0] * other.group1()[3])
                    + (self.group2()[1] * other.group1()[2])
                    - (self.group2()[2] * other.group1()[1])),
                ((other.group2()[0] * self.group1()[2]) + (other.group2()[1] * self.group1()[3]) + (other.group2()[1] * self.group2()[3])
                    - (other.group2()[2] * self.group1()[0])
                    - (self.group2()[0] * other.group1()[2])
                    + (self.group2()[1] * other.group1()[3])
                    + (self.group2()[2] * other.group1()[0])),
                (-(other.group2()[0] * self.group1()[1])
                    + (other.group2()[1] * self.group1()[0])
                    + (other.group2()[2] * self.group1()[3])
                    + (other.group2()[2] * self.group2()[3])
                    + (self.group2()[0] * other.group1()[1])
                    - (self.group2()[1] * other.group1()[0])
                    + (self.group2()[2] * other.group1()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1]) + (other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1])
                    + (self.group1()[0] * other.group1()[3])
                    - (self.group1()[3] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[2] * other.group2()[0]) - (other.group0()[0] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[0])
                    + (self.group1()[1] * other.group1()[3])
                    - (self.group1()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) + (other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0])
                    + (self.group1()[2] * other.group1()[3])
                    - (self.group1()[3] * other.group1()[2])),
                (-(other.group2()[0] * self.group1()[0])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (self.group2()[0] * other.group1()[0])
                    - (self.group2()[1] * other.group1()[1])
                    - (self.group2()[2] * other.group1()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<DipoleInversion> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      149      165        0
    fn geometric_anti_product(self, other: DipoleInversion) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[1] * other.group3()[2])
                    - (self.group0()[2] * other.group1()[1])
                    + (self.group0()[2] * other.group3()[1])
                    - (other.group0()[0] * self.group1()[3])
                    + (other.group0()[0] * self.group2()[3])
                    - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (self.group1()[0] * other.group2()[3])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[0] * other.group3()[2]) - (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    - (self.group0()[2] * other.group3()[0])
                    + (other.group0()[0] * self.group1()[2])
                    - (other.group0()[1] * self.group1()[3])
                    + (other.group0()[1] * self.group2()[3])
                    - (other.group0()[2] * self.group1()[0])
                    + (self.group1()[1] * other.group2()[3])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group0()[1] * other.group3()[0])
                    - (self.group0()[2] * other.group1()[3])
                    - (other.group0()[0] * self.group1()[1])
                    + (other.group0()[1] * self.group1()[0])
                    - (other.group0()[2] * self.group1()[3])
                    + (other.group0()[2] * self.group2()[3])
                    + (self.group1()[2] * other.group2()[3])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1]) - (other.group0()[1] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[1])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])
                    - (self.group1()[3] * other.group3()[0])
                    + (self.group2()[0] * other.group2()[3])
                    + (self.group2()[3] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[2])
                    + (self.group0()[1] * other.group3()[3])
                    + (self.group0()[2] * other.group2()[0])
                    + (other.group0()[0] * self.group2()[2])
                    - (other.group0()[2] * self.group2()[0])
                    - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[2] * other.group1()[0])
                    - (self.group1()[3] * other.group3()[1])
                    + (self.group2()[1] * other.group2()[3])
                    + (self.group2()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) + (self.group0()[2] * other.group3()[3]) - (other.group0()[0] * self.group2()[1])
                    + (other.group0()[1] * self.group2()[0])
                    + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[0])
                    - (self.group1()[3] * other.group3()[2])
                    + (self.group2()[2] * other.group2()[3])
                    + (self.group2()[3] * other.group1()[2])),
                (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])
                    + (other.group0()[0] * self.group2()[0])
                    + (other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])
                    - (self.group1()[0] * other.group3()[0])
                    - (self.group1()[1] * other.group3()[1])
                    - (self.group1()[2] * other.group3()[2])
                    + (self.group2()[3] * other.group1()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group1()[0] * other.group3()[3]) + (self.group1()[1] * other.group2()[2]) - (self.group1()[2] * other.group2()[1])
                    + (self.group1()[3] * other.group2()[0])
                    + (self.group2()[0] * other.group1()[3])
                    + (self.group2()[1] * other.group1()[2])
                    + (self.group2()[1] * other.group3()[2])
                    - (self.group2()[2] * other.group1()[1])
                    - (self.group2()[2] * other.group3()[1])
                    + (self.group2()[3] * other.group2()[0])),
                (-(self.group1()[0] * other.group2()[2])
                    + (self.group1()[1] * other.group3()[3])
                    + (self.group1()[2] * other.group2()[0])
                    + (self.group1()[3] * other.group2()[1])
                    - (self.group2()[0] * other.group1()[2])
                    - (self.group2()[0] * other.group3()[2])
                    + (self.group2()[1] * other.group1()[3])
                    + (self.group2()[2] * other.group1()[0])
                    + (self.group2()[2] * other.group3()[0])
                    + (self.group2()[3] * other.group2()[1])),
                ((self.group1()[0] * other.group2()[1]) - (self.group1()[1] * other.group2()[0])
                    + (self.group1()[2] * other.group3()[3])
                    + (self.group1()[3] * other.group2()[2])
                    + (self.group2()[0] * other.group1()[1])
                    + (self.group2()[0] * other.group3()[1])
                    - (self.group2()[1] * other.group1()[0])
                    - (self.group2()[1] * other.group3()[0])
                    + (self.group2()[2] * other.group1()[3])
                    + (self.group2()[3] * other.group2()[2])),
                (-(self.group0()[0] * other.group1()[0]) + (self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group1()[1])
                    + (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group1()[2])
                    + (self.group0()[2] * other.group3()[2])
                    - (other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group1()[3] * other.group2()[3])
                    + (self.group2()[3] * other.group2()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1]) + (other.group0()[1] * self.group2()[2])
                    - (other.group0()[2] * self.group2()[1])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group3()[2])
                    - (self.group1()[2] * other.group3()[1])
                    - (self.group1()[3] * other.group1()[0])
                    - (self.group2()[0] * other.group2()[3])
                    + (self.group2()[3] * other.group3()[0])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group3()[3]) + (self.group0()[2] * other.group2()[0])
                    - (other.group0()[0] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[0])
                    - (self.group1()[0] * other.group3()[2])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group3()[0])
                    - (self.group1()[3] * other.group1()[1])
                    - (self.group2()[1] * other.group2()[3])
                    + (self.group2()[3] * other.group3()[1])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) + (self.group0()[2] * other.group3()[3]) + (other.group0()[0] * self.group2()[1])
                    - (other.group0()[1] * self.group2()[0])
                    + (self.group1()[0] * other.group3()[1])
                    - (self.group1()[1] * other.group3()[0])
                    + (self.group1()[2] * other.group1()[3])
                    - (self.group1()[3] * other.group1()[2])
                    - (self.group2()[2] * other.group2()[3])
                    + (self.group2()[3] * other.group3()[2])),
                (-(self.group1()[0] * other.group2()[0]) - (self.group1()[1] * other.group2()[1]) - (self.group1()[2] * other.group2()[2])
                    + (self.group1()[3] * other.group3()[3])
                    - (self.group2()[0] * other.group1()[0])
                    - (self.group2()[0] * other.group3()[0])
                    - (self.group2()[1] * other.group1()[1])
                    - (self.group2()[1] * other.group3()[1])
                    - (self.group2()[2] * other.group1()[2])
                    - (self.group2()[2] * other.group3()[2])
                    + (self.group2()[3] * other.group3()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<DualNum> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        7       22        0
    fn geometric_anti_product(self, other: DualNum) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[2])),
                (other.group0()[1] * self.group2()[3]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other.group0()[1] * self.group2()[0]),
                (other.group0()[1] * self.group2()[1]),
                (other.group0()[1] * self.group2()[2]),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[0] * self.group2()[0]),
                (other.group0()[0] * self.group2()[1]),
                (other.group0()[0] * self.group2()[2]),
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[0] * self.group2()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<FlatPoint> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       29       47        0
    fn geometric_anti_product(self, other: FlatPoint) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group2()[3] * other.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])
                    + (self.group1()[3] * other.group0()[0])
                    + (self.group2()[0] * other.group0()[3])
                    + (self.group2()[3] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[0])
                    + (self.group1()[3] * other.group0()[1])
                    + (self.group2()[1] * other.group0()[3])
                    + (self.group2()[3] * other.group0()[1])),
                ((self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])
                    + (self.group1()[3] * other.group0()[2])
                    + (self.group2()[2] * other.group0()[3])
                    + (self.group2()[3] * other.group0()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (self.group1()[0] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[3])),
                (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Flector> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       72       88        0
    fn geometric_anti_product(self, other: Flector) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group0()[3]) - (self.group0()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) - (self.group1()[3] * other.group1()[0])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group0()[0])
                    - (self.group1()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group1()[3]) - (self.group1()[3] * other.group1()[2])),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])
                    + (self.group2()[3] * other.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group1()[0] * other.group1()[3]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])
                    + (self.group1()[3] * other.group0()[0])
                    + (self.group2()[0] * other.group0()[3])
                    + (self.group2()[1] * other.group1()[2])
                    - (self.group2()[2] * other.group1()[1])
                    + (self.group2()[3] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[2])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group0()[0])
                    + (self.group1()[3] * other.group0()[1])
                    - (self.group2()[0] * other.group1()[2])
                    + (self.group2()[1] * other.group0()[3])
                    + (self.group2()[2] * other.group1()[0])
                    + (self.group2()[3] * other.group0()[1])),
                ((self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])
                    + (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group0()[2])
                    + (self.group2()[0] * other.group1()[1])
                    - (self.group2()[1] * other.group1()[0])
                    + (self.group2()[2] * other.group0()[3])
                    + (self.group2()[3] * other.group0()[2])),
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1]) + (self.group0()[2] * other.group1()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])
                    + (self.group1()[0] * other.group0()[3])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])
                    + (self.group2()[3] * other.group1()[0])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group0()[0])
                    - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group1()[2] * other.group1()[0])
                    + (self.group2()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group1()[3]) + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[0])
                    + (self.group1()[2] * other.group0()[3])
                    + (self.group2()[3] * other.group1()[2])),
                (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])
                    + (self.group1()[3] * other.group1()[3])
                    - (self.group2()[0] * other.group1()[0])
                    - (self.group2()[1] * other.group1()[1])
                    - (self.group2()[2] * other.group1()[2])
                    + (self.group2()[3] * other.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Line> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       50       66        0
    fn geometric_anti_product(self, other: Line) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) + (other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[1])),
                (-(self.group0()[0] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[0])
                    + (other.group0()[0] * self.group1()[2])
                    + (other.group0()[1] * self.group2()[3])
                    - (other.group0()[2] * self.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) - (other.group0()[0] * self.group1()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group2()[3])),
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1]) + (self.group0()[2] * other.group1()[2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[1])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[0] * self.group2()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group2()[0])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[1] * self.group2()[3])
                    - (other.group1()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[2] * self.group2()[3])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1]) + (other.group0()[0] * self.group1()[3])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0]) + (other.group0()[1] * self.group1()[3])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) + (other.group0()[2] * self.group1()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Motor> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       72       88        0
    fn geometric_anti_product(self, other: Motor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[3]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])
                    + (self.group2()[3] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])
                    + (self.group1()[0] * other.group0()[3])
                    + (self.group1()[1] * other.group0()[2])
                    - (self.group1()[2] * other.group0()[1])
                    + (self.group2()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group1()[0])
                    - (self.group1()[0] * other.group0()[2])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group1()[2] * other.group0()[0])
                    + (self.group2()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[3]) + (self.group1()[0] * other.group0()[1])
                    - (self.group1()[1] * other.group0()[0])
                    + (self.group1()[2] * other.group0()[3])
                    + (self.group2()[3] * other.group0()[2])),
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1]) + (self.group0()[2] * other.group1()[2]) + (self.group1()[3] * other.group0()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group1()[0] * other.group1()[3]) + (self.group1()[1] * other.group1()[2]) - (self.group1()[2] * other.group1()[1])
                    + (self.group1()[3] * other.group1()[0])
                    + (self.group2()[0] * other.group0()[3])
                    + (self.group2()[1] * other.group0()[2])
                    - (self.group2()[2] * other.group0()[1])
                    + (self.group2()[3] * other.group1()[0])),
                (-(self.group1()[0] * other.group1()[2])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group1()[0])
                    + (self.group1()[3] * other.group1()[1])
                    - (self.group2()[0] * other.group0()[2])
                    + (self.group2()[1] * other.group0()[3])
                    + (self.group2()[2] * other.group0()[0])
                    + (self.group2()[3] * other.group1()[1])),
                ((self.group1()[0] * other.group1()[1]) - (self.group1()[1] * other.group1()[0])
                    + (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])
                    + (self.group2()[0] * other.group0()[1])
                    - (self.group2()[1] * other.group0()[0])
                    + (self.group2()[2] * other.group0()[3])
                    + (self.group2()[3] * other.group1()[2])),
                (-(self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1]) - (self.group1()[2] * other.group1()[2])
                    + (self.group1()[3] * other.group1()[3])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])
                    + (self.group2()[3] * other.group1()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[1])
                    + (self.group1()[3] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group1()[0]) + (self.group1()[3] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group0()[2])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<MultiVector> for CircleRotor {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      320      352        0
    fn geometric_anti_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((other.group0()[0] * self.group2()[3])
                    - (self.group0()[0] * other.group3()[0])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group3()[2])
                    - (other.group4()[0] * self.group2()[0])
                    - (other.group4()[1] * self.group2()[1])
                    - (other.group4()[2] * self.group2()[2])
                    - (other.group5()[0] * self.group1()[0])
                    - (other.group5()[1] * self.group1()[1])
                    - (other.group5()[2] * self.group1()[2])
                    - (self.group1()[3] * other.group3()[3])),
                ((other.group0()[1] * self.group2()[3])
                    - (self.group0()[0] * other.group8()[0])
                    - (self.group0()[1] * other.group8()[1])
                    - (self.group0()[2] * other.group8()[2])
                    - (other.group7()[0] * self.group2()[0])
                    - (other.group7()[1] * self.group2()[1])
                    - (other.group7()[2] * self.group2()[2])
                    - (self.group1()[0] * other.group6()[0])
                    - (self.group1()[1] * other.group6()[1])
                    - (self.group1()[2] * other.group6()[2])
                    + (self.group1()[3] * other.group6()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[0] * other[e1]) - (self.group0()[1] * other.group8()[2]) + (self.group0()[2] * other.group8()[1]) - (other.group7()[1] * self.group2()[2])
                    + (other.group7()[2] * self.group2()[1])
                    + (self.group1()[0] * other.group6()[3])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])
                    + (self.group1()[3] * other.group6()[0])
                    + (self.group2()[0] * other.group1()[3])
                    + (self.group2()[3] * other.group1()[0])),
                ((self.group0()[0] * other.group8()[2]) - (self.group0()[1] * other[e1]) - (self.group0()[2] * other.group8()[0]) + (other.group7()[0] * self.group2()[2])
                    - (other.group7()[2] * self.group2()[0])
                    - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[1] * other.group6()[3])
                    + (self.group1()[2] * other.group1()[0])
                    + (self.group1()[3] * other.group6()[1])
                    + (self.group2()[1] * other.group1()[3])
                    + (self.group2()[3] * other.group1()[1])),
                (-(self.group0()[0] * other.group8()[1]) + (self.group0()[1] * other.group8()[0]) - (self.group0()[2] * other[e1]) - (other.group7()[0] * self.group2()[1])
                    + (other.group7()[1] * self.group2()[0])
                    + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[0])
                    + (self.group1()[2] * other.group6()[3])
                    + (self.group1()[3] * other.group6()[2])
                    + (self.group2()[2] * other.group1()[3])
                    + (self.group2()[3] * other.group1()[2])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[0] * other.group6()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[1] * other.group6()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group6()[2])
                    - (other.group7()[0] * self.group1()[0])
                    - (other.group7()[1] * self.group1()[1])
                    - (other.group7()[2] * self.group1()[2])
                    - (self.group1()[3] * other.group1()[3])
                    + (self.group2()[3] * other.group1()[3])),
            ]),
            // e5
            (-(other.group8()[0] * self.group1()[0]) - (other.group8()[1] * self.group1()[1]) - (other.group8()[2] * self.group1()[2])
                + (self.group1()[3] * other[e1])
                + (self.group2()[0] * other.group1()[0])
                - (self.group2()[0] * other.group6()[0])
                + (self.group2()[1] * other.group1()[1])
                - (self.group2()[1] * other.group6()[1])
                + (self.group2()[2] * other.group1()[2])
                - (self.group2()[2] * other.group6()[2])
                + (self.group2()[3] * other[e1])),
            // e15, e25, e35, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) - (other.group5()[1] * self.group2()[2])
                    + (other.group5()[2] * self.group2()[1])
                    + (self.group1()[0] * other.group9()[3])
                    + (self.group1()[1] * other.group3()[2])
                    - (self.group1()[2] * other.group3()[1])
                    + (self.group1()[3] * other.group3()[0])
                    + (self.group2()[0] * other.group3()[3])
                    + (self.group2()[1] * other.group9()[2])
                    - (self.group2()[2] * other.group9()[1])
                    + (self.group2()[3] * other.group3()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group5()[0] * self.group2()[2]) - (other.group5()[2] * self.group2()[0]) - (self.group1()[0] * other.group3()[2])
                    + (self.group1()[1] * other.group9()[3])
                    + (self.group1()[2] * other.group3()[0])
                    + (self.group1()[3] * other.group3()[1])
                    - (self.group2()[0] * other.group9()[2])
                    + (self.group2()[1] * other.group3()[3])
                    + (self.group2()[2] * other.group9()[0])
                    + (self.group2()[3] * other.group3()[1])),
                ((other.group0()[0] * self.group2()[2]) - (other.group5()[0] * self.group2()[1]) + (other.group5()[1] * self.group2()[0]) + (self.group1()[0] * other.group3()[1])
                    - (self.group1()[1] * other.group3()[0])
                    + (self.group1()[2] * other.group9()[3])
                    + (self.group1()[3] * other.group3()[2])
                    + (self.group2()[0] * other.group9()[1])
                    - (self.group2()[1] * other.group9()[0])
                    + (self.group2()[2] * other.group3()[3])
                    + (self.group2()[3] * other.group3()[2])),
                (-(other.group0()[0] * self.group1()[3])
                    - (self.group0()[0] * other.group3()[0])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group3()[2])
                    + (other.group4()[0] * self.group2()[0])
                    + (other.group4()[1] * self.group2()[1])
                    + (other.group4()[2] * self.group2()[2])
                    - (self.group1()[0] * other.group9()[0])
                    - (self.group1()[1] * other.group9()[1])
                    - (self.group1()[2] * other.group9()[2])
                    + (self.group2()[3] * other.group3()[3])),
            ]),
            // e41, e42, e43
            Simd32x3::from([
                ((other.group0()[0] * self.group0()[0]) - (self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group5()[2])
                    - (self.group0()[1] * other.group9()[2])
                    - (self.group0()[2] * other.group5()[1])
                    + (self.group0()[2] * other.group9()[1])
                    - (other.group4()[0] * self.group1()[3])
                    + (other.group4()[0] * self.group2()[3])
                    - (other.group4()[1] * self.group1()[2])
                    + (other.group4()[2] * self.group1()[1])
                    + (self.group1()[0] * other[e45])),
                ((other.group0()[0] * self.group0()[1]) - (self.group0()[0] * other.group5()[2]) + (self.group0()[0] * other.group9()[2]) - (self.group0()[1] * other.group3()[3])
                    + (self.group0()[2] * other.group5()[0])
                    - (self.group0()[2] * other.group9()[0])
                    + (other.group4()[0] * self.group1()[2])
                    - (other.group4()[1] * self.group1()[3])
                    + (other.group4()[1] * self.group2()[3])
                    - (other.group4()[2] * self.group1()[0])
                    + (self.group1()[1] * other[e45])),
                ((other.group0()[0] * self.group0()[2]) + (self.group0()[0] * other.group5()[1]) - (self.group0()[0] * other.group9()[1]) - (self.group0()[1] * other.group5()[0])
                    + (self.group0()[1] * other.group9()[0])
                    - (self.group0()[2] * other.group3()[3])
                    - (other.group4()[0] * self.group1()[1])
                    + (other.group4()[1] * self.group1()[0])
                    - (other.group4()[2] * self.group1()[3])
                    + (other.group4()[2] * self.group2()[3])
                    + (self.group1()[2] * other[e45])),
            ]),
            // e23, e31, e12
            Simd32x3::from([
                ((other.group0()[0] * self.group1()[0]) + (self.group0()[0] * other.group9()[3]) + (self.group0()[1] * other.group3()[2])
                    - (self.group0()[2] * other.group3()[1])
                    - (other.group4()[1] * self.group2()[2])
                    + (other.group4()[2] * self.group2()[1])
                    + (other.group5()[0] * self.group2()[3])
                    - (other.group5()[1] * self.group1()[2])
                    + (other.group5()[2] * self.group1()[1])
                    - (self.group1()[3] * other.group9()[0])
                    + (self.group2()[0] * other[e45])),
                ((other.group0()[0] * self.group1()[1]) - (self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group9()[3])
                    + (self.group0()[2] * other.group3()[0])
                    + (other.group4()[0] * self.group2()[2])
                    - (other.group4()[2] * self.group2()[0])
                    + (other.group5()[0] * self.group1()[2])
                    + (other.group5()[1] * self.group2()[3])
                    - (other.group5()[2] * self.group1()[0])
                    - (self.group1()[3] * other.group9()[1])
                    + (self.group2()[1] * other[e45])),
                ((other.group0()[0] * self.group1()[2]) + (self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group3()[0]) + (self.group0()[2] * other.group9()[3])
                    - (other.group4()[0] * self.group2()[1])
                    + (other.group4()[1] * self.group2()[0])
                    - (other.group5()[0] * self.group1()[1])
                    + (other.group5()[1] * self.group1()[0])
                    + (other.group5()[2] * self.group2()[3])
                    - (self.group1()[3] * other.group9()[2])
                    + (self.group2()[2] * other[e45])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[1] * self.group1()[0]) + (self.group0()[0] * other[e1]) + (self.group0()[1] * other.group8()[2])
                    - (self.group0()[2] * other.group8()[1])
                    - (other.group7()[1] * self.group2()[2])
                    + (other.group7()[2] * self.group2()[1])
                    + (self.group1()[1] * other.group6()[2])
                    - (self.group1()[2] * other.group6()[1])
                    + (self.group1()[3] * other.group1()[0])
                    + (self.group2()[0] * other.group1()[3])
                    + (self.group2()[3] * other.group6()[0])),
                ((other.group0()[1] * self.group1()[1]) - (self.group0()[0] * other.group8()[2])
                    + (self.group0()[1] * other[e1])
                    + (self.group0()[2] * other.group8()[0])
                    + (other.group7()[0] * self.group2()[2])
                    - (other.group7()[2] * self.group2()[0])
                    - (self.group1()[0] * other.group6()[2])
                    + (self.group1()[2] * other.group6()[0])
                    + (self.group1()[3] * other.group1()[1])
                    + (self.group2()[1] * other.group1()[3])
                    + (self.group2()[3] * other.group6()[1])),
                ((other.group0()[1] * self.group1()[2]) + (self.group0()[0] * other.group8()[1]) - (self.group0()[1] * other.group8()[0]) + (self.group0()[2] * other[e1])
                    - (other.group7()[0] * self.group2()[1])
                    + (other.group7()[1] * self.group2()[0])
                    + (self.group1()[0] * other.group6()[1])
                    - (self.group1()[1] * other.group6()[0])
                    + (self.group1()[3] * other.group1()[2])
                    + (self.group2()[2] * other.group1()[3])
                    + (self.group2()[3] * other.group6()[2])),
                ((other.group0()[1] * self.group1()[3]) + (self.group0()[0] * other.group8()[0]) + (self.group0()[1] * other.group8()[1]) + (self.group0()[2] * other.group8()[2])
                    - (other.group7()[0] * self.group2()[0])
                    - (other.group7()[1] * self.group2()[1])
                    - (other.group7()[2] * self.group2()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])
                    + (self.group2()[3] * other.group6()[3])),
            ]),
            // e423, e431, e412
            Simd32x3::from([
                ((other.group0()[1] * self.group0()[0]) + (self.group0()[0] * other.group6()[3]) + (self.group0()[1] * other.group1()[2]) + (self.group0()[1] * other.group6()[2])
                    - (self.group0()[2] * other.group1()[1])
                    - (self.group0()[2] * other.group6()[1])
                    - (other.group7()[0] * self.group1()[3])
                    + (other.group7()[0] * self.group2()[3])
                    - (other.group7()[1] * self.group1()[2])
                    + (other.group7()[2] * self.group1()[1])
                    + (self.group1()[0] * other.group1()[3])),
                ((other.group0()[1] * self.group0()[1]) - (self.group0()[0] * other.group1()[2]) - (self.group0()[0] * other.group6()[2])
                    + (self.group0()[1] * other.group6()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group0()[2] * other.group6()[0])
                    + (other.group7()[0] * self.group1()[2])
                    - (other.group7()[1] * self.group1()[3])
                    + (other.group7()[1] * self.group2()[3])
                    - (other.group7()[2] * self.group1()[0])
                    + (self.group1()[1] * other.group1()[3])),
                ((other.group0()[1] * self.group0()[2]) + (self.group0()[0] * other.group1()[1]) + (self.group0()[0] * other.group6()[1])
                    - (self.group0()[1] * other.group1()[0])
                    - (self.group0()[1] * other.group6()[0])
                    + (self.group0()[2] * other.group6()[3])
                    - (other.group7()[0] * self.group1()[1])
                    + (other.group7()[1] * self.group1()[0])
                    - (other.group7()[2] * self.group1()[3])
                    + (other.group7()[2] * self.group2()[3])
                    + (self.group1()[2] * other.group1()[3])),
            ]),
            // e235, e315, e125
            Simd32x3::from([
                ((other.group0()[1] * self.group2()[0]) + (other.group8()[0] * self.group1()[3]) + (other.group8()[0] * self.group2()[3]) - (other.group8()[1] * self.group1()[2])
                    + (other.group8()[2] * self.group1()[1])
                    + (self.group1()[0] * other[e1])
                    - (self.group2()[0] * other.group6()[3])
                    - (self.group2()[1] * other.group1()[2])
                    + (self.group2()[1] * other.group6()[2])
                    + (self.group2()[2] * other.group1()[1])
                    - (self.group2()[2] * other.group6()[1])),
                ((other.group0()[1] * self.group2()[1]) + (other.group8()[0] * self.group1()[2]) + (other.group8()[1] * self.group1()[3]) + (other.group8()[1] * self.group2()[3])
                    - (other.group8()[2] * self.group1()[0])
                    + (self.group1()[1] * other[e1])
                    + (self.group2()[0] * other.group1()[2])
                    - (self.group2()[0] * other.group6()[2])
                    - (self.group2()[1] * other.group6()[3])
                    - (self.group2()[2] * other.group1()[0])
                    + (self.group2()[2] * other.group6()[0])),
                ((other.group0()[1] * self.group2()[2]) - (other.group8()[0] * self.group1()[1])
                    + (other.group8()[1] * self.group1()[0])
                    + (other.group8()[2] * self.group1()[3])
                    + (other.group8()[2] * self.group2()[3])
                    + (self.group1()[2] * other[e1])
                    - (self.group2()[0] * other.group1()[1])
                    + (self.group2()[0] * other.group6()[1])
                    + (self.group2()[1] * other.group1()[0])
                    - (self.group2()[1] * other.group6()[0])
                    - (self.group2()[2] * other.group6()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group9()[3]) + (self.group0()[1] * other.group3()[2]) - (self.group0()[2] * other.group3()[1]) + (other.group4()[1] * self.group2()[2])
                    - (other.group4()[2] * self.group2()[1])
                    - (other.group5()[0] * self.group1()[3])
                    + (self.group1()[0] * other.group3()[3])
                    + (self.group1()[1] * other.group9()[2])
                    - (self.group1()[2] * other.group9()[1])
                    - (self.group2()[0] * other[e45])
                    + (self.group2()[3] * other.group9()[0])),
                (-(self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group9()[3]) + (self.group0()[2] * other.group3()[0])
                    - (other.group4()[0] * self.group2()[2])
                    + (other.group4()[2] * self.group2()[0])
                    - (other.group5()[1] * self.group1()[3])
                    - (self.group1()[0] * other.group9()[2])
                    + (self.group1()[1] * other.group3()[3])
                    + (self.group1()[2] * other.group9()[0])
                    - (self.group2()[1] * other[e45])
                    + (self.group2()[3] * other.group9()[1])),
                ((self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group3()[0]) + (self.group0()[2] * other.group9()[3]) + (other.group4()[0] * self.group2()[1])
                    - (other.group4()[1] * self.group2()[0])
                    - (other.group5()[2] * self.group1()[3])
                    + (self.group1()[0] * other.group9()[1])
                    - (self.group1()[1] * other.group9()[0])
                    + (self.group1()[2] * other.group3()[3])
                    - (self.group2()[2] * other[e45])
                    + (self.group2()[3] * other.group9()[2])),
                (-(other.group5()[0] * self.group2()[0])
                    - (other.group5()[1] * self.group2()[1])
                    - (other.group5()[2] * self.group2()[2])
                    - (self.group1()[0] * other.group3()[0])
                    - (self.group1()[1] * other.group3()[1])
                    - (self.group1()[2] * other.group3()[2])
                    + (self.group1()[3] * other.group9()[3])
                    - (self.group2()[0] * other.group9()[0])
                    - (self.group2()[1] * other.group9()[1])
                    - (self.group2()[2] * other.group9()[2])
                    + (self.group2()[3] * other.group9()[3])),
            ]),
            // e1234
            (-(self.group0()[0] * other.group5()[0]) + (self.group0()[0] * other.group9()[0]) - (self.group0()[1] * other.group5()[1]) + (self.group0()[1] * other.group9()[1])
                - (self.group0()[2] * other.group5()[2])
                + (self.group0()[2] * other.group9()[2])
                - (other.group4()[0] * self.group1()[0])
                - (other.group4()[1] * self.group1()[1])
                - (other.group4()[2] * self.group1()[2])
                - (self.group1()[3] * other[e45])
                + (self.group2()[3] * other[e45])),
        );
    }
}
impl GeometricAntiProduct<Plane> for CircleRotor {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       29       44        0
    fn geometric_anti_product(self, other: Plane) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group1()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) - (self.group1()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) - (self.group1()[3] * other.group0()[2])),
                (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group2()[1] * other.group0()[2]) - (self.group2()[2] * other.group0()[1])),
                ((self.group1()[1] * other.group0()[3]) - (self.group2()[0] * other.group0()[2]) + (self.group2()[2] * other.group0()[0])),
                ((self.group1()[2] * other.group0()[3]) + (self.group2()[0] * other.group0()[1]) - (self.group2()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1]) + (self.group2()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) - (self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0]) + (self.group2()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0]) + (self.group2()[3] * other.group0()[2])),
                ((self.group1()[3] * other.group0()[3]) - (self.group2()[0] * other.group0()[0]) - (self.group2()[1] * other.group0()[1]) - (self.group2()[2] * other.group0()[2])
                    + (self.group2()[3] * other.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<RoundPoint> for CircleRotor {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       40       55        0
    fn geometric_anti_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (self.group1()[0] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other[e2]) + (self.group1()[3] * other.group0()[0]) + (self.group2()[0] * other.group0()[3])),
                ((self.group0()[1] * other[e2]) + (self.group1()[3] * other.group0()[1]) + (self.group2()[1] * other.group0()[3])),
                ((self.group0()[2] * other[e2]) + (self.group1()[3] * other.group0()[2]) + (self.group2()[2] * other.group0()[3])),
                (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                ((self.group1()[0] * other[e2]) - (self.group2()[1] * other.group0()[2]) + (self.group2()[2] * other.group0()[1])),
                ((self.group1()[1] * other[e2]) + (self.group2()[0] * other.group0()[2]) - (self.group2()[2] * other.group0()[0])),
                ((self.group1()[2] * other[e2]) - (self.group2()[0] * other.group0()[1]) + (self.group2()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group0()[3])
                    + (self.group2()[3] * other.group0()[3])),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (-(self.group0()[0] * other[e2]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])
                    + (self.group2()[0] * other.group0()[3])
                    + (self.group2()[3] * other.group0()[0])),
                (-(self.group0()[1] * other[e2]) - (self.group1()[0] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[0])
                    + (self.group2()[1] * other.group0()[3])
                    + (self.group2()[3] * other.group0()[1])),
                (-(self.group0()[2] * other[e2]) + (self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])
                    + (self.group2()[2] * other.group0()[3])
                    + (self.group2()[3] * other.group0()[2])),
                ((self.group1()[3] * other[e2])
                    + (self.group2()[0] * other.group0()[0])
                    + (self.group2()[1] * other.group0()[1])
                    + (self.group2()[2] * other.group0()[2])
                    + (self.group2()[3] * other[e2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Scalar> for CircleRotor {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0       12        0
    fn geometric_anti_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from([(self.group0()[0] * other[scalar]), (self.group0()[1] * other[scalar]), (self.group0()[2] * other[scalar])]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group1()[0] * other[scalar]),
                (self.group1()[1] * other[scalar]),
                (self.group1()[2] * other[scalar]),
                (self.group1()[3] * other[scalar] * -1.0),
            ]),
            // e15, e25, e35, scalar
            Simd32x4::from([
                (self.group2()[0] * other[scalar]),
                (self.group2()[1] * other[scalar]),
                (self.group2()[2] * other[scalar]),
                (self.group2()[3] * other[scalar]),
            ]),
        );
    }
}
impl GeometricAntiProduct<Sphere> for CircleRotor {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       40       55        0
    fn geometric_anti_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1]) + (self.group1()[0] * other[e4315])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0]) + (self.group1()[1] * other[e4315])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) + (self.group1()[2] * other[e4315])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group1()[3] * other.group0()[0]) + (self.group2()[0] * other[e4315])),
                ((self.group0()[1] * other.group0()[3]) - (self.group1()[3] * other.group0()[1]) + (self.group2()[1] * other[e4315])),
                ((self.group0()[2] * other.group0()[3]) - (self.group1()[3] * other.group0()[2]) + (self.group2()[2] * other[e4315])),
                (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group2()[1] * other.group0()[2]) - (self.group2()[2] * other.group0()[1])),
                ((self.group1()[1] * other.group0()[3]) - (self.group2()[0] * other.group0()[2]) + (self.group2()[2] * other.group0()[0])),
                ((self.group1()[2] * other.group0()[3]) + (self.group2()[0] * other.group0()[1]) - (self.group2()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other[e4315])
                    + (self.group2()[3] * other[e4315])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1]) - (self.group2()[0] * other[e4315])
                    + (self.group2()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) - (self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0]) - (self.group2()[1] * other[e4315])
                    + (self.group2()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0]) - (self.group2()[2] * other[e4315])
                    + (self.group2()[3] * other.group0()[2])),
                ((self.group1()[3] * other.group0()[3]) - (self.group2()[0] * other.group0()[0]) - (self.group2()[1] * other.group0()[1]) - (self.group2()[2] * other.group0()[2])
                    + (self.group2()[3] * other.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorEven> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      160      176        0
    fn geometric_anti_product(self, other: VersorEven) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) + (self.group0()[1] * other.group3()[2])
                    - (self.group0()[2] * other.group1()[1])
                    - (self.group0()[2] * other.group3()[1])
                    + (self.group1()[0] * other.group3()[3])
                    + (self.group1()[1] * other.group0()[2])
                    - (self.group1()[2] * other.group0()[1])
                    - (self.group1()[3] * other.group0()[0])
                    + (self.group2()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[2]) - (self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group0()[3])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group0()[2] * other.group3()[0])
                    - (self.group1()[0] * other.group0()[2])
                    + (self.group1()[1] * other.group3()[3])
                    + (self.group1()[2] * other.group0()[0])
                    - (self.group1()[3] * other.group0()[1])
                    + (self.group2()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group1()[0]) - (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group0()[3])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group1()[0] * other.group0()[1])
                    - (self.group1()[1] * other.group0()[0])
                    + (self.group1()[2] * other.group3()[3])
                    - (self.group1()[3] * other.group0()[2])
                    + (self.group2()[3] * other.group0()[2])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])
                    + (self.group1()[3] * other.group1()[3])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])
                    + (self.group2()[3] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])
                    + (self.group1()[0] * other.group0()[3])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])
                    + (self.group1()[3] * other.group3()[0])
                    + (self.group2()[0] * other.group3()[3])
                    + (self.group2()[1] * other.group0()[2])
                    - (self.group2()[2] * other.group0()[1])
                    + (self.group2()[3] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group2()[3]) + (self.group0()[2] * other.group2()[0])
                    - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group1()[2] * other.group1()[0])
                    + (self.group1()[3] * other.group3()[1])
                    - (self.group2()[0] * other.group0()[2])
                    + (self.group2()[1] * other.group3()[3])
                    + (self.group2()[2] * other.group0()[0])
                    + (self.group2()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) + (self.group0()[2] * other.group2()[3]) + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[0])
                    + (self.group1()[2] * other.group0()[3])
                    + (self.group1()[3] * other.group3()[2])
                    + (self.group2()[0] * other.group0()[1])
                    - (self.group2()[1] * other.group0()[0])
                    + (self.group2()[2] * other.group3()[3])
                    + (self.group2()[3] * other.group1()[2])),
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group2()[1]) + (self.group0()[2] * other.group2()[2])
                    - (self.group1()[0] * other.group3()[0])
                    - (self.group1()[1] * other.group3()[1])
                    - (self.group1()[2] * other.group3()[2])
                    + (self.group1()[3] * other.group0()[3])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])
                    + (self.group2()[3] * other.group1()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group1()[0] * other.group2()[3]) + (self.group1()[1] * other.group2()[2]) - (self.group1()[2] * other.group2()[1])
                    + (self.group1()[3] * other.group2()[0])
                    + (self.group2()[0] * other.group0()[3])
                    - (self.group2()[0] * other.group1()[3])
                    + (self.group2()[1] * other.group1()[2])
                    - (self.group2()[1] * other.group3()[2])
                    - (self.group2()[2] * other.group1()[1])
                    + (self.group2()[2] * other.group3()[1])
                    + (self.group2()[3] * other.group2()[0])),
                (-(self.group1()[0] * other.group2()[2])
                    + (self.group1()[1] * other.group2()[3])
                    + (self.group1()[2] * other.group2()[0])
                    + (self.group1()[3] * other.group2()[1])
                    - (self.group2()[0] * other.group1()[2])
                    + (self.group2()[0] * other.group3()[2])
                    + (self.group2()[1] * other.group0()[3])
                    - (self.group2()[1] * other.group1()[3])
                    + (self.group2()[2] * other.group1()[0])
                    - (self.group2()[2] * other.group3()[0])
                    + (self.group2()[3] * other.group2()[1])),
                ((self.group1()[0] * other.group2()[1]) - (self.group1()[1] * other.group2()[0])
                    + (self.group1()[2] * other.group2()[3])
                    + (self.group1()[3] * other.group2()[2])
                    + (self.group2()[0] * other.group1()[1])
                    - (self.group2()[0] * other.group3()[1])
                    - (self.group2()[1] * other.group1()[0])
                    + (self.group2()[1] * other.group3()[0])
                    + (self.group2()[2] * other.group0()[3])
                    - (self.group2()[2] * other.group1()[3])
                    + (self.group2()[3] * other.group2()[2])),
                (-(self.group1()[0] * other.group2()[0]) - (self.group1()[1] * other.group2()[1]) - (self.group1()[2] * other.group2()[2])
                    + (self.group1()[3] * other.group2()[3])
                    - (self.group2()[0] * other.group1()[0])
                    + (self.group2()[0] * other.group3()[0])
                    - (self.group2()[1] * other.group1()[1])
                    + (self.group2()[1] * other.group3()[1])
                    - (self.group2()[2] * other.group1()[2])
                    + (self.group2()[2] * other.group3()[2])
                    + (self.group2()[3] * other.group2()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[1])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group3()[2])
                    - (self.group1()[2] * other.group3()[1])
                    + (self.group1()[3] * other.group1()[0])
                    + (self.group2()[0] * other.group3()[3])
                    + (self.group2()[1] * other.group0()[2])
                    - (self.group2()[2] * other.group0()[1])
                    + (self.group2()[3] * other.group3()[0])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[1] * other.group2()[3]) - (self.group0()[2] * other.group2()[0]) - (self.group1()[0] * other.group3()[2])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group3()[0])
                    + (self.group1()[3] * other.group1()[1])
                    - (self.group2()[0] * other.group0()[2])
                    + (self.group2()[1] * other.group3()[3])
                    + (self.group2()[2] * other.group0()[0])
                    + (self.group2()[3] * other.group3()[1])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[0]) - (self.group0()[2] * other.group2()[3])
                    + (self.group1()[0] * other.group3()[1])
                    - (self.group1()[1] * other.group3()[0])
                    + (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])
                    + (self.group2()[0] * other.group0()[1])
                    - (self.group2()[1] * other.group0()[0])
                    + (self.group2()[2] * other.group3()[3])
                    + (self.group2()[3] * other.group3()[2])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[0] * other.group3()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group3()[3])
                    + (self.group2()[3] * other.group3()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorOdd> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      160      176        0
    fn geometric_anti_product(self, other: VersorOdd) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[1] * other.group3()[2])
                    - (self.group0()[2] * other.group1()[1])
                    + (self.group0()[2] * other.group3()[1])
                    + (self.group1()[0] * other.group2()[3])
                    + (self.group1()[1] * other.group0()[2])
                    - (self.group1()[2] * other.group0()[1])
                    - (self.group1()[3] * other.group0()[0])
                    + (self.group2()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group0()[3])
                    - (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    - (self.group0()[2] * other.group3()[0])
                    - (self.group1()[0] * other.group0()[2])
                    + (self.group1()[1] * other.group2()[3])
                    + (self.group1()[2] * other.group0()[0])
                    - (self.group1()[3] * other.group0()[1])
                    + (self.group2()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group1()[0])
                    + (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group0()[3])
                    - (self.group0()[2] * other.group1()[3])
                    + (self.group1()[0] * other.group0()[1])
                    - (self.group1()[1] * other.group0()[0])
                    + (self.group1()[2] * other.group2()[3])
                    - (self.group1()[3] * other.group0()[2])
                    + (self.group2()[3] * other.group0()[2])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])
                    + (self.group2()[3] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])
                    + (self.group1()[0] * other.group0()[3])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])
                    - (self.group1()[3] * other.group3()[0])
                    + (self.group2()[0] * other.group2()[3])
                    + (self.group2()[1] * other.group0()[2])
                    - (self.group2()[2] * other.group0()[1])
                    + (self.group2()[3] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group3()[3]) + (self.group0()[2] * other.group2()[0])
                    - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group1()[2] * other.group1()[0])
                    - (self.group1()[3] * other.group3()[1])
                    - (self.group2()[0] * other.group0()[2])
                    + (self.group2()[1] * other.group2()[3])
                    + (self.group2()[2] * other.group0()[0])
                    + (self.group2()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) + (self.group0()[2] * other.group3()[3]) + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[0])
                    + (self.group1()[2] * other.group0()[3])
                    - (self.group1()[3] * other.group3()[2])
                    + (self.group2()[0] * other.group0()[1])
                    - (self.group2()[1] * other.group0()[0])
                    + (self.group2()[2] * other.group2()[3])
                    + (self.group2()[3] * other.group1()[2])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group1()[0] * other.group3()[0])
                    - (self.group1()[1] * other.group3()[1])
                    - (self.group1()[2] * other.group3()[2])
                    - (self.group1()[3] * other.group0()[3])
                    + (self.group2()[0] * other.group0()[0])
                    + (self.group2()[1] * other.group0()[1])
                    + (self.group2()[2] * other.group0()[2])
                    + (self.group2()[3] * other.group1()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group1()[0] * other.group3()[3]) + (self.group1()[1] * other.group2()[2]) - (self.group1()[2] * other.group2()[1])
                    + (self.group1()[3] * other.group2()[0])
                    + (self.group2()[0] * other.group0()[3])
                    + (self.group2()[0] * other.group1()[3])
                    + (self.group2()[1] * other.group1()[2])
                    + (self.group2()[1] * other.group3()[2])
                    - (self.group2()[2] * other.group1()[1])
                    - (self.group2()[2] * other.group3()[1])
                    + (self.group2()[3] * other.group2()[0])),
                (-(self.group1()[0] * other.group2()[2])
                    + (self.group1()[1] * other.group3()[3])
                    + (self.group1()[2] * other.group2()[0])
                    + (self.group1()[3] * other.group2()[1])
                    - (self.group2()[0] * other.group1()[2])
                    - (self.group2()[0] * other.group3()[2])
                    + (self.group2()[1] * other.group0()[3])
                    + (self.group2()[1] * other.group1()[3])
                    + (self.group2()[2] * other.group1()[0])
                    + (self.group2()[2] * other.group3()[0])
                    + (self.group2()[3] * other.group2()[1])),
                ((self.group1()[0] * other.group2()[1]) - (self.group1()[1] * other.group2()[0])
                    + (self.group1()[2] * other.group3()[3])
                    + (self.group1()[3] * other.group2()[2])
                    + (self.group2()[0] * other.group1()[1])
                    + (self.group2()[0] * other.group3()[1])
                    - (self.group2()[1] * other.group1()[0])
                    - (self.group2()[1] * other.group3()[0])
                    + (self.group2()[2] * other.group0()[3])
                    + (self.group2()[2] * other.group1()[3])
                    + (self.group2()[3] * other.group2()[2])),
                (-(self.group0()[0] * other.group1()[0]) + (self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group1()[1])
                    + (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group1()[2])
                    + (self.group0()[2] * other.group3()[2])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group2()[3])
                    + (self.group2()[3] * other.group2()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group3()[2])
                    - (self.group1()[2] * other.group3()[1])
                    - (self.group1()[3] * other.group1()[0])
                    - (self.group2()[0] * other.group2()[3])
                    - (self.group2()[1] * other.group0()[2])
                    + (self.group2()[2] * other.group0()[1])
                    + (self.group2()[3] * other.group3()[0])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group3()[3]) + (self.group0()[2] * other.group2()[0])
                    - (self.group1()[0] * other.group3()[2])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group3()[0])
                    - (self.group1()[3] * other.group1()[1])
                    + (self.group2()[0] * other.group0()[2])
                    - (self.group2()[1] * other.group2()[3])
                    - (self.group2()[2] * other.group0()[0])
                    + (self.group2()[3] * other.group3()[1])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) + (self.group0()[2] * other.group3()[3]) + (self.group1()[0] * other.group3()[1])
                    - (self.group1()[1] * other.group3()[0])
                    + (self.group1()[2] * other.group1()[3])
                    - (self.group1()[3] * other.group1()[2])
                    - (self.group2()[0] * other.group0()[1])
                    + (self.group2()[1] * other.group0()[0])
                    - (self.group2()[2] * other.group2()[3])
                    + (self.group2()[3] * other.group3()[2])),
                (-(self.group1()[0] * other.group2()[0]) - (self.group1()[1] * other.group2()[1]) - (self.group1()[2] * other.group2()[2])
                    + (self.group1()[3] * other.group3()[3])
                    - (self.group2()[0] * other.group1()[0])
                    - (self.group2()[0] * other.group3()[0])
                    - (self.group2()[1] * other.group1()[1])
                    - (self.group2()[1] * other.group3()[1])
                    - (self.group2()[2] * other.group1()[2])
                    - (self.group2()[2] * other.group3()[2])
                    + (self.group2()[3] * other.group3()[3])),
            ]),
        );
    }
}
impl InfixGeometricAntiProduct for Dipole {}
impl GeometricAntiProduct<AntiCircleRotor> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       94      110        0
    fn geometric_anti_product(self, other: AntiCircleRotor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1])
                    + (self.group0()[0] * other.group1()[3])
                    - (self.group0()[0] * other.group2()[3])
                    - (self.group0()[1] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[1])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group1()[3])
                    + (other.group0()[2] * self.group1()[0])
                    + (self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group1()[3])
                    - (self.group0()[1] * other.group2()[3])
                    - (self.group0()[2] * other.group1()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) - (other.group0()[2] * self.group1()[3]) - (self.group0()[0] * other.group1()[1])
                    + (self.group0()[1] * other.group1()[0])
                    + (self.group0()[2] * other.group1()[3])
                    - (self.group0()[2] * other.group2()[3])),
                ((other.group0()[0] * self.group2()[0])
                    + (other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])
                    + (self.group0()[0] * other.group2()[0])
                    + (self.group0()[1] * other.group2()[1])
                    + (self.group0()[2] * other.group2()[2])
                    + (other.group1()[0] * self.group1()[0])
                    + (other.group1()[1] * self.group1()[1])
                    + (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1]) - (self.group0()[1] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[1])
                    + (other.group1()[1] * self.group1()[2])
                    - (other.group1()[2] * self.group1()[1])
                    - (other.group2()[3] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group0()[2] * self.group2()[0]) + (self.group0()[0] * other.group2()[2])
                    - (self.group0()[2] * other.group2()[0])
                    - (other.group1()[0] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[0])
                    - (other.group2()[3] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) - (self.group0()[0] * other.group2()[1])
                    + (self.group0()[1] * other.group2()[0])
                    + (other.group1()[0] * self.group1()[1])
                    - (other.group1()[1] * self.group1()[0])
                    - (other.group2()[3] * self.group1()[2])),
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    + (other.group2()[3] * self.group1()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group2()[0] * other.group1()[3]) - (self.group2()[0] * other.group2()[3]) - (self.group2()[1] * other.group1()[2])
                    + (self.group2()[2] * other.group1()[1])
                    + (other.group2()[0] * self.group1()[3])
                    + (other.group2()[1] * self.group1()[2])
                    - (other.group2()[2] * self.group1()[1])),
                ((self.group2()[0] * other.group1()[2])
                    - (self.group2()[1] * other.group1()[3])
                    - (self.group2()[1] * other.group2()[3])
                    - (self.group2()[2] * other.group1()[0])
                    - (other.group2()[0] * self.group1()[2])
                    + (other.group2()[1] * self.group1()[3])
                    + (other.group2()[2] * self.group1()[0])),
                (-(self.group2()[0] * other.group1()[1]) + (self.group2()[1] * other.group1()[0])
                    - (self.group2()[2] * other.group1()[3])
                    - (self.group2()[2] * other.group2()[3])
                    + (other.group2()[0] * self.group1()[1])
                    - (other.group2()[1] * self.group1()[0])
                    + (other.group2()[2] * self.group1()[3])),
                ((self.group2()[0] * other.group1()[0])
                    + (self.group2()[1] * other.group1()[1])
                    + (self.group2()[2] * other.group1()[2])
                    + (other.group2()[0] * self.group1()[0])
                    + (other.group2()[1] * self.group1()[1])
                    + (other.group2()[2] * self.group1()[2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1]) + (self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group0()[2] * self.group2()[0]) - (self.group0()[0] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[0])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) + (self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])),
                ((other.group0()[0] * self.group1()[0])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[2])
                    + (self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDipoleInversion> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      134      150        0
    fn geometric_anti_product(self, other: AntiDipoleInversion) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (self.group0()[0] * other.group1()[3])
                    + (self.group0()[1] * other.group1()[2])
                    + (self.group0()[1] * other.group3()[2])
                    - (self.group0()[2] * other.group1()[1])
                    - (self.group0()[2] * other.group3()[1])
                    + (other.group2()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group1()[0])
                    - (self.group0()[0] * other.group1()[2])
                    - (self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group0()[2] * other.group3()[0])
                    + (other.group2()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group1()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (self.group0()[0] * other.group1()[1])
                    + (self.group0()[0] * other.group3()[1])
                    - (self.group0()[1] * other.group1()[0])
                    - (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (other.group2()[3] * self.group1()[2])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[1])
                    + (self.group0()[0] * other.group3()[3])
                    + (self.group0()[1] * other.group2()[2])
                    - (self.group0()[2] * other.group2()[1])
                    + (self.group2()[0] * other.group2()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])
                    - (other.group3()[0] * self.group1()[3])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group2()[0]) - (self.group0()[0] * other.group2()[2])
                    + (self.group0()[1] * other.group3()[3])
                    + (self.group0()[2] * other.group2()[0])
                    + (self.group2()[1] * other.group2()[3])
                    + (other.group1()[0] * self.group1()[2])
                    - (other.group1()[2] * self.group1()[0])
                    - (other.group3()[1] * self.group1()[3])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) + (self.group0()[0] * other.group2()[1])
                    - (self.group0()[1] * other.group2()[0])
                    + (self.group0()[2] * other.group3()[3])
                    + (self.group2()[2] * other.group2()[3])
                    - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    - (other.group3()[2] * self.group1()[3])),
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    + (other.group3()[0] * self.group1()[0])
                    + (other.group3()[1] * self.group1()[1])
                    + (other.group3()[2] * self.group1()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group2()[0] * other.group1()[3]) + (self.group2()[1] * other.group1()[2])
                    - (self.group2()[1] * other.group3()[2])
                    - (self.group2()[2] * other.group1()[1])
                    + (self.group2()[2] * other.group3()[1])
                    - (other.group2()[0] * self.group1()[3])
                    - (other.group2()[1] * self.group1()[2])
                    + (other.group2()[2] * self.group1()[1])
                    + (other.group3()[3] * self.group1()[0])),
                (-(self.group2()[0] * other.group1()[2]) + (self.group2()[0] * other.group3()[2]) - (self.group2()[1] * other.group1()[3])
                    + (self.group2()[2] * other.group1()[0])
                    - (self.group2()[2] * other.group3()[0])
                    + (other.group2()[0] * self.group1()[2])
                    - (other.group2()[1] * self.group1()[3])
                    - (other.group2()[2] * self.group1()[0])
                    + (other.group3()[3] * self.group1()[1])),
                ((self.group2()[0] * other.group1()[1]) - (self.group2()[0] * other.group3()[1]) - (self.group2()[1] * other.group1()[0]) + (self.group2()[1] * other.group3()[0])
                    - (self.group2()[2] * other.group1()[3])
                    - (other.group2()[0] * self.group1()[1])
                    + (other.group2()[1] * self.group1()[0])
                    - (other.group2()[2] * self.group1()[3])
                    + (other.group3()[3] * self.group1()[2])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[0] * other.group3()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])
                    + (other.group2()[3] * self.group1()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1]) + (self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group2()[2])
                    - (self.group0()[2] * other.group2()[1])
                    - (self.group2()[0] * other.group2()[3])
                    + (other.group1()[0] * self.group1()[3])
                    - (other.group1()[3] * self.group1()[0])
                    + (other.group3()[1] * self.group1()[2])
                    - (other.group3()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group0()[2] * self.group2()[0]) - (self.group0()[0] * other.group2()[2])
                    + (self.group0()[1] * other.group3()[3])
                    + (self.group0()[2] * other.group2()[0])
                    - (self.group2()[1] * other.group2()[3])
                    + (other.group1()[1] * self.group1()[3])
                    - (other.group1()[3] * self.group1()[1])
                    - (other.group3()[0] * self.group1()[2])
                    + (other.group3()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) + (self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0])
                    + (self.group0()[2] * other.group3()[3])
                    - (self.group2()[2] * other.group2()[3])
                    + (other.group1()[2] * self.group1()[3])
                    - (other.group1()[3] * self.group1()[2])
                    + (other.group3()[0] * self.group1()[1])
                    - (other.group3()[1] * self.group1()[0])),
                (-(self.group2()[0] * other.group1()[0]) + (self.group2()[0] * other.group3()[0]) - (self.group2()[1] * other.group1()[1])
                    + (self.group2()[1] * other.group3()[1])
                    - (self.group2()[2] * other.group1()[2])
                    + (self.group2()[2] * other.group3()[2])
                    - (other.group2()[0] * self.group1()[0])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group3()[3] * self.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum> for Dipole {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       27        0
    fn geometric_anti_product(self, other: AntiDualNum) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group0()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group2()[0]) - (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (other.group0()[1] * self.group2()[0] * -1.0),
                (other.group0()[1] * self.group2()[1] * -1.0),
                (other.group0()[1] * self.group2()[2] * -1.0),
                (other.group0()[0] * self.group1()[3] * -1.0),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[0] * self.group2()[0] * -1.0),
                (other.group0()[0] * self.group2()[1] * -1.0),
                (other.group0()[0] * self.group2()[2] * -1.0),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiFlatPoint> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       25       40        0
    fn geometric_anti_product(self, other: AntiFlatPoint) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (other.group0()[3] * self.group1()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group2()[0] * other.group0()[3]) - (other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[1])),
                (-(self.group2()[1] * other.group0()[3]) + (other.group0()[0] * self.group1()[2])
                    - (other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group1()[0])),
                (-(self.group2()[2] * other.group0()[3]) - (other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0])
                    - (other.group0()[2] * self.group1()[3])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) - (other.group0()[3] * self.group1()[0])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0]) - (other.group0()[3] * self.group1()[1])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) - (other.group0()[3] * self.group1()[2])),
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiFlector> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       64       80        0
    fn geometric_anti_product(self, other: AntiFlector) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[3]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (other.group0()[3] * self.group1()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) - (other.group1()[0] * self.group1()[3])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group0()[0])
                    - (other.group1()[1] * self.group1()[3])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group1()[3]) - (other.group1()[2] * self.group1()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (other.group1()[0] * self.group1()[0])
                    + (other.group1()[1] * self.group1()[1])
                    + (other.group1()[2] * self.group1()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group2()[0] * other.group0()[3]) - (self.group2()[1] * other.group1()[2]) + (self.group2()[2] * other.group1()[1])
                    - (other.group0()[0] * self.group1()[3])
                    - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (other.group1()[3] * self.group1()[0])),
                ((self.group2()[0] * other.group1()[2]) - (self.group2()[1] * other.group0()[3]) - (self.group2()[2] * other.group1()[0]) + (other.group0()[0] * self.group1()[2])
                    - (other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group1()[0])
                    + (other.group1()[3] * self.group1()[1])),
                (-(self.group2()[0] * other.group1()[1]) + (self.group2()[1] * other.group1()[0])
                    - (self.group2()[2] * other.group0()[3])
                    - (other.group0()[0] * self.group1()[1])
                    + (other.group0()[1] * self.group1()[0])
                    - (other.group0()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])),
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) - (other.group0()[3] * self.group1()[0])
                    + (other.group1()[1] * self.group1()[2])
                    - (other.group1()[2] * self.group1()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group0()[0])
                    - (other.group0()[3] * self.group1()[1])
                    - (other.group1()[0] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group1()[3]) - (other.group0()[3] * self.group1()[2])
                    + (other.group1()[0] * self.group1()[1])
                    - (other.group1()[1] * self.group1()[0])),
                ((self.group2()[0] * other.group1()[0]) + (self.group2()[1] * other.group1()[1]) + (self.group2()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiLine> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       44       60        0
    fn geometric_anti_product(self, other: AntiLine) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[0])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[2])
                    + (other.group1()[0] * self.group0()[0])
                    + (other.group1()[1] * self.group0()[1])
                    + (other.group1()[2] * self.group0()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1]) + (other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group1()[0]) - (other.group1()[0] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) + (other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0])),
                (-(other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1]) + (other.group1()[0] * self.group1()[3]) + (other.group1()[1] * self.group1()[2])
                    - (other.group1()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group0()[2] * self.group2()[0]) - (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) + (other.group1()[0] * self.group1()[1]) - (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group1()[3])),
                ((other.group0()[0] * self.group2()[0])
                    + (other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])
                    + (other.group1()[0] * self.group1()[0])
                    + (other.group1()[1] * self.group1()[1])
                    + (other.group1()[2] * self.group1()[2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[1] * self.group1()[3]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])),
                ((other.group0()[2] * self.group1()[3]) - (other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiMotor> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       64       80        0
    fn geometric_anti_product(self, other: AntiMotor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group0()[3]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group0()[3])),
                ((self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[2])
                    + (other.group0()[0] * self.group1()[0])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[1])
                    + (other.group0()[1] * self.group1()[2])
                    - (other.group0()[2] * self.group1()[1])
                    - (other.group0()[3] * self.group1()[0])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group1()[0]) - (other.group0()[0] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[0])
                    - (other.group0()[3] * self.group1()[1])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group1()[3])
                    + (other.group0()[0] * self.group1()[1])
                    - (other.group0()[1] * self.group1()[0])
                    - (other.group0()[3] * self.group1()[2])),
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])
                    + (other.group0()[3] * self.group1()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group2()[0] * other.group0()[3]) - (self.group2()[1] * other.group0()[2])
                    + (self.group2()[2] * other.group0()[1])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[1] * self.group1()[2])
                    - (other.group1()[2] * self.group1()[1])
                    - (other.group1()[3] * self.group1()[0])),
                ((self.group2()[0] * other.group0()[2]) - (self.group2()[1] * other.group0()[3]) - (self.group2()[2] * other.group0()[0]) - (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[2] * self.group1()[0])
                    - (other.group1()[3] * self.group1()[1])),
                (-(self.group2()[0] * other.group0()[1]) + (self.group2()[1] * other.group0()[0]) - (self.group2()[2] * other.group0()[3])
                    + (other.group1()[0] * self.group1()[1])
                    - (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group1()[3])
                    - (other.group1()[3] * self.group1()[2])),
                ((self.group2()[0] * other.group0()[0])
                    + (self.group2()[1] * other.group0()[1])
                    + (self.group2()[2] * other.group0()[2])
                    + (other.group1()[0] * self.group1()[0])
                    + (other.group1()[1] * self.group1()[1])
                    + (other.group1()[2] * self.group1()[2])
                    + (other.group1()[3] * self.group1()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) + (other.group0()[0] * self.group1()[3])),
                (-(self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (other.group0()[1] * self.group1()[3])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[3]) + (other.group0()[2] * self.group1()[3])),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiPlane> for Dipole {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       25       40        0
    fn geometric_anti_product(self, other: AntiPlane) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (other.group0()[0] * self.group1()[3])),
                ((self.group0()[1] * other.group0()[3]) - (other.group0()[1] * self.group1()[3])),
                ((self.group0()[2] * other.group0()[3]) - (other.group0()[2] * self.group1()[3])),
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group2()[1] * other.group0()[2]) + (self.group2()[2] * other.group0()[1]) + (other.group0()[3] * self.group1()[0])),
                ((self.group2()[0] * other.group0()[2]) - (self.group2()[2] * other.group0()[0]) + (other.group0()[3] * self.group1()[1])),
                (-(self.group2()[0] * other.group0()[1]) + (self.group2()[1] * other.group0()[0]) + (other.group0()[3] * self.group1()[2])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1])),
                ((self.group0()[1] * other.group0()[3]) - (other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group1()[0])),
                ((self.group0()[2] * other.group0()[3]) + (other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0])),
                ((self.group2()[0] * other.group0()[0]) + (self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2]) - (other.group0()[3] * self.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiScalar> for Dipole {
    type Output = Dipole;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0       10        0
    fn geometric_anti_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from([(self.group0()[0] * other[e12345]), (self.group0()[1] * other[e12345]), (self.group0()[2] * other[e12345])]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group1()[0] * other[e12345]),
                (self.group1()[1] * other[e12345]),
                (self.group1()[2] * other[e12345]),
                (self.group1()[3] * other[e12345]),
            ]),
            // e15, e25, e35
            Simd32x3::from([(self.group2()[0] * other[e12345]), (self.group2()[1] * other[e12345]), (self.group2()[2] * other[e12345])]),
        );
    }
}
impl GeometricAntiProduct<Circle> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       84      100        0
    fn geometric_anti_product(self, other: Circle) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (self.group0()[0] * other.group1()[3])
                    + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group1()[0]) - (self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])),
                (-(other.group0()[0] * self.group1()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])
                    + (self.group0()[2] * other.group1()[3])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1]) - (other.group2()[1] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[1])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group2()[0]) + (other.group2()[0] * self.group0()[2]) - (other.group2()[2] * self.group0()[0])
                    + (other.group1()[0] * self.group1()[2])
                    - (other.group1()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) - (other.group2()[0] * self.group0()[1])
                    + (other.group2()[1] * self.group0()[0])
                    - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group2()[0] * self.group1()[3]) - (other.group2()[1] * self.group1()[2]) + (other.group2()[2] * self.group1()[1])
                    - (self.group2()[0] * other.group1()[3])
                    + (self.group2()[1] * other.group1()[2])
                    - (self.group2()[2] * other.group1()[1])),
                ((other.group2()[0] * self.group1()[2])
                    - (other.group2()[1] * self.group1()[3])
                    - (other.group2()[2] * self.group1()[0])
                    - (self.group2()[0] * other.group1()[2])
                    - (self.group2()[1] * other.group1()[3])
                    + (self.group2()[2] * other.group1()[0])),
                (-(other.group2()[0] * self.group1()[1]) + (other.group2()[1] * self.group1()[0]) - (other.group2()[2] * self.group1()[3])
                    + (self.group2()[0] * other.group1()[1])
                    - (self.group2()[1] * other.group1()[0])
                    - (self.group2()[2] * other.group1()[3])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1]) - (other.group2()[1] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[1])
                    + (other.group1()[0] * self.group1()[3])
                    - (other.group1()[3] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group0()[2] * self.group2()[0]) + (other.group2()[0] * self.group0()[2])
                    - (other.group2()[2] * self.group0()[0])
                    + (other.group1()[1] * self.group1()[3])
                    - (other.group1()[3] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) - (other.group2()[0] * self.group0()[1])
                    + (other.group2()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group1()[3])
                    - (other.group1()[3] * self.group1()[2])),
                (-(other.group2()[0] * self.group1()[0])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (self.group2()[0] * other.group1()[0])
                    - (self.group2()[1] * other.group1()[1])
                    - (self.group2()[2] * other.group1()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<CircleRotor> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       94      110        0
    fn geometric_anti_product(self, other: CircleRotor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (self.group0()[0] * other.group1()[3])
                    + (self.group0()[0] * other.group2()[3])
                    + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group1()[0]) - (self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[1] * other.group2()[3])
                    + (self.group0()[2] * other.group1()[0])),
                (-(other.group0()[0] * self.group1()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group0()[2] * other.group2()[3])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1]) + (self.group0()[1] * other.group2()[2])
                    - (self.group0()[2] * other.group2()[1])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group2()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[2]) - (other.group0()[2] * self.group2()[0]) - (self.group0()[0] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[0])
                    + (other.group1()[0] * self.group1()[2])
                    - (other.group1()[2] * self.group1()[0])
                    + (other.group2()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) + (self.group0()[0] * other.group2()[1])
                    - (self.group0()[1] * other.group2()[0])
                    - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group2()[3] * self.group1()[2])),
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    + (other.group2()[3] * self.group1()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group2()[0] * other.group1()[3]) + (self.group2()[0] * other.group2()[3]) + (self.group2()[1] * other.group1()[2])
                    - (self.group2()[2] * other.group1()[1])
                    - (other.group2()[0] * self.group1()[3])
                    - (other.group2()[1] * self.group1()[2])
                    + (other.group2()[2] * self.group1()[1])),
                (-(self.group2()[0] * other.group1()[2]) - (self.group2()[1] * other.group1()[3])
                    + (self.group2()[1] * other.group2()[3])
                    + (self.group2()[2] * other.group1()[0])
                    + (other.group2()[0] * self.group1()[2])
                    - (other.group2()[1] * self.group1()[3])
                    - (other.group2()[2] * self.group1()[0])),
                ((self.group2()[0] * other.group1()[1]) - (self.group2()[1] * other.group1()[0]) - (self.group2()[2] * other.group1()[3]) + (self.group2()[2] * other.group2()[3])
                    - (other.group2()[0] * self.group1()[1])
                    + (other.group2()[1] * self.group1()[0])
                    - (other.group2()[2] * self.group1()[3])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1]) + (self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])
                    + (other.group1()[0] * self.group1()[3])
                    - (other.group1()[3] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group0()[2] * self.group2()[0]) - (self.group0()[0] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[0])
                    + (other.group1()[1] * self.group1()[3])
                    - (other.group1()[3] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) + (self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0])
                    + (other.group1()[2] * self.group1()[3])
                    - (other.group1()[3] * self.group1()[2])),
                (-(self.group2()[0] * other.group1()[0])
                    - (self.group2()[1] * other.group1()[1])
                    - (self.group2()[2] * other.group1()[2])
                    - (other.group2()[0] * self.group1()[0])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[2] * self.group1()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Dipole> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       84      100        0
    fn geometric_anti_product(self, other: Dipole) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1])
                    + (self.group0()[0] * other.group1()[3])
                    - (self.group0()[1] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[1])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group1()[3])
                    + (other.group0()[2] * self.group1()[0])
                    + (self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group1()[3])
                    - (self.group0()[2] * other.group1()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) - (other.group0()[2] * self.group1()[3]) - (self.group0()[0] * other.group1()[1])
                    + (self.group0()[1] * other.group1()[0])
                    + (self.group0()[2] * other.group1()[3])),
                ((other.group0()[0] * self.group2()[0])
                    + (other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])
                    + (other.group2()[0] * self.group0()[0])
                    + (other.group2()[1] * self.group0()[1])
                    + (other.group2()[2] * self.group0()[2])
                    + (other.group1()[0] * self.group1()[0])
                    + (other.group1()[1] * self.group1()[1])
                    + (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1]) + (other.group2()[1] * self.group0()[2]) - (other.group2()[2] * self.group0()[1])
                    + (other.group1()[1] * self.group1()[2])
                    - (other.group1()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group0()[2] * self.group2()[0]) - (other.group2()[0] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[0])
                    - (other.group1()[0] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) + (other.group2()[0] * self.group0()[1]) - (other.group2()[1] * self.group0()[0])
                    + (other.group1()[0] * self.group1()[1])
                    - (other.group1()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((other.group2()[0] * self.group1()[3]) + (other.group2()[1] * self.group1()[2])
                    - (other.group2()[2] * self.group1()[1])
                    - (self.group2()[0] * other.group1()[3])
                    - (self.group2()[1] * other.group1()[2])
                    + (self.group2()[2] * other.group1()[1])),
                (-(other.group2()[0] * self.group1()[2])
                    + (other.group2()[1] * self.group1()[3])
                    + (other.group2()[2] * self.group1()[0])
                    + (self.group2()[0] * other.group1()[2])
                    - (self.group2()[1] * other.group1()[3])
                    - (self.group2()[2] * other.group1()[0])),
                ((other.group2()[0] * self.group1()[1]) - (other.group2()[1] * self.group1()[0]) + (other.group2()[2] * self.group1()[3]) - (self.group2()[0] * other.group1()[1])
                    + (self.group2()[1] * other.group1()[0])
                    - (self.group2()[2] * other.group1()[3])),
                ((other.group2()[0] * self.group1()[0])
                    + (other.group2()[1] * self.group1()[1])
                    + (other.group2()[2] * self.group1()[2])
                    + (self.group2()[0] * other.group1()[0])
                    + (self.group2()[1] * other.group1()[1])
                    + (self.group2()[2] * other.group1()[2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1]) - (other.group2()[1] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[1])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group0()[2] * self.group2()[0]) + (other.group2()[0] * self.group0()[2])
                    - (other.group2()[2] * self.group0()[0])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) - (other.group2()[0] * self.group0()[1])
                    + (other.group2()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])),
                ((other.group0()[0] * self.group1()[0])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[2])
                    + (self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<DipoleInversion> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      134      150        0
    fn geometric_anti_product(self, other: DipoleInversion) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group1()[2]) + (self.group0()[1] * other.group3()[2]) + (self.group0()[2] * other.group1()[1])
                    - (self.group0()[2] * other.group3()[1])
                    - (other.group0()[0] * self.group1()[3])
                    + (other.group0()[1] * self.group1()[2])
                    - (other.group0()[2] * self.group1()[1])
                    - (self.group1()[0] * other.group2()[3])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group1()[0])
                    + (self.group0()[2] * other.group3()[0])
                    - (other.group0()[0] * self.group1()[2])
                    - (other.group0()[1] * self.group1()[3])
                    + (other.group0()[2] * self.group1()[0])
                    - (self.group1()[1] * other.group2()[3])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group1()[0])
                    - (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (other.group0()[0] * self.group1()[1])
                    - (other.group0()[1] * self.group1()[0])
                    - (other.group0()[2] * self.group1()[3])
                    - (self.group1()[2] * other.group2()[3])),
                ((self.group0()[0] * other.group2()[0])
                    + (self.group0()[1] * other.group2()[1])
                    + (self.group0()[2] * other.group2()[2])
                    + (self.group2()[0] * other.group0()[0])
                    + (self.group2()[1] * other.group0()[1])
                    + (self.group2()[2] * other.group0()[2])
                    + (self.group1()[0] * other.group1()[0])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group3()[3]) - (self.group0()[1] * other.group2()[2]) + (self.group0()[2] * other.group2()[1])
                    - (self.group2()[0] * other.group2()[3])
                    - (self.group2()[1] * other.group0()[2])
                    + (self.group2()[2] * other.group0()[1])
                    - (self.group1()[1] * other.group1()[2])
                    + (self.group1()[2] * other.group1()[1])
                    - (self.group1()[3] * other.group3()[0])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[1] * other.group3()[3]) - (self.group0()[2] * other.group2()[0]) + (self.group2()[0] * other.group0()[2])
                    - (self.group2()[1] * other.group2()[3])
                    - (self.group2()[2] * other.group0()[0])
                    + (self.group1()[0] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[0])
                    - (self.group1()[3] * other.group3()[1])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[0])
                    - (self.group0()[2] * other.group3()[3])
                    - (self.group2()[0] * other.group0()[1])
                    + (self.group2()[1] * other.group0()[0])
                    - (self.group2()[2] * other.group2()[3])
                    - (self.group1()[0] * other.group1()[1])
                    + (self.group1()[1] * other.group1()[0])
                    - (self.group1()[3] * other.group3()[2])),
                (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])
                    + (self.group2()[0] * other.group0()[0])
                    + (self.group2()[1] * other.group0()[1])
                    + (self.group2()[2] * other.group0()[2])
                    - (self.group1()[0] * other.group3()[0])
                    - (self.group1()[1] * other.group3()[1])
                    - (self.group1()[2] * other.group3()[2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group2()[0] * other.group1()[3]) - (self.group2()[1] * other.group1()[2]) - (self.group2()[1] * other.group3()[2])
                    + (self.group2()[2] * other.group1()[1])
                    + (self.group2()[2] * other.group3()[1])
                    - (self.group1()[0] * other.group3()[3])
                    - (self.group1()[1] * other.group2()[2])
                    + (self.group1()[2] * other.group2()[1])
                    + (self.group1()[3] * other.group2()[0])),
                ((self.group2()[0] * other.group1()[2]) + (self.group2()[0] * other.group3()[2])
                    - (self.group2()[1] * other.group1()[3])
                    - (self.group2()[2] * other.group1()[0])
                    - (self.group2()[2] * other.group3()[0])
                    + (self.group1()[0] * other.group2()[2])
                    - (self.group1()[1] * other.group3()[3])
                    - (self.group1()[2] * other.group2()[0])
                    + (self.group1()[3] * other.group2()[1])),
                (-(self.group2()[0] * other.group1()[1]) - (self.group2()[0] * other.group3()[1])
                    + (self.group2()[1] * other.group1()[0])
                    + (self.group2()[1] * other.group3()[0])
                    - (self.group2()[2] * other.group1()[3])
                    - (self.group1()[0] * other.group2()[1])
                    + (self.group1()[1] * other.group2()[0])
                    - (self.group1()[2] * other.group3()[3])
                    + (self.group1()[3] * other.group2()[2])),
                ((self.group2()[0] * other.group1()[0])
                    + (self.group2()[0] * other.group3()[0])
                    + (self.group2()[1] * other.group1()[1])
                    + (self.group2()[1] * other.group3()[1])
                    + (self.group2()[2] * other.group1()[2])
                    + (self.group2()[2] * other.group3()[2])
                    + (self.group1()[0] * other.group2()[0])
                    + (self.group1()[1] * other.group2()[1])
                    + (self.group1()[2] * other.group2()[2])
                    + (self.group1()[3] * other.group3()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group2()[2])
                    - (self.group0()[2] * other.group2()[1])
                    - (self.group2()[0] * other.group2()[3])
                    - (self.group2()[1] * other.group0()[2])
                    + (self.group2()[2] * other.group0()[1])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group3()[2])
                    - (self.group1()[2] * other.group3()[1])
                    + (self.group1()[3] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[2])
                    + (self.group0()[1] * other.group3()[3])
                    + (self.group0()[2] * other.group2()[0])
                    + (self.group2()[0] * other.group0()[2])
                    - (self.group2()[1] * other.group2()[3])
                    - (self.group2()[2] * other.group0()[0])
                    - (self.group1()[0] * other.group3()[2])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group3()[0])
                    + (self.group1()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) + (self.group0()[2] * other.group3()[3]) - (self.group2()[0] * other.group0()[1])
                    + (self.group2()[1] * other.group0()[0])
                    - (self.group2()[2] * other.group2()[3])
                    + (self.group1()[0] * other.group3()[1])
                    - (self.group1()[1] * other.group3()[0])
                    + (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])),
                ((self.group0()[0] * other.group1()[0]) - (self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group1()[1]) - (self.group0()[1] * other.group3()[1])
                    + (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])
                    + (other.group0()[0] * self.group1()[0])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[2])
                    - (self.group1()[3] * other.group2()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<DualNum> for Dipole {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       23        0
    fn geometric_anti_product(self, other: DualNum) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[1] * self.group2()[0]),
                (other.group0()[1] * self.group2()[1]),
                (other.group0()[1] * self.group2()[2]),
                (other.group0()[0] * self.group1()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group2()[0] * -1.0),
                (other.group0()[0] * self.group2()[1] * -1.0),
                (other.group0()[0] * self.group2()[2] * -1.0),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<FlatPoint> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       25       40        0
    fn geometric_anti_product(self, other: FlatPoint) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group2()[0] * other.group0()[3]) - (self.group1()[1] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[1])
                    + (self.group1()[3] * other.group0()[0])),
                (-(self.group2()[1] * other.group0()[3]) + (self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])
                    + (self.group1()[3] * other.group0()[1])),
                (-(self.group2()[2] * other.group0()[3]) - (self.group1()[0] * other.group0()[1])
                    + (self.group1()[1] * other.group0()[0])
                    + (self.group1()[3] * other.group0()[2])),
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (self.group1()[0] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[3])),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<Flector> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       64       80        0
    fn geometric_anti_product(self, other: Flector) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[3]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])
                    - (self.group1()[3] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group0()[0]) - (self.group1()[3] * other.group1()[1])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[3])
                    - (self.group1()[3] * other.group1()[2])),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group2()[0] * other.group0()[3]) - (self.group2()[1] * other.group1()[2]) + (self.group2()[2] * other.group1()[1])
                    - (self.group1()[0] * other.group1()[3])
                    - (self.group1()[1] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[1])
                    + (self.group1()[3] * other.group0()[0])),
                ((self.group2()[0] * other.group1()[2]) - (self.group2()[1] * other.group0()[3]) - (self.group2()[2] * other.group1()[0]) + (self.group1()[0] * other.group0()[2])
                    - (self.group1()[1] * other.group1()[3])
                    - (self.group1()[2] * other.group0()[0])
                    + (self.group1()[3] * other.group0()[1])),
                (-(self.group2()[0] * other.group1()[1]) + (self.group2()[1] * other.group1()[0])
                    - (self.group2()[2] * other.group0()[3])
                    - (self.group1()[0] * other.group0()[1])
                    + (self.group1()[1] * other.group0()[0])
                    - (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group0()[2])),
                ((self.group2()[0] * other.group1()[0])
                    + (self.group2()[1] * other.group1()[1])
                    + (self.group2()[2] * other.group1()[2])
                    + (self.group1()[0] * other.group0()[0])
                    + (self.group1()[1] * other.group0()[1])
                    + (self.group1()[2] * other.group0()[2])
                    + (self.group1()[3] * other.group1()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])
                    + (self.group1()[0] * other.group0()[3])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group0()[0])
                    - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group1()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group1()[3]) + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[0])
                    + (self.group1()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Line> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       44       60        0
    fn geometric_anti_product(self, other: Line) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0]) + (other.group0()[0] * self.group1()[2])
                    - (other.group0()[2] * self.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) - (other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0])),
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group2()[1] * other.group0()[2]) - (self.group2()[2] * other.group0()[1]) - (other.group1()[0] * self.group1()[3]) - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])),
                (-(self.group2()[0] * other.group0()[2]) + (self.group2()[2] * other.group0()[0]) + (other.group1()[0] * self.group1()[2])
                    - (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group1()[0])),
                ((self.group2()[0] * other.group0()[1]) - (self.group2()[1] * other.group0()[0]) - (other.group1()[0] * self.group1()[1]) + (other.group1()[1] * self.group1()[0])
                    - (other.group1()[2] * self.group1()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) + (other.group0()[0] * self.group1()[3])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0]) + (other.group0()[1] * self.group1()[3])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (other.group0()[2] * self.group1()[3])),
                (-(self.group2()[0] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Motor> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       64       80        0
    fn geometric_anti_product(self, other: Motor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[3]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])
                    + (self.group1()[0] * other.group0()[3])
                    + (self.group1()[1] * other.group0()[2])
                    - (self.group1()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group1()[0])
                    - (self.group1()[0] * other.group0()[2])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[3]) + (self.group1()[0] * other.group0()[1])
                    - (self.group1()[1] * other.group0()[0])
                    + (self.group1()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])
                    + (self.group1()[3] * other.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group2()[0] * other.group0()[3]) + (self.group2()[1] * other.group0()[2]) - (self.group2()[2] * other.group0()[1])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])
                    - (self.group1()[3] * other.group1()[0])),
                (-(self.group2()[0] * other.group0()[2]) + (self.group2()[1] * other.group0()[3]) + (self.group2()[2] * other.group0()[0])
                    - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group1()[0])
                    - (self.group1()[3] * other.group1()[1])),
                ((self.group2()[0] * other.group0()[1]) - (self.group2()[1] * other.group0()[0]) + (self.group2()[2] * other.group0()[3]) + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[0])
                    + (self.group1()[2] * other.group1()[3])
                    - (self.group1()[3] * other.group1()[2])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) + (self.group1()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[3]) + (self.group1()[3] * other.group0()[2])),
                (-(self.group2()[0] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<MultiVector> for Dipole {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      288      320        0
    fn geometric_anti_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group0()[0] * other.group8()[0])
                    - (self.group0()[1] * other.group8()[1])
                    - (self.group0()[2] * other.group8()[2])
                    - (self.group2()[0] * other.group7()[0])
                    - (self.group2()[1] * other.group7()[1])
                    - (self.group2()[2] * other.group7()[2])
                    - (self.group1()[0] * other.group6()[0])
                    - (self.group1()[1] * other.group6()[1])
                    - (self.group1()[2] * other.group6()[2])
                    - (self.group1()[3] * other.group6()[3])),
                ((self.group0()[0] * other.group3()[0])
                    + (self.group0()[1] * other.group3()[1])
                    + (self.group0()[2] * other.group3()[2])
                    + (self.group2()[0] * other.group4()[0])
                    + (self.group2()[1] * other.group4()[1])
                    + (self.group2()[2] * other.group4()[2])
                    + (other.group5()[0] * self.group1()[0])
                    + (other.group5()[1] * self.group1()[1])
                    + (other.group5()[2] * self.group1()[2])
                    - (self.group1()[3] * other.group3()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group9()[3]) + (self.group0()[1] * other.group3()[2])
                    - (self.group0()[2] * other.group3()[1])
                    - (self.group2()[0] * other[e45])
                    - (self.group2()[1] * other.group4()[2])
                    + (self.group2()[2] * other.group4()[1])
                    + (other.group5()[0] * self.group1()[3])
                    + (self.group1()[0] * other.group3()[3])
                    + (self.group1()[1] * other.group9()[2])
                    - (self.group1()[2] * other.group9()[1])),
                (-(self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group9()[3])
                    + (self.group0()[2] * other.group3()[0])
                    + (self.group2()[0] * other.group4()[2])
                    - (self.group2()[1] * other[e45])
                    - (self.group2()[2] * other.group4()[0])
                    + (other.group5()[1] * self.group1()[3])
                    - (self.group1()[0] * other.group9()[2])
                    + (self.group1()[1] * other.group3()[3])
                    + (self.group1()[2] * other.group9()[0])),
                ((self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group3()[0]) + (self.group0()[2] * other.group9()[3]) - (self.group2()[0] * other.group4()[1])
                    + (self.group2()[1] * other.group4()[0])
                    - (self.group2()[2] * other[e45])
                    + (other.group5()[2] * self.group1()[3])
                    + (self.group1()[0] * other.group9()[1])
                    - (self.group1()[1] * other.group9()[0])
                    + (self.group1()[2] * other.group3()[3])),
                ((self.group0()[0] * other.group5()[0]) - (self.group0()[0] * other.group9()[0]) + (self.group0()[1] * other.group5()[1]) - (self.group0()[1] * other.group9()[1])
                    + (self.group0()[2] * other.group5()[2])
                    - (self.group0()[2] * other.group9()[2])
                    + (other.group4()[0] * self.group1()[0])
                    + (other.group4()[1] * self.group1()[1])
                    + (other.group4()[2] * self.group1()[2])
                    - (self.group1()[3] * other[e45])),
            ]),
            // e5
            ((self.group2()[0] * other.group5()[0])
                + (self.group2()[0] * other.group9()[0])
                + (self.group2()[1] * other.group5()[1])
                + (self.group2()[1] * other.group9()[1])
                + (self.group2()[2] * other.group5()[2])
                + (self.group2()[2] * other.group9()[2])
                + (self.group1()[0] * other.group3()[0])
                + (self.group1()[1] * other.group3()[1])
                + (self.group1()[2] * other.group3()[2])
                + (self.group1()[3] * other.group9()[3])),
            // e15, e25, e35, e45
            Simd32x4::from([
                ((other.group0()[1] * self.group2()[0]) - (self.group2()[0] * other.group6()[3]) - (self.group2()[1] * other.group1()[2])
                    + (self.group2()[1] * other.group6()[2])
                    + (self.group2()[2] * other.group1()[1])
                    - (self.group2()[2] * other.group6()[1])
                    - (other.group8()[0] * self.group1()[3])
                    - (other.group8()[1] * self.group1()[2])
                    + (other.group8()[2] * self.group1()[1])
                    + (self.group1()[0] * other[e1])),
                ((other.group0()[1] * self.group2()[1]) + (self.group2()[0] * other.group1()[2])
                    - (self.group2()[0] * other.group6()[2])
                    - (self.group2()[1] * other.group6()[3])
                    - (self.group2()[2] * other.group1()[0])
                    + (self.group2()[2] * other.group6()[0])
                    + (other.group8()[0] * self.group1()[2])
                    - (other.group8()[1] * self.group1()[3])
                    - (other.group8()[2] * self.group1()[0])
                    + (self.group1()[1] * other[e1])),
                ((other.group0()[1] * self.group2()[2]) - (self.group2()[0] * other.group1()[1]) + (self.group2()[0] * other.group6()[1]) + (self.group2()[1] * other.group1()[0])
                    - (self.group2()[1] * other.group6()[0])
                    - (self.group2()[2] * other.group6()[3])
                    - (other.group8()[0] * self.group1()[1])
                    + (other.group8()[1] * self.group1()[0])
                    - (other.group8()[2] * self.group1()[3])
                    + (self.group1()[2] * other[e1])),
                ((other.group0()[1] * self.group1()[3]) - (self.group0()[0] * other.group8()[0]) - (self.group0()[1] * other.group8()[1]) - (self.group0()[2] * other.group8()[2])
                    + (self.group2()[0] * other.group7()[0])
                    + (self.group2()[1] * other.group7()[1])
                    + (self.group2()[2] * other.group7()[2])
                    + (self.group1()[0] * other.group1()[0])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[2] * other.group1()[2])),
            ]),
            // e41, e42, e43
            Simd32x3::from([
                ((other.group0()[1] * self.group0()[0]) + (self.group0()[0] * other.group6()[3]) + (self.group0()[1] * other.group1()[2]) + (self.group0()[1] * other.group6()[2])
                    - (self.group0()[2] * other.group1()[1])
                    - (self.group0()[2] * other.group6()[1])
                    + (other.group7()[0] * self.group1()[3])
                    - (other.group7()[1] * self.group1()[2])
                    + (other.group7()[2] * self.group1()[1])
                    + (self.group1()[0] * other.group1()[3])),
                ((other.group0()[1] * self.group0()[1]) - (self.group0()[0] * other.group1()[2]) - (self.group0()[0] * other.group6()[2])
                    + (self.group0()[1] * other.group6()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group0()[2] * other.group6()[0])
                    + (other.group7()[0] * self.group1()[2])
                    + (other.group7()[1] * self.group1()[3])
                    - (other.group7()[2] * self.group1()[0])
                    + (self.group1()[1] * other.group1()[3])),
                ((other.group0()[1] * self.group0()[2]) + (self.group0()[0] * other.group1()[1]) + (self.group0()[0] * other.group6()[1])
                    - (self.group0()[1] * other.group1()[0])
                    - (self.group0()[1] * other.group6()[0])
                    + (self.group0()[2] * other.group6()[3])
                    - (other.group7()[0] * self.group1()[1])
                    + (other.group7()[1] * self.group1()[0])
                    + (other.group7()[2] * self.group1()[3])
                    + (self.group1()[2] * other.group1()[3])),
            ]),
            // e23, e31, e12
            Simd32x3::from([
                ((other.group0()[1] * self.group1()[0]) + (self.group0()[0] * other[e1]) + (self.group0()[1] * other.group8()[2]) - (self.group0()[2] * other.group8()[1])
                    + (self.group2()[0] * other.group1()[3])
                    + (self.group2()[1] * other.group7()[2])
                    - (self.group2()[2] * other.group7()[1])
                    + (self.group1()[1] * other.group6()[2])
                    - (self.group1()[2] * other.group6()[1])
                    - (self.group1()[3] * other.group1()[0])),
                ((other.group0()[1] * self.group1()[1]) - (self.group0()[0] * other.group8()[2]) + (self.group0()[1] * other[e1]) + (self.group0()[2] * other.group8()[0])
                    - (self.group2()[0] * other.group7()[2])
                    + (self.group2()[1] * other.group1()[3])
                    + (self.group2()[2] * other.group7()[0])
                    - (self.group1()[0] * other.group6()[2])
                    + (self.group1()[2] * other.group6()[0])
                    - (self.group1()[3] * other.group1()[1])),
                ((other.group0()[1] * self.group1()[2]) + (self.group0()[0] * other.group8()[1]) - (self.group0()[1] * other.group8()[0])
                    + (self.group0()[2] * other[e1])
                    + (self.group2()[0] * other.group7()[1])
                    - (self.group2()[1] * other.group7()[0])
                    + (self.group2()[2] * other.group1()[3])
                    + (self.group1()[0] * other.group6()[1])
                    - (self.group1()[1] * other.group6()[0])
                    - (self.group1()[3] * other.group1()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[0]) - (self.group0()[0] * other.group9()[3]) - (self.group0()[1] * other.group3()[2])
                    + (self.group0()[2] * other.group3()[1])
                    - (self.group2()[0] * other[e45])
                    - (self.group2()[1] * other.group4()[2])
                    + (self.group2()[2] * other.group4()[1])
                    + (other.group5()[1] * self.group1()[2])
                    - (other.group5()[2] * self.group1()[1])
                    - (self.group1()[3] * other.group9()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (self.group0()[0] * other.group3()[2])
                    - (self.group0()[1] * other.group9()[3])
                    - (self.group0()[2] * other.group3()[0])
                    + (self.group2()[0] * other.group4()[2])
                    - (self.group2()[1] * other[e45])
                    - (self.group2()[2] * other.group4()[0])
                    - (other.group5()[0] * self.group1()[2])
                    + (other.group5()[2] * self.group1()[0])
                    - (self.group1()[3] * other.group9()[1])),
                (-(other.group0()[0] * self.group1()[2]) - (self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group3()[0])
                    - (self.group0()[2] * other.group9()[3])
                    - (self.group2()[0] * other.group4()[1])
                    + (self.group2()[1] * other.group4()[0])
                    - (self.group2()[2] * other[e45])
                    + (other.group5()[0] * self.group1()[1])
                    - (other.group5()[1] * self.group1()[0])
                    - (self.group1()[3] * other.group9()[2])),
                ((other.group0()[0] * self.group1()[3]) - (self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group3()[1]) - (self.group0()[2] * other.group3()[2])
                    + (self.group2()[0] * other.group4()[0])
                    + (self.group2()[1] * other.group4()[1])
                    + (self.group2()[2] * other.group4()[2])
                    - (self.group1()[0] * other.group9()[0])
                    - (self.group1()[1] * other.group9()[1])
                    - (self.group1()[2] * other.group9()[2])),
            ]),
            // e423, e431, e412
            Simd32x3::from([
                (-(other.group0()[0] * self.group0()[0]) + (self.group0()[0] * other.group3()[3]) - (self.group0()[1] * other.group5()[2])
                    + (self.group0()[1] * other.group9()[2])
                    + (self.group0()[2] * other.group5()[1])
                    - (self.group0()[2] * other.group9()[1])
                    - (other.group4()[0] * self.group1()[3])
                    + (other.group4()[1] * self.group1()[2])
                    - (other.group4()[2] * self.group1()[1])
                    - (self.group1()[0] * other[e45])),
                (-(other.group0()[0] * self.group0()[1]) + (self.group0()[0] * other.group5()[2]) - (self.group0()[0] * other.group9()[2])
                    + (self.group0()[1] * other.group3()[3])
                    - (self.group0()[2] * other.group5()[0])
                    + (self.group0()[2] * other.group9()[0])
                    - (other.group4()[0] * self.group1()[2])
                    - (other.group4()[1] * self.group1()[3])
                    + (other.group4()[2] * self.group1()[0])
                    - (self.group1()[1] * other[e45])),
                (-(other.group0()[0] * self.group0()[2]) - (self.group0()[0] * other.group5()[1])
                    + (self.group0()[0] * other.group9()[1])
                    + (self.group0()[1] * other.group5()[0])
                    - (self.group0()[1] * other.group9()[0])
                    + (self.group0()[2] * other.group3()[3])
                    + (other.group4()[0] * self.group1()[1])
                    - (other.group4()[1] * self.group1()[0])
                    - (other.group4()[2] * self.group1()[3])
                    - (self.group1()[2] * other[e45])),
            ]),
            // e235, e315, e125
            Simd32x3::from([
                (-(other.group0()[0] * self.group2()[0])
                    - (self.group2()[0] * other.group3()[3])
                    - (self.group2()[1] * other.group5()[2])
                    - (self.group2()[1] * other.group9()[2])
                    + (self.group2()[2] * other.group5()[1])
                    + (self.group2()[2] * other.group9()[1])
                    - (self.group1()[0] * other.group9()[3])
                    - (self.group1()[1] * other.group3()[2])
                    + (self.group1()[2] * other.group3()[1])
                    + (self.group1()[3] * other.group3()[0])),
                (-(other.group0()[0] * self.group2()[1]) + (self.group2()[0] * other.group5()[2]) + (self.group2()[0] * other.group9()[2])
                    - (self.group2()[1] * other.group3()[3])
                    - (self.group2()[2] * other.group5()[0])
                    - (self.group2()[2] * other.group9()[0])
                    + (self.group1()[0] * other.group3()[2])
                    - (self.group1()[1] * other.group9()[3])
                    - (self.group1()[2] * other.group3()[0])
                    + (self.group1()[3] * other.group3()[1])),
                (-(other.group0()[0] * self.group2()[2]) - (self.group2()[0] * other.group5()[1]) - (self.group2()[0] * other.group9()[1])
                    + (self.group2()[1] * other.group5()[0])
                    + (self.group2()[1] * other.group9()[0])
                    - (self.group2()[2] * other.group3()[3])
                    - (self.group1()[0] * other.group3()[1])
                    + (self.group1()[1] * other.group3()[0])
                    - (self.group1()[2] * other.group9()[3])
                    + (self.group1()[3] * other.group3()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other[e1]) + (self.group0()[1] * other.group8()[2])
                    - (self.group0()[2] * other.group8()[1])
                    - (self.group2()[0] * other.group1()[3])
                    - (self.group2()[1] * other.group7()[2])
                    + (self.group2()[2] * other.group7()[1])
                    - (self.group1()[0] * other.group6()[3])
                    - (self.group1()[1] * other.group1()[2])
                    + (self.group1()[2] * other.group1()[1])
                    + (self.group1()[3] * other.group6()[0])),
                (-(self.group0()[0] * other.group8()[2]) + (self.group0()[1] * other[e1]) + (self.group0()[2] * other.group8()[0]) + (self.group2()[0] * other.group7()[2])
                    - (self.group2()[1] * other.group1()[3])
                    - (self.group2()[2] * other.group7()[0])
                    + (self.group1()[0] * other.group1()[2])
                    - (self.group1()[1] * other.group6()[3])
                    - (self.group1()[2] * other.group1()[0])
                    + (self.group1()[3] * other.group6()[1])),
                ((self.group0()[0] * other.group8()[1]) - (self.group0()[1] * other.group8()[0]) + (self.group0()[2] * other[e1]) - (self.group2()[0] * other.group7()[1])
                    + (self.group2()[1] * other.group7()[0])
                    - (self.group2()[2] * other.group1()[3])
                    - (self.group1()[0] * other.group1()[1])
                    + (self.group1()[1] * other.group1()[0])
                    - (self.group1()[2] * other.group6()[3])
                    + (self.group1()[3] * other.group6()[2])),
                ((self.group2()[0] * other.group1()[0]) - (self.group2()[0] * other.group6()[0]) + (self.group2()[1] * other.group1()[1]) - (self.group2()[1] * other.group6()[1])
                    + (self.group2()[2] * other.group1()[2])
                    - (self.group2()[2] * other.group6()[2])
                    - (other.group8()[0] * self.group1()[0])
                    - (other.group8()[1] * self.group1()[1])
                    - (other.group8()[2] * self.group1()[2])
                    - (self.group1()[3] * other[e1])),
            ]),
            // e1234
            (-(self.group0()[0] * other.group1()[0])
                - (self.group0()[0] * other.group6()[0])
                - (self.group0()[1] * other.group1()[1])
                - (self.group0()[1] * other.group6()[1])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[2] * other.group6()[2])
                - (other.group7()[0] * self.group1()[0])
                - (other.group7()[1] * self.group1()[1])
                - (other.group7()[2] * self.group1()[2])
                + (self.group1()[3] * other.group1()[3])),
        );
    }
}
impl GeometricAntiProduct<Plane> for Dipole {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       25       40        0
    fn geometric_anti_product(self, other: Plane) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group1()[3] * other.group0()[0])),
                (-(self.group0()[1] * other.group0()[3]) - (self.group1()[3] * other.group0()[1])),
                (-(self.group0()[2] * other.group0()[3]) - (self.group1()[3] * other.group0()[2])),
                (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (-(self.group2()[1] * other.group0()[2]) + (self.group2()[2] * other.group0()[1]) - (self.group1()[0] * other.group0()[3])),
                ((self.group2()[0] * other.group0()[2]) - (self.group2()[2] * other.group0()[0]) - (self.group1()[1] * other.group0()[3])),
                (-(self.group2()[0] * other.group0()[1]) + (self.group2()[1] * other.group0()[0]) - (self.group1()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])),
                ((self.group0()[1] * other.group0()[3]) - (self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])),
                ((self.group2()[0] * other.group0()[0]) + (self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2]) + (self.group1()[3] * other.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<RoundPoint> for Dipole {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       35       50        0
    fn geometric_anti_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (self.group1()[0] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other[e2]) + (self.group2()[0] * other.group0()[3]) - (self.group1()[3] * other.group0()[0])),
                ((self.group0()[1] * other[e2]) + (self.group2()[1] * other.group0()[3]) - (self.group1()[3] * other.group0()[1])),
                ((self.group0()[2] * other[e2]) + (self.group2()[2] * other.group0()[3]) - (self.group1()[3] * other.group0()[2])),
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group2()[1] * other.group0()[2]) + (self.group2()[2] * other.group0()[1]) + (self.group1()[0] * other[e2])),
                ((self.group2()[0] * other.group0()[2]) - (self.group2()[2] * other.group0()[0]) + (self.group1()[1] * other[e2])),
                (-(self.group2()[0] * other.group0()[1]) + (self.group2()[1] * other.group0()[0]) + (self.group1()[2] * other[e2])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group1()[3] * other.group0()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other[e2]) - (self.group2()[0] * other.group0()[3]) - (self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group0()[1] * other[e2]) - (self.group2()[1] * other.group0()[3]) + (self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                ((self.group0()[2] * other[e2]) - (self.group2()[2] * other.group0()[3]) - (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                ((self.group2()[0] * other.group0()[0]) + (self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2]) - (self.group1()[3] * other[e2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Scalar> for Dipole {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0       19        0
    fn geometric_anti_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Circle::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                (self.group0()[0] * other[scalar] * -1.0),
                (self.group0()[1] * other[scalar] * -1.0),
                (self.group0()[2] * other[scalar] * -1.0),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group1()[0] * other[scalar] * -1.0),
                (self.group1()[1] * other[scalar] * -1.0),
                (self.group1()[2] * other[scalar] * -1.0),
                (self.group1()[3] * other[scalar]),
            ]),
            // e235, e315, e125
            Simd32x3::from([
                (self.group2()[0] * other[scalar] * -1.0),
                (self.group2()[1] * other[scalar] * -1.0),
                (self.group2()[2] * other[scalar] * -1.0),
            ]),
        );
    }
}
impl GeometricAntiProduct<Sphere> for Dipole {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       35       50        0
    fn geometric_anti_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) - (self.group1()[0] * other[e4315])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0]) - (self.group1()[1] * other[e4315])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) - (self.group1()[2] * other[e4315])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group2()[0] * other[e4315]) - (self.group1()[3] * other.group0()[0])),
                (-(self.group0()[1] * other.group0()[3]) - (self.group2()[1] * other[e4315]) - (self.group1()[3] * other.group0()[1])),
                (-(self.group0()[2] * other.group0()[3]) - (self.group2()[2] * other[e4315]) - (self.group1()[3] * other.group0()[2])),
                (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (-(self.group2()[1] * other.group0()[2]) + (self.group2()[2] * other.group0()[1]) - (self.group1()[0] * other.group0()[3])),
                ((self.group2()[0] * other.group0()[2]) - (self.group2()[2] * other.group0()[0]) - (self.group1()[1] * other.group0()[3])),
                (-(self.group2()[0] * other.group0()[1]) + (self.group2()[1] * other.group0()[0]) - (self.group1()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other[e4315])),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group2()[0] * other[e4315]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])),
                ((self.group0()[1] * other.group0()[3]) - (self.group2()[1] * other[e4315]) - (self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[3]) - (self.group2()[2] * other[e4315]) + (self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])),
                ((self.group2()[0] * other.group0()[0]) + (self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2]) + (self.group1()[3] * other.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorEven> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      144      160        0
    fn geometric_anti_product(self, other: VersorEven) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) + (self.group0()[1] * other.group3()[2])
                    - (self.group0()[2] * other.group1()[1])
                    - (self.group0()[2] * other.group3()[1])
                    + (self.group1()[0] * other.group3()[3])
                    + (self.group1()[1] * other.group0()[2])
                    - (self.group1()[2] * other.group0()[1])
                    + (self.group1()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[2]) - (self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group0()[3])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group0()[2] * other.group3()[0])
                    - (self.group1()[0] * other.group0()[2])
                    + (self.group1()[1] * other.group3()[3])
                    + (self.group1()[2] * other.group0()[0])
                    + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group1()[0]) - (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group0()[3])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group1()[0] * other.group0()[1])
                    - (self.group1()[1] * other.group0()[0])
                    + (self.group1()[2] * other.group3()[3])
                    + (self.group1()[3] * other.group0()[2])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])
                    + (self.group2()[0] * other.group3()[3])
                    + (self.group2()[1] * other.group0()[2])
                    - (self.group2()[2] * other.group0()[1])
                    + (self.group1()[0] * other.group0()[3])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])
                    - (self.group1()[3] * other.group3()[0])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group2()[3]) + (self.group0()[2] * other.group2()[0])
                    - (self.group2()[0] * other.group0()[2])
                    + (self.group2()[1] * other.group3()[3])
                    + (self.group2()[2] * other.group0()[0])
                    - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group1()[2] * other.group1()[0])
                    - (self.group1()[3] * other.group3()[1])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) + (self.group0()[2] * other.group2()[3]) + (self.group2()[0] * other.group0()[1])
                    - (self.group2()[1] * other.group0()[0])
                    + (self.group2()[2] * other.group3()[3])
                    + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[0])
                    + (self.group1()[2] * other.group0()[3])
                    - (self.group1()[3] * other.group3()[2])),
                (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])
                    + (self.group2()[0] * other.group0()[0])
                    + (self.group2()[1] * other.group0()[1])
                    + (self.group2()[2] * other.group0()[2])
                    + (self.group1()[0] * other.group3()[0])
                    + (self.group1()[1] * other.group3()[1])
                    + (self.group1()[2] * other.group3()[2])
                    + (self.group1()[3] * other.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group2()[0] * other.group0()[3]) - (self.group2()[0] * other.group1()[3]) + (self.group2()[1] * other.group1()[2])
                    - (self.group2()[1] * other.group3()[2])
                    - (self.group2()[2] * other.group1()[1])
                    + (self.group2()[2] * other.group3()[1])
                    + (self.group1()[0] * other.group2()[3])
                    + (self.group1()[1] * other.group2()[2])
                    - (self.group1()[2] * other.group2()[1])
                    - (self.group1()[3] * other.group2()[0])),
                (-(self.group2()[0] * other.group1()[2]) + (self.group2()[0] * other.group3()[2]) + (self.group2()[1] * other.group0()[3])
                    - (self.group2()[1] * other.group1()[3])
                    + (self.group2()[2] * other.group1()[0])
                    - (self.group2()[2] * other.group3()[0])
                    - (self.group1()[0] * other.group2()[2])
                    + (self.group1()[1] * other.group2()[3])
                    + (self.group1()[2] * other.group2()[0])
                    - (self.group1()[3] * other.group2()[1])),
                ((self.group2()[0] * other.group1()[1]) - (self.group2()[0] * other.group3()[1]) - (self.group2()[1] * other.group1()[0])
                    + (self.group2()[1] * other.group3()[0])
                    + (self.group2()[2] * other.group0()[3])
                    - (self.group2()[2] * other.group1()[3])
                    + (self.group1()[0] * other.group2()[1])
                    - (self.group1()[1] * other.group2()[0])
                    + (self.group1()[2] * other.group2()[3])
                    - (self.group1()[3] * other.group2()[2])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[0] * other.group3()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])
                    + (self.group1()[3] * other.group3()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group2()[2])
                    - (self.group0()[2] * other.group2()[1])
                    - (self.group2()[0] * other.group3()[3])
                    - (self.group2()[1] * other.group0()[2])
                    + (self.group2()[2] * other.group0()[1])
                    - (self.group1()[0] * other.group1()[3])
                    - (self.group1()[1] * other.group3()[2])
                    + (self.group1()[2] * other.group3()[1])
                    + (self.group1()[3] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[2])
                    + (self.group0()[1] * other.group2()[3])
                    + (self.group0()[2] * other.group2()[0])
                    + (self.group2()[0] * other.group0()[2])
                    - (self.group2()[1] * other.group3()[3])
                    - (self.group2()[2] * other.group0()[0])
                    + (self.group1()[0] * other.group3()[2])
                    - (self.group1()[1] * other.group1()[3])
                    - (self.group1()[2] * other.group3()[0])
                    + (self.group1()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) + (self.group0()[2] * other.group2()[3]) - (self.group2()[0] * other.group0()[1])
                    + (self.group2()[1] * other.group0()[0])
                    - (self.group2()[2] * other.group3()[3])
                    - (self.group1()[0] * other.group3()[1])
                    + (self.group1()[1] * other.group3()[0])
                    - (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])),
                (-(self.group2()[0] * other.group1()[0]) + (self.group2()[0] * other.group3()[0]) - (self.group2()[1] * other.group1()[1])
                    + (self.group2()[1] * other.group3()[1])
                    - (self.group2()[2] * other.group1()[2])
                    + (self.group2()[2] * other.group3()[2])
                    - (self.group1()[0] * other.group2()[0])
                    - (self.group1()[1] * other.group2()[1])
                    - (self.group1()[2] * other.group2()[2])
                    - (self.group1()[3] * other.group2()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorOdd> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      144      160        0
    fn geometric_anti_product(self, other: VersorOdd) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) + (self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group1()[2])
                    + (self.group0()[1] * other.group3()[2])
                    + (self.group0()[2] * other.group1()[1])
                    - (self.group0()[2] * other.group3()[1])
                    - (self.group1()[0] * other.group2()[3])
                    - (self.group1()[1] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[1])
                    - (self.group1()[3] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[0] * other.group3()[2]) - (self.group0()[1] * other.group0()[3]) + (self.group0()[1] * other.group1()[3])
                    - (self.group0()[2] * other.group1()[0])
                    + (self.group0()[2] * other.group3()[0])
                    + (self.group1()[0] * other.group0()[2])
                    - (self.group1()[1] * other.group2()[3])
                    - (self.group1()[2] * other.group0()[0])
                    - (self.group1()[3] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group1()[0])
                    - (self.group0()[1] * other.group3()[0])
                    - (self.group0()[2] * other.group0()[3])
                    + (self.group0()[2] * other.group1()[3])
                    - (self.group1()[0] * other.group0()[1])
                    + (self.group1()[1] * other.group0()[0])
                    - (self.group1()[2] * other.group2()[3])
                    - (self.group1()[3] * other.group0()[2])),
                ((self.group0()[0] * other.group2()[0])
                    + (self.group0()[1] * other.group2()[1])
                    + (self.group0()[2] * other.group2()[2])
                    + (self.group2()[0] * other.group0()[0])
                    + (self.group2()[1] * other.group0()[1])
                    + (self.group2()[2] * other.group0()[2])
                    + (self.group1()[0] * other.group1()[0])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group3()[3]) - (self.group0()[1] * other.group2()[2]) + (self.group0()[2] * other.group2()[1])
                    - (self.group2()[0] * other.group2()[3])
                    - (self.group2()[1] * other.group0()[2])
                    + (self.group2()[2] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[3])
                    - (self.group1()[1] * other.group1()[2])
                    + (self.group1()[2] * other.group1()[1])
                    - (self.group1()[3] * other.group3()[0])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[1] * other.group3()[3]) - (self.group0()[2] * other.group2()[0]) + (self.group2()[0] * other.group0()[2])
                    - (self.group2()[1] * other.group2()[3])
                    - (self.group2()[2] * other.group0()[0])
                    + (self.group1()[0] * other.group1()[2])
                    - (self.group1()[1] * other.group0()[3])
                    - (self.group1()[2] * other.group1()[0])
                    - (self.group1()[3] * other.group3()[1])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[0])
                    - (self.group0()[2] * other.group3()[3])
                    - (self.group2()[0] * other.group0()[1])
                    + (self.group2()[1] * other.group0()[0])
                    - (self.group2()[2] * other.group2()[3])
                    - (self.group1()[0] * other.group1()[1])
                    + (self.group1()[1] * other.group1()[0])
                    - (self.group1()[2] * other.group0()[3])
                    - (self.group1()[3] * other.group3()[2])),
                (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])
                    + (self.group2()[0] * other.group0()[0])
                    + (self.group2()[1] * other.group0()[1])
                    + (self.group2()[2] * other.group0()[2])
                    - (self.group1()[0] * other.group3()[0])
                    - (self.group1()[1] * other.group3()[1])
                    - (self.group1()[2] * other.group3()[2])
                    + (self.group1()[3] * other.group0()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group2()[0] * other.group0()[3])
                    - (self.group2()[0] * other.group1()[3])
                    - (self.group2()[1] * other.group1()[2])
                    - (self.group2()[1] * other.group3()[2])
                    + (self.group2()[2] * other.group1()[1])
                    + (self.group2()[2] * other.group3()[1])
                    - (self.group1()[0] * other.group3()[3])
                    - (self.group1()[1] * other.group2()[2])
                    + (self.group1()[2] * other.group2()[1])
                    + (self.group1()[3] * other.group2()[0])),
                ((self.group2()[0] * other.group1()[2]) + (self.group2()[0] * other.group3()[2])
                    - (self.group2()[1] * other.group0()[3])
                    - (self.group2()[1] * other.group1()[3])
                    - (self.group2()[2] * other.group1()[0])
                    - (self.group2()[2] * other.group3()[0])
                    + (self.group1()[0] * other.group2()[2])
                    - (self.group1()[1] * other.group3()[3])
                    - (self.group1()[2] * other.group2()[0])
                    + (self.group1()[3] * other.group2()[1])),
                (-(self.group2()[0] * other.group1()[1]) - (self.group2()[0] * other.group3()[1])
                    + (self.group2()[1] * other.group1()[0])
                    + (self.group2()[1] * other.group3()[0])
                    - (self.group2()[2] * other.group0()[3])
                    - (self.group2()[2] * other.group1()[3])
                    - (self.group1()[0] * other.group2()[1])
                    + (self.group1()[1] * other.group2()[0])
                    - (self.group1()[2] * other.group3()[3])
                    + (self.group1()[3] * other.group2()[2])),
                ((self.group2()[0] * other.group1()[0])
                    + (self.group2()[0] * other.group3()[0])
                    + (self.group2()[1] * other.group1()[1])
                    + (self.group2()[1] * other.group3()[1])
                    + (self.group2()[2] * other.group1()[2])
                    + (self.group2()[2] * other.group3()[2])
                    + (self.group1()[0] * other.group2()[0])
                    + (self.group1()[1] * other.group2()[1])
                    + (self.group1()[2] * other.group2()[2])
                    + (self.group1()[3] * other.group3()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group2()[2])
                    - (self.group0()[2] * other.group2()[1])
                    - (self.group2()[0] * other.group2()[3])
                    - (self.group2()[1] * other.group0()[2])
                    + (self.group2()[2] * other.group0()[1])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group3()[2])
                    - (self.group1()[2] * other.group3()[1])
                    + (self.group1()[3] * other.group1()[0])),
                (-(self.group0()[0] * other.group2()[2])
                    + (self.group0()[1] * other.group3()[3])
                    + (self.group0()[2] * other.group2()[0])
                    + (self.group2()[0] * other.group0()[2])
                    - (self.group2()[1] * other.group2()[3])
                    - (self.group2()[2] * other.group0()[0])
                    - (self.group1()[0] * other.group3()[2])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group3()[0])
                    + (self.group1()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) + (self.group0()[2] * other.group3()[3]) - (self.group2()[0] * other.group0()[1])
                    + (self.group2()[1] * other.group0()[0])
                    - (self.group2()[2] * other.group2()[3])
                    + (self.group1()[0] * other.group3()[1])
                    - (self.group1()[1] * other.group3()[0])
                    + (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])),
                ((self.group0()[0] * other.group1()[0]) - (self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group1()[1]) - (self.group0()[1] * other.group3()[1])
                    + (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])
                    + (self.group1()[0] * other.group0()[0])
                    + (self.group1()[1] * other.group0()[1])
                    + (self.group1()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group2()[3])),
            ]),
        );
    }
}
impl InfixGeometricAntiProduct for DipoleInversion {}
impl GeometricAntiProduct<AntiCircleRotor> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      149      165        0
    fn geometric_anti_product(self, other: AntiCircleRotor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group1()[2]) + (other.group0()[1] * self.group3()[2])
                    - (other.group0()[2] * self.group1()[1])
                    - (other.group0()[2] * self.group3()[1])
                    + (self.group0()[0] * other.group1()[3])
                    - (self.group0()[0] * other.group2()[3])
                    - (self.group0()[1] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[1])
                    - (other.group1()[0] * self.group2()[3])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[0] * self.group3()[2]) - (other.group0()[1] * self.group1()[3])
                    + (other.group0()[2] * self.group1()[0])
                    + (other.group0()[2] * self.group3()[0])
                    + (self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group1()[3])
                    - (self.group0()[1] * other.group2()[3])
                    - (self.group0()[2] * other.group1()[0])
                    - (other.group1()[1] * self.group2()[3])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[0] * self.group3()[1])
                    - (other.group0()[1] * self.group1()[0])
                    - (other.group0()[1] * self.group3()[0])
                    - (other.group0()[2] * self.group1()[3])
                    - (self.group0()[0] * other.group1()[1])
                    + (self.group0()[1] * other.group1()[0])
                    + (self.group0()[2] * other.group1()[3])
                    - (self.group0()[2] * other.group2()[3])
                    - (other.group1()[2] * self.group2()[3])),
                ((other.group0()[0] * self.group2()[0])
                    + (other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])
                    + (self.group0()[0] * other.group2()[0])
                    + (self.group0()[1] * other.group2()[1])
                    + (self.group0()[2] * other.group2()[2])
                    + (other.group1()[0] * self.group1()[0])
                    + (other.group1()[1] * self.group1()[1])
                    + (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self.group2()[2])
                    - (other.group0()[2] * self.group2()[1])
                    - (self.group0()[1] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[1])
                    + (other.group1()[1] * self.group1()[2])
                    - (other.group1()[2] * self.group1()[1])
                    - (other.group1()[3] * self.group3()[0])
                    - (other.group2()[0] * self.group2()[3])
                    - (other.group2()[3] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group3()[3])
                    + (other.group0()[2] * self.group2()[0])
                    + (self.group0()[0] * other.group2()[2])
                    - (self.group0()[2] * other.group2()[0])
                    - (other.group1()[0] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[0])
                    - (other.group1()[3] * self.group3()[1])
                    - (other.group2()[1] * self.group2()[3])
                    - (other.group2()[3] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) - (other.group0()[2] * self.group3()[3]) - (self.group0()[0] * other.group2()[1])
                    + (self.group0()[1] * other.group2()[0])
                    + (other.group1()[0] * self.group1()[1])
                    - (other.group1()[1] * self.group1()[0])
                    - (other.group1()[3] * self.group3()[2])
                    - (other.group2()[2] * self.group2()[3])
                    - (other.group2()[3] * self.group1()[2])),
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (other.group1()[0] * self.group3()[0])
                    - (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group3()[2])
                    + (other.group2()[3] * self.group1()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(other.group1()[0] * self.group3()[3]) + (other.group1()[1] * self.group2()[2])
                    - (other.group1()[2] * self.group2()[1])
                    - (other.group1()[3] * self.group2()[0])
                    + (other.group2()[0] * self.group1()[3])
                    + (other.group2()[1] * self.group1()[2])
                    - (other.group2()[1] * self.group3()[2])
                    - (other.group2()[2] * self.group1()[1])
                    + (other.group2()[2] * self.group3()[1])
                    - (other.group2()[3] * self.group2()[0])),
                (-(other.group1()[0] * self.group2()[2]) - (other.group1()[1] * self.group3()[3]) + (other.group1()[2] * self.group2()[0])
                    - (other.group1()[3] * self.group2()[1])
                    - (other.group2()[0] * self.group1()[2])
                    + (other.group2()[0] * self.group3()[2])
                    + (other.group2()[1] * self.group1()[3])
                    + (other.group2()[2] * self.group1()[0])
                    - (other.group2()[2] * self.group3()[0])
                    - (other.group2()[3] * self.group2()[1])),
                ((other.group1()[0] * self.group2()[1]) - (other.group1()[1] * self.group2()[0]) - (other.group1()[2] * self.group3()[3]) - (other.group1()[3] * self.group2()[2])
                    + (other.group2()[0] * self.group1()[1])
                    - (other.group2()[0] * self.group3()[1])
                    - (other.group2()[1] * self.group1()[0])
                    + (other.group2()[1] * self.group3()[0])
                    + (other.group2()[2] * self.group1()[3])
                    - (other.group2()[3] * self.group2()[2])),
                ((other.group1()[0] * self.group2()[0]) + (other.group1()[1] * self.group2()[1]) + (other.group1()[2] * self.group2()[2]) - (other.group1()[3] * self.group3()[3])
                    + (other.group2()[0] * self.group1()[0])
                    - (other.group2()[0] * self.group3()[0])
                    + (other.group2()[1] * self.group1()[1])
                    - (other.group2()[1] * self.group3()[1])
                    + (other.group2()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[2])
                    - (other.group2()[3] * self.group3()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1])
                    + (self.group0()[1] * other.group2()[2])
                    - (self.group0()[2] * other.group2()[1])
                    + (other.group1()[0] * self.group1()[3])
                    - (other.group1()[1] * self.group3()[2])
                    + (other.group1()[2] * self.group3()[1])
                    + (other.group1()[3] * self.group1()[0])
                    + (other.group2()[0] * self.group2()[3])
                    + (other.group2()[3] * self.group3()[0])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group3()[3]) + (other.group0()[2] * self.group2()[0])
                    - (self.group0()[0] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[0])
                    + (other.group1()[0] * self.group3()[2])
                    + (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group3()[0])
                    + (other.group1()[3] * self.group1()[1])
                    + (other.group2()[1] * self.group2()[3])
                    + (other.group2()[3] * self.group3()[1])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) - (other.group0()[2] * self.group3()[3]) + (self.group0()[0] * other.group2()[1])
                    - (self.group0()[1] * other.group2()[0])
                    - (other.group1()[0] * self.group3()[1])
                    + (other.group1()[1] * self.group3()[0])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])
                    + (other.group2()[2] * self.group2()[3])
                    + (other.group2()[3] * self.group3()[2])),
                ((other.group0()[0] * self.group1()[0])
                    + (other.group0()[0] * self.group3()[0])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[1] * self.group3()[1])
                    + (other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])
                    + (self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[2])
                    + (other.group1()[3] * self.group2()[3])
                    - (other.group2()[3] * self.group2()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDipoleInversion> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      209      225        0
    fn geometric_anti_product(self, other: AntiDipoleInversion) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2]) - (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (other.group0()[2] * self.group3()[1])
                    + (self.group0()[0] * other.group1()[3])
                    + (self.group0()[1] * other.group1()[2])
                    + (self.group0()[1] * other.group3()[2])
                    - (self.group0()[2] * other.group1()[1])
                    - (self.group0()[2] * other.group3()[1])
                    + (other.group1()[0] * self.group2()[3])
                    + (other.group2()[3] * self.group1()[0])
                    + (other.group2()[3] * self.group3()[0])
                    + (other.group3()[0] * self.group2()[3])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group1()[0])
                    - (other.group0()[2] * self.group3()[0])
                    - (self.group0()[0] * other.group1()[2])
                    - (self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group0()[2] * other.group3()[0])
                    + (other.group1()[1] * self.group2()[3])
                    + (other.group2()[3] * self.group1()[1])
                    + (other.group2()[3] * self.group3()[1])
                    + (other.group3()[1] * self.group2()[3])),
                (-(other.group0()[0] * self.group1()[1]) - (other.group0()[0] * self.group3()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (self.group0()[0] * other.group1()[1])
                    + (self.group0()[0] * other.group3()[1])
                    - (self.group0()[1] * other.group1()[0])
                    - (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (other.group1()[2] * self.group2()[3])
                    + (other.group2()[3] * self.group1()[2])
                    + (other.group2()[3] * self.group3()[2])
                    + (other.group3()[2] * self.group2()[3])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])
                    + (other.group2()[3] * self.group3()[3])
                    + (other.group3()[0] * self.group3()[0])
                    + (other.group3()[1] * self.group3()[1])
                    + (other.group3()[2] * self.group3()[2])
                    + (other.group3()[3] * self.group2()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[1])
                    + (self.group0()[0] * other.group3()[3])
                    + (self.group0()[1] * other.group2()[2])
                    - (self.group0()[2] * other.group2()[1])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])
                    - (other.group1()[3] * self.group3()[0])
                    + (other.group2()[0] * self.group2()[3])
                    + (other.group2()[3] * self.group2()[0])
                    - (other.group3()[0] * self.group1()[3])
                    + (other.group3()[1] * self.group3()[2])
                    - (other.group3()[2] * self.group3()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group3()[3]) - (other.group0()[2] * self.group2()[0]) - (self.group0()[0] * other.group2()[2])
                    + (self.group0()[1] * other.group3()[3])
                    + (self.group0()[2] * other.group2()[0])
                    + (other.group1()[0] * self.group1()[2])
                    - (other.group1()[2] * self.group1()[0])
                    - (other.group1()[3] * self.group3()[1])
                    + (other.group2()[1] * self.group2()[3])
                    + (other.group2()[3] * self.group2()[1])
                    - (other.group3()[0] * self.group3()[2])
                    - (other.group3()[1] * self.group1()[3])
                    + (other.group3()[2] * self.group3()[0])),
                (-(other.group0()[0] * self.group2()[1])
                    + (other.group0()[1] * self.group2()[0])
                    + (other.group0()[2] * self.group3()[3])
                    + (self.group0()[0] * other.group2()[1])
                    - (self.group0()[1] * other.group2()[0])
                    + (self.group0()[2] * other.group3()[3])
                    - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    - (other.group1()[3] * self.group3()[2])
                    + (other.group2()[2] * self.group2()[3])
                    + (other.group2()[3] * self.group2()[2])
                    + (other.group3()[0] * self.group3()[1])
                    - (other.group3()[1] * self.group3()[0])
                    - (other.group3()[2] * self.group1()[3])),
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (other.group1()[0] * self.group3()[0])
                    - (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group3()[2])
                    - (other.group2()[3] * self.group3()[3])
                    + (other.group3()[0] * self.group1()[0])
                    + (other.group3()[1] * self.group1()[1])
                    + (other.group3()[2] * self.group1()[2])
                    + (other.group3()[3] * self.group2()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group1()[0] * self.group3()[3]) - (other.group1()[1] * self.group2()[2]) + (other.group1()[2] * self.group2()[1])
                    - (other.group1()[3] * self.group2()[0])
                    - (other.group2()[0] * self.group1()[3])
                    - (other.group2()[1] * self.group1()[2])
                    + (other.group2()[1] * self.group3()[2])
                    + (other.group2()[2] * self.group1()[1])
                    - (other.group2()[2] * self.group3()[1])
                    - (other.group3()[0] * self.group3()[3])
                    + (other.group3()[1] * self.group2()[2])
                    - (other.group3()[2] * self.group2()[1])
                    + (other.group3()[3] * self.group1()[0])
                    - (other.group3()[3] * self.group3()[0])),
                ((other.group1()[0] * self.group2()[2]) + (other.group1()[1] * self.group3()[3]) - (other.group1()[2] * self.group2()[0]) - (other.group1()[3] * self.group2()[1])
                    + (other.group2()[0] * self.group1()[2])
                    - (other.group2()[0] * self.group3()[2])
                    - (other.group2()[1] * self.group1()[3])
                    - (other.group2()[2] * self.group1()[0])
                    + (other.group2()[2] * self.group3()[0])
                    - (other.group3()[0] * self.group2()[2])
                    - (other.group3()[1] * self.group3()[3])
                    + (other.group3()[2] * self.group2()[0])
                    + (other.group3()[3] * self.group1()[1])
                    - (other.group3()[3] * self.group3()[1])),
                (-(other.group1()[0] * self.group2()[1]) + (other.group1()[1] * self.group2()[0]) + (other.group1()[2] * self.group3()[3])
                    - (other.group1()[3] * self.group2()[2])
                    - (other.group2()[0] * self.group1()[1])
                    + (other.group2()[0] * self.group3()[1])
                    + (other.group2()[1] * self.group1()[0])
                    - (other.group2()[1] * self.group3()[0])
                    - (other.group2()[2] * self.group1()[3])
                    + (other.group3()[0] * self.group2()[1])
                    - (other.group3()[1] * self.group2()[0])
                    - (other.group3()[2] * self.group3()[3])
                    + (other.group3()[3] * self.group1()[2])
                    - (other.group3()[3] * self.group3()[2])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[0] * self.group3()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group3()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[0] * other.group3()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])
                    + (other.group1()[3] * self.group2()[3])
                    + (other.group2()[3] * self.group1()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1])
                    + (self.group0()[0] * other.group3()[3])
                    + (self.group0()[1] * other.group2()[2])
                    - (self.group0()[2] * other.group2()[1])
                    + (other.group1()[0] * self.group1()[3])
                    - (other.group1()[1] * self.group3()[2])
                    + (other.group1()[2] * self.group3()[1])
                    - (other.group1()[3] * self.group1()[0])
                    + (other.group2()[0] * self.group2()[3])
                    - (other.group2()[3] * self.group2()[0])
                    + (other.group3()[1] * self.group1()[2])
                    - (other.group3()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group3()[3]) + (other.group0()[2] * self.group2()[0])
                    - (self.group0()[0] * other.group2()[2])
                    + (self.group0()[1] * other.group3()[3])
                    + (self.group0()[2] * other.group2()[0])
                    + (other.group1()[0] * self.group3()[2])
                    + (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group3()[0])
                    - (other.group1()[3] * self.group1()[1])
                    + (other.group2()[1] * self.group2()[3])
                    - (other.group2()[3] * self.group2()[1])
                    - (other.group3()[0] * self.group1()[2])
                    + (other.group3()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) - (other.group0()[2] * self.group3()[3]) + (self.group0()[0] * other.group2()[1])
                    - (self.group0()[1] * other.group2()[0])
                    + (self.group0()[2] * other.group3()[3])
                    - (other.group1()[0] * self.group3()[1])
                    + (other.group1()[1] * self.group3()[0])
                    + (other.group1()[2] * self.group1()[3])
                    - (other.group1()[3] * self.group1()[2])
                    + (other.group2()[2] * self.group2()[3])
                    - (other.group2()[3] * self.group2()[2])
                    + (other.group3()[0] * self.group1()[1])
                    - (other.group3()[1] * self.group1()[0])),
                (-(other.group1()[0] * self.group2()[0])
                    - (other.group1()[1] * self.group2()[1])
                    - (other.group1()[2] * self.group2()[2])
                    - (other.group1()[3] * self.group3()[3])
                    - (other.group2()[0] * self.group1()[0])
                    + (other.group2()[0] * self.group3()[0])
                    - (other.group2()[1] * self.group1()[1])
                    + (other.group2()[1] * self.group3()[1])
                    - (other.group2()[2] * self.group1()[2])
                    + (other.group2()[2] * self.group3()[2])
                    + (other.group3()[0] * self.group2()[0])
                    + (other.group3()[1] * self.group2()[1])
                    + (other.group3()[2] * self.group2()[2])
                    - (other.group3()[3] * self.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       14       35        0
    fn geometric_anti_product(self, other: AntiDualNum) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[0] * self.group3()[0]) - (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[1]) - (other.group0()[0] * self.group3()[1]) - (other.group0()[1] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[0] * self.group3()[2]) - (other.group0()[1] * self.group0()[2])),
                (other.group0()[0] * self.group3()[3] * -1.0),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group2()[0]) - (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group1()[2])),
                (-(other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self.group1()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other.group0()[1] * self.group2()[0] * -1.0),
                (other.group0()[1] * self.group2()[1] * -1.0),
                (other.group0()[1] * self.group2()[2] * -1.0),
                (other.group0()[1] * self.group3()[3] * -1.0),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group3()[0])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group3()[1])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group3()[2])),
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group2()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiFlatPoint> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       44       60        0
    fn geometric_anti_product(self, other: AntiFlatPoint) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (other.group0()[3] * self.group1()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (other.group0()[0] * self.group2()[3]) - (other.group0()[3] * self.group3()[0])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0]) + (other.group0()[1] * self.group2()[3])
                    - (other.group0()[3] * self.group3()[1])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (other.group0()[2] * self.group2()[3]) - (other.group0()[3] * self.group3()[2])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group1()[1])
                    - (other.group0()[2] * self.group3()[1])
                    - (other.group0()[3] * self.group2()[0])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[0] * self.group3()[2]) - (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group1()[0])
                    + (other.group0()[2] * self.group3()[0])
                    - (other.group0()[3] * self.group2()[1])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group1()[0])
                    - (other.group0()[1] * self.group3()[0])
                    - (other.group0()[2] * self.group1()[3])
                    - (other.group0()[3] * self.group2()[2])),
                (other.group0()[3] * self.group2()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (other.group0()[0] * self.group2()[3]) - (other.group0()[3] * self.group1()[0])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0]) + (other.group0()[1] * self.group2()[3])
                    - (other.group0()[3] * self.group1()[1])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (other.group0()[2] * self.group2()[3]) - (other.group0()[3] * self.group1()[2])),
                (-(other.group0()[0] * self.group1()[0]) + (other.group0()[0] * self.group3()[0]) - (other.group0()[1] * self.group1()[1])
                    + (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])
                    - (other.group0()[3] * self.group3()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiFlector> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      104      120        0
    fn geometric_anti_product(self, other: AntiFlector) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) + (other.group1()[0] * self.group2()[3])),
                (-(self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group0()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (other.group1()[1] * self.group2()[3])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group0()[3]) + (other.group1()[2] * self.group2()[3])),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (other.group0()[3] * self.group1()[3])
                    + (other.group1()[0] * self.group3()[0])
                    + (other.group1()[1] * self.group3()[1])
                    + (other.group1()[2] * self.group3()[2])
                    + (other.group1()[3] * self.group2()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (other.group0()[0] * self.group2()[3])
                    - (other.group0()[3] * self.group3()[0])
                    - (other.group1()[0] * self.group1()[3])
                    + (other.group1()[1] * self.group3()[2])
                    - (other.group1()[2] * self.group3()[1])),
                (-(self.group0()[0] * other.group0()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group0()[0])
                    + (other.group0()[1] * self.group2()[3])
                    - (other.group0()[3] * self.group3()[1])
                    - (other.group1()[0] * self.group3()[2])
                    - (other.group1()[1] * self.group1()[3])
                    + (other.group1()[2] * self.group3()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group1()[3]) + (other.group0()[2] * self.group2()[3])
                    - (other.group0()[3] * self.group3()[2])
                    + (other.group1()[0] * self.group3()[1])
                    - (other.group1()[1] * self.group3()[0])
                    - (other.group1()[2] * self.group1()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (other.group1()[0] * self.group1()[0])
                    + (other.group1()[1] * self.group1()[1])
                    + (other.group1()[2] * self.group1()[2])
                    + (other.group1()[3] * self.group2()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group1()[1])
                    - (other.group0()[2] * self.group3()[1])
                    - (other.group0()[3] * self.group2()[0])
                    - (other.group1()[0] * self.group3()[3])
                    + (other.group1()[1] * self.group2()[2])
                    - (other.group1()[2] * self.group2()[1])
                    + (other.group1()[3] * self.group1()[0])
                    - (other.group1()[3] * self.group3()[0])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[0] * self.group3()[2]) - (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group1()[0])
                    + (other.group0()[2] * self.group3()[0])
                    - (other.group0()[3] * self.group2()[1])
                    - (other.group1()[0] * self.group2()[2])
                    - (other.group1()[1] * self.group3()[3])
                    + (other.group1()[2] * self.group2()[0])
                    + (other.group1()[3] * self.group1()[1])
                    - (other.group1()[3] * self.group3()[1])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group1()[0])
                    - (other.group0()[1] * self.group3()[0])
                    - (other.group0()[2] * self.group1()[3])
                    - (other.group0()[3] * self.group2()[2])
                    + (other.group1()[0] * self.group2()[1])
                    - (other.group1()[1] * self.group2()[0])
                    - (other.group1()[2] * self.group3()[3])
                    + (other.group1()[3] * self.group1()[2])
                    - (other.group1()[3] * self.group3()[2])),
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])
                    + (other.group0()[3] * self.group2()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (other.group0()[0] * self.group2()[3])
                    - (other.group0()[3] * self.group1()[0])
                    + (other.group1()[1] * self.group1()[2])
                    - (other.group1()[2] * self.group1()[1])),
                (-(self.group0()[0] * other.group0()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group0()[0])
                    + (other.group0()[1] * self.group2()[3])
                    - (other.group0()[3] * self.group1()[1])
                    - (other.group1()[0] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group1()[3]) + (other.group0()[2] * self.group2()[3])
                    - (other.group0()[3] * self.group1()[2])
                    + (other.group1()[0] * self.group1()[1])
                    - (other.group1()[1] * self.group1()[0])),
                (-(other.group0()[0] * self.group1()[0]) + (other.group0()[0] * self.group3()[0]) - (other.group0()[1] * self.group1()[1])
                    + (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])
                    - (other.group0()[3] * self.group3()[3])
                    + (other.group1()[0] * self.group2()[0])
                    + (other.group1()[1] * self.group2()[1])
                    + (other.group1()[2] * self.group2()[2])
                    - (other.group1()[3] * self.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiLine> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       74       90        0
    fn geometric_anti_product(self, other: AntiLine) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(other.group0()[0] * self.group2()[3]) + (other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group2()[3]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) - (other.group0()[2] * self.group2()[3])),
                ((other.group0()[0] * self.group1()[0])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[2])
                    + (other.group1()[0] * self.group0()[0])
                    + (other.group1()[1] * self.group0()[1])
                    + (other.group1()[2] * self.group0()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1]) - (other.group1()[0] * self.group2()[3]) + (other.group1()[1] * self.group0()[2])
                    - (other.group1()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group1()[0])
                    - (other.group1()[0] * self.group0()[2])
                    - (other.group1()[1] * self.group2()[3])
                    + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) + (other.group1()[0] * self.group0()[1])
                    - (other.group1()[1] * self.group0()[0])
                    - (other.group1()[2] * self.group2()[3])),
                (-(other.group0()[0] * self.group3()[0])
                    - (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group3()[2])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[1] * self.group1()[2])
                    - (other.group1()[1] * self.group3()[2])
                    - (other.group1()[2] * self.group1()[1])
                    + (other.group1()[2] * self.group3()[1])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group3()[3]) + (other.group0()[2] * self.group2()[0])
                    - (other.group1()[0] * self.group1()[2])
                    + (other.group1()[0] * self.group3()[2])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[2] * self.group1()[0])
                    - (other.group1()[2] * self.group3()[0])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) - (other.group0()[2] * self.group3()[3]) + (other.group1()[0] * self.group1()[1])
                    - (other.group1()[0] * self.group3()[1])
                    - (other.group1()[1] * self.group1()[0])
                    + (other.group1()[1] * self.group3()[0])
                    + (other.group1()[2] * self.group1()[3])),
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2]) + (other.group1()[0] * self.group1()[0])
                    - (other.group1()[0] * self.group3()[0])
                    + (other.group1()[1] * self.group1()[1])
                    - (other.group1()[1] * self.group3()[1])
                    + (other.group1()[2] * self.group1()[2])
                    - (other.group1()[2] * self.group3()[2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group3()[2]) + (other.group0()[2] * self.group3()[1]) + (other.group1()[0] * self.group2()[3])
                    - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group3()[0])
                    + (other.group1()[0] * self.group0()[2])
                    + (other.group1()[1] * self.group2()[3])
                    - (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group3()[0]) + (other.group0()[2] * self.group1()[3])
                    - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group2()[3])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiMotor> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      104      120        0
    fn geometric_anti_product(self, other: AntiMotor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])
                    - (other.group0()[0] * self.group2()[3])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group0()[3]) - (self.group0()[2] * other.group0()[0]) - (other.group0()[1] * self.group2()[3])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])
                    - (self.group0()[2] * other.group0()[3])
                    - (other.group0()[2] * self.group2()[3])),
                ((self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[2])
                    + (other.group0()[0] * self.group1()[0])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group2()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[1])
                    + (other.group0()[1] * self.group1()[2])
                    - (other.group0()[2] * self.group1()[1])
                    - (other.group0()[3] * self.group1()[0])
                    - (other.group1()[0] * self.group2()[3])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group1()[0]) - (other.group0()[0] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[0])
                    - (other.group0()[3] * self.group1()[1])
                    - (other.group1()[1] * self.group2()[3])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group1()[3])
                    + (other.group0()[0] * self.group1()[1])
                    - (other.group0()[1] * self.group1()[0])
                    - (other.group0()[3] * self.group1()[2])
                    - (other.group1()[2] * self.group2()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group3()[0])
                    - (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group3()[2])
                    + (other.group0()[3] * self.group1()[3])
                    + (other.group1()[3] * self.group2()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self.group2()[2])
                    - (other.group0()[2] * self.group2()[1])
                    - (other.group0()[3] * self.group2()[0])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[1] * self.group1()[2])
                    - (other.group1()[1] * self.group3()[2])
                    - (other.group1()[2] * self.group1()[1])
                    + (other.group1()[2] * self.group3()[1])
                    - (other.group1()[3] * self.group1()[0])
                    + (other.group1()[3] * self.group3()[0])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group3()[3]) + (other.group0()[2] * self.group2()[0])
                    - (other.group0()[3] * self.group2()[1])
                    - (other.group1()[0] * self.group1()[2])
                    + (other.group1()[0] * self.group3()[2])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[2] * self.group1()[0])
                    - (other.group1()[2] * self.group3()[0])
                    - (other.group1()[3] * self.group1()[1])
                    + (other.group1()[3] * self.group3()[1])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) - (other.group0()[2] * self.group3()[3]) - (other.group0()[3] * self.group2()[2])
                    + (other.group1()[0] * self.group1()[1])
                    - (other.group1()[0] * self.group3()[1])
                    - (other.group1()[1] * self.group1()[0])
                    + (other.group1()[1] * self.group3()[0])
                    + (other.group1()[2] * self.group1()[3])
                    - (other.group1()[3] * self.group1()[2])
                    + (other.group1()[3] * self.group3()[2])),
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2]) - (other.group0()[3] * self.group3()[3])
                    + (other.group1()[0] * self.group1()[0])
                    - (other.group1()[0] * self.group3()[0])
                    + (other.group1()[1] * self.group1()[1])
                    - (other.group1()[1] * self.group3()[1])
                    + (other.group1()[2] * self.group1()[2])
                    - (other.group1()[2] * self.group3()[2])
                    + (other.group1()[3] * self.group1()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) + (other.group0()[0] * self.group1()[3])
                    - (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group3()[1])
                    + (other.group0()[3] * self.group3()[0])
                    + (other.group1()[0] * self.group2()[3])),
                (-(self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (other.group0()[0] * self.group3()[2])
                    + (other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group3()[0])
                    + (other.group0()[3] * self.group3()[1])
                    + (other.group1()[1] * self.group2()[3])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[3]) - (other.group0()[0] * self.group3()[1])
                    + (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (other.group0()[3] * self.group3()[2])
                    + (other.group1()[2] * self.group2()[3])),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) - (other.group0()[3] * self.group2()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiPlane> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       44       60        0
    fn geometric_anti_product(self, other: AntiPlane) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (other.group0()[0] * self.group2()[3])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0]) + (other.group0()[1] * self.group2()[3])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (other.group0()[2] * self.group2()[3])),
                ((other.group0()[0] * self.group3()[0]) + (other.group0()[1] * self.group3()[1]) + (other.group0()[2] * self.group3()[2]) + (other.group0()[3] * self.group2()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group3()[2]) - (other.group0()[2] * self.group3()[1])),
                ((self.group0()[1] * other.group0()[3]) - (other.group0()[0] * self.group3()[2]) - (other.group0()[1] * self.group1()[3]) + (other.group0()[2] * self.group3()[0])),
                ((self.group0()[2] * other.group0()[3]) + (other.group0()[0] * self.group3()[1]) - (other.group0()[1] * self.group3()[0]) - (other.group0()[2] * self.group1()[3])),
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2]) + (other.group0()[3] * self.group2()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1])
                    + (other.group0()[3] * self.group1()[0])
                    - (other.group0()[3] * self.group3()[0])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group3()[3])
                    + (other.group0()[2] * self.group2()[0])
                    + (other.group0()[3] * self.group1()[1])
                    - (other.group0()[3] * self.group3()[1])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) - (other.group0()[2] * self.group3()[3]) + (other.group0()[3] * self.group1()[2])
                    - (other.group0()[3] * self.group3()[2])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1])),
                ((self.group0()[1] * other.group0()[3]) - (other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group1()[0])),
                ((self.group0()[2] * other.group0()[3]) + (other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2]) - (other.group0()[3] * self.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiScalar> for DipoleInversion {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0       15        0
    fn geometric_anti_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from([(self.group0()[0] * other[e12345]), (self.group0()[1] * other[e12345]), (self.group0()[2] * other[e12345])]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group1()[0] * other[e12345]),
                (self.group1()[1] * other[e12345]),
                (self.group1()[2] * other[e12345]),
                (self.group1()[3] * other[e12345]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group2()[0] * other[e12345]),
                (self.group2()[1] * other[e12345]),
                (self.group2()[2] * other[e12345]),
                (self.group2()[3] * other[e12345]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group3()[0] * other[e12345]),
                (self.group3()[1] * other[e12345]),
                (self.group3()[2] * other[e12345]),
                (self.group3()[3] * other[e12345]),
            ]),
        );
    }
}
impl GeometricAntiProduct<Circle> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      134      150        0
    fn geometric_anti_product(self, other: Circle) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2]) - (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (other.group0()[2] * self.group3()[1])
                    + (self.group0()[0] * other.group1()[3])
                    + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])
                    + (other.group1()[0] * self.group2()[3])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group1()[0])
                    - (other.group0()[2] * self.group3()[0])
                    - (self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (other.group1()[1] * self.group2()[3])),
                (-(other.group0()[0] * self.group1()[1]) - (other.group0()[0] * self.group3()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (other.group1()[2] * self.group2()[3])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1]) + (other.group2()[0] * self.group2()[3])
                    - (other.group2()[1] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[1])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])
                    - (other.group1()[3] * self.group3()[0])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group3()[3]) - (other.group0()[2] * self.group2()[0])
                    + (other.group2()[0] * self.group0()[2])
                    + (other.group2()[1] * self.group2()[3])
                    - (other.group2()[2] * self.group0()[0])
                    + (other.group1()[0] * self.group1()[2])
                    - (other.group1()[2] * self.group1()[0])
                    - (other.group1()[3] * self.group3()[1])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) + (other.group0()[2] * self.group3()[3])
                    - (other.group2()[0] * self.group0()[1])
                    + (other.group2()[1] * self.group0()[0])
                    + (other.group2()[2] * self.group2()[3])
                    - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    - (other.group1()[3] * self.group3()[2])),
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    - (other.group1()[0] * self.group3()[0])
                    - (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group3()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group2()[0] * self.group1()[3]) - (other.group2()[1] * self.group1()[2])
                    + (other.group2()[1] * self.group3()[2])
                    + (other.group2()[2] * self.group1()[1])
                    - (other.group2()[2] * self.group3()[1])
                    + (other.group1()[0] * self.group3()[3])
                    - (other.group1()[1] * self.group2()[2])
                    + (other.group1()[2] * self.group2()[1])
                    - (other.group1()[3] * self.group2()[0])),
                ((other.group2()[0] * self.group1()[2]) - (other.group2()[0] * self.group3()[2]) - (other.group2()[1] * self.group1()[3]) - (other.group2()[2] * self.group1()[0])
                    + (other.group2()[2] * self.group3()[0])
                    + (other.group1()[0] * self.group2()[2])
                    + (other.group1()[1] * self.group3()[3])
                    - (other.group1()[2] * self.group2()[0])
                    - (other.group1()[3] * self.group2()[1])),
                (-(other.group2()[0] * self.group1()[1]) + (other.group2()[0] * self.group3()[1]) + (other.group2()[1] * self.group1()[0])
                    - (other.group2()[1] * self.group3()[0])
                    - (other.group2()[2] * self.group1()[3])
                    - (other.group1()[0] * self.group2()[1])
                    + (other.group1()[1] * self.group2()[0])
                    + (other.group1()[2] * self.group3()[3])
                    - (other.group1()[3] * self.group2()[2])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[0] * self.group3()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group3()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    + (other.group1()[3] * self.group2()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1])
                    + (other.group2()[0] * self.group2()[3])
                    - (other.group2()[1] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[1])
                    + (other.group1()[0] * self.group1()[3])
                    - (other.group1()[1] * self.group3()[2])
                    + (other.group1()[2] * self.group3()[1])
                    - (other.group1()[3] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group3()[3])
                    + (other.group0()[2] * self.group2()[0])
                    + (other.group2()[0] * self.group0()[2])
                    + (other.group2()[1] * self.group2()[3])
                    - (other.group2()[2] * self.group0()[0])
                    + (other.group1()[0] * self.group3()[2])
                    + (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group3()[0])
                    - (other.group1()[3] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) - (other.group0()[2] * self.group3()[3]) - (other.group2()[0] * self.group0()[1])
                    + (other.group2()[1] * self.group0()[0])
                    + (other.group2()[2] * self.group2()[3])
                    - (other.group1()[0] * self.group3()[1])
                    + (other.group1()[1] * self.group3()[0])
                    + (other.group1()[2] * self.group1()[3])
                    - (other.group1()[3] * self.group1()[2])),
                (-(other.group2()[0] * self.group1()[0]) + (other.group2()[0] * self.group3()[0]) - (other.group2()[1] * self.group1()[1])
                    + (other.group2()[1] * self.group3()[1])
                    - (other.group2()[2] * self.group1()[2])
                    + (other.group2()[2] * self.group3()[2])
                    - (other.group1()[0] * self.group2()[0])
                    - (other.group1()[1] * self.group2()[1])
                    - (other.group1()[2] * self.group2()[2])
                    - (other.group1()[3] * self.group3()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<CircleRotor> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      149      165        0
    fn geometric_anti_product(self, other: CircleRotor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2]) - (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (other.group0()[2] * self.group3()[1])
                    + (self.group0()[0] * other.group1()[3])
                    + (self.group0()[0] * other.group2()[3])
                    + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])
                    + (other.group1()[0] * self.group2()[3])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group1()[0])
                    - (other.group0()[2] * self.group3()[0])
                    - (self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[1] * other.group2()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (other.group1()[1] * self.group2()[3])),
                (-(other.group0()[0] * self.group1()[1]) - (other.group0()[0] * self.group3()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group0()[2] * other.group2()[3])
                    + (other.group1()[2] * self.group2()[3])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1]) + (self.group0()[1] * other.group2()[2])
                    - (self.group0()[2] * other.group2()[1])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])
                    - (other.group1()[3] * self.group3()[0])
                    + (other.group2()[0] * self.group2()[3])
                    + (other.group2()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group3()[3]) - (other.group0()[2] * self.group2()[0]) - (self.group0()[0] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[0])
                    + (other.group1()[0] * self.group1()[2])
                    - (other.group1()[2] * self.group1()[0])
                    - (other.group1()[3] * self.group3()[1])
                    + (other.group2()[1] * self.group2()[3])
                    + (other.group2()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[1])
                    + (other.group0()[1] * self.group2()[0])
                    + (other.group0()[2] * self.group3()[3])
                    + (self.group0()[0] * other.group2()[1])
                    - (self.group0()[1] * other.group2()[0])
                    - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    - (other.group1()[3] * self.group3()[2])
                    + (other.group2()[2] * self.group2()[3])
                    + (other.group2()[3] * self.group1()[2])),
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (other.group1()[0] * self.group3()[0])
                    - (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group3()[2])
                    + (other.group2()[3] * self.group1()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group1()[0] * self.group3()[3]) - (other.group1()[1] * self.group2()[2]) + (other.group1()[2] * self.group2()[1])
                    - (other.group1()[3] * self.group2()[0])
                    - (other.group2()[0] * self.group1()[3])
                    - (other.group2()[1] * self.group1()[2])
                    + (other.group2()[1] * self.group3()[2])
                    + (other.group2()[2] * self.group1()[1])
                    - (other.group2()[2] * self.group3()[1])
                    + (other.group2()[3] * self.group2()[0])),
                ((other.group1()[0] * self.group2()[2]) + (other.group1()[1] * self.group3()[3]) - (other.group1()[2] * self.group2()[0]) - (other.group1()[3] * self.group2()[1])
                    + (other.group2()[0] * self.group1()[2])
                    - (other.group2()[0] * self.group3()[2])
                    - (other.group2()[1] * self.group1()[3])
                    - (other.group2()[2] * self.group1()[0])
                    + (other.group2()[2] * self.group3()[0])
                    + (other.group2()[3] * self.group2()[1])),
                (-(other.group1()[0] * self.group2()[1]) + (other.group1()[1] * self.group2()[0]) + (other.group1()[2] * self.group3()[3])
                    - (other.group1()[3] * self.group2()[2])
                    - (other.group2()[0] * self.group1()[1])
                    + (other.group2()[0] * self.group3()[1])
                    + (other.group2()[1] * self.group1()[0])
                    - (other.group2()[1] * self.group3()[0])
                    - (other.group2()[2] * self.group1()[3])
                    + (other.group2()[3] * self.group2()[2])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[0] * self.group3()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group3()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    + (other.group1()[3] * self.group2()[3])
                    + (other.group2()[3] * self.group2()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1])
                    + (self.group0()[1] * other.group2()[2])
                    - (self.group0()[2] * other.group2()[1])
                    + (other.group1()[0] * self.group1()[3])
                    - (other.group1()[1] * self.group3()[2])
                    + (other.group1()[2] * self.group3()[1])
                    - (other.group1()[3] * self.group1()[0])
                    + (other.group2()[0] * self.group2()[3])
                    + (other.group2()[3] * self.group3()[0])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group3()[3]) + (other.group0()[2] * self.group2()[0])
                    - (self.group0()[0] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[0])
                    + (other.group1()[0] * self.group3()[2])
                    + (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group3()[0])
                    - (other.group1()[3] * self.group1()[1])
                    + (other.group2()[1] * self.group2()[3])
                    + (other.group2()[3] * self.group3()[1])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) - (other.group0()[2] * self.group3()[3]) + (self.group0()[0] * other.group2()[1])
                    - (self.group0()[1] * other.group2()[0])
                    - (other.group1()[0] * self.group3()[1])
                    + (other.group1()[1] * self.group3()[0])
                    + (other.group1()[2] * self.group1()[3])
                    - (other.group1()[3] * self.group1()[2])
                    + (other.group2()[2] * self.group2()[3])
                    + (other.group2()[3] * self.group3()[2])),
                (-(other.group1()[0] * self.group2()[0])
                    - (other.group1()[1] * self.group2()[1])
                    - (other.group1()[2] * self.group2()[2])
                    - (other.group1()[3] * self.group3()[3])
                    - (other.group2()[0] * self.group1()[0])
                    + (other.group2()[0] * self.group3()[0])
                    - (other.group2()[1] * self.group1()[1])
                    + (other.group2()[1] * self.group3()[1])
                    - (other.group2()[2] * self.group1()[2])
                    + (other.group2()[2] * self.group3()[2])
                    + (other.group2()[3] * self.group3()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Dipole> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      134      150        0
    fn geometric_anti_product(self, other: Dipole) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group1()[2]) + (other.group0()[1] * self.group3()[2])
                    - (other.group0()[2] * self.group1()[1])
                    - (other.group0()[2] * self.group3()[1])
                    + (self.group0()[0] * other.group1()[3])
                    - (self.group0()[1] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[1])
                    - (other.group1()[0] * self.group2()[3])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[0] * self.group3()[2]) - (other.group0()[1] * self.group1()[3])
                    + (other.group0()[2] * self.group1()[0])
                    + (other.group0()[2] * self.group3()[0])
                    + (self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group1()[3])
                    - (self.group0()[2] * other.group1()[0])
                    - (other.group1()[1] * self.group2()[3])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[0] * self.group3()[1])
                    - (other.group0()[1] * self.group1()[0])
                    - (other.group0()[1] * self.group3()[0])
                    - (other.group0()[2] * self.group1()[3])
                    - (self.group0()[0] * other.group1()[1])
                    + (self.group0()[1] * other.group1()[0])
                    + (self.group0()[2] * other.group1()[3])
                    - (other.group1()[2] * self.group2()[3])),
                ((other.group0()[0] * self.group2()[0])
                    + (other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])
                    + (other.group2()[0] * self.group0()[0])
                    + (other.group2()[1] * self.group0()[1])
                    + (other.group2()[2] * self.group0()[2])
                    + (other.group1()[0] * self.group1()[0])
                    + (other.group1()[1] * self.group1()[1])
                    + (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self.group2()[2])
                    - (other.group0()[2] * self.group2()[1])
                    - (other.group2()[0] * self.group2()[3])
                    + (other.group2()[1] * self.group0()[2])
                    - (other.group2()[2] * self.group0()[1])
                    + (other.group1()[1] * self.group1()[2])
                    - (other.group1()[2] * self.group1()[1])
                    - (other.group1()[3] * self.group3()[0])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group3()[3]) + (other.group0()[2] * self.group2()[0])
                    - (other.group2()[0] * self.group0()[2])
                    - (other.group2()[1] * self.group2()[3])
                    + (other.group2()[2] * self.group0()[0])
                    - (other.group1()[0] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[0])
                    - (other.group1()[3] * self.group3()[1])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) - (other.group0()[2] * self.group3()[3]) + (other.group2()[0] * self.group0()[1])
                    - (other.group2()[1] * self.group0()[0])
                    - (other.group2()[2] * self.group2()[3])
                    + (other.group1()[0] * self.group1()[1])
                    - (other.group1()[1] * self.group1()[0])
                    - (other.group1()[3] * self.group3()[2])),
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    - (other.group1()[0] * self.group3()[0])
                    - (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group3()[2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((other.group2()[0] * self.group1()[3]) + (other.group2()[1] * self.group1()[2]) - (other.group2()[1] * self.group3()[2]) - (other.group2()[2] * self.group1()[1])
                    + (other.group2()[2] * self.group3()[1])
                    - (other.group1()[0] * self.group3()[3])
                    + (other.group1()[1] * self.group2()[2])
                    - (other.group1()[2] * self.group2()[1])
                    - (other.group1()[3] * self.group2()[0])),
                (-(other.group2()[0] * self.group1()[2])
                    + (other.group2()[0] * self.group3()[2])
                    + (other.group2()[1] * self.group1()[3])
                    + (other.group2()[2] * self.group1()[0])
                    - (other.group2()[2] * self.group3()[0])
                    - (other.group1()[0] * self.group2()[2])
                    - (other.group1()[1] * self.group3()[3])
                    + (other.group1()[2] * self.group2()[0])
                    - (other.group1()[3] * self.group2()[1])),
                ((other.group2()[0] * self.group1()[1]) - (other.group2()[0] * self.group3()[1]) - (other.group2()[1] * self.group1()[0])
                    + (other.group2()[1] * self.group3()[0])
                    + (other.group2()[2] * self.group1()[3])
                    + (other.group1()[0] * self.group2()[1])
                    - (other.group1()[1] * self.group2()[0])
                    - (other.group1()[2] * self.group3()[3])
                    - (other.group1()[3] * self.group2()[2])),
                ((other.group2()[0] * self.group1()[0]) - (other.group2()[0] * self.group3()[0]) + (other.group2()[1] * self.group1()[1]) - (other.group2()[1] * self.group3()[1])
                    + (other.group2()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[2])
                    + (other.group1()[0] * self.group2()[0])
                    + (other.group1()[1] * self.group2()[1])
                    + (other.group1()[2] * self.group2()[2])
                    - (other.group1()[3] * self.group3()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1])
                    + (other.group2()[0] * self.group2()[3])
                    - (other.group2()[1] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[1])
                    + (other.group1()[0] * self.group1()[3])
                    - (other.group1()[1] * self.group3()[2])
                    + (other.group1()[2] * self.group3()[1])
                    + (other.group1()[3] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group3()[3])
                    + (other.group0()[2] * self.group2()[0])
                    + (other.group2()[0] * self.group0()[2])
                    + (other.group2()[1] * self.group2()[3])
                    - (other.group2()[2] * self.group0()[0])
                    + (other.group1()[0] * self.group3()[2])
                    + (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group3()[0])
                    + (other.group1()[3] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) - (other.group0()[2] * self.group3()[3]) - (other.group2()[0] * self.group0()[1])
                    + (other.group2()[1] * self.group0()[0])
                    + (other.group2()[2] * self.group2()[3])
                    - (other.group1()[0] * self.group3()[1])
                    + (other.group1()[1] * self.group3()[0])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])),
                ((other.group0()[0] * self.group1()[0])
                    + (other.group0()[0] * self.group3()[0])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[1] * self.group3()[1])
                    + (other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])
                    + (self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])
                    + (self.group0()[2] * other.group1()[2])
                    + (other.group1()[3] * self.group2()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<DipoleInversion> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      209      225        0
    fn geometric_anti_product(self, other: DipoleInversion) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group1()[2]) + (other.group0()[1] * self.group3()[2])
                    - (other.group0()[2] * self.group1()[1])
                    - (other.group0()[2] * self.group3()[1])
                    + (self.group0()[0] * other.group1()[3])
                    - (self.group0()[1] * other.group1()[2])
                    + (self.group0()[1] * other.group3()[2])
                    + (self.group0()[2] * other.group1()[1])
                    - (self.group0()[2] * other.group3()[1])
                    - (other.group1()[0] * self.group2()[3])
                    - (other.group2()[3] * self.group1()[0])
                    - (other.group2()[3] * self.group3()[0])
                    + (other.group3()[0] * self.group2()[3])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[0] * self.group3()[2]) - (other.group0()[1] * self.group1()[3])
                    + (other.group0()[2] * self.group1()[0])
                    + (other.group0()[2] * self.group3()[0])
                    + (self.group0()[0] * other.group1()[2])
                    - (self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group1()[3])
                    - (self.group0()[2] * other.group1()[0])
                    + (self.group0()[2] * other.group3()[0])
                    - (other.group1()[1] * self.group2()[3])
                    - (other.group2()[3] * self.group1()[1])
                    - (other.group2()[3] * self.group3()[1])
                    + (other.group3()[1] * self.group2()[3])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[0] * self.group3()[1])
                    - (other.group0()[1] * self.group1()[0])
                    - (other.group0()[1] * self.group3()[0])
                    - (other.group0()[2] * self.group1()[3])
                    - (self.group0()[0] * other.group1()[1])
                    + (self.group0()[0] * other.group3()[1])
                    + (self.group0()[1] * other.group1()[0])
                    - (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group1()[3])
                    - (other.group1()[2] * self.group2()[3])
                    - (other.group2()[3] * self.group1()[2])
                    - (other.group2()[3] * self.group3()[2])
                    + (other.group3()[2] * self.group2()[3])),
                ((other.group0()[0] * self.group2()[0])
                    + (other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])
                    + (self.group0()[0] * other.group2()[0])
                    + (self.group0()[1] * other.group2()[1])
                    + (self.group0()[2] * other.group2()[2])
                    + (other.group1()[0] * self.group1()[0])
                    + (other.group1()[1] * self.group1()[1])
                    + (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])
                    - (other.group2()[3] * self.group3()[3])
                    + (other.group3()[0] * self.group3()[0])
                    + (other.group3()[1] * self.group3()[1])
                    + (other.group3()[2] * self.group3()[2])
                    - (other.group3()[3] * self.group2()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self.group2()[2])
                    - (other.group0()[2] * self.group2()[1])
                    - (self.group0()[0] * other.group3()[3])
                    - (self.group0()[1] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[1])
                    + (other.group1()[1] * self.group1()[2])
                    - (other.group1()[2] * self.group1()[1])
                    - (other.group1()[3] * self.group3()[0])
                    - (other.group2()[0] * self.group2()[3])
                    - (other.group2()[3] * self.group2()[0])
                    - (other.group3()[0] * self.group1()[3])
                    + (other.group3()[1] * self.group3()[2])
                    - (other.group3()[2] * self.group3()[1])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group3()[3])
                    + (other.group0()[2] * self.group2()[0])
                    + (self.group0()[0] * other.group2()[2])
                    - (self.group0()[1] * other.group3()[3])
                    - (self.group0()[2] * other.group2()[0])
                    - (other.group1()[0] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[0])
                    - (other.group1()[3] * self.group3()[1])
                    - (other.group2()[1] * self.group2()[3])
                    - (other.group2()[3] * self.group2()[1])
                    - (other.group3()[0] * self.group3()[2])
                    - (other.group3()[1] * self.group1()[3])
                    + (other.group3()[2] * self.group3()[0])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) - (other.group0()[2] * self.group3()[3]) - (self.group0()[0] * other.group2()[1])
                    + (self.group0()[1] * other.group2()[0])
                    - (self.group0()[2] * other.group3()[3])
                    + (other.group1()[0] * self.group1()[1])
                    - (other.group1()[1] * self.group1()[0])
                    - (other.group1()[3] * self.group3()[2])
                    - (other.group2()[2] * self.group2()[3])
                    - (other.group2()[3] * self.group2()[2])
                    + (other.group3()[0] * self.group3()[1])
                    - (other.group3()[1] * self.group3()[0])
                    - (other.group3()[2] * self.group1()[3])),
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (other.group1()[0] * self.group3()[0])
                    - (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group3()[2])
                    - (other.group2()[3] * self.group3()[3])
                    - (other.group3()[0] * self.group1()[0])
                    - (other.group3()[1] * self.group1()[1])
                    - (other.group3()[2] * self.group1()[2])
                    + (other.group3()[3] * self.group2()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(other.group1()[0] * self.group3()[3]) + (other.group1()[1] * self.group2()[2])
                    - (other.group1()[2] * self.group2()[1])
                    - (other.group1()[3] * self.group2()[0])
                    + (other.group2()[0] * self.group1()[3])
                    + (other.group2()[1] * self.group1()[2])
                    - (other.group2()[1] * self.group3()[2])
                    - (other.group2()[2] * self.group1()[1])
                    + (other.group2()[2] * self.group3()[1])
                    - (other.group3()[0] * self.group3()[3])
                    + (other.group3()[1] * self.group2()[2])
                    - (other.group3()[2] * self.group2()[1])
                    - (other.group3()[3] * self.group1()[0])
                    + (other.group3()[3] * self.group3()[0])),
                (-(other.group1()[0] * self.group2()[2]) - (other.group1()[1] * self.group3()[3]) + (other.group1()[2] * self.group2()[0])
                    - (other.group1()[3] * self.group2()[1])
                    - (other.group2()[0] * self.group1()[2])
                    + (other.group2()[0] * self.group3()[2])
                    + (other.group2()[1] * self.group1()[3])
                    + (other.group2()[2] * self.group1()[0])
                    - (other.group2()[2] * self.group3()[0])
                    - (other.group3()[0] * self.group2()[2])
                    - (other.group3()[1] * self.group3()[3])
                    + (other.group3()[2] * self.group2()[0])
                    - (other.group3()[3] * self.group1()[1])
                    + (other.group3()[3] * self.group3()[1])),
                ((other.group1()[0] * self.group2()[1]) - (other.group1()[1] * self.group2()[0]) - (other.group1()[2] * self.group3()[3]) - (other.group1()[3] * self.group2()[2])
                    + (other.group2()[0] * self.group1()[1])
                    - (other.group2()[0] * self.group3()[1])
                    - (other.group2()[1] * self.group1()[0])
                    + (other.group2()[1] * self.group3()[0])
                    + (other.group2()[2] * self.group1()[3])
                    + (other.group3()[0] * self.group2()[1])
                    - (other.group3()[1] * self.group2()[0])
                    - (other.group3()[2] * self.group3()[3])
                    - (other.group3()[3] * self.group1()[2])
                    + (other.group3()[3] * self.group3()[2])),
                ((other.group1()[0] * self.group2()[0]) + (other.group1()[1] * self.group2()[1]) + (other.group1()[2] * self.group2()[2]) - (other.group1()[3] * self.group3()[3])
                    + (other.group2()[0] * self.group1()[0])
                    - (other.group2()[0] * self.group3()[0])
                    + (other.group2()[1] * self.group1()[1])
                    - (other.group2()[1] * self.group3()[1])
                    + (other.group2()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[2])
                    + (other.group3()[0] * self.group2()[0])
                    + (other.group3()[1] * self.group2()[1])
                    + (other.group3()[2] * self.group2()[2])
                    + (other.group3()[3] * self.group1()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1])
                    + (self.group0()[0] * other.group3()[3])
                    + (self.group0()[1] * other.group2()[2])
                    - (self.group0()[2] * other.group2()[1])
                    + (other.group1()[0] * self.group1()[3])
                    - (other.group1()[1] * self.group3()[2])
                    + (other.group1()[2] * self.group3()[1])
                    + (other.group1()[3] * self.group1()[0])
                    + (other.group2()[0] * self.group2()[3])
                    - (other.group2()[3] * self.group2()[0])
                    - (other.group3()[1] * self.group1()[2])
                    + (other.group3()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group3()[3]) + (other.group0()[2] * self.group2()[0])
                    - (self.group0()[0] * other.group2()[2])
                    + (self.group0()[1] * other.group3()[3])
                    + (self.group0()[2] * other.group2()[0])
                    + (other.group1()[0] * self.group3()[2])
                    + (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group3()[0])
                    + (other.group1()[3] * self.group1()[1])
                    + (other.group2()[1] * self.group2()[3])
                    - (other.group2()[3] * self.group2()[1])
                    + (other.group3()[0] * self.group1()[2])
                    - (other.group3()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) - (other.group0()[2] * self.group3()[3]) + (self.group0()[0] * other.group2()[1])
                    - (self.group0()[1] * other.group2()[0])
                    + (self.group0()[2] * other.group3()[3])
                    - (other.group1()[0] * self.group3()[1])
                    + (other.group1()[1] * self.group3()[0])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])
                    + (other.group2()[2] * self.group2()[3])
                    - (other.group2()[3] * self.group2()[2])
                    - (other.group3()[0] * self.group1()[1])
                    + (other.group3()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group1()[0])
                    + (other.group0()[0] * self.group3()[0])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[1] * self.group3()[1])
                    + (other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])
                    + (self.group0()[0] * other.group1()[0])
                    - (self.group0()[0] * other.group3()[0])
                    + (self.group0()[1] * other.group1()[1])
                    - (self.group0()[1] * other.group3()[1])
                    + (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])
                    + (other.group1()[3] * self.group2()[3])
                    - (other.group2()[3] * self.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<DualNum> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       14       30        0
    fn geometric_anti_product(self, other: DualNum) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[0] * self.group3()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group0()[2])),
                (other.group0()[0] * self.group3()[3]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group1()[2])),
                (-(other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self.group1()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[1] * self.group2()[0]),
                (other.group0()[1] * self.group2()[1]),
                (other.group0()[1] * self.group2()[2]),
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group2()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group3()[0])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group3()[1])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group3()[2])),
                (other.group0()[1] * self.group3()[3]),
            ]),
        );
    }
}
impl GeometricAntiProduct<FlatPoint> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       44       60        0
    fn geometric_anti_product(self, other: FlatPoint) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])
                    - (self.group2()[3] * other.group0()[0])
                    - (self.group3()[0] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0]) - (self.group2()[3] * other.group0()[1]) - (self.group3()[1] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])
                    - (self.group2()[3] * other.group0()[2])
                    - (self.group3()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1]) + (self.group1()[3] * other.group0()[0])
                    - (self.group2()[0] * other.group0()[3])
                    + (self.group3()[1] * other.group0()[2])
                    - (self.group3()[2] * other.group0()[1])),
                ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0]) + (self.group1()[3] * other.group0()[1])
                    - (self.group2()[1] * other.group0()[3])
                    - (self.group3()[0] * other.group0()[2])
                    + (self.group3()[2] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0]) + (self.group1()[3] * other.group0()[2])
                    - (self.group2()[2] * other.group0()[3])
                    + (self.group3()[0] * other.group0()[1])
                    - (self.group3()[1] * other.group0()[0])),
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])
                    - (self.group3()[0] * other.group0()[0])
                    - (self.group3()[1] * other.group0()[1])
                    - (self.group3()[2] * other.group0()[2])
                    - (self.group3()[3] * other.group0()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (self.group1()[0] * other.group0()[3]) + (self.group2()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[2])
                    + (self.group0()[2] * other.group0()[0])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group2()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[3]) + (self.group2()[3] * other.group0()[2])),
                (self.group2()[3] * other.group0()[3]),
            ]),
        );
    }
}
impl GeometricAntiProduct<Flector> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      104      120        0
    fn geometric_anti_product(self, other: Flector) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) + (self.group2()[3] * other.group1()[0])),
                (-(self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group0()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group2()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group0()[3]) + (self.group2()[3] * other.group1()[2])),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group0()[3])
                    - (self.group2()[3] * other.group1()[3])
                    + (self.group3()[0] * other.group1()[0])
                    + (self.group3()[1] * other.group1()[1])
                    + (self.group3()[2] * other.group1()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])
                    - (self.group1()[3] * other.group1()[0])
                    - (self.group2()[3] * other.group0()[0])
                    - (self.group3()[0] * other.group0()[3])
                    - (self.group3()[1] * other.group1()[2])
                    + (self.group3()[2] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[2])
                    - (self.group0()[1] * other.group1()[3])
                    - (self.group0()[2] * other.group0()[0])
                    - (self.group1()[3] * other.group1()[1])
                    - (self.group2()[3] * other.group0()[1])
                    + (self.group3()[0] * other.group1()[2])
                    - (self.group3()[1] * other.group0()[3])
                    - (self.group3()[2] * other.group1()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[3])
                    - (self.group1()[3] * other.group1()[2])
                    - (self.group2()[3] * other.group0()[2])
                    - (self.group3()[0] * other.group1()[1])
                    + (self.group3()[1] * other.group1()[0])
                    - (self.group3()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])
                    + (self.group2()[3] * other.group1()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group1()[0] * other.group1()[3]) - (self.group1()[1] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[1])
                    + (self.group1()[3] * other.group0()[0])
                    - (self.group2()[0] * other.group0()[3])
                    - (self.group2()[1] * other.group1()[2])
                    + (self.group2()[2] * other.group1()[1])
                    + (self.group3()[0] * other.group1()[3])
                    + (self.group3()[1] * other.group0()[2])
                    - (self.group3()[2] * other.group0()[1])
                    - (self.group3()[3] * other.group1()[0])),
                ((self.group1()[0] * other.group0()[2]) - (self.group1()[1] * other.group1()[3]) - (self.group1()[2] * other.group0()[0])
                    + (self.group1()[3] * other.group0()[1])
                    + (self.group2()[0] * other.group1()[2])
                    - (self.group2()[1] * other.group0()[3])
                    - (self.group2()[2] * other.group1()[0])
                    - (self.group3()[0] * other.group0()[2])
                    + (self.group3()[1] * other.group1()[3])
                    + (self.group3()[2] * other.group0()[0])
                    - (self.group3()[3] * other.group1()[1])),
                (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0]) - (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group0()[2])
                    - (self.group2()[0] * other.group1()[1])
                    + (self.group2()[1] * other.group1()[0])
                    - (self.group2()[2] * other.group0()[3])
                    + (self.group3()[0] * other.group0()[1])
                    - (self.group3()[1] * other.group0()[0])
                    + (self.group3()[2] * other.group1()[3])
                    - (self.group3()[3] * other.group1()[2])),
                ((self.group1()[0] * other.group0()[0])
                    + (self.group1()[1] * other.group0()[1])
                    + (self.group1()[2] * other.group0()[2])
                    + (self.group1()[3] * other.group1()[3])
                    + (self.group2()[0] * other.group1()[0])
                    + (self.group2()[1] * other.group1()[1])
                    + (self.group2()[2] * other.group1()[2])
                    - (self.group3()[0] * other.group0()[0])
                    - (self.group3()[1] * other.group0()[1])
                    - (self.group3()[2] * other.group0()[2])
                    - (self.group3()[3] * other.group0()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])
                    + (self.group1()[0] * other.group0()[3])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])
                    + (self.group2()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group0()[0])
                    - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group1()[2] * other.group1()[0])
                    + (self.group2()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group1()[3]) + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[0])
                    + (self.group1()[2] * other.group0()[3])
                    + (self.group2()[3] * other.group0()[2])),
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])
                    + (self.group2()[3] * other.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Line> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       74       90        0
    fn geometric_anti_product(self, other: Line) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (other.group0()[0] * self.group2()[3])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0]) + (other.group0()[1] * self.group2()[3])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (other.group0()[2] * self.group2()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (other.group1()[0] * self.group2()[3])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0]) + (other.group0()[0] * self.group1()[2])
                    - (other.group0()[2] * self.group1()[0])
                    + (other.group1()[1] * self.group2()[3])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) - (other.group0()[0] * self.group1()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group2()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group3()[0])
                    - (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group3()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1])
                    - (other.group1()[0] * self.group1()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[1] * self.group3()[2])
                    + (other.group1()[2] * self.group1()[1])
                    - (other.group1()[2] * self.group3()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group3()[3]) - (other.group0()[2] * self.group2()[0]) + (other.group1()[0] * self.group1()[2])
                    - (other.group1()[0] * self.group3()[2])
                    - (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group1()[0])
                    + (other.group1()[2] * self.group3()[0])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) + (other.group0()[2] * self.group3()[3])
                    - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[0] * self.group3()[1])
                    + (other.group1()[1] * self.group1()[0])
                    - (other.group1()[1] * self.group3()[0])
                    - (other.group1()[2] * self.group1()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) + (other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group3()[1])
                    + (other.group1()[0] * self.group2()[3])),
                (-(self.group0()[0] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[0])
                    + (other.group0()[0] * self.group3()[2])
                    + (other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group3()[0])
                    + (other.group1()[1] * self.group2()[3])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) - (other.group0()[0] * self.group3()[1])
                    + (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (other.group1()[2] * self.group2()[3])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[0] * self.group1()[0])
                    + (other.group1()[0] * self.group3()[0])
                    - (other.group1()[1] * self.group1()[1])
                    + (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group1()[2])
                    + (other.group1()[2] * self.group3()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Motor> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      104      120        0
    fn geometric_anti_product(self, other: Motor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (self.group2()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[2])
                    + (self.group0()[1] * other.group0()[3])
                    + (self.group0()[2] * other.group0()[0])
                    + (self.group2()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[3]) + (self.group2()[3] * other.group0()[2])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])
                    + (self.group2()[3] * other.group1()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])
                    + (self.group1()[0] * other.group0()[3])
                    + (self.group1()[1] * other.group0()[2])
                    - (self.group1()[2] * other.group0()[1])
                    + (self.group2()[3] * other.group1()[0])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group1()[0])
                    - (self.group1()[0] * other.group0()[2])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group1()[2] * other.group0()[0])
                    + (self.group2()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[3]) + (self.group1()[0] * other.group0()[1])
                    - (self.group1()[1] * other.group0()[0])
                    + (self.group1()[2] * other.group0()[3])
                    + (self.group2()[3] * other.group1()[2])),
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])
                    + (self.group1()[3] * other.group0()[3])
                    + (self.group2()[3] * other.group1()[3])
                    - (self.group3()[0] * other.group0()[0])
                    - (self.group3()[1] * other.group0()[1])
                    - (self.group3()[2] * other.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group1()[0] * other.group1()[3]) + (self.group1()[1] * other.group1()[2]) - (self.group1()[2] * other.group1()[1]) - (self.group1()[3] * other.group1()[0])
                    + (self.group2()[0] * other.group0()[3])
                    + (self.group2()[1] * other.group0()[2])
                    - (self.group2()[2] * other.group0()[1])
                    - (self.group3()[0] * other.group1()[3])
                    - (self.group3()[1] * other.group1()[2])
                    + (self.group3()[2] * other.group1()[1])
                    + (self.group3()[3] * other.group0()[0])),
                (-(self.group1()[0] * other.group1()[2]) + (self.group1()[1] * other.group1()[3]) + (self.group1()[2] * other.group1()[0])
                    - (self.group1()[3] * other.group1()[1])
                    - (self.group2()[0] * other.group0()[2])
                    + (self.group2()[1] * other.group0()[3])
                    + (self.group2()[2] * other.group0()[0])
                    + (self.group3()[0] * other.group1()[2])
                    - (self.group3()[1] * other.group1()[3])
                    - (self.group3()[2] * other.group1()[0])
                    + (self.group3()[3] * other.group0()[1])),
                ((self.group1()[0] * other.group1()[1]) - (self.group1()[1] * other.group1()[0]) + (self.group1()[2] * other.group1()[3]) - (self.group1()[3] * other.group1()[2])
                    + (self.group2()[0] * other.group0()[1])
                    - (self.group2()[1] * other.group0()[0])
                    + (self.group2()[2] * other.group0()[3])
                    - (self.group3()[0] * other.group1()[1])
                    + (self.group3()[1] * other.group1()[0])
                    - (self.group3()[2] * other.group1()[3])
                    + (self.group3()[3] * other.group0()[2])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group2()[3] * other.group0()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])
                    + (self.group1()[3] * other.group0()[0])
                    + (self.group2()[3] * other.group1()[0])
                    + (self.group3()[0] * other.group0()[3])
                    + (self.group3()[1] * other.group0()[2])
                    - (self.group3()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group1()[3] * other.group0()[1])
                    + (self.group2()[3] * other.group1()[1])
                    - (self.group3()[0] * other.group0()[2])
                    + (self.group3()[1] * other.group0()[3])
                    + (self.group3()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group0()[2])
                    + (self.group2()[3] * other.group1()[2])
                    + (self.group3()[0] * other.group0()[1])
                    - (self.group3()[1] * other.group0()[0])
                    + (self.group3()[2] * other.group0()[3])),
                (-(self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])
                    + (self.group3()[0] * other.group1()[0])
                    + (self.group3()[1] * other.group1()[1])
                    + (self.group3()[2] * other.group1()[2])
                    + (self.group3()[3] * other.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<MultiVector> for DipoleInversion {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      448      480        0
    fn geometric_anti_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group0()[0] * other.group8()[0])
                    - (self.group0()[1] * other.group8()[1])
                    - (self.group0()[2] * other.group8()[2])
                    - (other.group7()[0] * self.group2()[0])
                    - (other.group7()[1] * self.group2()[1])
                    - (other.group7()[2] * self.group2()[2])
                    - (self.group1()[0] * other.group6()[0])
                    - (self.group1()[1] * other.group6()[1])
                    - (self.group1()[2] * other.group6()[2])
                    - (self.group1()[3] * other.group6()[3])
                    + (self.group2()[3] * other[e1])
                    + (self.group3()[0] * other.group1()[0])
                    + (self.group3()[1] * other.group1()[1])
                    + (self.group3()[2] * other.group1()[2])
                    + (self.group3()[3] * other.group1()[3])),
                ((self.group0()[0] * other.group3()[0])
                    + (self.group0()[1] * other.group3()[1])
                    + (self.group0()[2] * other.group3()[2])
                    + (other.group4()[0] * self.group2()[0])
                    + (other.group4()[1] * self.group2()[1])
                    + (other.group4()[2] * self.group2()[2])
                    + (other.group5()[0] * self.group1()[0])
                    + (other.group5()[1] * self.group1()[1])
                    + (other.group5()[2] * self.group1()[2])
                    - (self.group1()[3] * other.group3()[3])
                    - (self.group2()[3] * other.group9()[3])
                    + (self.group3()[0] * other.group9()[0])
                    + (self.group3()[1] * other.group9()[1])
                    + (self.group3()[2] * other.group9()[2])
                    - (self.group3()[3] * other[e45])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group3()[0]) + (self.group0()[0] * other.group9()[3]) + (self.group0()[1] * other.group3()[2])
                    - (self.group0()[2] * other.group3()[1])
                    - (other.group4()[0] * self.group3()[3])
                    + (other.group4()[1] * self.group2()[2])
                    - (other.group4()[2] * self.group2()[1])
                    + (other.group5()[0] * self.group1()[3])
                    - (other.group5()[1] * self.group3()[2])
                    + (other.group5()[2] * self.group3()[1])
                    + (self.group1()[0] * other.group3()[3])
                    + (self.group1()[1] * other.group9()[2])
                    - (self.group1()[2] * other.group9()[1])
                    - (self.group2()[0] * other[e45])
                    + (self.group2()[3] * other.group3()[0])),
                ((other.group0()[0] * self.group3()[1]) - (self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group9()[3]) + (self.group0()[2] * other.group3()[0])
                    - (other.group4()[0] * self.group2()[2])
                    - (other.group4()[1] * self.group3()[3])
                    + (other.group4()[2] * self.group2()[0])
                    + (other.group5()[0] * self.group3()[2])
                    + (other.group5()[1] * self.group1()[3])
                    - (other.group5()[2] * self.group3()[0])
                    - (self.group1()[0] * other.group9()[2])
                    + (self.group1()[1] * other.group3()[3])
                    + (self.group1()[2] * other.group9()[0])
                    - (self.group2()[1] * other[e45])
                    + (self.group2()[3] * other.group3()[1])),
                ((other.group0()[0] * self.group3()[2]) + (self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group9()[3])
                    + (other.group4()[0] * self.group2()[1])
                    - (other.group4()[1] * self.group2()[0])
                    - (other.group4()[2] * self.group3()[3])
                    - (other.group5()[0] * self.group3()[1])
                    + (other.group5()[1] * self.group3()[0])
                    + (other.group5()[2] * self.group1()[3])
                    + (self.group1()[0] * other.group9()[1])
                    - (self.group1()[1] * other.group9()[0])
                    + (self.group1()[2] * other.group3()[3])
                    - (self.group2()[2] * other[e45])
                    + (self.group2()[3] * other.group3()[2])),
                (-(other.group0()[0] * self.group2()[3]) + (self.group0()[0] * other.group5()[0]) - (self.group0()[0] * other.group9()[0])
                    + (self.group0()[1] * other.group5()[1])
                    - (self.group0()[1] * other.group9()[1])
                    + (self.group0()[2] * other.group5()[2])
                    - (self.group0()[2] * other.group9()[2])
                    + (other.group4()[0] * self.group1()[0])
                    + (other.group4()[0] * self.group3()[0])
                    + (other.group4()[1] * self.group1()[1])
                    + (other.group4()[1] * self.group3()[1])
                    + (other.group4()[2] * self.group1()[2])
                    + (other.group4()[2] * self.group3()[2])
                    - (self.group1()[3] * other[e45])
                    + (self.group2()[3] * other.group3()[3])),
            ]),
            // e5
            (-(other.group0()[0] * self.group3()[3])
                + (other.group5()[0] * self.group2()[0])
                + (other.group5()[1] * self.group2()[1])
                + (other.group5()[2] * self.group2()[2])
                + (self.group1()[0] * other.group3()[0])
                + (self.group1()[1] * other.group3()[1])
                + (self.group1()[2] * other.group3()[2])
                + (self.group1()[3] * other.group9()[3])
                + (self.group2()[0] * other.group9()[0])
                + (self.group2()[1] * other.group9()[1])
                + (self.group2()[2] * other.group9()[2])
                - (self.group3()[0] * other.group3()[0])
                - (self.group3()[1] * other.group3()[1])
                - (self.group3()[2] * other.group3()[2])
                - (self.group3()[3] * other.group3()[3])),
            // e15, e25, e35, e45
            Simd32x4::from([
                ((other.group0()[1] * self.group2()[0]) - (other.group8()[0] * self.group1()[3]) - (other.group8()[1] * self.group1()[2])
                    + (other.group8()[1] * self.group3()[2])
                    + (other.group8()[2] * self.group1()[1])
                    - (other.group8()[2] * self.group3()[1])
                    + (self.group1()[0] * other[e1])
                    - (self.group2()[0] * other.group6()[3])
                    - (self.group2()[1] * other.group1()[2])
                    + (self.group2()[1] * other.group6()[2])
                    + (self.group2()[2] * other.group1()[1])
                    - (self.group2()[2] * other.group6()[1])
                    - (self.group3()[0] * other[e1])
                    - (self.group3()[3] * other.group1()[0])
                    + (self.group3()[3] * other.group6()[0])),
                ((other.group0()[1] * self.group2()[1]) + (other.group8()[0] * self.group1()[2])
                    - (other.group8()[0] * self.group3()[2])
                    - (other.group8()[1] * self.group1()[3])
                    - (other.group8()[2] * self.group1()[0])
                    + (other.group8()[2] * self.group3()[0])
                    + (self.group1()[1] * other[e1])
                    + (self.group2()[0] * other.group1()[2])
                    - (self.group2()[0] * other.group6()[2])
                    - (self.group2()[1] * other.group6()[3])
                    - (self.group2()[2] * other.group1()[0])
                    + (self.group2()[2] * other.group6()[0])
                    - (self.group3()[1] * other[e1])
                    - (self.group3()[3] * other.group1()[1])
                    + (self.group3()[3] * other.group6()[1])),
                ((other.group0()[1] * self.group2()[2]) - (other.group8()[0] * self.group1()[1]) + (other.group8()[0] * self.group3()[1]) + (other.group8()[1] * self.group1()[0])
                    - (other.group8()[1] * self.group3()[0])
                    - (other.group8()[2] * self.group1()[3])
                    + (self.group1()[2] * other[e1])
                    - (self.group2()[0] * other.group1()[1])
                    + (self.group2()[0] * other.group6()[1])
                    + (self.group2()[1] * other.group1()[0])
                    - (self.group2()[1] * other.group6()[0])
                    - (self.group2()[2] * other.group6()[3])
                    - (self.group3()[2] * other[e1])
                    - (self.group3()[3] * other.group1()[2])
                    + (self.group3()[3] * other.group6()[2])),
                ((other.group0()[1] * self.group1()[3]) - (self.group0()[0] * other.group8()[0]) - (self.group0()[1] * other.group8()[1]) - (self.group0()[2] * other.group8()[2])
                    + (other.group7()[0] * self.group2()[0])
                    + (other.group7()[1] * self.group2()[1])
                    + (other.group7()[2] * self.group2()[2])
                    + (self.group1()[0] * other.group1()[0])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[2] * other.group1()[2])
                    + (self.group2()[3] * other[e1])
                    - (self.group3()[0] * other.group6()[0])
                    - (self.group3()[1] * other.group6()[1])
                    - (self.group3()[2] * other.group6()[2])
                    - (self.group3()[3] * other.group1()[3])),
            ]),
            // e41, e42, e43
            Simd32x3::from([
                ((other.group0()[1] * self.group0()[0]) + (self.group0()[0] * other.group6()[3]) + (self.group0()[1] * other.group1()[2]) + (self.group0()[1] * other.group6()[2])
                    - (self.group0()[2] * other.group1()[1])
                    - (self.group0()[2] * other.group6()[1])
                    + (other.group7()[0] * self.group1()[3])
                    - (other.group7()[1] * self.group1()[2])
                    - (other.group7()[1] * self.group3()[2])
                    + (other.group7()[2] * self.group1()[1])
                    + (other.group7()[2] * self.group3()[1])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group2()[3] * other.group1()[0])
                    + (self.group2()[3] * other.group6()[0])
                    + (self.group3()[0] * other.group1()[3])),
                ((other.group0()[1] * self.group0()[1]) - (self.group0()[0] * other.group1()[2]) - (self.group0()[0] * other.group6()[2])
                    + (self.group0()[1] * other.group6()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group0()[2] * other.group6()[0])
                    + (other.group7()[0] * self.group1()[2])
                    + (other.group7()[0] * self.group3()[2])
                    + (other.group7()[1] * self.group1()[3])
                    - (other.group7()[2] * self.group1()[0])
                    - (other.group7()[2] * self.group3()[0])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group2()[3] * other.group1()[1])
                    + (self.group2()[3] * other.group6()[1])
                    + (self.group3()[1] * other.group1()[3])),
                ((other.group0()[1] * self.group0()[2]) + (self.group0()[0] * other.group1()[1]) + (self.group0()[0] * other.group6()[1])
                    - (self.group0()[1] * other.group1()[0])
                    - (self.group0()[1] * other.group6()[0])
                    + (self.group0()[2] * other.group6()[3])
                    - (other.group7()[0] * self.group1()[1])
                    - (other.group7()[0] * self.group3()[1])
                    + (other.group7()[1] * self.group1()[0])
                    + (other.group7()[1] * self.group3()[0])
                    + (other.group7()[2] * self.group1()[3])
                    + (self.group1()[2] * other.group1()[3])
                    + (self.group2()[3] * other.group1()[2])
                    + (self.group2()[3] * other.group6()[2])
                    + (self.group3()[2] * other.group1()[3])),
            ]),
            // e23, e31, e12
            Simd32x3::from([
                ((other.group0()[1] * self.group1()[0]) + (self.group0()[0] * other[e1]) + (self.group0()[1] * other.group8()[2]) - (self.group0()[2] * other.group8()[1])
                    + (other.group7()[0] * self.group3()[3])
                    - (other.group7()[1] * self.group2()[2])
                    + (other.group7()[2] * self.group2()[1])
                    + (other.group8()[0] * self.group2()[3])
                    + (self.group1()[1] * other.group6()[2])
                    - (self.group1()[2] * other.group6()[1])
                    - (self.group1()[3] * other.group1()[0])
                    + (self.group2()[0] * other.group1()[3])
                    - (self.group3()[0] * other.group6()[3])
                    - (self.group3()[1] * other.group1()[2])
                    + (self.group3()[2] * other.group1()[1])),
                ((other.group0()[1] * self.group1()[1]) - (self.group0()[0] * other.group8()[2])
                    + (self.group0()[1] * other[e1])
                    + (self.group0()[2] * other.group8()[0])
                    + (other.group7()[0] * self.group2()[2])
                    + (other.group7()[1] * self.group3()[3])
                    - (other.group7()[2] * self.group2()[0])
                    + (other.group8()[1] * self.group2()[3])
                    - (self.group1()[0] * other.group6()[2])
                    + (self.group1()[2] * other.group6()[0])
                    - (self.group1()[3] * other.group1()[1])
                    + (self.group2()[1] * other.group1()[3])
                    + (self.group3()[0] * other.group1()[2])
                    - (self.group3()[1] * other.group6()[3])
                    - (self.group3()[2] * other.group1()[0])),
                ((other.group0()[1] * self.group1()[2]) + (self.group0()[0] * other.group8()[1]) - (self.group0()[1] * other.group8()[0]) + (self.group0()[2] * other[e1])
                    - (other.group7()[0] * self.group2()[1])
                    + (other.group7()[1] * self.group2()[0])
                    + (other.group7()[2] * self.group3()[3])
                    + (other.group8()[2] * self.group2()[3])
                    + (self.group1()[0] * other.group6()[1])
                    - (self.group1()[1] * other.group6()[0])
                    - (self.group1()[3] * other.group1()[2])
                    + (self.group2()[2] * other.group1()[3])
                    - (self.group3()[0] * other.group1()[1])
                    + (self.group3()[1] * other.group1()[0])
                    - (self.group3()[2] * other.group6()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[0]) - (self.group0()[0] * other.group9()[3]) - (self.group0()[1] * other.group3()[2])
                    + (self.group0()[2] * other.group3()[1])
                    - (other.group4()[0] * self.group3()[3])
                    + (other.group4()[1] * self.group2()[2])
                    - (other.group4()[2] * self.group2()[1])
                    + (other.group5()[1] * self.group1()[2])
                    - (other.group5()[2] * self.group1()[1])
                    - (self.group1()[3] * other.group9()[0])
                    - (self.group2()[0] * other[e45])
                    - (self.group2()[3] * other.group3()[0])
                    - (self.group3()[0] * other.group3()[3])
                    - (self.group3()[1] * other.group9()[2])
                    + (self.group3()[2] * other.group9()[1])),
                (-(other.group0()[0] * self.group1()[1]) + (self.group0()[0] * other.group3()[2])
                    - (self.group0()[1] * other.group9()[3])
                    - (self.group0()[2] * other.group3()[0])
                    - (other.group4()[0] * self.group2()[2])
                    - (other.group4()[1] * self.group3()[3])
                    + (other.group4()[2] * self.group2()[0])
                    - (other.group5()[0] * self.group1()[2])
                    + (other.group5()[2] * self.group1()[0])
                    - (self.group1()[3] * other.group9()[1])
                    - (self.group2()[1] * other[e45])
                    - (self.group2()[3] * other.group3()[1])
                    + (self.group3()[0] * other.group9()[2])
                    - (self.group3()[1] * other.group3()[3])
                    - (self.group3()[2] * other.group9()[0])),
                (-(other.group0()[0] * self.group1()[2]) - (self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group3()[0])
                    - (self.group0()[2] * other.group9()[3])
                    + (other.group4()[0] * self.group2()[1])
                    - (other.group4()[1] * self.group2()[0])
                    - (other.group4()[2] * self.group3()[3])
                    + (other.group5()[0] * self.group1()[1])
                    - (other.group5()[1] * self.group1()[0])
                    - (self.group1()[3] * other.group9()[2])
                    - (self.group2()[2] * other[e45])
                    - (self.group2()[3] * other.group3()[2])
                    - (self.group3()[0] * other.group9()[1])
                    + (self.group3()[1] * other.group9()[0])
                    - (self.group3()[2] * other.group3()[3])),
                ((other.group0()[0] * self.group1()[3]) - (self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group3()[1]) - (self.group0()[2] * other.group3()[2])
                    + (other.group4()[0] * self.group2()[0])
                    + (other.group4()[1] * self.group2()[1])
                    + (other.group4()[2] * self.group2()[2])
                    - (other.group5()[0] * self.group3()[0])
                    - (other.group5()[1] * self.group3()[1])
                    - (other.group5()[2] * self.group3()[2])
                    - (self.group1()[0] * other.group9()[0])
                    - (self.group1()[1] * other.group9()[1])
                    - (self.group1()[2] * other.group9()[2])
                    + (self.group2()[3] * other.group9()[3])
                    - (self.group3()[3] * other[e45])),
            ]),
            // e423, e431, e412
            Simd32x3::from([
                (-(other.group0()[0] * self.group0()[0]) + (self.group0()[0] * other.group3()[3]) - (self.group0()[1] * other.group5()[2])
                    + (self.group0()[1] * other.group9()[2])
                    + (self.group0()[2] * other.group5()[1])
                    - (self.group0()[2] * other.group9()[1])
                    - (other.group4()[0] * self.group1()[3])
                    + (other.group4()[1] * self.group1()[2])
                    + (other.group4()[1] * self.group3()[2])
                    - (other.group4()[2] * self.group1()[1])
                    - (other.group4()[2] * self.group3()[1])
                    - (other.group5()[0] * self.group2()[3])
                    - (self.group1()[0] * other[e45])
                    + (self.group2()[3] * other.group9()[0])
                    - (self.group3()[0] * other[e45])),
                (-(other.group0()[0] * self.group0()[1]) + (self.group0()[0] * other.group5()[2]) - (self.group0()[0] * other.group9()[2])
                    + (self.group0()[1] * other.group3()[3])
                    - (self.group0()[2] * other.group5()[0])
                    + (self.group0()[2] * other.group9()[0])
                    - (other.group4()[0] * self.group1()[2])
                    - (other.group4()[0] * self.group3()[2])
                    - (other.group4()[1] * self.group1()[3])
                    + (other.group4()[2] * self.group1()[0])
                    + (other.group4()[2] * self.group3()[0])
                    - (other.group5()[1] * self.group2()[3])
                    - (self.group1()[1] * other[e45])
                    + (self.group2()[3] * other.group9()[1])
                    - (self.group3()[1] * other[e45])),
                (-(other.group0()[0] * self.group0()[2]) - (self.group0()[0] * other.group5()[1])
                    + (self.group0()[0] * other.group9()[1])
                    + (self.group0()[1] * other.group5()[0])
                    - (self.group0()[1] * other.group9()[0])
                    + (self.group0()[2] * other.group3()[3])
                    + (other.group4()[0] * self.group1()[1])
                    + (other.group4()[0] * self.group3()[1])
                    - (other.group4()[1] * self.group1()[0])
                    - (other.group4()[1] * self.group3()[0])
                    - (other.group4()[2] * self.group1()[3])
                    - (other.group5()[2] * self.group2()[3])
                    - (self.group1()[2] * other[e45])
                    + (self.group2()[3] * other.group9()[2])
                    - (self.group3()[2] * other[e45])),
            ]),
            // e235, e315, e125
            Simd32x3::from([
                (-(other.group0()[0] * self.group2()[0]) - (other.group5()[0] * self.group3()[3]) + (other.group5()[1] * self.group2()[2])
                    - (other.group5()[2] * self.group2()[1])
                    - (self.group1()[0] * other.group9()[3])
                    - (self.group1()[1] * other.group3()[2])
                    + (self.group1()[2] * other.group3()[1])
                    + (self.group1()[3] * other.group3()[0])
                    - (self.group2()[0] * other.group3()[3])
                    - (self.group2()[1] * other.group9()[2])
                    + (self.group2()[2] * other.group9()[1])
                    + (self.group3()[0] * other.group9()[3])
                    + (self.group3()[1] * other.group3()[2])
                    - (self.group3()[2] * other.group3()[1])
                    - (self.group3()[3] * other.group9()[0])),
                (-(other.group0()[0] * self.group2()[1]) - (other.group5()[0] * self.group2()[2]) - (other.group5()[1] * self.group3()[3])
                    + (other.group5()[2] * self.group2()[0])
                    + (self.group1()[0] * other.group3()[2])
                    - (self.group1()[1] * other.group9()[3])
                    - (self.group1()[2] * other.group3()[0])
                    + (self.group1()[3] * other.group3()[1])
                    + (self.group2()[0] * other.group9()[2])
                    - (self.group2()[1] * other.group3()[3])
                    - (self.group2()[2] * other.group9()[0])
                    - (self.group3()[0] * other.group3()[2])
                    + (self.group3()[1] * other.group9()[3])
                    + (self.group3()[2] * other.group3()[0])
                    - (self.group3()[3] * other.group9()[1])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group5()[0] * self.group2()[1])
                    - (other.group5()[1] * self.group2()[0])
                    - (other.group5()[2] * self.group3()[3])
                    - (self.group1()[0] * other.group3()[1])
                    + (self.group1()[1] * other.group3()[0])
                    - (self.group1()[2] * other.group9()[3])
                    + (self.group1()[3] * other.group3()[2])
                    - (self.group2()[0] * other.group9()[1])
                    + (self.group2()[1] * other.group9()[0])
                    - (self.group2()[2] * other.group3()[3])
                    + (self.group3()[0] * other.group3()[1])
                    - (self.group3()[1] * other.group3()[0])
                    + (self.group3()[2] * other.group9()[3])
                    - (self.group3()[3] * other.group9()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((other.group0()[1] * self.group3()[0]) + (self.group0()[0] * other[e1]) + (self.group0()[1] * other.group8()[2])
                    - (self.group0()[2] * other.group8()[1])
                    - (other.group7()[0] * self.group3()[3])
                    + (other.group7()[1] * self.group2()[2])
                    - (other.group7()[2] * self.group2()[1])
                    + (other.group8()[0] * self.group2()[3])
                    - (self.group1()[0] * other.group6()[3])
                    - (self.group1()[1] * other.group1()[2])
                    + (self.group1()[2] * other.group1()[1])
                    + (self.group1()[3] * other.group6()[0])
                    - (self.group2()[0] * other.group1()[3])
                    + (self.group3()[1] * other.group6()[2])
                    - (self.group3()[2] * other.group6()[1])),
                ((other.group0()[1] * self.group3()[1]) - (self.group0()[0] * other.group8()[2]) + (self.group0()[1] * other[e1]) + (self.group0()[2] * other.group8()[0])
                    - (other.group7()[0] * self.group2()[2])
                    - (other.group7()[1] * self.group3()[3])
                    + (other.group7()[2] * self.group2()[0])
                    + (other.group8()[1] * self.group2()[3])
                    + (self.group1()[0] * other.group1()[2])
                    - (self.group1()[1] * other.group6()[3])
                    - (self.group1()[2] * other.group1()[0])
                    + (self.group1()[3] * other.group6()[1])
                    - (self.group2()[1] * other.group1()[3])
                    - (self.group3()[0] * other.group6()[2])
                    + (self.group3()[2] * other.group6()[0])),
                ((other.group0()[1] * self.group3()[2]) + (self.group0()[0] * other.group8()[1]) - (self.group0()[1] * other.group8()[0])
                    + (self.group0()[2] * other[e1])
                    + (other.group7()[0] * self.group2()[1])
                    - (other.group7()[1] * self.group2()[0])
                    - (other.group7()[2] * self.group3()[3])
                    + (other.group8()[2] * self.group2()[3])
                    - (self.group1()[0] * other.group1()[1])
                    + (self.group1()[1] * other.group1()[0])
                    - (self.group1()[2] * other.group6()[3])
                    + (self.group1()[3] * other.group6()[2])
                    - (self.group2()[2] * other.group1()[3])
                    + (self.group3()[0] * other.group6()[1])
                    - (self.group3()[1] * other.group6()[0])),
                ((other.group0()[1] * self.group3()[3]) - (other.group8()[0] * self.group1()[0]) + (other.group8()[0] * self.group3()[0]) - (other.group8()[1] * self.group1()[1])
                    + (other.group8()[1] * self.group3()[1])
                    - (other.group8()[2] * self.group1()[2])
                    + (other.group8()[2] * self.group3()[2])
                    - (self.group1()[3] * other[e1])
                    + (self.group2()[0] * other.group1()[0])
                    - (self.group2()[0] * other.group6()[0])
                    + (self.group2()[1] * other.group1()[1])
                    - (self.group2()[1] * other.group6()[1])
                    + (self.group2()[2] * other.group1()[2])
                    - (self.group2()[2] * other.group6()[2])
                    - (self.group3()[3] * other.group6()[3])),
            ]),
            // e1234
            ((other.group0()[1] * self.group2()[3])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[0] * other.group6()[0])
                - (self.group0()[1] * other.group1()[1])
                - (self.group0()[1] * other.group6()[1])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[2] * other.group6()[2])
                - (other.group7()[0] * self.group1()[0])
                - (other.group7()[0] * self.group3()[0])
                - (other.group7()[1] * self.group1()[1])
                - (other.group7()[1] * self.group3()[1])
                - (other.group7()[2] * self.group1()[2])
                - (other.group7()[2] * self.group3()[2])
                + (self.group1()[3] * other.group1()[3])
                + (self.group2()[3] * other.group6()[3])),
        );
    }
}
impl GeometricAntiProduct<Plane> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       44       60        0
    fn geometric_anti_product(self, other: Plane) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (self.group2()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0]) + (self.group2()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group2()[3] * other.group0()[2])),
                (-(self.group2()[3] * other.group0()[3])
                    + (self.group3()[0] * other.group0()[0])
                    + (self.group3()[1] * other.group0()[1])
                    + (self.group3()[2] * other.group0()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group1()[3] * other.group0()[0]) - (self.group3()[1] * other.group0()[2])
                    + (self.group3()[2] * other.group0()[1])),
                (-(self.group0()[1] * other.group0()[3]) - (self.group1()[3] * other.group0()[1]) + (self.group3()[0] * other.group0()[2])
                    - (self.group3()[2] * other.group0()[0])),
                (-(self.group0()[2] * other.group0()[3]) - (self.group1()[3] * other.group0()[2]) - (self.group3()[0] * other.group0()[1])
                    + (self.group3()[1] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])
                    + (self.group2()[3] * other.group0()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group1()[0] * other.group0()[3]) - (self.group2()[1] * other.group0()[2])
                    + (self.group2()[2] * other.group0()[1])
                    + (self.group3()[0] * other.group0()[3])
                    - (self.group3()[3] * other.group0()[0])),
                (-(self.group1()[1] * other.group0()[3]) + (self.group2()[0] * other.group0()[2]) - (self.group2()[2] * other.group0()[0])
                    + (self.group3()[1] * other.group0()[3])
                    - (self.group3()[3] * other.group0()[1])),
                (-(self.group1()[2] * other.group0()[3]) - (self.group2()[0] * other.group0()[1])
                    + (self.group2()[1] * other.group0()[0])
                    + (self.group3()[2] * other.group0()[3])
                    - (self.group3()[3] * other.group0()[2])),
                ((self.group1()[3] * other.group0()[3]) + (self.group2()[0] * other.group0()[0]) + (self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])),
                ((self.group0()[1] * other.group0()[3]) - (self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<RoundPoint> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       59       75        0
    fn geometric_anti_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])
                    + (self.group1()[0] * other.group0()[3])
                    + (self.group2()[3] * other.group0()[0])
                    + (self.group3()[0] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[2])
                    + (self.group0()[2] * other.group0()[0])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group2()[3] * other.group0()[1])
                    + (self.group3()[1] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])
                    + (self.group1()[2] * other.group0()[3])
                    + (self.group2()[3] * other.group0()[2])
                    + (self.group3()[2] * other.group0()[3])),
                ((self.group2()[3] * other[e2])
                    + (self.group3()[0] * other.group0()[0])
                    + (self.group3()[1] * other.group0()[1])
                    + (self.group3()[2] * other.group0()[2])
                    + (self.group3()[3] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other[e2]) - (self.group1()[3] * other.group0()[0]) + (self.group2()[0] * other.group0()[3]) - (self.group3()[1] * other.group0()[2])
                    + (self.group3()[2] * other.group0()[1])),
                ((self.group0()[1] * other[e2]) - (self.group1()[3] * other.group0()[1]) + (self.group2()[1] * other.group0()[3]) + (self.group3()[0] * other.group0()[2])
                    - (self.group3()[2] * other.group0()[0])),
                ((self.group0()[2] * other[e2]) - (self.group1()[3] * other.group0()[2]) + (self.group2()[2] * other.group0()[3]) - (self.group3()[0] * other.group0()[1])
                    + (self.group3()[1] * other.group0()[0])),
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2]) + (self.group2()[3] * other[e2])
                    - (self.group3()[3] * other.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group1()[0] * other[e2]) - (self.group2()[1] * other.group0()[2]) + (self.group2()[2] * other.group0()[1])
                    - (self.group3()[0] * other[e2])
                    - (self.group3()[3] * other.group0()[0])),
                ((self.group1()[1] * other[e2]) + (self.group2()[0] * other.group0()[2])
                    - (self.group2()[2] * other.group0()[0])
                    - (self.group3()[1] * other[e2])
                    - (self.group3()[3] * other.group0()[1])),
                ((self.group1()[2] * other[e2]) - (self.group2()[0] * other.group0()[1]) + (self.group2()[1] * other.group0()[0])
                    - (self.group3()[2] * other[e2])
                    - (self.group3()[3] * other.group0()[2])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group1()[3] * other.group0()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other[e2]) - (self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1]) - (self.group2()[0] * other.group0()[3])),
                ((self.group0()[1] * other[e2]) + (self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0]) - (self.group2()[1] * other.group0()[3])),
                ((self.group0()[2] * other[e2]) - (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0]) - (self.group2()[2] * other.group0()[3])),
                (-(self.group1()[3] * other[e2]) + (self.group2()[0] * other.group0()[0]) + (self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Scalar> for DipoleInversion {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0       26        0
    fn geometric_anti_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                (self.group0()[0] * other[scalar] * -1.0),
                (self.group0()[1] * other[scalar] * -1.0),
                (self.group0()[2] * other[scalar] * -1.0),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group1()[0] * other[scalar] * -1.0),
                (self.group1()[1] * other[scalar] * -1.0),
                (self.group1()[2] * other[scalar] * -1.0),
                (self.group1()[3] * other[scalar]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (self.group2()[0] * other[scalar] * -1.0),
                (self.group2()[1] * other[scalar] * -1.0),
                (self.group2()[2] * other[scalar] * -1.0),
                (self.group2()[3] * other[scalar] * -1.0),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group3()[0] * other[scalar]),
                (self.group3()[1] * other[scalar]),
                (self.group3()[2] * other[scalar]),
                (self.group3()[3] * other[scalar] * -1.0),
            ]),
        );
    }
}
impl GeometricAntiProduct<Sphere> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       59       75        0
    fn geometric_anti_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) - (self.group1()[0] * other[e4315]) + (self.group2()[3] * other.group0()[0])
                    - (self.group3()[0] * other[e4315])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0]) - (self.group1()[1] * other[e4315]) + (self.group2()[3] * other.group0()[1])
                    - (self.group3()[1] * other[e4315])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) - (self.group1()[2] * other[e4315]) + (self.group2()[3] * other.group0()[2])
                    - (self.group3()[2] * other[e4315])),
                (-(self.group2()[3] * other.group0()[3])
                    + (self.group3()[0] * other.group0()[0])
                    + (self.group3()[1] * other.group0()[1])
                    + (self.group3()[2] * other.group0()[2])
                    - (self.group3()[3] * other[e4315])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group1()[3] * other.group0()[0]) - (self.group2()[0] * other[e4315]) - (self.group3()[1] * other.group0()[2])
                    + (self.group3()[2] * other.group0()[1])),
                (-(self.group0()[1] * other.group0()[3]) - (self.group1()[3] * other.group0()[1]) - (self.group2()[1] * other[e4315]) + (self.group3()[0] * other.group0()[2])
                    - (self.group3()[2] * other.group0()[0])),
                (-(self.group0()[2] * other.group0()[3]) - (self.group1()[3] * other.group0()[2]) - (self.group2()[2] * other[e4315]) - (self.group3()[0] * other.group0()[1])
                    + (self.group3()[1] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])
                    + (self.group2()[3] * other.group0()[3])
                    - (self.group3()[3] * other[e4315])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group1()[0] * other.group0()[3]) - (self.group2()[1] * other.group0()[2])
                    + (self.group2()[2] * other.group0()[1])
                    + (self.group3()[0] * other.group0()[3])
                    - (self.group3()[3] * other.group0()[0])),
                (-(self.group1()[1] * other.group0()[3]) + (self.group2()[0] * other.group0()[2]) - (self.group2()[2] * other.group0()[0])
                    + (self.group3()[1] * other.group0()[3])
                    - (self.group3()[3] * other.group0()[1])),
                (-(self.group1()[2] * other.group0()[3]) - (self.group2()[0] * other.group0()[1])
                    + (self.group2()[1] * other.group0()[0])
                    + (self.group3()[2] * other.group0()[3])
                    - (self.group3()[3] * other.group0()[2])),
                ((self.group1()[3] * other.group0()[3]) + (self.group2()[0] * other.group0()[0]) + (self.group2()[1] * other.group0()[1]) + (self.group2()[2] * other.group0()[2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1]) - (self.group2()[0] * other[e4315])),
                ((self.group0()[1] * other.group0()[3]) - (self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0]) - (self.group2()[1] * other[e4315])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0]) - (self.group2()[2] * other[e4315])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other[e4315])),
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorEven> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      224      240        0
    fn geometric_anti_product(self, other: VersorEven) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) + (self.group0()[1] * other.group3()[2])
                    - (self.group0()[2] * other.group1()[1])
                    - (self.group0()[2] * other.group3()[1])
                    + (self.group1()[0] * other.group3()[3])
                    + (self.group1()[1] * other.group0()[2])
                    - (self.group1()[2] * other.group0()[1])
                    + (self.group1()[3] * other.group0()[0])
                    + (self.group2()[3] * other.group1()[0])
                    + (self.group2()[3] * other.group3()[0])
                    + (self.group3()[0] * other.group3()[3])
                    + (self.group3()[1] * other.group0()[2])
                    - (self.group3()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[2]) - (self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group0()[3])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group0()[2] * other.group3()[0])
                    - (self.group1()[0] * other.group0()[2])
                    + (self.group1()[1] * other.group3()[3])
                    + (self.group1()[2] * other.group0()[0])
                    + (self.group1()[3] * other.group0()[1])
                    + (self.group2()[3] * other.group1()[1])
                    + (self.group2()[3] * other.group3()[1])
                    - (self.group3()[0] * other.group0()[2])
                    + (self.group3()[1] * other.group3()[3])
                    + (self.group3()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group1()[0]) - (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group0()[3])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group1()[0] * other.group0()[1])
                    - (self.group1()[1] * other.group0()[0])
                    + (self.group1()[2] * other.group3()[3])
                    + (self.group1()[3] * other.group0()[2])
                    + (self.group2()[3] * other.group1()[2])
                    + (self.group2()[3] * other.group3()[2])
                    + (self.group3()[0] * other.group0()[1])
                    - (self.group3()[1] * other.group0()[0])
                    + (self.group3()[2] * other.group3()[3])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])
                    + (self.group2()[3] * other.group2()[3])
                    + (self.group3()[0] * other.group3()[0])
                    + (self.group3()[1] * other.group3()[1])
                    + (self.group3()[2] * other.group3()[2])
                    + (self.group3()[3] * other.group3()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])
                    + (self.group1()[0] * other.group0()[3])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])
                    - (self.group1()[3] * other.group3()[0])
                    + (self.group2()[0] * other.group3()[3])
                    + (self.group2()[1] * other.group0()[2])
                    - (self.group2()[2] * other.group0()[1])
                    + (self.group2()[3] * other.group2()[0])
                    - (self.group3()[0] * other.group1()[3])
                    - (self.group3()[1] * other.group3()[2])
                    + (self.group3()[2] * other.group3()[1])
                    + (self.group3()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group2()[3]) + (self.group0()[2] * other.group2()[0])
                    - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group1()[2] * other.group1()[0])
                    - (self.group1()[3] * other.group3()[1])
                    - (self.group2()[0] * other.group0()[2])
                    + (self.group2()[1] * other.group3()[3])
                    + (self.group2()[2] * other.group0()[0])
                    + (self.group2()[3] * other.group2()[1])
                    + (self.group3()[0] * other.group3()[2])
                    - (self.group3()[1] * other.group1()[3])
                    - (self.group3()[2] * other.group3()[0])
                    + (self.group3()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) + (self.group0()[2] * other.group2()[3]) + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[0])
                    + (self.group1()[2] * other.group0()[3])
                    - (self.group1()[3] * other.group3()[2])
                    + (self.group2()[0] * other.group0()[1])
                    - (self.group2()[1] * other.group0()[0])
                    + (self.group2()[2] * other.group3()[3])
                    + (self.group2()[3] * other.group2()[2])
                    - (self.group3()[0] * other.group3()[1])
                    + (self.group3()[1] * other.group3()[0])
                    - (self.group3()[2] * other.group1()[3])
                    + (self.group3()[3] * other.group0()[2])),
                (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])
                    + (self.group1()[0] * other.group3()[0])
                    + (self.group1()[1] * other.group3()[1])
                    + (self.group1()[2] * other.group3()[2])
                    + (self.group1()[3] * other.group0()[3])
                    + (self.group2()[0] * other.group0()[0])
                    + (self.group2()[1] * other.group0()[1])
                    + (self.group2()[2] * other.group0()[2])
                    + (self.group2()[3] * other.group2()[3])
                    - (self.group3()[0] * other.group1()[0])
                    - (self.group3()[1] * other.group1()[1])
                    - (self.group3()[2] * other.group1()[2])
                    - (self.group3()[3] * other.group3()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group1()[0] * other.group2()[3]) + (self.group1()[1] * other.group2()[2]) - (self.group1()[2] * other.group2()[1]) - (self.group1()[3] * other.group2()[0])
                    + (self.group2()[0] * other.group0()[3])
                    - (self.group2()[0] * other.group1()[3])
                    + (self.group2()[1] * other.group1()[2])
                    - (self.group2()[1] * other.group3()[2])
                    - (self.group2()[2] * other.group1()[1])
                    + (self.group2()[2] * other.group3()[1])
                    - (self.group3()[0] * other.group2()[3])
                    - (self.group3()[1] * other.group2()[2])
                    + (self.group3()[2] * other.group2()[1])
                    + (self.group3()[3] * other.group1()[0])
                    - (self.group3()[3] * other.group3()[0])),
                (-(self.group1()[0] * other.group2()[2]) + (self.group1()[1] * other.group2()[3]) + (self.group1()[2] * other.group2()[0])
                    - (self.group1()[3] * other.group2()[1])
                    - (self.group2()[0] * other.group1()[2])
                    + (self.group2()[0] * other.group3()[2])
                    + (self.group2()[1] * other.group0()[3])
                    - (self.group2()[1] * other.group1()[3])
                    + (self.group2()[2] * other.group1()[0])
                    - (self.group2()[2] * other.group3()[0])
                    + (self.group3()[0] * other.group2()[2])
                    - (self.group3()[1] * other.group2()[3])
                    - (self.group3()[2] * other.group2()[0])
                    + (self.group3()[3] * other.group1()[1])
                    - (self.group3()[3] * other.group3()[1])),
                ((self.group1()[0] * other.group2()[1]) - (self.group1()[1] * other.group2()[0]) + (self.group1()[2] * other.group2()[3]) - (self.group1()[3] * other.group2()[2])
                    + (self.group2()[0] * other.group1()[1])
                    - (self.group2()[0] * other.group3()[1])
                    - (self.group2()[1] * other.group1()[0])
                    + (self.group2()[1] * other.group3()[0])
                    + (self.group2()[2] * other.group0()[3])
                    - (self.group2()[2] * other.group1()[3])
                    - (self.group3()[0] * other.group2()[1])
                    + (self.group3()[1] * other.group2()[0])
                    - (self.group3()[2] * other.group2()[3])
                    + (self.group3()[3] * other.group1()[2])
                    - (self.group3()[3] * other.group3()[2])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[0] * other.group3()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])
                    + (self.group1()[3] * other.group3()[3])
                    + (self.group2()[3] * other.group0()[3])
                    + (self.group2()[3] * other.group1()[3])
                    - (self.group3()[0] * other.group0()[0])
                    - (self.group3()[1] * other.group0()[1])
                    - (self.group3()[2] * other.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group2()[2])
                    - (self.group0()[2] * other.group2()[1])
                    - (self.group1()[0] * other.group1()[3])
                    - (self.group1()[1] * other.group3()[2])
                    + (self.group1()[2] * other.group3()[1])
                    + (self.group1()[3] * other.group1()[0])
                    - (self.group2()[0] * other.group3()[3])
                    - (self.group2()[1] * other.group0()[2])
                    + (self.group2()[2] * other.group0()[1])
                    + (self.group2()[3] * other.group2()[0])
                    + (self.group3()[0] * other.group0()[3])
                    + (self.group3()[1] * other.group1()[2])
                    - (self.group3()[2] * other.group1()[1])
                    - (self.group3()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group2()[2])
                    + (self.group0()[1] * other.group2()[3])
                    + (self.group0()[2] * other.group2()[0])
                    + (self.group1()[0] * other.group3()[2])
                    - (self.group1()[1] * other.group1()[3])
                    - (self.group1()[2] * other.group3()[0])
                    + (self.group1()[3] * other.group1()[1])
                    + (self.group2()[0] * other.group0()[2])
                    - (self.group2()[1] * other.group3()[3])
                    - (self.group2()[2] * other.group0()[0])
                    + (self.group2()[3] * other.group2()[1])
                    - (self.group3()[0] * other.group1()[2])
                    + (self.group3()[1] * other.group0()[3])
                    + (self.group3()[2] * other.group1()[0])
                    - (self.group3()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) + (self.group0()[2] * other.group2()[3]) - (self.group1()[0] * other.group3()[1])
                    + (self.group1()[1] * other.group3()[0])
                    - (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])
                    - (self.group2()[0] * other.group0()[1])
                    + (self.group2()[1] * other.group0()[0])
                    - (self.group2()[2] * other.group3()[3])
                    + (self.group2()[3] * other.group2()[2])
                    + (self.group3()[0] * other.group1()[1])
                    - (self.group3()[1] * other.group1()[0])
                    + (self.group3()[2] * other.group0()[3])
                    - (self.group3()[3] * other.group0()[2])),
                (-(self.group1()[0] * other.group2()[0])
                    - (self.group1()[1] * other.group2()[1])
                    - (self.group1()[2] * other.group2()[2])
                    - (self.group1()[3] * other.group2()[3])
                    - (self.group2()[0] * other.group1()[0])
                    + (self.group2()[0] * other.group3()[0])
                    - (self.group2()[1] * other.group1()[1])
                    + (self.group2()[1] * other.group3()[1])
                    - (self.group2()[2] * other.group1()[2])
                    + (self.group2()[2] * other.group3()[2])
                    + (self.group3()[0] * other.group2()[0])
                    + (self.group3()[1] * other.group2()[1])
                    + (self.group3()[2] * other.group2()[2])
                    + (self.group3()[3] * other.group0()[3])
                    - (self.group3()[3] * other.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorOdd> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      224      240        0
    fn geometric_anti_product(self, other: VersorOdd) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) + (self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group1()[2])
                    + (self.group0()[1] * other.group3()[2])
                    + (self.group0()[2] * other.group1()[1])
                    - (self.group0()[2] * other.group3()[1])
                    - (self.group1()[0] * other.group2()[3])
                    - (self.group1()[1] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[1])
                    - (self.group1()[3] * other.group0()[0])
                    - (self.group2()[3] * other.group1()[0])
                    + (self.group2()[3] * other.group3()[0])
                    - (self.group3()[0] * other.group2()[3])
                    - (self.group3()[1] * other.group0()[2])
                    + (self.group3()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[0] * other.group3()[2]) - (self.group0()[1] * other.group0()[3]) + (self.group0()[1] * other.group1()[3])
                    - (self.group0()[2] * other.group1()[0])
                    + (self.group0()[2] * other.group3()[0])
                    + (self.group1()[0] * other.group0()[2])
                    - (self.group1()[1] * other.group2()[3])
                    - (self.group1()[2] * other.group0()[0])
                    - (self.group1()[3] * other.group0()[1])
                    - (self.group2()[3] * other.group1()[1])
                    + (self.group2()[3] * other.group3()[1])
                    + (self.group3()[0] * other.group0()[2])
                    - (self.group3()[1] * other.group2()[3])
                    - (self.group3()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group1()[0])
                    - (self.group0()[1] * other.group3()[0])
                    - (self.group0()[2] * other.group0()[3])
                    + (self.group0()[2] * other.group1()[3])
                    - (self.group1()[0] * other.group0()[1])
                    + (self.group1()[1] * other.group0()[0])
                    - (self.group1()[2] * other.group2()[3])
                    - (self.group1()[3] * other.group0()[2])
                    - (self.group2()[3] * other.group1()[2])
                    + (self.group2()[3] * other.group3()[2])
                    - (self.group3()[0] * other.group0()[1])
                    + (self.group3()[1] * other.group0()[0])
                    - (self.group3()[2] * other.group2()[3])),
                ((self.group0()[0] * other.group2()[0])
                    + (self.group0()[1] * other.group2()[1])
                    + (self.group0()[2] * other.group2()[2])
                    + (self.group1()[0] * other.group1()[0])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])
                    + (self.group2()[0] * other.group0()[0])
                    + (self.group2()[1] * other.group0()[1])
                    + (self.group2()[2] * other.group0()[2])
                    - (self.group2()[3] * other.group3()[3])
                    + (self.group3()[0] * other.group3()[0])
                    + (self.group3()[1] * other.group3()[1])
                    + (self.group3()[2] * other.group3()[2])
                    - (self.group3()[3] * other.group2()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group3()[3]) - (self.group0()[1] * other.group2()[2]) + (self.group0()[2] * other.group2()[1])
                    - (self.group1()[0] * other.group0()[3])
                    - (self.group1()[1] * other.group1()[2])
                    + (self.group1()[2] * other.group1()[1])
                    - (self.group1()[3] * other.group3()[0])
                    - (self.group2()[0] * other.group2()[3])
                    - (self.group2()[1] * other.group0()[2])
                    + (self.group2()[2] * other.group0()[1])
                    - (self.group2()[3] * other.group2()[0])
                    - (self.group3()[0] * other.group1()[3])
                    - (self.group3()[1] * other.group3()[2])
                    + (self.group3()[2] * other.group3()[1])
                    - (self.group3()[3] * other.group0()[0])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[1] * other.group3()[3]) - (self.group0()[2] * other.group2()[0]) + (self.group1()[0] * other.group1()[2])
                    - (self.group1()[1] * other.group0()[3])
                    - (self.group1()[2] * other.group1()[0])
                    - (self.group1()[3] * other.group3()[1])
                    + (self.group2()[0] * other.group0()[2])
                    - (self.group2()[1] * other.group2()[3])
                    - (self.group2()[2] * other.group0()[0])
                    - (self.group2()[3] * other.group2()[1])
                    + (self.group3()[0] * other.group3()[2])
                    - (self.group3()[1] * other.group1()[3])
                    - (self.group3()[2] * other.group3()[0])
                    - (self.group3()[3] * other.group0()[1])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[0])
                    - (self.group0()[2] * other.group3()[3])
                    - (self.group1()[0] * other.group1()[1])
                    + (self.group1()[1] * other.group1()[0])
                    - (self.group1()[2] * other.group0()[3])
                    - (self.group1()[3] * other.group3()[2])
                    - (self.group2()[0] * other.group0()[1])
                    + (self.group2()[1] * other.group0()[0])
                    - (self.group2()[2] * other.group2()[3])
                    - (self.group2()[3] * other.group2()[2])
                    - (self.group3()[0] * other.group3()[1])
                    + (self.group3()[1] * other.group3()[0])
                    - (self.group3()[2] * other.group1()[3])
                    - (self.group3()[3] * other.group0()[2])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group1()[0] * other.group3()[0])
                    - (self.group1()[1] * other.group3()[1])
                    - (self.group1()[2] * other.group3()[2])
                    + (self.group1()[3] * other.group0()[3])
                    + (self.group2()[0] * other.group0()[0])
                    + (self.group2()[1] * other.group0()[1])
                    + (self.group2()[2] * other.group0()[2])
                    + (self.group2()[3] * other.group3()[3])
                    - (self.group3()[0] * other.group1()[0])
                    - (self.group3()[1] * other.group1()[1])
                    - (self.group3()[2] * other.group1()[2])
                    - (self.group3()[3] * other.group2()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group1()[0] * other.group3()[3]) - (self.group1()[1] * other.group2()[2])
                    + (self.group1()[2] * other.group2()[1])
                    + (self.group1()[3] * other.group2()[0])
                    - (self.group2()[0] * other.group0()[3])
                    - (self.group2()[0] * other.group1()[3])
                    - (self.group2()[1] * other.group1()[2])
                    - (self.group2()[1] * other.group3()[2])
                    + (self.group2()[2] * other.group1()[1])
                    + (self.group2()[2] * other.group3()[1])
                    + (self.group3()[0] * other.group3()[3])
                    + (self.group3()[1] * other.group2()[2])
                    - (self.group3()[2] * other.group2()[1])
                    - (self.group3()[3] * other.group1()[0])
                    - (self.group3()[3] * other.group3()[0])),
                ((self.group1()[0] * other.group2()[2]) - (self.group1()[1] * other.group3()[3]) - (self.group1()[2] * other.group2()[0])
                    + (self.group1()[3] * other.group2()[1])
                    + (self.group2()[0] * other.group1()[2])
                    + (self.group2()[0] * other.group3()[2])
                    - (self.group2()[1] * other.group0()[3])
                    - (self.group2()[1] * other.group1()[3])
                    - (self.group2()[2] * other.group1()[0])
                    - (self.group2()[2] * other.group3()[0])
                    - (self.group3()[0] * other.group2()[2])
                    + (self.group3()[1] * other.group3()[3])
                    + (self.group3()[2] * other.group2()[0])
                    - (self.group3()[3] * other.group1()[1])
                    - (self.group3()[3] * other.group3()[1])),
                (-(self.group1()[0] * other.group2()[1]) + (self.group1()[1] * other.group2()[0]) - (self.group1()[2] * other.group3()[3])
                    + (self.group1()[3] * other.group2()[2])
                    - (self.group2()[0] * other.group1()[1])
                    - (self.group2()[0] * other.group3()[1])
                    + (self.group2()[1] * other.group1()[0])
                    + (self.group2()[1] * other.group3()[0])
                    - (self.group2()[2] * other.group0()[3])
                    - (self.group2()[2] * other.group1()[3])
                    + (self.group3()[0] * other.group2()[1])
                    - (self.group3()[1] * other.group2()[0])
                    + (self.group3()[2] * other.group3()[3])
                    - (self.group3()[3] * other.group1()[2])
                    - (self.group3()[3] * other.group3()[2])),
                ((self.group1()[0] * other.group2()[0])
                    + (self.group1()[1] * other.group2()[1])
                    + (self.group1()[2] * other.group2()[2])
                    + (self.group1()[3] * other.group3()[3])
                    + (self.group2()[0] * other.group1()[0])
                    + (self.group2()[0] * other.group3()[0])
                    + (self.group2()[1] * other.group1()[1])
                    + (self.group2()[1] * other.group3()[1])
                    + (self.group2()[2] * other.group1()[2])
                    + (self.group2()[2] * other.group3()[2])
                    - (self.group3()[0] * other.group2()[0])
                    - (self.group3()[1] * other.group2()[1])
                    - (self.group3()[2] * other.group2()[2])
                    - (self.group3()[3] * other.group0()[3])
                    - (self.group3()[3] * other.group1()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group3()[2])
                    - (self.group1()[2] * other.group3()[1])
                    + (self.group1()[3] * other.group1()[0])
                    - (self.group2()[0] * other.group2()[3])
                    - (self.group2()[1] * other.group0()[2])
                    + (self.group2()[2] * other.group0()[1])
                    + (self.group2()[3] * other.group2()[0])
                    + (self.group3()[0] * other.group0()[3])
                    + (self.group3()[1] * other.group1()[2])
                    - (self.group3()[2] * other.group1()[1])
                    - (self.group3()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group3()[3]) + (self.group0()[2] * other.group2()[0])
                    - (self.group1()[0] * other.group3()[2])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group3()[0])
                    + (self.group1()[3] * other.group1()[1])
                    + (self.group2()[0] * other.group0()[2])
                    - (self.group2()[1] * other.group2()[3])
                    - (self.group2()[2] * other.group0()[0])
                    + (self.group2()[3] * other.group2()[1])
                    - (self.group3()[0] * other.group1()[2])
                    + (self.group3()[1] * other.group0()[3])
                    + (self.group3()[2] * other.group1()[0])
                    - (self.group3()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) + (self.group0()[2] * other.group3()[3]) + (self.group1()[0] * other.group3()[1])
                    - (self.group1()[1] * other.group3()[0])
                    + (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])
                    - (self.group2()[0] * other.group0()[1])
                    + (self.group2()[1] * other.group0()[0])
                    - (self.group2()[2] * other.group2()[3])
                    + (self.group2()[3] * other.group2()[2])
                    + (self.group3()[0] * other.group1()[1])
                    - (self.group3()[1] * other.group1()[0])
                    + (self.group3()[2] * other.group0()[3])
                    - (self.group3()[3] * other.group0()[2])),
                ((self.group0()[0] * other.group1()[0]) - (self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group1()[1]) - (self.group0()[1] * other.group3()[1])
                    + (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group3()[2])
                    + (self.group1()[0] * other.group0()[0])
                    + (self.group1()[1] * other.group0()[1])
                    + (self.group1()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group2()[3])
                    - (self.group2()[3] * other.group0()[3])
                    + (self.group2()[3] * other.group1()[3])
                    + (self.group3()[0] * other.group0()[0])
                    + (self.group3()[1] * other.group0()[1])
                    + (self.group3()[2] * other.group0()[2])),
            ]),
        );
    }
}
impl InfixGeometricAntiProduct for DualNum {}
impl GeometricAntiProduct<AntiCircleRotor> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        7       22        0
    fn geometric_anti_product(self, other: AntiCircleRotor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[2])),
                (self.group0()[1] * other.group2()[3]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group2()[0]),
                (self.group0()[1] * other.group2()[1]),
                (self.group0()[1] * other.group2()[2]),
                (-(self.group0()[0] * other.group1()[3]) + (self.group0()[0] * other.group2()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group2()[0]),
                (self.group0()[0] * other.group2()[1]),
                (self.group0()[0] * other.group2()[2]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDipoleInversion> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       14       30        0
    fn geometric_anti_product(self, other: AntiDipoleInversion) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group0()[2])),
                (self.group0()[0] * other.group3()[3]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group1()[2])),
                (-(self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group1()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[1] * other.group2()[0]),
                (self.group0()[1] * other.group2()[1]),
                (self.group0()[1] * other.group2()[2]),
                (self.group0()[1] * other.group3()[3]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group3()[0])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group3()[1])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group3()[2])),
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group2()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum> for DualNum {
    type Output = AntiDualNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        1        3        0
    fn geometric_anti_product(self, other: AntiDualNum) -> Self::Output {
        return AntiDualNum::from_groups(/* e1234, scalar */ Simd32x2::from([
            ((other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
            (other.group0()[1] * self.group0()[1]),
        ]));
    }
}
impl GeometricAntiProduct<AntiFlatPoint> for DualNum {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0       14        0
    fn geometric_anti_product(self, other: AntiFlatPoint) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (self.group0()[1] * other.group0()[3]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[0] * other.group0()[3]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0] * -1.0),
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[0] * other.group0()[2] * -1.0),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiFlector> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4       20        0
    fn geometric_anti_product(self, other: AntiFlector) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                (self.group0()[0] * other.group1()[3]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (-(self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[1] * other.group1()[3]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group1()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[0] * other.group0()[3]),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiLine> for DualNum {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3       15        0
    fn geometric_anti_product(self, other: AntiLine) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from([(self.group0()[0] * other.group0()[0]), (self.group0()[0] * other.group0()[1]), (self.group0()[0] * other.group0()[2])]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[2])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group1()[0]),
                (self.group0()[1] * other.group1()[1]),
                (self.group0()[1] * other.group1()[2]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiMotor> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4       20        0
    fn geometric_anti_product(self, other: AntiMotor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[2])),
                (self.group0()[0] * other.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group1()[0]),
                (self.group0()[1] * other.group1()[1]),
                (self.group0()[1] * other.group1()[2]),
                (self.group0()[0] * other.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                (self.group0()[1] * other.group1()[3]),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiPlane> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0       10        0
    fn geometric_anti_product(self, other: AntiPlane) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (self.group0()[0] * other.group0()[3]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3] * -1.0)]),
            // e235, e315, e125, e5
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other.group0()[3])]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiScalar> for DualNum {
    type Output = DualNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn geometric_anti_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return DualNum::from_groups(/* e4, e12345 */ Simd32x2::from([(self.group0()[0] * other[e12345]), (self.group0()[1] * other[e12345])]));
    }
}
impl GeometricAntiProduct<Circle> for DualNum {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       23        0
    fn geometric_anti_product(self, other: Circle) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (self.group0()[1] * other.group2()[0]),
                (self.group0()[1] * other.group2()[1]),
                (self.group0()[1] * other.group2()[2]),
                (self.group0()[0] * other.group1()[3]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[0] * other.group2()[0] * -1.0),
                (self.group0()[0] * other.group2()[1] * -1.0),
                (self.group0()[0] * other.group2()[2] * -1.0),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<CircleRotor> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        7       25        0
    fn geometric_anti_product(self, other: CircleRotor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[2])),
                (self.group0()[1] * other.group2()[3]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[1] * other.group2()[0]),
                (self.group0()[1] * other.group2()[1]),
                (self.group0()[1] * other.group2()[2]),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other.group2()[0] * -1.0),
                (self.group0()[0] * other.group2()[1] * -1.0),
                (self.group0()[0] * other.group2()[2] * -1.0),
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[0] * other.group2()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Dipole> for DualNum {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       21        0
    fn geometric_anti_product(self, other: Dipole) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group2()[0]),
                (self.group0()[1] * other.group2()[1]),
                (self.group0()[1] * other.group2()[2]),
                (self.group0()[0] * other.group1()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group2()[0]),
                (self.group0()[0] * other.group2()[1]),
                (self.group0()[0] * other.group2()[2]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<DipoleInversion> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       14       30        0
    fn geometric_anti_product(self, other: DipoleInversion) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) - (self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group0()[2])),
                (self.group0()[0] * other.group3()[3]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group1()[2])),
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group1()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group2()[0]),
                (self.group0()[1] * other.group2()[1]),
                (self.group0()[1] * other.group2()[2]),
                (-(self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group2()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group3()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group3()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group3()[2])),
                (self.group0()[1] * other.group3()[3]),
            ]),
        );
    }
}
impl GeometricAntiProduct<DualNum> for DualNum {
    type Output = DualNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        1        3        0
    fn geometric_anti_product(self, other: DualNum) -> Self::Output {
        return DualNum::from_groups(/* e4, e12345 */ Simd32x2::from([
            ((other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
            (other.group0()[1] * self.group0()[1]),
        ]));
    }
}
impl GeometricAntiProduct<FlatPoint> for DualNum {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0       12        0
    fn geometric_anti_product(self, other: FlatPoint) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (self.group0()[1] * other.group0()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[0] * other.group0()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<Flector> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4       24        0
    fn geometric_anti_product(self, other: Flector) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0] * -1.0),
                (self.group0()[0] * other.group1()[1] * -1.0),
                (self.group0()[0] * other.group1()[2] * -1.0),
                (self.group0()[0] * other.group1()[3]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[0] * other.group0()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3]),
            ]),
        );
    }
}
impl GeometricAntiProduct<Line> for DualNum {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3       18        0
    fn geometric_anti_product(self, other: Line) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from([(self.group0()[0] * other.group0()[0]), (self.group0()[0] * other.group0()[1]), (self.group0()[0] * other.group0()[2])]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[2])),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (self.group0()[1] * other.group1()[0]),
                (self.group0()[1] * other.group1()[1]),
                (self.group0()[1] * other.group1()[2]),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0] * -1.0),
                (self.group0()[0] * other.group1()[1] * -1.0),
                (self.group0()[0] * other.group1()[2] * -1.0),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<Motor> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4       24        0
    fn geometric_anti_product(self, other: Motor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[2])),
                (self.group0()[0] * other.group1()[3] * -1.0),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[1] * other.group1()[0]),
                (self.group0()[1] * other.group1()[1]),
                (self.group0()[1] * other.group1()[2]),
                (self.group0()[1] * other.group1()[3]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0] * -1.0),
                (self.group0()[0] * other.group1()[1] * -1.0),
                (self.group0()[0] * other.group1()[2] * -1.0),
                (self.group0()[0] * other.group0()[3]),
            ]),
        );
    }
}
impl GeometricAntiProduct<MultiVector> for DualNum {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       32       64        0
    fn geometric_anti_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((self.group0()[0] * other.group9()[3]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other[e1]) + (self.group0()[1] * other.group0()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[0] * other.group8()[0]) + (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[0] * other.group8()[1]) + (self.group0()[1] * other.group1()[1])),
                (-(self.group0()[0] * other.group8()[2]) + (self.group0()[1] * other.group1()[2])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[0] * other.group6()[3]) + (self.group0()[1] * other.group1()[3])),
            ]),
            // e5
            (self.group0()[1] * other[e1]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group0()[1] * other.group3()[0]),
                (self.group0()[1] * other.group3()[1]),
                (self.group0()[1] * other.group3()[2]),
                ((self.group0()[0] * other.group9()[3]) + (self.group0()[1] * other.group3()[3])),
            ]),
            // e41, e42, e43
            Simd32x3::from([
                ((self.group0()[0] * other.group5()[0]) - (self.group0()[0] * other.group9()[0]) + (self.group0()[1] * other.group4()[0])),
                ((self.group0()[0] * other.group5()[1]) - (self.group0()[0] * other.group9()[1]) + (self.group0()[1] * other.group4()[1])),
                ((self.group0()[0] * other.group5()[2]) - (self.group0()[0] * other.group9()[2]) + (self.group0()[1] * other.group4()[2])),
            ]),
            // e23, e31, e12
            Simd32x3::from([
                ((self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group5()[0])),
                ((self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group5()[1])),
                ((self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group5()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group8()[0]) + (self.group0()[1] * other.group6()[0])),
                ((self.group0()[0] * other.group8()[1]) + (self.group0()[1] * other.group6()[1])),
                ((self.group0()[0] * other.group8()[2]) + (self.group0()[1] * other.group6()[2])),
                (-(self.group0()[0] * other[e1]) + (self.group0()[1] * other.group6()[3])),
            ]),
            // e423, e431, e412
            Simd32x3::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[0] * other.group6()[0]) + (self.group0()[1] * other.group7()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[0] * other.group6()[1]) + (self.group0()[1] * other.group7()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[0] * other.group6()[2]) + (self.group0()[1] * other.group7()[2])),
            ]),
            // e235, e315, e125
            Simd32x3::from([(self.group0()[1] * other.group8()[0]), (self.group0()[1] * other.group8()[1]), (self.group0()[1] * other.group8()[2])]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group9()[0])),
                ((self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group9()[1])),
                ((self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group9()[2])),
                (self.group0()[1] * other.group9()[3]),
            ]),
            // e1234
            ((self.group0()[0] * other.group0()[0]) - (self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other[e45])),
        );
    }
}
impl GeometricAntiProduct<Plane> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0       12        0
    fn geometric_anti_product(self, other: Plane) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0] * -1.0),
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[0] * other.group0()[2] * -1.0),
                (self.group0()[0] * other.group0()[3]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3])]),
            // e15, e25, e35, e1234
            Simd32x4::from(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[1] * other.group0()[3]),
            ]),
        );
    }
}
impl GeometricAntiProduct<RoundPoint> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0       11        0
    fn geometric_anti_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (self.group0()[0] * other[e2]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other[e2] * -1.0)]),
            // e235, e315, e125, e5
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other[e2])]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[1] * other.group0()[3]),
            ]),
        );
    }
}
impl GeometricAntiProduct<Scalar> for DualNum {
    type Output = AntiDualNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn geometric_anti_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiDualNum::from_groups(/* e1234, scalar */ Simd32x2::from([(self.group0()[0] * other[scalar]), (self.group0()[1] * other[scalar])]));
    }
}
impl GeometricAntiProduct<Sphere> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0       13        0
    fn geometric_anti_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0] * -1.0),
                (self.group0()[0] * other.group0()[1] * -1.0),
                (self.group0()[0] * other.group0()[2] * -1.0),
                (self.group0()[0] * other.group0()[3]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3])]),
            // e15, e25, e35, e1234
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other[e4315])]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[1] * other.group0()[3]),
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorEven> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       16       32        0
    fn geometric_anti_product(self, other: VersorEven) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group0()[2])),
                ((self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group1()[2])),
                (-(self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group1()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[1] * other.group2()[0]),
                (self.group0()[1] * other.group2()[1]),
                (self.group0()[1] * other.group2()[2]),
                (self.group0()[1] * other.group2()[3]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group3()[0])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group3()[1])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group3()[2])),
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group3()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorOdd> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       16       32        0
    fn geometric_anti_product(self, other: VersorOdd) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) - (self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group0()[2])),
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group1()[2])),
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group1()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group2()[0]),
                (self.group0()[1] * other.group2()[1]),
                (self.group0()[1] * other.group2()[2]),
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group2()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group3()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group3()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group3()[2])),
                (self.group0()[1] * other.group3()[3]),
            ]),
        );
    }
}
impl InfixGeometricAntiProduct for FlatPoint {}
impl GeometricAntiProduct<AntiCircleRotor> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       29       47        0
    fn geometric_anti_product(self, other: AntiCircleRotor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3] * -1.0),
                (other.group0()[1] * self.group0()[3] * -1.0),
                (other.group0()[2] * self.group0()[3] * -1.0),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) - (other.group1()[3] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) + (other.group2()[3] * self.group0()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1]) - (other.group1()[3] * self.group0()[0]) + (other.group2()[0] * self.group0()[3])
                    - (other.group2()[3] * self.group0()[0])),
                (-(other.group1()[0] * self.group0()[2]) + (other.group1()[2] * self.group0()[0]) - (other.group1()[3] * self.group0()[1])
                    + (other.group2()[1] * self.group0()[3])
                    - (other.group2()[3] * self.group0()[1])),
                ((other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0]) - (other.group1()[3] * self.group0()[2]) + (other.group2()[2] * self.group0()[3])
                    - (other.group2()[3] * self.group0()[2])),
                ((other.group1()[0] * self.group0()[0]) + (other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) + (other.group1()[0] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) + (other.group1()[2] * self.group0()[3])),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDipoleInversion> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       44       60        0
    fn geometric_anti_product(self, other: AntiDipoleInversion) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3]),
                (other.group0()[1] * self.group0()[3]),
                (other.group0()[2] * self.group0()[3]),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group1()[3] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (other.group2()[3] * self.group0()[0])
                    - (other.group3()[0] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) + (other.group2()[3] * self.group0()[1]) - (other.group3()[1] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (other.group2()[3] * self.group0()[2])
                    - (other.group3()[2] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1])
                    - (other.group1()[3] * self.group0()[0])
                    - (other.group2()[0] * self.group0()[3])
                    + (other.group3()[1] * self.group0()[2])
                    - (other.group3()[2] * self.group0()[1])),
                ((other.group1()[0] * self.group0()[2])
                    - (other.group1()[2] * self.group0()[0])
                    - (other.group1()[3] * self.group0()[1])
                    - (other.group2()[1] * self.group0()[3])
                    - (other.group3()[0] * self.group0()[2])
                    + (other.group3()[2] * self.group0()[0])),
                (-(other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0])
                    - (other.group1()[3] * self.group0()[2])
                    - (other.group2()[2] * self.group0()[3])
                    + (other.group3()[0] * self.group0()[1])
                    - (other.group3()[1] * self.group0()[0])),
                (other.group2()[3] * self.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) + (other.group1()[0] * self.group0()[3]) - (other.group2()[3] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3])
                    - (other.group2()[3] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) + (other.group1()[2] * self.group0()[3]) - (other.group2()[3] * self.group0()[2])),
                (-(other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])
                    + (other.group3()[0] * self.group0()[0])
                    + (other.group3()[1] * self.group0()[1])
                    + (other.group3()[2] * self.group0()[2])
                    - (other.group3()[3] * self.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum> for FlatPoint {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0       21        0
    fn geometric_anti_product(self, other: AntiDualNum) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                (other.group0()[1] * self.group0()[3]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0] * -1.0),
                (other.group0()[1] * self.group0()[1] * -1.0),
                (other.group0()[1] * self.group0()[2] * -1.0),
                (other.group0()[0] * self.group0()[3] * -1.0),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiFlatPoint> for FlatPoint {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        8        0
    fn geometric_anti_product(self, other: AntiFlatPoint) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[3] * self.group0()[3] * -1.0)]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group0()[3] * self.group0()[0])),
                (-(other.group0()[1] * self.group0()[3]) - (other.group0()[3] * self.group0()[1])),
                (-(other.group0()[2] * self.group0()[3]) - (other.group0()[3] * self.group0()[2])),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiFlector> for FlatPoint {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       12       24        0
    fn geometric_anti_product(self, other: AntiFlector) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (other.group1()[0] * self.group0()[3] * -1.0),
                (other.group1()[1] * self.group0()[3] * -1.0),
                (other.group1()[2] * self.group0()[3] * -1.0),
                (other.group0()[3] * self.group0()[3] * -1.0),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group0()[3] * self.group0()[0]) + (other.group1()[1] * self.group0()[2])
                    - (other.group1()[2] * self.group0()[1])),
                (-(other.group0()[1] * self.group0()[3]) - (other.group0()[3] * self.group0()[1]) - (other.group1()[0] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[2] * self.group0()[3]) - (other.group0()[3] * self.group0()[2]) + (other.group1()[0] * self.group0()[1])
                    - (other.group1()[1] * self.group0()[0])),
                ((other.group1()[0] * self.group0()[0]) + (other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2]) - (other.group1()[3] * self.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiLine> for FlatPoint {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       15        0
    fn geometric_anti_product(self, other: AntiLine) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) + (other.group1()[0] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) + (other.group1()[2] * self.group0()[3])),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3]),
                (other.group0()[1] * self.group0()[3]),
                (other.group0()[2] * self.group0()[3]),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiMotor> for FlatPoint {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       12       20        0
    fn geometric_anti_product(self, other: AntiMotor) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) - (other.group0()[3] * self.group0()[0]) + (other.group1()[0] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0]) - (other.group0()[3] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) - (other.group0()[3] * self.group0()[2]) + (other.group1()[2] * self.group0()[3])),
                (other.group0()[3] * self.group0()[3]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3]),
                (other.group0()[1] * self.group0()[3]),
                (other.group0()[2] * self.group0()[3]),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) + (other.group1()[3] * self.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiPlane> for FlatPoint {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       16        0
    fn geometric_anti_product(self, other: AntiPlane) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3] * -1.0),
                (other.group0()[1] * self.group0()[3] * -1.0),
                (other.group0()[2] * self.group0()[3] * -1.0),
                0.0,
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiScalar> for FlatPoint {
    type Output = FlatPoint;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        4        0
    fn geometric_anti_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return FlatPoint::from_groups(/* e15, e25, e35, e45 */ Simd32x4::from([
            (self.group0()[0] * other[e12345]),
            (self.group0()[1] * other[e12345]),
            (self.group0()[2] * other[e12345]),
            (self.group0()[3] * other[e12345]),
        ]));
    }
}
impl GeometricAntiProduct<Circle> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       25       40        0
    fn geometric_anti_product(self, other: Circle) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3]),
                (other.group0()[1] * self.group0()[3]),
                (other.group0()[2] * self.group0()[3]),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group1()[3] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group2()[0] * self.group0()[3]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1])
                    - (other.group1()[3] * self.group0()[0])),
                (-(other.group2()[1] * self.group0()[3]) + (other.group1()[0] * self.group0()[2])
                    - (other.group1()[2] * self.group0()[0])
                    - (other.group1()[3] * self.group0()[1])),
                (-(other.group2()[2] * self.group0()[3]) - (other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0])
                    - (other.group1()[3] * self.group0()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) + (other.group1()[0] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) + (other.group1()[2] * self.group0()[3])),
                (-(other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<CircleRotor> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       29       44        0
    fn geometric_anti_product(self, other: CircleRotor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3]),
                (other.group0()[1] * self.group0()[3]),
                (other.group0()[2] * self.group0()[3]),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group1()[3] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) + (other.group2()[3] * self.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1])
                    - (other.group1()[3] * self.group0()[0])
                    - (other.group2()[0] * self.group0()[3])
                    + (other.group2()[3] * self.group0()[0])),
                ((other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0]) - (other.group1()[3] * self.group0()[1]) - (other.group2()[1] * self.group0()[3])
                    + (other.group2()[3] * self.group0()[1])),
                (-(other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0])
                    - (other.group1()[3] * self.group0()[2])
                    - (other.group2()[2] * self.group0()[3])
                    + (other.group2()[3] * self.group0()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) + (other.group1()[0] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) + (other.group1()[2] * self.group0()[3])),
                (-(other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Dipole> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       25       43        0
    fn geometric_anti_product(self, other: Dipole) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3] * -1.0),
                (other.group0()[1] * self.group0()[3] * -1.0),
                (other.group0()[2] * self.group0()[3] * -1.0),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) - (other.group1()[3] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((other.group2()[0] * self.group0()[3]) + (other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1]) - (other.group1()[3] * self.group0()[0])),
                ((other.group2()[1] * self.group0()[3]) - (other.group1()[0] * self.group0()[2]) + (other.group1()[2] * self.group0()[0]) - (other.group1()[3] * self.group0()[1])),
                ((other.group2()[2] * self.group0()[3]) + (other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0]) - (other.group1()[3] * self.group0()[2])),
                ((other.group1()[0] * self.group0()[0]) + (other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) + (other.group1()[0] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) + (other.group1()[2] * self.group0()[3])),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<DipoleInversion> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       44       64        0
    fn geometric_anti_product(self, other: DipoleInversion) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3] * -1.0),
                (other.group0()[1] * self.group0()[3] * -1.0),
                (other.group0()[2] * self.group0()[3] * -1.0),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) - (other.group1()[3] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) - (other.group2()[3] * self.group0()[0]) - (other.group3()[0] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])
                    - (other.group2()[3] * self.group0()[1])
                    - (other.group3()[1] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) - (other.group2()[3] * self.group0()[2]) - (other.group3()[2] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1]) - (other.group1()[3] * self.group0()[0])
                    + (other.group2()[0] * self.group0()[3])
                    + (other.group3()[1] * self.group0()[2])
                    - (other.group3()[2] * self.group0()[1])),
                (-(other.group1()[0] * self.group0()[2]) + (other.group1()[2] * self.group0()[0]) - (other.group1()[3] * self.group0()[1])
                    + (other.group2()[1] * self.group0()[3])
                    - (other.group3()[0] * self.group0()[2])
                    + (other.group3()[2] * self.group0()[0])),
                ((other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0]) - (other.group1()[3] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[3])
                    + (other.group3()[0] * self.group0()[1])
                    - (other.group3()[1] * self.group0()[0])),
                ((other.group1()[0] * self.group0()[0])
                    + (other.group1()[1] * self.group0()[1])
                    + (other.group1()[2] * self.group0()[2])
                    + (other.group3()[0] * self.group0()[0])
                    + (other.group3()[1] * self.group0()[1])
                    + (other.group3()[2] * self.group0()[2])
                    + (other.group3()[3] * self.group0()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) + (other.group1()[0] * self.group0()[3]) - (other.group2()[3] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3])
                    - (other.group2()[3] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) + (other.group1()[2] * self.group0()[3]) - (other.group2()[3] * self.group0()[2])),
                (other.group2()[3] * self.group0()[3] * -1.0),
            ]),
        );
    }
}
impl GeometricAntiProduct<DualNum> for FlatPoint {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0       14        0
    fn geometric_anti_product(self, other: DualNum) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                (other.group0()[1] * self.group0()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                (other.group0()[0] * self.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<FlatPoint> for FlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3        8        0
    fn geometric_anti_product(self, other: FlatPoint) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[3] * self.group0()[3] * -1.0)]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[3]) - (other.group0()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group0()[3]) - (other.group0()[3] * self.group0()[2])),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<Flector> for FlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       12       24        0
    fn geometric_anti_product(self, other: Flector) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0] * -1.0),
                (self.group0()[3] * other.group1()[1] * -1.0),
                (self.group0()[3] * other.group1()[2] * -1.0),
                (self.group0()[3] * other.group0()[3] * -1.0),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[1])
                    + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group0()[3]) - (self.group0()[2] * other.group1()[0]) + (self.group0()[3] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group0()[3])
                    + (self.group0()[3] * other.group0()[2])),
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1]) + (self.group0()[2] * other.group1()[2]) + (self.group0()[3] * other.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Line> for FlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       15        0
    fn geometric_anti_product(self, other: Line) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) - (other.group1()[0] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) - (other.group1()[1] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) - (other.group1()[2] * self.group0()[3])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3]),
                (other.group0()[1] * self.group0()[3]),
                (other.group0()[2] * self.group0()[3]),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Motor> for FlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       12       20        0
    fn geometric_anti_product(self, other: Motor) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) - (self.group0()[3] * other.group1()[0])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[3]) + (self.group0()[2] * other.group0()[0])
                    - (self.group0()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[3]) - (self.group0()[3] * other.group1()[2])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[3] * other.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<MultiVector> for FlatPoint {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       96      132        0
    fn geometric_anti_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(other.group7()[0] * self.group0()[0])
                    - (other.group7()[1] * self.group0()[1])
                    - (other.group7()[2] * self.group0()[2])
                    - (self.group0()[3] * other.group6()[3])),
                ((other.group4()[0] * self.group0()[0]) + (other.group4()[1] * self.group0()[1]) + (other.group4()[2] * self.group0()[2]) - (self.group0()[3] * other.group3()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group4()[1] * self.group0()[2]) - (other.group4()[2] * self.group0()[1]) + (other.group5()[0] * self.group0()[3]) - (self.group0()[0] * other[e45])),
                (-(other.group4()[0] * self.group0()[2]) + (other.group4()[2] * self.group0()[0]) + (other.group5()[1] * self.group0()[3]) - (self.group0()[1] * other[e45])),
                ((other.group4()[0] * self.group0()[1]) - (other.group4()[1] * self.group0()[0]) + (other.group5()[2] * self.group0()[3]) - (self.group0()[2] * other[e45])),
                (self.group0()[3] * other[e45] * -1.0),
            ]),
            // e5
            ((other.group5()[0] * self.group0()[0])
                + (other.group5()[1] * self.group0()[1])
                + (other.group5()[2] * self.group0()[2])
                + (self.group0()[0] * other.group9()[0])
                + (self.group0()[1] * other.group9()[1])
                + (self.group0()[2] * other.group9()[2])
                + (self.group0()[3] * other.group9()[3])),
            // e15, e25, e35, e45
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[0]) - (other.group8()[0] * self.group0()[3]) - (self.group0()[0] * other.group6()[3]) - (self.group0()[1] * other.group1()[2])
                    + (self.group0()[1] * other.group6()[2])
                    + (self.group0()[2] * other.group1()[1])
                    - (self.group0()[2] * other.group6()[1])),
                ((other.group0()[1] * self.group0()[1]) - (other.group8()[1] * self.group0()[3]) + (self.group0()[0] * other.group1()[2])
                    - (self.group0()[0] * other.group6()[2])
                    - (self.group0()[1] * other.group6()[3])
                    - (self.group0()[2] * other.group1()[0])
                    + (self.group0()[2] * other.group6()[0])),
                ((other.group0()[1] * self.group0()[2]) - (other.group8()[2] * self.group0()[3]) - (self.group0()[0] * other.group1()[1])
                    + (self.group0()[0] * other.group6()[1])
                    + (self.group0()[1] * other.group1()[0])
                    - (self.group0()[1] * other.group6()[0])
                    - (self.group0()[2] * other.group6()[3])),
                ((other.group0()[1] * self.group0()[3]) + (other.group7()[0] * self.group0()[0]) + (other.group7()[1] * self.group0()[1]) + (other.group7()[2] * self.group0()[2])),
            ]),
            // e41, e42, e43
            Simd32x3::from([(other.group7()[0] * self.group0()[3]), (other.group7()[1] * self.group0()[3]), (other.group7()[2] * self.group0()[3])]),
            // e23, e31, e12
            Simd32x3::from([
                (-(other.group7()[1] * self.group0()[2]) + (other.group7()[2] * self.group0()[1]) + (self.group0()[0] * other.group1()[3])
                    - (self.group0()[3] * other.group1()[0])),
                ((other.group7()[0] * self.group0()[2]) - (other.group7()[2] * self.group0()[0]) + (self.group0()[1] * other.group1()[3]) - (self.group0()[3] * other.group1()[1])),
                (-(other.group7()[0] * self.group0()[1]) + (other.group7()[1] * self.group0()[0]) + (self.group0()[2] * other.group1()[3])
                    - (self.group0()[3] * other.group1()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group4()[1] * self.group0()[2]) - (other.group4()[2] * self.group0()[1]) - (self.group0()[0] * other[e45]) - (self.group0()[3] * other.group9()[0])),
                (-(other.group4()[0] * self.group0()[2]) + (other.group4()[2] * self.group0()[0]) - (self.group0()[1] * other[e45]) - (self.group0()[3] * other.group9()[1])),
                ((other.group4()[0] * self.group0()[1]) - (other.group4()[1] * self.group0()[0]) - (self.group0()[2] * other[e45]) - (self.group0()[3] * other.group9()[2])),
                ((other.group0()[0] * self.group0()[3]) + (other.group4()[0] * self.group0()[0]) + (other.group4()[1] * self.group0()[1]) + (other.group4()[2] * self.group0()[2])),
            ]),
            // e423, e431, e412
            Simd32x3::from([
                (other.group4()[0] * self.group0()[3] * -1.0),
                (other.group4()[1] * self.group0()[3] * -1.0),
                (other.group4()[2] * self.group0()[3] * -1.0),
            ]),
            // e235, e315, e125
            Simd32x3::from([
                (-(other.group0()[0] * self.group0()[0]) + (other.group5()[1] * self.group0()[2])
                    - (other.group5()[2] * self.group0()[1])
                    - (self.group0()[0] * other.group3()[3])
                    - (self.group0()[1] * other.group9()[2])
                    + (self.group0()[2] * other.group9()[1])
                    + (self.group0()[3] * other.group3()[0])),
                (-(other.group0()[0] * self.group0()[1]) - (other.group5()[0] * self.group0()[2])
                    + (other.group5()[2] * self.group0()[0])
                    + (self.group0()[0] * other.group9()[2])
                    - (self.group0()[1] * other.group3()[3])
                    - (self.group0()[2] * other.group9()[0])
                    + (self.group0()[3] * other.group3()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group5()[0] * self.group0()[1])
                    - (other.group5()[1] * self.group0()[0])
                    - (self.group0()[0] * other.group9()[1])
                    + (self.group0()[1] * other.group9()[0])
                    - (self.group0()[2] * other.group3()[3])
                    + (self.group0()[3] * other.group3()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((other.group7()[1] * self.group0()[2]) - (other.group7()[2] * self.group0()[1]) - (self.group0()[0] * other.group1()[3]) + (self.group0()[3] * other.group6()[0])),
                (-(other.group7()[0] * self.group0()[2]) + (other.group7()[2] * self.group0()[0]) - (self.group0()[1] * other.group1()[3])
                    + (self.group0()[3] * other.group6()[1])),
                ((other.group7()[0] * self.group0()[1]) - (other.group7()[1] * self.group0()[0]) - (self.group0()[2] * other.group1()[3]) + (self.group0()[3] * other.group6()[2])),
                ((self.group0()[0] * other.group1()[0]) - (self.group0()[0] * other.group6()[0]) + (self.group0()[1] * other.group1()[1]) - (self.group0()[1] * other.group6()[1])
                    + (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group6()[2])
                    - (self.group0()[3] * other[e1])),
            ]),
            // e1234
            (self.group0()[3] * other.group1()[3]),
        );
    }
}
impl GeometricAntiProduct<Plane> for FlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       16        0
    fn geometric_anti_product(self, other: Plane) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<RoundPoint> for FlatPoint {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        9       23        0
    fn geometric_anti_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) - (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) - (self.group0()[3] * other.group0()[2])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) - (self.group0()[3] * other[e2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Scalar> for FlatPoint {
    type Output = AntiFlatPoint;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        7        0
    fn geometric_anti_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiFlatPoint::from_groups(/* e235, e315, e125, e321 */ Simd32x4::from([
            (self.group0()[0] * other[scalar] * -1.0),
            (self.group0()[1] * other[scalar] * -1.0),
            (self.group0()[2] * other[scalar] * -1.0),
            (self.group0()[3] * other[scalar]),
        ]));
    }
}
impl GeometricAntiProduct<Sphere> for FlatPoint {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        9       24        0
    fn geometric_anti_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other[e4315]) - (self.group0()[3] * other.group0()[0])),
                (-(self.group0()[1] * other[e4315]) - (self.group0()[3] * other.group0()[1])),
                (-(self.group0()[2] * other[e4315]) - (self.group0()[3] * other.group0()[2])),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other[e4315] * -1.0),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[0] * other[e4315] * -1.0),
                (self.group0()[1] * other[e4315] * -1.0),
                (self.group0()[2] * other[e4315] * -1.0),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorEven> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       48       64        0
    fn geometric_anti_product(self, other: VersorEven) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[3] * other.group1()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) - (self.group0()[3] * other.group3()[0])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group3()[3]) + (self.group0()[2] * other.group0()[0])
                    - (self.group0()[3] * other.group3()[1])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group3()[3]) - (self.group0()[3] * other.group3()[2])),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[1] * other.group3()[2])
                    - (self.group0()[2] * other.group1()[1])
                    + (self.group0()[2] * other.group3()[1])
                    - (self.group0()[3] * other.group2()[0])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group0()[3])
                    - (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    - (self.group0()[2] * other.group3()[0])
                    - (self.group0()[3] * other.group2()[1])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group1()[0])
                    + (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group0()[3])
                    - (self.group0()[2] * other.group1()[3])
                    - (self.group0()[3] * other.group2()[2])),
                (self.group0()[3] * other.group3()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(self.group0()[0] * other.group3()[3]) - (self.group0()[1] * other.group0()[2])
                    + (self.group0()[2] * other.group0()[1])
                    + (self.group0()[3] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group3()[3]) - (self.group0()[2] * other.group0()[0]) + (self.group0()[3] * other.group1()[1])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group3()[3])
                    + (self.group0()[3] * other.group1()[2])),
                (-(self.group0()[0] * other.group1()[0]) + (self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group1()[1])
                    + (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group1()[2])
                    + (self.group0()[2] * other.group3()[2])
                    - (self.group0()[3] * other.group2()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorOdd> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       48       68        0
    fn geometric_anti_product(self, other: VersorOdd) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) - (self.group0()[3] * other.group1()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])
                    - (self.group0()[3] * other.group3()[0])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group2()[3]) - (self.group0()[2] * other.group0()[0]) - (self.group0()[3] * other.group3()[1])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])
                    - (self.group0()[2] * other.group2()[3])
                    - (self.group0()[3] * other.group3()[2])),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3])
                    - (self.group0()[0] * other.group1()[3])
                    - (self.group0()[1] * other.group1()[2])
                    - (self.group0()[1] * other.group3()[2])
                    + (self.group0()[2] * other.group1()[1])
                    + (self.group0()[2] * other.group3()[1])
                    + (self.group0()[3] * other.group2()[0])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[0] * other.group3()[2])
                    - (self.group0()[1] * other.group0()[3])
                    - (self.group0()[1] * other.group1()[3])
                    - (self.group0()[2] * other.group1()[0])
                    - (self.group0()[2] * other.group3()[0])
                    + (self.group0()[3] * other.group2()[1])),
                (-(self.group0()[0] * other.group1()[1]) - (self.group0()[0] * other.group3()[1])
                    + (self.group0()[1] * other.group1()[0])
                    + (self.group0()[1] * other.group3()[0])
                    - (self.group0()[2] * other.group0()[3])
                    - (self.group0()[2] * other.group1()[3])
                    + (self.group0()[3] * other.group2()[2])),
                ((self.group0()[0] * other.group1()[0])
                    + (self.group0()[0] * other.group3()[0])
                    + (self.group0()[1] * other.group1()[1])
                    + (self.group0()[1] * other.group3()[1])
                    + (self.group0()[2] * other.group1()[2])
                    + (self.group0()[2] * other.group3()[2])
                    + (self.group0()[3] * other.group3()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group0()[2])
                    + (self.group0()[2] * other.group0()[1])
                    + (self.group0()[3] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group2()[3]) - (self.group0()[2] * other.group0()[0]) + (self.group0()[3] * other.group1()[1])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group2()[3])
                    + (self.group0()[3] * other.group1()[2])),
                (self.group0()[3] * other.group2()[3] * -1.0),
            ]),
        );
    }
}
impl InfixGeometricAntiProduct for Flector {}
impl GeometricAntiProduct<AntiCircleRotor> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       72       88        0
    fn geometric_anti_product(self, other: AntiCircleRotor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group0()[3]) + (other.group0()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) - (other.group0()[2] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) - (other.group1()[3] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group0()[2])
                    - (other.group0()[2] * self.group0()[1])
                    - (other.group1()[3] * self.group1()[0])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group1()[3]) + (other.group0()[2] * self.group0()[0])
                    - (other.group1()[3] * self.group1()[1])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) - (other.group0()[2] * self.group1()[3]) - (other.group1()[3] * self.group1()[2])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    + (other.group2()[3] * self.group0()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(other.group1()[0] * self.group1()[3]) + (other.group1()[1] * self.group0()[2])
                    - (other.group1()[2] * self.group0()[1])
                    - (other.group1()[3] * self.group0()[0])
                    + (other.group2()[0] * self.group0()[3])
                    - (other.group2()[1] * self.group1()[2])
                    + (other.group2()[2] * self.group1()[1])
                    - (other.group2()[3] * self.group0()[0])),
                (-(other.group1()[0] * self.group0()[2]) - (other.group1()[1] * self.group1()[3]) + (other.group1()[2] * self.group0()[0])
                    - (other.group1()[3] * self.group0()[1])
                    + (other.group2()[0] * self.group1()[2])
                    + (other.group2()[1] * self.group0()[3])
                    - (other.group2()[2] * self.group1()[0])
                    - (other.group2()[3] * self.group0()[1])),
                ((other.group1()[0] * self.group0()[1])
                    - (other.group1()[1] * self.group0()[0])
                    - (other.group1()[2] * self.group1()[3])
                    - (other.group1()[3] * self.group0()[2])
                    - (other.group2()[0] * self.group1()[1])
                    + (other.group2()[1] * self.group1()[0])
                    + (other.group2()[2] * self.group0()[3])
                    - (other.group2()[3] * self.group0()[2])),
                ((other.group1()[0] * self.group0()[0]) + (other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])
                    - (other.group1()[3] * self.group1()[3])
                    - (other.group2()[0] * self.group1()[0])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group2()[3] * self.group1()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])
                    + (other.group1()[0] * self.group0()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group2()[3] * self.group1()[0])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group1()[3])
                    + (other.group0()[2] * self.group0()[0])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group0()[3])
                    - (other.group1()[2] * self.group1()[0])
                    + (other.group2()[3] * self.group1()[1])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) - (other.group0()[2] * self.group1()[3]) - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group0()[3])
                    + (other.group2()[3] * self.group1()[2])),
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDipoleInversion> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      104      120        0
    fn geometric_anti_product(self, other: AntiDipoleInversion) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) + (other.group2()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[3]) - (other.group0()[2] * self.group1()[0]) + (other.group2()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group1()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group0()[3])
                    + (other.group2()[3] * self.group1()[2])),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group1()[3] * self.group0()[3])
                    + (other.group2()[3] * self.group1()[3])
                    + (other.group3()[0] * self.group1()[0])
                    + (other.group3()[1] * self.group1()[1])
                    + (other.group3()[2] * self.group1()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) - (other.group1()[3] * self.group1()[0])
                    + (other.group2()[3] * self.group0()[0])
                    - (other.group3()[0] * self.group0()[3])
                    + (other.group3()[1] * self.group1()[2])
                    - (other.group3()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group0()[0]) - (other.group1()[3] * self.group1()[1])
                    + (other.group2()[3] * self.group0()[1])
                    - (other.group3()[0] * self.group1()[2])
                    - (other.group3()[1] * self.group0()[3])
                    + (other.group3()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group1()[3])
                    - (other.group1()[3] * self.group1()[2])
                    + (other.group2()[3] * self.group0()[2])
                    + (other.group3()[0] * self.group1()[1])
                    - (other.group3()[1] * self.group1()[0])
                    - (other.group3()[2] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group2()[3] * self.group1()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group1()[0] * self.group1()[3]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1])
                    - (other.group1()[3] * self.group0()[0])
                    - (other.group2()[0] * self.group0()[3])
                    + (other.group2()[1] * self.group1()[2])
                    - (other.group2()[2] * self.group1()[1])
                    - (other.group3()[0] * self.group1()[3])
                    + (other.group3()[1] * self.group0()[2])
                    - (other.group3()[2] * self.group0()[1])
                    - (other.group3()[3] * self.group1()[0])),
                ((other.group1()[0] * self.group0()[2]) + (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group0()[0])
                    - (other.group1()[3] * self.group0()[1])
                    - (other.group2()[0] * self.group1()[2])
                    - (other.group2()[1] * self.group0()[3])
                    + (other.group2()[2] * self.group1()[0])
                    - (other.group3()[0] * self.group0()[2])
                    - (other.group3()[1] * self.group1()[3])
                    + (other.group3()[2] * self.group0()[0])
                    - (other.group3()[3] * self.group1()[1])),
                (-(other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0]) + (other.group1()[2] * self.group1()[3])
                    - (other.group1()[3] * self.group0()[2])
                    + (other.group2()[0] * self.group1()[1])
                    - (other.group2()[1] * self.group1()[0])
                    - (other.group2()[2] * self.group0()[3])
                    + (other.group3()[0] * self.group0()[1])
                    - (other.group3()[1] * self.group0()[0])
                    - (other.group3()[2] * self.group1()[3])
                    - (other.group3()[3] * self.group1()[2])),
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])
                    + (other.group2()[3] * self.group0()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])
                    + (other.group1()[0] * self.group0()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])
                    - (other.group2()[3] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group1()[3])
                    + (other.group0()[2] * self.group0()[0])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group0()[3])
                    - (other.group1()[2] * self.group1()[0])
                    - (other.group2()[3] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) - (other.group0()[2] * self.group1()[3]) - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group0()[3])
                    - (other.group2()[3] * self.group0()[2])),
                (-(other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])
                    - (other.group1()[3] * self.group1()[3])
                    + (other.group2()[0] * self.group1()[0])
                    + (other.group2()[1] * self.group1()[1])
                    + (other.group2()[2] * self.group1()[2])
                    + (other.group3()[0] * self.group0()[0])
                    + (other.group3()[1] * self.group0()[1])
                    + (other.group3()[2] * self.group0()[2])
                    - (other.group3()[3] * self.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4       32        0
    fn geometric_anti_product(self, other: AntiDualNum) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group1()[0] * -1.0),
                (other.group0()[0] * self.group1()[1] * -1.0),
                (other.group0()[0] * self.group1()[2] * -1.0),
                (other.group0()[0] * self.group1()[3] * -1.0),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group0()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0] * -1.0),
                (other.group0()[1] * self.group0()[1] * -1.0),
                (other.group0()[1] * self.group0()[2] * -1.0),
                (other.group0()[1] * self.group1()[3] * -1.0),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group1()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group1()[2])),
                (other.group0()[0] * self.group0()[3] * -1.0),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiFlatPoint> for Flector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       12       24        0
    fn geometric_anti_product(self, other: AntiFlatPoint) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (other.group0()[3] * self.group1()[0] * -1.0),
                (other.group0()[3] * self.group1()[1] * -1.0),
                (other.group0()[3] * self.group1()[2] * -1.0),
                (other.group0()[3] * self.group0()[3] * -1.0),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group1()[2])
                    - (other.group0()[2] * self.group1()[1])
                    - (other.group0()[3] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group0()[3]) + (other.group0()[2] * self.group1()[0])
                    - (other.group0()[3] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) - (other.group0()[2] * self.group0()[3]) - (other.group0()[3] * self.group0()[2])),
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2]) - (other.group0()[3] * self.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiFlector> for Flector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       40       48        0
    fn geometric_anti_product(self, other: AntiFlector) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (-(other.group0()[3] * self.group1()[0]) - (other.group1()[0] * self.group0()[3]) + (other.group1()[1] * self.group1()[2])
                    - (other.group1()[2] * self.group1()[1])),
                (-(other.group0()[3] * self.group1()[1]) - (other.group1()[0] * self.group1()[2]) - (other.group1()[1] * self.group0()[3])
                    + (other.group1()[2] * self.group1()[0])),
                (-(other.group0()[3] * self.group1()[2]) + (other.group1()[0] * self.group1()[1])
                    - (other.group1()[1] * self.group1()[0])
                    - (other.group1()[2] * self.group0()[3])),
                (-(other.group0()[3] * self.group0()[3])
                    + (other.group1()[0] * self.group1()[0])
                    + (other.group1()[1] * self.group1()[1])
                    + (other.group1()[2] * self.group1()[2])),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group1()[2])
                    - (other.group0()[2] * self.group1()[1])
                    - (other.group0()[3] * self.group0()[0])
                    - (other.group1()[0] * self.group1()[3])
                    + (other.group1()[1] * self.group0()[2])
                    - (other.group1()[2] * self.group0()[1])
                    - (other.group1()[3] * self.group1()[0])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group0()[3]) + (other.group0()[2] * self.group1()[0])
                    - (other.group0()[3] * self.group0()[1])
                    - (other.group1()[0] * self.group0()[2])
                    - (other.group1()[1] * self.group1()[3])
                    + (other.group1()[2] * self.group0()[0])
                    - (other.group1()[3] * self.group1()[1])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) - (other.group0()[2] * self.group0()[3]) - (other.group0()[3] * self.group0()[2])
                    + (other.group1()[0] * self.group0()[1])
                    - (other.group1()[1] * self.group0()[0])
                    - (other.group1()[2] * self.group1()[3])
                    - (other.group1()[3] * self.group1()[2])),
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2]) - (other.group0()[3] * self.group1()[3])
                    + (other.group1()[0] * self.group0()[0])
                    + (other.group1()[1] * self.group0()[1])
                    + (other.group1()[2] * self.group0()[2])
                    - (other.group1()[3] * self.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiLine> for Flector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       28       36        0
    fn geometric_anti_product(self, other: AntiLine) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])
                    + (other.group1()[0] * self.group0()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group1()[3])
                    + (other.group0()[2] * self.group0()[0])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group0()[3])
                    - (other.group1()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) - (other.group0()[2] * self.group1()[3]) - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[3]) - (other.group0()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiMotor> for Flector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       40       48        0
    fn geometric_anti_product(self, other: AntiMotor) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group0()[2])
                    - (other.group0()[2] * self.group0()[1])
                    - (other.group0()[3] * self.group0()[0])
                    + (other.group1()[0] * self.group0()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group1()[3] * self.group1()[0])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group1()[3]) + (other.group0()[2] * self.group0()[0])
                    - (other.group0()[3] * self.group0()[1])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group0()[3])
                    - (other.group1()[2] * self.group1()[0])
                    + (other.group1()[3] * self.group1()[1])),
                ((other.group0()[0] * self.group0()[1])
                    - (other.group0()[1] * self.group0()[0])
                    - (other.group0()[2] * self.group1()[3])
                    - (other.group0()[3] * self.group0()[2])
                    - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group0()[3])
                    + (other.group1()[3] * self.group1()[2])),
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])
                    + (other.group0()[3] * self.group0()[3])),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) + (other.group0()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[3]) - (other.group0()[2] * self.group1()[0]) + (other.group0()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group1()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group0()[3])
                    + (other.group0()[3] * self.group1()[2])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])
                    - (other.group0()[3] * self.group1()[3])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    + (other.group1()[3] * self.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiPlane> for Flector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       20       28        0
    fn geometric_anti_product(self, other: AntiPlane) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group0()[3]) + (other.group0()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) - (other.group0()[2] * self.group0()[3])),
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2])),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group0()[2])
                    - (other.group0()[2] * self.group0()[1])
                    - (other.group0()[3] * self.group1()[0])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group1()[3]) + (other.group0()[2] * self.group0()[0])
                    - (other.group0()[3] * self.group1()[1])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) - (other.group0()[2] * self.group1()[3]) - (other.group0()[3] * self.group1()[2])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiScalar> for Flector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        8        0
    fn geometric_anti_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group0()[0] * other[e12345]),
                (self.group0()[1] * other[e12345]),
                (self.group0()[2] * other[e12345]),
                (self.group0()[3] * other[e12345]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group1()[0] * other[e12345]),
                (self.group1()[1] * other[e12345]),
                (self.group1()[2] * other[e12345]),
                (self.group1()[3] * other[e12345]),
            ]),
        );
    }
}
impl GeometricAntiProduct<Circle> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       64       80        0
    fn geometric_anti_product(self, other: Circle) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[3]) - (other.group0()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group1()[3] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) - (other.group1()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group0()[0]) - (other.group1()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group1()[3])
                    - (other.group1()[3] * self.group1()[2])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group2()[0] * self.group0()[3]) + (other.group2()[1] * self.group1()[2]) - (other.group2()[2] * self.group1()[1])
                    + (other.group1()[0] * self.group1()[3])
                    - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])
                    - (other.group1()[3] * self.group0()[0])),
                (-(other.group2()[0] * self.group1()[2]) - (other.group2()[1] * self.group0()[3])
                    + (other.group2()[2] * self.group1()[0])
                    + (other.group1()[0] * self.group0()[2])
                    + (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group0()[0])
                    - (other.group1()[3] * self.group0()[1])),
                ((other.group2()[0] * self.group1()[1]) - (other.group2()[1] * self.group1()[0]) - (other.group2()[2] * self.group0()[3]) - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group1()[3])
                    - (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])
                    + (other.group1()[0] * self.group0()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group1()[3])
                    + (other.group0()[2] * self.group0()[0])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group0()[3])
                    - (other.group1()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) - (other.group0()[2] * self.group1()[3]) - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group0()[3])),
                ((other.group2()[0] * self.group1()[0]) + (other.group2()[1] * self.group1()[1]) + (other.group2()[2] * self.group1()[2])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])
                    - (other.group1()[3] * self.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<CircleRotor> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       72       88        0
    fn geometric_anti_product(self, other: CircleRotor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[3]) - (other.group0()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group1()[3] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) - (other.group1()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group0()[0]) - (other.group1()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group1()[3])
                    - (other.group1()[3] * self.group1()[2])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    + (other.group2()[3] * self.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group1()[0] * self.group1()[3]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1])
                    - (other.group1()[3] * self.group0()[0])
                    - (other.group2()[0] * self.group0()[3])
                    + (other.group2()[1] * self.group1()[2])
                    - (other.group2()[2] * self.group1()[1])
                    + (other.group2()[3] * self.group0()[0])),
                ((other.group1()[0] * self.group0()[2]) + (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group0()[0])
                    - (other.group1()[3] * self.group0()[1])
                    - (other.group2()[0] * self.group1()[2])
                    - (other.group2()[1] * self.group0()[3])
                    + (other.group2()[2] * self.group1()[0])
                    + (other.group2()[3] * self.group0()[1])),
                (-(other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0]) + (other.group1()[2] * self.group1()[3])
                    - (other.group1()[3] * self.group0()[2])
                    + (other.group2()[0] * self.group1()[1])
                    - (other.group2()[1] * self.group1()[0])
                    - (other.group2()[2] * self.group0()[3])
                    + (other.group2()[3] * self.group0()[2])),
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])
                    + (other.group1()[0] * self.group0()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group2()[3] * self.group1()[0])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group1()[3])
                    + (other.group0()[2] * self.group0()[0])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group0()[3])
                    - (other.group1()[2] * self.group1()[0])
                    + (other.group2()[3] * self.group1()[1])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) - (other.group0()[2] * self.group1()[3]) - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group0()[3])
                    + (other.group2()[3] * self.group1()[2])),
                (-(other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])
                    - (other.group1()[3] * self.group1()[3])
                    + (other.group2()[0] * self.group1()[0])
                    + (other.group2()[1] * self.group1()[1])
                    + (other.group2()[2] * self.group1()[2])
                    + (other.group2()[3] * self.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Dipole> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       64       80        0
    fn geometric_anti_product(self, other: Dipole) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group0()[3]) + (other.group0()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) - (other.group0()[2] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) - (other.group1()[3] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group0()[2])
                    - (other.group0()[2] * self.group0()[1])
                    - (other.group1()[3] * self.group1()[0])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group1()[3]) + (other.group0()[2] * self.group0()[0])
                    - (other.group1()[3] * self.group1()[1])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) - (other.group0()[2] * self.group1()[3]) - (other.group1()[3] * self.group1()[2])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((other.group2()[0] * self.group0()[3]) - (other.group2()[1] * self.group1()[2]) + (other.group2()[2] * self.group1()[1]) - (other.group1()[0] * self.group1()[3])
                    + (other.group1()[1] * self.group0()[2])
                    - (other.group1()[2] * self.group0()[1])
                    - (other.group1()[3] * self.group0()[0])),
                ((other.group2()[0] * self.group1()[2]) + (other.group2()[1] * self.group0()[3])
                    - (other.group2()[2] * self.group1()[0])
                    - (other.group1()[0] * self.group0()[2])
                    - (other.group1()[1] * self.group1()[3])
                    + (other.group1()[2] * self.group0()[0])
                    - (other.group1()[3] * self.group0()[1])),
                (-(other.group2()[0] * self.group1()[1])
                    + (other.group2()[1] * self.group1()[0])
                    + (other.group2()[2] * self.group0()[3])
                    + (other.group1()[0] * self.group0()[1])
                    - (other.group1()[1] * self.group0()[0])
                    - (other.group1()[2] * self.group1()[3])
                    - (other.group1()[3] * self.group0()[2])),
                (-(other.group2()[0] * self.group1()[0]) - (other.group2()[1] * self.group1()[1]) - (other.group2()[2] * self.group1()[2])
                    + (other.group1()[0] * self.group0()[0])
                    + (other.group1()[1] * self.group0()[1])
                    + (other.group1()[2] * self.group0()[2])
                    - (other.group1()[3] * self.group1()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])
                    + (other.group1()[0] * self.group0()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group1()[3])
                    + (other.group0()[2] * self.group0()[0])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group0()[3])
                    - (other.group1()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) - (other.group0()[2] * self.group1()[3]) - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group0()[3])),
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<DipoleInversion> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      104      120        0
    fn geometric_anti_product(self, other: DipoleInversion) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group1()[2])
                    - (other.group0()[2] * self.group1()[1])
                    - (other.group2()[3] * self.group1()[0])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group0()[3]) + (other.group0()[2] * self.group1()[0])
                    - (other.group2()[3] * self.group1()[1])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) - (other.group0()[2] * self.group0()[3]) - (other.group2()[3] * self.group1()[2])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])
                    - (other.group1()[3] * self.group0()[3])
                    - (other.group2()[3] * self.group1()[3])
                    + (other.group3()[0] * self.group1()[0])
                    + (other.group3()[1] * self.group1()[1])
                    + (other.group3()[2] * self.group1()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group0()[2])
                    - (other.group0()[2] * self.group0()[1])
                    - (other.group1()[3] * self.group1()[0])
                    - (other.group2()[3] * self.group0()[0])
                    - (other.group3()[0] * self.group0()[3])
                    + (other.group3()[1] * self.group1()[2])
                    - (other.group3()[2] * self.group1()[1])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group1()[3]) + (other.group0()[2] * self.group0()[0])
                    - (other.group1()[3] * self.group1()[1])
                    - (other.group2()[3] * self.group0()[1])
                    - (other.group3()[0] * self.group1()[2])
                    - (other.group3()[1] * self.group0()[3])
                    + (other.group3()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group0()[1])
                    - (other.group0()[1] * self.group0()[0])
                    - (other.group0()[2] * self.group1()[3])
                    - (other.group1()[3] * self.group1()[2])
                    - (other.group2()[3] * self.group0()[2])
                    + (other.group3()[0] * self.group1()[1])
                    - (other.group3()[1] * self.group1()[0])
                    - (other.group3()[2] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group2()[3] * self.group1()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(other.group1()[0] * self.group1()[3]) + (other.group1()[1] * self.group0()[2])
                    - (other.group1()[2] * self.group0()[1])
                    - (other.group1()[3] * self.group0()[0])
                    + (other.group2()[0] * self.group0()[3])
                    - (other.group2()[1] * self.group1()[2])
                    + (other.group2()[2] * self.group1()[1])
                    - (other.group3()[0] * self.group1()[3])
                    + (other.group3()[1] * self.group0()[2])
                    - (other.group3()[2] * self.group0()[1])
                    + (other.group3()[3] * self.group1()[0])),
                (-(other.group1()[0] * self.group0()[2]) - (other.group1()[1] * self.group1()[3]) + (other.group1()[2] * self.group0()[0])
                    - (other.group1()[3] * self.group0()[1])
                    + (other.group2()[0] * self.group1()[2])
                    + (other.group2()[1] * self.group0()[3])
                    - (other.group2()[2] * self.group1()[0])
                    - (other.group3()[0] * self.group0()[2])
                    - (other.group3()[1] * self.group1()[3])
                    + (other.group3()[2] * self.group0()[0])
                    + (other.group3()[3] * self.group1()[1])),
                ((other.group1()[0] * self.group0()[1])
                    - (other.group1()[1] * self.group0()[0])
                    - (other.group1()[2] * self.group1()[3])
                    - (other.group1()[3] * self.group0()[2])
                    - (other.group2()[0] * self.group1()[1])
                    + (other.group2()[1] * self.group1()[0])
                    + (other.group2()[2] * self.group0()[3])
                    + (other.group3()[0] * self.group0()[1])
                    - (other.group3()[1] * self.group0()[0])
                    - (other.group3()[2] * self.group1()[3])
                    + (other.group3()[3] * self.group1()[2])),
                ((other.group1()[0] * self.group0()[0]) + (other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])
                    - (other.group1()[3] * self.group1()[3])
                    - (other.group2()[0] * self.group1()[0])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[2] * self.group1()[2])
                    + (other.group3()[0] * self.group0()[0])
                    + (other.group3()[1] * self.group0()[1])
                    + (other.group3()[2] * self.group0()[2])
                    + (other.group3()[3] * self.group0()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])
                    + (other.group1()[0] * self.group0()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])
                    - (other.group2()[3] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group1()[3])
                    + (other.group0()[2] * self.group0()[0])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group0()[3])
                    - (other.group1()[2] * self.group1()[0])
                    - (other.group2()[3] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) - (other.group0()[2] * self.group1()[3]) - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group0()[3])
                    - (other.group2()[3] * self.group0()[2])),
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2]) - (other.group2()[3] * self.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<DualNum> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4       20        0
    fn geometric_anti_product(self, other: DualNum) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group1()[0]),
                (other.group0()[0] * self.group1()[1]),
                (other.group0()[0] * self.group1()[2]),
                (other.group0()[0] * self.group1()[3]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                (other.group0()[0] * self.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group1()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self.group1()[3]),
            ]),
        );
    }
}
impl GeometricAntiProduct<FlatPoint> for Flector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       12       24        0
    fn geometric_anti_product(self, other: FlatPoint) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (other.group0()[3] * self.group1()[0] * -1.0),
                (other.group0()[3] * self.group1()[1] * -1.0),
                (other.group0()[3] * self.group1()[2] * -1.0),
                (other.group0()[3] * self.group0()[3] * -1.0),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) - (other.group0()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[3]) - (other.group0()[2] * self.group1()[0]) - (other.group0()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group0()[3])
                    - (other.group0()[3] * self.group0()[2])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group0()[3] * self.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Flector> for Flector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       40       48        0
    fn geometric_anti_product(self, other: Flector) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (-(other.group0()[3] * self.group1()[0]) - (other.group1()[0] * self.group0()[3]) + (other.group1()[1] * self.group1()[2])
                    - (other.group1()[2] * self.group1()[1])),
                (-(other.group0()[3] * self.group1()[1]) - (other.group1()[0] * self.group1()[2]) - (other.group1()[1] * self.group0()[3])
                    + (other.group1()[2] * self.group1()[0])),
                (-(other.group0()[3] * self.group1()[2]) + (other.group1()[0] * self.group1()[1])
                    - (other.group1()[1] * self.group1()[0])
                    - (other.group1()[2] * self.group0()[3])),
                (-(other.group0()[3] * self.group0()[3])
                    + (other.group1()[0] * self.group1()[0])
                    + (other.group1()[1] * self.group1()[1])
                    + (other.group1()[2] * self.group1()[2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1])
                    - (other.group0()[3] * self.group0()[0])
                    - (other.group1()[0] * self.group1()[3])
                    + (other.group1()[1] * self.group0()[2])
                    - (other.group1()[2] * self.group0()[1])
                    + (other.group1()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[3])
                    - (other.group0()[2] * self.group1()[0])
                    - (other.group0()[3] * self.group0()[1])
                    - (other.group1()[0] * self.group0()[2])
                    - (other.group1()[1] * self.group1()[3])
                    + (other.group1()[2] * self.group0()[0])
                    + (other.group1()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group0()[3])
                    - (other.group0()[3] * self.group0()[2])
                    + (other.group1()[0] * self.group0()[1])
                    - (other.group1()[1] * self.group0()[0])
                    - (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group0()[3] * self.group1()[3])
                    + (other.group1()[0] * self.group0()[0])
                    + (other.group1()[1] * self.group0()[1])
                    + (other.group1()[2] * self.group0()[2])
                    + (other.group1()[3] * self.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Line> for Flector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       28       36        0
    fn geometric_anti_product(self, other: Line) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) - (other.group1()[0] * self.group0()[3])
                    + (other.group1()[1] * self.group1()[2])
                    - (other.group1()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group0()[0])
                    - (other.group1()[0] * self.group1()[2])
                    - (other.group1()[1] * self.group0()[3])
                    + (other.group1()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group0()[1])
                    + (other.group0()[1] * self.group0()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (other.group1()[0] * self.group1()[1])
                    - (other.group1()[1] * self.group1()[0])
                    - (other.group1()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[3]) - (other.group0()[2] * self.group1()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])
                    + (other.group1()[0] * self.group1()[0])
                    + (other.group1()[1] * self.group1()[1])
                    + (other.group1()[2] * self.group1()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Motor> for Flector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       40       48        0
    fn geometric_anti_product(self, other: Motor) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2])
                    - (self.group0()[2] * other.group0()[1])
                    - (self.group0()[3] * other.group1()[0])
                    - (self.group1()[0] * other.group1()[3])
                    - (self.group1()[1] * other.group1()[2])
                    + (self.group1()[2] * other.group1()[1])
                    + (self.group1()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[3]) + (self.group0()[2] * other.group0()[0])
                    - (self.group0()[3] * other.group1()[1])
                    + (self.group1()[0] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[3])
                    - (self.group1()[2] * other.group1()[0])
                    + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[3])
                    - (self.group0()[3] * other.group1()[2])
                    - (self.group1()[0] * other.group1()[1])
                    + (self.group1()[1] * other.group1()[0])
                    - (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group0()[2])),
                ((self.group0()[3] * other.group0()[3]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[3] * other.group0()[0]) + (self.group1()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])),
                ((self.group0()[3] * other.group0()[1]) - (self.group1()[0] * other.group0()[2]) + (self.group1()[1] * other.group0()[3]) + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[3] * other.group0()[2]) + (self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[3] * other.group1()[3])
                    + (self.group1()[0] * other.group1()[0])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[2] * other.group1()[2])
                    + (self.group1()[3] * other.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<MultiVector> for Flector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      224      256        0
    fn geometric_anti_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(other.group7()[0] * self.group0()[0])
                    - (other.group7()[1] * self.group0()[1])
                    - (other.group7()[2] * self.group0()[2])
                    - (self.group0()[3] * other.group6()[3])
                    + (self.group1()[0] * other.group1()[0])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[2] * other.group1()[2])
                    + (self.group1()[3] * other.group1()[3])),
                ((other.group4()[0] * self.group0()[0]) + (other.group4()[1] * self.group0()[1]) + (other.group4()[2] * self.group0()[2]) - (self.group0()[3] * other.group3()[3])
                    + (self.group1()[0] * other.group9()[0])
                    + (self.group1()[1] * other.group9()[1])
                    + (self.group1()[2] * other.group9()[2])
                    - (self.group1()[3] * other[e45])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) - (other.group4()[0] * self.group1()[3]) + (other.group4()[1] * self.group0()[2]) - (other.group4()[2] * self.group0()[1])
                    + (other.group5()[0] * self.group0()[3])
                    - (other.group5()[1] * self.group1()[2])
                    + (other.group5()[2] * self.group1()[1])
                    - (self.group0()[0] * other[e45])),
                ((other.group0()[0] * self.group1()[1]) - (other.group4()[0] * self.group0()[2]) - (other.group4()[1] * self.group1()[3])
                    + (other.group4()[2] * self.group0()[0])
                    + (other.group5()[0] * self.group1()[2])
                    + (other.group5()[1] * self.group0()[3])
                    - (other.group5()[2] * self.group1()[0])
                    - (self.group0()[1] * other[e45])),
                ((other.group0()[0] * self.group1()[2]) + (other.group4()[0] * self.group0()[1])
                    - (other.group4()[1] * self.group0()[0])
                    - (other.group4()[2] * self.group1()[3])
                    - (other.group5()[0] * self.group1()[1])
                    + (other.group5()[1] * self.group1()[0])
                    + (other.group5()[2] * self.group0()[3])
                    - (self.group0()[2] * other[e45])),
                ((other.group4()[0] * self.group1()[0]) + (other.group4()[1] * self.group1()[1]) + (other.group4()[2] * self.group1()[2]) - (self.group0()[3] * other[e45])),
            ]),
            // e5
            (-(other.group0()[0] * self.group1()[3])
                + (other.group5()[0] * self.group0()[0])
                + (other.group5()[1] * self.group0()[1])
                + (other.group5()[2] * self.group0()[2])
                + (self.group0()[0] * other.group9()[0])
                + (self.group0()[1] * other.group9()[1])
                + (self.group0()[2] * other.group9()[2])
                + (self.group0()[3] * other.group9()[3])
                - (self.group1()[0] * other.group3()[0])
                - (self.group1()[1] * other.group3()[1])
                - (self.group1()[2] * other.group3()[2])
                - (self.group1()[3] * other.group3()[3])),
            // e15, e25, e35, e45
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[0]) - (other.group8()[0] * self.group0()[3]) + (other.group8()[1] * self.group1()[2])
                    - (other.group8()[2] * self.group1()[1])
                    - (self.group0()[0] * other.group6()[3])
                    - (self.group0()[1] * other.group1()[2])
                    + (self.group0()[1] * other.group6()[2])
                    + (self.group0()[2] * other.group1()[1])
                    - (self.group0()[2] * other.group6()[1])
                    - (self.group1()[0] * other[e1])
                    - (self.group1()[3] * other.group1()[0])
                    + (self.group1()[3] * other.group6()[0])),
                ((other.group0()[1] * self.group0()[1]) - (other.group8()[0] * self.group1()[2]) - (other.group8()[1] * self.group0()[3])
                    + (other.group8()[2] * self.group1()[0])
                    + (self.group0()[0] * other.group1()[2])
                    - (self.group0()[0] * other.group6()[2])
                    - (self.group0()[1] * other.group6()[3])
                    - (self.group0()[2] * other.group1()[0])
                    + (self.group0()[2] * other.group6()[0])
                    - (self.group1()[1] * other[e1])
                    - (self.group1()[3] * other.group1()[1])
                    + (self.group1()[3] * other.group6()[1])),
                ((other.group0()[1] * self.group0()[2]) + (other.group8()[0] * self.group1()[1])
                    - (other.group8()[1] * self.group1()[0])
                    - (other.group8()[2] * self.group0()[3])
                    - (self.group0()[0] * other.group1()[1])
                    + (self.group0()[0] * other.group6()[1])
                    + (self.group0()[1] * other.group1()[0])
                    - (self.group0()[1] * other.group6()[0])
                    - (self.group0()[2] * other.group6()[3])
                    - (self.group1()[2] * other[e1])
                    - (self.group1()[3] * other.group1()[2])
                    + (self.group1()[3] * other.group6()[2])),
                ((other.group0()[1] * self.group0()[3]) + (other.group7()[0] * self.group0()[0]) + (other.group7()[1] * self.group0()[1]) + (other.group7()[2] * self.group0()[2])
                    - (self.group1()[0] * other.group6()[0])
                    - (self.group1()[1] * other.group6()[1])
                    - (self.group1()[2] * other.group6()[2])
                    - (self.group1()[3] * other.group1()[3])),
            ]),
            // e41, e42, e43
            Simd32x3::from([
                ((other.group7()[0] * self.group0()[3]) - (other.group7()[1] * self.group1()[2]) + (other.group7()[2] * self.group1()[1]) + (self.group1()[0] * other.group1()[3])),
                ((other.group7()[0] * self.group1()[2]) + (other.group7()[1] * self.group0()[3]) - (other.group7()[2] * self.group1()[0]) + (self.group1()[1] * other.group1()[3])),
                (-(other.group7()[0] * self.group1()[1])
                    + (other.group7()[1] * self.group1()[0])
                    + (other.group7()[2] * self.group0()[3])
                    + (self.group1()[2] * other.group1()[3])),
            ]),
            // e23, e31, e12
            Simd32x3::from([
                ((other.group7()[0] * self.group1()[3]) - (other.group7()[1] * self.group0()[2]) + (other.group7()[2] * self.group0()[1]) + (self.group0()[0] * other.group1()[3])
                    - (self.group0()[3] * other.group1()[0])
                    - (self.group1()[0] * other.group6()[3])
                    - (self.group1()[1] * other.group1()[2])
                    + (self.group1()[2] * other.group1()[1])),
                ((other.group7()[0] * self.group0()[2]) + (other.group7()[1] * self.group1()[3]) - (other.group7()[2] * self.group0()[0]) + (self.group0()[1] * other.group1()[3])
                    - (self.group0()[3] * other.group1()[1])
                    + (self.group1()[0] * other.group1()[2])
                    - (self.group1()[1] * other.group6()[3])
                    - (self.group1()[2] * other.group1()[0])),
                (-(other.group7()[0] * self.group0()[1])
                    + (other.group7()[1] * self.group0()[0])
                    + (other.group7()[2] * self.group1()[3])
                    + (self.group0()[2] * other.group1()[3])
                    - (self.group0()[3] * other.group1()[2])
                    - (self.group1()[0] * other.group1()[1])
                    + (self.group1()[1] * other.group1()[0])
                    - (self.group1()[2] * other.group6()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group4()[0] * self.group1()[3]) + (other.group4()[1] * self.group0()[2])
                    - (other.group4()[2] * self.group0()[1])
                    - (self.group0()[0] * other[e45])
                    - (self.group0()[3] * other.group9()[0])
                    - (self.group1()[0] * other.group3()[3])
                    - (self.group1()[1] * other.group9()[2])
                    + (self.group1()[2] * other.group9()[1])),
                (-(other.group4()[0] * self.group0()[2]) - (other.group4()[1] * self.group1()[3]) + (other.group4()[2] * self.group0()[0])
                    - (self.group0()[1] * other[e45])
                    - (self.group0()[3] * other.group9()[1])
                    + (self.group1()[0] * other.group9()[2])
                    - (self.group1()[1] * other.group3()[3])
                    - (self.group1()[2] * other.group9()[0])),
                ((other.group4()[0] * self.group0()[1])
                    - (other.group4()[1] * self.group0()[0])
                    - (other.group4()[2] * self.group1()[3])
                    - (self.group0()[2] * other[e45])
                    - (self.group0()[3] * other.group9()[2])
                    - (self.group1()[0] * other.group9()[1])
                    + (self.group1()[1] * other.group9()[0])
                    - (self.group1()[2] * other.group3()[3])),
                ((other.group0()[0] * self.group0()[3]) + (other.group4()[0] * self.group0()[0]) + (other.group4()[1] * self.group0()[1]) + (other.group4()[2] * self.group0()[2])
                    - (other.group5()[0] * self.group1()[0])
                    - (other.group5()[1] * self.group1()[1])
                    - (other.group5()[2] * self.group1()[2])
                    - (self.group1()[3] * other[e45])),
            ]),
            // e423, e431, e412
            Simd32x3::from([
                (-(other.group4()[0] * self.group0()[3]) + (other.group4()[1] * self.group1()[2]) - (other.group4()[2] * self.group1()[1]) - (self.group1()[0] * other[e45])),
                (-(other.group4()[0] * self.group1()[2]) - (other.group4()[1] * self.group0()[3]) + (other.group4()[2] * self.group1()[0]) - (self.group1()[1] * other[e45])),
                ((other.group4()[0] * self.group1()[1]) - (other.group4()[1] * self.group1()[0]) - (other.group4()[2] * self.group0()[3]) - (self.group1()[2] * other[e45])),
            ]),
            // e235, e315, e125
            Simd32x3::from([
                (-(other.group0()[0] * self.group0()[0]) - (other.group5()[0] * self.group1()[3]) + (other.group5()[1] * self.group0()[2])
                    - (other.group5()[2] * self.group0()[1])
                    - (self.group0()[0] * other.group3()[3])
                    - (self.group0()[1] * other.group9()[2])
                    + (self.group0()[2] * other.group9()[1])
                    + (self.group0()[3] * other.group3()[0])
                    + (self.group1()[0] * other.group9()[3])
                    + (self.group1()[1] * other.group3()[2])
                    - (self.group1()[2] * other.group3()[1])
                    - (self.group1()[3] * other.group9()[0])),
                (-(other.group0()[0] * self.group0()[1]) - (other.group5()[0] * self.group0()[2]) - (other.group5()[1] * self.group1()[3])
                    + (other.group5()[2] * self.group0()[0])
                    + (self.group0()[0] * other.group9()[2])
                    - (self.group0()[1] * other.group3()[3])
                    - (self.group0()[2] * other.group9()[0])
                    + (self.group0()[3] * other.group3()[1])
                    - (self.group1()[0] * other.group3()[2])
                    + (self.group1()[1] * other.group9()[3])
                    + (self.group1()[2] * other.group3()[0])
                    - (self.group1()[3] * other.group9()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group5()[0] * self.group0()[1])
                    - (other.group5()[1] * self.group0()[0])
                    - (other.group5()[2] * self.group1()[3])
                    - (self.group0()[0] * other.group9()[1])
                    + (self.group0()[1] * other.group9()[0])
                    - (self.group0()[2] * other.group3()[3])
                    + (self.group0()[3] * other.group3()[2])
                    + (self.group1()[0] * other.group3()[1])
                    - (self.group1()[1] * other.group3()[0])
                    + (self.group1()[2] * other.group9()[3])
                    - (self.group1()[3] * other.group9()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((other.group0()[1] * self.group1()[0]) - (other.group7()[0] * self.group1()[3]) + (other.group7()[1] * self.group0()[2])
                    - (other.group7()[2] * self.group0()[1])
                    - (self.group0()[0] * other.group1()[3])
                    + (self.group0()[3] * other.group6()[0])
                    + (self.group1()[1] * other.group6()[2])
                    - (self.group1()[2] * other.group6()[1])),
                ((other.group0()[1] * self.group1()[1]) - (other.group7()[0] * self.group0()[2]) - (other.group7()[1] * self.group1()[3]) + (other.group7()[2] * self.group0()[0])
                    - (self.group0()[1] * other.group1()[3])
                    + (self.group0()[3] * other.group6()[1])
                    - (self.group1()[0] * other.group6()[2])
                    + (self.group1()[2] * other.group6()[0])),
                ((other.group0()[1] * self.group1()[2]) + (other.group7()[0] * self.group0()[1])
                    - (other.group7()[1] * self.group0()[0])
                    - (other.group7()[2] * self.group1()[3])
                    - (self.group0()[2] * other.group1()[3])
                    + (self.group0()[3] * other.group6()[2])
                    + (self.group1()[0] * other.group6()[1])
                    - (self.group1()[1] * other.group6()[0])),
                ((other.group0()[1] * self.group1()[3])
                    + (other.group8()[0] * self.group1()[0])
                    + (other.group8()[1] * self.group1()[1])
                    + (other.group8()[2] * self.group1()[2])
                    + (self.group0()[0] * other.group1()[0])
                    - (self.group0()[0] * other.group6()[0])
                    + (self.group0()[1] * other.group1()[1])
                    - (self.group0()[1] * other.group6()[1])
                    + (self.group0()[2] * other.group1()[2])
                    - (self.group0()[2] * other.group6()[2])
                    - (self.group0()[3] * other[e1])
                    - (self.group1()[3] * other.group6()[3])),
            ]),
            // e1234
            (-(other.group7()[0] * self.group1()[0]) - (other.group7()[1] * self.group1()[1]) - (other.group7()[2] * self.group1()[2]) + (self.group0()[3] * other.group1()[3])),
        );
    }
}
impl GeometricAntiProduct<Plane> for Flector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       20       28        0
    fn geometric_anti_product(self, other: Plane) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (-(self.group0()[3] * other.group0()[0]) - (self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                (-(self.group0()[3] * other.group0()[1]) + (self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[3] * other.group0()[2]) - (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1]) + (self.group1()[0] * other.group0()[3])
                    - (self.group1()[3] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3]) - (self.group1()[3] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[3])
                    - (self.group1()[3] * other.group0()[2])),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<RoundPoint> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       24       44        0
    fn geometric_anti_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2]) + (self.group1()[3] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[3] * other.group0()[0]) - (self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group0()[1] * other.group0()[3]) - (self.group0()[3] * other.group0()[1]) + (self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[3]) - (self.group0()[3] * other.group0()[2]) - (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                (self.group1()[3] * other.group0()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1]) - (self.group1()[0] * other[e2]) - (self.group1()[3] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0]) - (self.group1()[1] * other[e2]) - (self.group1()[3] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) - (self.group1()[2] * other[e2]) - (self.group1()[3] * other.group0()[2])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) - (self.group0()[3] * other[e2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Scalar> for Flector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0       12        0
    fn geometric_anti_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (self.group0()[0] * other[scalar] * -1.0),
                (self.group0()[1] * other[scalar] * -1.0),
                (self.group0()[2] * other[scalar] * -1.0),
                (self.group0()[3] * other[scalar]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group1()[0] * other[scalar]),
                (self.group1()[1] * other[scalar]),
                (self.group1()[2] * other[scalar]),
                (self.group1()[3] * other[scalar] * -1.0),
            ]),
        );
    }
}
impl GeometricAntiProduct<Sphere> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       24       48        0
    fn geometric_anti_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group1()[0] * other[e4315] * -1.0),
                (self.group1()[1] * other[e4315] * -1.0),
                (self.group1()[2] * other[e4315] * -1.0),
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2]) - (self.group1()[3] * other[e4315])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other[e4315]) - (self.group0()[3] * other.group0()[0]) - (self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                (-(self.group0()[1] * other[e4315]) - (self.group0()[3] * other.group0()[1]) + (self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[2] * other[e4315]) - (self.group0()[3] * other.group0()[2]) - (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                (self.group1()[3] * other[e4315] * -1.0),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1]) + (self.group1()[0] * other.group0()[3])
                    - (self.group1()[3] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3]) - (self.group1()[3] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[3])
                    - (self.group1()[3] * other.group0()[2])),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other[e4315] * -1.0),
                (self.group0()[1] * other[e4315] * -1.0),
                (self.group0()[2] * other[e4315] * -1.0),
                (self.group0()[3] * other[e4315] * -1.0),
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorEven> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      112      128        0
    fn geometric_anti_product(self, other: VersorEven) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[3] * other.group0()[0]) + (self.group1()[0] * other.group3()[3]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])),
                ((self.group0()[3] * other.group0()[1]) - (self.group1()[0] * other.group0()[2]) + (self.group1()[1] * other.group3()[3]) + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[3] * other.group0()[2]) + (self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0]) + (self.group1()[2] * other.group3()[3])),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[3] * other.group1()[3])
                    + (self.group1()[0] * other.group3()[0])
                    + (self.group1()[1] * other.group3()[1])
                    + (self.group1()[2] * other.group3()[2])
                    + (self.group1()[3] * other.group3()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group0()[2])
                    - (self.group0()[2] * other.group0()[1])
                    - (self.group0()[3] * other.group3()[0])
                    - (self.group1()[0] * other.group1()[3])
                    - (self.group1()[1] * other.group3()[2])
                    + (self.group1()[2] * other.group3()[1])
                    + (self.group1()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group3()[3]) + (self.group0()[2] * other.group0()[0])
                    - (self.group0()[3] * other.group3()[1])
                    + (self.group1()[0] * other.group3()[2])
                    - (self.group1()[1] * other.group1()[3])
                    - (self.group1()[2] * other.group3()[0])
                    + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group3()[3])
                    - (self.group0()[3] * other.group3()[2])
                    - (self.group1()[0] * other.group3()[1])
                    + (self.group1()[1] * other.group3()[0])
                    - (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group0()[2])),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group3()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[1] * other.group3()[2])
                    - (self.group0()[2] * other.group1()[1])
                    + (self.group0()[2] * other.group3()[1])
                    - (self.group0()[3] * other.group2()[0])
                    - (self.group1()[0] * other.group2()[3])
                    - (self.group1()[1] * other.group2()[2])
                    + (self.group1()[2] * other.group2()[1])
                    + (self.group1()[3] * other.group1()[0])
                    - (self.group1()[3] * other.group3()[0])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group0()[3])
                    - (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    - (self.group0()[2] * other.group3()[0])
                    - (self.group0()[3] * other.group2()[1])
                    + (self.group1()[0] * other.group2()[2])
                    - (self.group1()[1] * other.group2()[3])
                    - (self.group1()[2] * other.group2()[0])
                    + (self.group1()[3] * other.group1()[1])
                    - (self.group1()[3] * other.group3()[1])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group1()[0])
                    + (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group0()[3])
                    - (self.group0()[2] * other.group1()[3])
                    - (self.group0()[3] * other.group2()[2])
                    - (self.group1()[0] * other.group2()[1])
                    + (self.group1()[1] * other.group2()[0])
                    - (self.group1()[2] * other.group2()[3])
                    + (self.group1()[3] * other.group1()[2])
                    - (self.group1()[3] * other.group3()[2])),
                ((self.group0()[3] * other.group3()[3]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(self.group0()[0] * other.group3()[3]) - (self.group0()[1] * other.group0()[2])
                    + (self.group0()[2] * other.group0()[1])
                    + (self.group0()[3] * other.group1()[0])
                    + (self.group1()[0] * other.group0()[3])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])
                    - (self.group1()[3] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group3()[3]) - (self.group0()[2] * other.group0()[0]) + (self.group0()[3] * other.group1()[1])
                    - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group1()[2] * other.group1()[0])
                    - (self.group1()[3] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group3()[3])
                    + (self.group0()[3] * other.group1()[2])
                    + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[0])
                    + (self.group1()[2] * other.group0()[3])
                    - (self.group1()[3] * other.group0()[2])),
                (-(self.group0()[0] * other.group1()[0]) + (self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group1()[1])
                    + (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group1()[2])
                    + (self.group0()[2] * other.group3()[2])
                    - (self.group0()[3] * other.group2()[3])
                    + (self.group1()[0] * other.group2()[0])
                    + (self.group1()[1] * other.group2()[1])
                    + (self.group1()[2] * other.group2()[2])
                    + (self.group1()[3] * other.group0()[3])
                    - (self.group1()[3] * other.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorOdd> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      112      128        0
    fn geometric_anti_product(self, other: VersorOdd) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[3] * other.group0()[0]) - (self.group1()[0] * other.group2()[3]) - (self.group1()[1] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[1])),
                (-(self.group0()[3] * other.group0()[1]) + (self.group1()[0] * other.group0()[2])
                    - (self.group1()[1] * other.group2()[3])
                    - (self.group1()[2] * other.group0()[0])),
                (-(self.group0()[3] * other.group0()[2]) - (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])
                    - (self.group1()[2] * other.group2()[3])),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) - (self.group0()[3] * other.group1()[3])
                    + (self.group1()[0] * other.group3()[0])
                    + (self.group1()[1] * other.group3()[1])
                    + (self.group1()[2] * other.group3()[2])
                    - (self.group1()[3] * other.group2()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])
                    - (self.group0()[3] * other.group3()[0])
                    - (self.group1()[0] * other.group1()[3])
                    - (self.group1()[1] * other.group3()[2])
                    + (self.group1()[2] * other.group3()[1])
                    - (self.group1()[3] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group2()[3]) - (self.group0()[2] * other.group0()[0]) - (self.group0()[3] * other.group3()[1])
                    + (self.group1()[0] * other.group3()[2])
                    - (self.group1()[1] * other.group1()[3])
                    - (self.group1()[2] * other.group3()[0])
                    - (self.group1()[3] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])
                    - (self.group0()[2] * other.group2()[3])
                    - (self.group0()[3] * other.group3()[2])
                    - (self.group1()[0] * other.group3()[1])
                    + (self.group1()[1] * other.group3()[0])
                    - (self.group1()[2] * other.group1()[3])
                    - (self.group1()[3] * other.group0()[2])),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group2()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3])
                    - (self.group0()[0] * other.group1()[3])
                    - (self.group0()[1] * other.group1()[2])
                    - (self.group0()[1] * other.group3()[2])
                    + (self.group0()[2] * other.group1()[1])
                    + (self.group0()[2] * other.group3()[1])
                    + (self.group0()[3] * other.group2()[0])
                    + (self.group1()[0] * other.group3()[3])
                    + (self.group1()[1] * other.group2()[2])
                    - (self.group1()[2] * other.group2()[1])
                    - (self.group1()[3] * other.group1()[0])
                    - (self.group1()[3] * other.group3()[0])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[0] * other.group3()[2])
                    - (self.group0()[1] * other.group0()[3])
                    - (self.group0()[1] * other.group1()[3])
                    - (self.group0()[2] * other.group1()[0])
                    - (self.group0()[2] * other.group3()[0])
                    + (self.group0()[3] * other.group2()[1])
                    - (self.group1()[0] * other.group2()[2])
                    + (self.group1()[1] * other.group3()[3])
                    + (self.group1()[2] * other.group2()[0])
                    - (self.group1()[3] * other.group1()[1])
                    - (self.group1()[3] * other.group3()[1])),
                (-(self.group0()[0] * other.group1()[1]) - (self.group0()[0] * other.group3()[1])
                    + (self.group0()[1] * other.group1()[0])
                    + (self.group0()[1] * other.group3()[0])
                    - (self.group0()[2] * other.group0()[3])
                    - (self.group0()[2] * other.group1()[3])
                    + (self.group0()[3] * other.group2()[2])
                    + (self.group1()[0] * other.group2()[1])
                    - (self.group1()[1] * other.group2()[0])
                    + (self.group1()[2] * other.group3()[3])
                    - (self.group1()[3] * other.group1()[2])
                    - (self.group1()[3] * other.group3()[2])),
                ((self.group0()[0] * other.group1()[0])
                    + (self.group0()[0] * other.group3()[0])
                    + (self.group0()[1] * other.group1()[1])
                    + (self.group0()[1] * other.group3()[1])
                    + (self.group0()[2] * other.group1()[2])
                    + (self.group0()[2] * other.group3()[2])
                    + (self.group0()[3] * other.group3()[3])
                    - (self.group1()[0] * other.group2()[0])
                    - (self.group1()[1] * other.group2()[1])
                    - (self.group1()[2] * other.group2()[2])
                    - (self.group1()[3] * other.group0()[3])
                    - (self.group1()[3] * other.group1()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group0()[2])
                    + (self.group0()[2] * other.group0()[1])
                    + (self.group0()[3] * other.group1()[0])
                    + (self.group1()[0] * other.group0()[3])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])
                    - (self.group1()[3] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group2()[3]) - (self.group0()[2] * other.group0()[0]) + (self.group0()[3] * other.group1()[1])
                    - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group1()[2] * other.group1()[0])
                    - (self.group1()[3] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group2()[3])
                    + (self.group0()[3] * other.group1()[2])
                    + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[0])
                    + (self.group1()[2] * other.group0()[3])
                    - (self.group1()[3] * other.group0()[2])),
                (-(self.group0()[3] * other.group2()[3])
                    + (self.group1()[0] * other.group0()[0])
                    + (self.group1()[1] * other.group0()[1])
                    + (self.group1()[2] * other.group0()[2])),
            ]),
        );
    }
}
impl InfixGeometricAntiProduct for Line {}
impl GeometricAntiProduct<AntiCircleRotor> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       50       66        0
    fn geometric_anti_product(self, other: AntiCircleRotor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (self.group0()[0] * other.group2()[3])
                    + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0]) - (self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group2()[3])
                    + (self.group0()[2] * other.group1()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])
                    + (self.group0()[2] * other.group2()[3])),
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group1()[0] * other.group2()[3])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[2] * other.group2()[0]) - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[1] * other.group2()[3])
                    + (self.group1()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) + (self.group1()[0] * other.group1()[1]) - (self.group1()[1] * other.group1()[0])
                    + (self.group1()[2] * other.group1()[3])
                    + (self.group1()[2] * other.group2()[3])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1]) + (self.group0()[0] * other.group1()[3])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group1()[0]) + (self.group0()[1] * other.group1()[3])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) + (self.group0()[2] * other.group1()[3])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDipoleInversion> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       74       90        0
    fn geometric_anti_product(self, other: AntiDipoleInversion) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (self.group0()[0] * other.group2()[3])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) + (self.group0()[1] * other.group2()[3])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (self.group0()[2] * other.group2()[3])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])
                    + (self.group1()[0] * other.group2()[3])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0]) - (self.group0()[0] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group1()[1] * other.group2()[3])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])
                    + (self.group1()[2] * other.group2()[3])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group3()[0])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group3()[2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1]) - (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[1] * other.group3()[2])
                    - (self.group1()[2] * other.group1()[1])
                    + (self.group1()[2] * other.group3()[1])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group3()[3]) + (self.group0()[2] * other.group2()[0])
                    - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[0] * other.group3()[2])
                    - (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group1()[0])
                    - (self.group1()[2] * other.group3()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) + (self.group0()[2] * other.group3()[3]) + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[0] * other.group3()[1])
                    - (self.group1()[1] * other.group1()[0])
                    + (self.group1()[1] * other.group3()[0])
                    - (self.group1()[2] * other.group1()[3])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group1()[0] * other.group1()[0])
                    + (self.group1()[0] * other.group3()[0])
                    - (self.group1()[1] * other.group1()[1])
                    + (self.group1()[1] * other.group3()[1])
                    - (self.group1()[2] * other.group1()[2])
                    + (self.group1()[2] * other.group3()[2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (self.group0()[0] * other.group1()[3])
                    + (self.group0()[1] * other.group3()[2])
                    - (self.group0()[2] * other.group3()[1])
                    + (self.group1()[0] * other.group2()[3])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0]) - (self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group3()[0])
                    + (self.group1()[1] * other.group2()[3])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (self.group0()[0] * other.group3()[1])
                    - (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group1()[2] * other.group2()[3])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum> for Line {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3       18        0
    fn geometric_anti_product(self, other: AntiDualNum) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from([(other.group0()[0] * self.group0()[0]), (other.group0()[0] * self.group0()[1]), (other.group0()[0] * self.group0()[2])]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[2])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[1] * self.group1()[0]),
                (other.group0()[1] * self.group1()[1]),
                (other.group0()[1] * self.group1()[2]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group1()[0] * -1.0),
                (other.group0()[0] * self.group1()[1] * -1.0),
                (other.group0()[0] * self.group1()[2] * -1.0),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiFlatPoint> for Line {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       15        0
    fn geometric_anti_product(self, other: AntiFlatPoint) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) - (self.group1()[0] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0]) - (self.group1()[1] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) - (self.group1()[2] * other.group0()[3])),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiFlector> for Line {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       28       36        0
    fn geometric_anti_product(self, other: AntiFlector) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[2])
                    - (self.group0()[2] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[3])
                    - (self.group1()[1] * other.group1()[2])
                    + (self.group1()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group0()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group0()[0])
                    + (self.group1()[0] * other.group1()[2])
                    - (self.group1()[1] * other.group0()[3])
                    - (self.group1()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group1()[3]) - (self.group1()[0] * other.group1()[1])
                    + (self.group1()[1] * other.group1()[0])
                    - (self.group1()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[3]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group1()[0] * other.group1()[0])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[2] * other.group1()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiLine> for Line {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       19       27        0
    fn geometric_anti_product(self, other: AntiLine) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiMotor> for Line {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       28       36        0
    fn geometric_anti_product(self, other: AntiMotor) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[3]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])
                    + (self.group1()[0] * other.group0()[3])
                    + (self.group1()[1] * other.group0()[2])
                    - (self.group1()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group1()[0])
                    - (self.group1()[0] * other.group0()[2])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[3]) + (self.group1()[0] * other.group0()[1])
                    - (self.group1()[1] * other.group0()[0])
                    + (self.group1()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiPlane> for Line {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       13       21        0
    fn geometric_anti_product(self, other: AntiPlane) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group0()[1] * other.group0()[3]) + (self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[3]) - (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiScalar> for Line {
    type Output = Line;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        6        0
    fn geometric_anti_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return Line::from_groups(
            // e415, e425, e435
            Simd32x3::from([(self.group0()[0] * other[e12345]), (self.group0()[1] * other[e12345]), (self.group0()[2] * other[e12345])]),
            // e235, e315, e125
            Simd32x3::from([(self.group1()[0] * other[e12345]), (self.group1()[1] * other[e12345]), (self.group1()[2] * other[e12345])]),
        );
    }
}
impl GeometricAntiProduct<Circle> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       44       60        0
    fn geometric_anti_product(self, other: Circle) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0]) - (self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])),
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(other.group2()[1] * self.group0()[2]) + (other.group2()[2] * self.group0()[1]) - (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])),
                ((other.group2()[0] * self.group0()[2]) - (other.group2()[2] * self.group0()[0]) - (self.group1()[0] * other.group1()[2]) - (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group1()[0])),
                (-(other.group2()[0] * self.group0()[1]) + (other.group2()[1] * self.group0()[0]) + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[0])
                    - (self.group1()[2] * other.group1()[3])),
                (-(other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) + (self.group0()[0] * other.group1()[3])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0]) + (self.group0()[1] * other.group1()[3])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (self.group0()[2] * other.group1()[3])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<CircleRotor> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       50       66        0
    fn geometric_anti_product(self, other: CircleRotor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (self.group0()[0] * other.group2()[3])
                    + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0]) - (self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group2()[3])
                    + (self.group0()[2] * other.group1()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])
                    + (self.group0()[2] * other.group2()[3])),
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1]) - (self.group1()[0] * other.group1()[3])
                    + (self.group1()[0] * other.group2()[3])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[2] * other.group2()[0])
                    - (self.group1()[0] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[3])
                    + (self.group1()[1] * other.group2()[3])
                    + (self.group1()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[0])
                    - (self.group1()[2] * other.group1()[3])
                    + (self.group1()[2] * other.group2()[3])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) + (self.group0()[0] * other.group1()[3])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0]) + (self.group0()[1] * other.group1()[3])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (self.group0()[2] * other.group1()[3])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Dipole> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       44       60        0
    fn geometric_anti_product(self, other: Dipole) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0]) - (self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])),
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group2()[1] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[1])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])),
                ((other.group2()[0] * self.group0()[2]) - (other.group2()[2] * self.group0()[0]) - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group1()[0])),
                (-(other.group2()[0] * self.group0()[1]) + (other.group2()[1] * self.group0()[0]) + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[0])
                    + (self.group1()[2] * other.group1()[3])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1]) + (self.group0()[0] * other.group1()[3])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group1()[0]) + (self.group0()[1] * other.group1()[3])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) + (self.group0()[2] * other.group1()[3])),
                (-(other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<DipoleInversion> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       74       90        0
    fn geometric_anti_product(self, other: DipoleInversion) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (self.group0()[0] * other.group2()[3])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) + (self.group0()[1] * other.group2()[3])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (self.group0()[2] * other.group2()[3])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])
                    + (self.group1()[0] * other.group2()[3])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0]) - (self.group0()[0] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group1()[1] * other.group2()[3])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])
                    + (self.group1()[2] * other.group2()[3])),
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group3()[0])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group3()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group1()[2])
                    + (self.group1()[1] * other.group3()[2])
                    - (self.group1()[2] * other.group1()[1])
                    - (self.group1()[2] * other.group3()[1])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group3()[3]) + (self.group0()[2] * other.group2()[0])
                    - (self.group1()[0] * other.group1()[2])
                    - (self.group1()[0] * other.group3()[2])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group1()[0])
                    + (self.group1()[2] * other.group3()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0])
                    + (self.group0()[2] * other.group3()[3])
                    + (self.group1()[0] * other.group1()[1])
                    + (self.group1()[0] * other.group3()[1])
                    - (self.group1()[1] * other.group1()[0])
                    - (self.group1()[1] * other.group3()[0])
                    + (self.group1()[2] * other.group1()[3])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1]) + (self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group3()[2])
                    - (self.group0()[2] * other.group3()[1])
                    - (self.group1()[0] * other.group2()[3])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[2] * self.group1()[0]) - (self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group3()[0])
                    - (self.group1()[1] * other.group2()[3])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) + (self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group1()[3])
                    - (self.group1()[2] * other.group2()[3])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[0] * other.group3()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[1] * other.group3()[1])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[2] * other.group3()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<DualNum> for Line {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        3       15        0
    fn geometric_anti_product(self, other: DualNum) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from([(other.group0()[0] * self.group0()[0]), (other.group0()[0] * self.group0()[1]), (other.group0()[0] * self.group0()[2])]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[2])),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (other.group0()[1] * self.group1()[0]),
                (other.group0()[1] * self.group1()[1]),
                (other.group0()[1] * self.group1()[2]),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[0] * self.group1()[0]),
                (other.group0()[0] * self.group1()[1]),
                (other.group0()[0] * self.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<FlatPoint> for Line {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       15        0
    fn geometric_anti_product(self, other: FlatPoint) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (self.group1()[0] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[3])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Flector> for Line {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       28       36        0
    fn geometric_anti_product(self, other: Flector) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])
                    + (self.group1()[0] * other.group0()[3])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group0()[0])
                    - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group1()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group1()[3]) + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[0])
                    + (self.group1()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[3]) + (self.group0()[2] * other.group1()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Line> for Line {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       19       27        0
    fn geometric_anti_product(self, other: Line) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[2] * self.group1()[0]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Motor> for Line {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       28       36        0
    fn geometric_anti_product(self, other: Motor) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[3]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])
                    + (self.group1()[0] * other.group0()[3])
                    + (self.group1()[1] * other.group0()[2])
                    - (self.group1()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group1()[0])
                    - (self.group1()[0] * other.group0()[2])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[3]) + (self.group1()[0] * other.group0()[1])
                    - (self.group1()[1] * other.group0()[0])
                    + (self.group1()[2] * other.group0()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<MultiVector> for Line {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      160      192        0
    fn geometric_anti_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group0()[0] * other.group5()[0])
                    - (self.group0()[1] * other.group5()[1])
                    - (self.group0()[2] * other.group5()[2])
                    - (self.group1()[0] * other.group4()[0])
                    - (self.group1()[1] * other.group4()[1])
                    - (self.group1()[2] * other.group4()[2])),
                (-(self.group0()[0] * other.group6()[0])
                    - (self.group0()[1] * other.group6()[1])
                    - (self.group0()[2] * other.group6()[2])
                    - (self.group1()[0] * other.group7()[0])
                    - (self.group1()[1] * other.group7()[1])
                    - (self.group1()[2] * other.group7()[2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group6()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group7()[2])
                    - (self.group1()[2] * other.group7()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group6()[3]) + (self.group0()[2] * other.group1()[0])
                    - (self.group1()[0] * other.group7()[2])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group7()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group6()[3]) + (self.group1()[0] * other.group7()[1])
                    - (self.group1()[1] * other.group7()[0])
                    + (self.group1()[2] * other.group1()[3])),
                (-(self.group0()[0] * other.group7()[0]) - (self.group0()[1] * other.group7()[1]) - (self.group0()[2] * other.group7()[2])),
            ]),
            // e5
            (-(self.group0()[0] * other.group8()[0]) - (self.group0()[1] * other.group8()[1]) - (self.group0()[2] * other.group8()[2]) + (self.group1()[0] * other.group1()[0])
                - (self.group1()[0] * other.group6()[0])
                + (self.group1()[1] * other.group1()[1])
                - (self.group1()[1] * other.group6()[1])
                + (self.group1()[2] * other.group1()[2])
                - (self.group1()[2] * other.group6()[2])),
            // e15, e25, e35, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (self.group0()[0] * other.group9()[3]) + (self.group0()[1] * other.group3()[2]) - (self.group0()[2] * other.group3()[1])
                    + (self.group1()[0] * other.group3()[3])
                    + (self.group1()[1] * other.group5()[2])
                    + (self.group1()[1] * other.group9()[2])
                    - (self.group1()[2] * other.group5()[1])
                    - (self.group1()[2] * other.group9()[1])),
                ((other.group0()[0] * self.group1()[1]) - (self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group9()[3]) + (self.group0()[2] * other.group3()[0])
                    - (self.group1()[0] * other.group5()[2])
                    - (self.group1()[0] * other.group9()[2])
                    + (self.group1()[1] * other.group3()[3])
                    + (self.group1()[2] * other.group5()[0])
                    + (self.group1()[2] * other.group9()[0])),
                ((other.group0()[0] * self.group1()[2]) + (self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group9()[3])
                    + (self.group1()[0] * other.group5()[1])
                    + (self.group1()[0] * other.group9()[1])
                    - (self.group1()[1] * other.group5()[0])
                    - (self.group1()[1] * other.group9()[0])
                    + (self.group1()[2] * other.group3()[3])),
                (-(self.group0()[0] * other.group9()[0]) - (self.group0()[1] * other.group9()[1]) - (self.group0()[2] * other.group9()[2])
                    + (self.group1()[0] * other.group4()[0])
                    + (self.group1()[1] * other.group4()[1])
                    + (self.group1()[2] * other.group4()[2])),
            ]),
            // e41, e42, e43
            Simd32x3::from([
                ((self.group0()[0] * other[e45]) + (self.group0()[1] * other.group4()[2]) - (self.group0()[2] * other.group4()[1])),
                (-(self.group0()[0] * other.group4()[2]) + (self.group0()[1] * other[e45]) + (self.group0()[2] * other.group4()[0])),
                ((self.group0()[0] * other.group4()[1]) - (self.group0()[1] * other.group4()[0]) + (self.group0()[2] * other[e45])),
            ]),
            // e23, e31, e12
            Simd32x3::from([
                ((other.group0()[0] * self.group0()[0]) + (self.group0()[1] * other.group5()[2]) - (self.group0()[2] * other.group5()[1])
                    + (self.group1()[0] * other[e45])
                    + (self.group1()[1] * other.group4()[2])
                    - (self.group1()[2] * other.group4()[1])),
                ((other.group0()[0] * self.group0()[1]) - (self.group0()[0] * other.group5()[2]) + (self.group0()[2] * other.group5()[0]) - (self.group1()[0] * other.group4()[2])
                    + (self.group1()[1] * other[e45])
                    + (self.group1()[2] * other.group4()[0])),
                ((other.group0()[0] * self.group0()[2]) + (self.group0()[0] * other.group5()[1]) - (self.group0()[1] * other.group5()[0]) + (self.group1()[0] * other.group4()[1])
                    - (self.group1()[1] * other.group4()[0])
                    + (self.group1()[2] * other[e45])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[0]) + (self.group0()[1] * other.group6()[2]) - (self.group0()[2] * other.group6()[1])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group7()[2])
                    - (self.group1()[2] * other.group7()[1])),
                ((other.group0()[1] * self.group0()[1]) - (self.group0()[0] * other.group6()[2]) + (self.group0()[2] * other.group6()[0]) - (self.group1()[0] * other.group7()[2])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group7()[0])),
                ((other.group0()[1] * self.group0()[2]) + (self.group0()[0] * other.group6()[1]) - (self.group0()[1] * other.group6()[0]) + (self.group1()[0] * other.group7()[1])
                    - (self.group1()[1] * other.group7()[0])
                    + (self.group1()[2] * other.group1()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[0] * other.group7()[0])
                    - (self.group1()[1] * other.group7()[1])
                    - (self.group1()[2] * other.group7()[2])),
            ]),
            // e423, e431, e412
            Simd32x3::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group7()[2]) - (self.group0()[2] * other.group7()[1])),
                (-(self.group0()[0] * other.group7()[2]) + (self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group7()[0])),
                ((self.group0()[0] * other.group7()[1]) - (self.group0()[1] * other.group7()[0]) + (self.group0()[2] * other.group1()[3])),
            ]),
            // e235, e315, e125
            Simd32x3::from([
                ((other.group0()[1] * self.group1()[0]) + (self.group0()[0] * other[e1]) + (self.group0()[1] * other.group8()[2])
                    - (self.group0()[2] * other.group8()[1])
                    - (self.group1()[0] * other.group6()[3])
                    - (self.group1()[1] * other.group1()[2])
                    + (self.group1()[1] * other.group6()[2])
                    + (self.group1()[2] * other.group1()[1])
                    - (self.group1()[2] * other.group6()[1])),
                ((other.group0()[1] * self.group1()[1]) - (self.group0()[0] * other.group8()[2])
                    + (self.group0()[1] * other[e1])
                    + (self.group0()[2] * other.group8()[0])
                    + (self.group1()[0] * other.group1()[2])
                    - (self.group1()[0] * other.group6()[2])
                    - (self.group1()[1] * other.group6()[3])
                    - (self.group1()[2] * other.group1()[0])
                    + (self.group1()[2] * other.group6()[0])),
                ((other.group0()[1] * self.group1()[2]) + (self.group0()[0] * other.group8()[1]) - (self.group0()[1] * other.group8()[0]) + (self.group0()[2] * other[e1])
                    - (self.group1()[0] * other.group1()[1])
                    + (self.group1()[0] * other.group6()[1])
                    + (self.group1()[1] * other.group1()[0])
                    - (self.group1()[1] * other.group6()[0])
                    - (self.group1()[2] * other.group6()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group9()[2])
                    - (self.group0()[2] * other.group9()[1])
                    - (self.group1()[0] * other[e45])
                    - (self.group1()[1] * other.group4()[2])
                    + (self.group1()[2] * other.group4()[1])),
                (-(self.group0()[0] * other.group9()[2])
                    + (self.group0()[1] * other.group3()[3])
                    + (self.group0()[2] * other.group9()[0])
                    + (self.group1()[0] * other.group4()[2])
                    - (self.group1()[1] * other[e45])
                    - (self.group1()[2] * other.group4()[0])),
                ((self.group0()[0] * other.group9()[1]) - (self.group0()[1] * other.group9()[0]) + (self.group0()[2] * other.group3()[3]) - (self.group1()[0] * other.group4()[1])
                    + (self.group1()[1] * other.group4()[0])
                    - (self.group1()[2] * other[e45])),
                (-(self.group0()[0] * other.group3()[0])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group3()[2])
                    - (self.group1()[0] * other.group5()[0])
                    - (self.group1()[0] * other.group9()[0])
                    - (self.group1()[1] * other.group5()[1])
                    - (self.group1()[1] * other.group9()[1])
                    - (self.group1()[2] * other.group5()[2])
                    - (self.group1()[2] * other.group9()[2])),
            ]),
            // e1234
            (-(self.group0()[0] * other.group4()[0]) - (self.group0()[1] * other.group4()[1]) - (self.group0()[2] * other.group4()[2])),
        );
    }
}
impl GeometricAntiProduct<Plane> for Line {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       13       21        0
    fn geometric_anti_product(self, other: Plane) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])),
                ((self.group0()[1] * other.group0()[3]) - (self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<RoundPoint> for Line {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       16       30        0
    fn geometric_anti_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from([(self.group0()[0] * other.group0()[3]), (self.group0()[1] * other.group0()[3]), (self.group0()[2] * other.group0()[3])]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                ((self.group0()[0] * other[e2]) - (self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ((self.group0()[1] * other[e2]) + (self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                ((self.group0()[2] * other[e2]) - (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (self.group1()[0] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[3])),
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Scalar> for Line {
    type Output = AntiLine;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        6        0
    fn geometric_anti_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from([(self.group0()[0] * other[scalar]), (self.group0()[1] * other[scalar]), (self.group0()[2] * other[scalar])]),
            // e15, e25, e35
            Simd32x3::from([(self.group1()[0] * other[scalar]), (self.group1()[1] * other[scalar]), (self.group1()[2] * other[scalar])]),
        );
    }
}
impl GeometricAntiProduct<Sphere> for Line {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       16       30        0
    fn geometric_anti_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from([(self.group0()[0] * other[e4315]), (self.group0()[1] * other[e4315]), (self.group0()[2] * other[e4315])]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group1()[0] * other[e4315]),
                (self.group1()[1] * other[e4315]),
                (self.group1()[2] * other[e4315]),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])),
                ((self.group0()[1] * other.group0()[3]) - (self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) - (self.group1()[0] * other[e4315])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0]) - (self.group1()[1] * other[e4315])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) - (self.group1()[2] * other[e4315])),
                (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorEven> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       80       96        0
    fn geometric_anti_product(self, other: VersorEven) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group3()[3]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group3()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])
                    + (self.group1()[0] * other.group3()[3])
                    + (self.group1()[1] * other.group0()[2])
                    - (self.group1()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[3]) + (self.group0()[2] * other.group1()[0])
                    - (self.group1()[0] * other.group0()[2])
                    + (self.group1()[1] * other.group3()[3])
                    + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1])
                    - (self.group1()[1] * other.group0()[0])
                    + (self.group1()[2] * other.group3()[3])),
                (-(self.group0()[0] * other.group3()[0])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group3()[2])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1]) + (self.group1()[0] * other.group0()[3])
                    - (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[1] * other.group3()[2])
                    - (self.group1()[2] * other.group1()[1])
                    + (self.group1()[2] * other.group3()[1])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group2()[3]) + (self.group0()[2] * other.group2()[0])
                    - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[0] * other.group3()[2])
                    + (self.group1()[1] * other.group0()[3])
                    - (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group1()[0])
                    - (self.group1()[2] * other.group3()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) + (self.group0()[2] * other.group2()[3]) + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[0] * other.group3()[1])
                    - (self.group1()[1] * other.group1()[0])
                    + (self.group1()[1] * other.group3()[0])
                    + (self.group1()[2] * other.group0()[3])
                    - (self.group1()[2] * other.group1()[3])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group1()[0] * other.group1()[0])
                    + (self.group1()[0] * other.group3()[0])
                    - (self.group1()[1] * other.group1()[1])
                    + (self.group1()[1] * other.group3()[1])
                    - (self.group1()[2] * other.group1()[2])
                    + (self.group1()[2] * other.group3()[2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group3()[2]) - (self.group0()[2] * other.group3()[1])
                    + (self.group1()[0] * other.group3()[3])
                    + (self.group1()[1] * other.group0()[2])
                    - (self.group1()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group1()[3]) + (self.group0()[2] * other.group3()[0])
                    - (self.group1()[0] * other.group0()[2])
                    + (self.group1()[1] * other.group3()[3])
                    + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group3()[0]) + (self.group0()[2] * other.group1()[3]) + (self.group1()[0] * other.group0()[1])
                    - (self.group1()[1] * other.group0()[0])
                    + (self.group1()[2] * other.group3()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorOdd> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       80       96        0
    fn geometric_anti_product(self, other: VersorOdd) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group2()[3]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group2()[3])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])
                    + (self.group1()[0] * other.group2()[3])
                    + (self.group1()[1] * other.group0()[2])
                    - (self.group1()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[3]) + (self.group0()[2] * other.group1()[0])
                    - (self.group1()[0] * other.group0()[2])
                    + (self.group1()[1] * other.group2()[3])
                    + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1])
                    - (self.group1()[1] * other.group0()[0])
                    + (self.group1()[2] * other.group2()[3])),
                (-(self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group3()[1]) - (self.group0()[2] * other.group3()[2])
                    + (self.group1()[0] * other.group0()[0])
                    + (self.group1()[1] * other.group0()[1])
                    + (self.group1()[2] * other.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])
                    + (self.group1()[0] * other.group0()[3])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group1()[2])
                    + (self.group1()[1] * other.group3()[2])
                    - (self.group1()[2] * other.group1()[1])
                    - (self.group1()[2] * other.group3()[1])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group3()[3]) + (self.group0()[2] * other.group2()[0])
                    - (self.group1()[0] * other.group1()[2])
                    - (self.group1()[0] * other.group3()[2])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group1()[0])
                    + (self.group1()[2] * other.group3()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0])
                    + (self.group0()[2] * other.group3()[3])
                    + (self.group1()[0] * other.group1()[1])
                    + (self.group1()[0] * other.group3()[1])
                    - (self.group1()[1] * other.group1()[0])
                    - (self.group1()[1] * other.group3()[0])
                    + (self.group1()[2] * other.group0()[3])
                    + (self.group1()[2] * other.group1()[3])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group3()[2])
                    - (self.group0()[2] * other.group3()[1])
                    - (self.group1()[0] * other.group2()[3])
                    - (self.group1()[1] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group3()[0])
                    + (self.group1()[0] * other.group0()[2])
                    - (self.group1()[1] * other.group2()[3])
                    - (self.group1()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group3()[0]) + (self.group0()[2] * other.group1()[3]) - (self.group1()[0] * other.group0()[1])
                    + (self.group1()[1] * other.group0()[0])
                    - (self.group1()[2] * other.group2()[3])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[0] * other.group3()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[1] * other.group3()[1])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[2] * other.group3()[2])),
            ]),
        );
    }
}
impl InfixGeometricAntiProduct for Motor {}
impl GeometricAntiProduct<AntiCircleRotor> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       72       88        0
    fn geometric_anti_product(self, other: AntiCircleRotor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[3]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])
                    + (other.group2()[3] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) + (other.group1()[0] * self.group0()[3])
                    - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])
                    + (other.group2()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group1()[0])
                    + (other.group1()[0] * self.group0()[2])
                    + (other.group1()[1] * self.group0()[3])
                    - (other.group1()[2] * self.group0()[0])
                    + (other.group2()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group1()[3])
                    - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group0()[3])
                    + (other.group2()[3] * self.group0()[2])),
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2]) + (other.group1()[3] * self.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group1()[0] * self.group1()[3]) - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group1()[3] * self.group1()[0])
                    + (other.group2()[0] * self.group0()[3])
                    - (other.group2()[1] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[1])
                    + (other.group2()[3] * self.group1()[0])),
                ((other.group1()[0] * self.group1()[2]) + (other.group1()[1] * self.group1()[3]) - (other.group1()[2] * self.group1()[0])
                    + (other.group1()[3] * self.group1()[1])
                    + (other.group2()[0] * self.group0()[2])
                    + (other.group2()[1] * self.group0()[3])
                    - (other.group2()[2] * self.group0()[0])
                    + (other.group2()[3] * self.group1()[1])),
                (-(other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])
                    - (other.group2()[0] * self.group0()[1])
                    + (other.group2()[1] * self.group0()[0])
                    + (other.group2()[2] * self.group0()[3])
                    + (other.group2()[3] * self.group1()[2])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1])
                    + (other.group1()[3] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group1()[3])
                    + (other.group0()[2] * self.group1()[0])
                    + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) - (other.group0()[2] * self.group1()[3]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group1()[0] * self.group1()[0]) - (other.group1()[1] * self.group1()[1]) - (other.group1()[2] * self.group1()[2])
                    + (other.group1()[3] * self.group1()[3])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    + (other.group2()[3] * self.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDipoleInversion> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      104      120        0
    fn geometric_anti_product(self, other: AntiDipoleInversion) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (other.group2()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[3]) - (other.group0()[2] * self.group0()[0]) + (other.group2()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[1])
                    + (other.group0()[1] * self.group0()[0])
                    + (other.group0()[2] * self.group0()[3])
                    + (other.group2()[3] * self.group0()[2])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])
                    + (other.group2()[3] * self.group1()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) + (other.group1()[0] * self.group0()[3])
                    - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])
                    + (other.group2()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group1()[0])
                    + (other.group1()[0] * self.group0()[2])
                    + (other.group1()[1] * self.group0()[3])
                    - (other.group1()[2] * self.group0()[0])
                    + (other.group2()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group1()[3])
                    - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group0()[3])
                    + (other.group2()[3] * self.group1()[2])),
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])
                    + (other.group1()[3] * self.group0()[3])
                    + (other.group2()[3] * self.group1()[3])
                    - (other.group3()[0] * self.group0()[0])
                    - (other.group3()[1] * self.group0()[1])
                    - (other.group3()[2] * self.group0()[2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((other.group1()[0] * self.group1()[3]) - (other.group1()[1] * self.group1()[2]) + (other.group1()[2] * self.group1()[1]) - (other.group1()[3] * self.group1()[0])
                    + (other.group2()[0] * self.group0()[3])
                    - (other.group2()[1] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[1])
                    - (other.group3()[0] * self.group1()[3])
                    + (other.group3()[1] * self.group1()[2])
                    - (other.group3()[2] * self.group1()[1])
                    + (other.group3()[3] * self.group0()[0])),
                ((other.group1()[0] * self.group1()[2]) + (other.group1()[1] * self.group1()[3]) - (other.group1()[2] * self.group1()[0]) - (other.group1()[3] * self.group1()[1])
                    + (other.group2()[0] * self.group0()[2])
                    + (other.group2()[1] * self.group0()[3])
                    - (other.group2()[2] * self.group0()[0])
                    - (other.group3()[0] * self.group1()[2])
                    - (other.group3()[1] * self.group1()[3])
                    + (other.group3()[2] * self.group1()[0])
                    + (other.group3()[3] * self.group0()[1])),
                (-(other.group1()[0] * self.group1()[1]) + (other.group1()[1] * self.group1()[0]) + (other.group1()[2] * self.group1()[3])
                    - (other.group1()[3] * self.group1()[2])
                    - (other.group2()[0] * self.group0()[1])
                    + (other.group2()[1] * self.group0()[0])
                    + (other.group2()[2] * self.group0()[3])
                    + (other.group3()[0] * self.group1()[1])
                    - (other.group3()[1] * self.group1()[0])
                    - (other.group3()[2] * self.group1()[3])
                    + (other.group3()[3] * self.group0()[2])),
                (-(other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    + (other.group3()[0] * self.group1()[0])
                    + (other.group3()[1] * self.group1()[1])
                    + (other.group3()[2] * self.group1()[2])
                    + (other.group3()[3] * self.group0()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (other.group1()[3] * self.group0()[0])
                    + (other.group2()[3] * self.group1()[0])
                    + (other.group3()[0] * self.group0()[3])
                    - (other.group3()[1] * self.group0()[2])
                    + (other.group3()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group1()[0])
                    + (other.group1()[3] * self.group0()[1])
                    + (other.group2()[3] * self.group1()[1])
                    + (other.group3()[0] * self.group0()[2])
                    + (other.group3()[1] * self.group0()[3])
                    - (other.group3()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group0()[2])
                    + (other.group2()[3] * self.group1()[2])
                    - (other.group3()[0] * self.group0()[1])
                    + (other.group3()[1] * self.group0()[0])
                    + (other.group3()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])
                    + (other.group2()[3] * self.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4       24        0
    fn geometric_anti_product(self, other: AntiDualNum) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[2])),
                (other.group0()[0] * self.group1()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[1] * self.group1()[0]),
                (other.group0()[1] * self.group1()[1]),
                (other.group0()[1] * self.group1()[2]),
                (other.group0()[0] * self.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group1()[0] * -1.0),
                (other.group0()[0] * self.group1()[1] * -1.0),
                (other.group0()[0] * self.group1()[2] * -1.0),
                (other.group0()[1] * self.group1()[3]),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiFlatPoint> for Motor {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       12       20        0
    fn geometric_anti_product(self, other: AntiFlatPoint) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) - (other.group0()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[3]) - (other.group0()[2] * self.group0()[0]) - (other.group0()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group0()[3])
                    - (other.group0()[3] * self.group1()[2])),
                (other.group0()[3] * self.group0()[3]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[3] * self.group0()[0]),
                (other.group0()[3] * self.group0()[1]),
                (other.group0()[3] * self.group0()[2]),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group0()[3] * self.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiFlector> for Motor {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       40       48        0
    fn geometric_anti_product(self, other: AntiFlector) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])
                    - (other.group0()[3] * self.group1()[0])
                    - (other.group1()[0] * self.group1()[3])
                    + (other.group1()[1] * self.group1()[2])
                    - (other.group1()[2] * self.group1()[1])
                    + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[3])
                    - (other.group0()[2] * self.group0()[0])
                    - (other.group0()[3] * self.group1()[1])
                    - (other.group1()[0] * self.group1()[2])
                    - (other.group1()[1] * self.group1()[3])
                    + (other.group1()[2] * self.group1()[0])
                    + (other.group1()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group0()[3])
                    - (other.group0()[3] * self.group1()[2])
                    + (other.group1()[0] * self.group1()[1])
                    - (other.group1()[1] * self.group1()[0])
                    - (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group0()[2])),
                ((other.group0()[3] * self.group0()[3]) - (other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                ((other.group0()[3] * self.group0()[0]) + (other.group1()[0] * self.group0()[3]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[3] * self.group0()[1]) + (other.group1()[0] * self.group0()[2]) + (other.group1()[1] * self.group0()[3]) - (other.group1()[2] * self.group0()[0])),
                ((other.group0()[3] * self.group0()[2]) - (other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0]) + (other.group1()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group0()[3] * self.group1()[3])
                    + (other.group1()[0] * self.group1()[0])
                    + (other.group1()[1] * self.group1()[1])
                    + (other.group1()[2] * self.group1()[2])
                    + (other.group1()[3] * self.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiLine> for Motor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       28       36        0
    fn geometric_anti_product(self, other: AntiLine) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[3]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) + (other.group1()[0] * self.group0()[3])
                    - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group1()[0])
                    + (other.group1()[0] * self.group0()[2])
                    + (other.group1()[1] * self.group0()[3])
                    - (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group1()[3])
                    - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiMotor> for Motor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       40       48        0
    fn geometric_anti_product(self, other: AntiMotor) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (other.group0()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[3]) - (other.group0()[2] * self.group0()[0]) + (other.group0()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[1])
                    + (other.group0()[1] * self.group0()[0])
                    + (other.group0()[2] * self.group0()[3])
                    + (other.group0()[3] * self.group0()[2])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])
                    + (other.group0()[3] * self.group0()[3])),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (other.group0()[3] * self.group1()[0])
                    + (other.group1()[0] * self.group0()[3])
                    - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])
                    + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group1()[0])
                    + (other.group0()[3] * self.group1()[1])
                    + (other.group1()[0] * self.group0()[2])
                    + (other.group1()[1] * self.group0()[3])
                    - (other.group1()[2] * self.group0()[0])
                    + (other.group1()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (other.group0()[3] * self.group1()[2])
                    - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group0()[3])
                    + (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])
                    + (other.group0()[3] * self.group1()[3])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])
                    + (other.group1()[3] * self.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiPlane> for Motor {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       20       28        0
    fn geometric_anti_product(self, other: AntiPlane) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1])
                    + (other.group0()[3] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group1()[3])
                    + (other.group0()[2] * self.group1()[0])
                    + (other.group0()[3] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) - (other.group0()[2] * self.group1()[3]) + (other.group0()[3] * self.group0()[2])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[3]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group0()[3])),
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2]) + (other.group0()[3] * self.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiScalar> for Motor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        8        0
    fn geometric_anti_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[0] * other[e12345]),
                (self.group0()[1] * other[e12345]),
                (self.group0()[2] * other[e12345]),
                (self.group0()[3] * other[e12345]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group1()[0] * other[e12345]),
                (self.group1()[1] * other[e12345]),
                (self.group1()[2] * other[e12345]),
                (self.group1()[3] * other[e12345]),
            ]),
        );
    }
}
impl GeometricAntiProduct<Circle> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       64       80        0
    fn geometric_anti_product(self, other: Circle) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[3]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) + (other.group1()[0] * self.group0()[3])
                    - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group1()[0])
                    + (other.group1()[0] * self.group0()[2])
                    + (other.group1()[1] * self.group0()[3])
                    - (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group1()[3])
                    - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])
                    + (other.group1()[3] * self.group0()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((other.group2()[0] * self.group0()[3]) - (other.group2()[1] * self.group0()[2]) + (other.group2()[2] * self.group0()[1]) + (other.group1()[0] * self.group1()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])
                    - (other.group1()[3] * self.group1()[0])),
                ((other.group2()[0] * self.group0()[2]) + (other.group2()[1] * self.group0()[3]) - (other.group2()[2] * self.group0()[0])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group1()[0])
                    - (other.group1()[3] * self.group1()[1])),
                (-(other.group2()[0] * self.group0()[1]) + (other.group2()[1] * self.group0()[0]) + (other.group2()[2] * self.group0()[3])
                    - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group1()[3])
                    - (other.group1()[3] * self.group1()[2])),
                (-(other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group1()[0]) + (other.group1()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<CircleRotor> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       72       88        0
    fn geometric_anti_product(self, other: CircleRotor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[3]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])
                    + (other.group2()[3] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) + (other.group1()[0] * self.group0()[3])
                    - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])
                    + (other.group2()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group1()[0])
                    + (other.group1()[0] * self.group0()[2])
                    + (other.group1()[1] * self.group0()[3])
                    - (other.group1()[2] * self.group0()[0])
                    + (other.group2()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group1()[3])
                    - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group0()[3])
                    + (other.group2()[3] * self.group0()[2])),
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])
                    + (other.group1()[3] * self.group0()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((other.group1()[0] * self.group1()[3]) - (other.group1()[1] * self.group1()[2]) + (other.group1()[2] * self.group1()[1]) - (other.group1()[3] * self.group1()[0])
                    + (other.group2()[0] * self.group0()[3])
                    - (other.group2()[1] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[1])
                    + (other.group2()[3] * self.group1()[0])),
                ((other.group1()[0] * self.group1()[2]) + (other.group1()[1] * self.group1()[3]) - (other.group1()[2] * self.group1()[0]) - (other.group1()[3] * self.group1()[1])
                    + (other.group2()[0] * self.group0()[2])
                    + (other.group2()[1] * self.group0()[3])
                    - (other.group2()[2] * self.group0()[0])
                    + (other.group2()[3] * self.group1()[1])),
                (-(other.group1()[0] * self.group1()[1]) + (other.group1()[1] * self.group1()[0]) + (other.group1()[2] * self.group1()[3])
                    - (other.group1()[3] * self.group1()[2])
                    - (other.group2()[0] * self.group0()[1])
                    + (other.group2()[1] * self.group0()[0])
                    + (other.group2()[2] * self.group0()[3])
                    + (other.group2()[3] * self.group1()[2])),
                (-(other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    + (other.group2()[3] * self.group1()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group1()[0]) + (other.group1()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Dipole> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       64       80        0
    fn geometric_anti_product(self, other: Dipole) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[3]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) + (other.group1()[0] * self.group0()[3])
                    - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group1()[0])
                    + (other.group1()[0] * self.group0()[2])
                    + (other.group1()[1] * self.group0()[3])
                    - (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group1()[3])
                    - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group0()[3])),
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2]) + (other.group1()[3] * self.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group2()[0] * self.group0()[3]) - (other.group2()[1] * self.group0()[2]) + (other.group2()[2] * self.group0()[1]) + (other.group1()[0] * self.group1()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group1()[3] * self.group1()[0])),
                ((other.group2()[0] * self.group0()[2]) + (other.group2()[1] * self.group0()[3]) - (other.group2()[2] * self.group0()[0])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group1()[0])
                    + (other.group1()[3] * self.group1()[1])),
                (-(other.group2()[0] * self.group0()[1]) + (other.group2()[1] * self.group0()[0]) + (other.group2()[2] * self.group0()[3])
                    - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1])
                    + (other.group1()[3] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group1()[3])
                    + (other.group0()[2] * self.group1()[0])
                    + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) - (other.group0()[2] * self.group1()[3]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    + (other.group1()[3] * self.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<DipoleInversion> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      104      120        0
    fn geometric_anti_product(self, other: DipoleInversion) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (other.group2()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[3]) - (other.group0()[2] * self.group0()[0]) + (other.group2()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[1])
                    + (other.group0()[1] * self.group0()[0])
                    + (other.group0()[2] * self.group0()[3])
                    + (other.group2()[3] * self.group0()[2])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])
                    + (other.group2()[3] * self.group1()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) + (other.group1()[0] * self.group0()[3])
                    - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])
                    + (other.group2()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group1()[0])
                    + (other.group1()[0] * self.group0()[2])
                    + (other.group1()[1] * self.group0()[3])
                    - (other.group1()[2] * self.group0()[0])
                    + (other.group2()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group1()[3])
                    - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group0()[3])
                    + (other.group2()[3] * self.group1()[2])),
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2]) + (other.group1()[3] * self.group0()[3])
                    - (other.group2()[3] * self.group1()[3])
                    - (other.group3()[0] * self.group0()[0])
                    - (other.group3()[1] * self.group0()[1])
                    - (other.group3()[2] * self.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group1()[0] * self.group1()[3]) - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group1()[3] * self.group1()[0])
                    + (other.group2()[0] * self.group0()[3])
                    - (other.group2()[1] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[1])
                    + (other.group3()[0] * self.group1()[3])
                    - (other.group3()[1] * self.group1()[2])
                    + (other.group3()[2] * self.group1()[1])
                    + (other.group3()[3] * self.group0()[0])),
                ((other.group1()[0] * self.group1()[2]) + (other.group1()[1] * self.group1()[3]) - (other.group1()[2] * self.group1()[0])
                    + (other.group1()[3] * self.group1()[1])
                    + (other.group2()[0] * self.group0()[2])
                    + (other.group2()[1] * self.group0()[3])
                    - (other.group2()[2] * self.group0()[0])
                    + (other.group3()[0] * self.group1()[2])
                    + (other.group3()[1] * self.group1()[3])
                    - (other.group3()[2] * self.group1()[0])
                    + (other.group3()[3] * self.group0()[1])),
                (-(other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])
                    - (other.group2()[0] * self.group0()[1])
                    + (other.group2()[1] * self.group0()[0])
                    + (other.group2()[2] * self.group0()[3])
                    - (other.group3()[0] * self.group1()[1])
                    + (other.group3()[1] * self.group1()[0])
                    + (other.group3()[2] * self.group1()[3])
                    + (other.group3()[3] * self.group0()[2])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])
                    + (other.group2()[3] * self.group0()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1])
                    + (other.group1()[3] * self.group0()[0])
                    - (other.group2()[3] * self.group1()[0])
                    + (other.group3()[0] * self.group0()[3])
                    - (other.group3()[1] * self.group0()[2])
                    + (other.group3()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group1()[3])
                    + (other.group0()[2] * self.group1()[0])
                    + (other.group1()[3] * self.group0()[1])
                    - (other.group2()[3] * self.group1()[1])
                    + (other.group3()[0] * self.group0()[2])
                    + (other.group3()[1] * self.group0()[3])
                    - (other.group3()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) - (other.group0()[2] * self.group1()[3]) + (other.group1()[3] * self.group0()[2])
                    - (other.group2()[3] * self.group1()[2])
                    - (other.group3()[0] * self.group0()[1])
                    + (other.group3()[1] * self.group0()[0])
                    + (other.group3()[2] * self.group0()[3])),
                (-(other.group1()[0] * self.group1()[0]) - (other.group1()[1] * self.group1()[1]) - (other.group1()[2] * self.group1()[2])
                    + (other.group1()[3] * self.group1()[3])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    - (other.group3()[0] * self.group1()[0])
                    - (other.group3()[1] * self.group1()[1])
                    - (other.group3()[2] * self.group1()[2])
                    + (other.group3()[3] * self.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<DualNum> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        4       20        0
    fn geometric_anti_product(self, other: DualNum) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                ((other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[2])),
                (other.group0()[0] * self.group1()[3]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other.group0()[1] * self.group1()[0]),
                (other.group0()[1] * self.group1()[1]),
                (other.group0()[1] * self.group1()[2]),
                (other.group0()[1] * self.group1()[3]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[0] * self.group1()[0]),
                (other.group0()[0] * self.group1()[1]),
                (other.group0()[0] * self.group1()[2]),
                (other.group0()[0] * self.group0()[3]),
            ]),
        );
    }
}
impl GeometricAntiProduct<FlatPoint> for Motor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       12       20        0
    fn geometric_anti_product(self, other: FlatPoint) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (other.group0()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[3]) - (other.group0()[2] * self.group0()[0]) + (other.group0()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group0()[1])
                    + (other.group0()[1] * self.group0()[0])
                    + (other.group0()[2] * self.group0()[3])
                    + (other.group0()[3] * self.group1()[2])),
                (other.group0()[3] * self.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[3] * self.group0()[0]),
                (other.group0()[3] * self.group0()[1]),
                (other.group0()[3] * self.group0()[2]),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])
                    + (other.group0()[3] * self.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Flector> for Motor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       40       48        0
    fn geometric_anti_product(self, other: Flector) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group0()[2])
                    + (other.group0()[2] * self.group0()[1])
                    + (other.group0()[3] * self.group1()[0])
                    + (other.group1()[0] * self.group1()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[3]) - (other.group0()[2] * self.group0()[0])
                    + (other.group0()[3] * self.group1()[1])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group1()[0])
                    + (other.group1()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[1])
                    + (other.group0()[1] * self.group0()[0])
                    + (other.group0()[2] * self.group0()[3])
                    + (other.group0()[3] * self.group1()[2])
                    - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group0()[2])),
                ((other.group0()[3] * self.group0()[3]) - (other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((other.group0()[3] * self.group0()[0]) + (other.group1()[0] * self.group0()[3]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[3] * self.group0()[1]) + (other.group1()[0] * self.group0()[2]) + (other.group1()[1] * self.group0()[3]) - (other.group1()[2] * self.group0()[0])),
                ((other.group0()[3] * self.group0()[2]) - (other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0]) + (other.group1()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])
                    + (other.group0()[3] * self.group1()[3])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    + (other.group1()[3] * self.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Line> for Motor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       28       36        0
    fn geometric_anti_product(self, other: Line) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[3]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) + (other.group1()[0] * self.group0()[3])
                    - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group1()[0])
                    + (other.group1()[0] * self.group0()[2])
                    + (other.group1()[1] * self.group0()[3])
                    - (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group1()[3])
                    - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Motor> for Motor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       40       48        0
    fn geometric_anti_product(self, other: Motor) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (other.group0()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group0()[3]) - (other.group0()[2] * self.group0()[0]) + (other.group0()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[1])
                    + (other.group0()[1] * self.group0()[0])
                    + (other.group0()[2] * self.group0()[3])
                    + (other.group0()[3] * self.group0()[2])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])
                    + (other.group0()[3] * self.group0()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (other.group0()[3] * self.group1()[0])
                    + (other.group1()[0] * self.group0()[3])
                    - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])
                    + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group1()[0])
                    + (other.group0()[3] * self.group1()[1])
                    + (other.group1()[0] * self.group0()[2])
                    + (other.group1()[1] * self.group0()[3])
                    - (other.group1()[2] * self.group0()[0])
                    + (other.group1()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (other.group0()[3] * self.group1()[2])
                    - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group0()[3])
                    + (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])
                    + (other.group0()[3] * self.group1()[3])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])
                    + (other.group1()[3] * self.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<MultiVector> for Motor {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      224      256        0
    fn geometric_anti_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((other.group0()[0] * self.group0()[3])
                    - (other.group4()[0] * self.group1()[0])
                    - (other.group4()[1] * self.group1()[1])
                    - (other.group4()[2] * self.group1()[2])
                    - (other.group5()[0] * self.group0()[0])
                    - (other.group5()[1] * self.group0()[1])
                    - (other.group5()[2] * self.group0()[2])
                    + (self.group1()[3] * other[e45])),
                ((other.group0()[1] * self.group0()[3])
                    - (other.group7()[0] * self.group1()[0])
                    - (other.group7()[1] * self.group1()[1])
                    - (other.group7()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group6()[0])
                    - (self.group0()[1] * other.group6()[1])
                    - (self.group0()[2] * other.group6()[2])
                    + (self.group1()[3] * other.group1()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group7()[0] * self.group1()[3]) - (other.group7()[1] * self.group1()[2])
                    + (other.group7()[2] * self.group1()[1])
                    + (self.group0()[0] * other.group6()[3])
                    + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])
                    + (self.group0()[3] * other.group1()[0])
                    + (self.group1()[0] * other.group1()[3])),
                ((other.group7()[0] * self.group1()[2]) + (other.group7()[1] * self.group1()[3]) - (other.group7()[2] * self.group1()[0]) - (self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group6()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group0()[3] * other.group1()[1])
                    + (self.group1()[1] * other.group1()[3])),
                (-(other.group7()[0] * self.group1()[1])
                    + (other.group7()[1] * self.group1()[0])
                    + (other.group7()[2] * self.group1()[3])
                    + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])
                    + (self.group0()[2] * other.group6()[3])
                    + (self.group0()[3] * other.group1()[2])
                    + (self.group1()[2] * other.group1()[3])),
                (-(other.group7()[0] * self.group0()[0]) - (other.group7()[1] * self.group0()[1]) - (other.group7()[2] * self.group0()[2])
                    + (self.group0()[3] * other.group1()[3])),
            ]),
            // e5
            ((other.group0()[1] * self.group1()[3]) - (other.group8()[0] * self.group0()[0]) - (other.group8()[1] * self.group0()[1]) - (other.group8()[2] * self.group0()[2])
                + (self.group0()[3] * other[e1])
                + (self.group1()[0] * other.group1()[0])
                - (self.group1()[0] * other.group6()[0])
                + (self.group1()[1] * other.group1()[1])
                - (self.group1()[1] * other.group6()[1])
                + (self.group1()[2] * other.group1()[2])
                - (self.group1()[2] * other.group6()[2])
                - (self.group1()[3] * other.group6()[3])),
            // e15, e25, e35, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group5()[0] * self.group1()[3]) - (other.group5()[1] * self.group1()[2])
                    + (other.group5()[2] * self.group1()[1])
                    + (self.group0()[0] * other.group9()[3])
                    + (self.group0()[1] * other.group3()[2])
                    - (self.group0()[2] * other.group3()[1])
                    + (self.group0()[3] * other.group3()[0])
                    + (self.group1()[0] * other.group3()[3])
                    + (self.group1()[1] * other.group9()[2])
                    - (self.group1()[2] * other.group9()[1])
                    + (self.group1()[3] * other.group9()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group5()[0] * self.group1()[2]) + (other.group5()[1] * self.group1()[3])
                    - (other.group5()[2] * self.group1()[0])
                    - (self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group9()[3])
                    + (self.group0()[2] * other.group3()[0])
                    + (self.group0()[3] * other.group3()[1])
                    - (self.group1()[0] * other.group9()[2])
                    + (self.group1()[1] * other.group3()[3])
                    + (self.group1()[2] * other.group9()[0])
                    + (self.group1()[3] * other.group9()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group5()[0] * self.group1()[1])
                    + (other.group5()[1] * self.group1()[0])
                    + (other.group5()[2] * self.group1()[3])
                    + (self.group0()[0] * other.group3()[1])
                    - (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group9()[3])
                    + (self.group0()[3] * other.group3()[2])
                    + (self.group1()[0] * other.group9()[1])
                    - (self.group1()[1] * other.group9()[0])
                    + (self.group1()[2] * other.group3()[3])
                    + (self.group1()[3] * other.group9()[2])),
                ((other.group4()[0] * self.group1()[0]) + (other.group4()[1] * self.group1()[1]) + (other.group4()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group9()[0])
                    - (self.group0()[1] * other.group9()[1])
                    - (self.group0()[2] * other.group9()[2])
                    + (self.group0()[3] * other.group3()[3])
                    - (self.group1()[3] * other[e45])),
            ]),
            // e41, e42, e43
            Simd32x3::from([
                ((other.group4()[0] * self.group0()[3]) - (other.group4()[1] * self.group0()[2]) + (other.group4()[2] * self.group0()[1]) + (self.group0()[0] * other[e45])),
                ((other.group4()[0] * self.group0()[2]) + (other.group4()[1] * self.group0()[3]) - (other.group4()[2] * self.group0()[0]) + (self.group0()[1] * other[e45])),
                (-(other.group4()[0] * self.group0()[1]) + (other.group4()[1] * self.group0()[0]) + (other.group4()[2] * self.group0()[3]) + (self.group0()[2] * other[e45])),
            ]),
            // e23, e31, e12
            Simd32x3::from([
                ((other.group0()[0] * self.group0()[0]) + (other.group4()[0] * self.group1()[3]) - (other.group4()[1] * self.group1()[2])
                    + (other.group4()[2] * self.group1()[1])
                    + (other.group5()[0] * self.group0()[3])
                    - (other.group5()[1] * self.group0()[2])
                    + (other.group5()[2] * self.group0()[1])
                    + (self.group1()[0] * other[e45])),
                ((other.group0()[0] * self.group0()[1]) + (other.group4()[0] * self.group1()[2]) + (other.group4()[1] * self.group1()[3]) - (other.group4()[2] * self.group1()[0])
                    + (other.group5()[0] * self.group0()[2])
                    + (other.group5()[1] * self.group0()[3])
                    - (other.group5()[2] * self.group0()[0])
                    + (self.group1()[1] * other[e45])),
                ((other.group0()[0] * self.group0()[2]) - (other.group4()[0] * self.group1()[1]) + (other.group4()[1] * self.group1()[0]) + (other.group4()[2] * self.group1()[3])
                    - (other.group5()[0] * self.group0()[1])
                    + (other.group5()[1] * self.group0()[0])
                    + (other.group5()[2] * self.group0()[3])
                    + (self.group1()[2] * other[e45])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[0]) + (other.group7()[0] * self.group1()[3]) - (other.group7()[1] * self.group1()[2])
                    + (other.group7()[2] * self.group1()[1])
                    + (self.group0()[1] * other.group6()[2])
                    - (self.group0()[2] * other.group6()[1])
                    + (self.group0()[3] * other.group6()[0])
                    + (self.group1()[0] * other.group1()[3])),
                ((other.group0()[1] * self.group0()[1]) + (other.group7()[0] * self.group1()[2]) + (other.group7()[1] * self.group1()[3])
                    - (other.group7()[2] * self.group1()[0])
                    - (self.group0()[0] * other.group6()[2])
                    + (self.group0()[2] * other.group6()[0])
                    + (self.group0()[3] * other.group6()[1])
                    + (self.group1()[1] * other.group1()[3])),
                ((other.group0()[1] * self.group0()[2]) - (other.group7()[0] * self.group1()[1])
                    + (other.group7()[1] * self.group1()[0])
                    + (other.group7()[2] * self.group1()[3])
                    + (self.group0()[0] * other.group6()[1])
                    - (self.group0()[1] * other.group6()[0])
                    + (self.group0()[3] * other.group6()[2])
                    + (self.group1()[2] * other.group1()[3])),
                (-(other.group7()[0] * self.group1()[0])
                    - (other.group7()[1] * self.group1()[1])
                    - (other.group7()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    + (self.group0()[3] * other.group6()[3])
                    + (self.group1()[3] * other.group1()[3])),
            ]),
            // e423, e431, e412
            Simd32x3::from([
                ((other.group7()[0] * self.group0()[3]) - (other.group7()[1] * self.group0()[2]) + (other.group7()[2] * self.group0()[1]) + (self.group0()[0] * other.group1()[3])),
                ((other.group7()[0] * self.group0()[2]) + (other.group7()[1] * self.group0()[3]) - (other.group7()[2] * self.group0()[0]) + (self.group0()[1] * other.group1()[3])),
                (-(other.group7()[0] * self.group0()[1])
                    + (other.group7()[1] * self.group0()[0])
                    + (other.group7()[2] * self.group0()[3])
                    + (self.group0()[2] * other.group1()[3])),
            ]),
            // e235, e315, e125
            Simd32x3::from([
                ((other.group0()[1] * self.group1()[0]) + (other.group8()[0] * self.group0()[3]) - (other.group8()[1] * self.group0()[2])
                    + (other.group8()[2] * self.group0()[1])
                    + (self.group0()[0] * other[e1])
                    - (self.group1()[0] * other.group6()[3])
                    - (self.group1()[1] * other.group1()[2])
                    + (self.group1()[1] * other.group6()[2])
                    + (self.group1()[2] * other.group1()[1])
                    - (self.group1()[2] * other.group6()[1])
                    - (self.group1()[3] * other.group1()[0])
                    + (self.group1()[3] * other.group6()[0])),
                ((other.group0()[1] * self.group1()[1]) + (other.group8()[0] * self.group0()[2]) + (other.group8()[1] * self.group0()[3]) - (other.group8()[2] * self.group0()[0])
                    + (self.group0()[1] * other[e1])
                    + (self.group1()[0] * other.group1()[2])
                    - (self.group1()[0] * other.group6()[2])
                    - (self.group1()[1] * other.group6()[3])
                    - (self.group1()[2] * other.group1()[0])
                    + (self.group1()[2] * other.group6()[0])
                    - (self.group1()[3] * other.group1()[1])
                    + (self.group1()[3] * other.group6()[1])),
                ((other.group0()[1] * self.group1()[2]) - (other.group8()[0] * self.group0()[1])
                    + (other.group8()[1] * self.group0()[0])
                    + (other.group8()[2] * self.group0()[3])
                    + (self.group0()[2] * other[e1])
                    - (self.group1()[0] * other.group1()[1])
                    + (self.group1()[0] * other.group6()[1])
                    + (self.group1()[1] * other.group1()[0])
                    - (self.group1()[1] * other.group6()[0])
                    - (self.group1()[2] * other.group6()[3])
                    - (self.group1()[3] * other.group1()[2])
                    + (self.group1()[3] * other.group6()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group4()[0] * self.group1()[3]) + (other.group4()[1] * self.group1()[2]) - (other.group4()[2] * self.group1()[1])
                    + (self.group0()[0] * other.group3()[3])
                    + (self.group0()[1] * other.group9()[2])
                    - (self.group0()[2] * other.group9()[1])
                    + (self.group0()[3] * other.group9()[0])
                    - (self.group1()[0] * other[e45])),
                (-(other.group4()[0] * self.group1()[2]) - (other.group4()[1] * self.group1()[3]) + (other.group4()[2] * self.group1()[0])
                    - (self.group0()[0] * other.group9()[2])
                    + (self.group0()[1] * other.group3()[3])
                    + (self.group0()[2] * other.group9()[0])
                    + (self.group0()[3] * other.group9()[1])
                    - (self.group1()[1] * other[e45])),
                ((other.group4()[0] * self.group1()[1]) - (other.group4()[1] * self.group1()[0]) - (other.group4()[2] * self.group1()[3]) + (self.group0()[0] * other.group9()[1])
                    - (self.group0()[1] * other.group9()[0])
                    + (self.group0()[2] * other.group3()[3])
                    + (self.group0()[3] * other.group9()[2])
                    - (self.group1()[2] * other[e45])),
                ((other.group0()[0] * self.group1()[3])
                    - (other.group5()[0] * self.group1()[0])
                    - (other.group5()[1] * self.group1()[1])
                    - (other.group5()[2] * self.group1()[2])
                    - (self.group0()[0] * other.group3()[0])
                    - (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group3()[2])
                    + (self.group0()[3] * other.group9()[3])
                    - (self.group1()[0] * other.group9()[0])
                    - (self.group1()[1] * other.group9()[1])
                    - (self.group1()[2] * other.group9()[2])
                    + (self.group1()[3] * other.group3()[3])),
            ]),
            // e1234
            (-(other.group4()[0] * self.group0()[0]) - (other.group4()[1] * self.group0()[1]) - (other.group4()[2] * self.group0()[2]) + (self.group0()[3] * other[e45])),
        );
    }
}
impl GeometricAntiProduct<Plane> for Motor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       20       28        0
    fn geometric_anti_product(self, other: Plane) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1]) + (self.group1()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) - (self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0]) + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0]) + (self.group1()[3] * other.group0()[2])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (self.group0()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group0()[3] * other.group0()[2])),
                ((self.group0()[3] * other.group0()[3]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<RoundPoint> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       24       40        0
    fn geometric_anti_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (self.group1()[3] * other.group0()[3]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group1()[3] * other.group0()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[0] * other[e2]) - (self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1]) - (self.group1()[3] * other.group0()[0])),
                ((self.group0()[1] * other[e2]) + (self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0]) - (self.group1()[3] * other.group0()[1])),
                ((self.group0()[2] * other[e2]) - (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0]) - (self.group1()[3] * other.group0()[2])),
                ((self.group0()[3] * other[e2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (self.group0()[3] * other.group0()[0]) + (self.group1()[0] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[2])
                    + (self.group0()[2] * other.group0()[0])
                    + (self.group0()[3] * other.group0()[1])
                    + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group0()[3] * other.group0()[2]) + (self.group1()[2] * other.group0()[3])),
                (self.group0()[3] * other.group0()[3]),
            ]),
        );
    }
}
impl GeometricAntiProduct<Scalar> for Motor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        8        0
    fn geometric_anti_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self.group0()[0] * other[scalar]),
                (self.group0()[1] * other[scalar]),
                (self.group0()[2] * other[scalar]),
                (self.group0()[3] * other[scalar]),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self.group1()[0] * other[scalar]),
                (self.group1()[1] * other[scalar]),
                (self.group1()[2] * other[scalar]),
                (self.group1()[3] * other[scalar]),
            ]),
        );
    }
}
impl GeometricAntiProduct<Sphere> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       24       40        0
    fn geometric_anti_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other[e4315]),
                (self.group0()[1] * other[e4315]),
                (self.group0()[2] * other[e4315]),
                (self.group1()[3] * other[e4315]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group1()[0] * other[e4315]),
                (self.group1()[1] * other[e4315]),
                (self.group1()[2] * other[e4315]),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2]) - (self.group1()[3] * other[e4315])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1]) + (self.group1()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) - (self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0]) + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0]) + (self.group1()[3] * other.group0()[2])),
                (self.group0()[3] * other[e4315]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (self.group0()[3] * other.group0()[0]) - (self.group1()[0] * other[e4315])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0]) + (self.group0()[3] * other.group0()[1]) - (self.group1()[1] * other[e4315])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group0()[3] * other.group0()[2]) - (self.group1()[2] * other[e4315])),
                ((self.group0()[3] * other.group0()[3]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorEven> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      112      128        0
    fn geometric_anti_product(self, other: VersorEven) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (self.group0()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[2])
                    + (self.group0()[1] * other.group3()[3])
                    + (self.group0()[2] * other.group0()[0])
                    + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group3()[3]) + (self.group0()[3] * other.group0()[2])),
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])
                    + (self.group0()[3] * other.group0()[3])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])
                    + (self.group1()[3] * other.group3()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])
                    + (self.group0()[3] * other.group1()[0])
                    + (self.group1()[0] * other.group3()[3])
                    + (self.group1()[1] * other.group0()[2])
                    - (self.group1()[2] * other.group0()[1])
                    + (self.group1()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group0()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group0()[3] * other.group1()[1])
                    - (self.group1()[0] * other.group0()[2])
                    + (self.group1()[1] * other.group3()[3])
                    + (self.group1()[2] * other.group0()[0])
                    + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])
                    + (self.group0()[2] * other.group0()[3])
                    + (self.group0()[3] * other.group1()[2])
                    + (self.group1()[0] * other.group0()[1])
                    - (self.group1()[1] * other.group0()[0])
                    + (self.group1()[2] * other.group3()[3])
                    + (self.group1()[3] * other.group0()[2])),
                (-(self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group3()[1]) - (self.group0()[2] * other.group3()[2])
                    + (self.group0()[3] * other.group1()[3])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])
                    + (self.group1()[3] * other.group3()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])
                    + (self.group0()[3] * other.group2()[0])
                    + (self.group1()[0] * other.group0()[3])
                    - (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[1] * other.group3()[2])
                    - (self.group1()[2] * other.group1()[1])
                    + (self.group1()[2] * other.group3()[1])
                    + (self.group1()[3] * other.group1()[0])
                    - (self.group1()[3] * other.group3()[0])),
                (-(self.group0()[0] * other.group2()[2])
                    + (self.group0()[1] * other.group2()[3])
                    + (self.group0()[2] * other.group2()[0])
                    + (self.group0()[3] * other.group2()[1])
                    - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[0] * other.group3()[2])
                    + (self.group1()[1] * other.group0()[3])
                    - (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group1()[0])
                    - (self.group1()[2] * other.group3()[0])
                    + (self.group1()[3] * other.group1()[1])
                    - (self.group1()[3] * other.group3()[1])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0])
                    + (self.group0()[2] * other.group2()[3])
                    + (self.group0()[3] * other.group2()[2])
                    + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[0] * other.group3()[1])
                    - (self.group1()[1] * other.group1()[0])
                    + (self.group1()[1] * other.group3()[0])
                    + (self.group1()[2] * other.group0()[3])
                    - (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])
                    - (self.group1()[3] * other.group3()[2])),
                (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])
                    + (self.group0()[3] * other.group2()[3])
                    - (self.group1()[0] * other.group1()[0])
                    + (self.group1()[0] * other.group3()[0])
                    - (self.group1()[1] * other.group1()[1])
                    + (self.group1()[1] * other.group3()[1])
                    - (self.group1()[2] * other.group1()[2])
                    + (self.group1()[2] * other.group3()[2])
                    + (self.group1()[3] * other.group0()[3])
                    - (self.group1()[3] * other.group1()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group3()[2]) - (self.group0()[2] * other.group3()[1])
                    + (self.group0()[3] * other.group3()[0])
                    + (self.group1()[0] * other.group3()[3])
                    + (self.group1()[1] * other.group0()[2])
                    - (self.group1()[2] * other.group0()[1])
                    + (self.group1()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group3()[0])
                    + (self.group0()[3] * other.group3()[1])
                    - (self.group1()[0] * other.group0()[2])
                    + (self.group1()[1] * other.group3()[3])
                    + (self.group1()[2] * other.group0()[0])
                    + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group0()[3] * other.group3()[2])
                    + (self.group1()[0] * other.group0()[1])
                    - (self.group1()[1] * other.group0()[0])
                    + (self.group1()[2] * other.group3()[3])
                    + (self.group1()[3] * other.group0()[2])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group0()[3] * other.group3()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorOdd> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      112      128        0
    fn geometric_anti_product(self, other: VersorOdd) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) + (self.group0()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[2])
                    + (self.group0()[1] * other.group2()[3])
                    + (self.group0()[2] * other.group0()[0])
                    + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group2()[3]) + (self.group0()[3] * other.group0()[2])),
                (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1]) - (self.group0()[2] * other.group1()[2])
                    + (self.group0()[3] * other.group0()[3])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])
                    + (self.group1()[3] * other.group2()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])
                    + (self.group0()[3] * other.group1()[0])
                    + (self.group1()[0] * other.group2()[3])
                    + (self.group1()[1] * other.group0()[2])
                    - (self.group1()[2] * other.group0()[1])
                    + (self.group1()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group0()[3])
                    + (self.group0()[2] * other.group1()[0])
                    + (self.group0()[3] * other.group1()[1])
                    - (self.group1()[0] * other.group0()[2])
                    + (self.group1()[1] * other.group2()[3])
                    + (self.group1()[2] * other.group0()[0])
                    + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])
                    + (self.group0()[2] * other.group0()[3])
                    + (self.group0()[3] * other.group1()[2])
                    + (self.group1()[0] * other.group0()[1])
                    - (self.group1()[1] * other.group0()[0])
                    + (self.group1()[2] * other.group2()[3])
                    + (self.group1()[3] * other.group0()[2])),
                (-(self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group3()[1]) - (self.group0()[2] * other.group3()[2])
                    + (self.group0()[3] * other.group1()[3])
                    + (self.group1()[0] * other.group0()[0])
                    + (self.group1()[1] * other.group0()[1])
                    + (self.group1()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group2()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])
                    + (self.group0()[3] * other.group2()[0])
                    + (self.group1()[0] * other.group0()[3])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group1()[2])
                    + (self.group1()[1] * other.group3()[2])
                    - (self.group1()[2] * other.group1()[1])
                    - (self.group1()[2] * other.group3()[1])
                    + (self.group1()[3] * other.group1()[0])
                    + (self.group1()[3] * other.group3()[0])),
                (-(self.group0()[0] * other.group2()[2])
                    + (self.group0()[1] * other.group3()[3])
                    + (self.group0()[2] * other.group2()[0])
                    + (self.group0()[3] * other.group2()[1])
                    - (self.group1()[0] * other.group1()[2])
                    - (self.group1()[0] * other.group3()[2])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group1()[0])
                    + (self.group1()[2] * other.group3()[0])
                    + (self.group1()[3] * other.group1()[1])
                    + (self.group1()[3] * other.group3()[1])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0])
                    + (self.group0()[2] * other.group3()[3])
                    + (self.group0()[3] * other.group2()[2])
                    + (self.group1()[0] * other.group1()[1])
                    + (self.group1()[0] * other.group3()[1])
                    - (self.group1()[1] * other.group1()[0])
                    - (self.group1()[1] * other.group3()[0])
                    + (self.group1()[2] * other.group0()[3])
                    + (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group1()[2])
                    + (self.group1()[3] * other.group3()[2])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (self.group0()[3] * other.group2()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group3()[2]) - (self.group0()[2] * other.group3()[1]) + (self.group0()[3] * other.group3()[0])
                    - (self.group1()[0] * other.group2()[3])
                    - (self.group1()[1] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[1])
                    - (self.group1()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group3()[0])
                    + (self.group0()[3] * other.group3()[1])
                    + (self.group1()[0] * other.group0()[2])
                    - (self.group1()[1] * other.group2()[3])
                    - (self.group1()[2] * other.group0()[0])
                    - (self.group1()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group3()[0]) + (self.group0()[2] * other.group1()[3]) + (self.group0()[3] * other.group3()[2])
                    - (self.group1()[0] * other.group0()[1])
                    + (self.group1()[1] * other.group0()[0])
                    - (self.group1()[2] * other.group2()[3])
                    - (self.group1()[3] * other.group0()[2])),
                (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])
                    + (self.group0()[3] * other.group3()[3])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[0] * other.group3()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[1] * other.group3()[1])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[2] * other.group3()[2])
                    + (self.group1()[3] * other.group0()[3])
                    + (self.group1()[3] * other.group1()[3])),
            ]),
        );
    }
}
impl InfixGeometricAntiProduct for MultiVector {}
impl GeometricAntiProduct<AntiCircleRotor> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      320      352        0
    fn geometric_anti_product(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((self.group0()[1] * other.group2()[3])
                    - (other.group0()[0] * self.group8()[0])
                    - (other.group0()[1] * self.group8()[1])
                    - (other.group0()[2] * self.group8()[2])
                    - (self.group7()[0] * other.group2()[0])
                    - (self.group7()[1] * other.group2()[1])
                    - (self.group7()[2] * other.group2()[2])
                    - (other.group1()[0] * self.group6()[0])
                    - (other.group1()[1] * self.group6()[1])
                    - (other.group1()[2] * self.group6()[2])
                    - (other.group1()[3] * self.group6()[3])),
                (-(self.group0()[0] * other.group2()[3])
                    + (other.group0()[0] * self.group3()[0])
                    + (other.group0()[1] * self.group3()[1])
                    + (other.group0()[2] * self.group3()[2])
                    + (self.group4()[0] * other.group2()[0])
                    + (self.group4()[1] * other.group2()[1])
                    + (self.group4()[2] * other.group2()[2])
                    + (self.group5()[0] * other.group1()[0])
                    + (self.group5()[1] * other.group1()[1])
                    + (self.group5()[2] * other.group1()[2])
                    - (other.group1()[3] * self.group3()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[0] * self.group9()[3]) + (other.group0()[1] * self.group3()[2]) - (other.group0()[2] * self.group3()[1])
                    + (self.group4()[1] * other.group2()[2])
                    - (self.group4()[2] * other.group2()[1])
                    + (self.group5()[0] * other.group1()[3])
                    + (other.group1()[0] * self.group3()[3])
                    - (other.group1()[1] * self.group9()[2])
                    + (other.group1()[2] * self.group9()[1])
                    + (other.group2()[0] * self[e45])
                    + (other.group2()[3] * self.group9()[0])),
                (-(other.group0()[0] * self.group3()[2]) - (other.group0()[1] * self.group9()[3]) + (other.group0()[2] * self.group3()[0])
                    - (self.group4()[0] * other.group2()[2])
                    + (self.group4()[2] * other.group2()[0])
                    + (self.group5()[1] * other.group1()[3])
                    + (other.group1()[0] * self.group9()[2])
                    + (other.group1()[1] * self.group3()[3])
                    - (other.group1()[2] * self.group9()[0])
                    + (other.group2()[1] * self[e45])
                    + (other.group2()[3] * self.group9()[1])),
                ((other.group0()[0] * self.group3()[1]) - (other.group0()[1] * self.group3()[0]) - (other.group0()[2] * self.group9()[3]) + (self.group4()[0] * other.group2()[1])
                    - (self.group4()[1] * other.group2()[0])
                    + (self.group5()[2] * other.group1()[3])
                    - (other.group1()[0] * self.group9()[1])
                    + (other.group1()[1] * self.group9()[0])
                    + (other.group1()[2] * self.group3()[3])
                    + (other.group2()[2] * self[e45])
                    + (other.group2()[3] * self.group9()[2])),
                ((other.group0()[0] * self.group5()[0])
                    + (other.group0()[0] * self.group9()[0])
                    + (other.group0()[1] * self.group5()[1])
                    + (other.group0()[1] * self.group9()[1])
                    + (other.group0()[2] * self.group5()[2])
                    + (other.group0()[2] * self.group9()[2])
                    + (self.group4()[0] * other.group1()[0])
                    + (self.group4()[1] * other.group1()[1])
                    + (self.group4()[2] * other.group1()[2])
                    + (other.group1()[3] * self[e45])
                    - (other.group2()[3] * self[e45])),
            ]),
            // e5
            ((self.group5()[0] * other.group2()[0])
                + (self.group5()[1] * other.group2()[1])
                + (self.group5()[2] * other.group2()[2])
                + (other.group1()[0] * self.group3()[0])
                + (other.group1()[1] * self.group3()[1])
                + (other.group1()[2] * self.group3()[2])
                - (other.group1()[3] * self.group9()[3])
                - (other.group2()[0] * self.group9()[0])
                - (other.group2()[1] * self.group9()[1])
                - (other.group2()[2] * self.group9()[2])
                - (other.group2()[3] * self.group9()[3])),
            // e15, e25, e35, e45
            Simd32x4::from([
                ((self.group0()[1] * other.group2()[0]) + (self.group8()[0] * other.group1()[3]) + (self.group8()[0] * other.group2()[3]) + (self.group8()[1] * other.group1()[2])
                    - (self.group8()[2] * other.group1()[1])
                    + (other.group1()[0] * self[e1])
                    + (other.group2()[0] * self.group6()[3])
                    - (other.group2()[1] * self.group1()[2])
                    - (other.group2()[1] * self.group6()[2])
                    + (other.group2()[2] * self.group1()[1])
                    + (other.group2()[2] * self.group6()[1])),
                ((self.group0()[1] * other.group2()[1]) - (self.group8()[0] * other.group1()[2])
                    + (self.group8()[1] * other.group1()[3])
                    + (self.group8()[1] * other.group2()[3])
                    + (self.group8()[2] * other.group1()[0])
                    + (other.group1()[1] * self[e1])
                    + (other.group2()[0] * self.group1()[2])
                    + (other.group2()[0] * self.group6()[2])
                    + (other.group2()[1] * self.group6()[3])
                    - (other.group2()[2] * self.group1()[0])
                    - (other.group2()[2] * self.group6()[0])),
                ((self.group0()[1] * other.group2()[2]) + (self.group8()[0] * other.group1()[1]) - (self.group8()[1] * other.group1()[0])
                    + (self.group8()[2] * other.group1()[3])
                    + (self.group8()[2] * other.group2()[3])
                    + (other.group1()[2] * self[e1])
                    - (other.group2()[0] * self.group1()[1])
                    - (other.group2()[0] * self.group6()[1])
                    + (other.group2()[1] * self.group1()[0])
                    + (other.group2()[1] * self.group6()[0])
                    + (other.group2()[2] * self.group6()[3])),
                ((self.group0()[1] * other.group1()[3]) + (other.group0()[0] * self.group8()[0]) + (other.group0()[1] * self.group8()[1]) + (other.group0()[2] * self.group8()[2])
                    - (self.group7()[0] * other.group2()[0])
                    - (self.group7()[1] * other.group2()[1])
                    - (self.group7()[2] * other.group2()[2])
                    + (other.group1()[0] * self.group1()[0])
                    + (other.group1()[1] * self.group1()[1])
                    + (other.group1()[2] * self.group1()[2])
                    - (other.group2()[3] * self.group6()[3])),
            ]),
            // e41, e42, e43
            Simd32x3::from([
                ((self.group0()[1] * other.group0()[0]) - (other.group0()[0] * self.group6()[3]) + (other.group0()[1] * self.group1()[2])
                    - (other.group0()[1] * self.group6()[2])
                    - (other.group0()[2] * self.group1()[1])
                    + (other.group0()[2] * self.group6()[1])
                    - (self.group7()[0] * other.group1()[3])
                    + (self.group7()[0] * other.group2()[3])
                    + (self.group7()[1] * other.group1()[2])
                    - (self.group7()[2] * other.group1()[1])
                    + (other.group1()[0] * self.group1()[3])),
                ((self.group0()[1] * other.group0()[1]) - (other.group0()[0] * self.group1()[2]) + (other.group0()[0] * self.group6()[2]) - (other.group0()[1] * self.group6()[3])
                    + (other.group0()[2] * self.group1()[0])
                    - (other.group0()[2] * self.group6()[0])
                    - (self.group7()[0] * other.group1()[2])
                    - (self.group7()[1] * other.group1()[3])
                    + (self.group7()[1] * other.group2()[3])
                    + (self.group7()[2] * other.group1()[0])
                    + (other.group1()[1] * self.group1()[3])),
                ((self.group0()[1] * other.group0()[2]) + (other.group0()[0] * self.group1()[1]) - (other.group0()[0] * self.group6()[1]) - (other.group0()[1] * self.group1()[0])
                    + (other.group0()[1] * self.group6()[0])
                    - (other.group0()[2] * self.group6()[3])
                    + (self.group7()[0] * other.group1()[1])
                    - (self.group7()[1] * other.group1()[0])
                    - (self.group7()[2] * other.group1()[3])
                    + (self.group7()[2] * other.group2()[3])
                    + (other.group1()[2] * self.group1()[3])),
            ]),
            // e23, e31, e12
            Simd32x3::from([
                ((self.group0()[1] * other.group1()[0]) + (other.group0()[0] * self[e1]) - (other.group0()[1] * self.group8()[2])
                    + (other.group0()[2] * self.group8()[1])
                    + (self.group7()[1] * other.group2()[2])
                    - (self.group7()[2] * other.group2()[1])
                    - (other.group1()[1] * self.group6()[2])
                    + (other.group1()[2] * self.group6()[1])
                    - (other.group1()[3] * self.group1()[0])
                    + (other.group2()[0] * self.group1()[3])
                    + (other.group2()[3] * self.group6()[0])),
                ((self.group0()[1] * other.group1()[1]) + (other.group0()[0] * self.group8()[2]) + (other.group0()[1] * self[e1])
                    - (other.group0()[2] * self.group8()[0])
                    - (self.group7()[0] * other.group2()[2])
                    + (self.group7()[2] * other.group2()[0])
                    + (other.group1()[0] * self.group6()[2])
                    - (other.group1()[2] * self.group6()[0])
                    - (other.group1()[3] * self.group1()[1])
                    + (other.group2()[1] * self.group1()[3])
                    + (other.group2()[3] * self.group6()[1])),
                ((self.group0()[1] * other.group1()[2]) - (other.group0()[0] * self.group8()[1])
                    + (other.group0()[1] * self.group8()[0])
                    + (other.group0()[2] * self[e1])
                    + (self.group7()[0] * other.group2()[1])
                    - (self.group7()[1] * other.group2()[0])
                    - (other.group1()[0] * self.group6()[1])
                    + (other.group1()[1] * self.group6()[0])
                    - (other.group1()[3] * self.group1()[2])
                    + (other.group2()[2] * self.group1()[3])
                    + (other.group2()[3] * self.group6()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[0]) - (other.group0()[0] * self.group9()[3]) + (other.group0()[1] * self.group3()[2])
                    - (other.group0()[2] * self.group3()[1])
                    - (self.group4()[1] * other.group2()[2])
                    + (self.group4()[2] * other.group2()[1])
                    - (self.group5()[0] * other.group2()[3])
                    - (self.group5()[1] * other.group1()[2])
                    + (self.group5()[2] * other.group1()[1])
                    - (other.group1()[3] * self.group9()[0])
                    - (other.group2()[0] * self[e45])),
                (-(self.group0()[0] * other.group1()[1]) - (other.group0()[0] * self.group3()[2]) - (other.group0()[1] * self.group9()[3])
                    + (other.group0()[2] * self.group3()[0])
                    + (self.group4()[0] * other.group2()[2])
                    - (self.group4()[2] * other.group2()[0])
                    + (self.group5()[0] * other.group1()[2])
                    - (self.group5()[1] * other.group2()[3])
                    - (self.group5()[2] * other.group1()[0])
                    - (other.group1()[3] * self.group9()[1])
                    - (other.group2()[1] * self[e45])),
                (-(self.group0()[0] * other.group1()[2]) + (other.group0()[0] * self.group3()[1])
                    - (other.group0()[1] * self.group3()[0])
                    - (other.group0()[2] * self.group9()[3])
                    - (self.group4()[0] * other.group2()[1])
                    + (self.group4()[1] * other.group2()[0])
                    - (self.group5()[0] * other.group1()[1])
                    + (self.group5()[1] * other.group1()[0])
                    - (self.group5()[2] * other.group2()[3])
                    - (other.group1()[3] * self.group9()[2])
                    - (other.group2()[2] * self[e45])),
                ((self.group0()[0] * other.group1()[3]) + (other.group0()[0] * self.group3()[0]) + (other.group0()[1] * self.group3()[1]) + (other.group0()[2] * self.group3()[2])
                    - (self.group4()[0] * other.group2()[0])
                    - (self.group4()[1] * other.group2()[1])
                    - (self.group4()[2] * other.group2()[2])
                    - (other.group1()[0] * self.group9()[0])
                    - (other.group1()[1] * self.group9()[1])
                    - (other.group1()[2] * self.group9()[2])
                    + (other.group2()[3] * self.group3()[3])),
            ]),
            // e423, e431, e412
            Simd32x3::from([
                (-(self.group0()[0] * other.group0()[0]) - (other.group0()[0] * self.group3()[3])
                    + (other.group0()[1] * self.group5()[2])
                    + (other.group0()[1] * self.group9()[2])
                    - (other.group0()[2] * self.group5()[1])
                    - (other.group0()[2] * self.group9()[1])
                    + (self.group4()[0] * other.group1()[3])
                    - (self.group4()[0] * other.group2()[3])
                    - (self.group4()[1] * other.group1()[2])
                    + (self.group4()[2] * other.group1()[1])
                    - (other.group1()[0] * self[e45])),
                (-(self.group0()[0] * other.group0()[1])
                    - (other.group0()[0] * self.group5()[2])
                    - (other.group0()[0] * self.group9()[2])
                    - (other.group0()[1] * self.group3()[3])
                    + (other.group0()[2] * self.group5()[0])
                    + (other.group0()[2] * self.group9()[0])
                    + (self.group4()[0] * other.group1()[2])
                    + (self.group4()[1] * other.group1()[3])
                    - (self.group4()[1] * other.group2()[3])
                    - (self.group4()[2] * other.group1()[0])
                    - (other.group1()[1] * self[e45])),
                (-(self.group0()[0] * other.group0()[2]) + (other.group0()[0] * self.group5()[1]) + (other.group0()[0] * self.group9()[1])
                    - (other.group0()[1] * self.group5()[0])
                    - (other.group0()[1] * self.group9()[0])
                    - (other.group0()[2] * self.group3()[3])
                    - (self.group4()[0] * other.group1()[1])
                    + (self.group4()[1] * other.group1()[0])
                    + (self.group4()[2] * other.group1()[3])
                    - (self.group4()[2] * other.group2()[3])
                    - (other.group1()[2] * self[e45])),
            ]),
            // e235, e315, e125
            Simd32x3::from([
                (-(self.group0()[0] * other.group2()[0]) - (self.group5()[1] * other.group2()[2]) + (self.group5()[2] * other.group2()[1])
                    - (other.group1()[0] * self.group9()[3])
                    + (other.group1()[1] * self.group3()[2])
                    - (other.group1()[2] * self.group3()[1])
                    - (other.group1()[3] * self.group3()[0])
                    + (other.group2()[0] * self.group3()[3])
                    - (other.group2()[1] * self.group9()[2])
                    + (other.group2()[2] * self.group9()[1])
                    - (other.group2()[3] * self.group3()[0])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group5()[0] * other.group2()[2])
                    - (self.group5()[2] * other.group2()[0])
                    - (other.group1()[0] * self.group3()[2])
                    - (other.group1()[1] * self.group9()[3])
                    + (other.group1()[2] * self.group3()[0])
                    - (other.group1()[3] * self.group3()[1])
                    + (other.group2()[0] * self.group9()[2])
                    + (other.group2()[1] * self.group3()[3])
                    - (other.group2()[2] * self.group9()[0])
                    - (other.group2()[3] * self.group3()[1])),
                (-(self.group0()[0] * other.group2()[2]) - (self.group5()[0] * other.group2()[1])
                    + (self.group5()[1] * other.group2()[0])
                    + (other.group1()[0] * self.group3()[1])
                    - (other.group1()[1] * self.group3()[0])
                    - (other.group1()[2] * self.group9()[3])
                    - (other.group1()[3] * self.group3()[2])
                    - (other.group2()[0] * self.group9()[1])
                    + (other.group2()[1] * self.group9()[0])
                    + (other.group2()[2] * self.group3()[3])
                    - (other.group2()[3] * self.group3()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self[e1]) + (other.group0()[1] * self.group8()[2]) - (other.group0()[2] * self.group8()[1]) + (self.group7()[1] * other.group2()[2])
                    - (self.group7()[2] * other.group2()[1])
                    - (other.group1()[0] * self.group6()[3])
                    + (other.group1()[1] * self.group1()[2])
                    - (other.group1()[2] * self.group1()[1])
                    + (other.group1()[3] * self.group6()[0])
                    + (other.group2()[0] * self.group1()[3])
                    - (other.group2()[3] * self.group1()[0])),
                (-(other.group0()[0] * self.group8()[2]) - (other.group0()[1] * self[e1]) + (other.group0()[2] * self.group8()[0]) - (self.group7()[0] * other.group2()[2])
                    + (self.group7()[2] * other.group2()[0])
                    - (other.group1()[0] * self.group1()[2])
                    - (other.group1()[1] * self.group6()[3])
                    + (other.group1()[2] * self.group1()[0])
                    + (other.group1()[3] * self.group6()[1])
                    + (other.group2()[1] * self.group1()[3])
                    - (other.group2()[3] * self.group1()[1])),
                ((other.group0()[0] * self.group8()[1]) - (other.group0()[1] * self.group8()[0]) - (other.group0()[2] * self[e1]) + (self.group7()[0] * other.group2()[1])
                    - (self.group7()[1] * other.group2()[0])
                    + (other.group1()[0] * self.group1()[1])
                    - (other.group1()[1] * self.group1()[0])
                    - (other.group1()[2] * self.group6()[3])
                    + (other.group1()[3] * self.group6()[2])
                    + (other.group2()[2] * self.group1()[3])
                    - (other.group2()[3] * self.group1()[2])),
                (-(self.group8()[0] * other.group1()[0]) - (self.group8()[1] * other.group1()[1]) - (self.group8()[2] * other.group1()[2]) + (other.group1()[3] * self[e1])
                    - (other.group2()[0] * self.group1()[0])
                    - (other.group2()[0] * self.group6()[0])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[1] * self.group6()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group6()[2])
                    + (other.group2()[3] * self[e1])),
            ]),
            // e1234
            ((other.group0()[0] * self.group1()[0]) - (other.group0()[0] * self.group6()[0]) + (other.group0()[1] * self.group1()[1]) - (other.group0()[1] * self.group6()[1])
                + (other.group0()[2] * self.group1()[2])
                - (other.group0()[2] * self.group6()[2])
                - (self.group7()[0] * other.group1()[0])
                - (self.group7()[1] * other.group1()[1])
                - (self.group7()[2] * other.group1()[2])
                - (other.group1()[3] * self.group1()[3])
                + (other.group2()[3] * self.group1()[3])),
        );
    }
}
impl GeometricAntiProduct<AntiDipoleInversion> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      448      480        0
    fn geometric_anti_product(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(other.group0()[0] * self.group3()[0])
                    - (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group3()[2])
                    - (self.group4()[0] * other.group2()[0])
                    - (self.group4()[1] * other.group2()[1])
                    - (self.group4()[2] * other.group2()[2])
                    - (self.group5()[0] * other.group1()[0])
                    - (self.group5()[1] * other.group1()[1])
                    - (self.group5()[2] * other.group1()[2])
                    - (other.group1()[3] * self.group3()[3])
                    + (other.group2()[3] * self.group9()[3])
                    + (other.group3()[0] * self.group9()[0])
                    + (other.group3()[1] * self.group9()[1])
                    + (other.group3()[2] * self.group9()[2])
                    + (other.group3()[3] * self[e45])),
                (-(other.group0()[0] * self.group8()[0])
                    - (other.group0()[1] * self.group8()[1])
                    - (other.group0()[2] * self.group8()[2])
                    - (self.group7()[0] * other.group2()[0])
                    - (self.group7()[1] * other.group2()[1])
                    - (self.group7()[2] * other.group2()[2])
                    - (other.group1()[0] * self.group6()[0])
                    - (other.group1()[1] * self.group6()[1])
                    - (other.group1()[2] * self.group6()[2])
                    + (other.group1()[3] * self.group6()[3])
                    + (other.group2()[3] * self[e1])
                    - (other.group3()[0] * self.group1()[0])
                    - (other.group3()[1] * self.group1()[1])
                    - (other.group3()[2] * self.group1()[2])
                    + (other.group3()[3] * self.group1()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[1] * other.group3()[0]) + (other.group0()[0] * self[e1]) - (other.group0()[1] * self.group8()[2]) + (other.group0()[2] * self.group8()[1])
                    - (self.group7()[0] * other.group3()[3])
                    - (self.group7()[1] * other.group2()[2])
                    + (self.group7()[2] * other.group2()[1])
                    + (self.group8()[0] * other.group2()[3])
                    + (other.group1()[0] * self.group6()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group1()[3] * self.group6()[0])
                    - (other.group2()[0] * self.group1()[3])
                    - (other.group3()[1] * self.group6()[2])
                    + (other.group3()[2] * self.group6()[1])),
                ((self.group0()[1] * other.group3()[1]) + (other.group0()[0] * self.group8()[2]) + (other.group0()[1] * self[e1]) - (other.group0()[2] * self.group8()[0])
                    + (self.group7()[0] * other.group2()[2])
                    - (self.group7()[1] * other.group3()[3])
                    - (self.group7()[2] * other.group2()[0])
                    + (self.group8()[1] * other.group2()[3])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group6()[3])
                    - (other.group1()[2] * self.group1()[0])
                    + (other.group1()[3] * self.group6()[1])
                    - (other.group2()[1] * self.group1()[3])
                    + (other.group3()[0] * self.group6()[2])
                    - (other.group3()[2] * self.group6()[0])),
                ((self.group0()[1] * other.group3()[2]) - (other.group0()[0] * self.group8()[1]) + (other.group0()[1] * self.group8()[0]) + (other.group0()[2] * self[e1])
                    - (self.group7()[0] * other.group2()[1])
                    + (self.group7()[1] * other.group2()[0])
                    - (self.group7()[2] * other.group3()[3])
                    + (self.group8()[2] * other.group2()[3])
                    - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group6()[3])
                    + (other.group1()[3] * self.group6()[2])
                    - (other.group2()[2] * self.group1()[3])
                    - (other.group3()[0] * self.group6()[1])
                    + (other.group3()[1] * self.group6()[0])),
                ((self.group0()[1] * other.group2()[3]) + (other.group0()[0] * self.group1()[0]) - (other.group0()[0] * self.group6()[0]) + (other.group0()[1] * self.group1()[1])
                    - (other.group0()[1] * self.group6()[1])
                    + (other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group6()[2])
                    - (self.group7()[0] * other.group1()[0])
                    - (self.group7()[0] * other.group3()[0])
                    - (self.group7()[1] * other.group1()[1])
                    - (self.group7()[1] * other.group3()[1])
                    - (self.group7()[2] * other.group1()[2])
                    - (self.group7()[2] * other.group3()[2])
                    + (other.group1()[3] * self.group1()[3])
                    - (other.group2()[3] * self.group6()[3])),
            ]),
            // e5
            ((self.group0()[1] * other.group3()[3]) - (self.group8()[0] * other.group1()[0]) + (self.group8()[0] * other.group3()[0]) - (self.group8()[1] * other.group1()[1])
                + (self.group8()[1] * other.group3()[1])
                - (self.group8()[2] * other.group1()[2])
                + (self.group8()[2] * other.group3()[2])
                - (other.group1()[3] * self[e1])
                - (other.group2()[0] * self.group1()[0])
                - (other.group2()[0] * self.group6()[0])
                - (other.group2()[1] * self.group1()[1])
                - (other.group2()[1] * self.group6()[1])
                - (other.group2()[2] * self.group1()[2])
                - (other.group2()[2] * self.group6()[2])
                + (other.group3()[3] * self.group6()[3])),
            // e15, e25, e35, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) + (self.group5()[0] * other.group3()[3]) + (self.group5()[1] * other.group2()[2]) - (self.group5()[2] * other.group2()[1])
                    + (other.group1()[0] * self.group9()[3])
                    - (other.group1()[1] * self.group3()[2])
                    + (other.group1()[2] * self.group3()[1])
                    - (other.group1()[3] * self.group3()[0])
                    - (other.group2()[0] * self.group3()[3])
                    + (other.group2()[1] * self.group9()[2])
                    - (other.group2()[2] * self.group9()[1])
                    - (other.group3()[0] * self.group9()[3])
                    + (other.group3()[1] * self.group3()[2])
                    - (other.group3()[2] * self.group3()[1])
                    - (other.group3()[3] * self.group9()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group5()[0] * other.group2()[2])
                    + (self.group5()[1] * other.group3()[3])
                    + (self.group5()[2] * other.group2()[0])
                    + (other.group1()[0] * self.group3()[2])
                    + (other.group1()[1] * self.group9()[3])
                    - (other.group1()[2] * self.group3()[0])
                    - (other.group1()[3] * self.group3()[1])
                    - (other.group2()[0] * self.group9()[2])
                    - (other.group2()[1] * self.group3()[3])
                    + (other.group2()[2] * self.group9()[0])
                    - (other.group3()[0] * self.group3()[2])
                    - (other.group3()[1] * self.group9()[3])
                    + (other.group3()[2] * self.group3()[0])
                    - (other.group3()[3] * self.group9()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group5()[0] * other.group2()[1]) - (self.group5()[1] * other.group2()[0]) + (self.group5()[2] * other.group3()[3])
                    - (other.group1()[0] * self.group3()[1])
                    + (other.group1()[1] * self.group3()[0])
                    + (other.group1()[2] * self.group9()[3])
                    - (other.group1()[3] * self.group3()[2])
                    + (other.group2()[0] * self.group9()[1])
                    - (other.group2()[1] * self.group9()[0])
                    - (other.group2()[2] * self.group3()[3])
                    + (other.group3()[0] * self.group3()[1])
                    - (other.group3()[1] * self.group3()[0])
                    - (other.group3()[2] * self.group9()[3])
                    - (other.group3()[3] * self.group9()[2])),
                (-(self.group0()[0] * other.group1()[3])
                    + (other.group0()[0] * self.group3()[0])
                    + (other.group0()[1] * self.group3()[1])
                    + (other.group0()[2] * self.group3()[2])
                    - (self.group4()[0] * other.group2()[0])
                    - (self.group4()[1] * other.group2()[1])
                    - (self.group4()[2] * other.group2()[2])
                    + (self.group5()[0] * other.group3()[0])
                    + (self.group5()[1] * other.group3()[1])
                    + (self.group5()[2] * other.group3()[2])
                    - (other.group1()[0] * self.group9()[0])
                    - (other.group1()[1] * self.group9()[1])
                    - (other.group1()[2] * self.group9()[2])
                    - (other.group2()[3] * self.group9()[3])
                    + (other.group3()[3] * self[e45])),
            ]),
            // e41, e42, e43
            Simd32x3::from([
                ((self.group0()[0] * other.group0()[0]) + (other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self.group5()[2]) - (other.group0()[1] * self.group9()[2])
                    + (other.group0()[2] * self.group5()[1])
                    + (other.group0()[2] * self.group9()[1])
                    + (self.group4()[0] * other.group1()[3])
                    + (self.group4()[1] * other.group1()[2])
                    + (self.group4()[1] * other.group3()[2])
                    - (self.group4()[2] * other.group1()[1])
                    - (self.group4()[2] * other.group3()[1])
                    + (self.group5()[0] * other.group2()[3])
                    + (other.group1()[0] * self[e45])
                    + (other.group2()[3] * self.group9()[0])
                    + (other.group3()[0] * self[e45])),
                ((self.group0()[0] * other.group0()[1]) + (other.group0()[0] * self.group5()[2]) + (other.group0()[0] * self.group9()[2]) + (other.group0()[1] * self.group3()[3])
                    - (other.group0()[2] * self.group5()[0])
                    - (other.group0()[2] * self.group9()[0])
                    - (self.group4()[0] * other.group1()[2])
                    - (self.group4()[0] * other.group3()[2])
                    + (self.group4()[1] * other.group1()[3])
                    + (self.group4()[2] * other.group1()[0])
                    + (self.group4()[2] * other.group3()[0])
                    + (self.group5()[1] * other.group2()[3])
                    + (other.group1()[1] * self[e45])
                    + (other.group2()[3] * self.group9()[1])
                    + (other.group3()[1] * self[e45])),
                ((self.group0()[0] * other.group0()[2]) - (other.group0()[0] * self.group5()[1]) - (other.group0()[0] * self.group9()[1])
                    + (other.group0()[1] * self.group5()[0])
                    + (other.group0()[1] * self.group9()[0])
                    + (other.group0()[2] * self.group3()[3])
                    + (self.group4()[0] * other.group1()[1])
                    + (self.group4()[0] * other.group3()[1])
                    - (self.group4()[1] * other.group1()[0])
                    - (self.group4()[1] * other.group3()[0])
                    + (self.group4()[2] * other.group1()[3])
                    + (self.group5()[2] * other.group2()[3])
                    + (other.group1()[2] * self[e45])
                    + (other.group2()[3] * self.group9()[2])
                    + (other.group3()[2] * self[e45])),
            ]),
            // e23, e31, e12
            Simd32x3::from([
                ((self.group0()[0] * other.group1()[0]) + (other.group0()[0] * self.group9()[3]) - (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group3()[1])
                    + (self.group4()[0] * other.group3()[3])
                    + (self.group4()[1] * other.group2()[2])
                    - (self.group4()[2] * other.group2()[1])
                    + (self.group5()[1] * other.group1()[2])
                    - (self.group5()[2] * other.group1()[1])
                    - (other.group1()[3] * self.group9()[0])
                    + (other.group2()[0] * self[e45])
                    + (other.group2()[3] * self.group3()[0])
                    - (other.group3()[0] * self.group3()[3])
                    + (other.group3()[1] * self.group9()[2])
                    - (other.group3()[2] * self.group9()[1])),
                ((self.group0()[0] * other.group1()[1]) + (other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group9()[3])
                    - (other.group0()[2] * self.group3()[0])
                    - (self.group4()[0] * other.group2()[2])
                    + (self.group4()[1] * other.group3()[3])
                    + (self.group4()[2] * other.group2()[0])
                    - (self.group5()[0] * other.group1()[2])
                    + (self.group5()[2] * other.group1()[0])
                    - (other.group1()[3] * self.group9()[1])
                    + (other.group2()[1] * self[e45])
                    + (other.group2()[3] * self.group3()[1])
                    - (other.group3()[0] * self.group9()[2])
                    - (other.group3()[1] * self.group3()[3])
                    + (other.group3()[2] * self.group9()[0])),
                ((self.group0()[0] * other.group1()[2]) - (other.group0()[0] * self.group3()[1])
                    + (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group9()[3])
                    + (self.group4()[0] * other.group2()[1])
                    - (self.group4()[1] * other.group2()[0])
                    + (self.group4()[2] * other.group3()[3])
                    + (self.group5()[0] * other.group1()[1])
                    - (self.group5()[1] * other.group1()[0])
                    - (other.group1()[3] * self.group9()[2])
                    + (other.group2()[2] * self[e45])
                    + (other.group2()[3] * self.group3()[2])
                    + (other.group3()[0] * self.group9()[1])
                    - (other.group3()[1] * self.group9()[0])
                    - (other.group3()[2] * self.group3()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[0]) + (other.group0()[0] * self[e1]) - (other.group0()[1] * self.group8()[2])
                    + (other.group0()[2] * self.group8()[1])
                    + (self.group7()[0] * other.group3()[3])
                    + (self.group7()[1] * other.group2()[2])
                    - (self.group7()[2] * other.group2()[1])
                    + (self.group8()[0] * other.group2()[3])
                    - (other.group1()[1] * self.group6()[2])
                    + (other.group1()[2] * self.group6()[1])
                    + (other.group1()[3] * self.group1()[0])
                    + (other.group2()[0] * self.group1()[3])
                    + (other.group3()[0] * self.group6()[3])
                    - (other.group3()[1] * self.group1()[2])
                    + (other.group3()[2] * self.group1()[1])),
                ((self.group0()[1] * other.group1()[1]) + (other.group0()[0] * self.group8()[2]) + (other.group0()[1] * self[e1])
                    - (other.group0()[2] * self.group8()[0])
                    - (self.group7()[0] * other.group2()[2])
                    + (self.group7()[1] * other.group3()[3])
                    + (self.group7()[2] * other.group2()[0])
                    + (self.group8()[1] * other.group2()[3])
                    + (other.group1()[0] * self.group6()[2])
                    - (other.group1()[2] * self.group6()[0])
                    + (other.group1()[3] * self.group1()[1])
                    + (other.group2()[1] * self.group1()[3])
                    + (other.group3()[0] * self.group1()[2])
                    + (other.group3()[1] * self.group6()[3])
                    - (other.group3()[2] * self.group1()[0])),
                ((self.group0()[1] * other.group1()[2]) - (other.group0()[0] * self.group8()[1])
                    + (other.group0()[1] * self.group8()[0])
                    + (other.group0()[2] * self[e1])
                    + (self.group7()[0] * other.group2()[1])
                    - (self.group7()[1] * other.group2()[0])
                    + (self.group7()[2] * other.group3()[3])
                    + (self.group8()[2] * other.group2()[3])
                    - (other.group1()[0] * self.group6()[1])
                    + (other.group1()[1] * self.group6()[0])
                    + (other.group1()[3] * self.group1()[2])
                    + (other.group2()[2] * self.group1()[3])
                    - (other.group3()[0] * self.group1()[1])
                    + (other.group3()[1] * self.group1()[0])
                    + (other.group3()[2] * self.group6()[3])),
                ((self.group0()[1] * other.group1()[3]) - (other.group0()[0] * self.group8()[0]) - (other.group0()[1] * self.group8()[1]) - (other.group0()[2] * self.group8()[2])
                    + (self.group7()[0] * other.group2()[0])
                    + (self.group7()[1] * other.group2()[1])
                    + (self.group7()[2] * other.group2()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    + (other.group2()[3] * self[e1])
                    - (other.group3()[0] * self.group6()[0])
                    - (other.group3()[1] * self.group6()[1])
                    - (other.group3()[2] * self.group6()[2])
                    - (other.group3()[3] * self.group1()[3])),
            ]),
            // e423, e431, e412
            Simd32x3::from([
                ((self.group0()[1] * other.group0()[0]) - (other.group0()[0] * self.group6()[3]) + (other.group0()[1] * self.group1()[2])
                    - (other.group0()[1] * self.group6()[2])
                    - (other.group0()[2] * self.group1()[1])
                    + (other.group0()[2] * self.group6()[1])
                    + (self.group7()[0] * other.group1()[3])
                    + (self.group7()[1] * other.group1()[2])
                    + (self.group7()[1] * other.group3()[2])
                    - (self.group7()[2] * other.group1()[1])
                    - (self.group7()[2] * other.group3()[1])
                    + (other.group1()[0] * self.group1()[3])
                    - (other.group2()[3] * self.group1()[0])
                    + (other.group2()[3] * self.group6()[0])
                    + (other.group3()[0] * self.group1()[3])),
                ((self.group0()[1] * other.group0()[1]) - (other.group0()[0] * self.group1()[2]) + (other.group0()[0] * self.group6()[2]) - (other.group0()[1] * self.group6()[3])
                    + (other.group0()[2] * self.group1()[0])
                    - (other.group0()[2] * self.group6()[0])
                    - (self.group7()[0] * other.group1()[2])
                    - (self.group7()[0] * other.group3()[2])
                    + (self.group7()[1] * other.group1()[3])
                    + (self.group7()[2] * other.group1()[0])
                    + (self.group7()[2] * other.group3()[0])
                    + (other.group1()[1] * self.group1()[3])
                    - (other.group2()[3] * self.group1()[1])
                    + (other.group2()[3] * self.group6()[1])
                    + (other.group3()[1] * self.group1()[3])),
                ((self.group0()[1] * other.group0()[2]) + (other.group0()[0] * self.group1()[1]) - (other.group0()[0] * self.group6()[1]) - (other.group0()[1] * self.group1()[0])
                    + (other.group0()[1] * self.group6()[0])
                    - (other.group0()[2] * self.group6()[3])
                    + (self.group7()[0] * other.group1()[1])
                    + (self.group7()[0] * other.group3()[1])
                    - (self.group7()[1] * other.group1()[0])
                    - (self.group7()[1] * other.group3()[0])
                    + (self.group7()[2] * other.group1()[3])
                    + (other.group1()[2] * self.group1()[3])
                    - (other.group2()[3] * self.group1()[2])
                    + (other.group2()[3] * self.group6()[2])
                    + (other.group3()[2] * self.group1()[3])),
            ]),
            // e235, e315, e125
            Simd32x3::from([
                ((self.group0()[1] * other.group2()[0]) - (self.group8()[0] * other.group1()[3]) + (self.group8()[1] * other.group1()[2])
                    - (self.group8()[1] * other.group3()[2])
                    - (self.group8()[2] * other.group1()[1])
                    + (self.group8()[2] * other.group3()[1])
                    + (other.group1()[0] * self[e1])
                    + (other.group2()[0] * self.group6()[3])
                    - (other.group2()[1] * self.group1()[2])
                    - (other.group2()[1] * self.group6()[2])
                    + (other.group2()[2] * self.group1()[1])
                    + (other.group2()[2] * self.group6()[1])
                    - (other.group3()[0] * self[e1])
                    + (other.group3()[3] * self.group1()[0])
                    + (other.group3()[3] * self.group6()[0])),
                ((self.group0()[1] * other.group2()[1]) - (self.group8()[0] * other.group1()[2]) + (self.group8()[0] * other.group3()[2]) - (self.group8()[1] * other.group1()[3])
                    + (self.group8()[2] * other.group1()[0])
                    - (self.group8()[2] * other.group3()[0])
                    + (other.group1()[1] * self[e1])
                    + (other.group2()[0] * self.group1()[2])
                    + (other.group2()[0] * self.group6()[2])
                    + (other.group2()[1] * self.group6()[3])
                    - (other.group2()[2] * self.group1()[0])
                    - (other.group2()[2] * self.group6()[0])
                    - (other.group3()[1] * self[e1])
                    + (other.group3()[3] * self.group1()[1])
                    + (other.group3()[3] * self.group6()[1])),
                ((self.group0()[1] * other.group2()[2]) + (self.group8()[0] * other.group1()[1]) - (self.group8()[0] * other.group3()[1]) - (self.group8()[1] * other.group1()[0])
                    + (self.group8()[1] * other.group3()[0])
                    - (self.group8()[2] * other.group1()[3])
                    + (other.group1()[2] * self[e1])
                    - (other.group2()[0] * self.group1()[1])
                    - (other.group2()[0] * self.group6()[1])
                    + (other.group2()[1] * self.group1()[0])
                    + (other.group2()[1] * self.group6()[0])
                    + (other.group2()[2] * self.group6()[3])
                    - (other.group3()[2] * self[e1])
                    + (other.group3()[3] * self.group1()[2])
                    + (other.group3()[3] * self.group6()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(self.group0()[0] * other.group3()[0]) - (other.group0()[0] * self.group9()[3]) + (other.group0()[1] * self.group3()[2])
                    - (other.group0()[2] * self.group3()[1])
                    + (self.group4()[0] * other.group3()[3])
                    + (self.group4()[1] * other.group2()[2])
                    - (self.group4()[2] * other.group2()[1])
                    - (self.group5()[0] * other.group1()[3])
                    - (self.group5()[1] * other.group3()[2])
                    + (self.group5()[2] * other.group3()[1])
                    + (other.group1()[0] * self.group3()[3])
                    - (other.group1()[1] * self.group9()[2])
                    + (other.group1()[2] * self.group9()[1])
                    + (other.group2()[0] * self[e45])
                    - (other.group2()[3] * self.group3()[0])),
                (-(self.group0()[0] * other.group3()[1]) - (other.group0()[0] * self.group3()[2]) - (other.group0()[1] * self.group9()[3])
                    + (other.group0()[2] * self.group3()[0])
                    - (self.group4()[0] * other.group2()[2])
                    + (self.group4()[1] * other.group3()[3])
                    + (self.group4()[2] * other.group2()[0])
                    + (self.group5()[0] * other.group3()[2])
                    - (self.group5()[1] * other.group1()[3])
                    - (self.group5()[2] * other.group3()[0])
                    + (other.group1()[0] * self.group9()[2])
                    + (other.group1()[1] * self.group3()[3])
                    - (other.group1()[2] * self.group9()[0])
                    + (other.group2()[1] * self[e45])
                    - (other.group2()[3] * self.group3()[1])),
                (-(self.group0()[0] * other.group3()[2]) + (other.group0()[0] * self.group3()[1])
                    - (other.group0()[1] * self.group3()[0])
                    - (other.group0()[2] * self.group9()[3])
                    + (self.group4()[0] * other.group2()[1])
                    - (self.group4()[1] * other.group2()[0])
                    + (self.group4()[2] * other.group3()[3])
                    - (self.group5()[0] * other.group3()[1])
                    + (self.group5()[1] * other.group3()[0])
                    - (self.group5()[2] * other.group1()[3])
                    - (other.group1()[0] * self.group9()[1])
                    + (other.group1()[1] * self.group9()[0])
                    + (other.group1()[2] * self.group3()[3])
                    + (other.group2()[2] * self[e45])
                    - (other.group2()[3] * self.group3()[2])),
                ((self.group0()[0] * other.group3()[3])
                    - (self.group5()[0] * other.group2()[0])
                    - (self.group5()[1] * other.group2()[1])
                    - (self.group5()[2] * other.group2()[2])
                    - (other.group1()[0] * self.group3()[0])
                    - (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group3()[2])
                    - (other.group1()[3] * self.group9()[3])
                    + (other.group2()[0] * self.group9()[0])
                    + (other.group2()[1] * self.group9()[1])
                    + (other.group2()[2] * self.group9()[2])
                    + (other.group3()[0] * self.group3()[0])
                    + (other.group3()[1] * self.group3()[1])
                    + (other.group3()[2] * self.group3()[2])
                    - (other.group3()[3] * self.group3()[3])),
            ]),
            // e1234
            ((self.group0()[0] * other.group2()[3])
                - (other.group0()[0] * self.group5()[0])
                - (other.group0()[0] * self.group9()[0])
                - (other.group0()[1] * self.group5()[1])
                - (other.group0()[1] * self.group9()[1])
                - (other.group0()[2] * self.group5()[2])
                - (other.group0()[2] * self.group9()[2])
                - (self.group4()[0] * other.group1()[0])
                - (self.group4()[0] * other.group3()[0])
                - (self.group4()[1] * other.group1()[1])
                - (self.group4()[1] * other.group3()[1])
                - (self.group4()[2] * other.group1()[2])
                - (self.group4()[2] * other.group3()[2])
                + (other.group1()[3] * self[e45])
                + (other.group2()[3] * self.group3()[3])),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       32       68        0
    fn geometric_anti_product(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((other.group0()[0] * self[e1]) + (other.group0()[1] * self.group0()[1])),
                (-(other.group0()[0] * self.group9()[3]) - (other.group0()[1] * self.group0()[0])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[0] * self.group3()[0]) + (other.group0()[1] * self.group9()[0])),
                (-(other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group9()[1])),
                (-(other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group9()[2])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self[e45])),
            ]),
            // e5
            (other.group0()[1] * self.group9()[3] * -1.0),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other.group0()[1] * self.group8()[0]),
                (other.group0()[1] * self.group8()[1]),
                (other.group0()[1] * self.group8()[2]),
                (-(other.group0()[0] * self[e1]) - (other.group0()[1] * self.group6()[3])),
            ]),
            // e41, e42, e43
            Simd32x3::from([
                (-(other.group0()[0] * self.group1()[0]) + (other.group0()[0] * self.group6()[0]) + (other.group0()[1] * self.group7()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[0] * self.group6()[1]) + (other.group0()[1] * self.group7()[1])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[0] * self.group6()[2]) + (other.group0()[1] * self.group7()[2])),
            ]),
            // e23, e31, e12
            Simd32x3::from([
                ((other.group0()[0] * self.group8()[0]) + (other.group0()[1] * self.group6()[0])),
                ((other.group0()[0] * self.group8()[1]) + (other.group0()[1] * self.group6()[1])),
                ((other.group0()[0] * self.group8()[2]) + (other.group0()[1] * self.group6()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group3()[0]) - (other.group0()[1] * self.group5()[0])),
                (-(other.group0()[0] * self.group3()[1]) - (other.group0()[1] * self.group5()[1])),
                (-(other.group0()[0] * self.group3()[2]) - (other.group0()[1] * self.group5()[2])),
                (-(other.group0()[0] * self.group9()[3]) + (other.group0()[1] * self.group3()[3])),
            ]),
            // e423, e431, e412
            Simd32x3::from([
                (-(other.group0()[0] * self.group5()[0]) - (other.group0()[0] * self.group9()[0]) - (other.group0()[1] * self.group4()[0])),
                (-(other.group0()[0] * self.group5()[1]) - (other.group0()[0] * self.group9()[1]) - (other.group0()[1] * self.group4()[1])),
                (-(other.group0()[0] * self.group5()[2]) - (other.group0()[0] * self.group9()[2]) - (other.group0()[1] * self.group4()[2])),
            ]),
            // e235, e315, e125
            Simd32x3::from([
                (other.group0()[1] * self.group3()[0] * -1.0),
                (other.group0()[1] * self.group3()[1] * -1.0),
                (other.group0()[1] * self.group3()[2] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group8()[0]) - (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[0] * self.group8()[1]) - (other.group0()[1] * self.group1()[1])),
                (-(other.group0()[0] * self.group8()[2]) - (other.group0()[1] * self.group1()[2])),
                (other.group0()[1] * self[e1]),
            ]),
            // e1234
            ((other.group0()[0] * self.group0()[1]) - (other.group0()[0] * self.group6()[3]) + (other.group0()[1] * self.group1()[3])),
        );
    }
}
impl GeometricAntiProduct<AntiFlatPoint> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       96      128        0
    fn geometric_anti_product(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group4()[0] * other.group0()[0])
                    - (self.group4()[1] * other.group0()[1])
                    - (self.group4()[2] * other.group0()[2])
                    - (other.group0()[3] * self.group3()[3])),
                (-(self.group7()[0] * other.group0()[0]) - (self.group7()[1] * other.group0()[1]) - (self.group7()[2] * other.group0()[2])
                    + (other.group0()[3] * self.group6()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group7()[1] * other.group0()[2]) + (self.group7()[2] * other.group0()[1]) - (other.group0()[0] * self.group1()[3])
                    + (other.group0()[3] * self.group6()[0])),
                ((self.group7()[0] * other.group0()[2]) - (self.group7()[2] * other.group0()[0]) - (other.group0()[1] * self.group1()[3]) + (other.group0()[3] * self.group6()[1])),
                (-(self.group7()[0] * other.group0()[1]) + (self.group7()[1] * other.group0()[0]) - (other.group0()[2] * self.group1()[3])
                    + (other.group0()[3] * self.group6()[2])),
                (other.group0()[3] * self.group1()[3]),
            ]),
            // e5
            (-(other.group0()[0] * self.group1()[0])
                - (other.group0()[0] * self.group6()[0])
                - (other.group0()[1] * self.group1()[1])
                - (other.group0()[1] * self.group6()[1])
                - (other.group0()[2] * self.group1()[2])
                - (other.group0()[2] * self.group6()[2])
                - (other.group0()[3] * self[e1])),
            // e15, e25, e35, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group5()[1] * other.group0()[2]) - (self.group5()[2] * other.group0()[1]) - (other.group0()[0] * self.group3()[3])
                    + (other.group0()[1] * self.group9()[2])
                    - (other.group0()[2] * self.group9()[1])
                    - (other.group0()[3] * self.group3()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group5()[0] * other.group0()[2]) + (self.group5()[2] * other.group0()[0])
                    - (other.group0()[0] * self.group9()[2])
                    - (other.group0()[1] * self.group3()[3])
                    + (other.group0()[2] * self.group9()[0])
                    - (other.group0()[3] * self.group3()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group5()[0] * other.group0()[1]) - (self.group5()[1] * other.group0()[0]) + (other.group0()[0] * self.group9()[1])
                    - (other.group0()[1] * self.group9()[0])
                    - (other.group0()[2] * self.group3()[3])
                    - (other.group0()[3] * self.group3()[2])),
                (-(self.group0()[0] * other.group0()[3])
                    - (self.group4()[0] * other.group0()[0])
                    - (self.group4()[1] * other.group0()[1])
                    - (self.group4()[2] * other.group0()[2])),
            ]),
            // e41, e42, e43
            Simd32x3::from([(self.group4()[0] * other.group0()[3]), (self.group4()[1] * other.group0()[3]), (self.group4()[2] * other.group0()[3])]),
            // e23, e31, e12
            Simd32x3::from([
                ((self.group4()[1] * other.group0()[2]) - (self.group4()[2] * other.group0()[1]) + (other.group0()[0] * self[e45]) - (other.group0()[3] * self.group9()[0])),
                (-(self.group4()[0] * other.group0()[2]) + (self.group4()[2] * other.group0()[0]) + (other.group0()[1] * self[e45]) - (other.group0()[3] * self.group9()[1])),
                ((self.group4()[0] * other.group0()[1]) - (self.group4()[1] * other.group0()[0]) + (other.group0()[2] * self[e45]) - (other.group0()[3] * self.group9()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group7()[1] * other.group0()[2]) - (self.group7()[2] * other.group0()[1]) + (other.group0()[0] * self.group1()[3]) + (other.group0()[3] * self.group1()[0])),
                (-(self.group7()[0] * other.group0()[2])
                    + (self.group7()[2] * other.group0()[0])
                    + (other.group0()[1] * self.group1()[3])
                    + (other.group0()[3] * self.group1()[1])),
                ((self.group7()[0] * other.group0()[1]) - (self.group7()[1] * other.group0()[0]) + (other.group0()[2] * self.group1()[3]) + (other.group0()[3] * self.group1()[2])),
                ((self.group0()[1] * other.group0()[3]) + (self.group7()[0] * other.group0()[0]) + (self.group7()[1] * other.group0()[1]) + (self.group7()[2] * other.group0()[2])),
            ]),
            // e423, e431, e412
            Simd32x3::from([(self.group7()[0] * other.group0()[3]), (self.group7()[1] * other.group0()[3]), (self.group7()[2] * other.group0()[3])]),
            // e235, e315, e125
            Simd32x3::from([
                ((self.group0()[1] * other.group0()[0]) - (self.group8()[0] * other.group0()[3]) + (other.group0()[0] * self.group6()[3])
                    - (other.group0()[1] * self.group1()[2])
                    - (other.group0()[1] * self.group6()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (other.group0()[2] * self.group6()[1])),
                ((self.group0()[1] * other.group0()[1]) - (self.group8()[1] * other.group0()[3])
                    + (other.group0()[0] * self.group1()[2])
                    + (other.group0()[0] * self.group6()[2])
                    + (other.group0()[1] * self.group6()[3])
                    - (other.group0()[2] * self.group1()[0])
                    - (other.group0()[2] * self.group6()[0])),
                ((self.group0()[1] * other.group0()[2]) - (self.group8()[2] * other.group0()[3]) - (other.group0()[0] * self.group1()[1]) - (other.group0()[0] * self.group6()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[1] * self.group6()[0])
                    + (other.group0()[2] * self.group6()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group4()[1] * other.group0()[2]) - (self.group4()[2] * other.group0()[1]) - (self.group5()[0] * other.group0()[3]) + (other.group0()[0] * self[e45])),
                (-(self.group4()[0] * other.group0()[2]) + (self.group4()[2] * other.group0()[0]) - (self.group5()[1] * other.group0()[3]) + (other.group0()[1] * self[e45])),
                ((self.group4()[0] * other.group0()[1]) - (self.group4()[1] * other.group0()[0]) - (self.group5()[2] * other.group0()[3]) + (other.group0()[2] * self[e45])),
                (-(self.group5()[0] * other.group0()[0]) - (self.group5()[1] * other.group0()[1]) - (self.group5()[2] * other.group0()[2])
                    + (other.group0()[0] * self.group9()[0])
                    + (other.group0()[1] * self.group9()[1])
                    + (other.group0()[2] * self.group9()[2])
                    - (other.group0()[3] * self.group9()[3])),
            ]),
            // e1234
            (other.group0()[3] * self[e45]),
        );
    }
}
impl GeometricAntiProduct<AntiFlector> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      224      256        0
    fn geometric_anti_product(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group4()[0] * other.group0()[0])
                    - (self.group4()[1] * other.group0()[1])
                    - (self.group4()[2] * other.group0()[2])
                    - (other.group0()[3] * self.group3()[3])
                    + (other.group1()[0] * self.group9()[0])
                    + (other.group1()[1] * self.group9()[1])
                    + (other.group1()[2] * self.group9()[2])
                    + (other.group1()[3] * self[e45])),
                (-(self.group7()[0] * other.group0()[0]) - (self.group7()[1] * other.group0()[1]) - (self.group7()[2] * other.group0()[2])
                    + (other.group0()[3] * self.group6()[3])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    + (other.group1()[3] * self.group1()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[0]) - (self.group7()[0] * other.group1()[3]) - (self.group7()[1] * other.group0()[2]) + (self.group7()[2] * other.group0()[1])
                    - (other.group0()[0] * self.group1()[3])
                    + (other.group0()[3] * self.group6()[0])
                    - (other.group1()[1] * self.group6()[2])
                    + (other.group1()[2] * self.group6()[1])),
                ((self.group0()[1] * other.group1()[1]) + (self.group7()[0] * other.group0()[2])
                    - (self.group7()[1] * other.group1()[3])
                    - (self.group7()[2] * other.group0()[0])
                    - (other.group0()[1] * self.group1()[3])
                    + (other.group0()[3] * self.group6()[1])
                    + (other.group1()[0] * self.group6()[2])
                    - (other.group1()[2] * self.group6()[0])),
                ((self.group0()[1] * other.group1()[2]) - (self.group7()[0] * other.group0()[1]) + (self.group7()[1] * other.group0()[0])
                    - (self.group7()[2] * other.group1()[3])
                    - (other.group0()[2] * self.group1()[3])
                    + (other.group0()[3] * self.group6()[2])
                    - (other.group1()[0] * self.group6()[1])
                    + (other.group1()[1] * self.group6()[0])),
                (-(self.group7()[0] * other.group1()[0]) - (self.group7()[1] * other.group1()[1]) - (self.group7()[2] * other.group1()[2])
                    + (other.group0()[3] * self.group1()[3])),
            ]),
            // e5
            ((self.group0()[1] * other.group1()[3]) + (self.group8()[0] * other.group1()[0]) + (self.group8()[1] * other.group1()[1]) + (self.group8()[2] * other.group1()[2])
                - (other.group0()[0] * self.group1()[0])
                - (other.group0()[0] * self.group6()[0])
                - (other.group0()[1] * self.group1()[1])
                - (other.group0()[1] * self.group6()[1])
                - (other.group0()[2] * self.group1()[2])
                - (other.group0()[2] * self.group6()[2])
                - (other.group0()[3] * self[e1])
                + (other.group1()[3] * self.group6()[3])),
            // e15, e25, e35, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group5()[0] * other.group1()[3]) + (self.group5()[1] * other.group0()[2])
                    - (self.group5()[2] * other.group0()[1])
                    - (other.group0()[0] * self.group3()[3])
                    + (other.group0()[1] * self.group9()[2])
                    - (other.group0()[2] * self.group9()[1])
                    - (other.group0()[3] * self.group3()[0])
                    - (other.group1()[0] * self.group9()[3])
                    + (other.group1()[1] * self.group3()[2])
                    - (other.group1()[2] * self.group3()[1])
                    - (other.group1()[3] * self.group9()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group5()[0] * other.group0()[2]) + (self.group5()[1] * other.group1()[3]) + (self.group5()[2] * other.group0()[0])
                    - (other.group0()[0] * self.group9()[2])
                    - (other.group0()[1] * self.group3()[3])
                    + (other.group0()[2] * self.group9()[0])
                    - (other.group0()[3] * self.group3()[1])
                    - (other.group1()[0] * self.group3()[2])
                    - (other.group1()[1] * self.group9()[3])
                    + (other.group1()[2] * self.group3()[0])
                    - (other.group1()[3] * self.group9()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group5()[0] * other.group0()[1]) - (self.group5()[1] * other.group0()[0])
                    + (self.group5()[2] * other.group1()[3])
                    + (other.group0()[0] * self.group9()[1])
                    - (other.group0()[1] * self.group9()[0])
                    - (other.group0()[2] * self.group3()[3])
                    - (other.group0()[3] * self.group3()[2])
                    + (other.group1()[0] * self.group3()[1])
                    - (other.group1()[1] * self.group3()[0])
                    - (other.group1()[2] * self.group9()[3])
                    - (other.group1()[3] * self.group9()[2])),
                (-(self.group0()[0] * other.group0()[3])
                    - (self.group4()[0] * other.group0()[0])
                    - (self.group4()[1] * other.group0()[1])
                    - (self.group4()[2] * other.group0()[2])
                    + (self.group5()[0] * other.group1()[0])
                    + (self.group5()[1] * other.group1()[1])
                    + (self.group5()[2] * other.group1()[2])
                    + (other.group1()[3] * self[e45])),
            ]),
            // e41, e42, e43
            Simd32x3::from([
                ((self.group4()[0] * other.group0()[3]) + (self.group4()[1] * other.group1()[2]) - (self.group4()[2] * other.group1()[1]) + (other.group1()[0] * self[e45])),
                (-(self.group4()[0] * other.group1()[2]) + (self.group4()[1] * other.group0()[3]) + (self.group4()[2] * other.group1()[0]) + (other.group1()[1] * self[e45])),
                ((self.group4()[0] * other.group1()[1]) - (self.group4()[1] * other.group1()[0]) + (self.group4()[2] * other.group0()[3]) + (other.group1()[2] * self[e45])),
            ]),
            // e23, e31, e12
            Simd32x3::from([
                ((self.group4()[0] * other.group1()[3]) + (self.group4()[1] * other.group0()[2]) - (self.group4()[2] * other.group0()[1]) + (other.group0()[0] * self[e45])
                    - (other.group0()[3] * self.group9()[0])
                    - (other.group1()[0] * self.group3()[3])
                    + (other.group1()[1] * self.group9()[2])
                    - (other.group1()[2] * self.group9()[1])),
                (-(self.group4()[0] * other.group0()[2]) + (self.group4()[1] * other.group1()[3]) + (self.group4()[2] * other.group0()[0]) + (other.group0()[1] * self[e45])
                    - (other.group0()[3] * self.group9()[1])
                    - (other.group1()[0] * self.group9()[2])
                    - (other.group1()[1] * self.group3()[3])
                    + (other.group1()[2] * self.group9()[0])),
                ((self.group4()[0] * other.group0()[1]) - (self.group4()[1] * other.group0()[0]) + (self.group4()[2] * other.group1()[3]) + (other.group0()[2] * self[e45])
                    - (other.group0()[3] * self.group9()[2])
                    + (other.group1()[0] * self.group9()[1])
                    - (other.group1()[1] * self.group9()[0])
                    - (other.group1()[2] * self.group3()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group7()[0] * other.group1()[3]) + (self.group7()[1] * other.group0()[2]) - (self.group7()[2] * other.group0()[1])
                    + (other.group0()[0] * self.group1()[3])
                    + (other.group0()[3] * self.group1()[0])
                    + (other.group1()[0] * self.group6()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])),
                (-(self.group7()[0] * other.group0()[2])
                    + (self.group7()[1] * other.group1()[3])
                    + (self.group7()[2] * other.group0()[0])
                    + (other.group0()[1] * self.group1()[3])
                    + (other.group0()[3] * self.group1()[1])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group6()[3])
                    - (other.group1()[2] * self.group1()[0])),
                ((self.group7()[0] * other.group0()[1]) - (self.group7()[1] * other.group0()[0])
                    + (self.group7()[2] * other.group1()[3])
                    + (other.group0()[2] * self.group1()[3])
                    + (other.group0()[3] * self.group1()[2])
                    - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group6()[3])),
                ((self.group0()[1] * other.group0()[3]) + (self.group7()[0] * other.group0()[0]) + (self.group7()[1] * other.group0()[1]) + (self.group7()[2] * other.group0()[2])
                    - (other.group1()[0] * self.group6()[0])
                    - (other.group1()[1] * self.group6()[1])
                    - (other.group1()[2] * self.group6()[2])
                    - (other.group1()[3] * self.group1()[3])),
            ]),
            // e423, e431, e412
            Simd32x3::from([
                ((self.group7()[0] * other.group0()[3]) + (self.group7()[1] * other.group1()[2]) - (self.group7()[2] * other.group1()[1]) + (other.group1()[0] * self.group1()[3])),
                (-(self.group7()[0] * other.group1()[2])
                    + (self.group7()[1] * other.group0()[3])
                    + (self.group7()[2] * other.group1()[0])
                    + (other.group1()[1] * self.group1()[3])),
                ((self.group7()[0] * other.group1()[1]) - (self.group7()[1] * other.group1()[0]) + (self.group7()[2] * other.group0()[3]) + (other.group1()[2] * self.group1()[3])),
            ]),
            // e235, e315, e125
            Simd32x3::from([
                ((self.group0()[1] * other.group0()[0]) - (self.group8()[0] * other.group0()[3]) - (self.group8()[1] * other.group1()[2])
                    + (self.group8()[2] * other.group1()[1])
                    + (other.group0()[0] * self.group6()[3])
                    - (other.group0()[1] * self.group1()[2])
                    - (other.group0()[1] * self.group6()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (other.group0()[2] * self.group6()[1])
                    - (other.group1()[0] * self[e1])
                    + (other.group1()[3] * self.group1()[0])
                    + (other.group1()[3] * self.group6()[0])),
                ((self.group0()[1] * other.group0()[1]) + (self.group8()[0] * other.group1()[2]) - (self.group8()[1] * other.group0()[3]) - (self.group8()[2] * other.group1()[0])
                    + (other.group0()[0] * self.group1()[2])
                    + (other.group0()[0] * self.group6()[2])
                    + (other.group0()[1] * self.group6()[3])
                    - (other.group0()[2] * self.group1()[0])
                    - (other.group0()[2] * self.group6()[0])
                    - (other.group1()[1] * self[e1])
                    + (other.group1()[3] * self.group1()[1])
                    + (other.group1()[3] * self.group6()[1])),
                ((self.group0()[1] * other.group0()[2]) - (self.group8()[0] * other.group1()[1]) + (self.group8()[1] * other.group1()[0])
                    - (self.group8()[2] * other.group0()[3])
                    - (other.group0()[0] * self.group1()[1])
                    - (other.group0()[0] * self.group6()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[1] * self.group6()[0])
                    + (other.group0()[2] * self.group6()[3])
                    - (other.group1()[2] * self[e1])
                    + (other.group1()[3] * self.group1()[2])
                    + (other.group1()[3] * self.group6()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[0]) + (self.group4()[0] * other.group1()[3]) + (self.group4()[1] * other.group0()[2])
                    - (self.group4()[2] * other.group0()[1])
                    - (self.group5()[0] * other.group0()[3])
                    - (self.group5()[1] * other.group1()[2])
                    + (self.group5()[2] * other.group1()[1])
                    + (other.group0()[0] * self[e45])),
                (-(self.group0()[0] * other.group1()[1]) - (self.group4()[0] * other.group0()[2])
                    + (self.group4()[1] * other.group1()[3])
                    + (self.group4()[2] * other.group0()[0])
                    + (self.group5()[0] * other.group1()[2])
                    - (self.group5()[1] * other.group0()[3])
                    - (self.group5()[2] * other.group1()[0])
                    + (other.group0()[1] * self[e45])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group4()[0] * other.group0()[1]) - (self.group4()[1] * other.group0()[0])
                    + (self.group4()[2] * other.group1()[3])
                    - (self.group5()[0] * other.group1()[1])
                    + (self.group5()[1] * other.group1()[0])
                    - (self.group5()[2] * other.group0()[3])
                    + (other.group0()[2] * self[e45])),
                ((self.group0()[0] * other.group1()[3]) - (self.group5()[0] * other.group0()[0]) - (self.group5()[1] * other.group0()[1]) - (self.group5()[2] * other.group0()[2])
                    + (other.group0()[0] * self.group9()[0])
                    + (other.group0()[1] * self.group9()[1])
                    + (other.group0()[2] * self.group9()[2])
                    - (other.group0()[3] * self.group9()[3])
                    + (other.group1()[0] * self.group3()[0])
                    + (other.group1()[1] * self.group3()[1])
                    + (other.group1()[2] * self.group3()[2])
                    - (other.group1()[3] * self.group3()[3])),
            ]),
            // e1234
            (-(self.group4()[0] * other.group1()[0]) - (self.group4()[1] * other.group1()[1]) - (self.group4()[2] * other.group1()[2]) + (other.group0()[3] * self[e45])),
        );
    }
}
impl GeometricAntiProduct<AntiLine> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      160      192        0
    fn geometric_anti_product(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(other.group0()[0] * self.group6()[0])
                    - (other.group0()[1] * self.group6()[1])
                    - (other.group0()[2] * self.group6()[2])
                    - (other.group1()[0] * self.group7()[0])
                    - (other.group1()[1] * self.group7()[1])
                    - (other.group1()[2] * self.group7()[2])),
                ((other.group0()[0] * self.group5()[0])
                    + (other.group0()[1] * self.group5()[1])
                    + (other.group0()[2] * self.group5()[2])
                    + (other.group1()[0] * self.group4()[0])
                    + (other.group1()[1] * self.group4()[1])
                    + (other.group1()[2] * self.group4()[2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self.group9()[2]) + (other.group0()[2] * self.group9()[1]) + (other.group1()[0] * self[e45])
                    - (other.group1()[1] * self.group4()[2])
                    + (other.group1()[2] * self.group4()[1])),
                ((other.group0()[0] * self.group9()[2]) + (other.group0()[1] * self.group3()[3]) - (other.group0()[2] * self.group9()[0])
                    + (other.group1()[0] * self.group4()[2])
                    + (other.group1()[1] * self[e45])
                    - (other.group1()[2] * self.group4()[0])),
                (-(other.group0()[0] * self.group9()[1]) + (other.group0()[1] * self.group9()[0]) + (other.group0()[2] * self.group3()[3])
                    - (other.group1()[0] * self.group4()[1])
                    + (other.group1()[1] * self.group4()[0])
                    + (other.group1()[2] * self[e45])),
                ((other.group0()[0] * self.group4()[0]) + (other.group0()[1] * self.group4()[1]) + (other.group0()[2] * self.group4()[2])),
            ]),
            // e5
            ((other.group0()[0] * self.group3()[0]) + (other.group0()[1] * self.group3()[1]) + (other.group0()[2] * self.group3()[2]) + (other.group1()[0] * self.group5()[0])
                - (other.group1()[0] * self.group9()[0])
                + (other.group1()[1] * self.group5()[1])
                - (other.group1()[1] * self.group9()[1])
                + (other.group1()[2] * self.group5()[2])
                - (other.group1()[2] * self.group9()[2])),
            // e15, e25, e35, e45
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[0]) + (other.group0()[0] * self[e1]) - (other.group0()[1] * self.group8()[2])
                    + (other.group0()[2] * self.group8()[1])
                    + (other.group1()[0] * self.group6()[3])
                    - (other.group1()[1] * self.group1()[2])
                    - (other.group1()[1] * self.group6()[2])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group1()[2] * self.group6()[1])),
                ((self.group0()[1] * other.group1()[1]) + (other.group0()[0] * self.group8()[2]) + (other.group0()[1] * self[e1]) - (other.group0()[2] * self.group8()[0])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[0] * self.group6()[2])
                    + (other.group1()[1] * self.group6()[3])
                    - (other.group1()[2] * self.group1()[0])
                    - (other.group1()[2] * self.group6()[0])),
                ((self.group0()[1] * other.group1()[2]) - (other.group0()[0] * self.group8()[1]) + (other.group0()[1] * self.group8()[0]) + (other.group0()[2] * self[e1])
                    - (other.group1()[0] * self.group1()[1])
                    - (other.group1()[0] * self.group6()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[1] * self.group6()[0])
                    + (other.group1()[2] * self.group6()[3])),
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2])
                    - (other.group1()[0] * self.group7()[0])
                    - (other.group1()[1] * self.group7()[1])
                    - (other.group1()[2] * self.group7()[2])),
            ]),
            // e41, e42, e43
            Simd32x3::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group7()[2]) + (other.group0()[2] * self.group7()[1])),
                ((other.group0()[0] * self.group7()[2]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group7()[0])),
                (-(other.group0()[0] * self.group7()[1]) + (other.group0()[1] * self.group7()[0]) + (other.group0()[2] * self.group1()[3])),
            ]),
            // e23, e31, e12
            Simd32x3::from([
                ((self.group0()[1] * other.group0()[0]) - (other.group0()[1] * self.group6()[2]) + (other.group0()[2] * self.group6()[1]) + (other.group1()[0] * self.group1()[3])
                    - (other.group1()[1] * self.group7()[2])
                    + (other.group1()[2] * self.group7()[1])),
                ((self.group0()[1] * other.group0()[1]) + (other.group0()[0] * self.group6()[2]) - (other.group0()[2] * self.group6()[0])
                    + (other.group1()[0] * self.group7()[2])
                    + (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group7()[0])),
                ((self.group0()[1] * other.group0()[2]) - (other.group0()[0] * self.group6()[1]) + (other.group0()[1] * self.group6()[0]) - (other.group1()[0] * self.group7()[1])
                    + (other.group1()[1] * self.group7()[0])
                    + (other.group1()[2] * self.group1()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[0]) + (other.group0()[1] * self.group5()[2]) - (other.group0()[2] * self.group5()[1]) - (other.group1()[0] * self[e45])
                    + (other.group1()[1] * self.group4()[2])
                    - (other.group1()[2] * self.group4()[1])),
                (-(self.group0()[0] * other.group0()[1]) - (other.group0()[0] * self.group5()[2]) + (other.group0()[2] * self.group5()[0])
                    - (other.group1()[0] * self.group4()[2])
                    - (other.group1()[1] * self[e45])
                    + (other.group1()[2] * self.group4()[0])),
                (-(self.group0()[0] * other.group0()[2]) + (other.group0()[0] * self.group5()[1]) - (other.group0()[1] * self.group5()[0])
                    + (other.group1()[0] * self.group4()[1])
                    - (other.group1()[1] * self.group4()[0])
                    - (other.group1()[2] * self[e45])),
                (-(other.group0()[0] * self.group9()[0])
                    - (other.group0()[1] * self.group9()[1])
                    - (other.group0()[2] * self.group9()[2])
                    - (other.group1()[0] * self.group4()[0])
                    - (other.group1()[1] * self.group4()[1])
                    - (other.group1()[2] * self.group4()[2])),
            ]),
            // e423, e431, e412
            Simd32x3::from([
                (-(other.group0()[0] * self[e45]) + (other.group0()[1] * self.group4()[2]) - (other.group0()[2] * self.group4()[1])),
                (-(other.group0()[0] * self.group4()[2]) - (other.group0()[1] * self[e45]) + (other.group0()[2] * self.group4()[0])),
                ((other.group0()[0] * self.group4()[1]) - (other.group0()[1] * self.group4()[0]) - (other.group0()[2] * self[e45])),
            ]),
            // e235, e315, e125
            Simd32x3::from([
                (-(self.group0()[0] * other.group1()[0]) - (other.group0()[0] * self.group9()[3]) + (other.group0()[1] * self.group3()[2])
                    - (other.group0()[2] * self.group3()[1])
                    + (other.group1()[0] * self.group3()[3])
                    + (other.group1()[1] * self.group5()[2])
                    - (other.group1()[1] * self.group9()[2])
                    - (other.group1()[2] * self.group5()[1])
                    + (other.group1()[2] * self.group9()[1])),
                (-(self.group0()[0] * other.group1()[1]) - (other.group0()[0] * self.group3()[2]) - (other.group0()[1] * self.group9()[3])
                    + (other.group0()[2] * self.group3()[0])
                    - (other.group1()[0] * self.group5()[2])
                    + (other.group1()[0] * self.group9()[2])
                    + (other.group1()[1] * self.group3()[3])
                    + (other.group1()[2] * self.group5()[0])
                    - (other.group1()[2] * self.group9()[0])),
                (-(self.group0()[0] * other.group1()[2]) + (other.group0()[0] * self.group3()[1])
                    - (other.group0()[1] * self.group3()[0])
                    - (other.group0()[2] * self.group9()[3])
                    + (other.group1()[0] * self.group5()[1])
                    - (other.group1()[0] * self.group9()[1])
                    - (other.group1()[1] * self.group5()[0])
                    + (other.group1()[1] * self.group9()[0])
                    + (other.group1()[2] * self.group3()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group6()[3]) + (other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1])
                    + (other.group1()[0] * self.group1()[3])
                    - (other.group1()[1] * self.group7()[2])
                    + (other.group1()[2] * self.group7()[1])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group6()[3])
                    + (other.group0()[2] * self.group1()[0])
                    + (other.group1()[0] * self.group7()[2])
                    + (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group7()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) - (other.group0()[2] * self.group6()[3]) - (other.group1()[0] * self.group7()[1])
                    + (other.group1()[1] * self.group7()[0])
                    + (other.group1()[2] * self.group1()[3])),
                (-(other.group0()[0] * self.group8()[0])
                    - (other.group0()[1] * self.group8()[1])
                    - (other.group0()[2] * self.group8()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[0] * self.group6()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[1] * self.group6()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[2] * self.group6()[2])),
            ]),
            // e1234
            (-(other.group0()[0] * self.group7()[0]) - (other.group0()[1] * self.group7()[1]) - (other.group0()[2] * self.group7()[2])),
        );
    }
}
impl GeometricAntiProduct<AntiMotor> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      224      256        0
    fn geometric_anti_product(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((self.group0()[1] * other.group0()[3])
                    - (self.group7()[0] * other.group1()[0])
                    - (self.group7()[1] * other.group1()[1])
                    - (self.group7()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group6()[0])
                    - (other.group0()[1] * self.group6()[1])
                    - (other.group0()[2] * self.group6()[2])
                    + (other.group1()[3] * self.group1()[3])),
                (-(self.group0()[0] * other.group0()[3])
                    + (self.group4()[0] * other.group1()[0])
                    + (self.group4()[1] * other.group1()[1])
                    + (self.group4()[2] * other.group1()[2])
                    + (self.group5()[0] * other.group0()[0])
                    + (self.group5()[1] * other.group0()[1])
                    + (self.group5()[2] * other.group0()[2])
                    - (other.group1()[3] * self[e45])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group4()[0] * other.group1()[3]) + (self.group4()[1] * other.group1()[2]) - (self.group4()[2] * other.group1()[1]) + (other.group0()[0] * self.group3()[3])
                    - (other.group0()[1] * self.group9()[2])
                    + (other.group0()[2] * self.group9()[1])
                    + (other.group0()[3] * self.group9()[0])
                    + (other.group1()[0] * self[e45])),
                (-(self.group4()[0] * other.group1()[2])
                    + (self.group4()[1] * other.group1()[3])
                    + (self.group4()[2] * other.group1()[0])
                    + (other.group0()[0] * self.group9()[2])
                    + (other.group0()[1] * self.group3()[3])
                    - (other.group0()[2] * self.group9()[0])
                    + (other.group0()[3] * self.group9()[1])
                    + (other.group1()[1] * self[e45])),
                ((self.group4()[0] * other.group1()[1]) - (self.group4()[1] * other.group1()[0]) + (self.group4()[2] * other.group1()[3]) - (other.group0()[0] * self.group9()[1])
                    + (other.group0()[1] * self.group9()[0])
                    + (other.group0()[2] * self.group3()[3])
                    + (other.group0()[3] * self.group9()[2])
                    + (other.group1()[2] * self[e45])),
                ((self.group4()[0] * other.group0()[0]) + (self.group4()[1] * other.group0()[1]) + (self.group4()[2] * other.group0()[2]) - (other.group0()[3] * self[e45])),
            ]),
            // e5
            (-(self.group0()[0] * other.group1()[3])
                + (self.group5()[0] * other.group1()[0])
                + (self.group5()[1] * other.group1()[1])
                + (self.group5()[2] * other.group1()[2])
                + (other.group0()[0] * self.group3()[0])
                + (other.group0()[1] * self.group3()[1])
                + (other.group0()[2] * self.group3()[2])
                - (other.group0()[3] * self.group9()[3])
                - (other.group1()[0] * self.group9()[0])
                - (other.group1()[1] * self.group9()[1])
                - (other.group1()[2] * self.group9()[2])
                + (other.group1()[3] * self.group3()[3])),
            // e15, e25, e35, e45
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[0]) + (self.group8()[0] * other.group0()[3]) + (self.group8()[1] * other.group0()[2]) - (self.group8()[2] * other.group0()[1])
                    + (other.group0()[0] * self[e1])
                    + (other.group1()[0] * self.group6()[3])
                    - (other.group1()[1] * self.group1()[2])
                    - (other.group1()[1] * self.group6()[2])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group1()[2] * self.group6()[1])
                    + (other.group1()[3] * self.group1()[0])
                    + (other.group1()[3] * self.group6()[0])),
                ((self.group0()[1] * other.group1()[1]) - (self.group8()[0] * other.group0()[2])
                    + (self.group8()[1] * other.group0()[3])
                    + (self.group8()[2] * other.group0()[0])
                    + (other.group0()[1] * self[e1])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[0] * self.group6()[2])
                    + (other.group1()[1] * self.group6()[3])
                    - (other.group1()[2] * self.group1()[0])
                    - (other.group1()[2] * self.group6()[0])
                    + (other.group1()[3] * self.group1()[1])
                    + (other.group1()[3] * self.group6()[1])),
                ((self.group0()[1] * other.group1()[2]) + (self.group8()[0] * other.group0()[1]) - (self.group8()[1] * other.group0()[0])
                    + (self.group8()[2] * other.group0()[3])
                    + (other.group0()[2] * self[e1])
                    - (other.group1()[0] * self.group1()[1])
                    - (other.group1()[0] * self.group6()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[1] * self.group6()[0])
                    + (other.group1()[2] * self.group6()[3])
                    + (other.group1()[3] * self.group1()[2])
                    + (other.group1()[3] * self.group6()[2])),
                (-(self.group7()[0] * other.group1()[0]) - (self.group7()[1] * other.group1()[1]) - (self.group7()[2] * other.group1()[2])
                    + (other.group0()[0] * self.group1()[0])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[2])
                    - (other.group0()[3] * self.group6()[3])
                    + (other.group1()[3] * self.group1()[3])),
            ]),
            // e41, e42, e43
            Simd32x3::from([
                ((self.group7()[0] * other.group0()[3]) + (self.group7()[1] * other.group0()[2]) - (self.group7()[2] * other.group0()[1]) + (other.group0()[0] * self.group1()[3])),
                (-(self.group7()[0] * other.group0()[2])
                    + (self.group7()[1] * other.group0()[3])
                    + (self.group7()[2] * other.group0()[0])
                    + (other.group0()[1] * self.group1()[3])),
                ((self.group7()[0] * other.group0()[1]) - (self.group7()[1] * other.group0()[0]) + (self.group7()[2] * other.group0()[3]) + (other.group0()[2] * self.group1()[3])),
            ]),
            // e23, e31, e12
            Simd32x3::from([
                ((self.group0()[1] * other.group0()[0]) + (self.group7()[0] * other.group1()[3]) + (self.group7()[1] * other.group1()[2])
                    - (self.group7()[2] * other.group1()[1])
                    - (other.group0()[1] * self.group6()[2])
                    + (other.group0()[2] * self.group6()[1])
                    + (other.group0()[3] * self.group6()[0])
                    + (other.group1()[0] * self.group1()[3])),
                ((self.group0()[1] * other.group0()[1]) - (self.group7()[0] * other.group1()[2])
                    + (self.group7()[1] * other.group1()[3])
                    + (self.group7()[2] * other.group1()[0])
                    + (other.group0()[0] * self.group6()[2])
                    - (other.group0()[2] * self.group6()[0])
                    + (other.group0()[3] * self.group6()[1])
                    + (other.group1()[1] * self.group1()[3])),
                ((self.group0()[1] * other.group0()[2]) + (self.group7()[0] * other.group1()[1]) - (self.group7()[1] * other.group1()[0]) + (self.group7()[2] * other.group1()[3])
                    - (other.group0()[0] * self.group6()[1])
                    + (other.group0()[1] * self.group6()[0])
                    + (other.group0()[3] * self.group6()[2])
                    + (other.group1()[2] * self.group1()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[0]) - (self.group4()[0] * other.group1()[3]) - (self.group4()[1] * other.group1()[2])
                    + (self.group4()[2] * other.group1()[1])
                    - (self.group5()[0] * other.group0()[3])
                    - (self.group5()[1] * other.group0()[2])
                    + (self.group5()[2] * other.group0()[1])
                    - (other.group1()[0] * self[e45])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group4()[0] * other.group1()[2])
                    - (self.group4()[1] * other.group1()[3])
                    - (self.group4()[2] * other.group1()[0])
                    + (self.group5()[0] * other.group0()[2])
                    - (self.group5()[1] * other.group0()[3])
                    - (self.group5()[2] * other.group0()[0])
                    - (other.group1()[1] * self[e45])),
                (-(self.group0()[0] * other.group0()[2]) - (self.group4()[0] * other.group1()[1]) + (self.group4()[1] * other.group1()[0])
                    - (self.group4()[2] * other.group1()[3])
                    - (self.group5()[0] * other.group0()[1])
                    + (self.group5()[1] * other.group0()[0])
                    - (self.group5()[2] * other.group0()[3])
                    - (other.group1()[2] * self[e45])),
                (-(self.group4()[0] * other.group1()[0])
                    - (self.group4()[1] * other.group1()[1])
                    - (self.group4()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group9()[0])
                    - (other.group0()[1] * self.group9()[1])
                    - (other.group0()[2] * self.group9()[2])
                    + (other.group0()[3] * self.group3()[3])
                    + (other.group1()[3] * self[e45])),
            ]),
            // e423, e431, e412
            Simd32x3::from([
                (-(self.group4()[0] * other.group0()[3]) - (self.group4()[1] * other.group0()[2]) + (self.group4()[2] * other.group0()[1]) - (other.group0()[0] * self[e45])),
                ((self.group4()[0] * other.group0()[2]) - (self.group4()[1] * other.group0()[3]) - (self.group4()[2] * other.group0()[0]) - (other.group0()[1] * self[e45])),
                (-(self.group4()[0] * other.group0()[1]) + (self.group4()[1] * other.group0()[0]) - (self.group4()[2] * other.group0()[3]) - (other.group0()[2] * self[e45])),
            ]),
            // e235, e315, e125
            Simd32x3::from([
                (-(self.group0()[0] * other.group1()[0]) - (self.group5()[0] * other.group1()[3]) - (self.group5()[1] * other.group1()[2])
                    + (self.group5()[2] * other.group1()[1])
                    - (other.group0()[0] * self.group9()[3])
                    + (other.group0()[1] * self.group3()[2])
                    - (other.group0()[2] * self.group3()[1])
                    - (other.group0()[3] * self.group3()[0])
                    + (other.group1()[0] * self.group3()[3])
                    - (other.group1()[1] * self.group9()[2])
                    + (other.group1()[2] * self.group9()[1])
                    + (other.group1()[3] * self.group9()[0])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group5()[0] * other.group1()[2])
                    - (self.group5()[1] * other.group1()[3])
                    - (self.group5()[2] * other.group1()[0])
                    - (other.group0()[0] * self.group3()[2])
                    - (other.group0()[1] * self.group9()[3])
                    + (other.group0()[2] * self.group3()[0])
                    - (other.group0()[3] * self.group3()[1])
                    + (other.group1()[0] * self.group9()[2])
                    + (other.group1()[1] * self.group3()[3])
                    - (other.group1()[2] * self.group9()[0])
                    + (other.group1()[3] * self.group9()[1])),
                (-(self.group0()[0] * other.group1()[2]) - (self.group5()[0] * other.group1()[1]) + (self.group5()[1] * other.group1()[0])
                    - (self.group5()[2] * other.group1()[3])
                    + (other.group0()[0] * self.group3()[1])
                    - (other.group0()[1] * self.group3()[0])
                    - (other.group0()[2] * self.group9()[3])
                    - (other.group0()[3] * self.group3()[2])
                    - (other.group1()[0] * self.group9()[1])
                    + (other.group1()[1] * self.group9()[0])
                    + (other.group1()[2] * self.group3()[3])
                    + (other.group1()[3] * self.group9()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group7()[0] * other.group1()[3]) + (self.group7()[1] * other.group1()[2]) - (self.group7()[2] * other.group1()[1]) - (other.group0()[0] * self.group6()[3])
                    + (other.group0()[1] * self.group1()[2])
                    - (other.group0()[2] * self.group1()[1])
                    - (other.group0()[3] * self.group1()[0])
                    + (other.group1()[0] * self.group1()[3])),
                (-(self.group7()[0] * other.group1()[2]) + (self.group7()[1] * other.group1()[3]) + (self.group7()[2] * other.group1()[0])
                    - (other.group0()[0] * self.group1()[2])
                    - (other.group0()[1] * self.group6()[3])
                    + (other.group0()[2] * self.group1()[0])
                    - (other.group0()[3] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[3])),
                ((self.group7()[0] * other.group1()[1]) - (self.group7()[1] * other.group1()[0]) + (self.group7()[2] * other.group1()[3]) + (other.group0()[0] * self.group1()[1])
                    - (other.group0()[1] * self.group1()[0])
                    - (other.group0()[2] * self.group6()[3])
                    - (other.group0()[3] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[3])),
                ((self.group0()[1] * other.group1()[3]) - (self.group8()[0] * other.group0()[0]) - (self.group8()[1] * other.group0()[1]) - (self.group8()[2] * other.group0()[2])
                    + (other.group0()[3] * self[e1])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[0] * self.group6()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[1] * self.group6()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[2] * self.group6()[2])
                    + (other.group1()[3] * self.group6()[3])),
            ]),
            // e1234
            (-(self.group7()[0] * other.group0()[0]) - (self.group7()[1] * other.group0()[1]) - (self.group7()[2] * other.group0()[2]) + (other.group0()[3] * self.group1()[3])),
        );
    }
}
impl GeometricAntiProduct<AntiPlane> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       96      128        0
    fn geometric_anti_product(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((other.group0()[0] * self.group9()[0]) + (other.group0()[1] * self.group9()[1]) + (other.group0()[2] * self.group9()[2]) + (other.group0()[3] * self[e45])),
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])
                    + (other.group0()[3] * self.group1()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[0]) - (self.group7()[0] * other.group0()[3]) - (other.group0()[1] * self.group6()[2]) + (other.group0()[2] * self.group6()[1])),
                ((self.group0()[1] * other.group0()[1]) - (self.group7()[1] * other.group0()[3]) + (other.group0()[0] * self.group6()[2]) - (other.group0()[2] * self.group6()[0])),
                ((self.group0()[1] * other.group0()[2]) - (self.group7()[2] * other.group0()[3]) - (other.group0()[0] * self.group6()[1]) + (other.group0()[1] * self.group6()[0])),
                (-(self.group7()[0] * other.group0()[0]) - (self.group7()[1] * other.group0()[1]) - (self.group7()[2] * other.group0()[2])),
            ]),
            // e5
            ((self.group0()[1] * other.group0()[3])
                + (self.group8()[0] * other.group0()[0])
                + (self.group8()[1] * other.group0()[1])
                + (self.group8()[2] * other.group0()[2])
                + (other.group0()[3] * self.group6()[3])),
            // e15, e25, e35, e45
            Simd32x4::from([
                ((self.group5()[0] * other.group0()[3]) - (other.group0()[0] * self.group9()[3]) + (other.group0()[1] * self.group3()[2])
                    - (other.group0()[2] * self.group3()[1])
                    - (other.group0()[3] * self.group9()[0])),
                ((self.group5()[1] * other.group0()[3]) - (other.group0()[0] * self.group3()[2]) - (other.group0()[1] * self.group9()[3]) + (other.group0()[2] * self.group3()[0])
                    - (other.group0()[3] * self.group9()[1])),
                ((self.group5()[2] * other.group0()[3]) + (other.group0()[0] * self.group3()[1])
                    - (other.group0()[1] * self.group3()[0])
                    - (other.group0()[2] * self.group9()[3])
                    - (other.group0()[3] * self.group9()[2])),
                ((self.group5()[0] * other.group0()[0]) + (self.group5()[1] * other.group0()[1]) + (self.group5()[2] * other.group0()[2]) + (other.group0()[3] * self[e45])),
            ]),
            // e41, e42, e43
            Simd32x3::from([
                ((self.group4()[1] * other.group0()[2]) - (self.group4()[2] * other.group0()[1]) + (other.group0()[0] * self[e45])),
                (-(self.group4()[0] * other.group0()[2]) + (self.group4()[2] * other.group0()[0]) + (other.group0()[1] * self[e45])),
                ((self.group4()[0] * other.group0()[1]) - (self.group4()[1] * other.group0()[0]) + (other.group0()[2] * self[e45])),
            ]),
            // e23, e31, e12
            Simd32x3::from([
                ((self.group4()[0] * other.group0()[3]) - (other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self.group9()[2]) - (other.group0()[2] * self.group9()[1])),
                ((self.group4()[1] * other.group0()[3]) - (other.group0()[0] * self.group9()[2]) - (other.group0()[1] * self.group3()[3]) + (other.group0()[2] * self.group9()[0])),
                ((self.group4()[2] * other.group0()[3]) + (other.group0()[0] * self.group9()[1]) - (other.group0()[1] * self.group9()[0]) - (other.group0()[2] * self.group3()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group7()[0] * other.group0()[3]) + (other.group0()[0] * self.group6()[3]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1])),
                ((self.group7()[1] * other.group0()[3]) + (other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group6()[3]) - (other.group0()[2] * self.group1()[0])),
                ((self.group7()[2] * other.group0()[3]) - (other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group6()[3])),
                (-(other.group0()[0] * self.group6()[0])
                    - (other.group0()[1] * self.group6()[1])
                    - (other.group0()[2] * self.group6()[2])
                    - (other.group0()[3] * self.group1()[3])),
            ]),
            // e423, e431, e412
            Simd32x3::from([
                ((self.group7()[1] * other.group0()[2]) - (self.group7()[2] * other.group0()[1]) + (other.group0()[0] * self.group1()[3])),
                (-(self.group7()[0] * other.group0()[2]) + (self.group7()[2] * other.group0()[0]) + (other.group0()[1] * self.group1()[3])),
                ((self.group7()[0] * other.group0()[1]) - (self.group7()[1] * other.group0()[0]) + (other.group0()[2] * self.group1()[3])),
            ]),
            // e235, e315, e125
            Simd32x3::from([
                (-(self.group8()[1] * other.group0()[2]) + (self.group8()[2] * other.group0()[1]) - (other.group0()[0] * self[e1])
                    + (other.group0()[3] * self.group1()[0])
                    + (other.group0()[3] * self.group6()[0])),
                ((self.group8()[0] * other.group0()[2]) - (self.group8()[2] * other.group0()[0]) - (other.group0()[1] * self[e1])
                    + (other.group0()[3] * self.group1()[1])
                    + (other.group0()[3] * self.group6()[1])),
                (-(self.group8()[0] * other.group0()[1]) + (self.group8()[1] * other.group0()[0]) - (other.group0()[2] * self[e1])
                    + (other.group0()[3] * self.group1()[2])
                    + (other.group0()[3] * self.group6()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[0]) + (self.group4()[0] * other.group0()[3]) - (self.group5()[1] * other.group0()[2])
                    + (self.group5()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group4()[1] * other.group0()[3]) + (self.group5()[0] * other.group0()[2])
                    - (self.group5()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group4()[2] * other.group0()[3]) - (self.group5()[0] * other.group0()[1])
                    + (self.group5()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[3]) + (other.group0()[0] * self.group3()[0]) + (other.group0()[1] * self.group3()[1]) + (other.group0()[2] * self.group3()[2])
                    - (other.group0()[3] * self.group3()[3])),
            ]),
            // e1234
            (-(self.group4()[0] * other.group0()[0]) - (self.group4()[1] * other.group0()[1]) - (self.group4()[2] * other.group0()[2])),
        );
    }
}
impl GeometricAntiProduct<AntiScalar> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0       32        0
    fn geometric_anti_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([(self.group0()[0] * other[e12345]), (self.group0()[1] * other[e12345])]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group1()[0] * other[e12345]),
                (self.group1()[1] * other[e12345]),
                (self.group1()[2] * other[e12345]),
                (self.group1()[3] * other[e12345]),
            ]),
            // e5
            (other[e12345] * self[e1]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group3()[0] * other[e12345]),
                (self.group3()[1] * other[e12345]),
                (self.group3()[2] * other[e12345]),
                (self.group3()[3] * other[e12345]),
            ]),
            // e41, e42, e43
            Simd32x3::from([(self.group4()[0] * other[e12345]), (self.group4()[1] * other[e12345]), (self.group4()[2] * other[e12345])]),
            // e23, e31, e12
            Simd32x3::from([(self.group5()[0] * other[e12345]), (self.group5()[1] * other[e12345]), (self.group5()[2] * other[e12345])]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group6()[0] * other[e12345]),
                (self.group6()[1] * other[e12345]),
                (self.group6()[2] * other[e12345]),
                (self.group6()[3] * other[e12345]),
            ]),
            // e423, e431, e412
            Simd32x3::from([(self.group7()[0] * other[e12345]), (self.group7()[1] * other[e12345]), (self.group7()[2] * other[e12345])]),
            // e235, e315, e125
            Simd32x3::from([(self.group8()[0] * other[e12345]), (self.group8()[1] * other[e12345]), (self.group8()[2] * other[e12345])]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group9()[0] * other[e12345]),
                (self.group9()[1] * other[e12345]),
                (self.group9()[2] * other[e12345]),
                (self.group9()[3] * other[e12345]),
            ]),
            // e1234
            (other[e12345] * self[e45]),
        );
    }
}
impl GeometricAntiProduct<Circle> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      288      320        0
    fn geometric_anti_product(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(other.group0()[0] * self.group3()[0])
                    - (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group3()[2])
                    - (other.group2()[0] * self.group4()[0])
                    - (other.group2()[1] * self.group4()[1])
                    - (other.group2()[2] * self.group4()[2])
                    - (self.group5()[0] * other.group1()[0])
                    - (self.group5()[1] * other.group1()[1])
                    - (self.group5()[2] * other.group1()[2])
                    - (other.group1()[3] * self.group3()[3])),
                (-(other.group0()[0] * self.group8()[0])
                    - (other.group0()[1] * self.group8()[1])
                    - (other.group0()[2] * self.group8()[2])
                    - (other.group2()[0] * self.group7()[0])
                    - (other.group2()[1] * self.group7()[1])
                    - (other.group2()[2] * self.group7()[2])
                    - (other.group1()[0] * self.group6()[0])
                    - (other.group1()[1] * self.group6()[1])
                    - (other.group1()[2] * self.group6()[2])
                    + (other.group1()[3] * self.group6()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self[e1]) - (other.group0()[1] * self.group8()[2]) + (other.group0()[2] * self.group8()[1]) - (other.group2()[0] * self.group1()[3])
                    + (other.group2()[1] * self.group7()[2])
                    - (other.group2()[2] * self.group7()[1])
                    + (other.group1()[0] * self.group6()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group1()[3] * self.group6()[0])),
                ((other.group0()[0] * self.group8()[2]) + (other.group0()[1] * self[e1])
                    - (other.group0()[2] * self.group8()[0])
                    - (other.group2()[0] * self.group7()[2])
                    - (other.group2()[1] * self.group1()[3])
                    + (other.group2()[2] * self.group7()[0])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group6()[3])
                    - (other.group1()[2] * self.group1()[0])
                    + (other.group1()[3] * self.group6()[1])),
                (-(other.group0()[0] * self.group8()[1]) + (other.group0()[1] * self.group8()[0]) + (other.group0()[2] * self[e1]) + (other.group2()[0] * self.group7()[1])
                    - (other.group2()[1] * self.group7()[0])
                    - (other.group2()[2] * self.group1()[3])
                    - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group6()[3])
                    + (other.group1()[3] * self.group6()[2])),
                ((other.group0()[0] * self.group1()[0]) - (other.group0()[0] * self.group6()[0]) + (other.group0()[1] * self.group1()[1]) - (other.group0()[1] * self.group6()[1])
                    + (other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group6()[2])
                    - (self.group7()[0] * other.group1()[0])
                    - (self.group7()[1] * other.group1()[1])
                    - (self.group7()[2] * other.group1()[2])
                    + (other.group1()[3] * self.group1()[3])),
            ]),
            // e5
            (-(other.group2()[0] * self.group1()[0])
                - (other.group2()[0] * self.group6()[0])
                - (other.group2()[1] * self.group1()[1])
                - (other.group2()[1] * self.group6()[1])
                - (other.group2()[2] * self.group1()[2])
                - (other.group2()[2] * self.group6()[2])
                - (self.group8()[0] * other.group1()[0])
                - (self.group8()[1] * other.group1()[1])
                - (self.group8()[2] * other.group1()[2])
                - (other.group1()[3] * self[e1])),
            // e15, e25, e35, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) - (other.group2()[0] * self.group3()[3]) - (other.group2()[1] * self.group5()[2])
                    + (other.group2()[1] * self.group9()[2])
                    + (other.group2()[2] * self.group5()[1])
                    - (other.group2()[2] * self.group9()[1])
                    + (other.group1()[0] * self.group9()[3])
                    - (other.group1()[1] * self.group3()[2])
                    + (other.group1()[2] * self.group3()[1])
                    - (other.group1()[3] * self.group3()[0])),
                ((self.group0()[0] * other.group2()[1]) + (other.group2()[0] * self.group5()[2])
                    - (other.group2()[0] * self.group9()[2])
                    - (other.group2()[1] * self.group3()[3])
                    - (other.group2()[2] * self.group5()[0])
                    + (other.group2()[2] * self.group9()[0])
                    + (other.group1()[0] * self.group3()[2])
                    + (other.group1()[1] * self.group9()[3])
                    - (other.group1()[2] * self.group3()[0])
                    - (other.group1()[3] * self.group3()[1])),
                ((self.group0()[0] * other.group2()[2]) - (other.group2()[0] * self.group5()[1]) + (other.group2()[0] * self.group9()[1]) + (other.group2()[1] * self.group5()[0])
                    - (other.group2()[1] * self.group9()[0])
                    - (other.group2()[2] * self.group3()[3])
                    - (other.group1()[0] * self.group3()[1])
                    + (other.group1()[1] * self.group3()[0])
                    + (other.group1()[2] * self.group9()[3])
                    - (other.group1()[3] * self.group3()[2])),
                (-(self.group0()[0] * other.group1()[3])
                    + (other.group0()[0] * self.group3()[0])
                    + (other.group0()[1] * self.group3()[1])
                    + (other.group0()[2] * self.group3()[2])
                    - (other.group2()[0] * self.group4()[0])
                    - (other.group2()[1] * self.group4()[1])
                    - (other.group2()[2] * self.group4()[2])
                    - (other.group1()[0] * self.group9()[0])
                    - (other.group1()[1] * self.group9()[1])
                    - (other.group1()[2] * self.group9()[2])),
            ]),
            // e41, e42, e43
            Simd32x3::from([
                ((self.group0()[0] * other.group0()[0]) + (other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self.group5()[2]) - (other.group0()[1] * self.group9()[2])
                    + (other.group0()[2] * self.group5()[1])
                    + (other.group0()[2] * self.group9()[1])
                    + (self.group4()[0] * other.group1()[3])
                    + (self.group4()[1] * other.group1()[2])
                    - (self.group4()[2] * other.group1()[1])
                    + (other.group1()[0] * self[e45])),
                ((self.group0()[0] * other.group0()[1]) + (other.group0()[0] * self.group5()[2]) + (other.group0()[0] * self.group9()[2]) + (other.group0()[1] * self.group3()[3])
                    - (other.group0()[2] * self.group5()[0])
                    - (other.group0()[2] * self.group9()[0])
                    - (self.group4()[0] * other.group1()[2])
                    + (self.group4()[1] * other.group1()[3])
                    + (self.group4()[2] * other.group1()[0])
                    + (other.group1()[1] * self[e45])),
                ((self.group0()[0] * other.group0()[2]) - (other.group0()[0] * self.group5()[1]) - (other.group0()[0] * self.group9()[1])
                    + (other.group0()[1] * self.group5()[0])
                    + (other.group0()[1] * self.group9()[0])
                    + (other.group0()[2] * self.group3()[3])
                    + (self.group4()[0] * other.group1()[1])
                    - (self.group4()[1] * other.group1()[0])
                    + (self.group4()[2] * other.group1()[3])
                    + (other.group1()[2] * self[e45])),
            ]),
            // e23, e31, e12
            Simd32x3::from([
                ((self.group0()[0] * other.group1()[0]) + (other.group0()[0] * self.group9()[3]) - (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group3()[1])
                    + (other.group2()[0] * self[e45])
                    - (other.group2()[1] * self.group4()[2])
                    + (other.group2()[2] * self.group4()[1])
                    + (self.group5()[1] * other.group1()[2])
                    - (self.group5()[2] * other.group1()[1])
                    - (other.group1()[3] * self.group9()[0])),
                ((self.group0()[0] * other.group1()[1]) + (other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group9()[3]) - (other.group0()[2] * self.group3()[0])
                    + (other.group2()[0] * self.group4()[2])
                    + (other.group2()[1] * self[e45])
                    - (other.group2()[2] * self.group4()[0])
                    - (self.group5()[0] * other.group1()[2])
                    + (self.group5()[2] * other.group1()[0])
                    - (other.group1()[3] * self.group9()[1])),
                ((self.group0()[0] * other.group1()[2]) - (other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group3()[0]) + (other.group0()[2] * self.group9()[3])
                    - (other.group2()[0] * self.group4()[1])
                    + (other.group2()[1] * self.group4()[0])
                    + (other.group2()[2] * self[e45])
                    + (self.group5()[0] * other.group1()[1])
                    - (self.group5()[1] * other.group1()[0])
                    - (other.group1()[3] * self.group9()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[0]) + (other.group0()[0] * self[e1]) - (other.group0()[1] * self.group8()[2])
                    + (other.group0()[2] * self.group8()[1])
                    + (other.group2()[0] * self.group1()[3])
                    - (other.group2()[1] * self.group7()[2])
                    + (other.group2()[2] * self.group7()[1])
                    - (other.group1()[1] * self.group6()[2])
                    + (other.group1()[2] * self.group6()[1])
                    + (other.group1()[3] * self.group1()[0])),
                ((self.group0()[1] * other.group1()[1]) + (other.group0()[0] * self.group8()[2]) + (other.group0()[1] * self[e1]) - (other.group0()[2] * self.group8()[0])
                    + (other.group2()[0] * self.group7()[2])
                    + (other.group2()[1] * self.group1()[3])
                    - (other.group2()[2] * self.group7()[0])
                    + (other.group1()[0] * self.group6()[2])
                    - (other.group1()[2] * self.group6()[0])
                    + (other.group1()[3] * self.group1()[1])),
                ((self.group0()[1] * other.group1()[2]) - (other.group0()[0] * self.group8()[1]) + (other.group0()[1] * self.group8()[0]) + (other.group0()[2] * self[e1])
                    - (other.group2()[0] * self.group7()[1])
                    + (other.group2()[1] * self.group7()[0])
                    + (other.group2()[2] * self.group1()[3])
                    - (other.group1()[0] * self.group6()[1])
                    + (other.group1()[1] * self.group6()[0])
                    + (other.group1()[3] * self.group1()[2])),
                ((self.group0()[1] * other.group1()[3]) - (other.group0()[0] * self.group8()[0]) - (other.group0()[1] * self.group8()[1]) - (other.group0()[2] * self.group8()[2])
                    + (other.group2()[0] * self.group7()[0])
                    + (other.group2()[1] * self.group7()[1])
                    + (other.group2()[2] * self.group7()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])),
            ]),
            // e423, e431, e412
            Simd32x3::from([
                ((self.group0()[1] * other.group0()[0]) - (other.group0()[0] * self.group6()[3]) + (other.group0()[1] * self.group1()[2])
                    - (other.group0()[1] * self.group6()[2])
                    - (other.group0()[2] * self.group1()[1])
                    + (other.group0()[2] * self.group6()[1])
                    + (self.group7()[0] * other.group1()[3])
                    + (self.group7()[1] * other.group1()[2])
                    - (self.group7()[2] * other.group1()[1])
                    + (other.group1()[0] * self.group1()[3])),
                ((self.group0()[1] * other.group0()[1]) - (other.group0()[0] * self.group1()[2]) + (other.group0()[0] * self.group6()[2]) - (other.group0()[1] * self.group6()[3])
                    + (other.group0()[2] * self.group1()[0])
                    - (other.group0()[2] * self.group6()[0])
                    - (self.group7()[0] * other.group1()[2])
                    + (self.group7()[1] * other.group1()[3])
                    + (self.group7()[2] * other.group1()[0])
                    + (other.group1()[1] * self.group1()[3])),
                ((self.group0()[1] * other.group0()[2]) + (other.group0()[0] * self.group1()[1]) - (other.group0()[0] * self.group6()[1]) - (other.group0()[1] * self.group1()[0])
                    + (other.group0()[1] * self.group6()[0])
                    - (other.group0()[2] * self.group6()[3])
                    + (self.group7()[0] * other.group1()[1])
                    - (self.group7()[1] * other.group1()[0])
                    + (self.group7()[2] * other.group1()[3])
                    + (other.group1()[2] * self.group1()[3])),
            ]),
            // e235, e315, e125
            Simd32x3::from([
                ((self.group0()[1] * other.group2()[0]) + (other.group2()[0] * self.group6()[3]) - (other.group2()[1] * self.group1()[2]) - (other.group2()[1] * self.group6()[2])
                    + (other.group2()[2] * self.group1()[1])
                    + (other.group2()[2] * self.group6()[1])
                    - (self.group8()[0] * other.group1()[3])
                    + (self.group8()[1] * other.group1()[2])
                    - (self.group8()[2] * other.group1()[1])
                    + (other.group1()[0] * self[e1])),
                ((self.group0()[1] * other.group2()[1]) + (other.group2()[0] * self.group1()[2]) + (other.group2()[0] * self.group6()[2]) + (other.group2()[1] * self.group6()[3])
                    - (other.group2()[2] * self.group1()[0])
                    - (other.group2()[2] * self.group6()[0])
                    - (self.group8()[0] * other.group1()[2])
                    - (self.group8()[1] * other.group1()[3])
                    + (self.group8()[2] * other.group1()[0])
                    + (other.group1()[1] * self[e1])),
                ((self.group0()[1] * other.group2()[2]) - (other.group2()[0] * self.group1()[1]) - (other.group2()[0] * self.group6()[1])
                    + (other.group2()[1] * self.group1()[0])
                    + (other.group2()[1] * self.group6()[0])
                    + (other.group2()[2] * self.group6()[3])
                    + (self.group8()[0] * other.group1()[1])
                    - (self.group8()[1] * other.group1()[0])
                    - (self.group8()[2] * other.group1()[3])
                    + (other.group1()[2] * self[e1])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group9()[3]) + (other.group0()[1] * self.group3()[2]) - (other.group0()[2] * self.group3()[1]) + (other.group2()[0] * self[e45])
                    - (other.group2()[1] * self.group4()[2])
                    + (other.group2()[2] * self.group4()[1])
                    - (self.group5()[0] * other.group1()[3])
                    + (other.group1()[0] * self.group3()[3])
                    - (other.group1()[1] * self.group9()[2])
                    + (other.group1()[2] * self.group9()[1])),
                (-(other.group0()[0] * self.group3()[2]) - (other.group0()[1] * self.group9()[3])
                    + (other.group0()[2] * self.group3()[0])
                    + (other.group2()[0] * self.group4()[2])
                    + (other.group2()[1] * self[e45])
                    - (other.group2()[2] * self.group4()[0])
                    - (self.group5()[1] * other.group1()[3])
                    + (other.group1()[0] * self.group9()[2])
                    + (other.group1()[1] * self.group3()[3])
                    - (other.group1()[2] * self.group9()[0])),
                ((other.group0()[0] * self.group3()[1]) - (other.group0()[1] * self.group3()[0]) - (other.group0()[2] * self.group9()[3]) - (other.group2()[0] * self.group4()[1])
                    + (other.group2()[1] * self.group4()[0])
                    + (other.group2()[2] * self[e45])
                    - (self.group5()[2] * other.group1()[3])
                    - (other.group1()[0] * self.group9()[1])
                    + (other.group1()[1] * self.group9()[0])
                    + (other.group1()[2] * self.group3()[3])),
                (-(other.group2()[0] * self.group5()[0]) + (other.group2()[0] * self.group9()[0]) - (other.group2()[1] * self.group5()[1])
                    + (other.group2()[1] * self.group9()[1])
                    - (other.group2()[2] * self.group5()[2])
                    + (other.group2()[2] * self.group9()[2])
                    - (other.group1()[0] * self.group3()[0])
                    - (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group3()[2])
                    - (other.group1()[3] * self.group9()[3])),
            ]),
            // e1234
            (-(other.group0()[0] * self.group5()[0])
                - (other.group0()[0] * self.group9()[0])
                - (other.group0()[1] * self.group5()[1])
                - (other.group0()[1] * self.group9()[1])
                - (other.group0()[2] * self.group5()[2])
                - (other.group0()[2] * self.group9()[2])
                - (self.group4()[0] * other.group1()[0])
                - (self.group4()[1] * other.group1()[1])
                - (self.group4()[2] * other.group1()[2])
                + (other.group1()[3] * self[e45])),
        );
    }
}
impl GeometricAntiProduct<CircleRotor> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      320      352        0
    fn geometric_anti_product(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((self.group0()[0] * other.group2()[3])
                    - (other.group0()[0] * self.group3()[0])
                    - (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group3()[2])
                    - (self.group4()[0] * other.group2()[0])
                    - (self.group4()[1] * other.group2()[1])
                    - (self.group4()[2] * other.group2()[2])
                    - (self.group5()[0] * other.group1()[0])
                    - (self.group5()[1] * other.group1()[1])
                    - (self.group5()[2] * other.group1()[2])
                    - (other.group1()[3] * self.group3()[3])),
                ((self.group0()[1] * other.group2()[3])
                    - (other.group0()[0] * self.group8()[0])
                    - (other.group0()[1] * self.group8()[1])
                    - (other.group0()[2] * self.group8()[2])
                    - (self.group7()[0] * other.group2()[0])
                    - (self.group7()[1] * other.group2()[1])
                    - (self.group7()[2] * other.group2()[2])
                    - (other.group1()[0] * self.group6()[0])
                    - (other.group1()[1] * self.group6()[1])
                    - (other.group1()[2] * self.group6()[2])
                    + (other.group1()[3] * self.group6()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self[e1]) - (other.group0()[1] * self.group8()[2]) + (other.group0()[2] * self.group8()[1]) - (self.group7()[1] * other.group2()[2])
                    + (self.group7()[2] * other.group2()[1])
                    + (other.group1()[0] * self.group6()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group1()[3] * self.group6()[0])
                    - (other.group2()[0] * self.group1()[3])
                    + (other.group2()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group8()[2]) + (other.group0()[1] * self[e1]) - (other.group0()[2] * self.group8()[0]) + (self.group7()[0] * other.group2()[2])
                    - (self.group7()[2] * other.group2()[0])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group6()[3])
                    - (other.group1()[2] * self.group1()[0])
                    + (other.group1()[3] * self.group6()[1])
                    - (other.group2()[1] * self.group1()[3])
                    + (other.group2()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group8()[1]) + (other.group0()[1] * self.group8()[0]) + (other.group0()[2] * self[e1]) - (self.group7()[0] * other.group2()[1])
                    + (self.group7()[1] * other.group2()[0])
                    - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group6()[3])
                    + (other.group1()[3] * self.group6()[2])
                    - (other.group2()[2] * self.group1()[3])
                    + (other.group2()[3] * self.group1()[2])),
                ((other.group0()[0] * self.group1()[0]) - (other.group0()[0] * self.group6()[0]) + (other.group0()[1] * self.group1()[1]) - (other.group0()[1] * self.group6()[1])
                    + (other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group6()[2])
                    - (self.group7()[0] * other.group1()[0])
                    - (self.group7()[1] * other.group1()[1])
                    - (self.group7()[2] * other.group1()[2])
                    + (other.group1()[3] * self.group1()[3])
                    + (other.group2()[3] * self.group1()[3])),
            ]),
            // e5
            (-(self.group8()[0] * other.group1()[0])
                - (self.group8()[1] * other.group1()[1])
                - (self.group8()[2] * other.group1()[2])
                - (other.group1()[3] * self[e1])
                - (other.group2()[0] * self.group1()[0])
                - (other.group2()[0] * self.group6()[0])
                - (other.group2()[1] * self.group1()[1])
                - (other.group2()[1] * self.group6()[1])
                - (other.group2()[2] * self.group1()[2])
                - (other.group2()[2] * self.group6()[2])
                + (other.group2()[3] * self[e1])),
            // e15, e25, e35, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) + (self.group5()[1] * other.group2()[2]) - (self.group5()[2] * other.group2()[1]) + (other.group1()[0] * self.group9()[3])
                    - (other.group1()[1] * self.group3()[2])
                    + (other.group1()[2] * self.group3()[1])
                    - (other.group1()[3] * self.group3()[0])
                    - (other.group2()[0] * self.group3()[3])
                    + (other.group2()[1] * self.group9()[2])
                    - (other.group2()[2] * self.group9()[1])
                    + (other.group2()[3] * self.group3()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group5()[0] * other.group2()[2])
                    + (self.group5()[2] * other.group2()[0])
                    + (other.group1()[0] * self.group3()[2])
                    + (other.group1()[1] * self.group9()[3])
                    - (other.group1()[2] * self.group3()[0])
                    - (other.group1()[3] * self.group3()[1])
                    - (other.group2()[0] * self.group9()[2])
                    - (other.group2()[1] * self.group3()[3])
                    + (other.group2()[2] * self.group9()[0])
                    + (other.group2()[3] * self.group3()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group5()[0] * other.group2()[1]) - (self.group5()[1] * other.group2()[0]) - (other.group1()[0] * self.group3()[1])
                    + (other.group1()[1] * self.group3()[0])
                    + (other.group1()[2] * self.group9()[3])
                    - (other.group1()[3] * self.group3()[2])
                    + (other.group2()[0] * self.group9()[1])
                    - (other.group2()[1] * self.group9()[0])
                    - (other.group2()[2] * self.group3()[3])
                    + (other.group2()[3] * self.group3()[2])),
                (-(self.group0()[0] * other.group1()[3])
                    + (other.group0()[0] * self.group3()[0])
                    + (other.group0()[1] * self.group3()[1])
                    + (other.group0()[2] * self.group3()[2])
                    - (self.group4()[0] * other.group2()[0])
                    - (self.group4()[1] * other.group2()[1])
                    - (self.group4()[2] * other.group2()[2])
                    - (other.group1()[0] * self.group9()[0])
                    - (other.group1()[1] * self.group9()[1])
                    - (other.group1()[2] * self.group9()[2])
                    + (other.group2()[3] * self.group3()[3])),
            ]),
            // e41, e42, e43
            Simd32x3::from([
                ((self.group0()[0] * other.group0()[0]) + (other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self.group5()[2]) - (other.group0()[1] * self.group9()[2])
                    + (other.group0()[2] * self.group5()[1])
                    + (other.group0()[2] * self.group9()[1])
                    + (self.group4()[0] * other.group1()[3])
                    + (self.group4()[0] * other.group2()[3])
                    + (self.group4()[1] * other.group1()[2])
                    - (self.group4()[2] * other.group1()[1])
                    + (other.group1()[0] * self[e45])),
                ((self.group0()[0] * other.group0()[1]) + (other.group0()[0] * self.group5()[2]) + (other.group0()[0] * self.group9()[2]) + (other.group0()[1] * self.group3()[3])
                    - (other.group0()[2] * self.group5()[0])
                    - (other.group0()[2] * self.group9()[0])
                    - (self.group4()[0] * other.group1()[2])
                    + (self.group4()[1] * other.group1()[3])
                    + (self.group4()[1] * other.group2()[3])
                    + (self.group4()[2] * other.group1()[0])
                    + (other.group1()[1] * self[e45])),
                ((self.group0()[0] * other.group0()[2]) - (other.group0()[0] * self.group5()[1]) - (other.group0()[0] * self.group9()[1])
                    + (other.group0()[1] * self.group5()[0])
                    + (other.group0()[1] * self.group9()[0])
                    + (other.group0()[2] * self.group3()[3])
                    + (self.group4()[0] * other.group1()[1])
                    - (self.group4()[1] * other.group1()[0])
                    + (self.group4()[2] * other.group1()[3])
                    + (self.group4()[2] * other.group2()[3])
                    + (other.group1()[2] * self[e45])),
            ]),
            // e23, e31, e12
            Simd32x3::from([
                ((self.group0()[0] * other.group1()[0]) + (other.group0()[0] * self.group9()[3]) - (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group3()[1])
                    + (self.group4()[1] * other.group2()[2])
                    - (self.group4()[2] * other.group2()[1])
                    + (self.group5()[0] * other.group2()[3])
                    + (self.group5()[1] * other.group1()[2])
                    - (self.group5()[2] * other.group1()[1])
                    - (other.group1()[3] * self.group9()[0])
                    + (other.group2()[0] * self[e45])),
                ((self.group0()[0] * other.group1()[1]) + (other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group9()[3])
                    - (other.group0()[2] * self.group3()[0])
                    - (self.group4()[0] * other.group2()[2])
                    + (self.group4()[2] * other.group2()[0])
                    - (self.group5()[0] * other.group1()[2])
                    + (self.group5()[1] * other.group2()[3])
                    + (self.group5()[2] * other.group1()[0])
                    - (other.group1()[3] * self.group9()[1])
                    + (other.group2()[1] * self[e45])),
                ((self.group0()[0] * other.group1()[2]) - (other.group0()[0] * self.group3()[1])
                    + (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group9()[3])
                    + (self.group4()[0] * other.group2()[1])
                    - (self.group4()[1] * other.group2()[0])
                    + (self.group5()[0] * other.group1()[1])
                    - (self.group5()[1] * other.group1()[0])
                    + (self.group5()[2] * other.group2()[3])
                    - (other.group1()[3] * self.group9()[2])
                    + (other.group2()[2] * self[e45])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[0]) + (other.group0()[0] * self[e1]) - (other.group0()[1] * self.group8()[2])
                    + (other.group0()[2] * self.group8()[1])
                    + (self.group7()[1] * other.group2()[2])
                    - (self.group7()[2] * other.group2()[1])
                    - (other.group1()[1] * self.group6()[2])
                    + (other.group1()[2] * self.group6()[1])
                    + (other.group1()[3] * self.group1()[0])
                    + (other.group2()[0] * self.group1()[3])
                    + (other.group2()[3] * self.group6()[0])),
                ((self.group0()[1] * other.group1()[1]) + (other.group0()[0] * self.group8()[2]) + (other.group0()[1] * self[e1])
                    - (other.group0()[2] * self.group8()[0])
                    - (self.group7()[0] * other.group2()[2])
                    + (self.group7()[2] * other.group2()[0])
                    + (other.group1()[0] * self.group6()[2])
                    - (other.group1()[2] * self.group6()[0])
                    + (other.group1()[3] * self.group1()[1])
                    + (other.group2()[1] * self.group1()[3])
                    + (other.group2()[3] * self.group6()[1])),
                ((self.group0()[1] * other.group1()[2]) - (other.group0()[0] * self.group8()[1])
                    + (other.group0()[1] * self.group8()[0])
                    + (other.group0()[2] * self[e1])
                    + (self.group7()[0] * other.group2()[1])
                    - (self.group7()[1] * other.group2()[0])
                    - (other.group1()[0] * self.group6()[1])
                    + (other.group1()[1] * self.group6()[0])
                    + (other.group1()[3] * self.group1()[2])
                    + (other.group2()[2] * self.group1()[3])
                    + (other.group2()[3] * self.group6()[2])),
                ((self.group0()[1] * other.group1()[3]) - (other.group0()[0] * self.group8()[0]) - (other.group0()[1] * self.group8()[1]) - (other.group0()[2] * self.group8()[2])
                    + (self.group7()[0] * other.group2()[0])
                    + (self.group7()[1] * other.group2()[1])
                    + (self.group7()[2] * other.group2()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    + (other.group2()[3] * self.group6()[3])),
            ]),
            // e423, e431, e412
            Simd32x3::from([
                ((self.group0()[1] * other.group0()[0]) - (other.group0()[0] * self.group6()[3]) + (other.group0()[1] * self.group1()[2])
                    - (other.group0()[1] * self.group6()[2])
                    - (other.group0()[2] * self.group1()[1])
                    + (other.group0()[2] * self.group6()[1])
                    + (self.group7()[0] * other.group1()[3])
                    + (self.group7()[0] * other.group2()[3])
                    + (self.group7()[1] * other.group1()[2])
                    - (self.group7()[2] * other.group1()[1])
                    + (other.group1()[0] * self.group1()[3])),
                ((self.group0()[1] * other.group0()[1]) - (other.group0()[0] * self.group1()[2]) + (other.group0()[0] * self.group6()[2]) - (other.group0()[1] * self.group6()[3])
                    + (other.group0()[2] * self.group1()[0])
                    - (other.group0()[2] * self.group6()[0])
                    - (self.group7()[0] * other.group1()[2])
                    + (self.group7()[1] * other.group1()[3])
                    + (self.group7()[1] * other.group2()[3])
                    + (self.group7()[2] * other.group1()[0])
                    + (other.group1()[1] * self.group1()[3])),
                ((self.group0()[1] * other.group0()[2]) + (other.group0()[0] * self.group1()[1]) - (other.group0()[0] * self.group6()[1]) - (other.group0()[1] * self.group1()[0])
                    + (other.group0()[1] * self.group6()[0])
                    - (other.group0()[2] * self.group6()[3])
                    + (self.group7()[0] * other.group1()[1])
                    - (self.group7()[1] * other.group1()[0])
                    + (self.group7()[2] * other.group1()[3])
                    + (self.group7()[2] * other.group2()[3])
                    + (other.group1()[2] * self.group1()[3])),
            ]),
            // e235, e315, e125
            Simd32x3::from([
                ((self.group0()[1] * other.group2()[0]) - (self.group8()[0] * other.group1()[3]) + (self.group8()[0] * other.group2()[3]) + (self.group8()[1] * other.group1()[2])
                    - (self.group8()[2] * other.group1()[1])
                    + (other.group1()[0] * self[e1])
                    + (other.group2()[0] * self.group6()[3])
                    - (other.group2()[1] * self.group1()[2])
                    - (other.group2()[1] * self.group6()[2])
                    + (other.group2()[2] * self.group1()[1])
                    + (other.group2()[2] * self.group6()[1])),
                ((self.group0()[1] * other.group2()[1]) - (self.group8()[0] * other.group1()[2]) - (self.group8()[1] * other.group1()[3])
                    + (self.group8()[1] * other.group2()[3])
                    + (self.group8()[2] * other.group1()[0])
                    + (other.group1()[1] * self[e1])
                    + (other.group2()[0] * self.group1()[2])
                    + (other.group2()[0] * self.group6()[2])
                    + (other.group2()[1] * self.group6()[3])
                    - (other.group2()[2] * self.group1()[0])
                    - (other.group2()[2] * self.group6()[0])),
                ((self.group0()[1] * other.group2()[2]) + (self.group8()[0] * other.group1()[1]) - (self.group8()[1] * other.group1()[0]) - (self.group8()[2] * other.group1()[3])
                    + (self.group8()[2] * other.group2()[3])
                    + (other.group1()[2] * self[e1])
                    - (other.group2()[0] * self.group1()[1])
                    - (other.group2()[0] * self.group6()[1])
                    + (other.group2()[1] * self.group1()[0])
                    + (other.group2()[1] * self.group6()[0])
                    + (other.group2()[2] * self.group6()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group9()[3]) + (other.group0()[1] * self.group3()[2]) - (other.group0()[2] * self.group3()[1])
                    + (self.group4()[1] * other.group2()[2])
                    - (self.group4()[2] * other.group2()[1])
                    - (self.group5()[0] * other.group1()[3])
                    + (other.group1()[0] * self.group3()[3])
                    - (other.group1()[1] * self.group9()[2])
                    + (other.group1()[2] * self.group9()[1])
                    + (other.group2()[0] * self[e45])
                    + (other.group2()[3] * self.group9()[0])),
                (-(other.group0()[0] * self.group3()[2]) - (other.group0()[1] * self.group9()[3]) + (other.group0()[2] * self.group3()[0])
                    - (self.group4()[0] * other.group2()[2])
                    + (self.group4()[2] * other.group2()[0])
                    - (self.group5()[1] * other.group1()[3])
                    + (other.group1()[0] * self.group9()[2])
                    + (other.group1()[1] * self.group3()[3])
                    - (other.group1()[2] * self.group9()[0])
                    + (other.group2()[1] * self[e45])
                    + (other.group2()[3] * self.group9()[1])),
                ((other.group0()[0] * self.group3()[1]) - (other.group0()[1] * self.group3()[0]) - (other.group0()[2] * self.group9()[3]) + (self.group4()[0] * other.group2()[1])
                    - (self.group4()[1] * other.group2()[0])
                    - (self.group5()[2] * other.group1()[3])
                    - (other.group1()[0] * self.group9()[1])
                    + (other.group1()[1] * self.group9()[0])
                    + (other.group1()[2] * self.group3()[3])
                    + (other.group2()[2] * self[e45])
                    + (other.group2()[3] * self.group9()[2])),
                (-(self.group5()[0] * other.group2()[0])
                    - (self.group5()[1] * other.group2()[1])
                    - (self.group5()[2] * other.group2()[2])
                    - (other.group1()[0] * self.group3()[0])
                    - (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group3()[2])
                    - (other.group1()[3] * self.group9()[3])
                    + (other.group2()[0] * self.group9()[0])
                    + (other.group2()[1] * self.group9()[1])
                    + (other.group2()[2] * self.group9()[2])
                    + (other.group2()[3] * self.group9()[3])),
            ]),
            // e1234
            (-(other.group0()[0] * self.group5()[0])
                - (other.group0()[0] * self.group9()[0])
                - (other.group0()[1] * self.group5()[1])
                - (other.group0()[1] * self.group9()[1])
                - (other.group0()[2] * self.group5()[2])
                - (other.group0()[2] * self.group9()[2])
                - (self.group4()[0] * other.group1()[0])
                - (self.group4()[1] * other.group1()[1])
                - (self.group4()[2] * other.group1()[2])
                + (other.group1()[3] * self[e45])
                + (other.group2()[3] * self[e45])),
        );
    }
}
impl GeometricAntiProduct<Dipole> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      288      320        0
    fn geometric_anti_product(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(other.group0()[0] * self.group8()[0])
                    - (other.group0()[1] * self.group8()[1])
                    - (other.group0()[2] * self.group8()[2])
                    - (other.group2()[0] * self.group7()[0])
                    - (other.group2()[1] * self.group7()[1])
                    - (other.group2()[2] * self.group7()[2])
                    - (other.group1()[0] * self.group6()[0])
                    - (other.group1()[1] * self.group6()[1])
                    - (other.group1()[2] * self.group6()[2])
                    - (other.group1()[3] * self.group6()[3])),
                ((other.group0()[0] * self.group3()[0])
                    + (other.group0()[1] * self.group3()[1])
                    + (other.group0()[2] * self.group3()[2])
                    + (other.group2()[0] * self.group4()[0])
                    + (other.group2()[1] * self.group4()[1])
                    + (other.group2()[2] * self.group4()[2])
                    + (self.group5()[0] * other.group1()[0])
                    + (self.group5()[1] * other.group1()[1])
                    + (self.group5()[2] * other.group1()[2])
                    - (other.group1()[3] * self.group3()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[0] * self.group9()[3]) + (other.group0()[1] * self.group3()[2]) - (other.group0()[2] * self.group3()[1]) + (other.group2()[0] * self[e45])
                    - (other.group2()[1] * self.group4()[2])
                    + (other.group2()[2] * self.group4()[1])
                    + (self.group5()[0] * other.group1()[3])
                    + (other.group1()[0] * self.group3()[3])
                    - (other.group1()[1] * self.group9()[2])
                    + (other.group1()[2] * self.group9()[1])),
                (-(other.group0()[0] * self.group3()[2]) - (other.group0()[1] * self.group9()[3])
                    + (other.group0()[2] * self.group3()[0])
                    + (other.group2()[0] * self.group4()[2])
                    + (other.group2()[1] * self[e45])
                    - (other.group2()[2] * self.group4()[0])
                    + (self.group5()[1] * other.group1()[3])
                    + (other.group1()[0] * self.group9()[2])
                    + (other.group1()[1] * self.group3()[3])
                    - (other.group1()[2] * self.group9()[0])),
                ((other.group0()[0] * self.group3()[1]) - (other.group0()[1] * self.group3()[0]) - (other.group0()[2] * self.group9()[3]) - (other.group2()[0] * self.group4()[1])
                    + (other.group2()[1] * self.group4()[0])
                    + (other.group2()[2] * self[e45])
                    + (self.group5()[2] * other.group1()[3])
                    - (other.group1()[0] * self.group9()[1])
                    + (other.group1()[1] * self.group9()[0])
                    + (other.group1()[2] * self.group3()[3])),
                ((other.group0()[0] * self.group5()[0])
                    + (other.group0()[0] * self.group9()[0])
                    + (other.group0()[1] * self.group5()[1])
                    + (other.group0()[1] * self.group9()[1])
                    + (other.group0()[2] * self.group5()[2])
                    + (other.group0()[2] * self.group9()[2])
                    + (self.group4()[0] * other.group1()[0])
                    + (self.group4()[1] * other.group1()[1])
                    + (self.group4()[2] * other.group1()[2])
                    + (other.group1()[3] * self[e45])),
            ]),
            // e5
            ((other.group2()[0] * self.group5()[0]) - (other.group2()[0] * self.group9()[0]) + (other.group2()[1] * self.group5()[1]) - (other.group2()[1] * self.group9()[1])
                + (other.group2()[2] * self.group5()[2])
                - (other.group2()[2] * self.group9()[2])
                + (other.group1()[0] * self.group3()[0])
                + (other.group1()[1] * self.group3()[1])
                + (other.group1()[2] * self.group3()[2])
                - (other.group1()[3] * self.group9()[3])),
            // e15, e25, e35, e45
            Simd32x4::from([
                ((self.group0()[1] * other.group2()[0]) + (other.group2()[0] * self.group6()[3]) - (other.group2()[1] * self.group1()[2]) - (other.group2()[1] * self.group6()[2])
                    + (other.group2()[2] * self.group1()[1])
                    + (other.group2()[2] * self.group6()[1])
                    + (self.group8()[0] * other.group1()[3])
                    + (self.group8()[1] * other.group1()[2])
                    - (self.group8()[2] * other.group1()[1])
                    + (other.group1()[0] * self[e1])),
                ((self.group0()[1] * other.group2()[1]) + (other.group2()[0] * self.group1()[2]) + (other.group2()[0] * self.group6()[2]) + (other.group2()[1] * self.group6()[3])
                    - (other.group2()[2] * self.group1()[0])
                    - (other.group2()[2] * self.group6()[0])
                    - (self.group8()[0] * other.group1()[2])
                    + (self.group8()[1] * other.group1()[3])
                    + (self.group8()[2] * other.group1()[0])
                    + (other.group1()[1] * self[e1])),
                ((self.group0()[1] * other.group2()[2]) - (other.group2()[0] * self.group1()[1]) - (other.group2()[0] * self.group6()[1])
                    + (other.group2()[1] * self.group1()[0])
                    + (other.group2()[1] * self.group6()[0])
                    + (other.group2()[2] * self.group6()[3])
                    + (self.group8()[0] * other.group1()[1])
                    - (self.group8()[1] * other.group1()[0])
                    + (self.group8()[2] * other.group1()[3])
                    + (other.group1()[2] * self[e1])),
                ((self.group0()[1] * other.group1()[3]) + (other.group0()[0] * self.group8()[0]) + (other.group0()[1] * self.group8()[1]) + (other.group0()[2] * self.group8()[2])
                    - (other.group2()[0] * self.group7()[0])
                    - (other.group2()[1] * self.group7()[1])
                    - (other.group2()[2] * self.group7()[2])
                    + (other.group1()[0] * self.group1()[0])
                    + (other.group1()[1] * self.group1()[1])
                    + (other.group1()[2] * self.group1()[2])),
            ]),
            // e41, e42, e43
            Simd32x3::from([
                ((self.group0()[1] * other.group0()[0]) - (other.group0()[0] * self.group6()[3]) + (other.group0()[1] * self.group1()[2])
                    - (other.group0()[1] * self.group6()[2])
                    - (other.group0()[2] * self.group1()[1])
                    + (other.group0()[2] * self.group6()[1])
                    - (self.group7()[0] * other.group1()[3])
                    + (self.group7()[1] * other.group1()[2])
                    - (self.group7()[2] * other.group1()[1])
                    + (other.group1()[0] * self.group1()[3])),
                ((self.group0()[1] * other.group0()[1]) - (other.group0()[0] * self.group1()[2]) + (other.group0()[0] * self.group6()[2]) - (other.group0()[1] * self.group6()[3])
                    + (other.group0()[2] * self.group1()[0])
                    - (other.group0()[2] * self.group6()[0])
                    - (self.group7()[0] * other.group1()[2])
                    - (self.group7()[1] * other.group1()[3])
                    + (self.group7()[2] * other.group1()[0])
                    + (other.group1()[1] * self.group1()[3])),
                ((self.group0()[1] * other.group0()[2]) + (other.group0()[0] * self.group1()[1]) - (other.group0()[0] * self.group6()[1]) - (other.group0()[1] * self.group1()[0])
                    + (other.group0()[1] * self.group6()[0])
                    - (other.group0()[2] * self.group6()[3])
                    + (self.group7()[0] * other.group1()[1])
                    - (self.group7()[1] * other.group1()[0])
                    - (self.group7()[2] * other.group1()[3])
                    + (other.group1()[2] * self.group1()[3])),
            ]),
            // e23, e31, e12
            Simd32x3::from([
                ((self.group0()[1] * other.group1()[0]) + (other.group0()[0] * self[e1]) - (other.group0()[1] * self.group8()[2])
                    + (other.group0()[2] * self.group8()[1])
                    + (other.group2()[0] * self.group1()[3])
                    - (other.group2()[1] * self.group7()[2])
                    + (other.group2()[2] * self.group7()[1])
                    - (other.group1()[1] * self.group6()[2])
                    + (other.group1()[2] * self.group6()[1])
                    - (other.group1()[3] * self.group1()[0])),
                ((self.group0()[1] * other.group1()[1]) + (other.group0()[0] * self.group8()[2]) + (other.group0()[1] * self[e1]) - (other.group0()[2] * self.group8()[0])
                    + (other.group2()[0] * self.group7()[2])
                    + (other.group2()[1] * self.group1()[3])
                    - (other.group2()[2] * self.group7()[0])
                    + (other.group1()[0] * self.group6()[2])
                    - (other.group1()[2] * self.group6()[0])
                    - (other.group1()[3] * self.group1()[1])),
                ((self.group0()[1] * other.group1()[2]) - (other.group0()[0] * self.group8()[1]) + (other.group0()[1] * self.group8()[0]) + (other.group0()[2] * self[e1])
                    - (other.group2()[0] * self.group7()[1])
                    + (other.group2()[1] * self.group7()[0])
                    + (other.group2()[2] * self.group1()[3])
                    - (other.group1()[0] * self.group6()[1])
                    + (other.group1()[1] * self.group6()[0])
                    - (other.group1()[3] * self.group1()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[0]) - (other.group0()[0] * self.group9()[3]) + (other.group0()[1] * self.group3()[2])
                    - (other.group0()[2] * self.group3()[1])
                    - (other.group2()[0] * self[e45])
                    + (other.group2()[1] * self.group4()[2])
                    - (other.group2()[2] * self.group4()[1])
                    - (self.group5()[1] * other.group1()[2])
                    + (self.group5()[2] * other.group1()[1])
                    - (other.group1()[3] * self.group9()[0])),
                (-(self.group0()[0] * other.group1()[1]) - (other.group0()[0] * self.group3()[2]) - (other.group0()[1] * self.group9()[3])
                    + (other.group0()[2] * self.group3()[0])
                    - (other.group2()[0] * self.group4()[2])
                    - (other.group2()[1] * self[e45])
                    + (other.group2()[2] * self.group4()[0])
                    + (self.group5()[0] * other.group1()[2])
                    - (self.group5()[2] * other.group1()[0])
                    - (other.group1()[3] * self.group9()[1])),
                (-(self.group0()[0] * other.group1()[2]) + (other.group0()[0] * self.group3()[1])
                    - (other.group0()[1] * self.group3()[0])
                    - (other.group0()[2] * self.group9()[3])
                    + (other.group2()[0] * self.group4()[1])
                    - (other.group2()[1] * self.group4()[0])
                    - (other.group2()[2] * self[e45])
                    - (self.group5()[0] * other.group1()[1])
                    + (self.group5()[1] * other.group1()[0])
                    - (other.group1()[3] * self.group9()[2])),
                ((self.group0()[0] * other.group1()[3]) + (other.group0()[0] * self.group3()[0]) + (other.group0()[1] * self.group3()[1]) + (other.group0()[2] * self.group3()[2])
                    - (other.group2()[0] * self.group4()[0])
                    - (other.group2()[1] * self.group4()[1])
                    - (other.group2()[2] * self.group4()[2])
                    - (other.group1()[0] * self.group9()[0])
                    - (other.group1()[1] * self.group9()[1])
                    - (other.group1()[2] * self.group9()[2])),
            ]),
            // e423, e431, e412
            Simd32x3::from([
                (-(self.group0()[0] * other.group0()[0]) - (other.group0()[0] * self.group3()[3])
                    + (other.group0()[1] * self.group5()[2])
                    + (other.group0()[1] * self.group9()[2])
                    - (other.group0()[2] * self.group5()[1])
                    - (other.group0()[2] * self.group9()[1])
                    + (self.group4()[0] * other.group1()[3])
                    - (self.group4()[1] * other.group1()[2])
                    + (self.group4()[2] * other.group1()[1])
                    - (other.group1()[0] * self[e45])),
                (-(self.group0()[0] * other.group0()[1])
                    - (other.group0()[0] * self.group5()[2])
                    - (other.group0()[0] * self.group9()[2])
                    - (other.group0()[1] * self.group3()[3])
                    + (other.group0()[2] * self.group5()[0])
                    + (other.group0()[2] * self.group9()[0])
                    + (self.group4()[0] * other.group1()[2])
                    + (self.group4()[1] * other.group1()[3])
                    - (self.group4()[2] * other.group1()[0])
                    - (other.group1()[1] * self[e45])),
                (-(self.group0()[0] * other.group0()[2]) + (other.group0()[0] * self.group5()[1]) + (other.group0()[0] * self.group9()[1])
                    - (other.group0()[1] * self.group5()[0])
                    - (other.group0()[1] * self.group9()[0])
                    - (other.group0()[2] * self.group3()[3])
                    - (self.group4()[0] * other.group1()[1])
                    + (self.group4()[1] * other.group1()[0])
                    + (self.group4()[2] * other.group1()[3])
                    - (other.group1()[2] * self[e45])),
            ]),
            // e235, e315, e125
            Simd32x3::from([
                (-(self.group0()[0] * other.group2()[0]) + (other.group2()[0] * self.group3()[3]) + (other.group2()[1] * self.group5()[2])
                    - (other.group2()[1] * self.group9()[2])
                    - (other.group2()[2] * self.group5()[1])
                    + (other.group2()[2] * self.group9()[1])
                    - (other.group1()[0] * self.group9()[3])
                    + (other.group1()[1] * self.group3()[2])
                    - (other.group1()[2] * self.group3()[1])
                    - (other.group1()[3] * self.group3()[0])),
                (-(self.group0()[0] * other.group2()[1]) - (other.group2()[0] * self.group5()[2])
                    + (other.group2()[0] * self.group9()[2])
                    + (other.group2()[1] * self.group3()[3])
                    + (other.group2()[2] * self.group5()[0])
                    - (other.group2()[2] * self.group9()[0])
                    - (other.group1()[0] * self.group3()[2])
                    - (other.group1()[1] * self.group9()[3])
                    + (other.group1()[2] * self.group3()[0])
                    - (other.group1()[3] * self.group3()[1])),
                (-(self.group0()[0] * other.group2()[2]) + (other.group2()[0] * self.group5()[1])
                    - (other.group2()[0] * self.group9()[1])
                    - (other.group2()[1] * self.group5()[0])
                    + (other.group2()[1] * self.group9()[0])
                    + (other.group2()[2] * self.group3()[3])
                    + (other.group1()[0] * self.group3()[1])
                    - (other.group1()[1] * self.group3()[0])
                    - (other.group1()[2] * self.group9()[3])
                    - (other.group1()[3] * self.group3()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self[e1]) + (other.group0()[1] * self.group8()[2]) - (other.group0()[2] * self.group8()[1]) + (other.group2()[0] * self.group1()[3])
                    - (other.group2()[1] * self.group7()[2])
                    + (other.group2()[2] * self.group7()[1])
                    - (other.group1()[0] * self.group6()[3])
                    + (other.group1()[1] * self.group1()[2])
                    - (other.group1()[2] * self.group1()[1])
                    + (other.group1()[3] * self.group6()[0])),
                (-(other.group0()[0] * self.group8()[2]) - (other.group0()[1] * self[e1])
                    + (other.group0()[2] * self.group8()[0])
                    + (other.group2()[0] * self.group7()[2])
                    + (other.group2()[1] * self.group1()[3])
                    - (other.group2()[2] * self.group7()[0])
                    - (other.group1()[0] * self.group1()[2])
                    - (other.group1()[1] * self.group6()[3])
                    + (other.group1()[2] * self.group1()[0])
                    + (other.group1()[3] * self.group6()[1])),
                ((other.group0()[0] * self.group8()[1]) - (other.group0()[1] * self.group8()[0]) - (other.group0()[2] * self[e1]) - (other.group2()[0] * self.group7()[1])
                    + (other.group2()[1] * self.group7()[0])
                    + (other.group2()[2] * self.group1()[3])
                    + (other.group1()[0] * self.group1()[1])
                    - (other.group1()[1] * self.group1()[0])
                    - (other.group1()[2] * self.group6()[3])
                    + (other.group1()[3] * self.group6()[2])),
                (-(other.group2()[0] * self.group1()[0])
                    - (other.group2()[0] * self.group6()[0])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[1] * self.group6()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group6()[2])
                    - (self.group8()[0] * other.group1()[0])
                    - (self.group8()[1] * other.group1()[1])
                    - (self.group8()[2] * other.group1()[2])
                    + (other.group1()[3] * self[e1])),
            ]),
            // e1234
            ((other.group0()[0] * self.group1()[0]) - (other.group0()[0] * self.group6()[0]) + (other.group0()[1] * self.group1()[1]) - (other.group0()[1] * self.group6()[1])
                + (other.group0()[2] * self.group1()[2])
                - (other.group0()[2] * self.group6()[2])
                - (self.group7()[0] * other.group1()[0])
                - (self.group7()[1] * other.group1()[1])
                - (self.group7()[2] * other.group1()[2])
                - (other.group1()[3] * self.group1()[3])),
        );
    }
}
impl GeometricAntiProduct<DipoleInversion> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      448      480        0
    fn geometric_anti_product(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(other.group0()[0] * self.group8()[0])
                    - (other.group0()[1] * self.group8()[1])
                    - (other.group0()[2] * self.group8()[2])
                    - (self.group7()[0] * other.group2()[0])
                    - (self.group7()[1] * other.group2()[1])
                    - (self.group7()[2] * other.group2()[2])
                    - (other.group1()[0] * self.group6()[0])
                    - (other.group1()[1] * self.group6()[1])
                    - (other.group1()[2] * self.group6()[2])
                    - (other.group1()[3] * self.group6()[3])
                    + (other.group2()[3] * self[e1])
                    + (other.group3()[0] * self.group1()[0])
                    + (other.group3()[1] * self.group1()[1])
                    + (other.group3()[2] * self.group1()[2])
                    + (other.group3()[3] * self.group1()[3])),
                ((other.group0()[0] * self.group3()[0])
                    + (other.group0()[1] * self.group3()[1])
                    + (other.group0()[2] * self.group3()[2])
                    + (self.group4()[0] * other.group2()[0])
                    + (self.group4()[1] * other.group2()[1])
                    + (self.group4()[2] * other.group2()[2])
                    + (self.group5()[0] * other.group1()[0])
                    + (self.group5()[1] * other.group1()[1])
                    + (self.group5()[2] * other.group1()[2])
                    - (other.group1()[3] * self.group3()[3])
                    - (other.group2()[3] * self.group9()[3])
                    + (other.group3()[0] * self.group9()[0])
                    + (other.group3()[1] * self.group9()[1])
                    + (other.group3()[2] * self.group9()[2])
                    - (other.group3()[3] * self[e45])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group3()[0]) - (other.group0()[0] * self.group9()[3]) + (other.group0()[1] * self.group3()[2]) - (other.group0()[2] * self.group3()[1])
                    + (self.group4()[0] * other.group3()[3])
                    + (self.group4()[1] * other.group2()[2])
                    - (self.group4()[2] * other.group2()[1])
                    + (self.group5()[0] * other.group1()[3])
                    + (self.group5()[1] * other.group3()[2])
                    - (self.group5()[2] * other.group3()[1])
                    + (other.group1()[0] * self.group3()[3])
                    - (other.group1()[1] * self.group9()[2])
                    + (other.group1()[2] * self.group9()[1])
                    + (other.group2()[0] * self[e45])
                    - (other.group2()[3] * self.group3()[0])),
                ((self.group0()[0] * other.group3()[1]) - (other.group0()[0] * self.group3()[2]) - (other.group0()[1] * self.group9()[3]) + (other.group0()[2] * self.group3()[0])
                    - (self.group4()[0] * other.group2()[2])
                    + (self.group4()[1] * other.group3()[3])
                    + (self.group4()[2] * other.group2()[0])
                    - (self.group5()[0] * other.group3()[2])
                    + (self.group5()[1] * other.group1()[3])
                    + (self.group5()[2] * other.group3()[0])
                    + (other.group1()[0] * self.group9()[2])
                    + (other.group1()[1] * self.group3()[3])
                    - (other.group1()[2] * self.group9()[0])
                    + (other.group2()[1] * self[e45])
                    - (other.group2()[3] * self.group3()[1])),
                ((self.group0()[0] * other.group3()[2]) + (other.group0()[0] * self.group3()[1]) - (other.group0()[1] * self.group3()[0]) - (other.group0()[2] * self.group9()[3])
                    + (self.group4()[0] * other.group2()[1])
                    - (self.group4()[1] * other.group2()[0])
                    + (self.group4()[2] * other.group3()[3])
                    + (self.group5()[0] * other.group3()[1])
                    - (self.group5()[1] * other.group3()[0])
                    + (self.group5()[2] * other.group1()[3])
                    - (other.group1()[0] * self.group9()[1])
                    + (other.group1()[1] * self.group9()[0])
                    + (other.group1()[2] * self.group3()[3])
                    + (other.group2()[2] * self[e45])
                    - (other.group2()[3] * self.group3()[2])),
                (-(self.group0()[0] * other.group2()[3])
                    + (other.group0()[0] * self.group5()[0])
                    + (other.group0()[0] * self.group9()[0])
                    + (other.group0()[1] * self.group5()[1])
                    + (other.group0()[1] * self.group9()[1])
                    + (other.group0()[2] * self.group5()[2])
                    + (other.group0()[2] * self.group9()[2])
                    + (self.group4()[0] * other.group1()[0])
                    - (self.group4()[0] * other.group3()[0])
                    + (self.group4()[1] * other.group1()[1])
                    - (self.group4()[1] * other.group3()[1])
                    + (self.group4()[2] * other.group1()[2])
                    - (self.group4()[2] * other.group3()[2])
                    + (other.group1()[3] * self[e45])
                    - (other.group2()[3] * self.group3()[3])),
            ]),
            // e5
            (-(self.group0()[0] * other.group3()[3])
                + (self.group5()[0] * other.group2()[0])
                + (self.group5()[1] * other.group2()[1])
                + (self.group5()[2] * other.group2()[2])
                + (other.group1()[0] * self.group3()[0])
                + (other.group1()[1] * self.group3()[1])
                + (other.group1()[2] * self.group3()[2])
                - (other.group1()[3] * self.group9()[3])
                - (other.group2()[0] * self.group9()[0])
                - (other.group2()[1] * self.group9()[1])
                - (other.group2()[2] * self.group9()[2])
                + (other.group3()[0] * self.group3()[0])
                + (other.group3()[1] * self.group3()[1])
                + (other.group3()[2] * self.group3()[2])
                + (other.group3()[3] * self.group3()[3])),
            // e15, e25, e35, e45
            Simd32x4::from([
                ((self.group0()[1] * other.group2()[0]) + (self.group8()[0] * other.group1()[3]) + (self.group8()[1] * other.group1()[2]) + (self.group8()[1] * other.group3()[2])
                    - (self.group8()[2] * other.group1()[1])
                    - (self.group8()[2] * other.group3()[1])
                    + (other.group1()[0] * self[e1])
                    + (other.group2()[0] * self.group6()[3])
                    - (other.group2()[1] * self.group1()[2])
                    - (other.group2()[1] * self.group6()[2])
                    + (other.group2()[2] * self.group1()[1])
                    + (other.group2()[2] * self.group6()[1])
                    + (other.group3()[0] * self[e1])
                    + (other.group3()[3] * self.group1()[0])
                    + (other.group3()[3] * self.group6()[0])),
                ((self.group0()[1] * other.group2()[1]) - (self.group8()[0] * other.group1()[2]) - (self.group8()[0] * other.group3()[2])
                    + (self.group8()[1] * other.group1()[3])
                    + (self.group8()[2] * other.group1()[0])
                    + (self.group8()[2] * other.group3()[0])
                    + (other.group1()[1] * self[e1])
                    + (other.group2()[0] * self.group1()[2])
                    + (other.group2()[0] * self.group6()[2])
                    + (other.group2()[1] * self.group6()[3])
                    - (other.group2()[2] * self.group1()[0])
                    - (other.group2()[2] * self.group6()[0])
                    + (other.group3()[1] * self[e1])
                    + (other.group3()[3] * self.group1()[1])
                    + (other.group3()[3] * self.group6()[1])),
                ((self.group0()[1] * other.group2()[2]) + (self.group8()[0] * other.group1()[1]) + (self.group8()[0] * other.group3()[1])
                    - (self.group8()[1] * other.group1()[0])
                    - (self.group8()[1] * other.group3()[0])
                    + (self.group8()[2] * other.group1()[3])
                    + (other.group1()[2] * self[e1])
                    - (other.group2()[0] * self.group1()[1])
                    - (other.group2()[0] * self.group6()[1])
                    + (other.group2()[1] * self.group1()[0])
                    + (other.group2()[1] * self.group6()[0])
                    + (other.group2()[2] * self.group6()[3])
                    + (other.group3()[2] * self[e1])
                    + (other.group3()[3] * self.group1()[2])
                    + (other.group3()[3] * self.group6()[2])),
                ((self.group0()[1] * other.group1()[3]) + (other.group0()[0] * self.group8()[0]) + (other.group0()[1] * self.group8()[1]) + (other.group0()[2] * self.group8()[2])
                    - (self.group7()[0] * other.group2()[0])
                    - (self.group7()[1] * other.group2()[1])
                    - (self.group7()[2] * other.group2()[2])
                    + (other.group1()[0] * self.group1()[0])
                    + (other.group1()[1] * self.group1()[1])
                    + (other.group1()[2] * self.group1()[2])
                    - (other.group2()[3] * self[e1])
                    - (other.group3()[0] * self.group6()[0])
                    - (other.group3()[1] * self.group6()[1])
                    - (other.group3()[2] * self.group6()[2])
                    + (other.group3()[3] * self.group1()[3])),
            ]),
            // e41, e42, e43
            Simd32x3::from([
                ((self.group0()[1] * other.group0()[0]) - (other.group0()[0] * self.group6()[3]) + (other.group0()[1] * self.group1()[2])
                    - (other.group0()[1] * self.group6()[2])
                    - (other.group0()[2] * self.group1()[1])
                    + (other.group0()[2] * self.group6()[1])
                    - (self.group7()[0] * other.group1()[3])
                    + (self.group7()[1] * other.group1()[2])
                    - (self.group7()[1] * other.group3()[2])
                    - (self.group7()[2] * other.group1()[1])
                    + (self.group7()[2] * other.group3()[1])
                    + (other.group1()[0] * self.group1()[3])
                    - (other.group2()[3] * self.group1()[0])
                    + (other.group2()[3] * self.group6()[0])
                    - (other.group3()[0] * self.group1()[3])),
                ((self.group0()[1] * other.group0()[1]) - (other.group0()[0] * self.group1()[2]) + (other.group0()[0] * self.group6()[2]) - (other.group0()[1] * self.group6()[3])
                    + (other.group0()[2] * self.group1()[0])
                    - (other.group0()[2] * self.group6()[0])
                    - (self.group7()[0] * other.group1()[2])
                    + (self.group7()[0] * other.group3()[2])
                    - (self.group7()[1] * other.group1()[3])
                    + (self.group7()[2] * other.group1()[0])
                    - (self.group7()[2] * other.group3()[0])
                    + (other.group1()[1] * self.group1()[3])
                    - (other.group2()[3] * self.group1()[1])
                    + (other.group2()[3] * self.group6()[1])
                    - (other.group3()[1] * self.group1()[3])),
                ((self.group0()[1] * other.group0()[2]) + (other.group0()[0] * self.group1()[1]) - (other.group0()[0] * self.group6()[1]) - (other.group0()[1] * self.group1()[0])
                    + (other.group0()[1] * self.group6()[0])
                    - (other.group0()[2] * self.group6()[3])
                    + (self.group7()[0] * other.group1()[1])
                    - (self.group7()[0] * other.group3()[1])
                    - (self.group7()[1] * other.group1()[0])
                    + (self.group7()[1] * other.group3()[0])
                    - (self.group7()[2] * other.group1()[3])
                    + (other.group1()[2] * self.group1()[3])
                    - (other.group2()[3] * self.group1()[2])
                    + (other.group2()[3] * self.group6()[2])
                    - (other.group3()[2] * self.group1()[3])),
            ]),
            // e23, e31, e12
            Simd32x3::from([
                ((self.group0()[1] * other.group1()[0]) + (other.group0()[0] * self[e1]) - (other.group0()[1] * self.group8()[2])
                    + (other.group0()[2] * self.group8()[1])
                    + (self.group7()[0] * other.group3()[3])
                    + (self.group7()[1] * other.group2()[2])
                    - (self.group7()[2] * other.group2()[1])
                    + (self.group8()[0] * other.group2()[3])
                    - (other.group1()[1] * self.group6()[2])
                    + (other.group1()[2] * self.group6()[1])
                    - (other.group1()[3] * self.group1()[0])
                    + (other.group2()[0] * self.group1()[3])
                    - (other.group3()[0] * self.group6()[3])
                    + (other.group3()[1] * self.group1()[2])
                    - (other.group3()[2] * self.group1()[1])),
                ((self.group0()[1] * other.group1()[1]) + (other.group0()[0] * self.group8()[2]) + (other.group0()[1] * self[e1])
                    - (other.group0()[2] * self.group8()[0])
                    - (self.group7()[0] * other.group2()[2])
                    + (self.group7()[1] * other.group3()[3])
                    + (self.group7()[2] * other.group2()[0])
                    + (self.group8()[1] * other.group2()[3])
                    + (other.group1()[0] * self.group6()[2])
                    - (other.group1()[2] * self.group6()[0])
                    - (other.group1()[3] * self.group1()[1])
                    + (other.group2()[1] * self.group1()[3])
                    - (other.group3()[0] * self.group1()[2])
                    - (other.group3()[1] * self.group6()[3])
                    + (other.group3()[2] * self.group1()[0])),
                ((self.group0()[1] * other.group1()[2]) - (other.group0()[0] * self.group8()[1])
                    + (other.group0()[1] * self.group8()[0])
                    + (other.group0()[2] * self[e1])
                    + (self.group7()[0] * other.group2()[1])
                    - (self.group7()[1] * other.group2()[0])
                    + (self.group7()[2] * other.group3()[3])
                    + (self.group8()[2] * other.group2()[3])
                    - (other.group1()[0] * self.group6()[1])
                    + (other.group1()[1] * self.group6()[0])
                    - (other.group1()[3] * self.group1()[2])
                    + (other.group2()[2] * self.group1()[3])
                    + (other.group3()[0] * self.group1()[1])
                    - (other.group3()[1] * self.group1()[0])
                    - (other.group3()[2] * self.group6()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[0]) - (other.group0()[0] * self.group9()[3]) + (other.group0()[1] * self.group3()[2])
                    - (other.group0()[2] * self.group3()[1])
                    - (self.group4()[0] * other.group3()[3])
                    - (self.group4()[1] * other.group2()[2])
                    + (self.group4()[2] * other.group2()[1])
                    - (self.group5()[1] * other.group1()[2])
                    + (self.group5()[2] * other.group1()[1])
                    - (other.group1()[3] * self.group9()[0])
                    - (other.group2()[0] * self[e45])
                    - (other.group2()[3] * self.group3()[0])
                    - (other.group3()[0] * self.group3()[3])
                    + (other.group3()[1] * self.group9()[2])
                    - (other.group3()[2] * self.group9()[1])),
                (-(self.group0()[0] * other.group1()[1]) - (other.group0()[0] * self.group3()[2]) - (other.group0()[1] * self.group9()[3])
                    + (other.group0()[2] * self.group3()[0])
                    + (self.group4()[0] * other.group2()[2])
                    - (self.group4()[1] * other.group3()[3])
                    - (self.group4()[2] * other.group2()[0])
                    + (self.group5()[0] * other.group1()[2])
                    - (self.group5()[2] * other.group1()[0])
                    - (other.group1()[3] * self.group9()[1])
                    - (other.group2()[1] * self[e45])
                    - (other.group2()[3] * self.group3()[1])
                    - (other.group3()[0] * self.group9()[2])
                    - (other.group3()[1] * self.group3()[3])
                    + (other.group3()[2] * self.group9()[0])),
                (-(self.group0()[0] * other.group1()[2]) + (other.group0()[0] * self.group3()[1])
                    - (other.group0()[1] * self.group3()[0])
                    - (other.group0()[2] * self.group9()[3])
                    - (self.group4()[0] * other.group2()[1])
                    + (self.group4()[1] * other.group2()[0])
                    - (self.group4()[2] * other.group3()[3])
                    - (self.group5()[0] * other.group1()[1])
                    + (self.group5()[1] * other.group1()[0])
                    - (other.group1()[3] * self.group9()[2])
                    - (other.group2()[2] * self[e45])
                    - (other.group2()[3] * self.group3()[2])
                    + (other.group3()[0] * self.group9()[1])
                    - (other.group3()[1] * self.group9()[0])
                    - (other.group3()[2] * self.group3()[3])),
                ((self.group0()[0] * other.group1()[3]) + (other.group0()[0] * self.group3()[0]) + (other.group0()[1] * self.group3()[1]) + (other.group0()[2] * self.group3()[2])
                    - (self.group4()[0] * other.group2()[0])
                    - (self.group4()[1] * other.group2()[1])
                    - (self.group4()[2] * other.group2()[2])
                    - (self.group5()[0] * other.group3()[0])
                    - (self.group5()[1] * other.group3()[1])
                    - (self.group5()[2] * other.group3()[2])
                    - (other.group1()[0] * self.group9()[0])
                    - (other.group1()[1] * self.group9()[1])
                    - (other.group1()[2] * self.group9()[2])
                    - (other.group2()[3] * self.group9()[3])
                    + (other.group3()[3] * self[e45])),
            ]),
            // e423, e431, e412
            Simd32x3::from([
                (-(self.group0()[0] * other.group0()[0]) - (other.group0()[0] * self.group3()[3])
                    + (other.group0()[1] * self.group5()[2])
                    + (other.group0()[1] * self.group9()[2])
                    - (other.group0()[2] * self.group5()[1])
                    - (other.group0()[2] * self.group9()[1])
                    + (self.group4()[0] * other.group1()[3])
                    - (self.group4()[1] * other.group1()[2])
                    + (self.group4()[1] * other.group3()[2])
                    + (self.group4()[2] * other.group1()[1])
                    - (self.group4()[2] * other.group3()[1])
                    - (self.group5()[0] * other.group2()[3])
                    - (other.group1()[0] * self[e45])
                    - (other.group2()[3] * self.group9()[0])
                    + (other.group3()[0] * self[e45])),
                (-(self.group0()[0] * other.group0()[1])
                    - (other.group0()[0] * self.group5()[2])
                    - (other.group0()[0] * self.group9()[2])
                    - (other.group0()[1] * self.group3()[3])
                    + (other.group0()[2] * self.group5()[0])
                    + (other.group0()[2] * self.group9()[0])
                    + (self.group4()[0] * other.group1()[2])
                    - (self.group4()[0] * other.group3()[2])
                    + (self.group4()[1] * other.group1()[3])
                    - (self.group4()[2] * other.group1()[0])
                    + (self.group4()[2] * other.group3()[0])
                    - (self.group5()[1] * other.group2()[3])
                    - (other.group1()[1] * self[e45])
                    - (other.group2()[3] * self.group9()[1])
                    + (other.group3()[1] * self[e45])),
                (-(self.group0()[0] * other.group0()[2]) + (other.group0()[0] * self.group5()[1]) + (other.group0()[0] * self.group9()[1])
                    - (other.group0()[1] * self.group5()[0])
                    - (other.group0()[1] * self.group9()[0])
                    - (other.group0()[2] * self.group3()[3])
                    - (self.group4()[0] * other.group1()[1])
                    + (self.group4()[0] * other.group3()[1])
                    + (self.group4()[1] * other.group1()[0])
                    - (self.group4()[1] * other.group3()[0])
                    + (self.group4()[2] * other.group1()[3])
                    - (self.group5()[2] * other.group2()[3])
                    - (other.group1()[2] * self[e45])
                    - (other.group2()[3] * self.group9()[2])
                    + (other.group3()[2] * self[e45])),
            ]),
            // e235, e315, e125
            Simd32x3::from([
                (-(self.group0()[0] * other.group2()[0]) - (self.group5()[0] * other.group3()[3]) - (self.group5()[1] * other.group2()[2])
                    + (self.group5()[2] * other.group2()[1])
                    - (other.group1()[0] * self.group9()[3])
                    + (other.group1()[1] * self.group3()[2])
                    - (other.group1()[2] * self.group3()[1])
                    - (other.group1()[3] * self.group3()[0])
                    + (other.group2()[0] * self.group3()[3])
                    - (other.group2()[1] * self.group9()[2])
                    + (other.group2()[2] * self.group9()[1])
                    - (other.group3()[0] * self.group9()[3])
                    + (other.group3()[1] * self.group3()[2])
                    - (other.group3()[2] * self.group3()[1])
                    + (other.group3()[3] * self.group9()[0])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group5()[0] * other.group2()[2])
                    - (self.group5()[1] * other.group3()[3])
                    - (self.group5()[2] * other.group2()[0])
                    - (other.group1()[0] * self.group3()[2])
                    - (other.group1()[1] * self.group9()[3])
                    + (other.group1()[2] * self.group3()[0])
                    - (other.group1()[3] * self.group3()[1])
                    + (other.group2()[0] * self.group9()[2])
                    + (other.group2()[1] * self.group3()[3])
                    - (other.group2()[2] * self.group9()[0])
                    - (other.group3()[0] * self.group3()[2])
                    - (other.group3()[1] * self.group9()[3])
                    + (other.group3()[2] * self.group3()[0])
                    + (other.group3()[3] * self.group9()[1])),
                (-(self.group0()[0] * other.group2()[2]) - (self.group5()[0] * other.group2()[1]) + (self.group5()[1] * other.group2()[0])
                    - (self.group5()[2] * other.group3()[3])
                    + (other.group1()[0] * self.group3()[1])
                    - (other.group1()[1] * self.group3()[0])
                    - (other.group1()[2] * self.group9()[3])
                    - (other.group1()[3] * self.group3()[2])
                    - (other.group2()[0] * self.group9()[1])
                    + (other.group2()[1] * self.group9()[0])
                    + (other.group2()[2] * self.group3()[3])
                    + (other.group3()[0] * self.group3()[1])
                    - (other.group3()[1] * self.group3()[0])
                    - (other.group3()[2] * self.group9()[3])
                    + (other.group3()[3] * self.group9()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[1] * other.group3()[0]) - (other.group0()[0] * self[e1]) + (other.group0()[1] * self.group8()[2]) - (other.group0()[2] * self.group8()[1])
                    + (self.group7()[0] * other.group3()[3])
                    + (self.group7()[1] * other.group2()[2])
                    - (self.group7()[2] * other.group2()[1])
                    - (self.group8()[0] * other.group2()[3])
                    - (other.group1()[0] * self.group6()[3])
                    + (other.group1()[1] * self.group1()[2])
                    - (other.group1()[2] * self.group1()[1])
                    + (other.group1()[3] * self.group6()[0])
                    + (other.group2()[0] * self.group1()[3])
                    - (other.group3()[1] * self.group6()[2])
                    + (other.group3()[2] * self.group6()[1])),
                ((self.group0()[1] * other.group3()[1]) - (other.group0()[0] * self.group8()[2]) - (other.group0()[1] * self[e1]) + (other.group0()[2] * self.group8()[0])
                    - (self.group7()[0] * other.group2()[2])
                    + (self.group7()[1] * other.group3()[3])
                    + (self.group7()[2] * other.group2()[0])
                    - (self.group8()[1] * other.group2()[3])
                    - (other.group1()[0] * self.group1()[2])
                    - (other.group1()[1] * self.group6()[3])
                    + (other.group1()[2] * self.group1()[0])
                    + (other.group1()[3] * self.group6()[1])
                    + (other.group2()[1] * self.group1()[3])
                    + (other.group3()[0] * self.group6()[2])
                    - (other.group3()[2] * self.group6()[0])),
                ((self.group0()[1] * other.group3()[2]) + (other.group0()[0] * self.group8()[1]) - (other.group0()[1] * self.group8()[0]) - (other.group0()[2] * self[e1])
                    + (self.group7()[0] * other.group2()[1])
                    - (self.group7()[1] * other.group2()[0])
                    + (self.group7()[2] * other.group3()[3])
                    - (self.group8()[2] * other.group2()[3])
                    + (other.group1()[0] * self.group1()[1])
                    - (other.group1()[1] * self.group1()[0])
                    - (other.group1()[2] * self.group6()[3])
                    + (other.group1()[3] * self.group6()[2])
                    + (other.group2()[2] * self.group1()[3])
                    - (other.group3()[0] * self.group6()[1])
                    + (other.group3()[1] * self.group6()[0])),
                ((self.group0()[1] * other.group3()[3])
                    - (self.group8()[0] * other.group1()[0])
                    - (self.group8()[0] * other.group3()[0])
                    - (self.group8()[1] * other.group1()[1])
                    - (self.group8()[1] * other.group3()[1])
                    - (self.group8()[2] * other.group1()[2])
                    - (self.group8()[2] * other.group3()[2])
                    + (other.group1()[3] * self[e1])
                    - (other.group2()[0] * self.group1()[0])
                    - (other.group2()[0] * self.group6()[0])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[1] * self.group6()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group6()[2])
                    + (other.group3()[3] * self.group6()[3])),
            ]),
            // e1234
            ((self.group0()[1] * other.group2()[3]) + (other.group0()[0] * self.group1()[0]) - (other.group0()[0] * self.group6()[0]) + (other.group0()[1] * self.group1()[1])
                - (other.group0()[1] * self.group6()[1])
                + (other.group0()[2] * self.group1()[2])
                - (other.group0()[2] * self.group6()[2])
                - (self.group7()[0] * other.group1()[0])
                + (self.group7()[0] * other.group3()[0])
                - (self.group7()[1] * other.group1()[1])
                + (self.group7()[1] * other.group3()[1])
                - (self.group7()[2] * other.group1()[2])
                + (self.group7()[2] * other.group3()[2])
                - (other.group1()[3] * self.group1()[3])
                - (other.group2()[3] * self.group6()[3])),
        );
    }
}
impl GeometricAntiProduct<DualNum> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       32       64        0
    fn geometric_anti_product(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((other.group0()[0] * self.group9()[3]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self[e1]) + (other.group0()[1] * self.group0()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group8()[0]) + (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group8()[1]) + (other.group0()[1] * self.group1()[1])),
                ((other.group0()[0] * self.group8()[2]) + (other.group0()[1] * self.group1()[2])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[0] * self.group6()[3]) + (other.group0()[1] * self.group1()[3])),
            ]),
            // e5
            (other.group0()[1] * self[e1]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other.group0()[1] * self.group3()[0]),
                (other.group0()[1] * self.group3()[1]),
                (other.group0()[1] * self.group3()[2]),
                (-(other.group0()[0] * self.group9()[3]) + (other.group0()[1] * self.group3()[3])),
            ]),
            // e41, e42, e43
            Simd32x3::from([
                ((other.group0()[0] * self.group5()[0]) + (other.group0()[0] * self.group9()[0]) + (other.group0()[1] * self.group4()[0])),
                ((other.group0()[0] * self.group5()[1]) + (other.group0()[0] * self.group9()[1]) + (other.group0()[1] * self.group4()[1])),
                ((other.group0()[0] * self.group5()[2]) + (other.group0()[0] * self.group9()[2]) + (other.group0()[1] * self.group4()[2])),
            ]),
            // e23, e31, e12
            Simd32x3::from([
                ((other.group0()[0] * self.group3()[0]) + (other.group0()[1] * self.group5()[0])),
                ((other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group5()[1])),
                ((other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group5()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group8()[0]) + (other.group0()[1] * self.group6()[0])),
                ((other.group0()[0] * self.group8()[1]) + (other.group0()[1] * self.group6()[1])),
                ((other.group0()[0] * self.group8()[2]) + (other.group0()[1] * self.group6()[2])),
                ((other.group0()[0] * self[e1]) + (other.group0()[1] * self.group6()[3])),
            ]),
            // e423, e431, e412
            Simd32x3::from([
                (-(other.group0()[0] * self.group1()[0]) + (other.group0()[0] * self.group6()[0]) + (other.group0()[1] * self.group7()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[0] * self.group6()[1]) + (other.group0()[1] * self.group7()[1])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[0] * self.group6()[2]) + (other.group0()[1] * self.group7()[2])),
            ]),
            // e235, e315, e125
            Simd32x3::from([(other.group0()[1] * self.group8()[0]), (other.group0()[1] * self.group8()[1]), (other.group0()[1] * self.group8()[2])]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group3()[0]) + (other.group0()[1] * self.group9()[0])),
                (-(other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group9()[1])),
                (-(other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group9()[2])),
                (other.group0()[1] * self.group9()[3]),
            ]),
            // e1234
            ((other.group0()[0] * self.group0()[0]) + (other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self[e45])),
        );
    }
}
impl GeometricAntiProduct<FlatPoint> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       96      132        0
    fn geometric_anti_product(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group7()[0] * other.group0()[0])
                    - (self.group7()[1] * other.group0()[1])
                    - (self.group7()[2] * other.group0()[2])
                    - (other.group0()[3] * self.group6()[3])),
                ((self.group4()[0] * other.group0()[0]) + (self.group4()[1] * other.group0()[1]) + (self.group4()[2] * other.group0()[2]) - (other.group0()[3] * self.group3()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group4()[1] * other.group0()[2]) - (self.group4()[2] * other.group0()[1]) + (self.group5()[0] * other.group0()[3]) + (other.group0()[0] * self[e45])),
                (-(self.group4()[0] * other.group0()[2]) + (self.group4()[2] * other.group0()[0]) + (self.group5()[1] * other.group0()[3]) + (other.group0()[1] * self[e45])),
                ((self.group4()[0] * other.group0()[1]) - (self.group4()[1] * other.group0()[0]) + (self.group5()[2] * other.group0()[3]) + (other.group0()[2] * self[e45])),
                (other.group0()[3] * self[e45]),
            ]),
            // e5
            ((self.group5()[0] * other.group0()[0]) + (self.group5()[1] * other.group0()[1]) + (self.group5()[2] * other.group0()[2])
                - (other.group0()[0] * self.group9()[0])
                - (other.group0()[1] * self.group9()[1])
                - (other.group0()[2] * self.group9()[2])
                - (other.group0()[3] * self.group9()[3])),
            // e15, e25, e35, e45
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[0]) + (self.group8()[0] * other.group0()[3]) + (other.group0()[0] * self.group6()[3])
                    - (other.group0()[1] * self.group1()[2])
                    - (other.group0()[1] * self.group6()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (other.group0()[2] * self.group6()[1])),
                ((self.group0()[1] * other.group0()[1])
                    + (self.group8()[1] * other.group0()[3])
                    + (other.group0()[0] * self.group1()[2])
                    + (other.group0()[0] * self.group6()[2])
                    + (other.group0()[1] * self.group6()[3])
                    - (other.group0()[2] * self.group1()[0])
                    - (other.group0()[2] * self.group6()[0])),
                ((self.group0()[1] * other.group0()[2]) + (self.group8()[2] * other.group0()[3]) - (other.group0()[0] * self.group1()[1]) - (other.group0()[0] * self.group6()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[1] * self.group6()[0])
                    + (other.group0()[2] * self.group6()[3])),
                ((self.group0()[1] * other.group0()[3]) - (self.group7()[0] * other.group0()[0]) - (self.group7()[1] * other.group0()[1]) - (self.group7()[2] * other.group0()[2])),
            ]),
            // e41, e42, e43
            Simd32x3::from([
                (self.group7()[0] * other.group0()[3] * -1.0),
                (self.group7()[1] * other.group0()[3] * -1.0),
                (self.group7()[2] * other.group0()[3] * -1.0),
            ]),
            // e23, e31, e12
            Simd32x3::from([
                ((self.group7()[1] * other.group0()[2]) - (self.group7()[2] * other.group0()[1]) + (other.group0()[0] * self.group1()[3]) - (other.group0()[3] * self.group1()[0])),
                (-(self.group7()[0] * other.group0()[2]) + (self.group7()[2] * other.group0()[0]) + (other.group0()[1] * self.group1()[3])
                    - (other.group0()[3] * self.group1()[1])),
                ((self.group7()[0] * other.group0()[1]) - (self.group7()[1] * other.group0()[0]) + (other.group0()[2] * self.group1()[3]) - (other.group0()[3] * self.group1()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group4()[1] * other.group0()[2]) + (self.group4()[2] * other.group0()[1]) - (other.group0()[0] * self[e45]) - (other.group0()[3] * self.group9()[0])),
                ((self.group4()[0] * other.group0()[2]) - (self.group4()[2] * other.group0()[0]) - (other.group0()[1] * self[e45]) - (other.group0()[3] * self.group9()[1])),
                (-(self.group4()[0] * other.group0()[1]) + (self.group4()[1] * other.group0()[0]) - (other.group0()[2] * self[e45]) - (other.group0()[3] * self.group9()[2])),
                ((self.group0()[0] * other.group0()[3]) - (self.group4()[0] * other.group0()[0]) - (self.group4()[1] * other.group0()[1]) - (self.group4()[2] * other.group0()[2])),
            ]),
            // e423, e431, e412
            Simd32x3::from([(self.group4()[0] * other.group0()[3]), (self.group4()[1] * other.group0()[3]), (self.group4()[2] * other.group0()[3])]),
            // e235, e315, e125
            Simd32x3::from([
                (-(self.group0()[0] * other.group0()[0]) - (self.group5()[1] * other.group0()[2])
                    + (self.group5()[2] * other.group0()[1])
                    + (other.group0()[0] * self.group3()[3])
                    - (other.group0()[1] * self.group9()[2])
                    + (other.group0()[2] * self.group9()[1])
                    - (other.group0()[3] * self.group3()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group5()[0] * other.group0()[2]) - (self.group5()[2] * other.group0()[0])
                    + (other.group0()[0] * self.group9()[2])
                    + (other.group0()[1] * self.group3()[3])
                    - (other.group0()[2] * self.group9()[0])
                    - (other.group0()[3] * self.group3()[1])),
                (-(self.group0()[0] * other.group0()[2]) - (self.group5()[0] * other.group0()[1]) + (self.group5()[1] * other.group0()[0])
                    - (other.group0()[0] * self.group9()[1])
                    + (other.group0()[1] * self.group9()[0])
                    + (other.group0()[2] * self.group3()[3])
                    - (other.group0()[3] * self.group3()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group7()[1] * other.group0()[2]) - (self.group7()[2] * other.group0()[1]) + (other.group0()[0] * self.group1()[3]) + (other.group0()[3] * self.group6()[0])),
                (-(self.group7()[0] * other.group0()[2])
                    + (self.group7()[2] * other.group0()[0])
                    + (other.group0()[1] * self.group1()[3])
                    + (other.group0()[3] * self.group6()[1])),
                ((self.group7()[0] * other.group0()[1]) - (self.group7()[1] * other.group0()[0]) + (other.group0()[2] * self.group1()[3]) + (other.group0()[3] * self.group6()[2])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[0] * self.group6()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[1] * self.group6()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group6()[2])
                    + (other.group0()[3] * self[e1])),
            ]),
            // e1234
            (other.group0()[3] * self.group1()[3] * -1.0),
        );
    }
}
impl GeometricAntiProduct<Flector> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      224      256        0
    fn geometric_anti_product(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group7()[0] * other.group0()[0])
                    - (self.group7()[1] * other.group0()[1])
                    - (self.group7()[2] * other.group0()[2])
                    - (other.group0()[3] * self.group6()[3])
                    + (other.group1()[0] * self.group1()[0])
                    + (other.group1()[1] * self.group1()[1])
                    + (other.group1()[2] * self.group1()[2])
                    + (other.group1()[3] * self.group1()[3])),
                ((self.group4()[0] * other.group0()[0]) + (self.group4()[1] * other.group0()[1]) + (self.group4()[2] * other.group0()[2]) - (other.group0()[3] * self.group3()[3])
                    + (other.group1()[0] * self.group9()[0])
                    + (other.group1()[1] * self.group9()[1])
                    + (other.group1()[2] * self.group9()[2])
                    - (other.group1()[3] * self[e45])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group4()[0] * other.group1()[3]) + (self.group4()[1] * other.group0()[2]) - (self.group4()[2] * other.group0()[1])
                    + (self.group5()[0] * other.group0()[3])
                    + (self.group5()[1] * other.group1()[2])
                    - (self.group5()[2] * other.group1()[1])
                    + (other.group0()[0] * self[e45])),
                ((self.group0()[0] * other.group1()[1]) - (self.group4()[0] * other.group0()[2]) + (self.group4()[1] * other.group1()[3]) + (self.group4()[2] * other.group0()[0])
                    - (self.group5()[0] * other.group1()[2])
                    + (self.group5()[1] * other.group0()[3])
                    + (self.group5()[2] * other.group1()[0])
                    + (other.group0()[1] * self[e45])),
                ((self.group0()[0] * other.group1()[2]) + (self.group4()[0] * other.group0()[1]) - (self.group4()[1] * other.group0()[0])
                    + (self.group4()[2] * other.group1()[3])
                    + (self.group5()[0] * other.group1()[1])
                    - (self.group5()[1] * other.group1()[0])
                    + (self.group5()[2] * other.group0()[3])
                    + (other.group0()[2] * self[e45])),
                (-(self.group4()[0] * other.group1()[0]) - (self.group4()[1] * other.group1()[1]) - (self.group4()[2] * other.group1()[2]) + (other.group0()[3] * self[e45])),
            ]),
            // e5
            (-(self.group0()[0] * other.group1()[3]) + (self.group5()[0] * other.group0()[0]) + (self.group5()[1] * other.group0()[1]) + (self.group5()[2] * other.group0()[2])
                - (other.group0()[0] * self.group9()[0])
                - (other.group0()[1] * self.group9()[1])
                - (other.group0()[2] * self.group9()[2])
                - (other.group0()[3] * self.group9()[3])
                + (other.group1()[0] * self.group3()[0])
                + (other.group1()[1] * self.group3()[1])
                + (other.group1()[2] * self.group3()[2])
                + (other.group1()[3] * self.group3()[3])),
            // e15, e25, e35, e45
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[0]) + (self.group8()[0] * other.group0()[3]) + (self.group8()[1] * other.group1()[2]) - (self.group8()[2] * other.group1()[1])
                    + (other.group0()[0] * self.group6()[3])
                    - (other.group0()[1] * self.group1()[2])
                    - (other.group0()[1] * self.group6()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (other.group0()[2] * self.group6()[1])
                    + (other.group1()[0] * self[e1])
                    + (other.group1()[3] * self.group1()[0])
                    + (other.group1()[3] * self.group6()[0])),
                ((self.group0()[1] * other.group0()[1]) - (self.group8()[0] * other.group1()[2])
                    + (self.group8()[1] * other.group0()[3])
                    + (self.group8()[2] * other.group1()[0])
                    + (other.group0()[0] * self.group1()[2])
                    + (other.group0()[0] * self.group6()[2])
                    + (other.group0()[1] * self.group6()[3])
                    - (other.group0()[2] * self.group1()[0])
                    - (other.group0()[2] * self.group6()[0])
                    + (other.group1()[1] * self[e1])
                    + (other.group1()[3] * self.group1()[1])
                    + (other.group1()[3] * self.group6()[1])),
                ((self.group0()[1] * other.group0()[2]) + (self.group8()[0] * other.group1()[1]) - (self.group8()[1] * other.group1()[0]) + (self.group8()[2] * other.group0()[3])
                    - (other.group0()[0] * self.group1()[1])
                    - (other.group0()[0] * self.group6()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[1] * self.group6()[0])
                    + (other.group0()[2] * self.group6()[3])
                    + (other.group1()[2] * self[e1])
                    + (other.group1()[3] * self.group1()[2])
                    + (other.group1()[3] * self.group6()[2])),
                ((self.group0()[1] * other.group0()[3])
                    - (self.group7()[0] * other.group0()[0])
                    - (self.group7()[1] * other.group0()[1])
                    - (self.group7()[2] * other.group0()[2])
                    - (other.group1()[0] * self.group6()[0])
                    - (other.group1()[1] * self.group6()[1])
                    - (other.group1()[2] * self.group6()[2])
                    + (other.group1()[3] * self.group1()[3])),
            ]),
            // e41, e42, e43
            Simd32x3::from([
                (-(self.group7()[0] * other.group0()[3]) - (self.group7()[1] * other.group1()[2]) + (self.group7()[2] * other.group1()[1])
                    - (other.group1()[0] * self.group1()[3])),
                ((self.group7()[0] * other.group1()[2]) - (self.group7()[1] * other.group0()[3]) - (self.group7()[2] * other.group1()[0]) - (other.group1()[1] * self.group1()[3])),
                (-(self.group7()[0] * other.group1()[1]) + (self.group7()[1] * other.group1()[0])
                    - (self.group7()[2] * other.group0()[3])
                    - (other.group1()[2] * self.group1()[3])),
            ]),
            // e23, e31, e12
            Simd32x3::from([
                ((self.group7()[0] * other.group1()[3]) + (self.group7()[1] * other.group0()[2]) - (self.group7()[2] * other.group0()[1]) + (other.group0()[0] * self.group1()[3])
                    - (other.group0()[3] * self.group1()[0])
                    - (other.group1()[0] * self.group6()[3])
                    + (other.group1()[1] * self.group1()[2])
                    - (other.group1()[2] * self.group1()[1])),
                (-(self.group7()[0] * other.group0()[2])
                    + (self.group7()[1] * other.group1()[3])
                    + (self.group7()[2] * other.group0()[0])
                    + (other.group0()[1] * self.group1()[3])
                    - (other.group0()[3] * self.group1()[1])
                    - (other.group1()[0] * self.group1()[2])
                    - (other.group1()[1] * self.group6()[3])
                    + (other.group1()[2] * self.group1()[0])),
                ((self.group7()[0] * other.group0()[1]) - (self.group7()[1] * other.group0()[0]) + (self.group7()[2] * other.group1()[3]) + (other.group0()[2] * self.group1()[3])
                    - (other.group0()[3] * self.group1()[2])
                    + (other.group1()[0] * self.group1()[1])
                    - (other.group1()[1] * self.group1()[0])
                    - (other.group1()[2] * self.group6()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group4()[0] * other.group1()[3]) - (self.group4()[1] * other.group0()[2]) + (self.group4()[2] * other.group0()[1])
                    - (other.group0()[0] * self[e45])
                    - (other.group0()[3] * self.group9()[0])
                    - (other.group1()[0] * self.group3()[3])
                    + (other.group1()[1] * self.group9()[2])
                    - (other.group1()[2] * self.group9()[1])),
                ((self.group4()[0] * other.group0()[2])
                    - (self.group4()[1] * other.group1()[3])
                    - (self.group4()[2] * other.group0()[0])
                    - (other.group0()[1] * self[e45])
                    - (other.group0()[3] * self.group9()[1])
                    - (other.group1()[0] * self.group9()[2])
                    - (other.group1()[1] * self.group3()[3])
                    + (other.group1()[2] * self.group9()[0])),
                (-(self.group4()[0] * other.group0()[1]) + (self.group4()[1] * other.group0()[0])
                    - (self.group4()[2] * other.group1()[3])
                    - (other.group0()[2] * self[e45])
                    - (other.group0()[3] * self.group9()[2])
                    + (other.group1()[0] * self.group9()[1])
                    - (other.group1()[1] * self.group9()[0])
                    - (other.group1()[2] * self.group3()[3])),
                ((self.group0()[0] * other.group0()[3])
                    - (self.group4()[0] * other.group0()[0])
                    - (self.group4()[1] * other.group0()[1])
                    - (self.group4()[2] * other.group0()[2])
                    - (self.group5()[0] * other.group1()[0])
                    - (self.group5()[1] * other.group1()[1])
                    - (self.group5()[2] * other.group1()[2])
                    + (other.group1()[3] * self[e45])),
            ]),
            // e423, e431, e412
            Simd32x3::from([
                ((self.group4()[0] * other.group0()[3]) + (self.group4()[1] * other.group1()[2]) - (self.group4()[2] * other.group1()[1]) + (other.group1()[0] * self[e45])),
                (-(self.group4()[0] * other.group1()[2]) + (self.group4()[1] * other.group0()[3]) + (self.group4()[2] * other.group1()[0]) + (other.group1()[1] * self[e45])),
                ((self.group4()[0] * other.group1()[1]) - (self.group4()[1] * other.group1()[0]) + (self.group4()[2] * other.group0()[3]) + (other.group1()[2] * self[e45])),
            ]),
            // e235, e315, e125
            Simd32x3::from([
                (-(self.group0()[0] * other.group0()[0]) - (self.group5()[0] * other.group1()[3]) - (self.group5()[1] * other.group0()[2])
                    + (self.group5()[2] * other.group0()[1])
                    + (other.group0()[0] * self.group3()[3])
                    - (other.group0()[1] * self.group9()[2])
                    + (other.group0()[2] * self.group9()[1])
                    - (other.group0()[3] * self.group3()[0])
                    - (other.group1()[0] * self.group9()[3])
                    + (other.group1()[1] * self.group3()[2])
                    - (other.group1()[2] * self.group3()[1])
                    + (other.group1()[3] * self.group9()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group5()[0] * other.group0()[2])
                    - (self.group5()[1] * other.group1()[3])
                    - (self.group5()[2] * other.group0()[0])
                    + (other.group0()[0] * self.group9()[2])
                    + (other.group0()[1] * self.group3()[3])
                    - (other.group0()[2] * self.group9()[0])
                    - (other.group0()[3] * self.group3()[1])
                    - (other.group1()[0] * self.group3()[2])
                    - (other.group1()[1] * self.group9()[3])
                    + (other.group1()[2] * self.group3()[0])
                    + (other.group1()[3] * self.group9()[1])),
                (-(self.group0()[0] * other.group0()[2]) - (self.group5()[0] * other.group0()[1]) + (self.group5()[1] * other.group0()[0])
                    - (self.group5()[2] * other.group1()[3])
                    - (other.group0()[0] * self.group9()[1])
                    + (other.group0()[1] * self.group9()[0])
                    + (other.group0()[2] * self.group3()[3])
                    - (other.group0()[3] * self.group3()[2])
                    + (other.group1()[0] * self.group3()[1])
                    - (other.group1()[1] * self.group3()[0])
                    - (other.group1()[2] * self.group9()[3])
                    + (other.group1()[3] * self.group9()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[0]) + (self.group7()[0] * other.group1()[3]) + (self.group7()[1] * other.group0()[2]) - (self.group7()[2] * other.group0()[1])
                    + (other.group0()[0] * self.group1()[3])
                    + (other.group0()[3] * self.group6()[0])
                    - (other.group1()[1] * self.group6()[2])
                    + (other.group1()[2] * self.group6()[1])),
                ((self.group0()[1] * other.group1()[1]) - (self.group7()[0] * other.group0()[2])
                    + (self.group7()[1] * other.group1()[3])
                    + (self.group7()[2] * other.group0()[0])
                    + (other.group0()[1] * self.group1()[3])
                    + (other.group0()[3] * self.group6()[1])
                    + (other.group1()[0] * self.group6()[2])
                    - (other.group1()[2] * self.group6()[0])),
                ((self.group0()[1] * other.group1()[2]) + (self.group7()[0] * other.group0()[1]) - (self.group7()[1] * other.group0()[0])
                    + (self.group7()[2] * other.group1()[3])
                    + (other.group0()[2] * self.group1()[3])
                    + (other.group0()[3] * self.group6()[2])
                    - (other.group1()[0] * self.group6()[1])
                    + (other.group1()[1] * self.group6()[0])),
                ((self.group0()[1] * other.group1()[3])
                    - (self.group8()[0] * other.group1()[0])
                    - (self.group8()[1] * other.group1()[1])
                    - (self.group8()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group1()[0])
                    - (other.group0()[0] * self.group6()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[1] * self.group6()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group6()[2])
                    + (other.group0()[3] * self[e1])
                    + (other.group1()[3] * self.group6()[3])),
            ]),
            // e1234
            ((self.group7()[0] * other.group1()[0]) + (self.group7()[1] * other.group1()[1]) + (self.group7()[2] * other.group1()[2]) - (other.group0()[3] * self.group1()[3])),
        );
    }
}
impl GeometricAntiProduct<Line> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      160      192        0
    fn geometric_anti_product(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(other.group0()[0] * self.group5()[0])
                    - (other.group0()[1] * self.group5()[1])
                    - (other.group0()[2] * self.group5()[2])
                    - (other.group1()[0] * self.group4()[0])
                    - (other.group1()[1] * self.group4()[1])
                    - (other.group1()[2] * self.group4()[2])),
                (-(other.group0()[0] * self.group6()[0])
                    - (other.group0()[1] * self.group6()[1])
                    - (other.group0()[2] * self.group6()[2])
                    - (other.group1()[0] * self.group7()[0])
                    - (other.group1()[1] * self.group7()[1])
                    - (other.group1()[2] * self.group7()[2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group6()[3]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) - (other.group1()[0] * self.group1()[3])
                    + (other.group1()[1] * self.group7()[2])
                    - (other.group1()[2] * self.group7()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group6()[3])
                    - (other.group0()[2] * self.group1()[0])
                    - (other.group1()[0] * self.group7()[2])
                    - (other.group1()[1] * self.group1()[3])
                    + (other.group1()[2] * self.group7()[0])),
                (-(other.group0()[0] * self.group1()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group6()[3])
                    + (other.group1()[0] * self.group7()[1])
                    - (other.group1()[1] * self.group7()[0])
                    - (other.group1()[2] * self.group1()[3])),
                (-(other.group0()[0] * self.group7()[0]) - (other.group0()[1] * self.group7()[1]) - (other.group0()[2] * self.group7()[2])),
            ]),
            // e5
            (-(other.group0()[0] * self.group8()[0])
                - (other.group0()[1] * self.group8()[1])
                - (other.group0()[2] * self.group8()[2])
                - (other.group1()[0] * self.group1()[0])
                - (other.group1()[0] * self.group6()[0])
                - (other.group1()[1] * self.group1()[1])
                - (other.group1()[1] * self.group6()[1])
                - (other.group1()[2] * self.group1()[2])
                - (other.group1()[2] * self.group6()[2])),
            // e15, e25, e35, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (other.group0()[0] * self.group9()[3]) - (other.group0()[1] * self.group3()[2]) + (other.group0()[2] * self.group3()[1])
                    - (other.group1()[0] * self.group3()[3])
                    - (other.group1()[1] * self.group5()[2])
                    + (other.group1()[1] * self.group9()[2])
                    + (other.group1()[2] * self.group5()[1])
                    - (other.group1()[2] * self.group9()[1])),
                ((self.group0()[0] * other.group1()[1]) + (other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group9()[3]) - (other.group0()[2] * self.group3()[0])
                    + (other.group1()[0] * self.group5()[2])
                    - (other.group1()[0] * self.group9()[2])
                    - (other.group1()[1] * self.group3()[3])
                    - (other.group1()[2] * self.group5()[0])
                    + (other.group1()[2] * self.group9()[0])),
                ((self.group0()[0] * other.group1()[2]) - (other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group3()[0]) + (other.group0()[2] * self.group9()[3])
                    - (other.group1()[0] * self.group5()[1])
                    + (other.group1()[0] * self.group9()[1])
                    + (other.group1()[1] * self.group5()[0])
                    - (other.group1()[1] * self.group9()[0])
                    - (other.group1()[2] * self.group3()[3])),
                (-(other.group0()[0] * self.group9()[0])
                    - (other.group0()[1] * self.group9()[1])
                    - (other.group0()[2] * self.group9()[2])
                    - (other.group1()[0] * self.group4()[0])
                    - (other.group1()[1] * self.group4()[1])
                    - (other.group1()[2] * self.group4()[2])),
            ]),
            // e41, e42, e43
            Simd32x3::from([
                ((other.group0()[0] * self[e45]) - (other.group0()[1] * self.group4()[2]) + (other.group0()[2] * self.group4()[1])),
                ((other.group0()[0] * self.group4()[2]) + (other.group0()[1] * self[e45]) - (other.group0()[2] * self.group4()[0])),
                (-(other.group0()[0] * self.group4()[1]) + (other.group0()[1] * self.group4()[0]) + (other.group0()[2] * self[e45])),
            ]),
            // e23, e31, e12
            Simd32x3::from([
                ((self.group0()[0] * other.group0()[0]) - (other.group0()[1] * self.group5()[2]) + (other.group0()[2] * self.group5()[1]) + (other.group1()[0] * self[e45])
                    - (other.group1()[1] * self.group4()[2])
                    + (other.group1()[2] * self.group4()[1])),
                ((self.group0()[0] * other.group0()[1]) + (other.group0()[0] * self.group5()[2]) - (other.group0()[2] * self.group5()[0])
                    + (other.group1()[0] * self.group4()[2])
                    + (other.group1()[1] * self[e45])
                    - (other.group1()[2] * self.group4()[0])),
                ((self.group0()[0] * other.group0()[2]) - (other.group0()[0] * self.group5()[1]) + (other.group0()[1] * self.group5()[0]) - (other.group1()[0] * self.group4()[1])
                    + (other.group1()[1] * self.group4()[0])
                    + (other.group1()[2] * self[e45])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[0]) - (other.group0()[1] * self.group6()[2]) + (other.group0()[2] * self.group6()[1]) + (other.group1()[0] * self.group1()[3])
                    - (other.group1()[1] * self.group7()[2])
                    + (other.group1()[2] * self.group7()[1])),
                ((self.group0()[1] * other.group0()[1]) + (other.group0()[0] * self.group6()[2]) - (other.group0()[2] * self.group6()[0])
                    + (other.group1()[0] * self.group7()[2])
                    + (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group7()[0])),
                ((self.group0()[1] * other.group0()[2]) - (other.group0()[0] * self.group6()[1]) + (other.group0()[1] * self.group6()[0]) - (other.group1()[0] * self.group7()[1])
                    + (other.group1()[1] * self.group7()[0])
                    + (other.group1()[2] * self.group1()[3])),
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])
                    + (other.group1()[0] * self.group7()[0])
                    + (other.group1()[1] * self.group7()[1])
                    + (other.group1()[2] * self.group7()[2])),
            ]),
            // e423, e431, e412
            Simd32x3::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group7()[2]) + (other.group0()[2] * self.group7()[1])),
                ((other.group0()[0] * self.group7()[2]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group7()[0])),
                (-(other.group0()[0] * self.group7()[1]) + (other.group0()[1] * self.group7()[0]) + (other.group0()[2] * self.group1()[3])),
            ]),
            // e235, e315, e125
            Simd32x3::from([
                ((self.group0()[1] * other.group1()[0]) + (other.group0()[0] * self[e1]) - (other.group0()[1] * self.group8()[2])
                    + (other.group0()[2] * self.group8()[1])
                    + (other.group1()[0] * self.group6()[3])
                    - (other.group1()[1] * self.group1()[2])
                    - (other.group1()[1] * self.group6()[2])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group1()[2] * self.group6()[1])),
                ((self.group0()[1] * other.group1()[1]) + (other.group0()[0] * self.group8()[2]) + (other.group0()[1] * self[e1]) - (other.group0()[2] * self.group8()[0])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[0] * self.group6()[2])
                    + (other.group1()[1] * self.group6()[3])
                    - (other.group1()[2] * self.group1()[0])
                    - (other.group1()[2] * self.group6()[0])),
                ((self.group0()[1] * other.group1()[2]) - (other.group0()[0] * self.group8()[1]) + (other.group0()[1] * self.group8()[0]) + (other.group0()[2] * self[e1])
                    - (other.group1()[0] * self.group1()[1])
                    - (other.group1()[0] * self.group6()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[1] * self.group6()[0])
                    + (other.group1()[2] * self.group6()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self.group9()[2]) + (other.group0()[2] * self.group9()[1]) + (other.group1()[0] * self[e45])
                    - (other.group1()[1] * self.group4()[2])
                    + (other.group1()[2] * self.group4()[1])),
                ((other.group0()[0] * self.group9()[2]) + (other.group0()[1] * self.group3()[3]) - (other.group0()[2] * self.group9()[0])
                    + (other.group1()[0] * self.group4()[2])
                    + (other.group1()[1] * self[e45])
                    - (other.group1()[2] * self.group4()[0])),
                (-(other.group0()[0] * self.group9()[1]) + (other.group0()[1] * self.group9()[0]) + (other.group0()[2] * self.group3()[3])
                    - (other.group1()[0] * self.group4()[1])
                    + (other.group1()[1] * self.group4()[0])
                    + (other.group1()[2] * self[e45])),
                (-(other.group0()[0] * self.group3()[0])
                    - (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group3()[2])
                    - (other.group1()[0] * self.group5()[0])
                    + (other.group1()[0] * self.group9()[0])
                    - (other.group1()[1] * self.group5()[1])
                    + (other.group1()[1] * self.group9()[1])
                    - (other.group1()[2] * self.group5()[2])
                    + (other.group1()[2] * self.group9()[2])),
            ]),
            // e1234
            (-(other.group0()[0] * self.group4()[0]) - (other.group0()[1] * self.group4()[1]) - (other.group0()[2] * self.group4()[2])),
        );
    }
}
impl GeometricAntiProduct<Motor> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      224      256        0
    fn geometric_anti_product(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((self.group0()[0] * other.group0()[3])
                    - (self.group4()[0] * other.group1()[0])
                    - (self.group4()[1] * other.group1()[1])
                    - (self.group4()[2] * other.group1()[2])
                    - (self.group5()[0] * other.group0()[0])
                    - (self.group5()[1] * other.group0()[1])
                    - (self.group5()[2] * other.group0()[2])
                    + (other.group1()[3] * self[e45])),
                ((self.group0()[1] * other.group0()[3])
                    - (self.group7()[0] * other.group1()[0])
                    - (self.group7()[1] * other.group1()[1])
                    - (self.group7()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group6()[0])
                    - (other.group0()[1] * self.group6()[1])
                    - (other.group0()[2] * self.group6()[2])
                    + (other.group1()[3] * self.group1()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group7()[0] * other.group1()[3]) - (self.group7()[1] * other.group1()[2])
                    + (self.group7()[2] * other.group1()[1])
                    + (other.group0()[0] * self.group6()[3])
                    - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (other.group0()[3] * self.group1()[0])
                    - (other.group1()[0] * self.group1()[3])),
                ((self.group7()[0] * other.group1()[2]) - (self.group7()[1] * other.group1()[3]) - (self.group7()[2] * other.group1()[0])
                    + (other.group0()[0] * self.group1()[2])
                    + (other.group0()[1] * self.group6()[3])
                    - (other.group0()[2] * self.group1()[0])
                    + (other.group0()[3] * self.group1()[1])
                    - (other.group1()[1] * self.group1()[3])),
                (-(self.group7()[0] * other.group1()[1]) + (self.group7()[1] * other.group1()[0])
                    - (self.group7()[2] * other.group1()[3])
                    - (other.group0()[0] * self.group1()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group6()[3])
                    + (other.group0()[3] * self.group1()[2])
                    - (other.group1()[2] * self.group1()[3])),
                (-(self.group7()[0] * other.group0()[0]) - (self.group7()[1] * other.group0()[1]) - (self.group7()[2] * other.group0()[2])
                    + (other.group0()[3] * self.group1()[3])),
            ]),
            // e5
            ((self.group0()[1] * other.group1()[3]) - (self.group8()[0] * other.group0()[0]) - (self.group8()[1] * other.group0()[1]) - (self.group8()[2] * other.group0()[2])
                + (other.group0()[3] * self[e1])
                - (other.group1()[0] * self.group1()[0])
                - (other.group1()[0] * self.group6()[0])
                - (other.group1()[1] * self.group1()[1])
                - (other.group1()[1] * self.group6()[1])
                - (other.group1()[2] * self.group1()[2])
                - (other.group1()[2] * self.group6()[2])
                + (other.group1()[3] * self.group6()[3])),
            // e15, e25, e35, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group5()[0] * other.group1()[3]) + (self.group5()[1] * other.group1()[2]) - (self.group5()[2] * other.group1()[1])
                    + (other.group0()[0] * self.group9()[3])
                    - (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group3()[1])
                    + (other.group0()[3] * self.group3()[0])
                    - (other.group1()[0] * self.group3()[3])
                    + (other.group1()[1] * self.group9()[2])
                    - (other.group1()[2] * self.group9()[1])
                    - (other.group1()[3] * self.group9()[0])),
                ((self.group0()[0] * other.group1()[1]) - (self.group5()[0] * other.group1()[2])
                    + (self.group5()[1] * other.group1()[3])
                    + (self.group5()[2] * other.group1()[0])
                    + (other.group0()[0] * self.group3()[2])
                    + (other.group0()[1] * self.group9()[3])
                    - (other.group0()[2] * self.group3()[0])
                    + (other.group0()[3] * self.group3()[1])
                    - (other.group1()[0] * self.group9()[2])
                    - (other.group1()[1] * self.group3()[3])
                    + (other.group1()[2] * self.group9()[0])
                    - (other.group1()[3] * self.group9()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group5()[0] * other.group1()[1]) - (self.group5()[1] * other.group1()[0]) + (self.group5()[2] * other.group1()[3])
                    - (other.group0()[0] * self.group3()[1])
                    + (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group9()[3])
                    + (other.group0()[3] * self.group3()[2])
                    + (other.group1()[0] * self.group9()[1])
                    - (other.group1()[1] * self.group9()[0])
                    - (other.group1()[2] * self.group3()[3])
                    - (other.group1()[3] * self.group9()[2])),
                (-(self.group4()[0] * other.group1()[0])
                    - (self.group4()[1] * other.group1()[1])
                    - (self.group4()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group9()[0])
                    - (other.group0()[1] * self.group9()[1])
                    - (other.group0()[2] * self.group9()[2])
                    + (other.group0()[3] * self.group3()[3])
                    + (other.group1()[3] * self[e45])),
            ]),
            // e41, e42, e43
            Simd32x3::from([
                ((self.group4()[0] * other.group0()[3]) + (self.group4()[1] * other.group0()[2]) - (self.group4()[2] * other.group0()[1]) + (other.group0()[0] * self[e45])),
                (-(self.group4()[0] * other.group0()[2]) + (self.group4()[1] * other.group0()[3]) + (self.group4()[2] * other.group0()[0]) + (other.group0()[1] * self[e45])),
                ((self.group4()[0] * other.group0()[1]) - (self.group4()[1] * other.group0()[0]) + (self.group4()[2] * other.group0()[3]) + (other.group0()[2] * self[e45])),
            ]),
            // e23, e31, e12
            Simd32x3::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group4()[0] * other.group1()[3]) + (self.group4()[1] * other.group1()[2]) - (self.group4()[2] * other.group1()[1])
                    + (self.group5()[0] * other.group0()[3])
                    + (self.group5()[1] * other.group0()[2])
                    - (self.group5()[2] * other.group0()[1])
                    + (other.group1()[0] * self[e45])),
                ((self.group0()[0] * other.group0()[1]) - (self.group4()[0] * other.group1()[2]) + (self.group4()[1] * other.group1()[3]) + (self.group4()[2] * other.group1()[0])
                    - (self.group5()[0] * other.group0()[2])
                    + (self.group5()[1] * other.group0()[3])
                    + (self.group5()[2] * other.group0()[0])
                    + (other.group1()[1] * self[e45])),
                ((self.group0()[0] * other.group0()[2]) + (self.group4()[0] * other.group1()[1]) - (self.group4()[1] * other.group1()[0])
                    + (self.group4()[2] * other.group1()[3])
                    + (self.group5()[0] * other.group0()[1])
                    - (self.group5()[1] * other.group0()[0])
                    + (self.group5()[2] * other.group0()[3])
                    + (other.group1()[2] * self[e45])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[0]) + (self.group7()[0] * other.group1()[3]) + (self.group7()[1] * other.group1()[2])
                    - (self.group7()[2] * other.group1()[1])
                    - (other.group0()[1] * self.group6()[2])
                    + (other.group0()[2] * self.group6()[1])
                    + (other.group0()[3] * self.group6()[0])
                    + (other.group1()[0] * self.group1()[3])),
                ((self.group0()[1] * other.group0()[1]) - (self.group7()[0] * other.group1()[2])
                    + (self.group7()[1] * other.group1()[3])
                    + (self.group7()[2] * other.group1()[0])
                    + (other.group0()[0] * self.group6()[2])
                    - (other.group0()[2] * self.group6()[0])
                    + (other.group0()[3] * self.group6()[1])
                    + (other.group1()[1] * self.group1()[3])),
                ((self.group0()[1] * other.group0()[2]) + (self.group7()[0] * other.group1()[1]) - (self.group7()[1] * other.group1()[0]) + (self.group7()[2] * other.group1()[3])
                    - (other.group0()[0] * self.group6()[1])
                    + (other.group0()[1] * self.group6()[0])
                    + (other.group0()[3] * self.group6()[2])
                    + (other.group1()[2] * self.group1()[3])),
                ((self.group7()[0] * other.group1()[0]) + (self.group7()[1] * other.group1()[1]) + (self.group7()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    + (other.group0()[3] * self.group6()[3])
                    - (other.group1()[3] * self.group1()[3])),
            ]),
            // e423, e431, e412
            Simd32x3::from([
                ((self.group7()[0] * other.group0()[3]) + (self.group7()[1] * other.group0()[2]) - (self.group7()[2] * other.group0()[1]) + (other.group0()[0] * self.group1()[3])),
                (-(self.group7()[0] * other.group0()[2])
                    + (self.group7()[1] * other.group0()[3])
                    + (self.group7()[2] * other.group0()[0])
                    + (other.group0()[1] * self.group1()[3])),
                ((self.group7()[0] * other.group0()[1]) - (self.group7()[1] * other.group0()[0]) + (self.group7()[2] * other.group0()[3]) + (other.group0()[2] * self.group1()[3])),
            ]),
            // e235, e315, e125
            Simd32x3::from([
                ((self.group0()[1] * other.group1()[0]) + (self.group8()[0] * other.group0()[3]) + (self.group8()[1] * other.group0()[2]) - (self.group8()[2] * other.group0()[1])
                    + (other.group0()[0] * self[e1])
                    + (other.group1()[0] * self.group6()[3])
                    - (other.group1()[1] * self.group1()[2])
                    - (other.group1()[1] * self.group6()[2])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group1()[2] * self.group6()[1])
                    + (other.group1()[3] * self.group1()[0])
                    + (other.group1()[3] * self.group6()[0])),
                ((self.group0()[1] * other.group1()[1]) - (self.group8()[0] * other.group0()[2])
                    + (self.group8()[1] * other.group0()[3])
                    + (self.group8()[2] * other.group0()[0])
                    + (other.group0()[1] * self[e1])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[0] * self.group6()[2])
                    + (other.group1()[1] * self.group6()[3])
                    - (other.group1()[2] * self.group1()[0])
                    - (other.group1()[2] * self.group6()[0])
                    + (other.group1()[3] * self.group1()[1])
                    + (other.group1()[3] * self.group6()[1])),
                ((self.group0()[1] * other.group1()[2]) + (self.group8()[0] * other.group0()[1]) - (self.group8()[1] * other.group0()[0])
                    + (self.group8()[2] * other.group0()[3])
                    + (other.group0()[2] * self[e1])
                    - (other.group1()[0] * self.group1()[1])
                    - (other.group1()[0] * self.group6()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[1] * self.group6()[0])
                    + (other.group1()[2] * self.group6()[3])
                    + (other.group1()[3] * self.group1()[2])
                    + (other.group1()[3] * self.group6()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group4()[0] * other.group1()[3]) + (self.group4()[1] * other.group1()[2]) - (self.group4()[2] * other.group1()[1]) + (other.group0()[0] * self.group3()[3])
                    - (other.group0()[1] * self.group9()[2])
                    + (other.group0()[2] * self.group9()[1])
                    + (other.group0()[3] * self.group9()[0])
                    + (other.group1()[0] * self[e45])),
                (-(self.group4()[0] * other.group1()[2])
                    + (self.group4()[1] * other.group1()[3])
                    + (self.group4()[2] * other.group1()[0])
                    + (other.group0()[0] * self.group9()[2])
                    + (other.group0()[1] * self.group3()[3])
                    - (other.group0()[2] * self.group9()[0])
                    + (other.group0()[3] * self.group9()[1])
                    + (other.group1()[1] * self[e45])),
                ((self.group4()[0] * other.group1()[1]) - (self.group4()[1] * other.group1()[0]) + (self.group4()[2] * other.group1()[3]) - (other.group0()[0] * self.group9()[1])
                    + (other.group0()[1] * self.group9()[0])
                    + (other.group0()[2] * self.group3()[3])
                    + (other.group0()[3] * self.group9()[2])
                    + (other.group1()[2] * self[e45])),
                ((self.group0()[0] * other.group1()[3])
                    - (self.group5()[0] * other.group1()[0])
                    - (self.group5()[1] * other.group1()[1])
                    - (self.group5()[2] * other.group1()[2])
                    - (other.group0()[0] * self.group3()[0])
                    - (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group3()[2])
                    + (other.group0()[3] * self.group9()[3])
                    + (other.group1()[0] * self.group9()[0])
                    + (other.group1()[1] * self.group9()[1])
                    + (other.group1()[2] * self.group9()[2])
                    - (other.group1()[3] * self.group3()[3])),
            ]),
            // e1234
            (-(self.group4()[0] * other.group0()[0]) - (self.group4()[1] * other.group0()[1]) - (self.group4()[2] * other.group0()[2]) + (other.group0()[3] * self[e45])),
        );
    }
}
impl GeometricAntiProduct<MultiVector> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      992     1024        0
    fn geometric_anti_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])
                    - (other.group4()[0] * self.group8()[0])
                    - (other.group4()[1] * self.group8()[1])
                    - (other.group4()[2] * self.group8()[2])
                    - (other.group5()[0] * self.group6()[0])
                    - (other.group5()[1] * self.group6()[1])
                    - (other.group5()[2] * self.group6()[2])
                    - (other.group7()[0] * self.group3()[0])
                    - (other.group7()[1] * self.group3()[1])
                    - (other.group7()[2] * self.group3()[2])
                    - (other.group8()[0] * self.group4()[0])
                    - (other.group8()[1] * self.group4()[1])
                    - (other.group8()[2] * self.group4()[2])
                    - (self.group5()[0] * other.group6()[0])
                    - (self.group5()[1] * other.group6()[1])
                    - (self.group5()[2] * other.group6()[2])
                    - (self.group7()[0] * other.group3()[0])
                    - (self.group7()[1] * other.group3()[1])
                    - (self.group7()[2] * other.group3()[2])
                    + (other.group1()[0] * self.group9()[0])
                    + (other.group1()[1] * self.group9()[1])
                    + (other.group1()[2] * self.group9()[2])
                    + (other.group1()[3] * self.group9()[3])
                    - (other.group3()[3] * self.group6()[3])
                    - (other.group6()[3] * self.group3()[3])
                    + (other.group9()[0] * self.group1()[0])
                    + (other.group9()[1] * self.group1()[1])
                    + (other.group9()[2] * self.group1()[2])
                    + (other.group9()[3] * self.group1()[3])
                    + (other[e1] * self[e45])
                    + (other[e45] * self[e1])),
                (-(other.group0()[0] * self.group0()[0])
                    + (other.group0()[1] * self.group0()[1])
                    + (other.group4()[0] * self.group3()[0])
                    + (other.group4()[1] * self.group3()[1])
                    + (other.group4()[2] * self.group3()[2])
                    + (other.group5()[0] * self.group5()[0])
                    + (other.group5()[1] * self.group5()[1])
                    + (other.group5()[2] * self.group5()[2])
                    - (other.group7()[0] * self.group8()[0])
                    - (other.group7()[1] * self.group8()[1])
                    - (other.group7()[2] * self.group8()[2])
                    - (other.group8()[0] * self.group7()[0])
                    - (other.group8()[1] * self.group7()[1])
                    - (other.group8()[2] * self.group7()[2])
                    + (self.group4()[0] * other.group3()[0])
                    + (self.group4()[1] * other.group3()[1])
                    + (self.group4()[2] * other.group3()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    + (other.group1()[3] * self[e1])
                    - (other.group3()[3] * self.group3()[3])
                    - (other.group6()[0] * self.group6()[0])
                    - (other.group6()[1] * self.group6()[1])
                    - (other.group6()[2] * self.group6()[2])
                    + (other.group6()[3] * self.group6()[3])
                    + (other.group9()[0] * self.group9()[0])
                    + (other.group9()[1] * self.group9()[1])
                    + (other.group9()[2] * self.group9()[2])
                    - (other.group9()[3] * self[e45])
                    + (self.group1()[3] * other[e1])
                    - (self.group9()[3] * other[e45])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group9()[0]) + (other.group0()[1] * self.group1()[0]) + (self.group0()[0] * other.group9()[0]) + (self.group0()[1] * other.group1()[0])
                    - (other.group4()[0] * self.group9()[3])
                    + (other.group4()[1] * self.group3()[2])
                    - (other.group4()[2] * self.group3()[1])
                    + (other.group5()[0] * self.group3()[3])
                    - (other.group5()[1] * self.group9()[2])
                    + (other.group5()[2] * self.group9()[1])
                    + (other.group7()[0] * self[e1])
                    - (other.group7()[1] * self.group8()[2])
                    + (other.group7()[2] * self.group8()[1])
                    - (other.group8()[0] * self.group1()[3])
                    + (other.group8()[1] * self.group7()[2])
                    - (other.group8()[2] * self.group7()[1])
                    + (self.group4()[0] * other.group9()[3])
                    + (self.group4()[1] * other.group3()[2])
                    - (self.group4()[2] * other.group3()[1])
                    + (self.group5()[0] * other.group3()[3])
                    + (self.group5()[1] * other.group9()[2])
                    - (self.group5()[2] * other.group9()[1])
                    - (self.group7()[0] * other[e1])
                    + (self.group8()[0] * other.group1()[3])
                    - (other.group1()[1] * self.group6()[2])
                    + (other.group1()[2] * self.group6()[1])
                    + (other.group3()[0] * self[e45])
                    + (other.group6()[0] * self.group6()[3])
                    - (other.group6()[1] * self.group1()[2])
                    + (other.group6()[2] * self.group1()[1])
                    + (other.group6()[3] * self.group6()[0])
                    - (self.group3()[0] * other[e45])),
                ((other.group0()[0] * self.group9()[1]) + (other.group0()[1] * self.group1()[1]) + (self.group0()[0] * other.group9()[1]) + (self.group0()[1] * other.group1()[1])
                    - (other.group4()[0] * self.group3()[2])
                    - (other.group4()[1] * self.group9()[3])
                    + (other.group4()[2] * self.group3()[0])
                    + (other.group5()[0] * self.group9()[2])
                    + (other.group5()[1] * self.group3()[3])
                    - (other.group5()[2] * self.group9()[0])
                    + (other.group7()[0] * self.group8()[2])
                    + (other.group7()[1] * self[e1])
                    - (other.group7()[2] * self.group8()[0])
                    - (other.group8()[0] * self.group7()[2])
                    - (other.group8()[1] * self.group1()[3])
                    + (other.group8()[2] * self.group7()[0])
                    - (self.group4()[0] * other.group3()[2])
                    + (self.group4()[1] * other.group9()[3])
                    + (self.group4()[2] * other.group3()[0])
                    - (self.group5()[0] * other.group9()[2])
                    + (self.group5()[1] * other.group3()[3])
                    + (self.group5()[2] * other.group9()[0])
                    - (self.group7()[1] * other[e1])
                    + (self.group8()[1] * other.group1()[3])
                    + (other.group1()[0] * self.group6()[2])
                    - (other.group1()[2] * self.group6()[0])
                    + (other.group3()[1] * self[e45])
                    + (other.group6()[0] * self.group1()[2])
                    + (other.group6()[1] * self.group6()[3])
                    - (other.group6()[2] * self.group1()[0])
                    + (other.group6()[3] * self.group6()[1])
                    - (self.group3()[1] * other[e45])),
                ((other.group0()[0] * self.group9()[2])
                    + (other.group0()[1] * self.group1()[2])
                    + (self.group0()[0] * other.group9()[2])
                    + (self.group0()[1] * other.group1()[2])
                    + (other.group4()[0] * self.group3()[1])
                    - (other.group4()[1] * self.group3()[0])
                    - (other.group4()[2] * self.group9()[3])
                    - (other.group5()[0] * self.group9()[1])
                    + (other.group5()[1] * self.group9()[0])
                    + (other.group5()[2] * self.group3()[3])
                    - (other.group7()[0] * self.group8()[1])
                    + (other.group7()[1] * self.group8()[0])
                    + (other.group7()[2] * self[e1])
                    + (other.group8()[0] * self.group7()[1])
                    - (other.group8()[1] * self.group7()[0])
                    - (other.group8()[2] * self.group1()[3])
                    + (self.group4()[0] * other.group3()[1])
                    - (self.group4()[1] * other.group3()[0])
                    + (self.group4()[2] * other.group9()[3])
                    + (self.group5()[0] * other.group9()[1])
                    - (self.group5()[1] * other.group9()[0])
                    + (self.group5()[2] * other.group3()[3])
                    - (self.group7()[2] * other[e1])
                    + (self.group8()[2] * other.group1()[3])
                    - (other.group1()[0] * self.group6()[1])
                    + (other.group1()[1] * self.group6()[0])
                    + (other.group3()[2] * self[e45])
                    - (other.group6()[0] * self.group1()[1])
                    + (other.group6()[1] * self.group1()[0])
                    + (other.group6()[2] * self.group6()[3])
                    + (other.group6()[3] * self.group6()[2])
                    - (self.group3()[2] * other[e45])),
                (-(other.group0()[0] * self[e45]) + (other.group0()[1] * self.group1()[3]) - (self.group0()[0] * other[e45])
                    + (self.group0()[1] * other.group1()[3])
                    + (other.group4()[0] * self.group5()[0])
                    + (other.group4()[0] * self.group9()[0])
                    + (other.group4()[1] * self.group5()[1])
                    + (other.group4()[1] * self.group9()[1])
                    + (other.group4()[2] * self.group5()[2])
                    + (other.group4()[2] * self.group9()[2])
                    + (other.group5()[0] * self.group4()[0])
                    + (other.group5()[1] * self.group4()[1])
                    + (other.group5()[2] * self.group4()[2])
                    + (other.group7()[0] * self.group1()[0])
                    - (other.group7()[0] * self.group6()[0])
                    + (other.group7()[1] * self.group1()[1])
                    - (other.group7()[1] * self.group6()[1])
                    + (other.group7()[2] * self.group1()[2])
                    - (other.group7()[2] * self.group6()[2])
                    - (self.group4()[0] * other.group9()[0])
                    - (self.group4()[1] * other.group9()[1])
                    - (self.group4()[2] * other.group9()[2])
                    - (self.group7()[0] * other.group1()[0])
                    - (self.group7()[0] * other.group6()[0])
                    - (self.group7()[1] * other.group1()[1])
                    - (self.group7()[1] * other.group6()[1])
                    - (self.group7()[2] * other.group1()[2])
                    - (self.group7()[2] * other.group6()[2])
                    - (other.group1()[3] * self.group6()[3])
                    + (other.group3()[3] * self[e45])
                    + (other.group6()[3] * self.group1()[3])
                    - (self.group3()[3] * other[e45])),
            ]),
            // e5
            (-(other.group0()[0] * self.group9()[3]) + (other.group0()[1] * self[e1]) - (self.group0()[0] * other.group9()[3])
                + (self.group0()[1] * other[e1])
                + (other.group5()[0] * self.group3()[0])
                + (other.group5()[1] * self.group3()[1])
                + (other.group5()[2] * self.group3()[2])
                - (other.group8()[0] * self.group1()[0])
                - (other.group8()[0] * self.group6()[0])
                - (other.group8()[1] * self.group1()[1])
                - (other.group8()[1] * self.group6()[1])
                - (other.group8()[2] * self.group1()[2])
                - (other.group8()[2] * self.group6()[2])
                + (self.group5()[0] * other.group3()[0])
                + (self.group5()[1] * other.group3()[1])
                + (self.group5()[2] * other.group3()[2])
                + (self.group8()[0] * other.group1()[0])
                - (self.group8()[0] * other.group6()[0])
                + (self.group8()[1] * other.group1()[1])
                - (self.group8()[1] * other.group6()[1])
                + (self.group8()[2] * other.group1()[2])
                - (self.group8()[2] * other.group6()[2])
                - (other.group3()[0] * self.group9()[0])
                - (other.group3()[1] * self.group9()[1])
                - (other.group3()[2] * self.group9()[2])
                - (other.group3()[3] * self.group9()[3])
                - (other.group6()[3] * self[e1])
                + (other.group9()[0] * self.group3()[0])
                + (other.group9()[1] * self.group3()[1])
                + (other.group9()[2] * self.group3()[2])
                + (other.group9()[3] * self.group3()[3])
                + (self.group6()[3] * other[e1])),
            // e15, e25, e35, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group8()[0])
                    + (other.group0()[1] * self.group3()[0])
                    + (self.group0()[0] * other.group8()[0])
                    + (self.group0()[1] * other.group3()[0])
                    + (other.group5()[0] * self[e1])
                    - (other.group5()[1] * self.group8()[2])
                    + (other.group5()[2] * self.group8()[1])
                    - (other.group8()[0] * self.group3()[3])
                    - (other.group8()[1] * self.group5()[2])
                    + (other.group8()[1] * self.group9()[2])
                    + (other.group8()[2] * self.group5()[1])
                    - (other.group8()[2] * self.group9()[1])
                    + (self.group5()[0] * other[e1])
                    + (self.group8()[0] * other.group3()[3])
                    + (self.group8()[1] * other.group9()[2])
                    - (self.group8()[2] * other.group9()[1])
                    - (other.group1()[0] * self.group9()[3])
                    + (other.group1()[1] * self.group3()[2])
                    - (other.group1()[2] * self.group3()[1])
                    + (other.group3()[0] * self.group6()[3])
                    - (other.group3()[1] * self.group1()[2])
                    - (other.group3()[1] * self.group6()[2])
                    + (other.group3()[2] * self.group1()[1])
                    + (other.group3()[2] * self.group6()[1])
                    + (other.group6()[0] * self.group9()[3])
                    - (other.group6()[1] * self.group3()[2])
                    + (other.group6()[2] * self.group3()[1])
                    - (other.group6()[3] * self.group3()[0])
                    + (other.group9()[0] * self[e1])
                    + (other.group9()[3] * self.group1()[0])
                    + (other.group9()[3] * self.group6()[0])
                    - (self.group9()[0] * other[e1])),
                ((other.group0()[0] * self.group8()[1])
                    + (other.group0()[1] * self.group3()[1])
                    + (self.group0()[0] * other.group8()[1])
                    + (self.group0()[1] * other.group3()[1])
                    + (other.group5()[0] * self.group8()[2])
                    + (other.group5()[1] * self[e1])
                    - (other.group5()[2] * self.group8()[0])
                    + (other.group8()[0] * self.group5()[2])
                    - (other.group8()[0] * self.group9()[2])
                    - (other.group8()[1] * self.group3()[3])
                    - (other.group8()[2] * self.group5()[0])
                    + (other.group8()[2] * self.group9()[0])
                    + (self.group5()[1] * other[e1])
                    - (self.group8()[0] * other.group9()[2])
                    + (self.group8()[1] * other.group3()[3])
                    + (self.group8()[2] * other.group9()[0])
                    - (other.group1()[0] * self.group3()[2])
                    - (other.group1()[1] * self.group9()[3])
                    + (other.group1()[2] * self.group3()[0])
                    + (other.group3()[0] * self.group1()[2])
                    + (other.group3()[0] * self.group6()[2])
                    + (other.group3()[1] * self.group6()[3])
                    - (other.group3()[2] * self.group1()[0])
                    - (other.group3()[2] * self.group6()[0])
                    + (other.group6()[0] * self.group3()[2])
                    + (other.group6()[1] * self.group9()[3])
                    - (other.group6()[2] * self.group3()[0])
                    - (other.group6()[3] * self.group3()[1])
                    + (other.group9()[1] * self[e1])
                    + (other.group9()[3] * self.group1()[1])
                    + (other.group9()[3] * self.group6()[1])
                    - (self.group9()[1] * other[e1])),
                ((other.group0()[0] * self.group8()[2]) + (other.group0()[1] * self.group3()[2]) + (self.group0()[0] * other.group8()[2]) + (self.group0()[1] * other.group3()[2])
                    - (other.group5()[0] * self.group8()[1])
                    + (other.group5()[1] * self.group8()[0])
                    + (other.group5()[2] * self[e1])
                    - (other.group8()[0] * self.group5()[1])
                    + (other.group8()[0] * self.group9()[1])
                    + (other.group8()[1] * self.group5()[0])
                    - (other.group8()[1] * self.group9()[0])
                    - (other.group8()[2] * self.group3()[3])
                    + (self.group5()[2] * other[e1])
                    + (self.group8()[0] * other.group9()[1])
                    - (self.group8()[1] * other.group9()[0])
                    + (self.group8()[2] * other.group3()[3])
                    + (other.group1()[0] * self.group3()[1])
                    - (other.group1()[1] * self.group3()[0])
                    - (other.group1()[2] * self.group9()[3])
                    - (other.group3()[0] * self.group1()[1])
                    - (other.group3()[0] * self.group6()[1])
                    + (other.group3()[1] * self.group1()[0])
                    + (other.group3()[1] * self.group6()[0])
                    + (other.group3()[2] * self.group6()[3])
                    - (other.group6()[0] * self.group3()[1])
                    + (other.group6()[1] * self.group3()[0])
                    + (other.group6()[2] * self.group9()[3])
                    - (other.group6()[3] * self.group3()[2])
                    + (other.group9()[2] * self[e1])
                    + (other.group9()[3] * self.group1()[2])
                    + (other.group9()[3] * self.group6()[2])
                    - (self.group9()[2] * other[e1])),
                (-(other.group0()[0] * self.group6()[3]) + (other.group0()[1] * self.group3()[3]) - (self.group0()[0] * other.group6()[3])
                    + (self.group0()[1] * other.group3()[3])
                    + (other.group4()[0] * self.group8()[0])
                    + (other.group4()[1] * self.group8()[1])
                    + (other.group4()[2] * self.group8()[2])
                    + (other.group5()[0] * self.group1()[0])
                    + (other.group5()[1] * self.group1()[1])
                    + (other.group5()[2] * self.group1()[2])
                    + (other.group7()[0] * self.group3()[0])
                    + (other.group7()[1] * self.group3()[1])
                    + (other.group7()[2] * self.group3()[2])
                    - (other.group8()[0] * self.group4()[0])
                    - (other.group8()[1] * self.group4()[1])
                    - (other.group8()[2] * self.group4()[2])
                    + (self.group5()[0] * other.group1()[0])
                    + (self.group5()[1] * other.group1()[1])
                    + (self.group5()[2] * other.group1()[2])
                    - (self.group7()[0] * other.group3()[0])
                    - (self.group7()[1] * other.group3()[1])
                    - (self.group7()[2] * other.group3()[2])
                    - (other.group1()[3] * self.group9()[3])
                    - (other.group6()[0] * self.group9()[0])
                    - (other.group6()[1] * self.group9()[1])
                    - (other.group6()[2] * self.group9()[2])
                    - (other.group9()[0] * self.group6()[0])
                    - (other.group9()[1] * self.group6()[1])
                    - (other.group9()[2] * self.group6()[2])
                    + (other.group9()[3] * self.group1()[3])
                    + (other[e1] * self[e45])
                    - (other[e45] * self[e1])),
            ]),
            // e41, e42, e43
            Simd32x3::from([
                ((other.group0()[0] * self.group7()[0]) + (other.group0()[1] * self.group4()[0]) + (self.group0()[0] * other.group7()[0]) + (self.group0()[1] * other.group4()[0])
                    - (other.group4()[0] * self.group6()[3])
                    + (other.group4()[1] * self.group1()[2])
                    - (other.group4()[1] * self.group6()[2])
                    - (other.group4()[2] * self.group1()[1])
                    + (other.group4()[2] * self.group6()[1])
                    + (other.group5()[0] * self.group1()[3])
                    - (other.group5()[1] * self.group7()[2])
                    + (other.group5()[2] * self.group7()[1])
                    + (other.group7()[0] * self.group3()[3])
                    - (other.group7()[1] * self.group5()[2])
                    - (other.group7()[1] * self.group9()[2])
                    + (other.group7()[2] * self.group5()[1])
                    + (other.group7()[2] * self.group9()[1])
                    + (self.group4()[0] * other.group6()[3])
                    + (self.group4()[1] * other.group1()[2])
                    + (self.group4()[1] * other.group6()[2])
                    - (self.group4()[2] * other.group1()[1])
                    - (self.group4()[2] * other.group6()[1])
                    + (self.group5()[0] * other.group1()[3])
                    - (self.group7()[0] * other.group3()[3])
                    - (self.group7()[1] * other.group9()[2])
                    + (self.group7()[2] * other.group9()[1])
                    + (other.group1()[0] * self[e45])
                    + (other.group1()[3] * self.group9()[0])
                    + (other.group6()[0] * self[e45])
                    - (other.group9()[0] * self.group1()[3])
                    - (self.group1()[0] * other[e45])
                    + (self.group6()[0] * other[e45])),
                ((other.group0()[0] * self.group7()[1]) + (other.group0()[1] * self.group4()[1]) + (self.group0()[0] * other.group7()[1]) + (self.group0()[1] * other.group4()[1])
                    - (other.group4()[0] * self.group1()[2])
                    + (other.group4()[0] * self.group6()[2])
                    - (other.group4()[1] * self.group6()[3])
                    + (other.group4()[2] * self.group1()[0])
                    - (other.group4()[2] * self.group6()[0])
                    + (other.group5()[0] * self.group7()[2])
                    + (other.group5()[1] * self.group1()[3])
                    - (other.group5()[2] * self.group7()[0])
                    + (other.group7()[0] * self.group5()[2])
                    + (other.group7()[0] * self.group9()[2])
                    + (other.group7()[1] * self.group3()[3])
                    - (other.group7()[2] * self.group5()[0])
                    - (other.group7()[2] * self.group9()[0])
                    - (self.group4()[0] * other.group1()[2])
                    - (self.group4()[0] * other.group6()[2])
                    + (self.group4()[1] * other.group6()[3])
                    + (self.group4()[2] * other.group1()[0])
                    + (self.group4()[2] * other.group6()[0])
                    + (self.group5()[1] * other.group1()[3])
                    + (self.group7()[0] * other.group9()[2])
                    - (self.group7()[1] * other.group3()[3])
                    - (self.group7()[2] * other.group9()[0])
                    + (other.group1()[1] * self[e45])
                    + (other.group1()[3] * self.group9()[1])
                    + (other.group6()[1] * self[e45])
                    - (other.group9()[1] * self.group1()[3])
                    - (self.group1()[1] * other[e45])
                    + (self.group6()[1] * other[e45])),
                ((other.group0()[0] * self.group7()[2])
                    + (other.group0()[1] * self.group4()[2])
                    + (self.group0()[0] * other.group7()[2])
                    + (self.group0()[1] * other.group4()[2])
                    + (other.group4()[0] * self.group1()[1])
                    - (other.group4()[0] * self.group6()[1])
                    - (other.group4()[1] * self.group1()[0])
                    + (other.group4()[1] * self.group6()[0])
                    - (other.group4()[2] * self.group6()[3])
                    - (other.group5()[0] * self.group7()[1])
                    + (other.group5()[1] * self.group7()[0])
                    + (other.group5()[2] * self.group1()[3])
                    - (other.group7()[0] * self.group5()[1])
                    - (other.group7()[0] * self.group9()[1])
                    + (other.group7()[1] * self.group5()[0])
                    + (other.group7()[1] * self.group9()[0])
                    + (other.group7()[2] * self.group3()[3])
                    + (self.group4()[0] * other.group1()[1])
                    + (self.group4()[0] * other.group6()[1])
                    - (self.group4()[1] * other.group1()[0])
                    - (self.group4()[1] * other.group6()[0])
                    + (self.group4()[2] * other.group6()[3])
                    + (self.group5()[2] * other.group1()[3])
                    - (self.group7()[0] * other.group9()[1])
                    + (self.group7()[1] * other.group9()[0])
                    - (self.group7()[2] * other.group3()[3])
                    + (other.group1()[2] * self[e45])
                    + (other.group1()[3] * self.group9()[2])
                    + (other.group6()[2] * self[e45])
                    - (other.group9()[2] * self.group1()[3])
                    - (self.group1()[2] * other[e45])
                    + (self.group6()[2] * other[e45])),
            ]),
            // e23, e31, e12
            Simd32x3::from([
                ((other.group0()[0] * self.group6()[0])
                    + (other.group0()[1] * self.group5()[0])
                    + (self.group0()[0] * other.group6()[0])
                    + (self.group0()[1] * other.group5()[0])
                    + (other.group4()[0] * self[e1])
                    - (other.group4()[1] * self.group8()[2])
                    + (other.group4()[2] * self.group8()[1])
                    - (other.group5()[1] * self.group6()[2])
                    + (other.group5()[2] * self.group6()[1])
                    + (other.group7()[0] * self.group9()[3])
                    - (other.group7()[1] * self.group3()[2])
                    + (other.group7()[2] * self.group3()[1])
                    + (other.group8()[0] * self[e45])
                    - (other.group8()[1] * self.group4()[2])
                    + (other.group8()[2] * self.group4()[1])
                    + (self.group4()[0] * other[e1])
                    + (self.group5()[1] * other.group6()[2])
                    - (self.group5()[2] * other.group6()[1])
                    + (self.group7()[0] * other.group9()[3])
                    + (self.group7()[1] * other.group3()[2])
                    - (self.group7()[2] * other.group3()[1])
                    + (self.group8()[0] * other[e45])
                    - (other.group1()[0] * self.group3()[3])
                    + (other.group1()[1] * self.group9()[2])
                    - (other.group1()[2] * self.group9()[1])
                    + (other.group1()[3] * self.group3()[0])
                    + (other.group3()[0] * self.group1()[3])
                    - (other.group3()[3] * self.group1()[0])
                    - (other.group6()[3] * self.group9()[0])
                    - (other.group9()[0] * self.group6()[3])
                    + (other.group9()[1] * self.group1()[2])
                    - (other.group9()[2] * self.group1()[1])),
                ((other.group0()[0] * self.group6()[1])
                    + (other.group0()[1] * self.group5()[1])
                    + (self.group0()[0] * other.group6()[1])
                    + (self.group0()[1] * other.group5()[1])
                    + (other.group4()[0] * self.group8()[2])
                    + (other.group4()[1] * self[e1])
                    - (other.group4()[2] * self.group8()[0])
                    + (other.group5()[0] * self.group6()[2])
                    - (other.group5()[2] * self.group6()[0])
                    + (other.group7()[0] * self.group3()[2])
                    + (other.group7()[1] * self.group9()[3])
                    - (other.group7()[2] * self.group3()[0])
                    + (other.group8()[0] * self.group4()[2])
                    + (other.group8()[1] * self[e45])
                    - (other.group8()[2] * self.group4()[0])
                    + (self.group4()[1] * other[e1])
                    - (self.group5()[0] * other.group6()[2])
                    + (self.group5()[2] * other.group6()[0])
                    - (self.group7()[0] * other.group3()[2])
                    + (self.group7()[1] * other.group9()[3])
                    + (self.group7()[2] * other.group3()[0])
                    + (self.group8()[1] * other[e45])
                    - (other.group1()[0] * self.group9()[2])
                    - (other.group1()[1] * self.group3()[3])
                    + (other.group1()[2] * self.group9()[0])
                    + (other.group1()[3] * self.group3()[1])
                    + (other.group3()[1] * self.group1()[3])
                    - (other.group3()[3] * self.group1()[1])
                    - (other.group6()[3] * self.group9()[1])
                    - (other.group9()[0] * self.group1()[2])
                    - (other.group9()[1] * self.group6()[3])
                    + (other.group9()[2] * self.group1()[0])),
                ((other.group0()[0] * self.group6()[2]) + (other.group0()[1] * self.group5()[2]) + (self.group0()[0] * other.group6()[2]) + (self.group0()[1] * other.group5()[2])
                    - (other.group4()[0] * self.group8()[1])
                    + (other.group4()[1] * self.group8()[0])
                    + (other.group4()[2] * self[e1])
                    - (other.group5()[0] * self.group6()[1])
                    + (other.group5()[1] * self.group6()[0])
                    - (other.group7()[0] * self.group3()[1])
                    + (other.group7()[1] * self.group3()[0])
                    + (other.group7()[2] * self.group9()[3])
                    - (other.group8()[0] * self.group4()[1])
                    + (other.group8()[1] * self.group4()[0])
                    + (other.group8()[2] * self[e45])
                    + (self.group4()[2] * other[e1])
                    + (self.group5()[0] * other.group6()[1])
                    - (self.group5()[1] * other.group6()[0])
                    + (self.group7()[0] * other.group3()[1])
                    - (self.group7()[1] * other.group3()[0])
                    + (self.group7()[2] * other.group9()[3])
                    + (self.group8()[2] * other[e45])
                    + (other.group1()[0] * self.group9()[1])
                    - (other.group1()[1] * self.group9()[0])
                    - (other.group1()[2] * self.group3()[3])
                    + (other.group1()[3] * self.group3()[2])
                    + (other.group3()[2] * self.group1()[3])
                    - (other.group3()[3] * self.group1()[2])
                    - (other.group6()[3] * self.group9()[2])
                    + (other.group9()[0] * self.group1()[1])
                    - (other.group9()[1] * self.group1()[0])
                    - (other.group9()[2] * self.group6()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group5()[0]) + (other.group0()[1] * self.group6()[0]) - (self.group0()[0] * other.group5()[0])
                    + (self.group0()[1] * other.group6()[0])
                    - (other.group4()[0] * self.group9()[3])
                    + (other.group4()[1] * self.group3()[2])
                    - (other.group4()[2] * self.group3()[1])
                    + (other.group5()[1] * self.group5()[2])
                    - (other.group5()[2] * self.group5()[1])
                    + (other.group7()[0] * self[e1])
                    - (other.group7()[1] * self.group8()[2])
                    + (other.group7()[2] * self.group8()[1])
                    + (other.group8()[0] * self.group1()[3])
                    - (other.group8()[1] * self.group7()[2])
                    + (other.group8()[2] * self.group7()[1])
                    - (self.group4()[0] * other.group9()[3])
                    - (self.group4()[1] * other.group3()[2])
                    + (self.group4()[2] * other.group3()[1])
                    + (self.group7()[0] * other[e1])
                    + (self.group8()[0] * other.group1()[3])
                    + (other.group1()[0] * self.group6()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])
                    - (other.group3()[0] * self[e45])
                    - (other.group3()[3] * self.group9()[0])
                    - (other.group6()[1] * self.group6()[2])
                    + (other.group6()[2] * self.group6()[1])
                    + (other.group6()[3] * self.group1()[0])
                    - (other.group9()[0] * self.group3()[3])
                    + (other.group9()[1] * self.group9()[2])
                    - (other.group9()[2] * self.group9()[1])
                    - (self.group3()[0] * other[e45])),
                (-(other.group0()[0] * self.group5()[1]) + (other.group0()[1] * self.group6()[1]) - (self.group0()[0] * other.group5()[1])
                    + (self.group0()[1] * other.group6()[1])
                    - (other.group4()[0] * self.group3()[2])
                    - (other.group4()[1] * self.group9()[3])
                    + (other.group4()[2] * self.group3()[0])
                    - (other.group5()[0] * self.group5()[2])
                    + (other.group5()[2] * self.group5()[0])
                    + (other.group7()[0] * self.group8()[2])
                    + (other.group7()[1] * self[e1])
                    - (other.group7()[2] * self.group8()[0])
                    + (other.group8()[0] * self.group7()[2])
                    + (other.group8()[1] * self.group1()[3])
                    - (other.group8()[2] * self.group7()[0])
                    + (self.group4()[0] * other.group3()[2])
                    - (self.group4()[1] * other.group9()[3])
                    - (self.group4()[2] * other.group3()[0])
                    + (self.group7()[1] * other[e1])
                    + (self.group8()[1] * other.group1()[3])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group6()[3])
                    - (other.group1()[2] * self.group1()[0])
                    - (other.group3()[1] * self[e45])
                    - (other.group3()[3] * self.group9()[1])
                    + (other.group6()[0] * self.group6()[2])
                    - (other.group6()[2] * self.group6()[0])
                    + (other.group6()[3] * self.group1()[1])
                    - (other.group9()[0] * self.group9()[2])
                    - (other.group9()[1] * self.group3()[3])
                    + (other.group9()[2] * self.group9()[0])
                    - (self.group3()[1] * other[e45])),
                (-(other.group0()[0] * self.group5()[2]) + (other.group0()[1] * self.group6()[2]) - (self.group0()[0] * other.group5()[2])
                    + (self.group0()[1] * other.group6()[2])
                    + (other.group4()[0] * self.group3()[1])
                    - (other.group4()[1] * self.group3()[0])
                    - (other.group4()[2] * self.group9()[3])
                    + (other.group5()[0] * self.group5()[1])
                    - (other.group5()[1] * self.group5()[0])
                    - (other.group7()[0] * self.group8()[1])
                    + (other.group7()[1] * self.group8()[0])
                    + (other.group7()[2] * self[e1])
                    - (other.group8()[0] * self.group7()[1])
                    + (other.group8()[1] * self.group7()[0])
                    + (other.group8()[2] * self.group1()[3])
                    - (self.group4()[0] * other.group3()[1])
                    + (self.group4()[1] * other.group3()[0])
                    - (self.group4()[2] * other.group9()[3])
                    + (self.group7()[2] * other[e1])
                    + (self.group8()[2] * other.group1()[3])
                    - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group6()[3])
                    - (other.group3()[2] * self[e45])
                    - (other.group3()[3] * self.group9()[2])
                    - (other.group6()[0] * self.group6()[1])
                    + (other.group6()[1] * self.group6()[0])
                    + (other.group6()[3] * self.group1()[2])
                    + (other.group9()[0] * self.group9()[1])
                    - (other.group9()[1] * self.group9()[0])
                    - (other.group9()[2] * self.group3()[3])
                    - (self.group3()[2] * other[e45])),
                ((other.group0()[0] * self.group3()[3])
                    + (other.group0()[1] * self.group6()[3])
                    + (self.group0()[0] * other.group3()[3])
                    + (self.group0()[1] * other.group6()[3])
                    + (other.group4()[0] * self.group3()[0])
                    + (other.group4()[1] * self.group3()[1])
                    + (other.group4()[2] * self.group3()[2])
                    - (other.group5()[0] * self.group9()[0])
                    - (other.group5()[1] * self.group9()[1])
                    - (other.group5()[2] * self.group9()[2])
                    - (other.group7()[0] * self.group8()[0])
                    - (other.group7()[1] * self.group8()[1])
                    - (other.group7()[2] * self.group8()[2])
                    + (other.group8()[0] * self.group7()[0])
                    + (other.group8()[1] * self.group7()[1])
                    + (other.group8()[2] * self.group7()[2])
                    - (self.group4()[0] * other.group3()[0])
                    - (self.group4()[1] * other.group3()[1])
                    - (self.group4()[2] * other.group3()[2])
                    - (self.group5()[0] * other.group9()[0])
                    - (self.group5()[1] * other.group9()[1])
                    - (self.group5()[2] * other.group9()[2])
                    - (other.group1()[0] * self.group6()[0])
                    - (other.group1()[1] * self.group6()[1])
                    - (other.group1()[2] * self.group6()[2])
                    + (other.group1()[3] * self[e1])
                    - (other.group6()[0] * self.group1()[0])
                    - (other.group6()[1] * self.group1()[1])
                    - (other.group6()[2] * self.group1()[2])
                    + (other.group9()[3] * self[e45])
                    - (self.group1()[3] * other[e1])
                    - (self.group9()[3] * other[e45])),
            ]),
            // e423, e431, e412
            Simd32x3::from([
                (-(other.group0()[0] * self.group4()[0]) + (other.group0()[1] * self.group7()[0]) - (self.group0()[0] * other.group4()[0])
                    + (self.group0()[1] * other.group7()[0])
                    - (other.group4()[0] * self.group3()[3])
                    + (other.group4()[1] * self.group5()[2])
                    + (other.group4()[1] * self.group9()[2])
                    - (other.group4()[2] * self.group5()[1])
                    - (other.group4()[2] * self.group9()[1])
                    - (other.group5()[0] * self[e45])
                    + (other.group5()[1] * self.group4()[2])
                    - (other.group5()[2] * self.group4()[1])
                    - (other.group7()[0] * self.group6()[3])
                    + (other.group7()[1] * self.group1()[2])
                    - (other.group7()[1] * self.group6()[2])
                    - (other.group7()[2] * self.group1()[1])
                    + (other.group7()[2] * self.group6()[1])
                    + (self.group4()[0] * other.group3()[3])
                    + (self.group4()[1] * other.group9()[2])
                    - (self.group4()[2] * other.group9()[1])
                    - (self.group5()[0] * other[e45])
                    + (self.group7()[0] * other.group6()[3])
                    + (self.group7()[1] * other.group1()[2])
                    + (self.group7()[1] * other.group6()[2])
                    - (self.group7()[2] * other.group1()[1])
                    - (self.group7()[2] * other.group6()[1])
                    + (other.group1()[0] * self.group1()[3])
                    - (other.group1()[3] * self.group1()[0])
                    + (other.group1()[3] * self.group6()[0])
                    + (other.group6()[0] * self.group1()[3])
                    + (other.group9()[0] * self[e45])
                    - (self.group9()[0] * other[e45])),
                (-(other.group0()[0] * self.group4()[1]) + (other.group0()[1] * self.group7()[1]) - (self.group0()[0] * other.group4()[1])
                    + (self.group0()[1] * other.group7()[1])
                    - (other.group4()[0] * self.group5()[2])
                    - (other.group4()[0] * self.group9()[2])
                    - (other.group4()[1] * self.group3()[3])
                    + (other.group4()[2] * self.group5()[0])
                    + (other.group4()[2] * self.group9()[0])
                    - (other.group5()[0] * self.group4()[2])
                    - (other.group5()[1] * self[e45])
                    + (other.group5()[2] * self.group4()[0])
                    - (other.group7()[0] * self.group1()[2])
                    + (other.group7()[0] * self.group6()[2])
                    - (other.group7()[1] * self.group6()[3])
                    + (other.group7()[2] * self.group1()[0])
                    - (other.group7()[2] * self.group6()[0])
                    - (self.group4()[0] * other.group9()[2])
                    + (self.group4()[1] * other.group3()[3])
                    + (self.group4()[2] * other.group9()[0])
                    - (self.group5()[1] * other[e45])
                    - (self.group7()[0] * other.group1()[2])
                    - (self.group7()[0] * other.group6()[2])
                    + (self.group7()[1] * other.group6()[3])
                    + (self.group7()[2] * other.group1()[0])
                    + (self.group7()[2] * other.group6()[0])
                    + (other.group1()[1] * self.group1()[3])
                    - (other.group1()[3] * self.group1()[1])
                    + (other.group1()[3] * self.group6()[1])
                    + (other.group6()[1] * self.group1()[3])
                    + (other.group9()[1] * self[e45])
                    - (self.group9()[1] * other[e45])),
                (-(other.group0()[0] * self.group4()[2]) + (other.group0()[1] * self.group7()[2]) - (self.group0()[0] * other.group4()[2])
                    + (self.group0()[1] * other.group7()[2])
                    + (other.group4()[0] * self.group5()[1])
                    + (other.group4()[0] * self.group9()[1])
                    - (other.group4()[1] * self.group5()[0])
                    - (other.group4()[1] * self.group9()[0])
                    - (other.group4()[2] * self.group3()[3])
                    + (other.group5()[0] * self.group4()[1])
                    - (other.group5()[1] * self.group4()[0])
                    - (other.group5()[2] * self[e45])
                    + (other.group7()[0] * self.group1()[1])
                    - (other.group7()[0] * self.group6()[1])
                    - (other.group7()[1] * self.group1()[0])
                    + (other.group7()[1] * self.group6()[0])
                    - (other.group7()[2] * self.group6()[3])
                    + (self.group4()[0] * other.group9()[1])
                    - (self.group4()[1] * other.group9()[0])
                    + (self.group4()[2] * other.group3()[3])
                    - (self.group5()[2] * other[e45])
                    + (self.group7()[0] * other.group1()[1])
                    + (self.group7()[0] * other.group6()[1])
                    - (self.group7()[1] * other.group1()[0])
                    - (self.group7()[1] * other.group6()[0])
                    + (self.group7()[2] * other.group6()[3])
                    + (other.group1()[2] * self.group1()[3])
                    - (other.group1()[3] * self.group1()[2])
                    + (other.group1()[3] * self.group6()[2])
                    + (other.group6()[2] * self.group1()[3])
                    + (other.group9()[2] * self[e45])
                    - (self.group9()[2] * other[e45])),
            ]),
            // e235, e315, e125
            Simd32x3::from([
                (-(other.group0()[0] * self.group3()[0]) + (other.group0()[1] * self.group8()[0]) - (self.group0()[0] * other.group3()[0])
                    + (self.group0()[1] * other.group8()[0])
                    - (other.group5()[0] * self.group9()[3])
                    + (other.group5()[1] * self.group3()[2])
                    - (other.group5()[2] * self.group3()[1])
                    + (other.group8()[0] * self.group6()[3])
                    - (other.group8()[1] * self.group1()[2])
                    - (other.group8()[1] * self.group6()[2])
                    + (other.group8()[2] * self.group1()[1])
                    + (other.group8()[2] * self.group6()[1])
                    - (self.group5()[0] * other.group9()[3])
                    - (self.group5()[1] * other.group3()[2])
                    + (self.group5()[2] * other.group3()[1])
                    - (self.group8()[0] * other.group6()[3])
                    - (self.group8()[1] * other.group1()[2])
                    + (self.group8()[1] * other.group6()[2])
                    + (self.group8()[2] * other.group1()[1])
                    - (self.group8()[2] * other.group6()[1])
                    - (other.group1()[0] * self[e1])
                    + (other.group3()[0] * self.group3()[3])
                    - (other.group3()[1] * self.group9()[2])
                    + (other.group3()[2] * self.group9()[1])
                    - (other.group3()[3] * self.group3()[0])
                    + (other.group6()[0] * self[e1])
                    - (other.group9()[0] * self.group9()[3])
                    + (other.group9()[1] * self.group3()[2])
                    - (other.group9()[2] * self.group3()[1])
                    + (other.group9()[3] * self.group9()[0])
                    + (self.group1()[0] * other[e1])
                    + (self.group6()[0] * other[e1])),
                (-(other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group8()[1]) - (self.group0()[0] * other.group3()[1])
                    + (self.group0()[1] * other.group8()[1])
                    - (other.group5()[0] * self.group3()[2])
                    - (other.group5()[1] * self.group9()[3])
                    + (other.group5()[2] * self.group3()[0])
                    + (other.group8()[0] * self.group1()[2])
                    + (other.group8()[0] * self.group6()[2])
                    + (other.group8()[1] * self.group6()[3])
                    - (other.group8()[2] * self.group1()[0])
                    - (other.group8()[2] * self.group6()[0])
                    + (self.group5()[0] * other.group3()[2])
                    - (self.group5()[1] * other.group9()[3])
                    - (self.group5()[2] * other.group3()[0])
                    + (self.group8()[0] * other.group1()[2])
                    - (self.group8()[0] * other.group6()[2])
                    - (self.group8()[1] * other.group6()[3])
                    - (self.group8()[2] * other.group1()[0])
                    + (self.group8()[2] * other.group6()[0])
                    - (other.group1()[1] * self[e1])
                    + (other.group3()[0] * self.group9()[2])
                    + (other.group3()[1] * self.group3()[3])
                    - (other.group3()[2] * self.group9()[0])
                    - (other.group3()[3] * self.group3()[1])
                    + (other.group6()[1] * self[e1])
                    - (other.group9()[0] * self.group3()[2])
                    - (other.group9()[1] * self.group9()[3])
                    + (other.group9()[2] * self.group3()[0])
                    + (other.group9()[3] * self.group9()[1])
                    + (self.group1()[1] * other[e1])
                    + (self.group6()[1] * other[e1])),
                (-(other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group8()[2]) - (self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group8()[2])
                    + (other.group5()[0] * self.group3()[1])
                    - (other.group5()[1] * self.group3()[0])
                    - (other.group5()[2] * self.group9()[3])
                    - (other.group8()[0] * self.group1()[1])
                    - (other.group8()[0] * self.group6()[1])
                    + (other.group8()[1] * self.group1()[0])
                    + (other.group8()[1] * self.group6()[0])
                    + (other.group8()[2] * self.group6()[3])
                    - (self.group5()[0] * other.group3()[1])
                    + (self.group5()[1] * other.group3()[0])
                    - (self.group5()[2] * other.group9()[3])
                    - (self.group8()[0] * other.group1()[1])
                    + (self.group8()[0] * other.group6()[1])
                    + (self.group8()[1] * other.group1()[0])
                    - (self.group8()[1] * other.group6()[0])
                    - (self.group8()[2] * other.group6()[3])
                    - (other.group1()[2] * self[e1])
                    - (other.group3()[0] * self.group9()[1])
                    + (other.group3()[1] * self.group9()[0])
                    + (other.group3()[2] * self.group3()[3])
                    - (other.group3()[3] * self.group3()[2])
                    + (other.group6()[2] * self[e1])
                    + (other.group9()[0] * self.group3()[1])
                    - (other.group9()[1] * self.group3()[0])
                    - (other.group9()[2] * self.group9()[3])
                    + (other.group9()[3] * self.group9()[2])
                    + (self.group1()[2] * other[e1])
                    + (self.group6()[2] * other[e1])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group9()[0]) - (self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group9()[0])
                    - (other.group4()[0] * self[e1])
                    + (other.group4()[1] * self.group8()[2])
                    - (other.group4()[2] * self.group8()[1])
                    - (other.group5()[0] * self.group6()[3])
                    + (other.group5()[1] * self.group1()[2])
                    - (other.group5()[2] * self.group1()[1])
                    - (other.group7()[0] * self.group9()[3])
                    + (other.group7()[1] * self.group3()[2])
                    - (other.group7()[2] * self.group3()[1])
                    + (other.group8()[0] * self[e45])
                    - (other.group8()[1] * self.group4()[2])
                    + (other.group8()[2] * self.group4()[1])
                    + (self.group4()[0] * other[e1])
                    - (self.group5()[0] * other.group6()[3])
                    - (self.group5()[1] * other.group1()[2])
                    + (self.group5()[2] * other.group1()[1])
                    + (self.group7()[0] * other.group9()[3])
                    + (self.group7()[1] * other.group3()[2])
                    - (self.group7()[2] * other.group3()[1])
                    - (self.group8()[0] * other[e45])
                    - (other.group1()[3] * self.group3()[0])
                    + (other.group3()[0] * self.group1()[3])
                    + (other.group3()[3] * self.group6()[0])
                    + (other.group6()[0] * self.group3()[3])
                    - (other.group6()[1] * self.group9()[2])
                    + (other.group6()[2] * self.group9()[1])
                    - (other.group9()[1] * self.group6()[2])
                    + (other.group9()[2] * self.group6()[1])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group9()[1]) - (self.group0()[0] * other.group1()[1])
                    + (self.group0()[1] * other.group9()[1])
                    - (other.group4()[0] * self.group8()[2])
                    - (other.group4()[1] * self[e1])
                    + (other.group4()[2] * self.group8()[0])
                    - (other.group5()[0] * self.group1()[2])
                    - (other.group5()[1] * self.group6()[3])
                    + (other.group5()[2] * self.group1()[0])
                    - (other.group7()[0] * self.group3()[2])
                    - (other.group7()[1] * self.group9()[3])
                    + (other.group7()[2] * self.group3()[0])
                    + (other.group8()[0] * self.group4()[2])
                    + (other.group8()[1] * self[e45])
                    - (other.group8()[2] * self.group4()[0])
                    + (self.group4()[1] * other[e1])
                    + (self.group5()[0] * other.group1()[2])
                    - (self.group5()[1] * other.group6()[3])
                    - (self.group5()[2] * other.group1()[0])
                    - (self.group7()[0] * other.group3()[2])
                    + (self.group7()[1] * other.group9()[3])
                    + (self.group7()[2] * other.group3()[0])
                    - (self.group8()[1] * other[e45])
                    - (other.group1()[3] * self.group3()[1])
                    + (other.group3()[1] * self.group1()[3])
                    + (other.group3()[3] * self.group6()[1])
                    + (other.group6()[0] * self.group9()[2])
                    + (other.group6()[1] * self.group3()[3])
                    - (other.group6()[2] * self.group9()[0])
                    + (other.group9()[0] * self.group6()[2])
                    - (other.group9()[2] * self.group6()[0])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group9()[2]) - (self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group9()[2])
                    + (other.group4()[0] * self.group8()[1])
                    - (other.group4()[1] * self.group8()[0])
                    - (other.group4()[2] * self[e1])
                    + (other.group5()[0] * self.group1()[1])
                    - (other.group5()[1] * self.group1()[0])
                    - (other.group5()[2] * self.group6()[3])
                    + (other.group7()[0] * self.group3()[1])
                    - (other.group7()[1] * self.group3()[0])
                    - (other.group7()[2] * self.group9()[3])
                    - (other.group8()[0] * self.group4()[1])
                    + (other.group8()[1] * self.group4()[0])
                    + (other.group8()[2] * self[e45])
                    + (self.group4()[2] * other[e1])
                    - (self.group5()[0] * other.group1()[1])
                    + (self.group5()[1] * other.group1()[0])
                    - (self.group5()[2] * other.group6()[3])
                    + (self.group7()[0] * other.group3()[1])
                    - (self.group7()[1] * other.group3()[0])
                    + (self.group7()[2] * other.group9()[3])
                    - (self.group8()[2] * other[e45])
                    - (other.group1()[3] * self.group3()[2])
                    + (other.group3()[2] * self.group1()[3])
                    + (other.group3()[3] * self.group6()[2])
                    - (other.group6()[0] * self.group9()[1])
                    + (other.group6()[1] * self.group9()[0])
                    + (other.group6()[2] * self.group3()[3])
                    - (other.group9()[0] * self.group6()[1])
                    + (other.group9()[1] * self.group6()[0])),
                ((other.group0()[0] * self[e1]) + (other.group0()[1] * self.group9()[3]) + (self.group0()[0] * other[e1]) + (self.group0()[1] * other.group9()[3])
                    - (other.group5()[0] * self.group8()[0])
                    - (other.group5()[1] * self.group8()[1])
                    - (other.group5()[2] * self.group8()[2])
                    - (other.group8()[0] * self.group5()[0])
                    + (other.group8()[0] * self.group9()[0])
                    - (other.group8()[1] * self.group5()[1])
                    + (other.group8()[1] * self.group9()[1])
                    - (other.group8()[2] * self.group5()[2])
                    + (other.group8()[2] * self.group9()[2])
                    - (self.group8()[0] * other.group9()[0])
                    - (self.group8()[1] * other.group9()[1])
                    - (self.group8()[2] * other.group9()[2])
                    + (other.group1()[0] * self.group3()[0])
                    + (other.group1()[1] * self.group3()[1])
                    + (other.group1()[2] * self.group3()[2])
                    - (other.group3()[0] * self.group1()[0])
                    - (other.group3()[0] * self.group6()[0])
                    - (other.group3()[1] * self.group1()[1])
                    - (other.group3()[1] * self.group6()[1])
                    - (other.group3()[2] * self.group1()[2])
                    - (other.group3()[2] * self.group6()[2])
                    + (other.group3()[3] * self[e1])
                    - (other.group6()[0] * self.group3()[0])
                    - (other.group6()[1] * self.group3()[1])
                    - (other.group6()[2] * self.group3()[2])
                    - (other.group6()[3] * self.group9()[3])
                    + (other.group9()[3] * self.group6()[3])
                    - (self.group3()[3] * other[e1])),
            ]),
            // e1234
            ((other.group0()[0] * self.group1()[3])
                + (other.group0()[1] * self[e45])
                + (self.group0()[0] * other.group1()[3])
                + (self.group0()[1] * other[e45])
                + (other.group4()[0] * self.group1()[0])
                - (other.group4()[0] * self.group6()[0])
                + (other.group4()[1] * self.group1()[1])
                - (other.group4()[1] * self.group6()[1])
                + (other.group4()[2] * self.group1()[2])
                - (other.group4()[2] * self.group6()[2])
                - (other.group5()[0] * self.group7()[0])
                - (other.group5()[1] * self.group7()[1])
                - (other.group5()[2] * self.group7()[2])
                - (other.group7()[0] * self.group5()[0])
                - (other.group7()[0] * self.group9()[0])
                - (other.group7()[1] * self.group5()[1])
                - (other.group7()[1] * self.group9()[1])
                - (other.group7()[2] * self.group5()[2])
                - (other.group7()[2] * self.group9()[2])
                - (self.group4()[0] * other.group1()[0])
                - (self.group4()[0] * other.group6()[0])
                - (self.group4()[1] * other.group1()[1])
                - (self.group4()[1] * other.group6()[1])
                - (self.group4()[2] * other.group1()[2])
                - (self.group4()[2] * other.group6()[2])
                + (self.group7()[0] * other.group9()[0])
                + (self.group7()[1] * other.group9()[1])
                + (self.group7()[2] * other.group9()[2])
                + (other.group1()[3] * self.group3()[3])
                - (other.group3()[3] * self.group1()[3])
                + (other.group6()[3] * self[e45])
                - (self.group6()[3] * other[e45])),
        );
    }
}
impl GeometricAntiProduct<Plane> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       96      128        0
    fn geometric_anti_product(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1]) + (self.group1()[2] * other.group0()[2]) + (self.group1()[3] * other.group0()[3])),
                ((self.group9()[0] * other.group0()[0]) + (self.group9()[1] * other.group0()[1]) + (self.group9()[2] * other.group0()[2]) - (other.group0()[3] * self[e45])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group4()[0] * other.group0()[3]) + (self.group5()[1] * other.group0()[2]) - (self.group5()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[1]) + (self.group4()[1] * other.group0()[3]) - (self.group5()[0] * other.group0()[2]) + (self.group5()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[2]) + (self.group4()[2] * other.group0()[3]) + (self.group5()[0] * other.group0()[1]) - (self.group5()[1] * other.group0()[0])),
                (-(self.group4()[0] * other.group0()[0]) - (self.group4()[1] * other.group0()[1]) - (self.group4()[2] * other.group0()[2])),
            ]),
            // e5
            (-(self.group0()[0] * other.group0()[3])
                + (self.group3()[0] * other.group0()[0])
                + (self.group3()[1] * other.group0()[1])
                + (self.group3()[2] * other.group0()[2])
                + (self.group3()[3] * other.group0()[3])),
            // e15, e25, e35, e45
            Simd32x4::from([
                ((self.group8()[1] * other.group0()[2]) - (self.group8()[2] * other.group0()[1])
                    + (self.group1()[0] * other.group0()[3])
                    + (self.group6()[0] * other.group0()[3])
                    + (other.group0()[0] * self[e1])),
                (-(self.group8()[0] * other.group0()[2])
                    + (self.group8()[2] * other.group0()[0])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group6()[1] * other.group0()[3])
                    + (other.group0()[1] * self[e1])),
                ((self.group8()[0] * other.group0()[1]) - (self.group8()[1] * other.group0()[0])
                    + (self.group1()[2] * other.group0()[3])
                    + (self.group6()[2] * other.group0()[3])
                    + (other.group0()[2] * self[e1])),
                ((self.group1()[3] * other.group0()[3]) - (self.group6()[0] * other.group0()[0]) - (self.group6()[1] * other.group0()[1]) - (self.group6()[2] * other.group0()[2])),
            ]),
            // e41, e42, e43
            Simd32x3::from([
                (-(self.group7()[1] * other.group0()[2]) + (self.group7()[2] * other.group0()[1]) - (self.group1()[3] * other.group0()[0])),
                ((self.group7()[0] * other.group0()[2]) - (self.group7()[2] * other.group0()[0]) - (self.group1()[3] * other.group0()[1])),
                (-(self.group7()[0] * other.group0()[1]) + (self.group7()[1] * other.group0()[0]) - (self.group1()[3] * other.group0()[2])),
            ]),
            // e23, e31, e12
            Simd32x3::from([
                ((self.group7()[0] * other.group0()[3]) - (self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1]) - (self.group6()[3] * other.group0()[0])),
                ((self.group7()[1] * other.group0()[3]) + (self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0]) - (self.group6()[3] * other.group0()[1])),
                ((self.group7()[2] * other.group0()[3]) - (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0]) - (self.group6()[3] * other.group0()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group4()[0] * other.group0()[3]) - (self.group3()[3] * other.group0()[0]) - (self.group9()[1] * other.group0()[2])
                    + (self.group9()[2] * other.group0()[1])),
                (-(self.group4()[1] * other.group0()[3]) - (self.group3()[3] * other.group0()[1]) + (self.group9()[0] * other.group0()[2])
                    - (self.group9()[2] * other.group0()[0])),
                (-(self.group4()[2] * other.group0()[3]) - (self.group3()[3] * other.group0()[2]) - (self.group9()[0] * other.group0()[1])
                    + (self.group9()[1] * other.group0()[0])),
                (-(self.group5()[0] * other.group0()[0]) - (self.group5()[1] * other.group0()[1]) - (self.group5()[2] * other.group0()[2]) + (other.group0()[3] * self[e45])),
            ]),
            // e423, e431, e412
            Simd32x3::from([
                ((self.group4()[1] * other.group0()[2]) - (self.group4()[2] * other.group0()[1]) + (other.group0()[0] * self[e45])),
                (-(self.group4()[0] * other.group0()[2]) + (self.group4()[2] * other.group0()[0]) + (other.group0()[1] * self[e45])),
                ((self.group4()[0] * other.group0()[1]) - (self.group4()[1] * other.group0()[0]) + (other.group0()[2] * self[e45])),
            ]),
            // e235, e315, e125
            Simd32x3::from([
                (-(self.group5()[0] * other.group0()[3]) - (self.group3()[1] * other.group0()[2])
                    + (self.group3()[2] * other.group0()[1])
                    + (self.group9()[0] * other.group0()[3])
                    - (self.group9()[3] * other.group0()[0])),
                (-(self.group5()[1] * other.group0()[3]) + (self.group3()[0] * other.group0()[2]) - (self.group3()[2] * other.group0()[0])
                    + (self.group9()[1] * other.group0()[3])
                    - (self.group9()[3] * other.group0()[1])),
                (-(self.group5()[2] * other.group0()[3]) - (self.group3()[0] * other.group0()[1])
                    + (self.group3()[1] * other.group0()[0])
                    + (self.group9()[2] * other.group0()[3])
                    - (self.group9()[3] * other.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[0]) + (self.group7()[0] * other.group0()[3]) + (self.group6()[1] * other.group0()[2]) - (self.group6()[2] * other.group0()[1])),
                ((self.group0()[1] * other.group0()[1]) + (self.group7()[1] * other.group0()[3]) - (self.group6()[0] * other.group0()[2]) + (self.group6()[2] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[2]) + (self.group7()[2] * other.group0()[3]) + (self.group6()[0] * other.group0()[1]) - (self.group6()[1] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) - (self.group8()[0] * other.group0()[0]) - (self.group8()[1] * other.group0()[1]) - (self.group8()[2] * other.group0()[2])
                    + (self.group6()[3] * other.group0()[3])),
            ]),
            // e1234
            ((self.group7()[0] * other.group0()[0]) + (self.group7()[1] * other.group0()[1]) + (self.group7()[2] * other.group0()[2])),
        );
    }
}
impl GeometricAntiProduct<RoundPoint> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      128      160        0
    fn geometric_anti_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((self.group9()[0] * other.group0()[0])
                    + (self.group9()[1] * other.group0()[1])
                    + (self.group9()[2] * other.group0()[2])
                    + (self.group9()[3] * other.group0()[3])
                    + (self[e45] * other[e2])),
                (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[2] * other.group0()[2])
                    + (self.group1()[3] * other[e2])
                    + (other.group0()[3] * self[e1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[0]) - (self.group7()[0] * other[e2]) + (self.group8()[0] * other.group0()[3]) + (self.group6()[1] * other.group0()[2])
                    - (self.group6()[2] * other.group0()[1])),
                ((self.group0()[1] * other.group0()[1]) - (self.group7()[1] * other[e2]) + (self.group8()[1] * other.group0()[3]) - (self.group6()[0] * other.group0()[2])
                    + (self.group6()[2] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[2]) - (self.group7()[2] * other[e2]) + (self.group8()[2] * other.group0()[3]) + (self.group6()[0] * other.group0()[1])
                    - (self.group6()[1] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3])
                    - (self.group7()[0] * other.group0()[0])
                    - (self.group7()[1] * other.group0()[1])
                    - (self.group7()[2] * other.group0()[2])
                    - (self.group6()[3] * other.group0()[3])),
            ]),
            // e5
            ((self.group0()[1] * other[e2])
                + (self.group8()[0] * other.group0()[0])
                + (self.group8()[1] * other.group0()[1])
                + (self.group8()[2] * other.group0()[2])
                + (self.group6()[3] * other[e2])),
            // e15, e25, e35, e45
            Simd32x4::from([
                ((self.group5()[0] * other[e2]) - (self.group3()[1] * other.group0()[2]) + (self.group3()[2] * other.group0()[1])
                    - (self.group9()[0] * other[e2])
                    - (self.group9()[3] * other.group0()[0])),
                ((self.group5()[1] * other[e2]) + (self.group3()[0] * other.group0()[2])
                    - (self.group3()[2] * other.group0()[0])
                    - (self.group9()[1] * other[e2])
                    - (self.group9()[3] * other.group0()[1])),
                ((self.group5()[2] * other[e2]) - (self.group3()[0] * other.group0()[1]) + (self.group3()[1] * other.group0()[0])
                    - (self.group9()[2] * other[e2])
                    - (self.group9()[3] * other.group0()[2])),
                ((self.group5()[0] * other.group0()[0]) + (self.group5()[1] * other.group0()[1]) + (self.group5()[2] * other.group0()[2]) - (self.group9()[3] * other.group0()[3])
                    + (self[e45] * other[e2])),
            ]),
            // e41, e42, e43
            Simd32x3::from([
                ((self.group4()[1] * other.group0()[2]) - (self.group4()[2] * other.group0()[1])
                    + (self.group5()[0] * other.group0()[3])
                    + (self.group9()[0] * other.group0()[3])
                    + (other.group0()[0] * self[e45])),
                (-(self.group4()[0] * other.group0()[2])
                    + (self.group4()[2] * other.group0()[0])
                    + (self.group5()[1] * other.group0()[3])
                    + (self.group9()[1] * other.group0()[3])
                    + (other.group0()[1] * self[e45])),
                ((self.group4()[0] * other.group0()[1]) - (self.group4()[1] * other.group0()[0])
                    + (self.group5()[2] * other.group0()[3])
                    + (self.group9()[2] * other.group0()[3])
                    + (other.group0()[2] * self[e45])),
            ]),
            // e23, e31, e12
            Simd32x3::from([
                ((self.group4()[0] * other[e2]) + (self.group3()[0] * other.group0()[3]) - (self.group3()[3] * other.group0()[0]) - (self.group9()[1] * other.group0()[2])
                    + (self.group9()[2] * other.group0()[1])),
                ((self.group4()[1] * other[e2]) + (self.group3()[1] * other.group0()[3]) - (self.group3()[3] * other.group0()[1]) + (self.group9()[0] * other.group0()[2])
                    - (self.group9()[2] * other.group0()[0])),
                ((self.group4()[2] * other[e2]) + (self.group3()[2] * other.group0()[3]) - (self.group3()[3] * other.group0()[2]) - (self.group9()[0] * other.group0()[1])
                    + (self.group9()[1] * other.group0()[0])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group7()[0] * other[e2]) + (self.group8()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])
                    + (self.group6()[3] * other.group0()[0])),
                ((self.group7()[1] * other[e2]) + (self.group8()[1] * other.group0()[3]) - (self.group1()[0] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[0])
                    + (self.group6()[3] * other.group0()[1])),
                ((self.group7()[2] * other[e2]) + (self.group8()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])
                    + (self.group6()[3] * other.group0()[2])),
                (-(self.group1()[3] * other[e2]) - (self.group6()[0] * other.group0()[0]) - (self.group6()[1] * other.group0()[1]) - (self.group6()[2] * other.group0()[2])
                    + (other.group0()[3] * self[e1])),
            ]),
            // e423, e431, e412
            Simd32x3::from([
                ((self.group7()[1] * other.group0()[2]) - (self.group7()[2] * other.group0()[1]) - (self.group1()[0] * other.group0()[3])
                    + (self.group1()[3] * other.group0()[0])
                    + (self.group6()[0] * other.group0()[3])),
                (-(self.group7()[0] * other.group0()[2]) + (self.group7()[2] * other.group0()[0]) - (self.group1()[1] * other.group0()[3])
                    + (self.group1()[3] * other.group0()[1])
                    + (self.group6()[1] * other.group0()[3])),
                ((self.group7()[0] * other.group0()[1]) - (self.group7()[1] * other.group0()[0]) - (self.group1()[2] * other.group0()[3])
                    + (self.group1()[3] * other.group0()[2])
                    + (self.group6()[2] * other.group0()[3])),
            ]),
            // e235, e315, e125
            Simd32x3::from([
                (-(self.group8()[1] * other.group0()[2]) + (self.group8()[2] * other.group0()[1]) + (self.group1()[0] * other[e2]) + (self.group6()[0] * other[e2])
                    - (other.group0()[0] * self[e1])),
                ((self.group8()[0] * other.group0()[2]) - (self.group8()[2] * other.group0()[0]) + (self.group1()[1] * other[e2]) + (self.group6()[1] * other[e2])
                    - (other.group0()[1] * self[e1])),
                (-(self.group8()[0] * other.group0()[1]) + (self.group8()[1] * other.group0()[0]) + (self.group1()[2] * other[e2]) + (self.group6()[2] * other[e2])
                    - (other.group0()[2] * self[e1])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[0]) + (self.group4()[0] * other[e2]) - (self.group5()[1] * other.group0()[2]) + (self.group5()[2] * other.group0()[1])
                    - (self.group3()[0] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group4()[1] * other[e2]) + (self.group5()[0] * other.group0()[2])
                    - (self.group5()[2] * other.group0()[0])
                    - (self.group3()[1] * other.group0()[3])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group4()[2] * other[e2]) - (self.group5()[0] * other.group0()[1]) + (self.group5()[1] * other.group0()[0])
                    - (self.group3()[2] * other.group0()[3])),
                ((self.group0()[0] * other[e2]) + (self.group3()[0] * other.group0()[0]) + (self.group3()[1] * other.group0()[1]) + (self.group3()[2] * other.group0()[2])
                    - (self.group3()[3] * other[e2])),
            ]),
            // e1234
            ((self.group0()[0] * other.group0()[3]) - (self.group4()[0] * other.group0()[0]) - (self.group4()[1] * other.group0()[1]) - (self.group4()[2] * other.group0()[2])
                + (self.group3()[3] * other.group0()[3])),
        );
    }
}
impl GeometricAntiProduct<Scalar> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0       48        0
    fn geometric_anti_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([(self.group0()[1] * other[scalar]), (self.group0()[0] * other[scalar] * -1.0)]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group9()[0] * other[scalar]),
                (self.group9()[1] * other[scalar]),
                (self.group9()[2] * other[scalar]),
                (self[e45] * other[scalar] * -1.0),
            ]),
            // e5
            (self.group9()[3] * other[scalar] * -1.0),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group8()[0] * other[scalar]),
                (self.group8()[1] * other[scalar]),
                (self.group8()[2] * other[scalar]),
                (self.group6()[3] * other[scalar] * -1.0),
            ]),
            // e41, e42, e43
            Simd32x3::from([(self.group7()[0] * other[scalar]), (self.group7()[1] * other[scalar]), (self.group7()[2] * other[scalar])]),
            // e23, e31, e12
            Simd32x3::from([(self.group6()[0] * other[scalar]), (self.group6()[1] * other[scalar]), (self.group6()[2] * other[scalar])]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group5()[0] * other[scalar] * -1.0),
                (self.group5()[1] * other[scalar] * -1.0),
                (self.group5()[2] * other[scalar] * -1.0),
                (self.group3()[3] * other[scalar]),
            ]),
            // e423, e431, e412
            Simd32x3::from([
                (self.group4()[0] * other[scalar] * -1.0),
                (self.group4()[1] * other[scalar] * -1.0),
                (self.group4()[2] * other[scalar] * -1.0),
            ]),
            // e235, e315, e125
            Simd32x3::from([
                (self.group3()[0] * other[scalar] * -1.0),
                (self.group3()[1] * other[scalar] * -1.0),
                (self.group3()[2] * other[scalar] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group1()[0] * other[scalar] * -1.0),
                (self.group1()[1] * other[scalar] * -1.0),
                (self.group1()[2] * other[scalar] * -1.0),
                (self[e1] * other[scalar]),
            ]),
            // e1234
            (self.group1()[3] * other[scalar]),
        );
    }
}
impl GeometricAntiProduct<Sphere> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      128      160        0
    fn geometric_anti_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((self.group1()[0] * other.group0()[0])
                    + (self.group1()[1] * other.group0()[1])
                    + (self.group1()[2] * other.group0()[2])
                    + (self.group1()[3] * other.group0()[3])
                    + (self[e1] * other[e4315])),
                ((self.group9()[0] * other.group0()[0]) + (self.group9()[1] * other.group0()[1]) + (self.group9()[2] * other.group0()[2])
                    - (self.group9()[3] * other[e4315])
                    - (other.group0()[3] * self[e45])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group4()[0] * other.group0()[3]) + (self.group5()[1] * other.group0()[2])
                    - (self.group5()[2] * other.group0()[1])
                    - (self.group3()[0] * other[e4315])),
                ((self.group0()[0] * other.group0()[1]) + (self.group4()[1] * other.group0()[3]) - (self.group5()[0] * other.group0()[2]) + (self.group5()[2] * other.group0()[0])
                    - (self.group3()[1] * other[e4315])),
                ((self.group0()[0] * other.group0()[2]) + (self.group4()[2] * other.group0()[3]) + (self.group5()[0] * other.group0()[1])
                    - (self.group5()[1] * other.group0()[0])
                    - (self.group3()[2] * other[e4315])),
                (-(self.group0()[0] * other[e4315])
                    - (self.group4()[0] * other.group0()[0])
                    - (self.group4()[1] * other.group0()[1])
                    - (self.group4()[2] * other.group0()[2])
                    - (self.group3()[3] * other[e4315])),
            ]),
            // e5
            (-(self.group0()[0] * other.group0()[3])
                + (self.group3()[0] * other.group0()[0])
                + (self.group3()[1] * other.group0()[1])
                + (self.group3()[2] * other.group0()[2])
                + (self.group3()[3] * other.group0()[3])),
            // e15, e25, e35, e45
            Simd32x4::from([
                ((self.group8()[1] * other.group0()[2]) - (self.group8()[2] * other.group0()[1])
                    + (self.group1()[0] * other.group0()[3])
                    + (self.group6()[0] * other.group0()[3])
                    + (other.group0()[0] * self[e1])),
                (-(self.group8()[0] * other.group0()[2])
                    + (self.group8()[2] * other.group0()[0])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group6()[1] * other.group0()[3])
                    + (other.group0()[1] * self[e1])),
                ((self.group8()[0] * other.group0()[1]) - (self.group8()[1] * other.group0()[0])
                    + (self.group1()[2] * other.group0()[3])
                    + (self.group6()[2] * other.group0()[3])
                    + (other.group0()[2] * self[e1])),
                ((self.group1()[3] * other.group0()[3])
                    - (self.group6()[0] * other.group0()[0])
                    - (self.group6()[1] * other.group0()[1])
                    - (self.group6()[2] * other.group0()[2])
                    - (self[e1] * other[e4315])),
            ]),
            // e41, e42, e43
            Simd32x3::from([
                (-(self.group7()[1] * other.group0()[2]) + (self.group7()[2] * other.group0()[1]) - (self.group1()[0] * other[e4315]) - (self.group1()[3] * other.group0()[0])
                    + (self.group6()[0] * other[e4315])),
                ((self.group7()[0] * other.group0()[2]) - (self.group7()[2] * other.group0()[0]) - (self.group1()[1] * other[e4315]) - (self.group1()[3] * other.group0()[1])
                    + (self.group6()[1] * other[e4315])),
                (-(self.group7()[0] * other.group0()[1]) + (self.group7()[1] * other.group0()[0]) - (self.group1()[2] * other[e4315]) - (self.group1()[3] * other.group0()[2])
                    + (self.group6()[2] * other[e4315])),
            ]),
            // e23, e31, e12
            Simd32x3::from([
                ((self.group7()[0] * other.group0()[3]) + (self.group8()[0] * other[e4315]) - (self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])
                    - (self.group6()[3] * other.group0()[0])),
                ((self.group7()[1] * other.group0()[3]) + (self.group8()[1] * other[e4315]) + (self.group1()[0] * other.group0()[2])
                    - (self.group1()[2] * other.group0()[0])
                    - (self.group6()[3] * other.group0()[1])),
                ((self.group7()[2] * other.group0()[3]) + (self.group8()[2] * other[e4315]) - (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])
                    - (self.group6()[3] * other.group0()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group4()[0] * other.group0()[3]) - (self.group3()[0] * other[e4315]) - (self.group3()[3] * other.group0()[0]) - (self.group9()[1] * other.group0()[2])
                    + (self.group9()[2] * other.group0()[1])),
                (-(self.group4()[1] * other.group0()[3]) - (self.group3()[1] * other[e4315]) - (self.group3()[3] * other.group0()[1]) + (self.group9()[0] * other.group0()[2])
                    - (self.group9()[2] * other.group0()[0])),
                (-(self.group4()[2] * other.group0()[3]) - (self.group3()[2] * other[e4315]) - (self.group3()[3] * other.group0()[2]) - (self.group9()[0] * other.group0()[1])
                    + (self.group9()[1] * other.group0()[0])),
                (-(self.group5()[0] * other.group0()[0]) - (self.group5()[1] * other.group0()[1]) - (self.group5()[2] * other.group0()[2]) - (self.group9()[3] * other[e4315])
                    + (other.group0()[3] * self[e45])),
            ]),
            // e423, e431, e412
            Simd32x3::from([
                ((self.group4()[1] * other.group0()[2]) - (self.group4()[2] * other.group0()[1]) - (self.group5()[0] * other[e4315]) - (self.group9()[0] * other[e4315])
                    + (other.group0()[0] * self[e45])),
                (-(self.group4()[0] * other.group0()[2]) + (self.group4()[2] * other.group0()[0]) - (self.group5()[1] * other[e4315]) - (self.group9()[1] * other[e4315])
                    + (other.group0()[1] * self[e45])),
                ((self.group4()[0] * other.group0()[1]) - (self.group4()[1] * other.group0()[0]) - (self.group5()[2] * other[e4315]) - (self.group9()[2] * other[e4315])
                    + (other.group0()[2] * self[e45])),
            ]),
            // e235, e315, e125
            Simd32x3::from([
                (-(self.group5()[0] * other.group0()[3]) - (self.group3()[1] * other.group0()[2])
                    + (self.group3()[2] * other.group0()[1])
                    + (self.group9()[0] * other.group0()[3])
                    - (self.group9()[3] * other.group0()[0])),
                (-(self.group5()[1] * other.group0()[3]) + (self.group3()[0] * other.group0()[2]) - (self.group3()[2] * other.group0()[0])
                    + (self.group9()[1] * other.group0()[3])
                    - (self.group9()[3] * other.group0()[1])),
                (-(self.group5()[2] * other.group0()[3]) - (self.group3()[0] * other.group0()[1])
                    + (self.group3()[1] * other.group0()[0])
                    + (self.group9()[2] * other.group0()[3])
                    - (self.group9()[3] * other.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[0]) + (self.group7()[0] * other.group0()[3]) - (self.group8()[0] * other[e4315]) + (self.group6()[1] * other.group0()[2])
                    - (self.group6()[2] * other.group0()[1])),
                ((self.group0()[1] * other.group0()[1]) + (self.group7()[1] * other.group0()[3]) - (self.group8()[1] * other[e4315]) - (self.group6()[0] * other.group0()[2])
                    + (self.group6()[2] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[2]) + (self.group7()[2] * other.group0()[3]) - (self.group8()[2] * other[e4315]) + (self.group6()[0] * other.group0()[1])
                    - (self.group6()[1] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) - (self.group8()[0] * other.group0()[0]) - (self.group8()[1] * other.group0()[1]) - (self.group8()[2] * other.group0()[2])
                    + (self.group6()[3] * other.group0()[3])),
            ]),
            // e1234
            ((self.group0()[1] * other[e4315]) + (self.group7()[0] * other.group0()[0]) + (self.group7()[1] * other.group0()[1]) + (self.group7()[2] * other.group0()[2])
                - (self.group6()[3] * other[e4315])),
        );
    }
}
impl GeometricAntiProduct<VersorEven> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      480      512        0
    fn geometric_anti_product(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((self.group0()[0] * other.group0()[3])
                    - (self.group4()[0] * other.group2()[0])
                    - (self.group4()[1] * other.group2()[1])
                    - (self.group4()[2] * other.group2()[2])
                    - (self.group5()[0] * other.group1()[0])
                    - (self.group5()[1] * other.group1()[1])
                    - (self.group5()[2] * other.group1()[2])
                    - (self.group3()[0] * other.group0()[0])
                    - (self.group3()[1] * other.group0()[1])
                    - (self.group3()[2] * other.group0()[2])
                    - (self.group3()[3] * other.group1()[3])
                    + (self.group9()[0] * other.group3()[0])
                    + (self.group9()[1] * other.group3()[1])
                    + (self.group9()[2] * other.group3()[2])
                    + (self.group9()[3] * other.group3()[3])
                    + (other.group2()[3] * self[e45])),
                ((self.group0()[1] * other.group0()[3])
                    - (self.group7()[0] * other.group2()[0])
                    - (self.group7()[1] * other.group2()[1])
                    - (self.group7()[2] * other.group2()[2])
                    - (self.group8()[0] * other.group0()[0])
                    - (self.group8()[1] * other.group0()[1])
                    - (self.group8()[2] * other.group0()[2])
                    - (self.group1()[0] * other.group3()[0])
                    - (self.group1()[1] * other.group3()[1])
                    - (self.group1()[2] * other.group3()[2])
                    + (self.group1()[3] * other.group2()[3])
                    - (self.group6()[0] * other.group1()[0])
                    - (self.group6()[1] * other.group1()[1])
                    - (self.group6()[2] * other.group1()[2])
                    + (self.group6()[3] * other.group1()[3])
                    + (other.group3()[3] * self[e1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[1] * other.group3()[0]) - (self.group7()[0] * other.group2()[3]) - (self.group7()[1] * other.group2()[2])
                    + (self.group7()[2] * other.group2()[1])
                    + (self.group8()[0] * other.group3()[3])
                    + (self.group8()[1] * other.group0()[2])
                    - (self.group8()[2] * other.group0()[1])
                    + (self.group1()[0] * other.group0()[3])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])
                    - (self.group1()[3] * other.group2()[0])
                    + (self.group6()[0] * other.group1()[3])
                    + (self.group6()[1] * other.group3()[2])
                    - (self.group6()[2] * other.group3()[1])
                    + (self.group6()[3] * other.group1()[0])
                    + (other.group0()[0] * self[e1])),
                ((self.group0()[1] * other.group3()[1]) + (self.group7()[0] * other.group2()[2])
                    - (self.group7()[1] * other.group2()[3])
                    - (self.group7()[2] * other.group2()[0])
                    - (self.group8()[0] * other.group0()[2])
                    + (self.group8()[1] * other.group3()[3])
                    + (self.group8()[2] * other.group0()[0])
                    - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group1()[2] * other.group1()[0])
                    - (self.group1()[3] * other.group2()[1])
                    - (self.group6()[0] * other.group3()[2])
                    + (self.group6()[1] * other.group1()[3])
                    + (self.group6()[2] * other.group3()[0])
                    + (self.group6()[3] * other.group1()[1])
                    + (other.group0()[1] * self[e1])),
                ((self.group0()[1] * other.group3()[2]) - (self.group7()[0] * other.group2()[1]) + (self.group7()[1] * other.group2()[0]) - (self.group7()[2] * other.group2()[3])
                    + (self.group8()[0] * other.group0()[1])
                    - (self.group8()[1] * other.group0()[0])
                    + (self.group8()[2] * other.group3()[3])
                    + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[0])
                    + (self.group1()[2] * other.group0()[3])
                    - (self.group1()[3] * other.group2()[2])
                    + (self.group6()[0] * other.group3()[1])
                    - (self.group6()[1] * other.group3()[0])
                    + (self.group6()[2] * other.group1()[3])
                    + (self.group6()[3] * other.group1()[2])
                    + (other.group0()[2] * self[e1])),
                ((self.group0()[1] * other.group3()[3])
                    - (self.group7()[0] * other.group1()[0])
                    - (self.group7()[0] * other.group3()[0])
                    - (self.group7()[1] * other.group1()[1])
                    - (self.group7()[1] * other.group3()[1])
                    - (self.group7()[2] * other.group1()[2])
                    - (self.group7()[2] * other.group3()[2])
                    + (self.group1()[0] * other.group0()[0])
                    + (self.group1()[1] * other.group0()[1])
                    + (self.group1()[2] * other.group0()[2])
                    + (self.group1()[3] * other.group0()[3])
                    + (self.group1()[3] * other.group1()[3])
                    - (self.group6()[0] * other.group0()[0])
                    - (self.group6()[1] * other.group0()[1])
                    - (self.group6()[2] * other.group0()[2])
                    - (self.group6()[3] * other.group3()[3])),
            ]),
            // e5
            ((self.group0()[1] * other.group2()[3]) - (self.group8()[0] * other.group1()[0]) + (self.group8()[0] * other.group3()[0]) - (self.group8()[1] * other.group1()[1])
                + (self.group8()[1] * other.group3()[1])
                - (self.group8()[2] * other.group1()[2])
                + (self.group8()[2] * other.group3()[2])
                - (self.group1()[0] * other.group2()[0])
                - (self.group1()[1] * other.group2()[1])
                - (self.group1()[2] * other.group2()[2])
                - (self.group6()[0] * other.group2()[0])
                - (self.group6()[1] * other.group2()[1])
                - (self.group6()[2] * other.group2()[2])
                + (self.group6()[3] * other.group2()[3])
                + (other.group0()[3] * self[e1])
                - (other.group1()[3] * self[e1])),
            // e15, e25, e35, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[0]) + (self.group5()[0] * other.group2()[3]) + (self.group5()[1] * other.group2()[2]) - (self.group5()[2] * other.group2()[1])
                    + (self.group3()[0] * other.group0()[3])
                    - (self.group3()[0] * other.group1()[3])
                    + (self.group3()[1] * other.group1()[2])
                    - (self.group3()[1] * other.group3()[2])
                    - (self.group3()[2] * other.group1()[1])
                    + (self.group3()[2] * other.group3()[1])
                    - (self.group3()[3] * other.group2()[0])
                    - (self.group9()[0] * other.group2()[3])
                    - (self.group9()[1] * other.group2()[2])
                    + (self.group9()[2] * other.group2()[1])
                    + (self.group9()[3] * other.group1()[0])
                    - (self.group9()[3] * other.group3()[0])),
                ((self.group0()[0] * other.group2()[1]) - (self.group5()[0] * other.group2()[2]) + (self.group5()[1] * other.group2()[3]) + (self.group5()[2] * other.group2()[0])
                    - (self.group3()[0] * other.group1()[2])
                    + (self.group3()[0] * other.group3()[2])
                    + (self.group3()[1] * other.group0()[3])
                    - (self.group3()[1] * other.group1()[3])
                    + (self.group3()[2] * other.group1()[0])
                    - (self.group3()[2] * other.group3()[0])
                    - (self.group3()[3] * other.group2()[1])
                    + (self.group9()[0] * other.group2()[2])
                    - (self.group9()[1] * other.group2()[3])
                    - (self.group9()[2] * other.group2()[0])
                    + (self.group9()[3] * other.group1()[1])
                    - (self.group9()[3] * other.group3()[1])),
                ((self.group0()[0] * other.group2()[2]) + (self.group5()[0] * other.group2()[1]) - (self.group5()[1] * other.group2()[0])
                    + (self.group5()[2] * other.group2()[3])
                    + (self.group3()[0] * other.group1()[1])
                    - (self.group3()[0] * other.group3()[1])
                    - (self.group3()[1] * other.group1()[0])
                    + (self.group3()[1] * other.group3()[0])
                    + (self.group3()[2] * other.group0()[3])
                    - (self.group3()[2] * other.group1()[3])
                    - (self.group3()[3] * other.group2()[2])
                    - (self.group9()[0] * other.group2()[1])
                    + (self.group9()[1] * other.group2()[0])
                    - (self.group9()[2] * other.group2()[3])
                    + (self.group9()[3] * other.group1()[2])
                    - (self.group9()[3] * other.group3()[2])),
                (-(self.group0()[0] * other.group1()[3])
                    - (self.group4()[0] * other.group2()[0])
                    - (self.group4()[1] * other.group2()[1])
                    - (self.group4()[2] * other.group2()[2])
                    + (self.group5()[0] * other.group3()[0])
                    + (self.group5()[1] * other.group3()[1])
                    + (self.group5()[2] * other.group3()[2])
                    + (self.group3()[0] * other.group0()[0])
                    + (self.group3()[1] * other.group0()[1])
                    + (self.group3()[2] * other.group0()[2])
                    + (self.group3()[3] * other.group0()[3])
                    - (self.group9()[0] * other.group1()[0])
                    - (self.group9()[1] * other.group1()[1])
                    - (self.group9()[2] * other.group1()[2])
                    - (self.group9()[3] * other.group3()[3])
                    + (other.group2()[3] * self[e45])),
            ]),
            // e41, e42, e43
            Simd32x3::from([
                ((self.group0()[0] * other.group0()[0])
                    + (self.group4()[0] * other.group0()[3])
                    + (self.group4()[0] * other.group1()[3])
                    + (self.group4()[1] * other.group1()[2])
                    + (self.group4()[1] * other.group3()[2])
                    - (self.group4()[2] * other.group1()[1])
                    - (self.group4()[2] * other.group3()[1])
                    + (self.group5()[0] * other.group3()[3])
                    + (self.group5()[1] * other.group0()[2])
                    - (self.group5()[2] * other.group0()[1])
                    + (self.group3()[3] * other.group0()[0])
                    + (self.group9()[0] * other.group3()[3])
                    + (self.group9()[1] * other.group0()[2])
                    - (self.group9()[2] * other.group0()[1])
                    + (other.group1()[0] * self[e45])
                    + (other.group3()[0] * self[e45])),
                ((self.group0()[0] * other.group0()[1]) - (self.group4()[0] * other.group1()[2]) - (self.group4()[0] * other.group3()[2])
                    + (self.group4()[1] * other.group0()[3])
                    + (self.group4()[1] * other.group1()[3])
                    + (self.group4()[2] * other.group1()[0])
                    + (self.group4()[2] * other.group3()[0])
                    - (self.group5()[0] * other.group0()[2])
                    + (self.group5()[1] * other.group3()[3])
                    + (self.group5()[2] * other.group0()[0])
                    + (self.group3()[3] * other.group0()[1])
                    - (self.group9()[0] * other.group0()[2])
                    + (self.group9()[1] * other.group3()[3])
                    + (self.group9()[2] * other.group0()[0])
                    + (other.group1()[1] * self[e45])
                    + (other.group3()[1] * self[e45])),
                ((self.group0()[0] * other.group0()[2]) + (self.group4()[0] * other.group1()[1]) + (self.group4()[0] * other.group3()[1])
                    - (self.group4()[1] * other.group1()[0])
                    - (self.group4()[1] * other.group3()[0])
                    + (self.group4()[2] * other.group0()[3])
                    + (self.group4()[2] * other.group1()[3])
                    + (self.group5()[0] * other.group0()[1])
                    - (self.group5()[1] * other.group0()[0])
                    + (self.group5()[2] * other.group3()[3])
                    + (self.group3()[3] * other.group0()[2])
                    + (self.group9()[0] * other.group0()[1])
                    - (self.group9()[1] * other.group0()[0])
                    + (self.group9()[2] * other.group3()[3])
                    + (other.group1()[2] * self[e45])
                    + (other.group3()[2] * self[e45])),
            ]),
            // e23, e31, e12
            Simd32x3::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group4()[0] * other.group2()[3]) + (self.group4()[1] * other.group2()[2]) - (self.group4()[2] * other.group2()[1])
                    + (self.group5()[0] * other.group0()[3])
                    + (self.group5()[1] * other.group1()[2])
                    - (self.group5()[2] * other.group1()[1])
                    + (self.group3()[0] * other.group3()[3])
                    + (self.group3()[1] * other.group0()[2])
                    - (self.group3()[2] * other.group0()[1])
                    - (self.group3()[3] * other.group3()[0])
                    - (self.group9()[0] * other.group1()[3])
                    - (self.group9()[1] * other.group3()[2])
                    + (self.group9()[2] * other.group3()[1])
                    + (self.group9()[3] * other.group0()[0])
                    + (other.group2()[0] * self[e45])),
                ((self.group0()[0] * other.group1()[1]) - (self.group4()[0] * other.group2()[2]) + (self.group4()[1] * other.group2()[3]) + (self.group4()[2] * other.group2()[0])
                    - (self.group5()[0] * other.group1()[2])
                    + (self.group5()[1] * other.group0()[3])
                    + (self.group5()[2] * other.group1()[0])
                    - (self.group3()[0] * other.group0()[2])
                    + (self.group3()[1] * other.group3()[3])
                    + (self.group3()[2] * other.group0()[0])
                    - (self.group3()[3] * other.group3()[1])
                    + (self.group9()[0] * other.group3()[2])
                    - (self.group9()[1] * other.group1()[3])
                    - (self.group9()[2] * other.group3()[0])
                    + (self.group9()[3] * other.group0()[1])
                    + (other.group2()[1] * self[e45])),
                ((self.group0()[0] * other.group1()[2]) + (self.group4()[0] * other.group2()[1]) - (self.group4()[1] * other.group2()[0])
                    + (self.group4()[2] * other.group2()[3])
                    + (self.group5()[0] * other.group1()[1])
                    - (self.group5()[1] * other.group1()[0])
                    + (self.group5()[2] * other.group0()[3])
                    + (self.group3()[0] * other.group0()[1])
                    - (self.group3()[1] * other.group0()[0])
                    + (self.group3()[2] * other.group3()[3])
                    - (self.group3()[3] * other.group3()[2])
                    - (self.group9()[0] * other.group3()[1])
                    + (self.group9()[1] * other.group3()[0])
                    - (self.group9()[2] * other.group1()[3])
                    + (self.group9()[3] * other.group0()[2])
                    + (other.group2()[2] * self[e45])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[0]) + (self.group7()[0] * other.group2()[3]) + (self.group7()[1] * other.group2()[2]) - (self.group7()[2] * other.group2()[1])
                    + (self.group8()[0] * other.group3()[3])
                    + (self.group8()[1] * other.group0()[2])
                    - (self.group8()[2] * other.group0()[1])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group3()[2])
                    - (self.group1()[2] * other.group3()[1])
                    + (self.group1()[3] * other.group2()[0])
                    + (self.group6()[0] * other.group0()[3])
                    + (self.group6()[1] * other.group1()[2])
                    - (self.group6()[2] * other.group1()[1])
                    + (self.group6()[3] * other.group3()[0])
                    + (other.group0()[0] * self[e1])),
                ((self.group0()[1] * other.group1()[1]) - (self.group7()[0] * other.group2()[2]) + (self.group7()[1] * other.group2()[3]) + (self.group7()[2] * other.group2()[0])
                    - (self.group8()[0] * other.group0()[2])
                    + (self.group8()[1] * other.group3()[3])
                    + (self.group8()[2] * other.group0()[0])
                    - (self.group1()[0] * other.group3()[2])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group3()[0])
                    + (self.group1()[3] * other.group2()[1])
                    - (self.group6()[0] * other.group1()[2])
                    + (self.group6()[1] * other.group0()[3])
                    + (self.group6()[2] * other.group1()[0])
                    + (self.group6()[3] * other.group3()[1])
                    + (other.group0()[1] * self[e1])),
                ((self.group0()[1] * other.group1()[2]) + (self.group7()[0] * other.group2()[1]) - (self.group7()[1] * other.group2()[0])
                    + (self.group7()[2] * other.group2()[3])
                    + (self.group8()[0] * other.group0()[1])
                    - (self.group8()[1] * other.group0()[0])
                    + (self.group8()[2] * other.group3()[3])
                    + (self.group1()[0] * other.group3()[1])
                    - (self.group1()[1] * other.group3()[0])
                    + (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group2()[2])
                    + (self.group6()[0] * other.group1()[1])
                    - (self.group6()[1] * other.group1()[0])
                    + (self.group6()[2] * other.group0()[3])
                    + (self.group6()[3] * other.group3()[2])
                    + (other.group0()[2] * self[e1])),
                ((self.group0()[1] * other.group1()[3]) + (self.group7()[0] * other.group2()[0]) + (self.group7()[1] * other.group2()[1]) + (self.group7()[2] * other.group2()[2])
                    - (self.group8()[0] * other.group0()[0])
                    - (self.group8()[1] * other.group0()[1])
                    - (self.group8()[2] * other.group0()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group2()[3])
                    - (self.group6()[0] * other.group3()[0])
                    - (self.group6()[1] * other.group3()[1])
                    - (self.group6()[2] * other.group3()[2])
                    + (self.group6()[3] * other.group0()[3])
                    + (other.group3()[3] * self[e1])),
            ]),
            // e423, e431, e412
            Simd32x3::from([
                ((self.group0()[1] * other.group0()[0])
                    + (self.group7()[0] * other.group0()[3])
                    + (self.group7()[0] * other.group1()[3])
                    + (self.group7()[1] * other.group1()[2])
                    + (self.group7()[1] * other.group3()[2])
                    - (self.group7()[2] * other.group1()[1])
                    - (self.group7()[2] * other.group3()[1])
                    - (self.group1()[0] * other.group3()[3])
                    - (self.group1()[1] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[1])
                    + (self.group1()[3] * other.group1()[0])
                    + (self.group1()[3] * other.group3()[0])
                    + (self.group6()[0] * other.group3()[3])
                    + (self.group6()[1] * other.group0()[2])
                    - (self.group6()[2] * other.group0()[1])
                    - (self.group6()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[1]) - (self.group7()[0] * other.group1()[2]) - (self.group7()[0] * other.group3()[2])
                    + (self.group7()[1] * other.group0()[3])
                    + (self.group7()[1] * other.group1()[3])
                    + (self.group7()[2] * other.group1()[0])
                    + (self.group7()[2] * other.group3()[0])
                    + (self.group1()[0] * other.group0()[2])
                    - (self.group1()[1] * other.group3()[3])
                    - (self.group1()[2] * other.group0()[0])
                    + (self.group1()[3] * other.group1()[1])
                    + (self.group1()[3] * other.group3()[1])
                    - (self.group6()[0] * other.group0()[2])
                    + (self.group6()[1] * other.group3()[3])
                    + (self.group6()[2] * other.group0()[0])
                    - (self.group6()[3] * other.group0()[1])),
                ((self.group0()[1] * other.group0()[2]) + (self.group7()[0] * other.group1()[1]) + (self.group7()[0] * other.group3()[1])
                    - (self.group7()[1] * other.group1()[0])
                    - (self.group7()[1] * other.group3()[0])
                    + (self.group7()[2] * other.group0()[3])
                    + (self.group7()[2] * other.group1()[3])
                    - (self.group1()[0] * other.group0()[1])
                    + (self.group1()[1] * other.group0()[0])
                    - (self.group1()[2] * other.group3()[3])
                    + (self.group1()[3] * other.group1()[2])
                    + (self.group1()[3] * other.group3()[2])
                    + (self.group6()[0] * other.group0()[1])
                    - (self.group6()[1] * other.group0()[0])
                    + (self.group6()[2] * other.group3()[3])
                    - (self.group6()[3] * other.group0()[2])),
            ]),
            // e235, e315, e125
            Simd32x3::from([
                ((self.group0()[1] * other.group2()[0]) + (self.group8()[0] * other.group0()[3]) - (self.group8()[0] * other.group1()[3]) + (self.group8()[1] * other.group1()[2])
                    - (self.group8()[1] * other.group3()[2])
                    - (self.group8()[2] * other.group1()[1])
                    + (self.group8()[2] * other.group3()[1])
                    + (self.group1()[0] * other.group2()[3])
                    + (self.group1()[1] * other.group2()[2])
                    - (self.group1()[2] * other.group2()[1])
                    + (self.group6()[0] * other.group2()[3])
                    + (self.group6()[1] * other.group2()[2])
                    - (self.group6()[2] * other.group2()[1])
                    + (self.group6()[3] * other.group2()[0])
                    + (other.group1()[0] * self[e1])
                    - (other.group3()[0] * self[e1])),
                ((self.group0()[1] * other.group2()[1]) - (self.group8()[0] * other.group1()[2]) + (self.group8()[0] * other.group3()[2]) + (self.group8()[1] * other.group0()[3])
                    - (self.group8()[1] * other.group1()[3])
                    + (self.group8()[2] * other.group1()[0])
                    - (self.group8()[2] * other.group3()[0])
                    - (self.group1()[0] * other.group2()[2])
                    + (self.group1()[1] * other.group2()[3])
                    + (self.group1()[2] * other.group2()[0])
                    - (self.group6()[0] * other.group2()[2])
                    + (self.group6()[1] * other.group2()[3])
                    + (self.group6()[2] * other.group2()[0])
                    + (self.group6()[3] * other.group2()[1])
                    + (other.group1()[1] * self[e1])
                    - (other.group3()[1] * self[e1])),
                ((self.group0()[1] * other.group2()[2]) + (self.group8()[0] * other.group1()[1]) - (self.group8()[0] * other.group3()[1]) - (self.group8()[1] * other.group1()[0])
                    + (self.group8()[1] * other.group3()[0])
                    + (self.group8()[2] * other.group0()[3])
                    - (self.group8()[2] * other.group1()[3])
                    + (self.group1()[0] * other.group2()[1])
                    - (self.group1()[1] * other.group2()[0])
                    + (self.group1()[2] * other.group2()[3])
                    + (self.group6()[0] * other.group2()[1])
                    - (self.group6()[1] * other.group2()[0])
                    + (self.group6()[2] * other.group2()[3])
                    + (self.group6()[3] * other.group2()[2])
                    + (other.group1()[2] * self[e1])
                    - (other.group3()[2] * self[e1])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(self.group0()[0] * other.group3()[0]) + (self.group4()[0] * other.group2()[3]) + (self.group4()[1] * other.group2()[2])
                    - (self.group4()[2] * other.group2()[1])
                    - (self.group5()[0] * other.group1()[3])
                    - (self.group5()[1] * other.group3()[2])
                    + (self.group5()[2] * other.group3()[1])
                    - (self.group3()[0] * other.group3()[3])
                    - (self.group3()[1] * other.group0()[2])
                    + (self.group3()[2] * other.group0()[1])
                    + (self.group3()[3] * other.group1()[0])
                    + (self.group9()[0] * other.group0()[3])
                    + (self.group9()[1] * other.group1()[2])
                    - (self.group9()[2] * other.group1()[1])
                    - (self.group9()[3] * other.group0()[0])
                    + (other.group2()[0] * self[e45])),
                (-(self.group0()[0] * other.group3()[1]) - (self.group4()[0] * other.group2()[2])
                    + (self.group4()[1] * other.group2()[3])
                    + (self.group4()[2] * other.group2()[0])
                    + (self.group5()[0] * other.group3()[2])
                    - (self.group5()[1] * other.group1()[3])
                    - (self.group5()[2] * other.group3()[0])
                    + (self.group3()[0] * other.group0()[2])
                    - (self.group3()[1] * other.group3()[3])
                    - (self.group3()[2] * other.group0()[0])
                    + (self.group3()[3] * other.group1()[1])
                    - (self.group9()[0] * other.group1()[2])
                    + (self.group9()[1] * other.group0()[3])
                    + (self.group9()[2] * other.group1()[0])
                    - (self.group9()[3] * other.group0()[1])
                    + (other.group2()[1] * self[e45])),
                (-(self.group0()[0] * other.group3()[2]) + (self.group4()[0] * other.group2()[1]) - (self.group4()[1] * other.group2()[0])
                    + (self.group4()[2] * other.group2()[3])
                    - (self.group5()[0] * other.group3()[1])
                    + (self.group5()[1] * other.group3()[0])
                    - (self.group5()[2] * other.group1()[3])
                    - (self.group3()[0] * other.group0()[1])
                    + (self.group3()[1] * other.group0()[0])
                    - (self.group3()[2] * other.group3()[3])
                    + (self.group3()[3] * other.group1()[2])
                    + (self.group9()[0] * other.group1()[1])
                    - (self.group9()[1] * other.group1()[0])
                    + (self.group9()[2] * other.group0()[3])
                    - (self.group9()[3] * other.group0()[2])
                    + (other.group2()[2] * self[e45])),
                ((self.group0()[0] * other.group2()[3])
                    - (self.group5()[0] * other.group2()[0])
                    - (self.group5()[1] * other.group2()[1])
                    - (self.group5()[2] * other.group2()[2])
                    - (self.group3()[0] * other.group1()[0])
                    + (self.group3()[0] * other.group3()[0])
                    - (self.group3()[1] * other.group1()[1])
                    + (self.group3()[1] * other.group3()[1])
                    - (self.group3()[2] * other.group1()[2])
                    + (self.group3()[2] * other.group3()[2])
                    - (self.group3()[3] * other.group2()[3])
                    + (self.group9()[0] * other.group2()[0])
                    + (self.group9()[1] * other.group2()[1])
                    + (self.group9()[2] * other.group2()[2])
                    + (self.group9()[3] * other.group0()[3])
                    - (self.group9()[3] * other.group1()[3])),
            ]),
            // e1234
            ((self.group0()[0] * other.group3()[3])
                - (self.group4()[0] * other.group1()[0])
                - (self.group4()[0] * other.group3()[0])
                - (self.group4()[1] * other.group1()[1])
                - (self.group4()[1] * other.group3()[1])
                - (self.group4()[2] * other.group1()[2])
                - (self.group4()[2] * other.group3()[2])
                - (self.group5()[0] * other.group0()[0])
                - (self.group5()[1] * other.group0()[1])
                - (self.group5()[2] * other.group0()[2])
                + (self.group3()[3] * other.group3()[3])
                - (self.group9()[0] * other.group0()[0])
                - (self.group9()[1] * other.group0()[1])
                - (self.group9()[2] * other.group0()[2])
                + (other.group0()[3] * self[e45])
                + (other.group1()[3] * self[e45])),
        );
    }
}
impl GeometricAntiProduct<VersorOdd> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      480      512        0
    fn geometric_anti_product(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((self.group0()[1] * other.group0()[3])
                    - (self.group7()[0] * other.group2()[0])
                    - (self.group7()[1] * other.group2()[1])
                    - (self.group7()[2] * other.group2()[2])
                    - (self.group8()[0] * other.group0()[0])
                    - (self.group8()[1] * other.group0()[1])
                    - (self.group8()[2] * other.group0()[2])
                    + (self.group1()[0] * other.group3()[0])
                    + (self.group1()[1] * other.group3()[1])
                    + (self.group1()[2] * other.group3()[2])
                    + (self.group1()[3] * other.group3()[3])
                    - (self.group6()[0] * other.group1()[0])
                    - (self.group6()[1] * other.group1()[1])
                    - (self.group6()[2] * other.group1()[2])
                    - (self.group6()[3] * other.group1()[3])
                    + (other.group2()[3] * self[e1])),
                (-(self.group0()[0] * other.group0()[3])
                    + (self.group4()[0] * other.group2()[0])
                    + (self.group4()[1] * other.group2()[1])
                    + (self.group4()[2] * other.group2()[2])
                    + (self.group5()[0] * other.group1()[0])
                    + (self.group5()[1] * other.group1()[1])
                    + (self.group5()[2] * other.group1()[2])
                    + (self.group3()[0] * other.group0()[0])
                    + (self.group3()[1] * other.group0()[1])
                    + (self.group3()[2] * other.group0()[2])
                    - (self.group3()[3] * other.group1()[3])
                    + (self.group9()[0] * other.group3()[0])
                    + (self.group9()[1] * other.group3()[1])
                    + (self.group9()[2] * other.group3()[2])
                    - (self.group9()[3] * other.group2()[3])
                    - (other.group3()[3] * self[e45])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group3()[0]) + (self.group4()[0] * other.group3()[3]) + (self.group4()[1] * other.group2()[2]) - (self.group4()[2] * other.group2()[1])
                    + (self.group5()[0] * other.group1()[3])
                    + (self.group5()[1] * other.group3()[2])
                    - (self.group5()[2] * other.group3()[1])
                    - (self.group3()[0] * other.group2()[3])
                    - (self.group3()[1] * other.group0()[2])
                    + (self.group3()[2] * other.group0()[1])
                    + (self.group3()[3] * other.group1()[0])
                    + (self.group9()[0] * other.group0()[3])
                    + (self.group9()[1] * other.group1()[2])
                    - (self.group9()[2] * other.group1()[1])
                    - (self.group9()[3] * other.group0()[0])
                    + (other.group2()[0] * self[e45])),
                ((self.group0()[0] * other.group3()[1]) - (self.group4()[0] * other.group2()[2]) + (self.group4()[1] * other.group3()[3]) + (self.group4()[2] * other.group2()[0])
                    - (self.group5()[0] * other.group3()[2])
                    + (self.group5()[1] * other.group1()[3])
                    + (self.group5()[2] * other.group3()[0])
                    + (self.group3()[0] * other.group0()[2])
                    - (self.group3()[1] * other.group2()[3])
                    - (self.group3()[2] * other.group0()[0])
                    + (self.group3()[3] * other.group1()[1])
                    - (self.group9()[0] * other.group1()[2])
                    + (self.group9()[1] * other.group0()[3])
                    + (self.group9()[2] * other.group1()[0])
                    - (self.group9()[3] * other.group0()[1])
                    + (other.group2()[1] * self[e45])),
                ((self.group0()[0] * other.group3()[2]) + (self.group4()[0] * other.group2()[1]) - (self.group4()[1] * other.group2()[0])
                    + (self.group4()[2] * other.group3()[3])
                    + (self.group5()[0] * other.group3()[1])
                    - (self.group5()[1] * other.group3()[0])
                    + (self.group5()[2] * other.group1()[3])
                    - (self.group3()[0] * other.group0()[1])
                    + (self.group3()[1] * other.group0()[0])
                    - (self.group3()[2] * other.group2()[3])
                    + (self.group3()[3] * other.group1()[2])
                    + (self.group9()[0] * other.group1()[1])
                    - (self.group9()[1] * other.group1()[0])
                    + (self.group9()[2] * other.group0()[3])
                    - (self.group9()[3] * other.group0()[2])
                    + (other.group2()[2] * self[e45])),
                (-(self.group0()[0] * other.group2()[3]) + (self.group4()[0] * other.group1()[0]) - (self.group4()[0] * other.group3()[0])
                    + (self.group4()[1] * other.group1()[1])
                    - (self.group4()[1] * other.group3()[1])
                    + (self.group4()[2] * other.group1()[2])
                    - (self.group4()[2] * other.group3()[2])
                    + (self.group5()[0] * other.group0()[0])
                    + (self.group5()[1] * other.group0()[1])
                    + (self.group5()[2] * other.group0()[2])
                    - (self.group3()[3] * other.group2()[3])
                    + (self.group9()[0] * other.group0()[0])
                    + (self.group9()[1] * other.group0()[1])
                    + (self.group9()[2] * other.group0()[2])
                    - (other.group0()[3] * self[e45])
                    + (other.group1()[3] * self[e45])),
            ]),
            // e5
            (-(self.group0()[0] * other.group3()[3])
                + (self.group5()[0] * other.group2()[0])
                + (self.group5()[1] * other.group2()[1])
                + (self.group5()[2] * other.group2()[2])
                + (self.group3()[0] * other.group1()[0])
                + (self.group3()[0] * other.group3()[0])
                + (self.group3()[1] * other.group1()[1])
                + (self.group3()[1] * other.group3()[1])
                + (self.group3()[2] * other.group1()[2])
                + (self.group3()[2] * other.group3()[2])
                + (self.group3()[3] * other.group3()[3])
                - (self.group9()[0] * other.group2()[0])
                - (self.group9()[1] * other.group2()[1])
                - (self.group9()[2] * other.group2()[2])
                - (self.group9()[3] * other.group0()[3])
                - (self.group9()[3] * other.group1()[3])),
            // e15, e25, e35, e45
            Simd32x4::from([
                ((self.group0()[1] * other.group2()[0])
                    + (self.group8()[0] * other.group0()[3])
                    + (self.group8()[0] * other.group1()[3])
                    + (self.group8()[1] * other.group1()[2])
                    + (self.group8()[1] * other.group3()[2])
                    - (self.group8()[2] * other.group1()[1])
                    - (self.group8()[2] * other.group3()[1])
                    + (self.group1()[0] * other.group3()[3])
                    + (self.group1()[1] * other.group2()[2])
                    - (self.group1()[2] * other.group2()[1])
                    + (self.group6()[0] * other.group3()[3])
                    + (self.group6()[1] * other.group2()[2])
                    - (self.group6()[2] * other.group2()[1])
                    + (self.group6()[3] * other.group2()[0])
                    + (other.group1()[0] * self[e1])
                    + (other.group3()[0] * self[e1])),
                ((self.group0()[1] * other.group2()[1]) - (self.group8()[0] * other.group1()[2]) - (self.group8()[0] * other.group3()[2])
                    + (self.group8()[1] * other.group0()[3])
                    + (self.group8()[1] * other.group1()[3])
                    + (self.group8()[2] * other.group1()[0])
                    + (self.group8()[2] * other.group3()[0])
                    - (self.group1()[0] * other.group2()[2])
                    + (self.group1()[1] * other.group3()[3])
                    + (self.group1()[2] * other.group2()[0])
                    - (self.group6()[0] * other.group2()[2])
                    + (self.group6()[1] * other.group3()[3])
                    + (self.group6()[2] * other.group2()[0])
                    + (self.group6()[3] * other.group2()[1])
                    + (other.group1()[1] * self[e1])
                    + (other.group3()[1] * self[e1])),
                ((self.group0()[1] * other.group2()[2]) + (self.group8()[0] * other.group1()[1]) + (self.group8()[0] * other.group3()[1])
                    - (self.group8()[1] * other.group1()[0])
                    - (self.group8()[1] * other.group3()[0])
                    + (self.group8()[2] * other.group0()[3])
                    + (self.group8()[2] * other.group1()[3])
                    + (self.group1()[0] * other.group2()[1])
                    - (self.group1()[1] * other.group2()[0])
                    + (self.group1()[2] * other.group3()[3])
                    + (self.group6()[0] * other.group2()[1])
                    - (self.group6()[1] * other.group2()[0])
                    + (self.group6()[2] * other.group3()[3])
                    + (self.group6()[3] * other.group2()[2])
                    + (other.group1()[2] * self[e1])
                    + (other.group3()[2] * self[e1])),
                ((self.group0()[1] * other.group1()[3]) - (self.group7()[0] * other.group2()[0]) - (self.group7()[1] * other.group2()[1]) - (self.group7()[2] * other.group2()[2])
                    + (self.group8()[0] * other.group0()[0])
                    + (self.group8()[1] * other.group0()[1])
                    + (self.group8()[2] * other.group0()[2])
                    + (self.group1()[0] * other.group1()[0])
                    + (self.group1()[1] * other.group1()[1])
                    + (self.group1()[2] * other.group1()[2])
                    + (self.group1()[3] * other.group3()[3])
                    - (self.group6()[0] * other.group3()[0])
                    - (self.group6()[1] * other.group3()[1])
                    - (self.group6()[2] * other.group3()[2])
                    - (self.group6()[3] * other.group0()[3])
                    - (other.group2()[3] * self[e1])),
            ]),
            // e41, e42, e43
            Simd32x3::from([
                ((self.group0()[1] * other.group0()[0]) + (self.group7()[0] * other.group0()[3]) - (self.group7()[0] * other.group1()[3]) + (self.group7()[1] * other.group1()[2])
                    - (self.group7()[1] * other.group3()[2])
                    - (self.group7()[2] * other.group1()[1])
                    + (self.group7()[2] * other.group3()[1])
                    - (self.group1()[0] * other.group2()[3])
                    - (self.group1()[1] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[1])
                    + (self.group1()[3] * other.group1()[0])
                    - (self.group1()[3] * other.group3()[0])
                    + (self.group6()[0] * other.group2()[3])
                    + (self.group6()[1] * other.group0()[2])
                    - (self.group6()[2] * other.group0()[1])
                    - (self.group6()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[1]) - (self.group7()[0] * other.group1()[2]) + (self.group7()[0] * other.group3()[2]) + (self.group7()[1] * other.group0()[3])
                    - (self.group7()[1] * other.group1()[3])
                    + (self.group7()[2] * other.group1()[0])
                    - (self.group7()[2] * other.group3()[0])
                    + (self.group1()[0] * other.group0()[2])
                    - (self.group1()[1] * other.group2()[3])
                    - (self.group1()[2] * other.group0()[0])
                    + (self.group1()[3] * other.group1()[1])
                    - (self.group1()[3] * other.group3()[1])
                    - (self.group6()[0] * other.group0()[2])
                    + (self.group6()[1] * other.group2()[3])
                    + (self.group6()[2] * other.group0()[0])
                    - (self.group6()[3] * other.group0()[1])),
                ((self.group0()[1] * other.group0()[2]) + (self.group7()[0] * other.group1()[1]) - (self.group7()[0] * other.group3()[1]) - (self.group7()[1] * other.group1()[0])
                    + (self.group7()[1] * other.group3()[0])
                    + (self.group7()[2] * other.group0()[3])
                    - (self.group7()[2] * other.group1()[3])
                    - (self.group1()[0] * other.group0()[1])
                    + (self.group1()[1] * other.group0()[0])
                    - (self.group1()[2] * other.group2()[3])
                    + (self.group1()[3] * other.group1()[2])
                    - (self.group1()[3] * other.group3()[2])
                    + (self.group6()[0] * other.group0()[1])
                    - (self.group6()[1] * other.group0()[0])
                    + (self.group6()[2] * other.group2()[3])
                    - (self.group6()[3] * other.group0()[2])),
            ]),
            // e23, e31, e12
            Simd32x3::from([
                ((self.group0()[1] * other.group1()[0]) + (self.group7()[0] * other.group3()[3]) + (self.group7()[1] * other.group2()[2]) - (self.group7()[2] * other.group2()[1])
                    + (self.group8()[0] * other.group2()[3])
                    + (self.group8()[1] * other.group0()[2])
                    - (self.group8()[2] * other.group0()[1])
                    - (self.group1()[0] * other.group1()[3])
                    - (self.group1()[1] * other.group3()[2])
                    + (self.group1()[2] * other.group3()[1])
                    + (self.group1()[3] * other.group2()[0])
                    + (self.group6()[0] * other.group0()[3])
                    + (self.group6()[1] * other.group1()[2])
                    - (self.group6()[2] * other.group1()[1])
                    - (self.group6()[3] * other.group3()[0])
                    + (other.group0()[0] * self[e1])),
                ((self.group0()[1] * other.group1()[1]) - (self.group7()[0] * other.group2()[2]) + (self.group7()[1] * other.group3()[3]) + (self.group7()[2] * other.group2()[0])
                    - (self.group8()[0] * other.group0()[2])
                    + (self.group8()[1] * other.group2()[3])
                    + (self.group8()[2] * other.group0()[0])
                    + (self.group1()[0] * other.group3()[2])
                    - (self.group1()[1] * other.group1()[3])
                    - (self.group1()[2] * other.group3()[0])
                    + (self.group1()[3] * other.group2()[1])
                    - (self.group6()[0] * other.group1()[2])
                    + (self.group6()[1] * other.group0()[3])
                    + (self.group6()[2] * other.group1()[0])
                    - (self.group6()[3] * other.group3()[1])
                    + (other.group0()[1] * self[e1])),
                ((self.group0()[1] * other.group1()[2]) + (self.group7()[0] * other.group2()[1]) - (self.group7()[1] * other.group2()[0])
                    + (self.group7()[2] * other.group3()[3])
                    + (self.group8()[0] * other.group0()[1])
                    - (self.group8()[1] * other.group0()[0])
                    + (self.group8()[2] * other.group2()[3])
                    - (self.group1()[0] * other.group3()[1])
                    + (self.group1()[1] * other.group3()[0])
                    - (self.group1()[2] * other.group1()[3])
                    + (self.group1()[3] * other.group2()[2])
                    + (self.group6()[0] * other.group1()[1])
                    - (self.group6()[1] * other.group1()[0])
                    + (self.group6()[2] * other.group0()[3])
                    - (self.group6()[3] * other.group3()[2])
                    + (other.group0()[2] * self[e1])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[0]) - (self.group4()[0] * other.group3()[3]) - (self.group4()[1] * other.group2()[2])
                    + (self.group4()[2] * other.group2()[1])
                    - (self.group5()[0] * other.group0()[3])
                    - (self.group5()[1] * other.group1()[2])
                    + (self.group5()[2] * other.group1()[1])
                    - (self.group3()[0] * other.group2()[3])
                    - (self.group3()[1] * other.group0()[2])
                    + (self.group3()[2] * other.group0()[1])
                    - (self.group3()[3] * other.group3()[0])
                    - (self.group9()[0] * other.group1()[3])
                    - (self.group9()[1] * other.group3()[2])
                    + (self.group9()[2] * other.group3()[1])
                    - (self.group9()[3] * other.group0()[0])
                    - (other.group2()[0] * self[e45])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group4()[0] * other.group2()[2])
                    - (self.group4()[1] * other.group3()[3])
                    - (self.group4()[2] * other.group2()[0])
                    + (self.group5()[0] * other.group1()[2])
                    - (self.group5()[1] * other.group0()[3])
                    - (self.group5()[2] * other.group1()[0])
                    + (self.group3()[0] * other.group0()[2])
                    - (self.group3()[1] * other.group2()[3])
                    - (self.group3()[2] * other.group0()[0])
                    - (self.group3()[3] * other.group3()[1])
                    + (self.group9()[0] * other.group3()[2])
                    - (self.group9()[1] * other.group1()[3])
                    - (self.group9()[2] * other.group3()[0])
                    - (self.group9()[3] * other.group0()[1])
                    - (other.group2()[1] * self[e45])),
                (-(self.group0()[0] * other.group1()[2]) - (self.group4()[0] * other.group2()[1]) + (self.group4()[1] * other.group2()[0])
                    - (self.group4()[2] * other.group3()[3])
                    - (self.group5()[0] * other.group1()[1])
                    + (self.group5()[1] * other.group1()[0])
                    - (self.group5()[2] * other.group0()[3])
                    - (self.group3()[0] * other.group0()[1])
                    + (self.group3()[1] * other.group0()[0])
                    - (self.group3()[2] * other.group2()[3])
                    - (self.group3()[3] * other.group3()[2])
                    - (self.group9()[0] * other.group3()[1])
                    + (self.group9()[1] * other.group3()[0])
                    - (self.group9()[2] * other.group1()[3])
                    - (self.group9()[3] * other.group0()[2])
                    - (other.group2()[2] * self[e45])),
                ((self.group0()[0] * other.group1()[3])
                    - (self.group4()[0] * other.group2()[0])
                    - (self.group4()[1] * other.group2()[1])
                    - (self.group4()[2] * other.group2()[2])
                    - (self.group5()[0] * other.group3()[0])
                    - (self.group5()[1] * other.group3()[1])
                    - (self.group5()[2] * other.group3()[2])
                    + (self.group3()[0] * other.group0()[0])
                    + (self.group3()[1] * other.group0()[1])
                    + (self.group3()[2] * other.group0()[2])
                    + (self.group3()[3] * other.group0()[3])
                    - (self.group9()[0] * other.group1()[0])
                    - (self.group9()[1] * other.group1()[1])
                    - (self.group9()[2] * other.group1()[2])
                    - (self.group9()[3] * other.group2()[3])
                    + (other.group3()[3] * self[e45])),
            ]),
            // e423, e431, e412
            Simd32x3::from([
                (-(self.group0()[0] * other.group0()[0]) - (self.group4()[0] * other.group0()[3]) + (self.group4()[0] * other.group1()[3])
                    - (self.group4()[1] * other.group1()[2])
                    + (self.group4()[1] * other.group3()[2])
                    + (self.group4()[2] * other.group1()[1])
                    - (self.group4()[2] * other.group3()[1])
                    - (self.group5()[0] * other.group2()[3])
                    - (self.group5()[1] * other.group0()[2])
                    + (self.group5()[2] * other.group0()[1])
                    - (self.group3()[3] * other.group0()[0])
                    - (self.group9()[0] * other.group2()[3])
                    - (self.group9()[1] * other.group0()[2])
                    + (self.group9()[2] * other.group0()[1])
                    - (other.group1()[0] * self[e45])
                    + (other.group3()[0] * self[e45])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group4()[0] * other.group1()[2])
                    - (self.group4()[0] * other.group3()[2])
                    - (self.group4()[1] * other.group0()[3])
                    + (self.group4()[1] * other.group1()[3])
                    - (self.group4()[2] * other.group1()[0])
                    + (self.group4()[2] * other.group3()[0])
                    + (self.group5()[0] * other.group0()[2])
                    - (self.group5()[1] * other.group2()[3])
                    - (self.group5()[2] * other.group0()[0])
                    - (self.group3()[3] * other.group0()[1])
                    + (self.group9()[0] * other.group0()[2])
                    - (self.group9()[1] * other.group2()[3])
                    - (self.group9()[2] * other.group0()[0])
                    - (other.group1()[1] * self[e45])
                    + (other.group3()[1] * self[e45])),
                (-(self.group0()[0] * other.group0()[2]) - (self.group4()[0] * other.group1()[1])
                    + (self.group4()[0] * other.group3()[1])
                    + (self.group4()[1] * other.group1()[0])
                    - (self.group4()[1] * other.group3()[0])
                    - (self.group4()[2] * other.group0()[3])
                    + (self.group4()[2] * other.group1()[3])
                    - (self.group5()[0] * other.group0()[1])
                    + (self.group5()[1] * other.group0()[0])
                    - (self.group5()[2] * other.group2()[3])
                    - (self.group3()[3] * other.group0()[2])
                    - (self.group9()[0] * other.group0()[1])
                    + (self.group9()[1] * other.group0()[0])
                    - (self.group9()[2] * other.group2()[3])
                    - (other.group1()[2] * self[e45])
                    + (other.group3()[2] * self[e45])),
            ]),
            // e235, e315, e125
            Simd32x3::from([
                (-(self.group0()[0] * other.group2()[0]) - (self.group5()[0] * other.group3()[3]) - (self.group5()[1] * other.group2()[2])
                    + (self.group5()[2] * other.group2()[1])
                    - (self.group3()[0] * other.group0()[3])
                    - (self.group3()[0] * other.group1()[3])
                    - (self.group3()[1] * other.group1()[2])
                    - (self.group3()[1] * other.group3()[2])
                    + (self.group3()[2] * other.group1()[1])
                    + (self.group3()[2] * other.group3()[1])
                    + (self.group3()[3] * other.group2()[0])
                    + (self.group9()[0] * other.group3()[3])
                    + (self.group9()[1] * other.group2()[2])
                    - (self.group9()[2] * other.group2()[1])
                    - (self.group9()[3] * other.group1()[0])
                    - (self.group9()[3] * other.group3()[0])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group5()[0] * other.group2()[2])
                    - (self.group5()[1] * other.group3()[3])
                    - (self.group5()[2] * other.group2()[0])
                    + (self.group3()[0] * other.group1()[2])
                    + (self.group3()[0] * other.group3()[2])
                    - (self.group3()[1] * other.group0()[3])
                    - (self.group3()[1] * other.group1()[3])
                    - (self.group3()[2] * other.group1()[0])
                    - (self.group3()[2] * other.group3()[0])
                    + (self.group3()[3] * other.group2()[1])
                    - (self.group9()[0] * other.group2()[2])
                    + (self.group9()[1] * other.group3()[3])
                    + (self.group9()[2] * other.group2()[0])
                    - (self.group9()[3] * other.group1()[1])
                    - (self.group9()[3] * other.group3()[1])),
                (-(self.group0()[0] * other.group2()[2]) - (self.group5()[0] * other.group2()[1]) + (self.group5()[1] * other.group2()[0])
                    - (self.group5()[2] * other.group3()[3])
                    - (self.group3()[0] * other.group1()[1])
                    - (self.group3()[0] * other.group3()[1])
                    + (self.group3()[1] * other.group1()[0])
                    + (self.group3()[1] * other.group3()[0])
                    - (self.group3()[2] * other.group0()[3])
                    - (self.group3()[2] * other.group1()[3])
                    + (self.group3()[3] * other.group2()[2])
                    + (self.group9()[0] * other.group2()[1])
                    - (self.group9()[1] * other.group2()[0])
                    + (self.group9()[2] * other.group3()[3])
                    - (self.group9()[3] * other.group1()[2])
                    - (self.group9()[3] * other.group3()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[1] * other.group3()[0]) + (self.group7()[0] * other.group3()[3]) + (self.group7()[1] * other.group2()[2])
                    - (self.group7()[2] * other.group2()[1])
                    - (self.group8()[0] * other.group2()[3])
                    - (self.group8()[1] * other.group0()[2])
                    + (self.group8()[2] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[3])
                    - (self.group1()[1] * other.group1()[2])
                    + (self.group1()[2] * other.group1()[1])
                    + (self.group1()[3] * other.group2()[0])
                    + (self.group6()[0] * other.group1()[3])
                    + (self.group6()[1] * other.group3()[2])
                    - (self.group6()[2] * other.group3()[1])
                    - (self.group6()[3] * other.group1()[0])
                    - (other.group0()[0] * self[e1])),
                ((self.group0()[1] * other.group3()[1]) - (self.group7()[0] * other.group2()[2])
                    + (self.group7()[1] * other.group3()[3])
                    + (self.group7()[2] * other.group2()[0])
                    + (self.group8()[0] * other.group0()[2])
                    - (self.group8()[1] * other.group2()[3])
                    - (self.group8()[2] * other.group0()[0])
                    + (self.group1()[0] * other.group1()[2])
                    - (self.group1()[1] * other.group0()[3])
                    - (self.group1()[2] * other.group1()[0])
                    + (self.group1()[3] * other.group2()[1])
                    - (self.group6()[0] * other.group3()[2])
                    + (self.group6()[1] * other.group1()[3])
                    + (self.group6()[2] * other.group3()[0])
                    - (self.group6()[3] * other.group1()[1])
                    - (other.group0()[1] * self[e1])),
                ((self.group0()[1] * other.group3()[2]) + (self.group7()[0] * other.group2()[1]) - (self.group7()[1] * other.group2()[0]) + (self.group7()[2] * other.group3()[3])
                    - (self.group8()[0] * other.group0()[1])
                    + (self.group8()[1] * other.group0()[0])
                    - (self.group8()[2] * other.group2()[3])
                    - (self.group1()[0] * other.group1()[1])
                    + (self.group1()[1] * other.group1()[0])
                    - (self.group1()[2] * other.group0()[3])
                    + (self.group1()[3] * other.group2()[2])
                    + (self.group6()[0] * other.group3()[1])
                    - (self.group6()[1] * other.group3()[0])
                    + (self.group6()[2] * other.group1()[3])
                    - (self.group6()[3] * other.group1()[2])
                    - (other.group0()[2] * self[e1])),
                ((self.group0()[1] * other.group3()[3])
                    - (self.group8()[0] * other.group1()[0])
                    - (self.group8()[0] * other.group3()[0])
                    - (self.group8()[1] * other.group1()[1])
                    - (self.group8()[1] * other.group3()[1])
                    - (self.group8()[2] * other.group1()[2])
                    - (self.group8()[2] * other.group3()[2])
                    - (self.group1()[0] * other.group2()[0])
                    - (self.group1()[1] * other.group2()[1])
                    - (self.group1()[2] * other.group2()[2])
                    - (self.group6()[0] * other.group2()[0])
                    - (self.group6()[1] * other.group2()[1])
                    - (self.group6()[2] * other.group2()[2])
                    + (self.group6()[3] * other.group3()[3])
                    + (other.group0()[3] * self[e1])
                    + (other.group1()[3] * self[e1])),
            ]),
            // e1234
            ((self.group0()[1] * other.group2()[3]) - (self.group7()[0] * other.group1()[0]) + (self.group7()[0] * other.group3()[0]) - (self.group7()[1] * other.group1()[1])
                + (self.group7()[1] * other.group3()[1])
                - (self.group7()[2] * other.group1()[2])
                + (self.group7()[2] * other.group3()[2])
                + (self.group1()[0] * other.group0()[0])
                + (self.group1()[1] * other.group0()[1])
                + (self.group1()[2] * other.group0()[2])
                + (self.group1()[3] * other.group0()[3])
                - (self.group1()[3] * other.group1()[3])
                - (self.group6()[0] * other.group0()[0])
                - (self.group6()[1] * other.group0()[1])
                - (self.group6()[2] * other.group0()[2])
                - (self.group6()[3] * other.group2()[3])),
        );
    }
}
impl InfixGeometricAntiProduct for Plane {}
impl GeometricAntiProduct<AntiCircleRotor> for Plane {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       29       44        0
    fn geometric_anti_product(self, other: AntiCircleRotor) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group1()[3] * self.group0()[0])),
                (-(other.group0()[1] * self.group0()[3]) - (other.group1()[3] * self.group0()[1])),
                (-(other.group0()[2] * self.group0()[3]) - (other.group1()[3] * self.group0()[2])),
                (-(other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (-(other.group1()[0] * self.group0()[3]) - (other.group2()[1] * self.group0()[2]) + (other.group2()[2] * self.group0()[1])),
                (-(other.group1()[1] * self.group0()[3]) + (other.group2()[0] * self.group0()[2]) - (other.group2()[2] * self.group0()[0])),
                (-(other.group1()[2] * self.group0()[3]) - (other.group2()[0] * self.group0()[1]) + (other.group2()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])
                    + (other.group2()[3] * self.group0()[0])),
                (-(other.group0()[1] * self.group0()[3]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])
                    + (other.group2()[3] * self.group0()[1])),
                (-(other.group0()[2] * self.group0()[3]) - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group2()[3] * self.group0()[2])),
                (-(other.group1()[3] * self.group0()[3])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    - (other.group2()[3] * self.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDipoleInversion> for Plane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       44       60        0
    fn geometric_anti_product(self, other: AntiDipoleInversion) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (other.group2()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) + (other.group2()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (other.group2()[3] * self.group0()[2])),
                ((other.group2()[3] * self.group0()[3]) + (other.group3()[0] * self.group0()[0]) + (other.group3()[1] * self.group0()[1]) + (other.group3()[2] * self.group0()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group1()[3] * self.group0()[0]) + (other.group3()[1] * self.group0()[2]) - (other.group3()[2] * self.group0()[1])),
                ((other.group0()[1] * self.group0()[3]) - (other.group1()[3] * self.group0()[1]) - (other.group3()[0] * self.group0()[2]) + (other.group3()[2] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[3]) - (other.group1()[3] * self.group0()[2]) + (other.group3()[0] * self.group0()[1]) - (other.group3()[1] * self.group0()[0])),
                (-(other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])
                    - (other.group2()[3] * self.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group1()[0] * self.group0()[3]) + (other.group2()[1] * self.group0()[2])
                    - (other.group2()[2] * self.group0()[1])
                    - (other.group3()[0] * self.group0()[3])
                    - (other.group3()[3] * self.group0()[0])),
                ((other.group1()[1] * self.group0()[3]) - (other.group2()[0] * self.group0()[2]) + (other.group2()[2] * self.group0()[0])
                    - (other.group3()[1] * self.group0()[3])
                    - (other.group3()[3] * self.group0()[1])),
                ((other.group1()[2] * self.group0()[3]) + (other.group2()[0] * self.group0()[1])
                    - (other.group2()[1] * self.group0()[0])
                    - (other.group3()[2] * self.group0()[3])
                    - (other.group3()[3] * self.group0()[2])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1])),
                (-(other.group0()[1] * self.group0()[3]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[2] * self.group0()[3]) - (other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0])),
                (-(other.group1()[3] * self.group0()[3])
                    + (other.group2()[0] * self.group0()[0])
                    + (other.group2()[1] * self.group0()[1])
                    + (other.group2()[2] * self.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum> for Plane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0       15        0
    fn geometric_anti_product(self, other: AntiDualNum) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                (other.group0()[0] * self.group0()[3] * -1.0),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group0()[3] * -1.0)]),
            // e235, e315, e125, e5
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[1] * self.group0()[3] * -1.0)]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiFlatPoint> for Plane {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       16        0
    fn geometric_anti_product(self, other: AntiFlatPoint) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (other.group0()[3] * self.group0()[0] * -1.0),
                (other.group0()[3] * self.group0()[1] * -1.0),
                (other.group0()[3] * self.group0()[2] * -1.0),
                0.0,
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiFlector> for Plane {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       20       28        0
    fn geometric_anti_product(self, other: AntiFlector) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (-(other.group0()[3] * self.group0()[0]) + (other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1])),
                (-(other.group0()[3] * self.group0()[1]) - (other.group1()[0] * self.group0()[2]) + (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[3] * self.group0()[2]) + (other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0])),
                ((other.group1()[0] * self.group0()[0]) + (other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) - (other.group1()[0] * self.group0()[3]) - (other.group1()[3] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[3])
                    - (other.group1()[3] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) - (other.group1()[2] * self.group0()[3]) - (other.group1()[3] * self.group0()[2])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiLine> for Plane {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       13       21        0
    fn geometric_anti_product(self, other: AntiLine) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1])),
                (-(other.group0()[1] * self.group0()[3]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[2] * self.group0()[3]) - (other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
                (-(other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiMotor> for Plane {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       20       28        0
    fn geometric_anti_product(self, other: AntiMotor) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])
                    + (other.group1()[3] * self.group0()[0])),
                (-(other.group0()[1] * self.group0()[3]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])
                    + (other.group1()[3] * self.group0()[1])),
                (-(other.group0()[2] * self.group0()[3]) - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (other.group0()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) + (other.group0()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (other.group0()[3] * self.group0()[2])),
                (-(other.group0()[3] * self.group0()[3])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiPlane> for Plane {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       15        0
    fn geometric_anti_product(self, other: AntiPlane) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group0()[3] * self.group0()[0])),
                (-(other.group0()[1] * self.group0()[3]) - (other.group0()[3] * self.group0()[1])),
                (-(other.group0()[2] * self.group0()[3]) - (other.group0()[3] * self.group0()[2])),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiScalar> for Plane {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        4        0
    fn geometric_anti_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group0()[0] * other[e12345]),
            (self.group0()[1] * other[e12345]),
            (self.group0()[2] * other[e12345]),
            (self.group0()[3] * other[e12345]),
        ]));
    }
}
impl GeometricAntiProduct<Circle> for Plane {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       25       40        0
    fn geometric_anti_product(self, other: Circle) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group1()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[3]) - (other.group1()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group0()[3]) - (other.group1()[3] * self.group0()[2])),
                (-(other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group2()[1] * self.group0()[2]) - (other.group2()[2] * self.group0()[1]) + (other.group1()[0] * self.group0()[3])),
                (-(other.group2()[0] * self.group0()[2]) + (other.group2()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3])),
                ((other.group2()[0] * self.group0()[1]) - (other.group2()[1] * self.group0()[0]) + (other.group1()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1])),
                (-(other.group0()[1] * self.group0()[3]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[2] * self.group0()[3]) - (other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0])),
                ((other.group2()[0] * self.group0()[0]) + (other.group2()[1] * self.group0()[1]) + (other.group2()[2] * self.group0()[2]) - (other.group1()[3] * self.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<CircleRotor> for Plane {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       29       44        0
    fn geometric_anti_product(self, other: CircleRotor) -> Self::Output {
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group1()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[3]) - (other.group1()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group0()[3]) - (other.group1()[3] * self.group0()[2])),
                (-(other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group1()[0] * self.group0()[3]) + (other.group2()[1] * self.group0()[2]) - (other.group2()[2] * self.group0()[1])),
                ((other.group1()[1] * self.group0()[3]) - (other.group2()[0] * self.group0()[2]) + (other.group2()[2] * self.group0()[0])),
                ((other.group1()[2] * self.group0()[3]) + (other.group2()[0] * self.group0()[1]) - (other.group2()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])
                    + (other.group2()[3] * self.group0()[0])),
                (-(other.group0()[1] * self.group0()[3]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])
                    + (other.group2()[3] * self.group0()[1])),
                (-(other.group0()[2] * self.group0()[3]) - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group2()[3] * self.group0()[2])),
                (-(other.group1()[3] * self.group0()[3])
                    + (other.group2()[0] * self.group0()[0])
                    + (other.group2()[1] * self.group0()[1])
                    + (other.group2()[2] * self.group0()[2])
                    + (other.group2()[3] * self.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Dipole> for Plane {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       25       40        0
    fn geometric_anti_product(self, other: Dipole) -> Self::Output {
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group1()[3] * self.group0()[0])),
                (-(other.group0()[1] * self.group0()[3]) - (other.group1()[3] * self.group0()[1])),
                (-(other.group0()[2] * self.group0()[3]) - (other.group1()[3] * self.group0()[2])),
                (-(other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (-(other.group2()[1] * self.group0()[2]) + (other.group2()[2] * self.group0()[1]) - (other.group1()[0] * self.group0()[3])),
                ((other.group2()[0] * self.group0()[2]) - (other.group2()[2] * self.group0()[0]) - (other.group1()[1] * self.group0()[3])),
                (-(other.group2()[0] * self.group0()[1]) + (other.group2()[1] * self.group0()[0]) - (other.group1()[2] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1])),
                (-(other.group0()[1] * self.group0()[3]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[2] * self.group0()[3]) - (other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0])),
                (-(other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    - (other.group1()[3] * self.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<DipoleInversion> for Plane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       44       60        0
    fn geometric_anti_product(self, other: DipoleInversion) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) - (other.group2()[3] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0]) - (other.group2()[3] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) - (other.group2()[3] * self.group0()[2])),
                (-(other.group2()[3] * self.group0()[3])
                    + (other.group3()[0] * self.group0()[0])
                    + (other.group3()[1] * self.group0()[1])
                    + (other.group3()[2] * self.group0()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group1()[3] * self.group0()[0]) + (other.group3()[1] * self.group0()[2])
                    - (other.group3()[2] * self.group0()[1])),
                (-(other.group0()[1] * self.group0()[3]) - (other.group1()[3] * self.group0()[1]) - (other.group3()[0] * self.group0()[2])
                    + (other.group3()[2] * self.group0()[0])),
                (-(other.group0()[2] * self.group0()[3]) - (other.group1()[3] * self.group0()[2]) + (other.group3()[0] * self.group0()[1])
                    - (other.group3()[1] * self.group0()[0])),
                (-(other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])
                    - (other.group2()[3] * self.group0()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(other.group1()[0] * self.group0()[3]) - (other.group2()[1] * self.group0()[2]) + (other.group2()[2] * self.group0()[1])
                    - (other.group3()[0] * self.group0()[3])
                    + (other.group3()[3] * self.group0()[0])),
                (-(other.group1()[1] * self.group0()[3]) + (other.group2()[0] * self.group0()[2])
                    - (other.group2()[2] * self.group0()[0])
                    - (other.group3()[1] * self.group0()[3])
                    + (other.group3()[3] * self.group0()[1])),
                (-(other.group1()[2] * self.group0()[3]) - (other.group2()[0] * self.group0()[1]) + (other.group2()[1] * self.group0()[0])
                    - (other.group3()[2] * self.group0()[3])
                    + (other.group3()[3] * self.group0()[2])),
                (-(other.group1()[3] * self.group0()[3])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1])),
                (-(other.group0()[1] * self.group0()[3]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[2] * self.group0()[3]) - (other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<DualNum> for Plane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0       10        0
    fn geometric_anti_product(self, other: DualNum) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                (other.group0()[0] * self.group0()[3]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group0()[3] * -1.0)]),
            // e15, e25, e35, e1234
            Simd32x4::from(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                (other.group0()[1] * self.group0()[3]),
            ]),
        );
    }
}
impl GeometricAntiProduct<FlatPoint> for Plane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        6       16        0
    fn geometric_anti_product(self, other: FlatPoint) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (other.group0()[3] * self.group0()[0] * -1.0),
                (other.group0()[3] * self.group0()[1] * -1.0),
                (other.group0()[3] * self.group0()[2] * -1.0),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group0()[3] * self.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Flector> for Plane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       20       28        0
    fn geometric_anti_product(self, other: Flector) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (-(other.group0()[3] * self.group0()[0]) + (other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1])),
                (-(other.group0()[3] * self.group0()[1]) - (other.group1()[0] * self.group0()[2]) + (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[3] * self.group0()[2]) + (other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0])),
                ((other.group1()[0] * self.group0()[0]) + (other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) - (other.group1()[0] * self.group0()[3])
                    + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) - (other.group1()[1] * self.group0()[3]) + (other.group1()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) - (other.group1()[2] * self.group0()[3])
                    + (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group0()[3] * self.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Line> for Plane {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       13       21        0
    fn geometric_anti_product(self, other: Line) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1])),
                ((other.group0()[1] * self.group0()[3]) - (other.group1()[0] * self.group0()[2]) + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[3]) + (other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
                ((other.group1()[0] * self.group0()[0]) + (other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Motor> for Plane {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       20       28        0
    fn geometric_anti_product(self, other: Motor) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1]) - (other.group1()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[3]) - (other.group1()[0] * self.group0()[2]) + (other.group1()[2] * self.group0()[0]) - (other.group1()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group0()[3]) + (other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0]) - (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (other.group0()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) + (other.group0()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (other.group0()[3] * self.group0()[2])),
                ((other.group0()[3] * self.group0()[3]) + (other.group1()[0] * self.group0()[0]) + (other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<MultiVector> for Plane {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       96      128        0
    fn geometric_anti_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((other.group1()[0] * self.group0()[0]) + (other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2]) + (other.group1()[3] * self.group0()[3])),
                ((other.group9()[0] * self.group0()[0]) + (other.group9()[1] * self.group0()[1]) + (other.group9()[2] * self.group0()[2]) - (self.group0()[3] * other[e45])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[0]) - (other.group4()[0] * self.group0()[3]) - (other.group5()[1] * self.group0()[2]) + (other.group5()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[1]) - (other.group4()[1] * self.group0()[3]) + (other.group5()[0] * self.group0()[2]) - (other.group5()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[2]) - (other.group4()[2] * self.group0()[3]) - (other.group5()[0] * self.group0()[1]) + (other.group5()[1] * self.group0()[0])),
                ((other.group4()[0] * self.group0()[0]) + (other.group4()[1] * self.group0()[1]) + (other.group4()[2] * self.group0()[2])),
            ]),
            // e5
            (-(other.group0()[0] * self.group0()[3])
                - (other.group3()[0] * self.group0()[0])
                - (other.group3()[1] * self.group0()[1])
                - (other.group3()[2] * self.group0()[2])
                - (other.group3()[3] * self.group0()[3])),
            // e15, e25, e35, e45
            Simd32x4::from([
                ((other.group8()[1] * self.group0()[2]) - (other.group8()[2] * self.group0()[1]) - (other.group1()[0] * self.group0()[3]) + (other.group6()[0] * self.group0()[3])
                    - (self.group0()[0] * other[e1])),
                (-(other.group8()[0] * self.group0()[2]) + (other.group8()[2] * self.group0()[0]) - (other.group1()[1] * self.group0()[3])
                    + (other.group6()[1] * self.group0()[3])
                    - (self.group0()[1] * other[e1])),
                ((other.group8()[0] * self.group0()[1]) - (other.group8()[1] * self.group0()[0]) - (other.group1()[2] * self.group0()[3]) + (other.group6()[2] * self.group0()[3])
                    - (self.group0()[2] * other[e1])),
                (-(other.group1()[3] * self.group0()[3])
                    - (other.group6()[0] * self.group0()[0])
                    - (other.group6()[1] * self.group0()[1])
                    - (other.group6()[2] * self.group0()[2])),
            ]),
            // e41, e42, e43
            Simd32x3::from([
                (-(other.group7()[1] * self.group0()[2]) + (other.group7()[2] * self.group0()[1]) + (other.group1()[3] * self.group0()[0])),
                ((other.group7()[0] * self.group0()[2]) - (other.group7()[2] * self.group0()[0]) + (other.group1()[3] * self.group0()[1])),
                (-(other.group7()[0] * self.group0()[1]) + (other.group7()[1] * self.group0()[0]) + (other.group1()[3] * self.group0()[2])),
            ]),
            // e23, e31, e12
            Simd32x3::from([
                ((other.group7()[0] * self.group0()[3]) + (other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1]) - (other.group6()[3] * self.group0()[0])),
                ((other.group7()[1] * self.group0()[3]) - (other.group1()[0] * self.group0()[2]) + (other.group1()[2] * self.group0()[0]) - (other.group6()[3] * self.group0()[1])),
                ((other.group7()[2] * self.group0()[3]) + (other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0]) - (other.group6()[3] * self.group0()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group4()[0] * self.group0()[3]) - (other.group3()[3] * self.group0()[0]) + (other.group9()[1] * self.group0()[2])
                    - (other.group9()[2] * self.group0()[1])),
                (-(other.group4()[1] * self.group0()[3]) - (other.group3()[3] * self.group0()[1]) - (other.group9()[0] * self.group0()[2])
                    + (other.group9()[2] * self.group0()[0])),
                (-(other.group4()[2] * self.group0()[3]) - (other.group3()[3] * self.group0()[2]) + (other.group9()[0] * self.group0()[1])
                    - (other.group9()[1] * self.group0()[0])),
                (-(other.group5()[0] * self.group0()[0]) - (other.group5()[1] * self.group0()[1]) - (other.group5()[2] * self.group0()[2]) - (self.group0()[3] * other[e45])),
            ]),
            // e423, e431, e412
            Simd32x3::from([
                ((other.group4()[1] * self.group0()[2]) - (other.group4()[2] * self.group0()[1]) - (self.group0()[0] * other[e45])),
                (-(other.group4()[0] * self.group0()[2]) + (other.group4()[2] * self.group0()[0]) - (self.group0()[1] * other[e45])),
                ((other.group4()[0] * self.group0()[1]) - (other.group4()[1] * self.group0()[0]) - (self.group0()[2] * other[e45])),
            ]),
            // e235, e315, e125
            Simd32x3::from([
                (-(other.group5()[0] * self.group0()[3]) - (other.group3()[1] * self.group0()[2]) + (other.group3()[2] * self.group0()[1])
                    - (other.group9()[0] * self.group0()[3])
                    + (other.group9()[3] * self.group0()[0])),
                (-(other.group5()[1] * self.group0()[3]) + (other.group3()[0] * self.group0()[2])
                    - (other.group3()[2] * self.group0()[0])
                    - (other.group9()[1] * self.group0()[3])
                    + (other.group9()[3] * self.group0()[1])),
                (-(other.group5()[2] * self.group0()[3]) - (other.group3()[0] * self.group0()[1]) + (other.group3()[1] * self.group0()[0])
                    - (other.group9()[2] * self.group0()[3])
                    + (other.group9()[3] * self.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[0]) - (other.group7()[0] * self.group0()[3]) - (other.group6()[1] * self.group0()[2]) + (other.group6()[2] * self.group0()[1])),
                ((other.group0()[1] * self.group0()[1]) - (other.group7()[1] * self.group0()[3]) + (other.group6()[0] * self.group0()[2]) - (other.group6()[2] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[2]) - (other.group7()[2] * self.group0()[3]) - (other.group6()[0] * self.group0()[1]) + (other.group6()[1] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[3]) + (other.group8()[0] * self.group0()[0]) + (other.group8()[1] * self.group0()[1]) + (other.group8()[2] * self.group0()[2])
                    - (other.group6()[3] * self.group0()[3])),
            ]),
            // e1234
            (-(other.group7()[0] * self.group0()[0]) - (other.group7()[1] * self.group0()[1]) - (other.group7()[2] * self.group0()[2])),
        );
    }
}
impl GeometricAntiProduct<Plane> for Plane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       15        0
    fn geometric_anti_product(self, other: Plane) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) + (other.group0()[3] * self.group0()[0])),
                (-(other.group0()[1] * self.group0()[3]) + (other.group0()[3] * self.group0()[1])),
                (-(other.group0()[2] * self.group0()[3]) + (other.group0()[3] * self.group0()[2])),
                0.0,
            ]),
        );
    }
}
impl GeometricAntiProduct<RoundPoint> for Plane {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        9       21        0
    fn geometric_anti_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from([(self.group0()[0] * other.group0()[3]), (self.group0()[1] * other.group0()[3]), (self.group0()[2] * other.group0()[3])]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other.group0()[3] * -1.0),
            ]),
            // e15, e25, e35, scalar
            Simd32x4::from([
                (-(self.group0()[0] * other[e2]) - (self.group0()[3] * other.group0()[0])),
                (-(self.group0()[1] * other[e2]) - (self.group0()[3] * other.group0()[1])),
                (-(self.group0()[2] * other[e2]) - (self.group0()[3] * other.group0()[2])),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Scalar> for Plane {
    type Output = AntiPlane;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        5        0
    fn geometric_anti_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from([
            (self.group0()[0] * other[scalar]),
            (self.group0()[1] * other[scalar]),
            (self.group0()[2] * other[scalar]),
            (self.group0()[3] * other[scalar] * -1.0),
        ]));
    }
}
impl GeometricAntiProduct<Sphere> for Plane {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        9       24        0
    fn geometric_anti_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                (self.group0()[0] * other[e4315] * -1.0),
                (self.group0()[1] * other[e4315] * -1.0),
                (self.group0()[2] * other[e4315] * -1.0),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other[e4315] * -1.0),
            ]),
            // e235, e315, e125, e12345
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) - (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) - (self.group0()[3] * other.group0()[2])),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) - (self.group0()[3] * other[e4315])),
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorEven> for Plane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       48       64        0
    fn geometric_anti_product(self, other: VersorEven) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group3()[3]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group3()[3])),
                ((self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group3()[1]) + (self.group0()[2] * other.group3()[2]) + (self.group0()[3] * other.group3()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group3()[2])
                    + (self.group0()[2] * other.group3()[1])
                    + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[0] * other.group3()[2]) - (self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group3()[0]) + (self.group0()[3] * other.group0()[1])),
                (-(self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group3()[0]) - (self.group0()[2] * other.group1()[3])
                    + (self.group0()[3] * other.group0()[2])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[3] * other.group3()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[1])
                    + (self.group0()[3] * other.group1()[0])
                    - (self.group0()[3] * other.group3()[0])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[1] * other.group2()[3]) - (self.group0()[2] * other.group2()[0]) + (self.group0()[3] * other.group1()[1])
                    - (self.group0()[3] * other.group3()[1])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[0]) - (self.group0()[2] * other.group2()[3])
                    + (self.group0()[3] * other.group1()[2])
                    - (self.group0()[3] * other.group3()[2])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) - (self.group0()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[3]) + (self.group0()[2] * other.group1()[0])
                    - (self.group0()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group0()[3]) - (self.group0()[3] * other.group0()[2])),
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group2()[1]) + (self.group0()[2] * other.group2()[2]) + (self.group0()[3] * other.group0()[3])
                    - (self.group0()[3] * other.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorOdd> for Plane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       48       64        0
    fn geometric_anti_product(self, other: VersorOdd) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group2()[3]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group2()[3])),
                ((self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group3()[1]) + (self.group0()[2] * other.group3()[2]) - (self.group0()[3] * other.group2()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group3()[2]) + (self.group0()[2] * other.group3()[1])
                    - (self.group0()[3] * other.group0()[0])),
                ((self.group0()[0] * other.group3()[2]) - (self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group3()[0]) - (self.group0()[3] * other.group0()[1])),
                (-(self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group3()[0])
                    - (self.group0()[2] * other.group1()[3])
                    - (self.group0()[3] * other.group0()[2])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[3] * other.group2()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group2()[2])
                    - (self.group0()[2] * other.group2()[1])
                    - (self.group0()[3] * other.group1()[0])
                    - (self.group0()[3] * other.group3()[0])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group3()[3]) + (self.group0()[2] * other.group2()[0])
                    - (self.group0()[3] * other.group1()[1])
                    - (self.group0()[3] * other.group3()[1])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) + (self.group0()[2] * other.group3()[3])
                    - (self.group0()[3] * other.group1()[2])
                    - (self.group0()[3] * other.group3()[2])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group0()[3] * other.group0()[3])
                    - (self.group0()[3] * other.group1()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) - (self.group0()[3] * other.group0()[0])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[3]) + (self.group0()[2] * other.group1()[0])
                    - (self.group0()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group0()[3]) - (self.group0()[3] * other.group0()[2])),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
            ]),
        );
    }
}
impl InfixGeometricAntiProduct for RoundPoint {}
impl GeometricAntiProduct<AntiCircleRotor> for RoundPoint {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       40       55        0
    fn geometric_anti_product(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) + (other.group1()[0] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) + (other.group1()[2] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self[e2]) - (other.group1()[3] * self.group0()[0]) + (other.group2()[0] * self.group0()[3])),
                ((other.group0()[1] * self[e2]) - (other.group1()[3] * self.group0()[1]) + (other.group2()[1] * self.group0()[3])),
                ((other.group0()[2] * self[e2]) - (other.group1()[3] * self.group0()[2]) + (other.group2()[2] * self.group0()[3])),
                ((other.group1()[0] * self.group0()[0]) + (other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group1()[0] * self[e2]) - (other.group2()[1] * self.group0()[2]) + (other.group2()[2] * self.group0()[1])),
                ((other.group1()[1] * self[e2]) + (other.group2()[0] * self.group0()[2]) - (other.group2()[2] * self.group0()[0])),
                ((other.group1()[2] * self[e2]) - (other.group2()[0] * self.group0()[1]) + (other.group2()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) - (other.group1()[3] * self.group0()[3])
                    + (other.group2()[3] * self.group0()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self[e2]) + (other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1]) + (other.group2()[0] * self.group0()[3])
                    - (other.group2()[3] * self.group0()[0])),
                (-(other.group0()[1] * self[e2]) - (other.group1()[0] * self.group0()[2]) + (other.group1()[2] * self.group0()[0]) + (other.group2()[1] * self.group0()[3])
                    - (other.group2()[3] * self.group0()[1])),
                (-(other.group0()[2] * self[e2]) + (other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0]) + (other.group2()[2] * self.group0()[3])
                    - (other.group2()[3] * self.group0()[2])),
                ((other.group1()[3] * self[e2]) - (other.group2()[0] * self.group0()[0]) - (other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2])
                    + (other.group2()[3] * self[e2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDipoleInversion> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       59       75        0
    fn geometric_anti_product(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) + (other.group1()[0] * self.group0()[3]) - (other.group2()[3] * self.group0()[0])
                    + (other.group3()[0] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3])
                    - (other.group2()[3] * self.group0()[1])
                    + (other.group3()[1] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) + (other.group1()[2] * self.group0()[3]) - (other.group2()[3] * self.group0()[2])
                    + (other.group3()[2] * self.group0()[3])),
                ((other.group2()[3] * self[e2]) - (other.group3()[0] * self.group0()[0]) - (other.group3()[1] * self.group0()[1]) - (other.group3()[2] * self.group0()[2])
                    + (other.group3()[3] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self[e2]) + (other.group1()[3] * self.group0()[0]) + (other.group2()[0] * self.group0()[3]) - (other.group3()[1] * self.group0()[2])
                    + (other.group3()[2] * self.group0()[1])),
                ((other.group0()[1] * self[e2]) + (other.group1()[3] * self.group0()[1]) + (other.group2()[1] * self.group0()[3]) + (other.group3()[0] * self.group0()[2])
                    - (other.group3()[2] * self.group0()[0])),
                ((other.group0()[2] * self[e2]) + (other.group1()[3] * self.group0()[2]) + (other.group2()[2] * self.group0()[3]) - (other.group3()[0] * self.group0()[1])
                    + (other.group3()[1] * self.group0()[0])),
                (-(other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2]) + (other.group2()[3] * self[e2])
                    - (other.group3()[3] * self.group0()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((other.group1()[0] * self[e2]) - (other.group2()[1] * self.group0()[2]) + (other.group2()[2] * self.group0()[1]) - (other.group3()[0] * self[e2])
                    + (other.group3()[3] * self.group0()[0])),
                ((other.group1()[1] * self[e2]) + (other.group2()[0] * self.group0()[2]) - (other.group2()[2] * self.group0()[0]) - (other.group3()[1] * self[e2])
                    + (other.group3()[3] * self.group0()[1])),
                ((other.group1()[2] * self[e2]) - (other.group2()[0] * self.group0()[1]) + (other.group2()[1] * self.group0()[0]) - (other.group3()[2] * self[e2])
                    + (other.group3()[3] * self.group0()[2])),
                (-(other.group1()[3] * self[e2]) - (other.group2()[0] * self.group0()[0]) - (other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self[e2]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1]) - (other.group2()[0] * self.group0()[3])),
                ((other.group0()[1] * self[e2]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0]) - (other.group2()[1] * self.group0()[3])),
                ((other.group0()[2] * self[e2]) - (other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0]) - (other.group2()[2] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) + (other.group1()[3] * self.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0       17        0
    fn geometric_anti_product(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                (other.group0()[0] * self[e2]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self[e2] * -1.0)]),
            // e15, e25, e35, e1234
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[1] * self.group0()[3])]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0] * -1.0),
                (other.group0()[1] * self.group0()[1] * -1.0),
                (other.group0()[1] * self.group0()[2] * -1.0),
                (other.group0()[1] * self[e2]),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiFlatPoint> for RoundPoint {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        9       23        0
    fn geometric_anti_product(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[3]) + (other.group0()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group0()[3]) + (other.group0()[3] * self.group0()[2])),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
                (other.group0()[3] * self.group0()[3]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3] * -1.0),
                (other.group0()[1] * self.group0()[3] * -1.0),
                (other.group0()[2] * self.group0()[3] * -1.0),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self[e2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiFlector> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       24       44        0
    fn geometric_anti_product(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group1()[0] * self.group0()[3]),
                (other.group1()[1] * self.group0()[3]),
                (other.group1()[2] * self.group0()[3]),
                (-(other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])
                    + (other.group1()[3] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[3] * self.group0()[0]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[1] * self.group0()[3]) + (other.group0()[3] * self.group0()[1]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[3]) + (other.group0()[3] * self.group0()[2]) - (other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0])),
                (other.group1()[3] * self.group0()[3] * -1.0),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) - (other.group1()[0] * self[e2]) + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) - (other.group1()[1] * self[e2]) + (other.group1()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) - (other.group1()[2] * self[e2]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self[e2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3] * -1.0),
                (other.group0()[1] * self.group0()[3] * -1.0),
                (other.group0()[2] * self.group0()[3] * -1.0),
                (other.group0()[3] * self.group0()[3]),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiLine> for RoundPoint {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       16       30        0
    fn geometric_anti_product(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from([(other.group0()[0] * self.group0()[3]), (other.group0()[1] * self.group0()[3]), (other.group0()[2] * self.group0()[3])]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other.group1()[0] * self.group0()[3]),
                (other.group1()[1] * self.group0()[3]),
                (other.group1()[2] * self.group0()[3]),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self[e2]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[1] * self[e2]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])),
                ((other.group0()[2] * self[e2]) - (other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) + (other.group1()[0] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) + (other.group1()[2] * self.group0()[3])),
                (-(other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiMotor> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       24       40        0
    fn geometric_anti_product(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3]),
                (other.group0()[1] * self.group0()[3]),
                (other.group0()[2] * self.group0()[3]),
                (other.group1()[3] * self.group0()[3]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other.group1()[0] * self.group0()[3]),
                (other.group1()[1] * self.group0()[3]),
                (other.group1()[2] * self.group0()[3]),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) + (other.group1()[3] * self.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self[e2]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1]) + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[1] * self[e2]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0]) + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[2] * self[e2]) - (other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0]) + (other.group1()[3] * self.group0()[2])),
                (other.group0()[3] * self.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) - (other.group0()[3] * self.group0()[0]) + (other.group1()[0] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0]) - (other.group0()[3] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) - (other.group0()[3] * self.group0()[2]) + (other.group1()[2] * self.group0()[3])),
                ((other.group0()[3] * self[e2]) - (other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiPlane> for RoundPoint {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        9       21        0
    fn geometric_anti_product(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from([(other.group0()[0] * self.group0()[3]), (other.group0()[1] * self.group0()[3]), (other.group0()[2] * self.group0()[3])]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
                (other.group0()[3] * self.group0()[3] * -1.0),
            ]),
            // e235, e315, e125, e12345
            Simd32x4::from([
                (-(other.group0()[0] * self[e2]) + (other.group0()[3] * self.group0()[0])),
                (-(other.group0()[1] * self[e2]) + (other.group0()[3] * self.group0()[1])),
                (-(other.group0()[2] * self[e2]) + (other.group0()[3] * self.group0()[2])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])
                    + (other.group0()[3] * self.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiScalar> for RoundPoint {
    type Output = RoundPoint;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        5        0
    fn geometric_anti_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return RoundPoint::from_groups(
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other[e12345]),
                (self.group0()[1] * other[e12345]),
                (self.group0()[2] * other[e12345]),
                (self.group0()[3] * other[e12345]),
            ]),
            // e5
            (other[e12345] * self[e2]),
        );
    }
}
impl GeometricAntiProduct<Circle> for RoundPoint {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       35       50        0
    fn geometric_anti_product(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) + (other.group1()[0] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) + (other.group1()[2] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self[e2]) + (other.group2()[0] * self.group0()[3]) + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[1] * self[e2]) + (other.group2()[1] * self.group0()[3]) + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[2] * self[e2]) + (other.group2()[2] * self.group0()[3]) + (other.group1()[3] * self.group0()[2])),
                (-(other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (-(other.group2()[1] * self.group0()[2]) + (other.group2()[2] * self.group0()[1]) + (other.group1()[0] * self[e2])),
                ((other.group2()[0] * self.group0()[2]) - (other.group2()[2] * self.group0()[0]) + (other.group1()[1] * self[e2])),
                (-(other.group2()[0] * self.group0()[1]) + (other.group2()[1] * self.group0()[0]) + (other.group1()[2] * self[e2])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) + (other.group1()[3] * self.group0()[3])),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                ((other.group0()[0] * self[e2]) - (other.group2()[0] * self.group0()[3]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[1] * self[e2]) - (other.group2()[1] * self.group0()[3]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])),
                ((other.group0()[2] * self[e2]) - (other.group2()[2] * self.group0()[3]) - (other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0])),
                (-(other.group2()[0] * self.group0()[0]) - (other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2]) - (other.group1()[3] * self[e2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<CircleRotor> for RoundPoint {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       40       55        0
    fn geometric_anti_product(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) + (other.group1()[0] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) + (other.group1()[2] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self[e2]) + (other.group1()[3] * self.group0()[0]) + (other.group2()[0] * self.group0()[3])),
                ((other.group0()[1] * self[e2]) + (other.group1()[3] * self.group0()[1]) + (other.group2()[1] * self.group0()[3])),
                ((other.group0()[2] * self[e2]) + (other.group1()[3] * self.group0()[2]) + (other.group2()[2] * self.group0()[3])),
                (-(other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                ((other.group1()[0] * self[e2]) - (other.group2()[1] * self.group0()[2]) + (other.group2()[2] * self.group0()[1])),
                ((other.group1()[1] * self[e2]) + (other.group2()[0] * self.group0()[2]) - (other.group2()[2] * self.group0()[0])),
                ((other.group1()[2] * self[e2]) - (other.group2()[0] * self.group0()[1]) + (other.group2()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[0])
                    + (other.group0()[1] * self.group0()[1])
                    + (other.group0()[2] * self.group0()[2])
                    + (other.group1()[3] * self.group0()[3])
                    + (other.group2()[3] * self.group0()[3])),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                ((other.group0()[0] * self[e2]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1]) - (other.group2()[0] * self.group0()[3])
                    + (other.group2()[3] * self.group0()[0])),
                ((other.group0()[1] * self[e2]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0]) - (other.group2()[1] * self.group0()[3])
                    + (other.group2()[3] * self.group0()[1])),
                ((other.group0()[2] * self[e2]) - (other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0]) - (other.group2()[2] * self.group0()[3])
                    + (other.group2()[3] * self.group0()[2])),
                (-(other.group1()[3] * self[e2]) - (other.group2()[0] * self.group0()[0]) - (other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2])
                    + (other.group2()[3] * self[e2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Dipole> for RoundPoint {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       35       50        0
    fn geometric_anti_product(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) + (other.group1()[0] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) + (other.group1()[2] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self[e2]) + (other.group2()[0] * self.group0()[3]) - (other.group1()[3] * self.group0()[0])),
                ((other.group0()[1] * self[e2]) + (other.group2()[1] * self.group0()[3]) - (other.group1()[3] * self.group0()[1])),
                ((other.group0()[2] * self[e2]) + (other.group2()[2] * self.group0()[3]) - (other.group1()[3] * self.group0()[2])),
                ((other.group1()[0] * self.group0()[0]) + (other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group2()[1] * self.group0()[2]) + (other.group2()[2] * self.group0()[1]) + (other.group1()[0] * self[e2])),
                ((other.group2()[0] * self.group0()[2]) - (other.group2()[2] * self.group0()[0]) + (other.group1()[1] * self[e2])),
                (-(other.group2()[0] * self.group0()[1]) + (other.group2()[1] * self.group0()[0]) + (other.group1()[2] * self[e2])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) - (other.group1()[3] * self.group0()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self[e2]) + (other.group2()[0] * self.group0()[3]) + (other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1])),
                (-(other.group0()[1] * self[e2]) + (other.group2()[1] * self.group0()[3]) - (other.group1()[0] * self.group0()[2]) + (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[2] * self[e2]) + (other.group2()[2] * self.group0()[3]) + (other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0])),
                (-(other.group2()[0] * self.group0()[0]) - (other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2]) + (other.group1()[3] * self[e2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<DipoleInversion> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       59       75        0
    fn geometric_anti_product(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) + (other.group1()[0] * self.group0()[3])
                    - (other.group2()[3] * self.group0()[0])
                    - (other.group3()[0] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3])
                    - (other.group2()[3] * self.group0()[1])
                    - (other.group3()[1] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) + (other.group1()[2] * self.group0()[3])
                    - (other.group2()[3] * self.group0()[2])
                    - (other.group3()[2] * self.group0()[3])),
                ((other.group2()[3] * self[e2])
                    + (other.group3()[0] * self.group0()[0])
                    + (other.group3()[1] * self.group0()[1])
                    + (other.group3()[2] * self.group0()[2])
                    + (other.group3()[3] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self[e2]) - (other.group1()[3] * self.group0()[0]) + (other.group2()[0] * self.group0()[3]) + (other.group3()[1] * self.group0()[2])
                    - (other.group3()[2] * self.group0()[1])),
                ((other.group0()[1] * self[e2]) - (other.group1()[3] * self.group0()[1]) + (other.group2()[1] * self.group0()[3]) - (other.group3()[0] * self.group0()[2])
                    + (other.group3()[2] * self.group0()[0])),
                ((other.group0()[2] * self[e2]) - (other.group1()[3] * self.group0()[2]) + (other.group2()[2] * self.group0()[3]) + (other.group3()[0] * self.group0()[1])
                    - (other.group3()[1] * self.group0()[0])),
                ((other.group1()[0] * self.group0()[0]) + (other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2]) - (other.group2()[3] * self[e2])
                    + (other.group3()[3] * self.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group1()[0] * self[e2]) - (other.group2()[1] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[1])
                    + (other.group3()[0] * self[e2])
                    + (other.group3()[3] * self.group0()[0])),
                ((other.group1()[1] * self[e2]) + (other.group2()[0] * self.group0()[2]) - (other.group2()[2] * self.group0()[0])
                    + (other.group3()[1] * self[e2])
                    + (other.group3()[3] * self.group0()[1])),
                ((other.group1()[2] * self[e2]) - (other.group2()[0] * self.group0()[1])
                    + (other.group2()[1] * self.group0()[0])
                    + (other.group3()[2] * self[e2])
                    + (other.group3()[3] * self.group0()[2])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) - (other.group1()[3] * self.group0()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self[e2]) + (other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1]) + (other.group2()[0] * self.group0()[3])),
                (-(other.group0()[1] * self[e2]) - (other.group1()[0] * self.group0()[2]) + (other.group1()[2] * self.group0()[0]) + (other.group2()[1] * self.group0()[3])),
                (-(other.group0()[2] * self[e2]) + (other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0]) + (other.group2()[2] * self.group0()[3])),
                ((other.group1()[3] * self[e2]) - (other.group2()[0] * self.group0()[0]) - (other.group2()[1] * self.group0()[1]) - (other.group2()[2] * self.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<DualNum> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0       13        0
    fn geometric_anti_product(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                (other.group0()[0] * self[e2]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self[e2])]),
            // e235, e315, e125, e5
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[1] * self[e2])]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                (other.group0()[1] * self.group0()[3]),
            ]),
        );
    }
}
impl GeometricAntiProduct<FlatPoint> for RoundPoint {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        9       21        0
    fn geometric_anti_product(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[3]) - (other.group0()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group0()[3]) - (other.group0()[3] * self.group0()[2])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
                (other.group0()[3] * self.group0()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3]),
                (other.group0()[1] * self.group0()[3]),
                (other.group0()[2] * self.group0()[3]),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]) + (other.group0()[3] * self[e2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Flector> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       24       44        0
    fn geometric_anti_product(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group1()[0] * self.group0()[3] * -1.0),
                (other.group1()[1] * self.group0()[3] * -1.0),
                (other.group1()[2] * self.group0()[3] * -1.0),
                ((other.group1()[0] * self.group0()[0]) + (other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2]) + (other.group1()[3] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[3] * self.group0()[0]) + (other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1])),
                ((other.group0()[1] * self.group0()[3]) - (other.group0()[3] * self.group0()[1]) - (other.group1()[0] * self.group0()[2]) + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[3]) - (other.group0()[3] * self.group0()[2]) + (other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0])),
                (other.group1()[3] * self.group0()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (other.group1()[0] * self[e2]) + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self[e2]) + (other.group1()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (other.group1()[2] * self[e2]) + (other.group1()[3] * self.group0()[2])),
                (other.group0()[3] * self.group0()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3]),
                (other.group0()[1] * self.group0()[3]),
                (other.group0()[2] * self.group0()[3]),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]) + (other.group0()[3] * self[e2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Line> for RoundPoint {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       16       30        0
    fn geometric_anti_product(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from([(other.group0()[0] * self.group0()[3]), (other.group0()[1] * self.group0()[3]), (other.group0()[2] * self.group0()[3])]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other.group1()[0] * self.group0()[3]),
                (other.group1()[1] * self.group0()[3]),
                (other.group1()[2] * self.group0()[3]),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                ((other.group0()[0] * self[e2]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[1] * self[e2]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])),
                ((other.group0()[2] * self[e2]) - (other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0])),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) - (other.group1()[0] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) - (other.group1()[1] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) - (other.group1()[2] * self.group0()[3])),
                (-(other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Motor> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       24       40        0
    fn geometric_anti_product(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[3]),
                (other.group0()[1] * self.group0()[3]),
                (other.group0()[2] * self.group0()[3]),
                (other.group1()[3] * self.group0()[3]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other.group1()[0] * self.group0()[3]),
                (other.group1()[1] * self.group0()[3]),
                (other.group1()[2] * self.group0()[3]),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group1()[3] * self.group0()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((other.group0()[0] * self[e2]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1]) + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[1] * self[e2]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0]) + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[2] * self[e2]) - (other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0]) + (other.group1()[3] * self.group0()[2])),
                ((other.group0()[3] * self[e2]) - (other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (other.group0()[3] * self.group0()[0])
                    - (other.group1()[0] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) + (other.group0()[3] * self.group0()[1]) - (other.group1()[1] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (other.group0()[3] * self.group0()[2])
                    - (other.group1()[2] * self.group0()[3])),
                (other.group0()[3] * self.group0()[3]),
            ]),
        );
    }
}
impl GeometricAntiProduct<MultiVector> for RoundPoint {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      128      160        0
    fn geometric_anti_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((other.group9()[0] * self.group0()[0])
                    + (other.group9()[1] * self.group0()[1])
                    + (other.group9()[2] * self.group0()[2])
                    + (other.group9()[3] * self.group0()[3])
                    + (other[e45] * self[e2])),
                (-(other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])
                    + (other.group1()[3] * self[e2])
                    + (self.group0()[3] * other[e1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[0]) + (other.group7()[0] * self[e2]) - (other.group8()[0] * self.group0()[3]) - (other.group6()[1] * self.group0()[2])
                    + (other.group6()[2] * self.group0()[1])),
                ((other.group0()[1] * self.group0()[1]) + (other.group7()[1] * self[e2]) - (other.group8()[1] * self.group0()[3]) + (other.group6()[0] * self.group0()[2])
                    - (other.group6()[2] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[2]) + (other.group7()[2] * self[e2]) - (other.group8()[2] * self.group0()[3]) - (other.group6()[0] * self.group0()[1])
                    + (other.group6()[1] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[3])
                    + (other.group7()[0] * self.group0()[0])
                    + (other.group7()[1] * self.group0()[1])
                    + (other.group7()[2] * self.group0()[2])
                    + (other.group6()[3] * self.group0()[3])),
            ]),
            // e5
            ((other.group0()[1] * self[e2])
                - (other.group8()[0] * self.group0()[0])
                - (other.group8()[1] * self.group0()[1])
                - (other.group8()[2] * self.group0()[2])
                - (other.group6()[3] * self[e2])),
            // e15, e25, e35, e45
            Simd32x4::from([
                ((other.group5()[0] * self[e2]) - (other.group3()[1] * self.group0()[2])
                    + (other.group3()[2] * self.group0()[1])
                    + (other.group9()[0] * self[e2])
                    + (other.group9()[3] * self.group0()[0])),
                ((other.group5()[1] * self[e2]) + (other.group3()[0] * self.group0()[2]) - (other.group3()[2] * self.group0()[0])
                    + (other.group9()[1] * self[e2])
                    + (other.group9()[3] * self.group0()[1])),
                ((other.group5()[2] * self[e2]) - (other.group3()[0] * self.group0()[1])
                    + (other.group3()[1] * self.group0()[0])
                    + (other.group9()[2] * self[e2])
                    + (other.group9()[3] * self.group0()[2])),
                ((other.group5()[0] * self.group0()[0]) + (other.group5()[1] * self.group0()[1]) + (other.group5()[2] * self.group0()[2]) + (other.group9()[3] * self.group0()[3])
                    - (other[e45] * self[e2])),
            ]),
            // e41, e42, e43
            Simd32x3::from([
                ((other.group4()[1] * self.group0()[2]) - (other.group4()[2] * self.group0()[1]) + (other.group5()[0] * self.group0()[3])
                    - (other.group9()[0] * self.group0()[3])
                    - (self.group0()[0] * other[e45])),
                (-(other.group4()[0] * self.group0()[2]) + (other.group4()[2] * self.group0()[0]) + (other.group5()[1] * self.group0()[3])
                    - (other.group9()[1] * self.group0()[3])
                    - (self.group0()[1] * other[e45])),
                ((other.group4()[0] * self.group0()[1]) - (other.group4()[1] * self.group0()[0]) + (other.group5()[2] * self.group0()[3])
                    - (other.group9()[2] * self.group0()[3])
                    - (self.group0()[2] * other[e45])),
            ]),
            // e23, e31, e12
            Simd32x3::from([
                ((other.group4()[0] * self[e2]) + (other.group3()[0] * self.group0()[3]) - (other.group3()[3] * self.group0()[0]) + (other.group9()[1] * self.group0()[2])
                    - (other.group9()[2] * self.group0()[1])),
                ((other.group4()[1] * self[e2]) + (other.group3()[1] * self.group0()[3]) - (other.group3()[3] * self.group0()[1]) - (other.group9()[0] * self.group0()[2])
                    + (other.group9()[2] * self.group0()[0])),
                ((other.group4()[2] * self[e2]) + (other.group3()[2] * self.group0()[3]) - (other.group3()[3] * self.group0()[2]) + (other.group9()[0] * self.group0()[1])
                    - (other.group9()[1] * self.group0()[0])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group7()[0] * self[e2]) + (other.group8()[0] * self.group0()[3]) - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])
                    + (other.group6()[3] * self.group0()[0])),
                ((other.group7()[1] * self[e2]) + (other.group8()[1] * self.group0()[3]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])
                    + (other.group6()[3] * self.group0()[1])),
                ((other.group7()[2] * self[e2]) + (other.group8()[2] * self.group0()[3]) - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group6()[3] * self.group0()[2])),
                ((other.group1()[3] * self[e2])
                    - (other.group6()[0] * self.group0()[0])
                    - (other.group6()[1] * self.group0()[1])
                    - (other.group6()[2] * self.group0()[2])
                    - (self.group0()[3] * other[e1])),
            ]),
            // e423, e431, e412
            Simd32x3::from([
                ((other.group7()[1] * self.group0()[2]) - (other.group7()[2] * self.group0()[1]) + (other.group1()[0] * self.group0()[3]) - (other.group1()[3] * self.group0()[0])
                    + (other.group6()[0] * self.group0()[3])),
                (-(other.group7()[0] * self.group0()[2]) + (other.group7()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3])
                    - (other.group1()[3] * self.group0()[1])
                    + (other.group6()[1] * self.group0()[3])),
                ((other.group7()[0] * self.group0()[1]) - (other.group7()[1] * self.group0()[0]) + (other.group1()[2] * self.group0()[3]) - (other.group1()[3] * self.group0()[2])
                    + (other.group6()[2] * self.group0()[3])),
            ]),
            // e235, e315, e125
            Simd32x3::from([
                (-(other.group8()[1] * self.group0()[2]) + (other.group8()[2] * self.group0()[1]) - (other.group1()[0] * self[e2])
                    + (other.group6()[0] * self[e2])
                    + (self.group0()[0] * other[e1])),
                ((other.group8()[0] * self.group0()[2]) - (other.group8()[2] * self.group0()[0]) - (other.group1()[1] * self[e2])
                    + (other.group6()[1] * self[e2])
                    + (self.group0()[1] * other[e1])),
                (-(other.group8()[0] * self.group0()[1]) + (other.group8()[1] * self.group0()[0]) - (other.group1()[2] * self[e2])
                    + (other.group6()[2] * self[e2])
                    + (self.group0()[2] * other[e1])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[0]) - (other.group4()[0] * self[e2]) + (other.group5()[1] * self.group0()[2]) - (other.group5()[2] * self.group0()[1])
                    + (other.group3()[0] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[1]) - (other.group4()[1] * self[e2]) - (other.group5()[0] * self.group0()[2])
                    + (other.group5()[2] * self.group0()[0])
                    + (other.group3()[1] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group4()[2] * self[e2]) + (other.group5()[0] * self.group0()[1]) - (other.group5()[1] * self.group0()[0])
                    + (other.group3()[2] * self.group0()[3])),
                ((other.group0()[0] * self[e2]) - (other.group3()[0] * self.group0()[0]) - (other.group3()[1] * self.group0()[1]) - (other.group3()[2] * self.group0()[2])
                    + (other.group3()[3] * self[e2])),
            ]),
            // e1234
            ((other.group0()[0] * self.group0()[3]) + (other.group4()[0] * self.group0()[0]) + (other.group4()[1] * self.group0()[1]) + (other.group4()[2] * self.group0()[2])
                - (other.group3()[3] * self.group0()[3])),
        );
    }
}
impl GeometricAntiProduct<Plane> for RoundPoint {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        9       23        0
    fn geometric_anti_product(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from([
                (other.group0()[0] * self.group0()[3] * -1.0),
                (other.group0()[1] * self.group0()[3] * -1.0),
                (other.group0()[2] * self.group0()[3] * -1.0),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
                (other.group0()[3] * self.group0()[3]),
            ]),
            // e15, e25, e35, scalar
            Simd32x4::from([
                ((other.group0()[0] * self[e2]) + (other.group0()[3] * self.group0()[0])),
                ((other.group0()[1] * self[e2]) + (other.group0()[3] * self.group0()[1])),
                ((other.group0()[2] * self[e2]) + (other.group0()[3] * self.group0()[2])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) + (other.group0()[3] * self.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<RoundPoint> for RoundPoint {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       14       25        0
    fn geometric_anti_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[3]) - (other.group0()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group0()[3]) - (other.group0()[3] * self.group0()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[3] * self[e2]) - (self.group0()[3] * other[e2])),
            ]),
            // e235, e315, e125, e12345
            Simd32x4::from([
                (-(other.group0()[0] * self[e2]) + (self.group0()[0] * other[e2])),
                (-(other.group0()[1] * self[e2]) + (self.group0()[1] * other[e2])),
                (-(other.group0()[2] * self[e2]) + (self.group0()[2] * other[e2])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])
                    + (other.group0()[3] * self[e2])
                    + (self.group0()[3] * other[e2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Scalar> for RoundPoint {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        8        0
    fn geometric_anti_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other[scalar] * -1.0),
                (self.group0()[1] * other[scalar] * -1.0),
                (self.group0()[2] * other[scalar] * -1.0),
                (self[e2] * other[scalar]),
            ]),
            // e1234
            (self.group0()[3] * other[scalar]),
        );
    }
}
impl GeometricAntiProduct<Sphere> for RoundPoint {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       14       25        0
    fn geometric_anti_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from([
                (-(self.group0()[0] * other[e4315]) - (self.group0()[3] * other.group0()[0])),
                (-(self.group0()[1] * other[e4315]) - (self.group0()[3] * other.group0()[1])),
                (-(self.group0()[2] * other[e4315]) - (self.group0()[3] * other.group0()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[3] * other.group0()[3]) - (self[e2] * other[e4315])),
            ]),
            // e15, e25, e35, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (other.group0()[0] * self[e2])),
                ((self.group0()[1] * other.group0()[3]) + (other.group0()[1] * self[e2])),
                ((self.group0()[2] * other.group0()[3]) + (other.group0()[2] * self[e2])),
                ((self.group0()[0] * other.group0()[0])
                    + (self.group0()[1] * other.group0()[1])
                    + (self.group0()[2] * other.group0()[2])
                    + (self.group0()[3] * other.group0()[3])
                    + (self[e2] * other[e4315])),
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorEven> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       64       80        0
    fn geometric_anti_product(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[0] * other.group3()[3]) - (self.group0()[1] * other.group0()[2])
                    + (self.group0()[2] * other.group0()[1])
                    + (self.group0()[3] * other.group1()[0])
                    + (self.group0()[3] * other.group3()[0])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group3()[3]) - (self.group0()[2] * other.group0()[0])
                    + (self.group0()[3] * other.group1()[1])
                    + (self.group0()[3] * other.group3()[1])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group3()[3])
                    + (self.group0()[3] * other.group1()[2])
                    + (self.group0()[3] * other.group3()[2])),
                (-(self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group3()[1]) - (self.group0()[2] * other.group3()[2])
                    + (self.group0()[3] * other.group2()[3])
                    + (other.group3()[3] * self[e2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group3()[2]) - (self.group0()[2] * other.group3()[1])
                    + (self.group0()[3] * other.group2()[0])
                    + (other.group0()[0] * self[e2])),
                (-(self.group0()[0] * other.group3()[2])
                    + (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group3()[0])
                    + (self.group0()[3] * other.group2()[1])
                    + (other.group0()[1] * self[e2])),
                ((self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group1()[3])
                    + (self.group0()[3] * other.group2()[2])
                    + (other.group0()[2] * self[e2])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[3] * other.group2()[3])
                    + (other.group3()[3] * self[e2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1]) + (other.group1()[0] * self[e2])
                    - (other.group3()[0] * self[e2])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group2()[3]) + (self.group0()[2] * other.group2()[0]) + (other.group1()[1] * self[e2])
                    - (other.group3()[1] * self[e2])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) + (self.group0()[2] * other.group2()[3]) + (other.group1()[2] * self[e2])
                    - (other.group3()[2] * self[e2])),
                (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2]) + (other.group0()[3] * self[e2])
                    - (other.group1()[3] * self[e2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) - (self.group0()[3] * other.group2()[0])
                    + (other.group0()[0] * self[e2])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[3]) + (self.group0()[2] * other.group1()[0])
                    - (self.group0()[3] * other.group2()[1])
                    + (other.group0()[1] * self[e2])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group0()[3]) - (self.group0()[3] * other.group2()[2])
                    + (other.group0()[2] * self[e2])),
                ((self.group0()[0] * other.group0()[0])
                    + (self.group0()[1] * other.group0()[1])
                    + (self.group0()[2] * other.group0()[2])
                    + (self.group0()[3] * other.group0()[3])
                    + (self.group0()[3] * other.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorOdd> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       64       80        0
    fn geometric_anti_product(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group0()[2])
                    + (self.group0()[2] * other.group0()[1])
                    + (self.group0()[3] * other.group1()[0])
                    - (self.group0()[3] * other.group3()[0])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group2()[3]) - (self.group0()[2] * other.group0()[0]) + (self.group0()[3] * other.group1()[1])
                    - (self.group0()[3] * other.group3()[1])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group2()[3])
                    + (self.group0()[3] * other.group1()[2])
                    - (self.group0()[3] * other.group3()[2])),
                ((self.group0()[0] * other.group3()[0])
                    + (self.group0()[1] * other.group3()[1])
                    + (self.group0()[2] * other.group3()[2])
                    + (self.group0()[3] * other.group3()[3])
                    + (other.group2()[3] * self[e2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group3()[2])
                    + (self.group0()[2] * other.group3()[1])
                    + (self.group0()[3] * other.group2()[0])
                    + (other.group0()[0] * self[e2])),
                ((self.group0()[0] * other.group3()[2]) - (self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group3()[0])
                    + (self.group0()[3] * other.group2()[1])
                    + (other.group0()[1] * self[e2])),
                (-(self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group3()[0]) - (self.group0()[2] * other.group1()[3])
                    + (self.group0()[3] * other.group2()[2])
                    + (other.group0()[2] * self[e2])),
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1]) + (self.group0()[2] * other.group1()[2]) + (self.group0()[3] * other.group3()[3])
                    - (other.group2()[3] * self[e2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])
                    + (other.group1()[0] * self[e2])
                    + (other.group3()[0] * self[e2])),
                (-(self.group0()[0] * other.group2()[2])
                    + (self.group0()[1] * other.group3()[3])
                    + (self.group0()[2] * other.group2()[0])
                    + (other.group1()[1] * self[e2])
                    + (other.group3()[1] * self[e2])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0])
                    + (self.group0()[2] * other.group3()[3])
                    + (other.group1()[2] * self[e2])
                    + (other.group3()[2] * self[e2])),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])
                    - (self.group0()[3] * other.group1()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[1])
                    + (self.group0()[3] * other.group2()[0])
                    - (other.group0()[0] * self[e2])),
                ((self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group0()[3]) - (self.group0()[2] * other.group1()[0]) + (self.group0()[3] * other.group2()[1])
                    - (other.group0()[1] * self[e2])),
                (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group0()[3])
                    + (self.group0()[3] * other.group2()[2])
                    - (other.group0()[2] * self[e2])),
                (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])
                    + (other.group0()[3] * self[e2])
                    + (other.group1()[3] * self[e2])),
            ]),
        );
    }
}
impl InfixGeometricAntiProduct for Scalar {}
impl GeometricAntiProduct<AntiCircleRotor> for Scalar {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0       21        0
    fn geometric_anti_product(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                (other.group0()[0] * self[scalar] * -1.0),
                (other.group0()[1] * self[scalar] * -1.0),
                (other.group0()[2] * self[scalar] * -1.0),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other.group1()[0] * self[scalar] * -1.0),
                (other.group1()[1] * self[scalar] * -1.0),
                (other.group1()[2] * self[scalar] * -1.0),
                (other.group1()[3] * self[scalar]),
            ]),
            // e235, e315, e125, e12345
            Simd32x4::from([
                (other.group2()[0] * self[scalar] * -1.0),
                (other.group2()[1] * self[scalar] * -1.0),
                (other.group2()[2] * self[scalar] * -1.0),
                (other.group2()[3] * self[scalar] * -1.0),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDipoleInversion> for Scalar {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0       19        0
    fn geometric_anti_product(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from([(other.group0()[0] * self[scalar]), (other.group0()[1] * self[scalar]), (other.group0()[2] * self[scalar])]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other.group1()[0] * self[scalar]),
                (other.group1()[1] * self[scalar]),
                (other.group1()[2] * self[scalar]),
                (other.group1()[3] * self[scalar] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group2()[0] * self[scalar]),
                (other.group2()[1] * self[scalar]),
                (other.group2()[2] * self[scalar]),
                (other.group2()[3] * self[scalar]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group3()[0] * self[scalar] * -1.0),
                (other.group3()[1] * self[scalar] * -1.0),
                (other.group3()[2] * self[scalar] * -1.0),
                (other.group3()[3] * self[scalar]),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum> for Scalar {
    type Output = DualNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        4        0
    fn geometric_anti_product(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return DualNum::from_groups(
            // e4, e12345
            Simd32x2::from([(other.group0()[0] * self[scalar] * -1.0), (other.group0()[1] * self[scalar] * -1.0)]),
        );
    }
}
impl GeometricAntiProduct<AntiFlatPoint> for Scalar {
    type Output = FlatPoint;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        5        0
    fn geometric_anti_product(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return FlatPoint::from_groups(/* e15, e25, e35, e45 */ Simd32x4::from([
            (other.group0()[0] * self[scalar]),
            (other.group0()[1] * self[scalar]),
            (other.group0()[2] * self[scalar]),
            (other.group0()[3] * self[scalar] * -1.0),
        ]));
    }
}
impl GeometricAntiProduct<AntiFlector> for Scalar {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0       12        0
    fn geometric_anti_product(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (other.group0()[0] * self[scalar]),
                (other.group0()[1] * self[scalar]),
                (other.group0()[2] * self[scalar]),
                (other.group0()[3] * self[scalar] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group1()[0] * self[scalar] * -1.0),
                (other.group1()[1] * self[scalar] * -1.0),
                (other.group1()[2] * self[scalar] * -1.0),
                (other.group1()[3] * self[scalar]),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiLine> for Scalar {
    type Output = Line;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0       12        0
    fn geometric_anti_product(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return Line::from_groups(
            // e415, e425, e435
            Simd32x3::from([
                (other.group0()[0] * self[scalar] * -1.0),
                (other.group0()[1] * self[scalar] * -1.0),
                (other.group0()[2] * self[scalar] * -1.0),
            ]),
            // e235, e315, e125
            Simd32x3::from([
                (other.group1()[0] * self[scalar] * -1.0),
                (other.group1()[1] * self[scalar] * -1.0),
                (other.group1()[2] * self[scalar] * -1.0),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiMotor> for Scalar {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0       16        0
    fn geometric_anti_product(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (other.group0()[0] * self[scalar] * -1.0),
                (other.group0()[1] * self[scalar] * -1.0),
                (other.group0()[2] * self[scalar] * -1.0),
                (other.group0()[3] * self[scalar] * -1.0),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other.group1()[0] * self[scalar] * -1.0),
                (other.group1()[1] * self[scalar] * -1.0),
                (other.group1()[2] * self[scalar] * -1.0),
                (other.group1()[3] * self[scalar] * -1.0),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiPlane> for Scalar {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        7        0
    fn geometric_anti_product(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (other.group0()[0] * self[scalar] * -1.0),
            (other.group0()[1] * self[scalar] * -1.0),
            (other.group0()[2] * self[scalar] * -1.0),
            (other.group0()[3] * self[scalar]),
        ]));
    }
}
impl GeometricAntiProduct<AntiScalar> for Scalar {
    type Output = Scalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        1        0
    fn geometric_anti_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (other[e12345] * self[scalar]));
    }
}
impl GeometricAntiProduct<Circle> for Scalar {
    type Output = Dipole;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0       11        0
    fn geometric_anti_product(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from([(other.group0()[0] * self[scalar]), (other.group0()[1] * self[scalar]), (other.group0()[2] * self[scalar])]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other.group1()[0] * self[scalar]),
                (other.group1()[1] * self[scalar]),
                (other.group1()[2] * self[scalar]),
                (other.group1()[3] * self[scalar] * -1.0),
            ]),
            // e15, e25, e35
            Simd32x3::from([(other.group2()[0] * self[scalar]), (other.group2()[1] * self[scalar]), (other.group2()[2] * self[scalar])]),
        );
    }
}
impl GeometricAntiProduct<CircleRotor> for Scalar {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0       12        0
    fn geometric_anti_product(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from([(other.group0()[0] * self[scalar]), (other.group0()[1] * self[scalar]), (other.group0()[2] * self[scalar])]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other.group1()[0] * self[scalar]),
                (other.group1()[1] * self[scalar]),
                (other.group1()[2] * self[scalar]),
                (other.group1()[3] * self[scalar] * -1.0),
            ]),
            // e15, e25, e35, scalar
            Simd32x4::from([
                (other.group2()[0] * self[scalar]),
                (other.group2()[1] * self[scalar]),
                (other.group2()[2] * self[scalar]),
                (other.group2()[3] * self[scalar]),
            ]),
        );
    }
}
impl GeometricAntiProduct<Dipole> for Scalar {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0       19        0
    fn geometric_anti_product(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return Circle::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                (other.group0()[0] * self[scalar] * -1.0),
                (other.group0()[1] * self[scalar] * -1.0),
                (other.group0()[2] * self[scalar] * -1.0),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other.group1()[0] * self[scalar] * -1.0),
                (other.group1()[1] * self[scalar] * -1.0),
                (other.group1()[2] * self[scalar] * -1.0),
                (other.group1()[3] * self[scalar]),
            ]),
            // e235, e315, e125
            Simd32x3::from([
                (other.group2()[0] * self[scalar] * -1.0),
                (other.group2()[1] * self[scalar] * -1.0),
                (other.group2()[2] * self[scalar] * -1.0),
            ]),
        );
    }
}
impl GeometricAntiProduct<DipoleInversion> for Scalar {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0       26        0
    fn geometric_anti_product(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                (other.group0()[0] * self[scalar] * -1.0),
                (other.group0()[1] * self[scalar] * -1.0),
                (other.group0()[2] * self[scalar] * -1.0),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other.group1()[0] * self[scalar] * -1.0),
                (other.group1()[1] * self[scalar] * -1.0),
                (other.group1()[2] * self[scalar] * -1.0),
                (other.group1()[3] * self[scalar]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (other.group2()[0] * self[scalar] * -1.0),
                (other.group2()[1] * self[scalar] * -1.0),
                (other.group2()[2] * self[scalar] * -1.0),
                (other.group2()[3] * self[scalar] * -1.0),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group3()[0] * self[scalar]),
                (other.group3()[1] * self[scalar]),
                (other.group3()[2] * self[scalar]),
                (other.group3()[3] * self[scalar] * -1.0),
            ]),
        );
    }
}
impl GeometricAntiProduct<DualNum> for Scalar {
    type Output = AntiDualNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn geometric_anti_product(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return AntiDualNum::from_groups(/* e1234, scalar */ Simd32x2::from([(other.group0()[0] * self[scalar]), (other.group0()[1] * self[scalar])]));
    }
}
impl GeometricAntiProduct<FlatPoint> for Scalar {
    type Output = AntiFlatPoint;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        7        0
    fn geometric_anti_product(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiFlatPoint::from_groups(/* e235, e315, e125, e321 */ Simd32x4::from([
            (other.group0()[0] * self[scalar] * -1.0),
            (other.group0()[1] * self[scalar] * -1.0),
            (other.group0()[2] * self[scalar] * -1.0),
            (other.group0()[3] * self[scalar]),
        ]));
    }
}
impl GeometricAntiProduct<Flector> for Scalar {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0       12        0
    fn geometric_anti_product(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (other.group0()[0] * self[scalar] * -1.0),
                (other.group0()[1] * self[scalar] * -1.0),
                (other.group0()[2] * self[scalar] * -1.0),
                (other.group0()[3] * self[scalar]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group1()[0] * self[scalar]),
                (other.group1()[1] * self[scalar]),
                (other.group1()[2] * self[scalar]),
                (other.group1()[3] * self[scalar] * -1.0),
            ]),
        );
    }
}
impl GeometricAntiProduct<Line> for Scalar {
    type Output = AntiLine;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        6        0
    fn geometric_anti_product(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from([(other.group0()[0] * self[scalar]), (other.group0()[1] * self[scalar]), (other.group0()[2] * self[scalar])]),
            // e15, e25, e35
            Simd32x3::from([(other.group1()[0] * self[scalar]), (other.group1()[1] * self[scalar]), (other.group1()[2] * self[scalar])]),
        );
    }
}
impl GeometricAntiProduct<Motor> for Scalar {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        8        0
    fn geometric_anti_product(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (other.group0()[0] * self[scalar]),
                (other.group0()[1] * self[scalar]),
                (other.group0()[2] * self[scalar]),
                (other.group0()[3] * self[scalar]),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (other.group1()[0] * self[scalar]),
                (other.group1()[1] * self[scalar]),
                (other.group1()[2] * self[scalar]),
                (other.group1()[3] * self[scalar]),
            ]),
        );
    }
}
impl GeometricAntiProduct<MultiVector> for Scalar {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0       48        0
    fn geometric_anti_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([(other.group0()[1] * self[scalar]), (other.group0()[0] * self[scalar] * -1.0)]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group9()[0] * self[scalar]),
                (other.group9()[1] * self[scalar]),
                (other.group9()[2] * self[scalar]),
                (other[e45] * self[scalar] * -1.0),
            ]),
            // e5
            (other.group9()[3] * self[scalar] * -1.0),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other.group8()[0] * self[scalar]),
                (other.group8()[1] * self[scalar]),
                (other.group8()[2] * self[scalar]),
                (other.group6()[3] * self[scalar] * -1.0),
            ]),
            // e41, e42, e43
            Simd32x3::from([(other.group7()[0] * self[scalar]), (other.group7()[1] * self[scalar]), (other.group7()[2] * self[scalar])]),
            // e23, e31, e12
            Simd32x3::from([(other.group6()[0] * self[scalar]), (other.group6()[1] * self[scalar]), (other.group6()[2] * self[scalar])]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other.group5()[0] * self[scalar] * -1.0),
                (other.group5()[1] * self[scalar] * -1.0),
                (other.group5()[2] * self[scalar] * -1.0),
                (other.group3()[3] * self[scalar]),
            ]),
            // e423, e431, e412
            Simd32x3::from([
                (other.group4()[0] * self[scalar] * -1.0),
                (other.group4()[1] * self[scalar] * -1.0),
                (other.group4()[2] * self[scalar] * -1.0),
            ]),
            // e235, e315, e125
            Simd32x3::from([
                (other.group3()[0] * self[scalar] * -1.0),
                (other.group3()[1] * self[scalar] * -1.0),
                (other.group3()[2] * self[scalar] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group1()[0] * self[scalar] * -1.0),
                (other.group1()[1] * self[scalar] * -1.0),
                (other.group1()[2] * self[scalar] * -1.0),
                (other[e1] * self[scalar]),
            ]),
            // e1234
            (other.group1()[3] * self[scalar]),
        );
    }
}
impl GeometricAntiProduct<Plane> for Scalar {
    type Output = AntiPlane;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        5        0
    fn geometric_anti_product(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from([
            (other.group0()[0] * self[scalar]),
            (other.group0()[1] * self[scalar]),
            (other.group0()[2] * self[scalar]),
            (other.group0()[3] * self[scalar] * -1.0),
        ]));
    }
}
impl GeometricAntiProduct<RoundPoint> for Scalar {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        8        0
    fn geometric_anti_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self[scalar] * -1.0),
                (other.group0()[1] * self[scalar] * -1.0),
                (other.group0()[2] * self[scalar] * -1.0),
                (other[e2] * self[scalar]),
            ]),
            // e1234
            (other.group0()[3] * self[scalar]),
        );
    }
}
impl GeometricAntiProduct<Scalar> for Scalar {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn geometric_anti_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (other[scalar] * self[scalar] * -1.0));
    }
}
impl GeometricAntiProduct<Sphere> for Scalar {
    type Output = RoundPoint;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        7        0
    fn geometric_anti_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return RoundPoint::from_groups(
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[0] * self[scalar]),
                (other.group0()[1] * self[scalar]),
                (other.group0()[2] * self[scalar]),
                (self[scalar] * other[e4315] * -1.0),
            ]),
            // e5
            (other.group0()[3] * self[scalar] * -1.0),
        );
    }
}
impl GeometricAntiProduct<VersorEven> for Scalar {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0       20        0
    fn geometric_anti_product(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self[scalar]),
                (other.group0()[1] * self[scalar]),
                (other.group0()[2] * self[scalar]),
                (other.group0()[3] * self[scalar]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other.group1()[0] * self[scalar]),
                (other.group1()[1] * self[scalar]),
                (other.group1()[2] * self[scalar]),
                (other.group1()[3] * self[scalar] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group2()[0] * self[scalar]),
                (other.group2()[1] * self[scalar]),
                (other.group2()[2] * self[scalar]),
                (other.group3()[3] * self[scalar]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group3()[0] * self[scalar] * -1.0),
                (other.group3()[1] * self[scalar] * -1.0),
                (other.group3()[2] * self[scalar] * -1.0),
                (other.group2()[3] * self[scalar]),
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorOdd> for Scalar {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0       28        0
    fn geometric_anti_product(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self[scalar] * -1.0),
                (other.group0()[1] * self[scalar] * -1.0),
                (other.group0()[2] * self[scalar] * -1.0),
                (other.group0()[3] * self[scalar] * -1.0),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other.group1()[0] * self[scalar] * -1.0),
                (other.group1()[1] * self[scalar] * -1.0),
                (other.group1()[2] * self[scalar] * -1.0),
                (other.group1()[3] * self[scalar]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other.group2()[0] * self[scalar] * -1.0),
                (other.group2()[1] * self[scalar] * -1.0),
                (other.group2()[2] * self[scalar] * -1.0),
                (other.group3()[3] * self[scalar] * -1.0),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group3()[0] * self[scalar]),
                (other.group3()[1] * self[scalar]),
                (other.group3()[2] * self[scalar]),
                (other.group2()[3] * self[scalar] * -1.0),
            ]),
        );
    }
}
impl InfixGeometricAntiProduct for Sphere {}
impl GeometricAntiProduct<AntiCircleRotor> for Sphere {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       40       55        0
    fn geometric_anti_product(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) - (other.group1()[0] * self[e4315])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0]) - (other.group1()[1] * self[e4315])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) - (other.group1()[2] * self[e4315])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group1()[3] * self.group0()[0]) - (other.group2()[0] * self[e4315])),
                (-(other.group0()[1] * self.group0()[3]) - (other.group1()[3] * self.group0()[1]) - (other.group2()[1] * self[e4315])),
                (-(other.group0()[2] * self.group0()[3]) - (other.group1()[3] * self.group0()[2]) - (other.group2()[2] * self[e4315])),
                (-(other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (-(other.group1()[0] * self.group0()[3]) - (other.group2()[1] * self.group0()[2]) + (other.group2()[2] * self.group0()[1])),
                (-(other.group1()[1] * self.group0()[3]) + (other.group2()[0] * self.group0()[2]) - (other.group2()[2] * self.group0()[0])),
                (-(other.group1()[2] * self.group0()[3]) - (other.group2()[0] * self.group0()[1]) + (other.group2()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) + (other.group1()[3] * self[e4315])
                    - (other.group2()[3] * self[e4315])),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])
                    + (other.group2()[0] * self[e4315])
                    + (other.group2()[3] * self.group0()[0])),
                (-(other.group0()[1] * self.group0()[3]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])
                    + (other.group2()[1] * self[e4315])
                    + (other.group2()[3] * self.group0()[1])),
                (-(other.group0()[2] * self.group0()[3]) - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group2()[2] * self[e4315])
                    + (other.group2()[3] * self.group0()[2])),
                (-(other.group1()[3] * self.group0()[3])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    - (other.group2()[3] * self.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDipoleInversion> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       59       75        0
    fn geometric_anti_product(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2])
                    + (other.group0()[2] * self.group0()[1])
                    + (other.group1()[0] * self[e4315])
                    + (other.group2()[3] * self.group0()[0])
                    + (other.group3()[0] * self[e4315])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])
                    + (other.group1()[1] * self[e4315])
                    + (other.group2()[3] * self.group0()[1])
                    + (other.group3()[1] * self[e4315])),
                (-(other.group0()[0] * self.group0()[1])
                    + (other.group0()[1] * self.group0()[0])
                    + (other.group1()[2] * self[e4315])
                    + (other.group2()[3] * self.group0()[2])
                    + (other.group3()[2] * self[e4315])),
                ((other.group2()[3] * self.group0()[3])
                    + (other.group3()[0] * self.group0()[0])
                    + (other.group3()[1] * self.group0()[1])
                    + (other.group3()[2] * self.group0()[2])
                    + (other.group3()[3] * self[e4315])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group1()[3] * self.group0()[0]) + (other.group2()[0] * self[e4315]) + (other.group3()[1] * self.group0()[2])
                    - (other.group3()[2] * self.group0()[1])),
                ((other.group0()[1] * self.group0()[3]) - (other.group1()[3] * self.group0()[1]) + (other.group2()[1] * self[e4315]) - (other.group3()[0] * self.group0()[2])
                    + (other.group3()[2] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[3]) - (other.group1()[3] * self.group0()[2]) + (other.group2()[2] * self[e4315]) + (other.group3()[0] * self.group0()[1])
                    - (other.group3()[1] * self.group0()[0])),
                (-(other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])
                    - (other.group2()[3] * self.group0()[3])
                    + (other.group3()[3] * self[e4315])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group1()[0] * self.group0()[3]) + (other.group2()[1] * self.group0()[2])
                    - (other.group2()[2] * self.group0()[1])
                    - (other.group3()[0] * self.group0()[3])
                    - (other.group3()[3] * self.group0()[0])),
                ((other.group1()[1] * self.group0()[3]) - (other.group2()[0] * self.group0()[2]) + (other.group2()[2] * self.group0()[0])
                    - (other.group3()[1] * self.group0()[3])
                    - (other.group3()[3] * self.group0()[1])),
                ((other.group1()[2] * self.group0()[3]) + (other.group2()[0] * self.group0()[1])
                    - (other.group2()[1] * self.group0()[0])
                    - (other.group3()[2] * self.group0()[3])
                    - (other.group3()[3] * self.group0()[2])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]) + (other.group1()[3] * self[e4315])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1]) + (other.group2()[0] * self[e4315])),
                (-(other.group0()[1] * self.group0()[3]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0]) + (other.group2()[1] * self[e4315])),
                (-(other.group0()[2] * self.group0()[3]) - (other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0]) + (other.group2()[2] * self[e4315])),
                (-(other.group1()[3] * self.group0()[3])
                    + (other.group2()[0] * self.group0()[0])
                    + (other.group2()[1] * self.group0()[1])
                    + (other.group2()[2] * self.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0       17        0
    fn geometric_anti_product(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0] * -1.0),
                (other.group0()[0] * self.group0()[1] * -1.0),
                (other.group0()[0] * self.group0()[2] * -1.0),
                (other.group0()[0] * self.group0()[3] * -1.0),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group0()[3] * -1.0)]),
            // e235, e315, e125, e5
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[1] * self.group0()[3] * -1.0)]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                (other.group0()[1] * self[e4315] * -1.0),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiFlatPoint> for Sphere {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        9       20        0
    fn geometric_anti_product(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self[e4315]) - (other.group0()[3] * self.group0()[0])),
                ((other.group0()[1] * self[e4315]) - (other.group0()[3] * self.group0()[1])),
                ((other.group0()[2] * self[e4315]) - (other.group0()[3] * self.group0()[2])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
                (other.group0()[3] * self[e4315]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self[e4315]),
                (other.group0()[1] * self[e4315]),
                (other.group0()[2] * self[e4315]),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiFlector> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       24       40        0
    fn geometric_anti_product(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group1()[0] * self[e4315]),
                (other.group1()[1] * self[e4315]),
                (other.group1()[2] * self[e4315]),
                ((other.group1()[0] * self.group0()[0]) + (other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2]) + (other.group1()[3] * self[e4315])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self[e4315]) - (other.group0()[3] * self.group0()[0]) + (other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1])),
                ((other.group0()[1] * self[e4315]) - (other.group0()[3] * self.group0()[1]) - (other.group1()[0] * self.group0()[2]) + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[2] * self[e4315]) - (other.group0()[3] * self.group0()[2]) + (other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0])),
                (other.group1()[3] * self[e4315]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) - (other.group1()[0] * self.group0()[3]) - (other.group1()[3] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[3])
                    - (other.group1()[3] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) - (other.group1()[2] * self.group0()[3]) - (other.group1()[3] * self.group0()[2])),
                (other.group0()[3] * self[e4315]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[0] * self[e4315]),
                (other.group0()[1] * self[e4315]),
                (other.group0()[2] * self[e4315]),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiLine> for Sphere {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       16       36        0
    fn geometric_anti_product(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                (other.group0()[0] * self[e4315] * -1.0),
                (other.group0()[1] * self[e4315] * -1.0),
                (other.group0()[2] * self[e4315] * -1.0),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other.group1()[0] * self[e4315] * -1.0),
                (other.group1()[1] * self[e4315] * -1.0),
                (other.group1()[2] * self[e4315] * -1.0),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1])),
                (-(other.group0()[1] * self.group0()[3]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[2] * self.group0()[3]) - (other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0])),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (other.group1()[0] * self[e4315])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self[e4315])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (other.group1()[2] * self[e4315])),
                (-(other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiMotor> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       24       48        0
    fn geometric_anti_product(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[0] * self[e4315] * -1.0),
                (other.group0()[1] * self[e4315] * -1.0),
                (other.group0()[2] * self[e4315] * -1.0),
                (other.group1()[3] * self[e4315] * -1.0),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other.group1()[0] * self[e4315] * -1.0),
                (other.group1()[1] * self[e4315] * -1.0),
                (other.group1()[2] * self[e4315] * -1.0),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]) + (other.group1()[3] * self[e4315])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])
                    + (other.group1()[3] * self.group0()[0])),
                (-(other.group0()[1] * self.group0()[3]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])
                    + (other.group1()[3] * self.group0()[1])),
                (-(other.group0()[2] * self.group0()[3]) - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[3] * self.group0()[3])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (other.group0()[3] * self.group0()[0]) + (other.group1()[0] * self[e4315])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) + (other.group0()[3] * self.group0()[1]) + (other.group1()[1] * self[e4315])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (other.group0()[3] * self.group0()[2]) + (other.group1()[2] * self[e4315])),
                (other.group0()[3] * self[e4315] * -1.0),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiPlane> for Sphere {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        9       20        0
    fn geometric_anti_product(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from([(other.group0()[0] * self[e4315]), (other.group0()[1] * self[e4315]), (other.group0()[2] * self[e4315])]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
                (other.group0()[3] * self[e4315]),
            ]),
            // e15, e25, e35, scalar
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group0()[3] * self.group0()[0])),
                (-(other.group0()[1] * self.group0()[3]) - (other.group0()[3] * self.group0()[1])),
                (-(other.group0()[2] * self.group0()[3]) - (other.group0()[3] * self.group0()[2])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) + (other.group0()[3] * self[e4315])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiScalar> for Sphere {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        5        0
    fn geometric_anti_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other[e12345]),
                (self.group0()[1] * other[e12345]),
                (self.group0()[2] * other[e12345]),
                (self.group0()[3] * other[e12345]),
            ]),
            // e1234
            (other[e12345] * self[e4315]),
        );
    }
}
impl GeometricAntiProduct<Circle> for Sphere {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       35       50        0
    fn geometric_anti_product(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (other.group1()[0] * self[e4315])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self[e4315])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (other.group1()[2] * self[e4315])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group2()[0] * self[e4315]) - (other.group1()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[3]) + (other.group2()[1] * self[e4315]) - (other.group1()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group0()[3]) + (other.group2()[2] * self[e4315]) - (other.group1()[3] * self.group0()[2])),
                (-(other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group2()[1] * self.group0()[2]) - (other.group2()[2] * self.group0()[1]) + (other.group1()[0] * self.group0()[3])),
                (-(other.group2()[0] * self.group0()[2]) + (other.group2()[2] * self.group0()[0]) + (other.group1()[1] * self.group0()[3])),
                ((other.group2()[0] * self.group0()[1]) - (other.group2()[1] * self.group0()[0]) + (other.group1()[2] * self.group0()[3])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]) + (other.group1()[3] * self[e4315])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) + (other.group2()[0] * self[e4315]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1])),
                (-(other.group0()[1] * self.group0()[3]) + (other.group2()[1] * self[e4315]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[2] * self.group0()[3]) + (other.group2()[2] * self[e4315]) - (other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0])),
                ((other.group2()[0] * self.group0()[0]) + (other.group2()[1] * self.group0()[1]) + (other.group2()[2] * self.group0()[2]) - (other.group1()[3] * self.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<CircleRotor> for Sphere {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       40       55        0
    fn geometric_anti_product(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (other.group1()[0] * self[e4315])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self[e4315])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (other.group1()[2] * self[e4315])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group1()[3] * self.group0()[0]) + (other.group2()[0] * self[e4315])),
                ((other.group0()[1] * self.group0()[3]) - (other.group1()[3] * self.group0()[1]) + (other.group2()[1] * self[e4315])),
                ((other.group0()[2] * self.group0()[3]) - (other.group1()[3] * self.group0()[2]) + (other.group2()[2] * self[e4315])),
                (-(other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group1()[0] * self.group0()[3]) + (other.group2()[1] * self.group0()[2]) - (other.group2()[2] * self.group0()[1])),
                ((other.group1()[1] * self.group0()[3]) - (other.group2()[0] * self.group0()[2]) + (other.group2()[2] * self.group0()[0])),
                ((other.group1()[2] * self.group0()[3]) + (other.group2()[0] * self.group0()[1]) - (other.group2()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])
                    + (other.group1()[3] * self[e4315])
                    + (other.group2()[3] * self[e4315])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])
                    + (other.group2()[0] * self[e4315])
                    + (other.group2()[3] * self.group0()[0])),
                (-(other.group0()[1] * self.group0()[3]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])
                    + (other.group2()[1] * self[e4315])
                    + (other.group2()[3] * self.group0()[1])),
                (-(other.group0()[2] * self.group0()[3]) - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group2()[2] * self[e4315])
                    + (other.group2()[3] * self.group0()[2])),
                (-(other.group1()[3] * self.group0()[3])
                    + (other.group2()[0] * self.group0()[0])
                    + (other.group2()[1] * self.group0()[1])
                    + (other.group2()[2] * self.group0()[2])
                    + (other.group2()[3] * self.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Dipole> for Sphere {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       35       50        0
    fn geometric_anti_product(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) - (other.group1()[0] * self[e4315])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0]) - (other.group1()[1] * self[e4315])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) - (other.group1()[2] * self[e4315])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group2()[0] * self[e4315]) - (other.group1()[3] * self.group0()[0])),
                (-(other.group0()[1] * self.group0()[3]) - (other.group2()[1] * self[e4315]) - (other.group1()[3] * self.group0()[1])),
                (-(other.group0()[2] * self.group0()[3]) - (other.group2()[2] * self[e4315]) - (other.group1()[3] * self.group0()[2])),
                (-(other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (-(other.group2()[1] * self.group0()[2]) + (other.group2()[2] * self.group0()[1]) - (other.group1()[0] * self.group0()[3])),
                ((other.group2()[0] * self.group0()[2]) - (other.group2()[2] * self.group0()[0]) - (other.group1()[1] * self.group0()[3])),
                (-(other.group2()[0] * self.group0()[1]) + (other.group2()[1] * self.group0()[0]) - (other.group1()[2] * self.group0()[3])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) + (other.group1()[3] * self[e4315])),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) + (other.group2()[0] * self[e4315]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1])),
                (-(other.group0()[1] * self.group0()[3]) + (other.group2()[1] * self[e4315]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[2] * self.group0()[3]) + (other.group2()[2] * self[e4315]) - (other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0])),
                (-(other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    - (other.group1()[3] * self.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<DipoleInversion> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       59       75        0
    fn geometric_anti_product(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) - (other.group1()[0] * self[e4315]) - (other.group2()[3] * self.group0()[0])
                    + (other.group3()[0] * self[e4315])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0]) - (other.group1()[1] * self[e4315]) - (other.group2()[3] * self.group0()[1])
                    + (other.group3()[1] * self[e4315])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) - (other.group1()[2] * self[e4315]) - (other.group2()[3] * self.group0()[2])
                    + (other.group3()[2] * self[e4315])),
                (-(other.group2()[3] * self.group0()[3])
                    + (other.group3()[0] * self.group0()[0])
                    + (other.group3()[1] * self.group0()[1])
                    + (other.group3()[2] * self.group0()[2])
                    - (other.group3()[3] * self[e4315])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group1()[3] * self.group0()[0]) - (other.group2()[0] * self[e4315]) + (other.group3()[1] * self.group0()[2])
                    - (other.group3()[2] * self.group0()[1])),
                (-(other.group0()[1] * self.group0()[3]) - (other.group1()[3] * self.group0()[1]) - (other.group2()[1] * self[e4315]) - (other.group3()[0] * self.group0()[2])
                    + (other.group3()[2] * self.group0()[0])),
                (-(other.group0()[2] * self.group0()[3]) - (other.group1()[3] * self.group0()[2]) - (other.group2()[2] * self[e4315]) + (other.group3()[0] * self.group0()[1])
                    - (other.group3()[1] * self.group0()[0])),
                (-(other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])
                    - (other.group2()[3] * self.group0()[3])
                    + (other.group3()[3] * self[e4315])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(other.group1()[0] * self.group0()[3]) - (other.group2()[1] * self.group0()[2]) + (other.group2()[2] * self.group0()[1])
                    - (other.group3()[0] * self.group0()[3])
                    + (other.group3()[3] * self.group0()[0])),
                (-(other.group1()[1] * self.group0()[3]) + (other.group2()[0] * self.group0()[2])
                    - (other.group2()[2] * self.group0()[0])
                    - (other.group3()[1] * self.group0()[3])
                    + (other.group3()[3] * self.group0()[1])),
                (-(other.group1()[2] * self.group0()[3]) - (other.group2()[0] * self.group0()[1]) + (other.group2()[1] * self.group0()[0])
                    - (other.group3()[2] * self.group0()[3])
                    + (other.group3()[3] * self.group0()[2])),
                (-(other.group1()[3] * self.group0()[3])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1]) + (other.group2()[0] * self[e4315])),
                (-(other.group0()[1] * self.group0()[3]) + (other.group1()[0] * self.group0()[2]) - (other.group1()[2] * self.group0()[0]) + (other.group2()[1] * self[e4315])),
                (-(other.group0()[2] * self.group0()[3]) - (other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0]) + (other.group2()[2] * self[e4315])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) + (other.group1()[3] * self[e4315])),
            ]),
        );
    }
}
impl GeometricAntiProduct<DualNum> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0       11        0
    fn geometric_anti_product(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self.group0()[0]),
                (other.group0()[0] * self.group0()[1]),
                (other.group0()[0] * self.group0()[2]),
                (other.group0()[0] * self.group0()[3]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[0] * self.group0()[3] * -1.0)]),
            // e15, e25, e35, e1234
            Simd32x4::from([0.0, 0.0, 0.0, (other.group0()[1] * self[e4315])]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other.group0()[1] * self.group0()[0]),
                (other.group0()[1] * self.group0()[1]),
                (other.group0()[1] * self.group0()[2]),
                (other.group0()[1] * self.group0()[3]),
            ]),
        );
    }
}
impl GeometricAntiProduct<FlatPoint> for Sphere {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        9       20        0
    fn geometric_anti_product(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self[e4315]) - (other.group0()[3] * self.group0()[0])),
                (-(other.group0()[1] * self[e4315]) - (other.group0()[3] * self.group0()[1])),
                (-(other.group0()[2] * self[e4315]) - (other.group0()[3] * self.group0()[2])),
                0.0,
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0])),
                (other.group0()[3] * self[e4315]),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other.group0()[0] * self[e4315]),
                (other.group0()[1] * self[e4315]),
                (other.group0()[2] * self[e4315]),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group0()[3] * self.group0()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Flector> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       24       40        0
    fn geometric_anti_product(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group1()[0] * self[e4315]),
                (other.group1()[1] * self[e4315]),
                (other.group1()[2] * self[e4315]),
                ((other.group1()[0] * self.group0()[0]) + (other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2]) - (other.group1()[3] * self[e4315])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self[e4315]) - (other.group0()[3] * self.group0()[0]) + (other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1])),
                (-(other.group0()[1] * self[e4315]) - (other.group0()[3] * self.group0()[1]) - (other.group1()[0] * self.group0()[2]) + (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[2] * self[e4315]) - (other.group0()[3] * self.group0()[2]) + (other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0])),
                (other.group1()[3] * self[e4315]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) - (other.group1()[0] * self.group0()[3])
                    + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) - (other.group1()[1] * self.group0()[3]) + (other.group1()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) - (other.group1()[2] * self.group0()[3])
                    + (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group0()[3] * self.group0()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other.group0()[0] * self[e4315]),
                (other.group0()[1] * self[e4315]),
                (other.group0()[2] * self[e4315]),
                (other.group0()[3] * self[e4315]),
            ]),
        );
    }
}
impl GeometricAntiProduct<Line> for Sphere {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       16       30        0
    fn geometric_anti_product(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from([(other.group0()[0] * self[e4315]), (other.group0()[1] * self[e4315]), (other.group0()[2] * self[e4315])]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other.group1()[0] * self[e4315]),
                (other.group1()[1] * self[e4315]),
                (other.group1()[2] * self[e4315]),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1])),
                ((other.group0()[1] * self.group0()[3]) - (other.group1()[0] * self.group0()[2]) + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[2] * self.group0()[3]) + (other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (other.group1()[0] * self[e4315])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) + (other.group1()[1] * self[e4315])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (other.group1()[2] * self[e4315])),
                ((other.group1()[0] * self.group0()[0]) + (other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Motor> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       24       40        0
    fn geometric_anti_product(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[0] * self[e4315]),
                (other.group0()[1] * self[e4315]),
                (other.group0()[2] * self[e4315]),
                (other.group1()[3] * self[e4315]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other.group1()[0] * self[e4315]),
                (other.group1()[1] * self[e4315]),
                (other.group1()[2] * self[e4315]),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2]) + (other.group1()[3] * self[e4315])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group1()[1] * self.group0()[2]) - (other.group1()[2] * self.group0()[1]) - (other.group1()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[3]) - (other.group1()[0] * self.group0()[2]) + (other.group1()[2] * self.group0()[0]) - (other.group1()[3] * self.group0()[1])),
                ((other.group0()[2] * self.group0()[3]) + (other.group1()[0] * self.group0()[1]) - (other.group1()[1] * self.group0()[0]) - (other.group1()[3] * self.group0()[2])),
                (other.group0()[3] * self[e4315]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (other.group0()[3] * self.group0()[0]) + (other.group1()[0] * self[e4315])),
                ((other.group0()[0] * self.group0()[2]) - (other.group0()[2] * self.group0()[0]) + (other.group0()[3] * self.group0()[1]) + (other.group1()[1] * self[e4315])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (other.group0()[3] * self.group0()[2]) + (other.group1()[2] * self[e4315])),
                ((other.group0()[3] * self.group0()[3]) + (other.group1()[0] * self.group0()[0]) + (other.group1()[1] * self.group0()[1]) + (other.group1()[2] * self.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<MultiVector> for Sphere {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      128      160        0
    fn geometric_anti_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((other.group1()[0] * self.group0()[0])
                    + (other.group1()[1] * self.group0()[1])
                    + (other.group1()[2] * self.group0()[2])
                    + (other.group1()[3] * self.group0()[3])
                    + (other[e1] * self[e4315])),
                ((other.group9()[0] * self.group0()[0]) + (other.group9()[1] * self.group0()[1]) + (other.group9()[2] * self.group0()[2])
                    - (other.group9()[3] * self[e4315])
                    - (self.group0()[3] * other[e45])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[0]) - (other.group4()[0] * self.group0()[3]) - (other.group5()[1] * self.group0()[2])
                    + (other.group5()[2] * self.group0()[1])
                    + (other.group3()[0] * self[e4315])),
                ((other.group0()[0] * self.group0()[1]) - (other.group4()[1] * self.group0()[3]) + (other.group5()[0] * self.group0()[2]) - (other.group5()[2] * self.group0()[0])
                    + (other.group3()[1] * self[e4315])),
                ((other.group0()[0] * self.group0()[2]) - (other.group4()[2] * self.group0()[3]) - (other.group5()[0] * self.group0()[1])
                    + (other.group5()[1] * self.group0()[0])
                    + (other.group3()[2] * self[e4315])),
                (-(other.group0()[0] * self[e4315])
                    + (other.group4()[0] * self.group0()[0])
                    + (other.group4()[1] * self.group0()[1])
                    + (other.group4()[2] * self.group0()[2])
                    + (other.group3()[3] * self[e4315])),
            ]),
            // e5
            (-(other.group0()[0] * self.group0()[3])
                - (other.group3()[0] * self.group0()[0])
                - (other.group3()[1] * self.group0()[1])
                - (other.group3()[2] * self.group0()[2])
                - (other.group3()[3] * self.group0()[3])),
            // e15, e25, e35, e45
            Simd32x4::from([
                ((other.group8()[1] * self.group0()[2]) - (other.group8()[2] * self.group0()[1]) - (other.group1()[0] * self.group0()[3]) + (other.group6()[0] * self.group0()[3])
                    - (self.group0()[0] * other[e1])),
                (-(other.group8()[0] * self.group0()[2]) + (other.group8()[2] * self.group0()[0]) - (other.group1()[1] * self.group0()[3])
                    + (other.group6()[1] * self.group0()[3])
                    - (self.group0()[1] * other[e1])),
                ((other.group8()[0] * self.group0()[1]) - (other.group8()[1] * self.group0()[0]) - (other.group1()[2] * self.group0()[3]) + (other.group6()[2] * self.group0()[3])
                    - (self.group0()[2] * other[e1])),
                (-(other.group1()[3] * self.group0()[3])
                    - (other.group6()[0] * self.group0()[0])
                    - (other.group6()[1] * self.group0()[1])
                    - (other.group6()[2] * self.group0()[2])
                    + (other[e1] * self[e4315])),
            ]),
            // e41, e42, e43
            Simd32x3::from([
                (-(other.group7()[1] * self.group0()[2])
                    + (other.group7()[2] * self.group0()[1])
                    + (other.group1()[0] * self[e4315])
                    + (other.group1()[3] * self.group0()[0])
                    + (other.group6()[0] * self[e4315])),
                ((other.group7()[0] * self.group0()[2]) - (other.group7()[2] * self.group0()[0])
                    + (other.group1()[1] * self[e4315])
                    + (other.group1()[3] * self.group0()[1])
                    + (other.group6()[1] * self[e4315])),
                (-(other.group7()[0] * self.group0()[1])
                    + (other.group7()[1] * self.group0()[0])
                    + (other.group1()[2] * self[e4315])
                    + (other.group1()[3] * self.group0()[2])
                    + (other.group6()[2] * self[e4315])),
            ]),
            // e23, e31, e12
            Simd32x3::from([
                ((other.group7()[0] * self.group0()[3]) + (other.group8()[0] * self[e4315]) + (other.group1()[1] * self.group0()[2])
                    - (other.group1()[2] * self.group0()[1])
                    - (other.group6()[3] * self.group0()[0])),
                ((other.group7()[1] * self.group0()[3]) + (other.group8()[1] * self[e4315]) - (other.group1()[0] * self.group0()[2]) + (other.group1()[2] * self.group0()[0])
                    - (other.group6()[3] * self.group0()[1])),
                ((other.group7()[2] * self.group0()[3]) + (other.group8()[2] * self[e4315]) + (other.group1()[0] * self.group0()[1])
                    - (other.group1()[1] * self.group0()[0])
                    - (other.group6()[3] * self.group0()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group4()[0] * self.group0()[3]) - (other.group3()[0] * self[e4315]) - (other.group3()[3] * self.group0()[0]) + (other.group9()[1] * self.group0()[2])
                    - (other.group9()[2] * self.group0()[1])),
                (-(other.group4()[1] * self.group0()[3]) - (other.group3()[1] * self[e4315]) - (other.group3()[3] * self.group0()[1]) - (other.group9()[0] * self.group0()[2])
                    + (other.group9()[2] * self.group0()[0])),
                (-(other.group4()[2] * self.group0()[3]) - (other.group3()[2] * self[e4315]) - (other.group3()[3] * self.group0()[2]) + (other.group9()[0] * self.group0()[1])
                    - (other.group9()[1] * self.group0()[0])),
                (-(other.group5()[0] * self.group0()[0]) - (other.group5()[1] * self.group0()[1]) - (other.group5()[2] * self.group0()[2]) + (other.group9()[3] * self[e4315])
                    - (self.group0()[3] * other[e45])),
            ]),
            // e423, e431, e412
            Simd32x3::from([
                ((other.group4()[1] * self.group0()[2]) - (other.group4()[2] * self.group0()[1]) - (other.group5()[0] * self[e4315]) + (other.group9()[0] * self[e4315])
                    - (self.group0()[0] * other[e45])),
                (-(other.group4()[0] * self.group0()[2]) + (other.group4()[2] * self.group0()[0]) - (other.group5()[1] * self[e4315]) + (other.group9()[1] * self[e4315])
                    - (self.group0()[1] * other[e45])),
                ((other.group4()[0] * self.group0()[1]) - (other.group4()[1] * self.group0()[0]) - (other.group5()[2] * self[e4315]) + (other.group9()[2] * self[e4315])
                    - (self.group0()[2] * other[e45])),
            ]),
            // e235, e315, e125
            Simd32x3::from([
                (-(other.group5()[0] * self.group0()[3]) - (other.group3()[1] * self.group0()[2]) + (other.group3()[2] * self.group0()[1])
                    - (other.group9()[0] * self.group0()[3])
                    + (other.group9()[3] * self.group0()[0])),
                (-(other.group5()[1] * self.group0()[3]) + (other.group3()[0] * self.group0()[2])
                    - (other.group3()[2] * self.group0()[0])
                    - (other.group9()[1] * self.group0()[3])
                    + (other.group9()[3] * self.group0()[1])),
                (-(other.group5()[2] * self.group0()[3]) - (other.group3()[0] * self.group0()[1]) + (other.group3()[1] * self.group0()[0])
                    - (other.group9()[2] * self.group0()[3])
                    + (other.group9()[3] * self.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[0]) - (other.group7()[0] * self.group0()[3]) + (other.group8()[0] * self[e4315]) - (other.group6()[1] * self.group0()[2])
                    + (other.group6()[2] * self.group0()[1])),
                ((other.group0()[1] * self.group0()[1]) - (other.group7()[1] * self.group0()[3]) + (other.group8()[1] * self[e4315]) + (other.group6()[0] * self.group0()[2])
                    - (other.group6()[2] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[2]) - (other.group7()[2] * self.group0()[3]) + (other.group8()[2] * self[e4315]) - (other.group6()[0] * self.group0()[1])
                    + (other.group6()[1] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[3]) + (other.group8()[0] * self.group0()[0]) + (other.group8()[1] * self.group0()[1]) + (other.group8()[2] * self.group0()[2])
                    - (other.group6()[3] * self.group0()[3])),
            ]),
            // e1234
            ((other.group0()[1] * self[e4315]) - (other.group7()[0] * self.group0()[0]) - (other.group7()[1] * self.group0()[1]) - (other.group7()[2] * self.group0()[2])
                + (other.group6()[3] * self[e4315])),
        );
    }
}
impl GeometricAntiProduct<Plane> for Sphere {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        9       20        0
    fn geometric_anti_product(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from([(other.group0()[0] * self[e4315]), (other.group0()[1] * self[e4315]), (other.group0()[2] * self[e4315])]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
                (other.group0()[3] * self[e4315]),
            ]),
            // e235, e315, e125, e12345
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) + (other.group0()[3] * self.group0()[0])),
                (-(other.group0()[1] * self.group0()[3]) + (other.group0()[3] * self.group0()[1])),
                (-(other.group0()[2] * self.group0()[3]) + (other.group0()[3] * self.group0()[2])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self[e4315])),
            ]),
        );
    }
}
impl GeometricAntiProduct<RoundPoint> for Sphere {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       14       25        0
    fn geometric_anti_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from([
                ((other.group0()[0] * self[e4315]) + (other.group0()[3] * self.group0()[0])),
                ((other.group0()[1] * self[e4315]) + (other.group0()[3] * self.group0()[1])),
                ((other.group0()[2] * self[e4315]) + (other.group0()[3] * self.group0()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[3] * self.group0()[3]) + (other[e2] * self[e4315])),
            ]),
            // e15, e25, e35, scalar
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (self.group0()[0] * other[e2])),
                (-(other.group0()[1] * self.group0()[3]) - (self.group0()[1] * other[e2])),
                (-(other.group0()[2] * self.group0()[3]) - (self.group0()[2] * other[e2])),
                ((other.group0()[0] * self.group0()[0])
                    + (other.group0()[1] * self.group0()[1])
                    + (other.group0()[2] * self.group0()[2])
                    + (other.group0()[3] * self.group0()[3])
                    + (other[e2] * self[e4315])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Scalar> for Sphere {
    type Output = RoundPoint;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        7        0
    fn geometric_anti_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return RoundPoint::from_groups(
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other[scalar]),
                (self.group0()[1] * other[scalar]),
                (self.group0()[2] * other[scalar]),
                (other[scalar] * self[e4315] * -1.0),
            ]),
            // e5
            (self.group0()[3] * other[scalar] * -1.0),
        );
    }
}
impl GeometricAntiProduct<Sphere> for Sphere {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       14       25        0
    fn geometric_anti_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from([
                ((other.group0()[0] * self[e4315]) - (self.group0()[0] * other[e4315])),
                ((other.group0()[1] * self[e4315]) - (self.group0()[1] * other[e4315])),
                ((other.group0()[2] * self[e4315]) - (self.group0()[2] * other[e4315])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0])),
                ((other.group0()[3] * self[e4315]) - (self.group0()[3] * other[e4315])),
            ]),
            // e235, e315, e125, e12345
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) + (other.group0()[3] * self.group0()[0])),
                (-(other.group0()[1] * self.group0()[3]) + (other.group0()[3] * self.group0()[1])),
                (-(other.group0()[2] * self.group0()[3]) + (other.group0()[3] * self.group0()[2])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])
                    - (other.group0()[3] * self[e4315])
                    - (self.group0()[3] * other[e4315])),
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorEven> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       64       80        0
    fn geometric_anti_product(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])
                    + (other.group1()[0] * self[e4315])
                    + (other.group3()[0] * self[e4315])),
                (-(self.group0()[0] * other.group0()[2])
                    + (self.group0()[1] * other.group3()[3])
                    + (self.group0()[2] * other.group0()[0])
                    + (other.group1()[1] * self[e4315])
                    + (other.group3()[1] * self[e4315])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])
                    + (self.group0()[2] * other.group3()[3])
                    + (other.group1()[2] * self[e4315])
                    + (other.group3()[2] * self[e4315])),
                ((self.group0()[0] * other.group3()[0])
                    + (self.group0()[1] * other.group3()[1])
                    + (self.group0()[2] * other.group3()[2])
                    + (self.group0()[3] * other.group3()[3])
                    + (other.group2()[3] * self[e4315])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group3()[2])
                    + (self.group0()[2] * other.group3()[1])
                    + (self.group0()[3] * other.group0()[0])
                    + (other.group2()[0] * self[e4315])),
                ((self.group0()[0] * other.group3()[2]) - (self.group0()[1] * other.group1()[3]) - (self.group0()[2] * other.group3()[0])
                    + (self.group0()[3] * other.group0()[1])
                    + (other.group2()[1] * self[e4315])),
                (-(self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group3()[0]) - (self.group0()[2] * other.group1()[3])
                    + (self.group0()[3] * other.group0()[2])
                    + (other.group2()[2] * self[e4315])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[3] * other.group3()[3])
                    + (other.group2()[3] * self[e4315])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[1])
                    + (self.group0()[3] * other.group1()[0])
                    - (self.group0()[3] * other.group3()[0])),
                ((self.group0()[0] * other.group2()[2]) - (self.group0()[1] * other.group2()[3]) - (self.group0()[2] * other.group2()[0]) + (self.group0()[3] * other.group1()[1])
                    - (self.group0()[3] * other.group3()[1])),
                (-(self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[0]) - (self.group0()[2] * other.group2()[3])
                    + (self.group0()[3] * other.group1()[2])
                    - (self.group0()[3] * other.group3()[2])),
                (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])
                    + (other.group0()[3] * self[e4315])
                    + (other.group1()[3] * self[e4315])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) - (self.group0()[3] * other.group0()[0])
                    + (other.group2()[0] * self[e4315])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[3]) + (self.group0()[2] * other.group1()[0])
                    - (self.group0()[3] * other.group0()[1])
                    + (other.group2()[1] * self[e4315])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group0()[3]) - (self.group0()[3] * other.group0()[2])
                    + (other.group2()[2] * self[e4315])),
                ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group2()[1]) + (self.group0()[2] * other.group2()[2]) + (self.group0()[3] * other.group0()[3])
                    - (self.group0()[3] * other.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorOdd> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       64       80        0
    fn geometric_anti_product(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1]) - (other.group1()[0] * self[e4315])
                    + (other.group3()[0] * self[e4315])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group2()[3]) - (self.group0()[2] * other.group0()[0]) - (other.group1()[1] * self[e4315])
                    + (other.group3()[1] * self[e4315])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group2()[3]) - (other.group1()[2] * self[e4315])
                    + (other.group3()[2] * self[e4315])),
                ((self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group3()[1]) + (self.group0()[2] * other.group3()[2])
                    - (self.group0()[3] * other.group2()[3])
                    - (other.group3()[3] * self[e4315])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group3()[2]) + (self.group0()[2] * other.group3()[1])
                    - (self.group0()[3] * other.group0()[0])
                    - (other.group2()[0] * self[e4315])),
                ((self.group0()[0] * other.group3()[2])
                    - (self.group0()[1] * other.group1()[3])
                    - (self.group0()[2] * other.group3()[0])
                    - (self.group0()[3] * other.group0()[1])
                    - (other.group2()[1] * self[e4315])),
                (-(self.group0()[0] * other.group3()[1]) + (self.group0()[1] * other.group3()[0])
                    - (self.group0()[2] * other.group1()[3])
                    - (self.group0()[3] * other.group0()[2])
                    - (other.group2()[2] * self[e4315])),
                (-(self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[3] * other.group2()[3])
                    + (other.group3()[3] * self[e4315])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group2()[2])
                    - (self.group0()[2] * other.group2()[1])
                    - (self.group0()[3] * other.group1()[0])
                    - (self.group0()[3] * other.group3()[0])),
                (-(self.group0()[0] * other.group2()[2]) + (self.group0()[1] * other.group3()[3]) + (self.group0()[2] * other.group2()[0])
                    - (self.group0()[3] * other.group1()[1])
                    - (self.group0()[3] * other.group3()[1])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0]) + (self.group0()[2] * other.group3()[3])
                    - (self.group0()[3] * other.group1()[2])
                    - (self.group0()[3] * other.group3()[2])),
                (-(self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group0()[3] * other.group0()[3])
                    - (self.group0()[3] * other.group1()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1]) - (self.group0()[3] * other.group0()[0])
                    + (other.group2()[0] * self[e4315])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[3]) + (self.group0()[2] * other.group1()[0])
                    - (self.group0()[3] * other.group0()[1])
                    + (other.group2()[1] * self[e4315])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group0()[3]) - (self.group0()[3] * other.group0()[2])
                    + (other.group2()[2] * self[e4315])),
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2]) - (other.group0()[3] * self[e4315])
                    + (other.group1()[3] * self[e4315])),
            ]),
        );
    }
}
impl InfixGeometricAntiProduct for VersorEven {}
impl GeometricAntiProduct<AntiCircleRotor> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      160      176        0
    fn geometric_anti_product(self, other: AntiCircleRotor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group1()[1])
                    - (other.group0()[2] * self.group3()[1])
                    + (other.group1()[0] * self.group3()[3])
                    - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])
                    - (other.group1()[3] * self.group0()[0])
                    + (other.group2()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group0()[3])
                    - (other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group1()[0])
                    + (other.group0()[2] * self.group3()[0])
                    + (other.group1()[0] * self.group0()[2])
                    + (other.group1()[1] * self.group3()[3])
                    - (other.group1()[2] * self.group0()[0])
                    - (other.group1()[3] * self.group0()[1])
                    + (other.group2()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group1()[0])
                    - (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group0()[3])
                    - (other.group0()[2] * self.group1()[3])
                    - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group3()[3])
                    - (other.group1()[3] * self.group0()[2])
                    + (other.group2()[3] * self.group0()[2])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    + (other.group2()[3] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1]) + (other.group1()[0] * self.group0()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])
                    - (other.group1()[3] * self.group3()[0])
                    + (other.group2()[0] * self.group3()[3])
                    - (other.group2()[1] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[1])
                    + (other.group2()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group2()[3]) - (other.group0()[2] * self.group2()[0])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group0()[3])
                    - (other.group1()[2] * self.group1()[0])
                    - (other.group1()[3] * self.group3()[1])
                    + (other.group2()[0] * self.group0()[2])
                    + (other.group2()[1] * self.group3()[3])
                    - (other.group2()[2] * self.group0()[0])
                    + (other.group2()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) + (other.group0()[2] * self.group2()[3])
                    - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group0()[3])
                    - (other.group1()[3] * self.group3()[2])
                    - (other.group2()[0] * self.group0()[1])
                    + (other.group2()[1] * self.group0()[0])
                    + (other.group2()[2] * self.group3()[3])
                    + (other.group2()[3] * self.group1()[2])),
                ((other.group0()[0] * self.group2()[0])
                    + (other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])
                    + (other.group1()[0] * self.group3()[0])
                    + (other.group1()[1] * self.group3()[1])
                    + (other.group1()[2] * self.group3()[2])
                    + (other.group1()[3] * self.group0()[3])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    - (other.group2()[3] * self.group1()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group1()[0] * self.group2()[3]) - (other.group1()[1] * self.group2()[2])
                    + (other.group1()[2] * self.group2()[1])
                    + (other.group1()[3] * self.group2()[0])
                    + (other.group2()[0] * self.group0()[3])
                    + (other.group2()[0] * self.group1()[3])
                    - (other.group2()[1] * self.group1()[2])
                    - (other.group2()[1] * self.group3()[2])
                    + (other.group2()[2] * self.group1()[1])
                    + (other.group2()[2] * self.group3()[1])
                    + (other.group2()[3] * self.group2()[0])),
                ((other.group1()[0] * self.group2()[2]) + (other.group1()[1] * self.group2()[3]) - (other.group1()[2] * self.group2()[0])
                    + (other.group1()[3] * self.group2()[1])
                    + (other.group2()[0] * self.group1()[2])
                    + (other.group2()[0] * self.group3()[2])
                    + (other.group2()[1] * self.group0()[3])
                    + (other.group2()[1] * self.group1()[3])
                    - (other.group2()[2] * self.group1()[0])
                    - (other.group2()[2] * self.group3()[0])
                    + (other.group2()[3] * self.group2()[1])),
                (-(other.group1()[0] * self.group2()[1])
                    + (other.group1()[1] * self.group2()[0])
                    + (other.group1()[2] * self.group2()[3])
                    + (other.group1()[3] * self.group2()[2])
                    - (other.group2()[0] * self.group1()[1])
                    - (other.group2()[0] * self.group3()[1])
                    + (other.group2()[1] * self.group1()[0])
                    + (other.group2()[1] * self.group3()[0])
                    + (other.group2()[2] * self.group0()[3])
                    + (other.group2()[2] * self.group1()[3])
                    + (other.group2()[3] * self.group2()[2])),
                (-(other.group0()[0] * self.group1()[0]) + (other.group0()[0] * self.group3()[0]) - (other.group0()[1] * self.group1()[1])
                    + (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])
                    - (other.group1()[3] * self.group3()[3])
                    + (other.group2()[3] * self.group3()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group2()[3]) + (other.group0()[1] * self.group2()[2])
                    - (other.group0()[2] * self.group2()[1])
                    - (other.group1()[0] * self.group1()[3])
                    + (other.group1()[1] * self.group3()[2])
                    - (other.group1()[2] * self.group3()[1])
                    + (other.group1()[3] * self.group1()[0])
                    + (other.group2()[0] * self.group3()[3])
                    - (other.group2()[1] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[1])
                    - (other.group2()[3] * self.group3()[0])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group2()[3]) + (other.group0()[2] * self.group2()[0])
                    - (other.group1()[0] * self.group3()[2])
                    - (other.group1()[1] * self.group1()[3])
                    + (other.group1()[2] * self.group3()[0])
                    + (other.group1()[3] * self.group1()[1])
                    + (other.group2()[0] * self.group0()[2])
                    + (other.group2()[1] * self.group3()[3])
                    - (other.group2()[2] * self.group0()[0])
                    - (other.group2()[3] * self.group3()[1])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) - (other.group0()[2] * self.group2()[3]) + (other.group1()[0] * self.group3()[1])
                    - (other.group1()[1] * self.group3()[0])
                    - (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])
                    - (other.group2()[0] * self.group0()[1])
                    + (other.group2()[1] * self.group0()[0])
                    + (other.group2()[2] * self.group3()[3])
                    - (other.group2()[3] * self.group3()[2])),
                (-(other.group1()[0] * self.group2()[0]) - (other.group1()[1] * self.group2()[1]) - (other.group1()[2] * self.group2()[2])
                    + (other.group1()[3] * self.group2()[3])
                    - (other.group2()[0] * self.group1()[0])
                    - (other.group2()[0] * self.group3()[0])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[1] * self.group3()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[2])
                    + (other.group2()[3] * self.group2()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDipoleInversion> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      224      240        0
    fn geometric_anti_product(self, other: AntiDipoleInversion) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group1()[1])
                    - (other.group0()[2] * self.group3()[1])
                    + (other.group1()[0] * self.group3()[3])
                    - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])
                    + (other.group1()[3] * self.group0()[0])
                    + (other.group2()[3] * self.group1()[0])
                    - (other.group2()[3] * self.group3()[0])
                    + (other.group3()[0] * self.group3()[3])
                    - (other.group3()[1] * self.group0()[2])
                    + (other.group3()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group0()[3])
                    - (other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group1()[0])
                    + (other.group0()[2] * self.group3()[0])
                    + (other.group1()[0] * self.group0()[2])
                    + (other.group1()[1] * self.group3()[3])
                    - (other.group1()[2] * self.group0()[0])
                    + (other.group1()[3] * self.group0()[1])
                    + (other.group2()[3] * self.group1()[1])
                    - (other.group2()[3] * self.group3()[1])
                    + (other.group3()[0] * self.group0()[2])
                    + (other.group3()[1] * self.group3()[3])
                    - (other.group3()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group1()[0])
                    - (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group0()[3])
                    - (other.group0()[2] * self.group1()[3])
                    - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group3()[3])
                    + (other.group1()[3] * self.group0()[2])
                    + (other.group2()[3] * self.group1()[2])
                    - (other.group2()[3] * self.group3()[2])
                    - (other.group3()[0] * self.group0()[1])
                    + (other.group3()[1] * self.group0()[0])
                    + (other.group3()[2] * self.group3()[3])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    + (other.group1()[3] * self.group1()[3])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    + (other.group2()[3] * self.group2()[3])
                    - (other.group3()[0] * self.group3()[0])
                    - (other.group3()[1] * self.group3()[1])
                    - (other.group3()[2] * self.group3()[2])
                    + (other.group3()[3] * self.group3()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1]) + (other.group1()[0] * self.group0()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group1()[3] * self.group3()[0])
                    + (other.group2()[0] * self.group3()[3])
                    - (other.group2()[1] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[1])
                    + (other.group2()[3] * self.group2()[0])
                    + (other.group3()[0] * self.group1()[3])
                    - (other.group3()[1] * self.group3()[2])
                    + (other.group3()[2] * self.group3()[1])
                    + (other.group3()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group2()[3]) - (other.group0()[2] * self.group2()[0])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group0()[3])
                    - (other.group1()[2] * self.group1()[0])
                    + (other.group1()[3] * self.group3()[1])
                    + (other.group2()[0] * self.group0()[2])
                    + (other.group2()[1] * self.group3()[3])
                    - (other.group2()[2] * self.group0()[0])
                    + (other.group2()[3] * self.group2()[1])
                    + (other.group3()[0] * self.group3()[2])
                    + (other.group3()[1] * self.group1()[3])
                    - (other.group3()[2] * self.group3()[0])
                    + (other.group3()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) + (other.group0()[2] * self.group2()[3])
                    - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group0()[3])
                    + (other.group1()[3] * self.group3()[2])
                    - (other.group2()[0] * self.group0()[1])
                    + (other.group2()[1] * self.group0()[0])
                    + (other.group2()[2] * self.group3()[3])
                    + (other.group2()[3] * self.group2()[2])
                    - (other.group3()[0] * self.group3()[1])
                    + (other.group3()[1] * self.group3()[0])
                    + (other.group3()[2] * self.group1()[3])
                    + (other.group3()[3] * self.group0()[2])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[0] * self.group3()[0])
                    - (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group3()[2])
                    + (other.group1()[3] * self.group0()[3])
                    + (other.group2()[0] * self.group0()[0])
                    + (other.group2()[1] * self.group0()[1])
                    + (other.group2()[2] * self.group0()[2])
                    + (other.group2()[3] * self.group2()[3])
                    - (other.group3()[0] * self.group1()[0])
                    - (other.group3()[1] * self.group1()[1])
                    - (other.group3()[2] * self.group1()[2])
                    - (other.group3()[3] * self.group3()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((other.group1()[0] * self.group2()[3]) - (other.group1()[1] * self.group2()[2]) + (other.group1()[2] * self.group2()[1]) - (other.group1()[3] * self.group2()[0])
                    + (other.group2()[0] * self.group0()[3])
                    + (other.group2()[0] * self.group1()[3])
                    - (other.group2()[1] * self.group1()[2])
                    - (other.group2()[1] * self.group3()[2])
                    + (other.group2()[2] * self.group1()[1])
                    + (other.group2()[2] * self.group3()[1])
                    - (other.group3()[0] * self.group2()[3])
                    + (other.group3()[1] * self.group2()[2])
                    - (other.group3()[2] * self.group2()[1])
                    + (other.group3()[3] * self.group1()[0])
                    + (other.group3()[3] * self.group3()[0])),
                ((other.group1()[0] * self.group2()[2]) + (other.group1()[1] * self.group2()[3]) - (other.group1()[2] * self.group2()[0]) - (other.group1()[3] * self.group2()[1])
                    + (other.group2()[0] * self.group1()[2])
                    + (other.group2()[0] * self.group3()[2])
                    + (other.group2()[1] * self.group0()[3])
                    + (other.group2()[1] * self.group1()[3])
                    - (other.group2()[2] * self.group1()[0])
                    - (other.group2()[2] * self.group3()[0])
                    - (other.group3()[0] * self.group2()[2])
                    - (other.group3()[1] * self.group2()[3])
                    + (other.group3()[2] * self.group2()[0])
                    + (other.group3()[3] * self.group1()[1])
                    + (other.group3()[3] * self.group3()[1])),
                (-(other.group1()[0] * self.group2()[1]) + (other.group1()[1] * self.group2()[0]) + (other.group1()[2] * self.group2()[3])
                    - (other.group1()[3] * self.group2()[2])
                    - (other.group2()[0] * self.group1()[1])
                    - (other.group2()[0] * self.group3()[1])
                    + (other.group2()[1] * self.group1()[0])
                    + (other.group2()[1] * self.group3()[0])
                    + (other.group2()[2] * self.group0()[3])
                    + (other.group2()[2] * self.group1()[3])
                    + (other.group3()[0] * self.group2()[1])
                    - (other.group3()[1] * self.group2()[0])
                    - (other.group3()[2] * self.group2()[3])
                    + (other.group3()[3] * self.group1()[2])
                    + (other.group3()[3] * self.group3()[2])),
                (-(other.group1()[0] * self.group2()[0])
                    - (other.group1()[1] * self.group2()[1])
                    - (other.group1()[2] * self.group2()[2])
                    - (other.group1()[3] * self.group2()[3])
                    - (other.group2()[0] * self.group1()[0])
                    - (other.group2()[0] * self.group3()[0])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[1] * self.group3()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[2])
                    + (other.group3()[0] * self.group2()[0])
                    + (other.group3()[1] * self.group2()[1])
                    + (other.group3()[2] * self.group2()[2])
                    + (other.group3()[3] * self.group0()[3])
                    + (other.group3()[3] * self.group1()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1]) + (other.group1()[0] * self.group1()[3])
                    - (other.group1()[1] * self.group3()[2])
                    + (other.group1()[2] * self.group3()[1])
                    + (other.group1()[3] * self.group1()[0])
                    - (other.group2()[0] * self.group3()[3])
                    + (other.group2()[1] * self.group0()[2])
                    - (other.group2()[2] * self.group0()[1])
                    + (other.group2()[3] * self.group2()[0])
                    + (other.group3()[0] * self.group0()[3])
                    - (other.group3()[1] * self.group1()[2])
                    + (other.group3()[2] * self.group1()[1])
                    - (other.group3()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group2()[3]) - (other.group0()[2] * self.group2()[0])
                    + (other.group1()[0] * self.group3()[2])
                    + (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group3()[0])
                    + (other.group1()[3] * self.group1()[1])
                    - (other.group2()[0] * self.group0()[2])
                    - (other.group2()[1] * self.group3()[3])
                    + (other.group2()[2] * self.group0()[0])
                    + (other.group2()[3] * self.group2()[1])
                    + (other.group3()[0] * self.group1()[2])
                    + (other.group3()[1] * self.group0()[3])
                    - (other.group3()[2] * self.group1()[0])
                    - (other.group3()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) + (other.group0()[2] * self.group2()[3])
                    - (other.group1()[0] * self.group3()[1])
                    + (other.group1()[1] * self.group3()[0])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])
                    + (other.group2()[0] * self.group0()[1])
                    - (other.group2()[1] * self.group0()[0])
                    - (other.group2()[2] * self.group3()[3])
                    + (other.group2()[3] * self.group2()[2])
                    - (other.group3()[0] * self.group1()[1])
                    + (other.group3()[1] * self.group1()[0])
                    + (other.group3()[2] * self.group0()[3])
                    - (other.group3()[3] * self.group0()[2])),
                (-(other.group0()[0] * self.group1()[0]) + (other.group0()[0] * self.group3()[0]) - (other.group0()[1] * self.group1()[1])
                    + (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])
                    + (other.group1()[3] * self.group3()[3])
                    + (other.group2()[3] * self.group0()[3])
                    - (other.group2()[3] * self.group1()[3])
                    - (other.group3()[0] * self.group0()[0])
                    - (other.group3()[1] * self.group0()[1])
                    - (other.group3()[2] * self.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       16       32        0
    fn geometric_anti_product(self, other: AntiDualNum) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) - (other.group0()[0] * self.group3()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group0()[2])),
                ((other.group0()[0] * self.group2()[3]) + (other.group0()[1] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group1()[2])),
                (-(other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group1()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[1] * self.group2()[0]),
                (other.group0()[1] * self.group2()[1]),
                (other.group0()[1] * self.group2()[2]),
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group3()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group2()[0]) - (other.group0()[1] * self.group3()[0])),
                (-(other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group3()[1])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group3()[2])),
                (other.group0()[1] * self.group2()[3]),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiFlatPoint> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       48       64        0
    fn geometric_anti_product(self, other: AntiFlatPoint) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[3] * self.group0()[0]),
                (other.group0()[3] * self.group0()[1]),
                (other.group0()[3] * self.group0()[2]),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])
                    + (other.group0()[3] * self.group1()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (other.group0()[3] * self.group3()[0])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group3()[3]) - (other.group0()[2] * self.group0()[0]) + (other.group0()[3] * self.group3()[1])),
                (-(other.group0()[0] * self.group0()[1])
                    + (other.group0()[1] * self.group0()[0])
                    + (other.group0()[2] * self.group3()[3])
                    + (other.group0()[3] * self.group3()[2])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) + (other.group0()[3] * self.group0()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2]) - (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (other.group0()[2] * self.group3()[1])
                    - (other.group0()[3] * self.group2()[0])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group0()[3]) + (other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group1()[0])
                    - (other.group0()[2] * self.group3()[0])
                    - (other.group0()[3] * self.group2()[1])),
                (-(other.group0()[0] * self.group1()[1]) - (other.group0()[0] * self.group3()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group0()[3])
                    + (other.group0()[2] * self.group1()[3])
                    - (other.group0()[3] * self.group2()[2])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[0] * self.group3()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group3()[2])
                    - (other.group0()[3] * self.group2()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])
                    + (other.group0()[3] * self.group1()[0])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group3()[3])
                    + (other.group0()[2] * self.group0()[0])
                    + (other.group0()[3] * self.group1()[1])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) - (other.group0()[2] * self.group3()[3]) + (other.group0()[3] * self.group1()[2])),
                (other.group0()[3] * self.group3()[3]),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiFlector> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      112      128        0
    fn geometric_anti_product(self, other: AntiFlector) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((other.group0()[3] * self.group0()[0]) + (other.group1()[0] * self.group3()[3]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[3] * self.group0()[1]) + (other.group1()[0] * self.group0()[2]) + (other.group1()[1] * self.group3()[3]) - (other.group1()[2] * self.group0()[0])),
                ((other.group0()[3] * self.group0()[2]) - (other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0]) + (other.group1()[2] * self.group3()[3])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])
                    + (other.group0()[3] * self.group1()[3])
                    - (other.group1()[0] * self.group3()[0])
                    - (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group3()[2])
                    + (other.group1()[3] * self.group3()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self.group0()[2])
                    + (other.group0()[2] * self.group0()[1])
                    + (other.group0()[3] * self.group3()[0])
                    + (other.group1()[0] * self.group1()[3])
                    - (other.group1()[1] * self.group3()[2])
                    + (other.group1()[2] * self.group3()[1])
                    + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group3()[3]) - (other.group0()[2] * self.group0()[0])
                    + (other.group0()[3] * self.group3()[1])
                    + (other.group1()[0] * self.group3()[2])
                    + (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group3()[0])
                    + (other.group1()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[1])
                    + (other.group0()[1] * self.group0()[0])
                    + (other.group0()[2] * self.group3()[3])
                    + (other.group0()[3] * self.group3()[2])
                    - (other.group1()[0] * self.group3()[1])
                    + (other.group1()[1] * self.group3()[0])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group0()[2])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) + (other.group0()[3] * self.group0()[3])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group3()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2]) - (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (other.group0()[2] * self.group3()[1])
                    - (other.group0()[3] * self.group2()[0])
                    - (other.group1()[0] * self.group2()[3])
                    + (other.group1()[1] * self.group2()[2])
                    - (other.group1()[2] * self.group2()[1])
                    + (other.group1()[3] * self.group1()[0])
                    + (other.group1()[3] * self.group3()[0])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group0()[3]) + (other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group1()[0])
                    - (other.group0()[2] * self.group3()[0])
                    - (other.group0()[3] * self.group2()[1])
                    - (other.group1()[0] * self.group2()[2])
                    - (other.group1()[1] * self.group2()[3])
                    + (other.group1()[2] * self.group2()[0])
                    + (other.group1()[3] * self.group1()[1])
                    + (other.group1()[3] * self.group3()[1])),
                (-(other.group0()[0] * self.group1()[1]) - (other.group0()[0] * self.group3()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group0()[3])
                    + (other.group0()[2] * self.group1()[3])
                    - (other.group0()[3] * self.group2()[2])
                    + (other.group1()[0] * self.group2()[1])
                    - (other.group1()[1] * self.group2()[0])
                    - (other.group1()[2] * self.group2()[3])
                    + (other.group1()[3] * self.group1()[2])
                    + (other.group1()[3] * self.group3()[2])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[0] * self.group3()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group3()[2])
                    - (other.group0()[3] * self.group2()[3])
                    + (other.group1()[0] * self.group2()[0])
                    + (other.group1()[1] * self.group2()[1])
                    + (other.group1()[2] * self.group2()[2])
                    + (other.group1()[3] * self.group0()[3])
                    + (other.group1()[3] * self.group1()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])
                    + (other.group0()[3] * self.group1()[0])
                    + (other.group1()[0] * self.group0()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])
                    - (other.group1()[3] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group3()[3])
                    + (other.group0()[2] * self.group0()[0])
                    + (other.group0()[3] * self.group1()[1])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group0()[3])
                    - (other.group1()[2] * self.group1()[0])
                    - (other.group1()[3] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) - (other.group0()[2] * self.group3()[3]) + (other.group0()[3] * self.group1()[2])
                    - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group0()[3])
                    - (other.group1()[3] * self.group0()[2])),
                ((other.group0()[3] * self.group3()[3]) - (other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiLine> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       80       96        0
    fn geometric_anti_product(self, other: AntiLine) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group3()[3]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group3()[3])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) + (other.group1()[0] * self.group3()[3])
                    - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[3]) - (other.group0()[2] * self.group1()[0])
                    + (other.group1()[0] * self.group0()[2])
                    + (other.group1()[1] * self.group3()[3])
                    - (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group0()[3])
                    - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group3()[3])),
                ((other.group0()[0] * self.group3()[0]) + (other.group0()[1] * self.group3()[1]) + (other.group0()[2] * self.group3()[2])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[1])
                    + (other.group1()[0] * self.group0()[3])
                    + (other.group1()[0] * self.group1()[3])
                    - (other.group1()[1] * self.group1()[2])
                    - (other.group1()[1] * self.group3()[2])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group1()[2] * self.group3()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group2()[3]) - (other.group0()[2] * self.group2()[0])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[0] * self.group3()[2])
                    + (other.group1()[1] * self.group0()[3])
                    + (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group1()[0])
                    - (other.group1()[2] * self.group3()[0])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) + (other.group0()[2] * self.group2()[3])
                    - (other.group1()[0] * self.group1()[1])
                    - (other.group1()[0] * self.group3()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[1] * self.group3()[0])
                    + (other.group1()[2] * self.group0()[3])
                    + (other.group1()[2] * self.group1()[3])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group3()[2]) - (other.group0()[2] * self.group3()[1])
                    + (other.group1()[0] * self.group3()[3])
                    - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group3()[2]) - (other.group0()[1] * self.group1()[3])
                    + (other.group0()[2] * self.group3()[0])
                    + (other.group1()[0] * self.group0()[2])
                    + (other.group1()[1] * self.group3()[3])
                    - (other.group1()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group3()[1]) - (other.group0()[1] * self.group3()[0]) - (other.group0()[2] * self.group1()[3]) - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group3()[3])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[0] * self.group3()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[2] * self.group3()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiMotor> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      112      128        0
    fn geometric_anti_product(self, other: AntiMotor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (other.group0()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group3()[3]) - (other.group0()[2] * self.group0()[0]) + (other.group0()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[1])
                    + (other.group0()[1] * self.group0()[0])
                    + (other.group0()[2] * self.group3()[3])
                    + (other.group0()[3] * self.group0()[2])),
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])
                    + (other.group0()[3] * self.group0()[3])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])
                    + (other.group1()[3] * self.group3()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (other.group0()[3] * self.group1()[0])
                    + (other.group1()[0] * self.group3()[3])
                    - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])
                    + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[3]) - (other.group0()[2] * self.group1()[0])
                    + (other.group0()[3] * self.group1()[1])
                    + (other.group1()[0] * self.group0()[2])
                    + (other.group1()[1] * self.group3()[3])
                    - (other.group1()[2] * self.group0()[0])
                    + (other.group1()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group0()[3])
                    + (other.group0()[3] * self.group1()[2])
                    - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group3()[3])
                    + (other.group1()[3] * self.group0()[2])),
                ((other.group0()[0] * self.group3()[0]) + (other.group0()[1] * self.group3()[1]) + (other.group0()[2] * self.group3()[2])
                    - (other.group0()[3] * self.group1()[3])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])
                    + (other.group1()[3] * self.group3()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[1])
                    + (other.group0()[3] * self.group2()[0])
                    + (other.group1()[0] * self.group0()[3])
                    + (other.group1()[0] * self.group1()[3])
                    - (other.group1()[1] * self.group1()[2])
                    - (other.group1()[1] * self.group3()[2])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group1()[2] * self.group3()[1])
                    + (other.group1()[3] * self.group1()[0])
                    + (other.group1()[3] * self.group3()[0])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group2()[3]) - (other.group0()[2] * self.group2()[0])
                    + (other.group0()[3] * self.group2()[1])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[0] * self.group3()[2])
                    + (other.group1()[1] * self.group0()[3])
                    + (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group1()[0])
                    - (other.group1()[2] * self.group3()[0])
                    + (other.group1()[3] * self.group1()[1])
                    + (other.group1()[3] * self.group3()[1])),
                (-(other.group0()[0] * self.group2()[1])
                    + (other.group0()[1] * self.group2()[0])
                    + (other.group0()[2] * self.group2()[3])
                    + (other.group0()[3] * self.group2()[2])
                    - (other.group1()[0] * self.group1()[1])
                    - (other.group1()[0] * self.group3()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[1] * self.group3()[0])
                    + (other.group1()[2] * self.group0()[3])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])
                    + (other.group1()[3] * self.group3()[2])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])
                    + (other.group0()[3] * self.group3()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group3()[2])
                    - (other.group0()[2] * self.group3()[1])
                    - (other.group0()[3] * self.group3()[0])
                    + (other.group1()[0] * self.group3()[3])
                    - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])
                    + (other.group1()[3] * self.group0()[0])),
                (-(other.group0()[0] * self.group3()[2]) - (other.group0()[1] * self.group1()[3]) + (other.group0()[2] * self.group3()[0])
                    - (other.group0()[3] * self.group3()[1])
                    + (other.group1()[0] * self.group0()[2])
                    + (other.group1()[1] * self.group3()[3])
                    - (other.group1()[2] * self.group0()[0])
                    + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[0] * self.group3()[1])
                    - (other.group0()[1] * self.group3()[0])
                    - (other.group0()[2] * self.group1()[3])
                    - (other.group0()[3] * self.group3()[2])
                    - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group3()[3])
                    + (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[0] * self.group2()[0]) - (other.group0()[1] * self.group2()[1]) - (other.group0()[2] * self.group2()[2])
                    + (other.group0()[3] * self.group2()[3])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[0] * self.group3()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[2] * self.group3()[2])
                    + (other.group1()[3] * self.group0()[3])
                    + (other.group1()[3] * self.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiPlane> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       48       64        0
    fn geometric_anti_product(self, other: AntiPlane) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group3()[3]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group3()[3])),
                (-(other.group0()[0] * self.group3()[0]) - (other.group0()[1] * self.group3()[1]) - (other.group0()[2] * self.group3()[2])
                    + (other.group0()[3] * self.group3()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group3()[2]) + (other.group0()[2] * self.group3()[1]) + (other.group0()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group3()[0]) + (other.group0()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group3()[1])
                    + (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (other.group0()[3] * self.group0()[2])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group0()[3] * self.group3()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(other.group0()[0] * self.group2()[3]) + (other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1])
                    + (other.group0()[3] * self.group1()[0])
                    + (other.group0()[3] * self.group3()[0])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group2()[3])
                    + (other.group0()[2] * self.group2()[0])
                    + (other.group0()[3] * self.group1()[1])
                    + (other.group0()[3] * self.group3()[1])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) - (other.group0()[2] * self.group2()[3])
                    + (other.group0()[3] * self.group1()[2])
                    + (other.group0()[3] * self.group3()[2])),
                ((other.group0()[0] * self.group2()[0])
                    + (other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])
                    + (other.group0()[3] * self.group0()[3])
                    + (other.group0()[3] * self.group1()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) - (other.group0()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[3]) - (other.group0()[2] * self.group1()[0]) - (other.group0()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group0()[3])
                    - (other.group0()[3] * self.group0()[2])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiScalar> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0       16        0
    fn geometric_anti_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other[e12345]),
                (self.group0()[1] * other[e12345]),
                (self.group0()[2] * other[e12345]),
                (self.group0()[3] * other[e12345]),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group1()[0] * other[e12345]),
                (self.group1()[1] * other[e12345]),
                (self.group1()[2] * other[e12345]),
                (self.group1()[3] * other[e12345]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group2()[0] * other[e12345]),
                (self.group2()[1] * other[e12345]),
                (self.group2()[2] * other[e12345]),
                (self.group2()[3] * other[e12345]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group3()[0] * other[e12345]),
                (self.group3()[1] * other[e12345]),
                (self.group3()[2] * other[e12345]),
                (self.group3()[3] * other[e12345]),
            ]),
        );
    }
}
impl GeometricAntiProduct<Circle> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      144      160        0
    fn geometric_anti_product(self, other: Circle) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group1()[1])
                    - (other.group0()[2] * self.group3()[1])
                    + (other.group1()[0] * self.group3()[3])
                    - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])
                    + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group0()[3])
                    - (other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group1()[0])
                    + (other.group0()[2] * self.group3()[0])
                    + (other.group1()[0] * self.group0()[2])
                    + (other.group1()[1] * self.group3()[3])
                    - (other.group1()[2] * self.group0()[0])
                    + (other.group1()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group1()[0])
                    - (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group0()[3])
                    - (other.group0()[2] * self.group1()[3])
                    - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group3()[3])
                    + (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    + (other.group1()[3] * self.group1()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1]) + (other.group2()[0] * self.group3()[3])
                    - (other.group2()[1] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[1])
                    + (other.group1()[0] * self.group0()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group1()[3] * self.group3()[0])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group2()[3]) - (other.group0()[2] * self.group2()[0])
                    + (other.group2()[0] * self.group0()[2])
                    + (other.group2()[1] * self.group3()[3])
                    - (other.group2()[2] * self.group0()[0])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group0()[3])
                    - (other.group1()[2] * self.group1()[0])
                    + (other.group1()[3] * self.group3()[1])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) + (other.group0()[2] * self.group2()[3])
                    - (other.group2()[0] * self.group0()[1])
                    + (other.group2()[1] * self.group0()[0])
                    + (other.group2()[2] * self.group3()[3])
                    - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group0()[3])
                    + (other.group1()[3] * self.group3()[2])),
                (-(other.group0()[0] * self.group2()[0]) - (other.group0()[1] * self.group2()[1]) - (other.group0()[2] * self.group2()[2])
                    + (other.group2()[0] * self.group0()[0])
                    + (other.group2()[1] * self.group0()[1])
                    + (other.group2()[2] * self.group0()[2])
                    - (other.group1()[0] * self.group3()[0])
                    - (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group3()[2])
                    + (other.group1()[3] * self.group0()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((other.group2()[0] * self.group0()[3]) + (other.group2()[0] * self.group1()[3]) - (other.group2()[1] * self.group1()[2]) - (other.group2()[1] * self.group3()[2])
                    + (other.group2()[2] * self.group1()[1])
                    + (other.group2()[2] * self.group3()[1])
                    + (other.group1()[0] * self.group2()[3])
                    - (other.group1()[1] * self.group2()[2])
                    + (other.group1()[2] * self.group2()[1])
                    - (other.group1()[3] * self.group2()[0])),
                ((other.group2()[0] * self.group1()[2]) + (other.group2()[0] * self.group3()[2]) + (other.group2()[1] * self.group0()[3]) + (other.group2()[1] * self.group1()[3])
                    - (other.group2()[2] * self.group1()[0])
                    - (other.group2()[2] * self.group3()[0])
                    + (other.group1()[0] * self.group2()[2])
                    + (other.group1()[1] * self.group2()[3])
                    - (other.group1()[2] * self.group2()[0])
                    - (other.group1()[3] * self.group2()[1])),
                (-(other.group2()[0] * self.group1()[1]) - (other.group2()[0] * self.group3()[1])
                    + (other.group2()[1] * self.group1()[0])
                    + (other.group2()[1] * self.group3()[0])
                    + (other.group2()[2] * self.group0()[3])
                    + (other.group2()[2] * self.group1()[3])
                    - (other.group1()[0] * self.group2()[1])
                    + (other.group1()[1] * self.group2()[0])
                    + (other.group1()[2] * self.group2()[3])
                    - (other.group1()[3] * self.group2()[2])),
                (-(other.group2()[0] * self.group1()[0])
                    - (other.group2()[0] * self.group3()[0])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[1] * self.group3()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[2])
                    - (other.group1()[0] * self.group2()[0])
                    - (other.group1()[1] * self.group2()[1])
                    - (other.group1()[2] * self.group2()[2])
                    - (other.group1()[3] * self.group2()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1]) - (other.group2()[0] * self.group3()[3])
                    + (other.group2()[1] * self.group0()[2])
                    - (other.group2()[2] * self.group0()[1])
                    + (other.group1()[0] * self.group1()[3])
                    - (other.group1()[1] * self.group3()[2])
                    + (other.group1()[2] * self.group3()[1])
                    + (other.group1()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group2()[3])
                    - (other.group0()[2] * self.group2()[0])
                    - (other.group2()[0] * self.group0()[2])
                    - (other.group2()[1] * self.group3()[3])
                    + (other.group2()[2] * self.group0()[0])
                    + (other.group1()[0] * self.group3()[2])
                    + (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group3()[0])
                    + (other.group1()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[1])
                    + (other.group0()[1] * self.group2()[0])
                    + (other.group0()[2] * self.group2()[3])
                    + (other.group2()[0] * self.group0()[1])
                    - (other.group2()[1] * self.group0()[0])
                    - (other.group2()[2] * self.group3()[3])
                    - (other.group1()[0] * self.group3()[1])
                    + (other.group1()[1] * self.group3()[0])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])),
                (-(other.group0()[0] * self.group1()[0]) + (other.group0()[0] * self.group3()[0]) - (other.group0()[1] * self.group1()[1])
                    + (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])
                    + (other.group1()[3] * self.group3()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<CircleRotor> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      160      176        0
    fn geometric_anti_product(self, other: CircleRotor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group1()[1])
                    - (other.group0()[2] * self.group3()[1])
                    + (other.group1()[0] * self.group3()[3])
                    - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])
                    + (other.group1()[3] * self.group0()[0])
                    + (other.group2()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group0()[3])
                    - (other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group1()[0])
                    + (other.group0()[2] * self.group3()[0])
                    + (other.group1()[0] * self.group0()[2])
                    + (other.group1()[1] * self.group3()[3])
                    - (other.group1()[2] * self.group0()[0])
                    + (other.group1()[3] * self.group0()[1])
                    + (other.group2()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group1()[0])
                    - (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group0()[3])
                    - (other.group0()[2] * self.group1()[3])
                    - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group3()[3])
                    + (other.group1()[3] * self.group0()[2])
                    + (other.group2()[3] * self.group0()[2])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    + (other.group1()[3] * self.group1()[3])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    + (other.group2()[3] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1]) + (other.group1()[0] * self.group0()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group1()[3] * self.group3()[0])
                    + (other.group2()[0] * self.group3()[3])
                    - (other.group2()[1] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[1])
                    + (other.group2()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group2()[3]) - (other.group0()[2] * self.group2()[0])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group0()[3])
                    - (other.group1()[2] * self.group1()[0])
                    + (other.group1()[3] * self.group3()[1])
                    + (other.group2()[0] * self.group0()[2])
                    + (other.group2()[1] * self.group3()[3])
                    - (other.group2()[2] * self.group0()[0])
                    + (other.group2()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) + (other.group0()[2] * self.group2()[3])
                    - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group0()[3])
                    + (other.group1()[3] * self.group3()[2])
                    - (other.group2()[0] * self.group0()[1])
                    + (other.group2()[1] * self.group0()[0])
                    + (other.group2()[2] * self.group3()[3])
                    + (other.group2()[3] * self.group1()[2])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[0] * self.group3()[0])
                    - (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group3()[2])
                    + (other.group1()[3] * self.group0()[3])
                    + (other.group2()[0] * self.group0()[0])
                    + (other.group2()[1] * self.group0()[1])
                    + (other.group2()[2] * self.group0()[2])
                    + (other.group2()[3] * self.group1()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((other.group1()[0] * self.group2()[3]) - (other.group1()[1] * self.group2()[2]) + (other.group1()[2] * self.group2()[1]) - (other.group1()[3] * self.group2()[0])
                    + (other.group2()[0] * self.group0()[3])
                    + (other.group2()[0] * self.group1()[3])
                    - (other.group2()[1] * self.group1()[2])
                    - (other.group2()[1] * self.group3()[2])
                    + (other.group2()[2] * self.group1()[1])
                    + (other.group2()[2] * self.group3()[1])
                    + (other.group2()[3] * self.group2()[0])),
                ((other.group1()[0] * self.group2()[2]) + (other.group1()[1] * self.group2()[3]) - (other.group1()[2] * self.group2()[0]) - (other.group1()[3] * self.group2()[1])
                    + (other.group2()[0] * self.group1()[2])
                    + (other.group2()[0] * self.group3()[2])
                    + (other.group2()[1] * self.group0()[3])
                    + (other.group2()[1] * self.group1()[3])
                    - (other.group2()[2] * self.group1()[0])
                    - (other.group2()[2] * self.group3()[0])
                    + (other.group2()[3] * self.group2()[1])),
                (-(other.group1()[0] * self.group2()[1]) + (other.group1()[1] * self.group2()[0]) + (other.group1()[2] * self.group2()[3])
                    - (other.group1()[3] * self.group2()[2])
                    - (other.group2()[0] * self.group1()[1])
                    - (other.group2()[0] * self.group3()[1])
                    + (other.group2()[1] * self.group1()[0])
                    + (other.group2()[1] * self.group3()[0])
                    + (other.group2()[2] * self.group0()[3])
                    + (other.group2()[2] * self.group1()[3])
                    + (other.group2()[3] * self.group2()[2])),
                (-(other.group1()[0] * self.group2()[0])
                    - (other.group1()[1] * self.group2()[1])
                    - (other.group1()[2] * self.group2()[2])
                    - (other.group1()[3] * self.group2()[3])
                    - (other.group2()[0] * self.group1()[0])
                    - (other.group2()[0] * self.group3()[0])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[1] * self.group3()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[2])
                    + (other.group2()[3] * self.group2()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1]) + (other.group1()[0] * self.group1()[3])
                    - (other.group1()[1] * self.group3()[2])
                    + (other.group1()[2] * self.group3()[1])
                    + (other.group1()[3] * self.group1()[0])
                    - (other.group2()[0] * self.group3()[3])
                    + (other.group2()[1] * self.group0()[2])
                    - (other.group2()[2] * self.group0()[1])
                    + (other.group2()[3] * self.group3()[0])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group2()[3]) - (other.group0()[2] * self.group2()[0])
                    + (other.group1()[0] * self.group3()[2])
                    + (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group3()[0])
                    + (other.group1()[3] * self.group1()[1])
                    - (other.group2()[0] * self.group0()[2])
                    - (other.group2()[1] * self.group3()[3])
                    + (other.group2()[2] * self.group0()[0])
                    + (other.group2()[3] * self.group3()[1])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) + (other.group0()[2] * self.group2()[3])
                    - (other.group1()[0] * self.group3()[1])
                    + (other.group1()[1] * self.group3()[0])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])
                    + (other.group2()[0] * self.group0()[1])
                    - (other.group2()[1] * self.group0()[0])
                    - (other.group2()[2] * self.group3()[3])
                    + (other.group2()[3] * self.group3()[2])),
                (-(other.group0()[0] * self.group1()[0]) + (other.group0()[0] * self.group3()[0]) - (other.group0()[1] * self.group1()[1])
                    + (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])
                    + (other.group1()[3] * self.group3()[3])
                    + (other.group2()[3] * self.group3()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Dipole> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      144      160        0
    fn geometric_anti_product(self, other: Dipole) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group1()[1])
                    - (other.group0()[2] * self.group3()[1])
                    + (other.group1()[0] * self.group3()[3])
                    - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])
                    - (other.group1()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group0()[3])
                    - (other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group1()[0])
                    + (other.group0()[2] * self.group3()[0])
                    + (other.group1()[0] * self.group0()[2])
                    + (other.group1()[1] * self.group3()[3])
                    - (other.group1()[2] * self.group0()[0])
                    - (other.group1()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group1()[0])
                    - (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group0()[3])
                    - (other.group0()[2] * self.group1()[3])
                    - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group3()[3])
                    - (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1]) + (other.group2()[0] * self.group3()[3])
                    - (other.group2()[1] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[1])
                    + (other.group1()[0] * self.group0()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])
                    - (other.group1()[3] * self.group3()[0])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group2()[3]) - (other.group0()[2] * self.group2()[0])
                    + (other.group2()[0] * self.group0()[2])
                    + (other.group2()[1] * self.group3()[3])
                    - (other.group2()[2] * self.group0()[0])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group0()[3])
                    - (other.group1()[2] * self.group1()[0])
                    - (other.group1()[3] * self.group3()[1])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) + (other.group0()[2] * self.group2()[3])
                    - (other.group2()[0] * self.group0()[1])
                    + (other.group2()[1] * self.group0()[0])
                    + (other.group2()[2] * self.group3()[3])
                    - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group0()[3])
                    - (other.group1()[3] * self.group3()[2])),
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    + (other.group1()[0] * self.group3()[0])
                    + (other.group1()[1] * self.group3()[1])
                    + (other.group1()[2] * self.group3()[2])
                    + (other.group1()[3] * self.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group2()[0] * self.group0()[3]) + (other.group2()[0] * self.group1()[3]) - (other.group2()[1] * self.group1()[2]) - (other.group2()[1] * self.group3()[2])
                    + (other.group2()[2] * self.group1()[1])
                    + (other.group2()[2] * self.group3()[1])
                    + (other.group1()[0] * self.group2()[3])
                    - (other.group1()[1] * self.group2()[2])
                    + (other.group1()[2] * self.group2()[1])
                    + (other.group1()[3] * self.group2()[0])),
                ((other.group2()[0] * self.group1()[2]) + (other.group2()[0] * self.group3()[2]) + (other.group2()[1] * self.group0()[3]) + (other.group2()[1] * self.group1()[3])
                    - (other.group2()[2] * self.group1()[0])
                    - (other.group2()[2] * self.group3()[0])
                    + (other.group1()[0] * self.group2()[2])
                    + (other.group1()[1] * self.group2()[3])
                    - (other.group1()[2] * self.group2()[0])
                    + (other.group1()[3] * self.group2()[1])),
                (-(other.group2()[0] * self.group1()[1]) - (other.group2()[0] * self.group3()[1])
                    + (other.group2()[1] * self.group1()[0])
                    + (other.group2()[1] * self.group3()[0])
                    + (other.group2()[2] * self.group0()[3])
                    + (other.group2()[2] * self.group1()[3])
                    - (other.group1()[0] * self.group2()[1])
                    + (other.group1()[1] * self.group2()[0])
                    + (other.group1()[2] * self.group2()[3])
                    + (other.group1()[3] * self.group2()[2])),
                (-(other.group0()[0] * self.group1()[0]) + (other.group0()[0] * self.group3()[0]) - (other.group0()[1] * self.group1()[1])
                    + (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])
                    - (other.group1()[3] * self.group3()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group2()[3]) + (other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1])
                    + (other.group2()[0] * self.group3()[3])
                    - (other.group2()[1] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[1])
                    - (other.group1()[0] * self.group1()[3])
                    + (other.group1()[1] * self.group3()[2])
                    - (other.group1()[2] * self.group3()[1])
                    + (other.group1()[3] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group2()[3])
                    + (other.group0()[2] * self.group2()[0])
                    + (other.group2()[0] * self.group0()[2])
                    + (other.group2()[1] * self.group3()[3])
                    - (other.group2()[2] * self.group0()[0])
                    - (other.group1()[0] * self.group3()[2])
                    - (other.group1()[1] * self.group1()[3])
                    + (other.group1()[2] * self.group3()[0])
                    + (other.group1()[3] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) - (other.group0()[2] * self.group2()[3]) - (other.group2()[0] * self.group0()[1])
                    + (other.group2()[1] * self.group0()[0])
                    + (other.group2()[2] * self.group3()[3])
                    + (other.group1()[0] * self.group3()[1])
                    - (other.group1()[1] * self.group3()[0])
                    - (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])),
                (-(other.group2()[0] * self.group1()[0])
                    - (other.group2()[0] * self.group3()[0])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[1] * self.group3()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[2])
                    - (other.group1()[0] * self.group2()[0])
                    - (other.group1()[1] * self.group2()[1])
                    - (other.group1()[2] * self.group2()[2])
                    + (other.group1()[3] * self.group2()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<DipoleInversion> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      224      240        0
    fn geometric_anti_product(self, other: DipoleInversion) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group1()[1])
                    - (other.group0()[2] * self.group3()[1])
                    + (other.group1()[0] * self.group3()[3])
                    - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])
                    - (other.group1()[3] * self.group0()[0])
                    + (other.group2()[3] * self.group1()[0])
                    - (other.group2()[3] * self.group3()[0])
                    - (other.group3()[0] * self.group3()[3])
                    + (other.group3()[1] * self.group0()[2])
                    - (other.group3()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group0()[3])
                    - (other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group1()[0])
                    + (other.group0()[2] * self.group3()[0])
                    + (other.group1()[0] * self.group0()[2])
                    + (other.group1()[1] * self.group3()[3])
                    - (other.group1()[2] * self.group0()[0])
                    - (other.group1()[3] * self.group0()[1])
                    + (other.group2()[3] * self.group1()[1])
                    - (other.group2()[3] * self.group3()[1])
                    - (other.group3()[0] * self.group0()[2])
                    - (other.group3()[1] * self.group3()[3])
                    + (other.group3()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group1()[0])
                    - (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group0()[3])
                    - (other.group0()[2] * self.group1()[3])
                    - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group3()[3])
                    - (other.group1()[3] * self.group0()[2])
                    + (other.group2()[3] * self.group1()[2])
                    - (other.group2()[3] * self.group3()[2])
                    + (other.group3()[0] * self.group0()[1])
                    - (other.group3()[1] * self.group0()[0])
                    - (other.group3()[2] * self.group3()[3])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    + (other.group2()[3] * self.group2()[3])
                    + (other.group3()[0] * self.group3()[0])
                    + (other.group3()[1] * self.group3()[1])
                    + (other.group3()[2] * self.group3()[2])
                    + (other.group3()[3] * self.group3()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1]) + (other.group1()[0] * self.group0()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])
                    - (other.group1()[3] * self.group3()[0])
                    + (other.group2()[0] * self.group3()[3])
                    - (other.group2()[1] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[1])
                    + (other.group2()[3] * self.group2()[0])
                    - (other.group3()[0] * self.group1()[3])
                    + (other.group3()[1] * self.group3()[2])
                    - (other.group3()[2] * self.group3()[1])
                    + (other.group3()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group2()[3]) - (other.group0()[2] * self.group2()[0])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group0()[3])
                    - (other.group1()[2] * self.group1()[0])
                    - (other.group1()[3] * self.group3()[1])
                    + (other.group2()[0] * self.group0()[2])
                    + (other.group2()[1] * self.group3()[3])
                    - (other.group2()[2] * self.group0()[0])
                    + (other.group2()[3] * self.group2()[1])
                    - (other.group3()[0] * self.group3()[2])
                    - (other.group3()[1] * self.group1()[3])
                    + (other.group3()[2] * self.group3()[0])
                    + (other.group3()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) + (other.group0()[2] * self.group2()[3])
                    - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group0()[3])
                    - (other.group1()[3] * self.group3()[2])
                    - (other.group2()[0] * self.group0()[1])
                    + (other.group2()[1] * self.group0()[0])
                    + (other.group2()[2] * self.group3()[3])
                    + (other.group2()[3] * self.group2()[2])
                    + (other.group3()[0] * self.group3()[1])
                    - (other.group3()[1] * self.group3()[0])
                    - (other.group3()[2] * self.group1()[3])
                    + (other.group3()[3] * self.group0()[2])),
                ((other.group0()[0] * self.group2()[0])
                    + (other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])
                    + (other.group1()[0] * self.group3()[0])
                    + (other.group1()[1] * self.group3()[1])
                    + (other.group1()[2] * self.group3()[2])
                    + (other.group1()[3] * self.group0()[3])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    - (other.group2()[3] * self.group2()[3])
                    - (other.group3()[0] * self.group1()[0])
                    - (other.group3()[1] * self.group1()[1])
                    - (other.group3()[2] * self.group1()[2])
                    + (other.group3()[3] * self.group3()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group1()[0] * self.group2()[3]) - (other.group1()[1] * self.group2()[2])
                    + (other.group1()[2] * self.group2()[1])
                    + (other.group1()[3] * self.group2()[0])
                    + (other.group2()[0] * self.group0()[3])
                    + (other.group2()[0] * self.group1()[3])
                    - (other.group2()[1] * self.group1()[2])
                    - (other.group2()[1] * self.group3()[2])
                    + (other.group2()[2] * self.group1()[1])
                    + (other.group2()[2] * self.group3()[1])
                    + (other.group3()[0] * self.group2()[3])
                    - (other.group3()[1] * self.group2()[2])
                    + (other.group3()[2] * self.group2()[1])
                    + (other.group3()[3] * self.group1()[0])
                    + (other.group3()[3] * self.group3()[0])),
                ((other.group1()[0] * self.group2()[2]) + (other.group1()[1] * self.group2()[3]) - (other.group1()[2] * self.group2()[0])
                    + (other.group1()[3] * self.group2()[1])
                    + (other.group2()[0] * self.group1()[2])
                    + (other.group2()[0] * self.group3()[2])
                    + (other.group2()[1] * self.group0()[3])
                    + (other.group2()[1] * self.group1()[3])
                    - (other.group2()[2] * self.group1()[0])
                    - (other.group2()[2] * self.group3()[0])
                    + (other.group3()[0] * self.group2()[2])
                    + (other.group3()[1] * self.group2()[3])
                    - (other.group3()[2] * self.group2()[0])
                    + (other.group3()[3] * self.group1()[1])
                    + (other.group3()[3] * self.group3()[1])),
                (-(other.group1()[0] * self.group2()[1])
                    + (other.group1()[1] * self.group2()[0])
                    + (other.group1()[2] * self.group2()[3])
                    + (other.group1()[3] * self.group2()[2])
                    - (other.group2()[0] * self.group1()[1])
                    - (other.group2()[0] * self.group3()[1])
                    + (other.group2()[1] * self.group1()[0])
                    + (other.group2()[1] * self.group3()[0])
                    + (other.group2()[2] * self.group0()[3])
                    + (other.group2()[2] * self.group1()[3])
                    - (other.group3()[0] * self.group2()[1])
                    + (other.group3()[1] * self.group2()[0])
                    + (other.group3()[2] * self.group2()[3])
                    + (other.group3()[3] * self.group1()[2])
                    + (other.group3()[3] * self.group3()[2])),
                (-(other.group0()[0] * self.group1()[0]) + (other.group0()[0] * self.group3()[0]) - (other.group0()[1] * self.group1()[1])
                    + (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])
                    - (other.group1()[3] * self.group3()[3])
                    + (other.group2()[3] * self.group0()[3])
                    - (other.group2()[3] * self.group1()[3])
                    + (other.group3()[0] * self.group0()[0])
                    + (other.group3()[1] * self.group0()[1])
                    + (other.group3()[2] * self.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group2()[3]) + (other.group0()[1] * self.group2()[2])
                    - (other.group0()[2] * self.group2()[1])
                    - (other.group1()[0] * self.group1()[3])
                    + (other.group1()[1] * self.group3()[2])
                    - (other.group1()[2] * self.group3()[1])
                    + (other.group1()[3] * self.group1()[0])
                    + (other.group2()[0] * self.group3()[3])
                    - (other.group2()[1] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[1])
                    - (other.group2()[3] * self.group2()[0])
                    + (other.group3()[0] * self.group0()[3])
                    - (other.group3()[1] * self.group1()[2])
                    + (other.group3()[2] * self.group1()[1])
                    + (other.group3()[3] * self.group0()[0])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group2()[3]) + (other.group0()[2] * self.group2()[0])
                    - (other.group1()[0] * self.group3()[2])
                    - (other.group1()[1] * self.group1()[3])
                    + (other.group1()[2] * self.group3()[0])
                    + (other.group1()[3] * self.group1()[1])
                    + (other.group2()[0] * self.group0()[2])
                    + (other.group2()[1] * self.group3()[3])
                    - (other.group2()[2] * self.group0()[0])
                    - (other.group2()[3] * self.group2()[1])
                    + (other.group3()[0] * self.group1()[2])
                    + (other.group3()[1] * self.group0()[3])
                    - (other.group3()[2] * self.group1()[0])
                    + (other.group3()[3] * self.group0()[1])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) - (other.group0()[2] * self.group2()[3]) + (other.group1()[0] * self.group3()[1])
                    - (other.group1()[1] * self.group3()[0])
                    - (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])
                    - (other.group2()[0] * self.group0()[1])
                    + (other.group2()[1] * self.group0()[0])
                    + (other.group2()[2] * self.group3()[3])
                    - (other.group2()[3] * self.group2()[2])
                    - (other.group3()[0] * self.group1()[1])
                    + (other.group3()[1] * self.group1()[0])
                    + (other.group3()[2] * self.group0()[3])
                    + (other.group3()[3] * self.group0()[2])),
                (-(other.group1()[0] * self.group2()[0]) - (other.group1()[1] * self.group2()[1]) - (other.group1()[2] * self.group2()[2])
                    + (other.group1()[3] * self.group2()[3])
                    - (other.group2()[0] * self.group1()[0])
                    - (other.group2()[0] * self.group3()[0])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[1] * self.group3()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[2])
                    - (other.group3()[0] * self.group2()[0])
                    - (other.group3()[1] * self.group2()[1])
                    - (other.group3()[2] * self.group2()[2])
                    + (other.group3()[3] * self.group0()[3])
                    + (other.group3()[3] * self.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<DualNum> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       16       32        0
    fn geometric_anti_product(self, other: DualNum) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) - (other.group0()[0] * self.group3()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group0()[2])),
                ((other.group0()[0] * self.group2()[3]) + (other.group0()[1] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group1()[2])),
                ((other.group0()[0] * self.group2()[3]) + (other.group0()[1] * self.group1()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other.group0()[1] * self.group2()[0]),
                (other.group0()[1] * self.group2()[1]),
                (other.group0()[1] * self.group2()[2]),
                (other.group0()[1] * self.group2()[3]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group3()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group3()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group3()[2])),
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group3()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<FlatPoint> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       48       68        0
    fn geometric_anti_product(self, other: FlatPoint) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[3] * self.group0()[0] * -1.0),
                (other.group0()[3] * self.group0()[1] * -1.0),
                (other.group0()[3] * self.group0()[2] * -1.0),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group0()[3] * self.group1()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) - (other.group0()[3] * self.group3()[0])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group3()[3]) - (other.group0()[2] * self.group0()[0]) - (other.group0()[3] * self.group3()[1])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group3()[3])
                    - (other.group0()[3] * self.group3()[2])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])
                    + (other.group0()[3] * self.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2]) - (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (other.group0()[2] * self.group3()[1])
                    + (other.group0()[3] * self.group2()[0])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group0()[3]) + (other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group1()[0])
                    - (other.group0()[2] * self.group3()[0])
                    + (other.group0()[3] * self.group2()[1])),
                (-(other.group0()[0] * self.group1()[1]) - (other.group0()[0] * self.group3()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group0()[3])
                    + (other.group0()[2] * self.group1()[3])
                    + (other.group0()[3] * self.group2()[2])),
                (other.group0()[3] * self.group3()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (other.group0()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group3()[3]) - (other.group0()[2] * self.group0()[0]) + (other.group0()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group0()[1])
                    + (other.group0()[1] * self.group0()[0])
                    + (other.group0()[2] * self.group3()[3])
                    + (other.group0()[3] * self.group1()[2])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[0] * self.group3()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group3()[2])
                    + (other.group0()[3] * self.group2()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Flector> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      112      128        0
    fn geometric_anti_product(self, other: Flector) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(other.group0()[3] * self.group0()[0]) - (other.group1()[0] * self.group3()[3]) + (other.group1()[1] * self.group0()[2])
                    - (other.group1()[2] * self.group0()[1])),
                (-(other.group0()[3] * self.group0()[1]) - (other.group1()[0] * self.group0()[2]) - (other.group1()[1] * self.group3()[3])
                    + (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[3] * self.group0()[2]) + (other.group1()[0] * self.group0()[1])
                    - (other.group1()[1] * self.group0()[0])
                    - (other.group1()[2] * self.group3()[3])),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group0()[3] * self.group1()[3])
                    + (other.group1()[0] * self.group3()[0])
                    + (other.group1()[1] * self.group3()[1])
                    + (other.group1()[2] * self.group3()[2])
                    + (other.group1()[3] * self.group3()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])
                    - (other.group0()[3] * self.group3()[0])
                    - (other.group1()[0] * self.group1()[3])
                    + (other.group1()[1] * self.group3()[2])
                    - (other.group1()[2] * self.group3()[1])
                    + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group3()[3])
                    - (other.group0()[2] * self.group0()[0])
                    - (other.group0()[3] * self.group3()[1])
                    - (other.group1()[0] * self.group3()[2])
                    - (other.group1()[1] * self.group1()[3])
                    + (other.group1()[2] * self.group3()[0])
                    + (other.group1()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group3()[3])
                    - (other.group0()[3] * self.group3()[2])
                    + (other.group1()[0] * self.group3()[1])
                    - (other.group1()[1] * self.group3()[0])
                    - (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])
                    + (other.group0()[3] * self.group0()[3])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    + (other.group1()[3] * self.group3()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2]) - (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (other.group0()[2] * self.group3()[1])
                    + (other.group0()[3] * self.group2()[0])
                    + (other.group1()[0] * self.group2()[3])
                    - (other.group1()[1] * self.group2()[2])
                    + (other.group1()[2] * self.group2()[1])
                    + (other.group1()[3] * self.group1()[0])
                    + (other.group1()[3] * self.group3()[0])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group0()[3]) + (other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group1()[0])
                    - (other.group0()[2] * self.group3()[0])
                    + (other.group0()[3] * self.group2()[1])
                    + (other.group1()[0] * self.group2()[2])
                    + (other.group1()[1] * self.group2()[3])
                    - (other.group1()[2] * self.group2()[0])
                    + (other.group1()[3] * self.group1()[1])
                    + (other.group1()[3] * self.group3()[1])),
                (-(other.group0()[0] * self.group1()[1]) - (other.group0()[0] * self.group3()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group0()[3])
                    + (other.group0()[2] * self.group1()[3])
                    + (other.group0()[3] * self.group2()[2])
                    - (other.group1()[0] * self.group2()[1])
                    + (other.group1()[1] * self.group2()[0])
                    + (other.group1()[2] * self.group2()[3])
                    + (other.group1()[3] * self.group1()[2])
                    + (other.group1()[3] * self.group3()[2])),
                (-(other.group0()[3] * self.group3()[3])
                    + (other.group1()[0] * self.group0()[0])
                    + (other.group1()[1] * self.group0()[1])
                    + (other.group1()[2] * self.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self.group0()[2])
                    + (other.group0()[2] * self.group0()[1])
                    + (other.group0()[3] * self.group1()[0])
                    + (other.group1()[0] * self.group0()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group3()[3]) - (other.group0()[2] * self.group0()[0])
                    + (other.group0()[3] * self.group1()[1])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group0()[3])
                    - (other.group1()[2] * self.group1()[0])
                    + (other.group1()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[1])
                    + (other.group0()[1] * self.group0()[0])
                    + (other.group0()[2] * self.group3()[3])
                    + (other.group0()[3] * self.group1()[2])
                    - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group0()[3])
                    + (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[0] * self.group3()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group3()[2])
                    + (other.group0()[3] * self.group2()[3])
                    - (other.group1()[0] * self.group2()[0])
                    - (other.group1()[1] * self.group2()[1])
                    - (other.group1()[2] * self.group2()[2])
                    + (other.group1()[3] * self.group0()[3])
                    + (other.group1()[3] * self.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Line> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       80       96        0
    fn geometric_anti_product(self, other: Line) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group3()[3]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group3()[3])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) + (other.group1()[0] * self.group3()[3])
                    - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[3]) - (other.group0()[2] * self.group1()[0])
                    + (other.group1()[0] * self.group0()[2])
                    + (other.group1()[1] * self.group3()[3])
                    - (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group0()[3])
                    - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group3()[3])),
                (-(other.group0()[0] * self.group3()[0]) - (other.group0()[1] * self.group3()[1]) - (other.group0()[2] * self.group3()[2])
                    + (other.group1()[0] * self.group0()[0])
                    + (other.group1()[1] * self.group0()[1])
                    + (other.group1()[2] * self.group0()[2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[1])
                    + (other.group1()[0] * self.group0()[3])
                    + (other.group1()[0] * self.group1()[3])
                    - (other.group1()[1] * self.group1()[2])
                    - (other.group1()[1] * self.group3()[2])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group1()[2] * self.group3()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group2()[3]) - (other.group0()[2] * self.group2()[0])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[0] * self.group3()[2])
                    + (other.group1()[1] * self.group0()[3])
                    + (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group1()[0])
                    - (other.group1()[2] * self.group3()[0])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) + (other.group0()[2] * self.group2()[3])
                    - (other.group1()[0] * self.group1()[1])
                    - (other.group1()[0] * self.group3()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[1] * self.group3()[0])
                    + (other.group1()[2] * self.group0()[3])
                    + (other.group1()[2] * self.group1()[3])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[0] * self.group3()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[2] * self.group3()[2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group3()[2]) + (other.group0()[2] * self.group3()[1]) - (other.group1()[0] * self.group3()[3])
                    + (other.group1()[1] * self.group0()[2])
                    - (other.group1()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group3()[0])
                    - (other.group1()[0] * self.group0()[2])
                    - (other.group1()[1] * self.group3()[3])
                    + (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group3()[1])
                    + (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (other.group1()[0] * self.group0()[1])
                    - (other.group1()[1] * self.group0()[0])
                    - (other.group1()[2] * self.group3()[3])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Motor> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      112      128        0
    fn geometric_anti_product(self, other: Motor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (other.group0()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group3()[3]) - (other.group0()[2] * self.group0()[0]) + (other.group0()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[1])
                    + (other.group0()[1] * self.group0()[0])
                    + (other.group0()[2] * self.group3()[3])
                    + (other.group0()[3] * self.group0()[2])),
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])
                    + (other.group0()[3] * self.group0()[3])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])
                    + (other.group1()[3] * self.group3()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (other.group0()[3] * self.group1()[0])
                    + (other.group1()[0] * self.group3()[3])
                    - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])
                    + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[3]) - (other.group0()[2] * self.group1()[0])
                    + (other.group0()[3] * self.group1()[1])
                    + (other.group1()[0] * self.group0()[2])
                    + (other.group1()[1] * self.group3()[3])
                    - (other.group1()[2] * self.group0()[0])
                    + (other.group1()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group0()[3])
                    + (other.group0()[3] * self.group1()[2])
                    - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group3()[3])
                    + (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[0] * self.group3()[0]) - (other.group0()[1] * self.group3()[1]) - (other.group0()[2] * self.group3()[2])
                    + (other.group0()[3] * self.group1()[3])
                    + (other.group1()[0] * self.group0()[0])
                    + (other.group1()[1] * self.group0()[1])
                    + (other.group1()[2] * self.group0()[2])
                    - (other.group1()[3] * self.group3()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[1])
                    + (other.group0()[3] * self.group2()[0])
                    + (other.group1()[0] * self.group0()[3])
                    + (other.group1()[0] * self.group1()[3])
                    - (other.group1()[1] * self.group1()[2])
                    - (other.group1()[1] * self.group3()[2])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group1()[2] * self.group3()[1])
                    + (other.group1()[3] * self.group1()[0])
                    + (other.group1()[3] * self.group3()[0])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group2()[3]) - (other.group0()[2] * self.group2()[0])
                    + (other.group0()[3] * self.group2()[1])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[0] * self.group3()[2])
                    + (other.group1()[1] * self.group0()[3])
                    + (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group1()[0])
                    - (other.group1()[2] * self.group3()[0])
                    + (other.group1()[3] * self.group1()[1])
                    + (other.group1()[3] * self.group3()[1])),
                (-(other.group0()[0] * self.group2()[1])
                    + (other.group0()[1] * self.group2()[0])
                    + (other.group0()[2] * self.group2()[3])
                    + (other.group0()[3] * self.group2()[2])
                    - (other.group1()[0] * self.group1()[1])
                    - (other.group1()[0] * self.group3()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[1] * self.group3()[0])
                    + (other.group1()[2] * self.group0()[3])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])
                    + (other.group1()[3] * self.group3()[2])),
                (-(other.group0()[0] * self.group2()[0]) - (other.group0()[1] * self.group2()[1]) - (other.group0()[2] * self.group2()[2])
                    + (other.group0()[3] * self.group2()[3])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[0] * self.group3()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[2] * self.group3()[2])
                    + (other.group1()[3] * self.group0()[3])
                    + (other.group1()[3] * self.group1()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group3()[2]) + (other.group0()[2] * self.group3()[1]) + (other.group0()[3] * self.group3()[0])
                    - (other.group1()[0] * self.group3()[3])
                    + (other.group1()[1] * self.group0()[2])
                    - (other.group1()[2] * self.group0()[1])
                    - (other.group1()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group3()[0]) + (other.group0()[3] * self.group3()[1])
                    - (other.group1()[0] * self.group0()[2])
                    - (other.group1()[1] * self.group3()[3])
                    + (other.group1()[2] * self.group0()[0])
                    - (other.group1()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group3()[1])
                    + (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (other.group0()[3] * self.group3()[2])
                    + (other.group1()[0] * self.group0()[1])
                    - (other.group1()[1] * self.group0()[0])
                    - (other.group1()[2] * self.group3()[3])
                    - (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])
                    + (other.group0()[3] * self.group3()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<MultiVector> for VersorEven {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      480      512        0
    fn geometric_anti_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((other.group0()[0] * self.group0()[3])
                    - (other.group4()[0] * self.group2()[0])
                    - (other.group4()[1] * self.group2()[1])
                    - (other.group4()[2] * self.group2()[2])
                    - (other.group5()[0] * self.group1()[0])
                    - (other.group5()[1] * self.group1()[1])
                    - (other.group5()[2] * self.group1()[2])
                    - (other.group3()[0] * self.group0()[0])
                    - (other.group3()[1] * self.group0()[1])
                    - (other.group3()[2] * self.group0()[2])
                    - (other.group3()[3] * self.group1()[3])
                    + (other.group9()[0] * self.group3()[0])
                    + (other.group9()[1] * self.group3()[1])
                    + (other.group9()[2] * self.group3()[2])
                    + (other.group9()[3] * self.group3()[3])
                    + (self.group2()[3] * other[e45])),
                ((other.group0()[1] * self.group0()[3])
                    - (other.group7()[0] * self.group2()[0])
                    - (other.group7()[1] * self.group2()[1])
                    - (other.group7()[2] * self.group2()[2])
                    - (other.group8()[0] * self.group0()[0])
                    - (other.group8()[1] * self.group0()[1])
                    - (other.group8()[2] * self.group0()[2])
                    - (other.group1()[0] * self.group3()[0])
                    - (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group3()[2])
                    + (other.group1()[3] * self.group2()[3])
                    - (other.group6()[0] * self.group1()[0])
                    - (other.group6()[1] * self.group1()[1])
                    - (other.group6()[2] * self.group1()[2])
                    + (other.group6()[3] * self.group1()[3])
                    + (self.group3()[3] * other[e1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[1] * self.group3()[0]) + (other.group7()[0] * self.group2()[3]) - (other.group7()[1] * self.group2()[2]) + (other.group7()[2] * self.group2()[1])
                    - (other.group8()[0] * self.group3()[3])
                    + (other.group8()[1] * self.group0()[2])
                    - (other.group8()[2] * self.group0()[1])
                    + (other.group1()[0] * self.group0()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group1()[3] * self.group2()[0])
                    + (other.group6()[0] * self.group1()[3])
                    - (other.group6()[1] * self.group3()[2])
                    + (other.group6()[2] * self.group3()[1])
                    + (other.group6()[3] * self.group1()[0])
                    - (self.group0()[0] * other[e1])),
                ((other.group0()[1] * self.group3()[1]) + (other.group7()[0] * self.group2()[2]) + (other.group7()[1] * self.group2()[3])
                    - (other.group7()[2] * self.group2()[0])
                    - (other.group8()[0] * self.group0()[2])
                    - (other.group8()[1] * self.group3()[3])
                    + (other.group8()[2] * self.group0()[0])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group0()[3])
                    - (other.group1()[2] * self.group1()[0])
                    + (other.group1()[3] * self.group2()[1])
                    + (other.group6()[0] * self.group3()[2])
                    + (other.group6()[1] * self.group1()[3])
                    - (other.group6()[2] * self.group3()[0])
                    + (other.group6()[3] * self.group1()[1])
                    - (self.group0()[1] * other[e1])),
                ((other.group0()[1] * self.group3()[2]) - (other.group7()[0] * self.group2()[1])
                    + (other.group7()[1] * self.group2()[0])
                    + (other.group7()[2] * self.group2()[3])
                    + (other.group8()[0] * self.group0()[1])
                    - (other.group8()[1] * self.group0()[0])
                    - (other.group8()[2] * self.group3()[3])
                    - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group0()[3])
                    + (other.group1()[3] * self.group2()[2])
                    - (other.group6()[0] * self.group3()[1])
                    + (other.group6()[1] * self.group3()[0])
                    + (other.group6()[2] * self.group1()[3])
                    + (other.group6()[3] * self.group1()[2])
                    - (self.group0()[2] * other[e1])),
                ((other.group0()[1] * self.group3()[3]) - (other.group7()[0] * self.group1()[0]) + (other.group7()[0] * self.group3()[0]) - (other.group7()[1] * self.group1()[1])
                    + (other.group7()[1] * self.group3()[1])
                    - (other.group7()[2] * self.group1()[2])
                    + (other.group7()[2] * self.group3()[2])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])
                    + (other.group1()[3] * self.group0()[3])
                    - (other.group1()[3] * self.group1()[3])
                    - (other.group6()[0] * self.group0()[0])
                    - (other.group6()[1] * self.group0()[1])
                    - (other.group6()[2] * self.group0()[2])
                    + (other.group6()[3] * self.group3()[3])),
            ]),
            // e5
            ((other.group0()[1] * self.group2()[3])
                - (other.group8()[0] * self.group1()[0])
                - (other.group8()[0] * self.group3()[0])
                - (other.group8()[1] * self.group1()[1])
                - (other.group8()[1] * self.group3()[1])
                - (other.group8()[2] * self.group1()[2])
                - (other.group8()[2] * self.group3()[2])
                + (other.group1()[0] * self.group2()[0])
                + (other.group1()[1] * self.group2()[1])
                + (other.group1()[2] * self.group2()[2])
                - (other.group6()[0] * self.group2()[0])
                - (other.group6()[1] * self.group2()[1])
                - (other.group6()[2] * self.group2()[2])
                - (other.group6()[3] * self.group2()[3])
                + (self.group0()[3] * other[e1])
                + (self.group1()[3] * other[e1])),
            // e15, e25, e35, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) + (other.group5()[0] * self.group2()[3]) - (other.group5()[1] * self.group2()[2])
                    + (other.group5()[2] * self.group2()[1])
                    + (other.group3()[0] * self.group0()[3])
                    + (other.group3()[0] * self.group1()[3])
                    - (other.group3()[1] * self.group1()[2])
                    - (other.group3()[1] * self.group3()[2])
                    + (other.group3()[2] * self.group1()[1])
                    + (other.group3()[2] * self.group3()[1])
                    + (other.group3()[3] * self.group2()[0])
                    + (other.group9()[0] * self.group2()[3])
                    - (other.group9()[1] * self.group2()[2])
                    + (other.group9()[2] * self.group2()[1])
                    + (other.group9()[3] * self.group1()[0])
                    + (other.group9()[3] * self.group3()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group5()[0] * self.group2()[2]) + (other.group5()[1] * self.group2()[3]) - (other.group5()[2] * self.group2()[0])
                    + (other.group3()[0] * self.group1()[2])
                    + (other.group3()[0] * self.group3()[2])
                    + (other.group3()[1] * self.group0()[3])
                    + (other.group3()[1] * self.group1()[3])
                    - (other.group3()[2] * self.group1()[0])
                    - (other.group3()[2] * self.group3()[0])
                    + (other.group3()[3] * self.group2()[1])
                    + (other.group9()[0] * self.group2()[2])
                    + (other.group9()[1] * self.group2()[3])
                    - (other.group9()[2] * self.group2()[0])
                    + (other.group9()[3] * self.group1()[1])
                    + (other.group9()[3] * self.group3()[1])),
                ((other.group0()[0] * self.group2()[2]) - (other.group5()[0] * self.group2()[1]) + (other.group5()[1] * self.group2()[0]) + (other.group5()[2] * self.group2()[3])
                    - (other.group3()[0] * self.group1()[1])
                    - (other.group3()[0] * self.group3()[1])
                    + (other.group3()[1] * self.group1()[0])
                    + (other.group3()[1] * self.group3()[0])
                    + (other.group3()[2] * self.group0()[3])
                    + (other.group3()[2] * self.group1()[3])
                    + (other.group3()[3] * self.group2()[2])
                    - (other.group9()[0] * self.group2()[1])
                    + (other.group9()[1] * self.group2()[0])
                    + (other.group9()[2] * self.group2()[3])
                    + (other.group9()[3] * self.group1()[2])
                    + (other.group9()[3] * self.group3()[2])),
                (-(other.group0()[0] * self.group1()[3])
                    + (other.group4()[0] * self.group2()[0])
                    + (other.group4()[1] * self.group2()[1])
                    + (other.group4()[2] * self.group2()[2])
                    + (other.group5()[0] * self.group3()[0])
                    + (other.group5()[1] * self.group3()[1])
                    + (other.group5()[2] * self.group3()[2])
                    - (other.group3()[0] * self.group0()[0])
                    - (other.group3()[1] * self.group0()[1])
                    - (other.group3()[2] * self.group0()[2])
                    + (other.group3()[3] * self.group0()[3])
                    - (other.group9()[0] * self.group1()[0])
                    - (other.group9()[1] * self.group1()[1])
                    - (other.group9()[2] * self.group1()[2])
                    + (other.group9()[3] * self.group3()[3])
                    - (self.group2()[3] * other[e45])),
            ]),
            // e41, e42, e43
            Simd32x3::from([
                ((other.group0()[0] * self.group0()[0]) + (other.group4()[0] * self.group0()[3]) - (other.group4()[0] * self.group1()[3]) - (other.group4()[1] * self.group1()[2])
                    + (other.group4()[1] * self.group3()[2])
                    + (other.group4()[2] * self.group1()[1])
                    - (other.group4()[2] * self.group3()[1])
                    + (other.group5()[0] * self.group3()[3])
                    - (other.group5()[1] * self.group0()[2])
                    + (other.group5()[2] * self.group0()[1])
                    - (other.group3()[3] * self.group0()[0])
                    - (other.group9()[0] * self.group3()[3])
                    + (other.group9()[1] * self.group0()[2])
                    - (other.group9()[2] * self.group0()[1])
                    + (self.group1()[0] * other[e45])
                    - (self.group3()[0] * other[e45])),
                ((other.group0()[0] * self.group0()[1]) + (other.group4()[0] * self.group1()[2]) - (other.group4()[0] * self.group3()[2]) + (other.group4()[1] * self.group0()[3])
                    - (other.group4()[1] * self.group1()[3])
                    - (other.group4()[2] * self.group1()[0])
                    + (other.group4()[2] * self.group3()[0])
                    + (other.group5()[0] * self.group0()[2])
                    + (other.group5()[1] * self.group3()[3])
                    - (other.group5()[2] * self.group0()[0])
                    - (other.group3()[3] * self.group0()[1])
                    - (other.group9()[0] * self.group0()[2])
                    - (other.group9()[1] * self.group3()[3])
                    + (other.group9()[2] * self.group0()[0])
                    + (self.group1()[1] * other[e45])
                    - (self.group3()[1] * other[e45])),
                ((other.group0()[0] * self.group0()[2]) - (other.group4()[0] * self.group1()[1]) + (other.group4()[0] * self.group3()[1]) + (other.group4()[1] * self.group1()[0])
                    - (other.group4()[1] * self.group3()[0])
                    + (other.group4()[2] * self.group0()[3])
                    - (other.group4()[2] * self.group1()[3])
                    - (other.group5()[0] * self.group0()[1])
                    + (other.group5()[1] * self.group0()[0])
                    + (other.group5()[2] * self.group3()[3])
                    - (other.group3()[3] * self.group0()[2])
                    + (other.group9()[0] * self.group0()[1])
                    - (other.group9()[1] * self.group0()[0])
                    - (other.group9()[2] * self.group3()[3])
                    + (self.group1()[2] * other[e45])
                    - (self.group3()[2] * other[e45])),
            ]),
            // e23, e31, e12
            Simd32x3::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group4()[0] * self.group2()[3]) - (other.group4()[1] * self.group2()[2])
                    + (other.group4()[2] * self.group2()[1])
                    + (other.group5()[0] * self.group0()[3])
                    - (other.group5()[1] * self.group1()[2])
                    + (other.group5()[2] * self.group1()[1])
                    + (other.group3()[0] * self.group3()[3])
                    - (other.group3()[1] * self.group0()[2])
                    + (other.group3()[2] * self.group0()[1])
                    - (other.group3()[3] * self.group3()[0])
                    - (other.group9()[0] * self.group1()[3])
                    + (other.group9()[1] * self.group3()[2])
                    - (other.group9()[2] * self.group3()[1])
                    + (other.group9()[3] * self.group0()[0])
                    + (self.group2()[0] * other[e45])),
                ((other.group0()[0] * self.group1()[1]) + (other.group4()[0] * self.group2()[2]) + (other.group4()[1] * self.group2()[3]) - (other.group4()[2] * self.group2()[0])
                    + (other.group5()[0] * self.group1()[2])
                    + (other.group5()[1] * self.group0()[3])
                    - (other.group5()[2] * self.group1()[0])
                    + (other.group3()[0] * self.group0()[2])
                    + (other.group3()[1] * self.group3()[3])
                    - (other.group3()[2] * self.group0()[0])
                    - (other.group3()[3] * self.group3()[1])
                    - (other.group9()[0] * self.group3()[2])
                    - (other.group9()[1] * self.group1()[3])
                    + (other.group9()[2] * self.group3()[0])
                    + (other.group9()[3] * self.group0()[1])
                    + (self.group2()[1] * other[e45])),
                ((other.group0()[0] * self.group1()[2]) - (other.group4()[0] * self.group2()[1]) + (other.group4()[1] * self.group2()[0]) + (other.group4()[2] * self.group2()[3])
                    - (other.group5()[0] * self.group1()[1])
                    + (other.group5()[1] * self.group1()[0])
                    + (other.group5()[2] * self.group0()[3])
                    - (other.group3()[0] * self.group0()[1])
                    + (other.group3()[1] * self.group0()[0])
                    + (other.group3()[2] * self.group3()[3])
                    - (other.group3()[3] * self.group3()[2])
                    + (other.group9()[0] * self.group3()[1])
                    - (other.group9()[1] * self.group3()[0])
                    - (other.group9()[2] * self.group1()[3])
                    + (other.group9()[3] * self.group0()[2])
                    + (self.group2()[2] * other[e45])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[1] * self.group1()[0]) + (other.group7()[0] * self.group2()[3]) - (other.group7()[1] * self.group2()[2])
                    + (other.group7()[2] * self.group2()[1])
                    + (other.group8()[0] * self.group3()[3])
                    - (other.group8()[1] * self.group0()[2])
                    + (other.group8()[2] * self.group0()[1])
                    + (other.group1()[0] * self.group1()[3])
                    - (other.group1()[1] * self.group3()[2])
                    + (other.group1()[2] * self.group3()[1])
                    + (other.group1()[3] * self.group2()[0])
                    + (other.group6()[0] * self.group0()[3])
                    - (other.group6()[1] * self.group1()[2])
                    + (other.group6()[2] * self.group1()[1])
                    + (other.group6()[3] * self.group3()[0])
                    + (self.group0()[0] * other[e1])),
                ((other.group0()[1] * self.group1()[1]) + (other.group7()[0] * self.group2()[2]) + (other.group7()[1] * self.group2()[3]) - (other.group7()[2] * self.group2()[0])
                    + (other.group8()[0] * self.group0()[2])
                    + (other.group8()[1] * self.group3()[3])
                    - (other.group8()[2] * self.group0()[0])
                    + (other.group1()[0] * self.group3()[2])
                    + (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group3()[0])
                    + (other.group1()[3] * self.group2()[1])
                    + (other.group6()[0] * self.group1()[2])
                    + (other.group6()[1] * self.group0()[3])
                    - (other.group6()[2] * self.group1()[0])
                    + (other.group6()[3] * self.group3()[1])
                    + (self.group0()[1] * other[e1])),
                ((other.group0()[1] * self.group1()[2]) - (other.group7()[0] * self.group2()[1]) + (other.group7()[1] * self.group2()[0]) + (other.group7()[2] * self.group2()[3])
                    - (other.group8()[0] * self.group0()[1])
                    + (other.group8()[1] * self.group0()[0])
                    + (other.group8()[2] * self.group3()[3])
                    - (other.group1()[0] * self.group3()[1])
                    + (other.group1()[1] * self.group3()[0])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group2()[2])
                    - (other.group6()[0] * self.group1()[1])
                    + (other.group6()[1] * self.group1()[0])
                    + (other.group6()[2] * self.group0()[3])
                    + (other.group6()[3] * self.group3()[2])
                    + (self.group0()[2] * other[e1])),
                ((other.group0()[1] * self.group1()[3]) - (other.group7()[0] * self.group2()[0]) - (other.group7()[1] * self.group2()[1]) - (other.group7()[2] * self.group2()[2])
                    + (other.group8()[0] * self.group0()[0])
                    + (other.group8()[1] * self.group0()[1])
                    + (other.group8()[2] * self.group0()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    + (other.group1()[3] * self.group2()[3])
                    - (other.group6()[0] * self.group3()[0])
                    - (other.group6()[1] * self.group3()[1])
                    - (other.group6()[2] * self.group3()[2])
                    + (other.group6()[3] * self.group0()[3])
                    - (self.group3()[3] * other[e1])),
            ]),
            // e423, e431, e412
            Simd32x3::from([
                ((other.group0()[1] * self.group0()[0]) + (other.group7()[0] * self.group0()[3]) - (other.group7()[0] * self.group1()[3]) - (other.group7()[1] * self.group1()[2])
                    + (other.group7()[1] * self.group3()[2])
                    + (other.group7()[2] * self.group1()[1])
                    - (other.group7()[2] * self.group3()[1])
                    + (other.group1()[0] * self.group3()[3])
                    - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])
                    + (other.group1()[3] * self.group1()[0])
                    - (other.group1()[3] * self.group3()[0])
                    + (other.group6()[0] * self.group3()[3])
                    - (other.group6()[1] * self.group0()[2])
                    + (other.group6()[2] * self.group0()[1])
                    + (other.group6()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[1]) + (other.group7()[0] * self.group1()[2]) - (other.group7()[0] * self.group3()[2]) + (other.group7()[1] * self.group0()[3])
                    - (other.group7()[1] * self.group1()[3])
                    - (other.group7()[2] * self.group1()[0])
                    + (other.group7()[2] * self.group3()[0])
                    + (other.group1()[0] * self.group0()[2])
                    + (other.group1()[1] * self.group3()[3])
                    - (other.group1()[2] * self.group0()[0])
                    + (other.group1()[3] * self.group1()[1])
                    - (other.group1()[3] * self.group3()[1])
                    + (other.group6()[0] * self.group0()[2])
                    + (other.group6()[1] * self.group3()[3])
                    - (other.group6()[2] * self.group0()[0])
                    + (other.group6()[3] * self.group0()[1])),
                ((other.group0()[1] * self.group0()[2]) - (other.group7()[0] * self.group1()[1]) + (other.group7()[0] * self.group3()[1]) + (other.group7()[1] * self.group1()[0])
                    - (other.group7()[1] * self.group3()[0])
                    + (other.group7()[2] * self.group0()[3])
                    - (other.group7()[2] * self.group1()[3])
                    - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group3()[3])
                    + (other.group1()[3] * self.group1()[2])
                    - (other.group1()[3] * self.group3()[2])
                    - (other.group6()[0] * self.group0()[1])
                    + (other.group6()[1] * self.group0()[0])
                    + (other.group6()[2] * self.group3()[3])
                    + (other.group6()[3] * self.group0()[2])),
            ]),
            // e235, e315, e125
            Simd32x3::from([
                ((other.group0()[1] * self.group2()[0]) + (other.group8()[0] * self.group0()[3]) + (other.group8()[0] * self.group1()[3])
                    - (other.group8()[1] * self.group1()[2])
                    - (other.group8()[1] * self.group3()[2])
                    + (other.group8()[2] * self.group1()[1])
                    + (other.group8()[2] * self.group3()[1])
                    - (other.group1()[0] * self.group2()[3])
                    + (other.group1()[1] * self.group2()[2])
                    - (other.group1()[2] * self.group2()[1])
                    + (other.group6()[0] * self.group2()[3])
                    - (other.group6()[1] * self.group2()[2])
                    + (other.group6()[2] * self.group2()[1])
                    - (other.group6()[3] * self.group2()[0])
                    + (self.group1()[0] * other[e1])
                    + (self.group3()[0] * other[e1])),
                ((other.group0()[1] * self.group2()[1])
                    + (other.group8()[0] * self.group1()[2])
                    + (other.group8()[0] * self.group3()[2])
                    + (other.group8()[1] * self.group0()[3])
                    + (other.group8()[1] * self.group1()[3])
                    - (other.group8()[2] * self.group1()[0])
                    - (other.group8()[2] * self.group3()[0])
                    - (other.group1()[0] * self.group2()[2])
                    - (other.group1()[1] * self.group2()[3])
                    + (other.group1()[2] * self.group2()[0])
                    + (other.group6()[0] * self.group2()[2])
                    + (other.group6()[1] * self.group2()[3])
                    - (other.group6()[2] * self.group2()[0])
                    - (other.group6()[3] * self.group2()[1])
                    + (self.group1()[1] * other[e1])
                    + (self.group3()[1] * other[e1])),
                ((other.group0()[1] * self.group2()[2]) - (other.group8()[0] * self.group1()[1]) - (other.group8()[0] * self.group3()[1])
                    + (other.group8()[1] * self.group1()[0])
                    + (other.group8()[1] * self.group3()[0])
                    + (other.group8()[2] * self.group0()[3])
                    + (other.group8()[2] * self.group1()[3])
                    + (other.group1()[0] * self.group2()[1])
                    - (other.group1()[1] * self.group2()[0])
                    - (other.group1()[2] * self.group2()[3])
                    - (other.group6()[0] * self.group2()[1])
                    + (other.group6()[1] * self.group2()[0])
                    + (other.group6()[2] * self.group2()[3])
                    - (other.group6()[3] * self.group2()[2])
                    + (self.group1()[2] * other[e1])
                    + (self.group3()[2] * other[e1])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group3()[0]) - (other.group4()[0] * self.group2()[3]) + (other.group4()[1] * self.group2()[2])
                    - (other.group4()[2] * self.group2()[1])
                    - (other.group5()[0] * self.group1()[3])
                    + (other.group5()[1] * self.group3()[2])
                    - (other.group5()[2] * self.group3()[1])
                    + (other.group3()[0] * self.group3()[3])
                    - (other.group3()[1] * self.group0()[2])
                    + (other.group3()[2] * self.group0()[1])
                    + (other.group3()[3] * self.group1()[0])
                    + (other.group9()[0] * self.group0()[3])
                    - (other.group9()[1] * self.group1()[2])
                    + (other.group9()[2] * self.group1()[1])
                    + (other.group9()[3] * self.group0()[0])
                    - (self.group2()[0] * other[e45])),
                (-(other.group0()[0] * self.group3()[1]) - (other.group4()[0] * self.group2()[2]) - (other.group4()[1] * self.group2()[3])
                    + (other.group4()[2] * self.group2()[0])
                    - (other.group5()[0] * self.group3()[2])
                    - (other.group5()[1] * self.group1()[3])
                    + (other.group5()[2] * self.group3()[0])
                    + (other.group3()[0] * self.group0()[2])
                    + (other.group3()[1] * self.group3()[3])
                    - (other.group3()[2] * self.group0()[0])
                    + (other.group3()[3] * self.group1()[1])
                    + (other.group9()[0] * self.group1()[2])
                    + (other.group9()[1] * self.group0()[3])
                    - (other.group9()[2] * self.group1()[0])
                    + (other.group9()[3] * self.group0()[1])
                    - (self.group2()[1] * other[e45])),
                (-(other.group0()[0] * self.group3()[2]) + (other.group4()[0] * self.group2()[1])
                    - (other.group4()[1] * self.group2()[0])
                    - (other.group4()[2] * self.group2()[3])
                    + (other.group5()[0] * self.group3()[1])
                    - (other.group5()[1] * self.group3()[0])
                    - (other.group5()[2] * self.group1()[3])
                    - (other.group3()[0] * self.group0()[1])
                    + (other.group3()[1] * self.group0()[0])
                    + (other.group3()[2] * self.group3()[3])
                    + (other.group3()[3] * self.group1()[2])
                    - (other.group9()[0] * self.group1()[1])
                    + (other.group9()[1] * self.group1()[0])
                    + (other.group9()[2] * self.group0()[3])
                    + (other.group9()[3] * self.group0()[2])
                    - (self.group2()[2] * other[e45])),
                ((other.group0()[0] * self.group2()[3])
                    - (other.group5()[0] * self.group2()[0])
                    - (other.group5()[1] * self.group2()[1])
                    - (other.group5()[2] * self.group2()[2])
                    - (other.group3()[0] * self.group1()[0])
                    - (other.group3()[0] * self.group3()[0])
                    - (other.group3()[1] * self.group1()[1])
                    - (other.group3()[1] * self.group3()[1])
                    - (other.group3()[2] * self.group1()[2])
                    - (other.group3()[2] * self.group3()[2])
                    + (other.group3()[3] * self.group2()[3])
                    - (other.group9()[0] * self.group2()[0])
                    - (other.group9()[1] * self.group2()[1])
                    - (other.group9()[2] * self.group2()[2])
                    + (other.group9()[3] * self.group0()[3])
                    + (other.group9()[3] * self.group1()[3])),
            ]),
            // e1234
            ((other.group0()[0] * self.group3()[3]) - (other.group4()[0] * self.group1()[0]) + (other.group4()[0] * self.group3()[0]) - (other.group4()[1] * self.group1()[1])
                + (other.group4()[1] * self.group3()[1])
                - (other.group4()[2] * self.group1()[2])
                + (other.group4()[2] * self.group3()[2])
                - (other.group5()[0] * self.group0()[0])
                - (other.group5()[1] * self.group0()[1])
                - (other.group5()[2] * self.group0()[2])
                - (other.group3()[3] * self.group3()[3])
                + (other.group9()[0] * self.group0()[0])
                + (other.group9()[1] * self.group0()[1])
                + (other.group9()[2] * self.group0()[2])
                + (self.group0()[3] * other[e45])
                - (self.group1()[3] * other[e45])),
        );
    }
}
impl GeometricAntiProduct<Plane> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       48       64        0
    fn geometric_anti_product(self, other: Plane) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group3()[3]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) - (other.group0()[2] * self.group3()[3])),
                ((other.group0()[0] * self.group3()[0]) + (other.group0()[1] * self.group3()[1]) + (other.group0()[2] * self.group3()[2]) + (other.group0()[3] * self.group3()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group3()[2]) - (other.group0()[2] * self.group3()[1])
                    + (other.group0()[3] * self.group0()[0])),
                (-(other.group0()[0] * self.group3()[2]) - (other.group0()[1] * self.group1()[3])
                    + (other.group0()[2] * self.group3()[0])
                    + (other.group0()[3] * self.group0()[1])),
                ((other.group0()[0] * self.group3()[1]) - (other.group0()[1] * self.group3()[0]) - (other.group0()[2] * self.group1()[3]) + (other.group0()[3] * self.group0()[2])),
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])
                    + (other.group0()[3] * self.group3()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[1])
                    + (other.group0()[3] * self.group1()[0])
                    + (other.group0()[3] * self.group3()[0])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group2()[3]) - (other.group0()[2] * self.group2()[0])
                    + (other.group0()[3] * self.group1()[1])
                    + (other.group0()[3] * self.group3()[1])),
                (-(other.group0()[0] * self.group2()[1])
                    + (other.group0()[1] * self.group2()[0])
                    + (other.group0()[2] * self.group2()[3])
                    + (other.group0()[3] * self.group1()[2])
                    + (other.group0()[3] * self.group3()[2])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) + (other.group0()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[3]) - (other.group0()[2] * self.group1()[0]) + (other.group0()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group0()[3])
                    + (other.group0()[3] * self.group0()[2])),
                (-(other.group0()[0] * self.group2()[0]) - (other.group0()[1] * self.group2()[1]) - (other.group0()[2] * self.group2()[2])
                    + (other.group0()[3] * self.group0()[3])
                    + (other.group0()[3] * self.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<RoundPoint> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       64       80        0
    fn geometric_anti_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (other.group0()[3] * self.group1()[0])
                    - (other.group0()[3] * self.group3()[0])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group3()[3]) - (other.group0()[2] * self.group0()[0]) + (other.group0()[3] * self.group1()[1])
                    - (other.group0()[3] * self.group3()[1])),
                (-(other.group0()[0] * self.group0()[1])
                    + (other.group0()[1] * self.group0()[0])
                    + (other.group0()[2] * self.group3()[3])
                    + (other.group0()[3] * self.group1()[2])
                    - (other.group0()[3] * self.group3()[2])),
                (-(other.group0()[0] * self.group3()[0]) - (other.group0()[1] * self.group3()[1]) - (other.group0()[2] * self.group3()[2])
                    + (other.group0()[3] * self.group2()[3])
                    + (self.group3()[3] * other[e2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group3()[1])
                    + (other.group0()[3] * self.group2()[0])
                    + (self.group0()[0] * other[e2])),
                ((other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group3()[0])
                    + (other.group0()[3] * self.group2()[1])
                    + (self.group0()[1] * other[e2])),
                (-(other.group0()[0] * self.group3()[1])
                    + (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (other.group0()[3] * self.group2()[2])
                    + (self.group0()[2] * other[e2])),
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])
                    + (other.group0()[3] * self.group2()[3])
                    - (self.group3()[3] * other[e2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(other.group0()[0] * self.group2()[3]) + (other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1])
                    + (self.group1()[0] * other[e2])
                    + (self.group3()[0] * other[e2])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group2()[3])
                    + (other.group0()[2] * self.group2()[0])
                    + (self.group1()[1] * other[e2])
                    + (self.group3()[1] * other[e2])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) - (other.group0()[2] * self.group2()[3])
                    + (self.group1()[2] * other[e2])
                    + (self.group3()[2] * other[e2])),
                ((other.group0()[0] * self.group2()[0])
                    + (other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])
                    + (self.group0()[3] * other[e2])
                    + (self.group1()[3] * other[e2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) + (other.group0()[3] * self.group2()[0])
                    - (self.group0()[0] * other[e2])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[3]) - (other.group0()[2] * self.group1()[0]) + (other.group0()[3] * self.group2()[1])
                    - (self.group0()[1] * other[e2])),
                (-(other.group0()[0] * self.group1()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group0()[3])
                    + (other.group0()[3] * self.group2()[2])
                    - (self.group0()[2] * other[e2])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])
                    + (other.group0()[3] * self.group0()[3])
                    - (other.group0()[3] * self.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Scalar> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0       20        0
    fn geometric_anti_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other[scalar]),
                (self.group0()[1] * other[scalar]),
                (self.group0()[2] * other[scalar]),
                (self.group0()[3] * other[scalar]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group1()[0] * other[scalar]),
                (self.group1()[1] * other[scalar]),
                (self.group1()[2] * other[scalar]),
                (self.group1()[3] * other[scalar] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group2()[0] * other[scalar]),
                (self.group2()[1] * other[scalar]),
                (self.group2()[2] * other[scalar]),
                (self.group3()[3] * other[scalar]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group3()[0] * other[scalar] * -1.0),
                (self.group3()[1] * other[scalar] * -1.0),
                (self.group3()[2] * other[scalar] * -1.0),
                (self.group2()[3] * other[scalar]),
            ]),
        );
    }
}
impl GeometricAntiProduct<Sphere> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       64       80        0
    fn geometric_anti_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1]) + (self.group1()[0] * other[e4315])
                    - (self.group3()[0] * other[e4315])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group3()[3]) + (other.group0()[2] * self.group0()[0]) + (self.group1()[1] * other[e4315])
                    - (self.group3()[1] * other[e4315])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) - (other.group0()[2] * self.group3()[3]) + (self.group1()[2] * other[e4315])
                    - (self.group3()[2] * other[e4315])),
                ((other.group0()[0] * self.group3()[0])
                    + (other.group0()[1] * self.group3()[1])
                    + (other.group0()[2] * self.group3()[2])
                    + (other.group0()[3] * self.group3()[3])
                    + (self.group2()[3] * other[e4315])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group3()[2]) - (other.group0()[2] * self.group3()[1])
                    + (other.group0()[3] * self.group0()[0])
                    + (self.group2()[0] * other[e4315])),
                (-(other.group0()[0] * self.group3()[2]) - (other.group0()[1] * self.group1()[3])
                    + (other.group0()[2] * self.group3()[0])
                    + (other.group0()[3] * self.group0()[1])
                    + (self.group2()[1] * other[e4315])),
                ((other.group0()[0] * self.group3()[1]) - (other.group0()[1] * self.group3()[0]) - (other.group0()[2] * self.group1()[3])
                    + (other.group0()[3] * self.group0()[2])
                    + (self.group2()[2] * other[e4315])),
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])
                    + (other.group0()[3] * self.group3()[3])
                    - (self.group2()[3] * other[e4315])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[1])
                    + (other.group0()[3] * self.group1()[0])
                    + (other.group0()[3] * self.group3()[0])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group2()[3]) - (other.group0()[2] * self.group2()[0])
                    + (other.group0()[3] * self.group1()[1])
                    + (other.group0()[3] * self.group3()[1])),
                (-(other.group0()[0] * self.group2()[1])
                    + (other.group0()[1] * self.group2()[0])
                    + (other.group0()[2] * self.group2()[3])
                    + (other.group0()[3] * self.group1()[2])
                    + (other.group0()[3] * self.group3()[2])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) + (self.group0()[3] * other[e4315])
                    - (self.group1()[3] * other[e4315])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) + (other.group0()[3] * self.group0()[0])
                    - (self.group2()[0] * other[e4315])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[3]) - (other.group0()[2] * self.group1()[0]) + (other.group0()[3] * self.group0()[1])
                    - (self.group2()[1] * other[e4315])),
                (-(other.group0()[0] * self.group1()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group0()[3])
                    + (other.group0()[3] * self.group0()[2])
                    - (self.group2()[2] * other[e4315])),
                (-(other.group0()[0] * self.group2()[0]) - (other.group0()[1] * self.group2()[1]) - (other.group0()[2] * self.group2()[2])
                    + (other.group0()[3] * self.group0()[3])
                    + (other.group0()[3] * self.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorEven> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      240      256        0
    fn geometric_anti_product(self, other: VersorEven) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group1()[1])
                    - (other.group0()[2] * self.group3()[1])
                    + (other.group0()[3] * self.group0()[0])
                    + (other.group1()[0] * self.group3()[3])
                    - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])
                    + (other.group1()[3] * self.group0()[0])
                    + (other.group3()[0] * self.group3()[3])
                    - (other.group3()[1] * self.group0()[2])
                    + (other.group3()[2] * self.group0()[1])
                    + (other.group3()[3] * self.group1()[0])
                    - (other.group3()[3] * self.group3()[0])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group0()[3])
                    - (other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group1()[0])
                    + (other.group0()[2] * self.group3()[0])
                    + (other.group0()[3] * self.group0()[1])
                    + (other.group1()[0] * self.group0()[2])
                    + (other.group1()[1] * self.group3()[3])
                    - (other.group1()[2] * self.group0()[0])
                    + (other.group1()[3] * self.group0()[1])
                    + (other.group3()[0] * self.group0()[2])
                    + (other.group3()[1] * self.group3()[3])
                    - (other.group3()[2] * self.group0()[0])
                    + (other.group3()[3] * self.group1()[1])
                    - (other.group3()[3] * self.group3()[1])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group1()[0])
                    - (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group0()[3])
                    - (other.group0()[2] * self.group1()[3])
                    + (other.group0()[3] * self.group0()[2])
                    - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group3()[3])
                    + (other.group1()[3] * self.group0()[2])
                    - (other.group3()[0] * self.group0()[1])
                    + (other.group3()[1] * self.group0()[0])
                    + (other.group3()[2] * self.group3()[3])
                    + (other.group3()[3] * self.group1()[2])
                    - (other.group3()[3] * self.group3()[2])),
                (-(other.group0()[0] * self.group2()[0]) - (other.group0()[1] * self.group2()[1]) - (other.group0()[2] * self.group2()[2])
                    + (other.group0()[3] * self.group0()[3])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    + (other.group1()[3] * self.group1()[3])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    + (other.group2()[3] * self.group3()[3])
                    - (other.group3()[0] * self.group3()[0])
                    - (other.group3()[1] * self.group3()[1])
                    - (other.group3()[2] * self.group3()[2])
                    + (other.group3()[3] * self.group2()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[1])
                    + (other.group0()[3] * self.group1()[0])
                    + (other.group1()[0] * self.group0()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group1()[3] * self.group3()[0])
                    + (other.group2()[0] * self.group3()[3])
                    - (other.group2()[1] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[1])
                    + (other.group2()[3] * self.group0()[0])
                    + (other.group3()[0] * self.group1()[3])
                    - (other.group3()[1] * self.group3()[2])
                    + (other.group3()[2] * self.group3()[1])
                    + (other.group3()[3] * self.group2()[0])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group2()[3]) - (other.group0()[2] * self.group2()[0])
                    + (other.group0()[3] * self.group1()[1])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group0()[3])
                    - (other.group1()[2] * self.group1()[0])
                    + (other.group1()[3] * self.group3()[1])
                    + (other.group2()[0] * self.group0()[2])
                    + (other.group2()[1] * self.group3()[3])
                    - (other.group2()[2] * self.group0()[0])
                    + (other.group2()[3] * self.group0()[1])
                    + (other.group3()[0] * self.group3()[2])
                    + (other.group3()[1] * self.group1()[3])
                    - (other.group3()[2] * self.group3()[0])
                    + (other.group3()[3] * self.group2()[1])),
                (-(other.group0()[0] * self.group2()[1])
                    + (other.group0()[1] * self.group2()[0])
                    + (other.group0()[2] * self.group2()[3])
                    + (other.group0()[3] * self.group1()[2])
                    - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group0()[3])
                    + (other.group1()[3] * self.group3()[2])
                    - (other.group2()[0] * self.group0()[1])
                    + (other.group2()[1] * self.group0()[0])
                    + (other.group2()[2] * self.group3()[3])
                    + (other.group2()[3] * self.group0()[2])
                    - (other.group3()[0] * self.group3()[1])
                    + (other.group3()[1] * self.group3()[0])
                    + (other.group3()[2] * self.group1()[3])
                    + (other.group3()[3] * self.group2()[2])),
                (-(other.group0()[0] * self.group2()[0]) - (other.group0()[1] * self.group2()[1]) - (other.group0()[2] * self.group2()[2])
                    + (other.group0()[3] * self.group1()[3])
                    - (other.group1()[0] * self.group3()[0])
                    - (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group3()[2])
                    + (other.group1()[3] * self.group0()[3])
                    + (other.group2()[0] * self.group0()[0])
                    + (other.group2()[1] * self.group0()[1])
                    + (other.group2()[2] * self.group0()[2])
                    - (other.group2()[3] * self.group3()[3])
                    - (other.group3()[0] * self.group1()[0])
                    - (other.group3()[1] * self.group1()[1])
                    - (other.group3()[2] * self.group1()[2])
                    + (other.group3()[3] * self.group2()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((other.group0()[3] * self.group2()[0]) + (other.group1()[0] * self.group2()[3]) - (other.group1()[1] * self.group2()[2]) + (other.group1()[2] * self.group2()[1])
                    - (other.group1()[3] * self.group2()[0])
                    + (other.group2()[0] * self.group0()[3])
                    + (other.group2()[0] * self.group1()[3])
                    - (other.group2()[1] * self.group1()[2])
                    - (other.group2()[1] * self.group3()[2])
                    + (other.group2()[2] * self.group1()[1])
                    + (other.group2()[2] * self.group3()[1])
                    + (other.group2()[3] * self.group1()[0])
                    + (other.group2()[3] * self.group3()[0])
                    - (other.group3()[0] * self.group2()[3])
                    + (other.group3()[1] * self.group2()[2])
                    - (other.group3()[2] * self.group2()[1])),
                ((other.group0()[3] * self.group2()[1]) + (other.group1()[0] * self.group2()[2]) + (other.group1()[1] * self.group2()[3])
                    - (other.group1()[2] * self.group2()[0])
                    - (other.group1()[3] * self.group2()[1])
                    + (other.group2()[0] * self.group1()[2])
                    + (other.group2()[0] * self.group3()[2])
                    + (other.group2()[1] * self.group0()[3])
                    + (other.group2()[1] * self.group1()[3])
                    - (other.group2()[2] * self.group1()[0])
                    - (other.group2()[2] * self.group3()[0])
                    + (other.group2()[3] * self.group1()[1])
                    + (other.group2()[3] * self.group3()[1])
                    - (other.group3()[0] * self.group2()[2])
                    - (other.group3()[1] * self.group2()[3])
                    + (other.group3()[2] * self.group2()[0])),
                ((other.group0()[3] * self.group2()[2]) - (other.group1()[0] * self.group2()[1]) + (other.group1()[1] * self.group2()[0]) + (other.group1()[2] * self.group2()[3])
                    - (other.group1()[3] * self.group2()[2])
                    - (other.group2()[0] * self.group1()[1])
                    - (other.group2()[0] * self.group3()[1])
                    + (other.group2()[1] * self.group1()[0])
                    + (other.group2()[1] * self.group3()[0])
                    + (other.group2()[2] * self.group0()[3])
                    + (other.group2()[2] * self.group1()[3])
                    + (other.group2()[3] * self.group1()[2])
                    + (other.group2()[3] * self.group3()[2])
                    + (other.group3()[0] * self.group2()[1])
                    - (other.group3()[1] * self.group2()[0])
                    - (other.group3()[2] * self.group2()[3])),
                ((other.group0()[3] * self.group2()[3])
                    - (other.group1()[0] * self.group2()[0])
                    - (other.group1()[1] * self.group2()[1])
                    - (other.group1()[2] * self.group2()[2])
                    - (other.group1()[3] * self.group2()[3])
                    - (other.group2()[0] * self.group1()[0])
                    - (other.group2()[0] * self.group3()[0])
                    - (other.group2()[1] * self.group1()[1])
                    - (other.group2()[1] * self.group3()[1])
                    - (other.group2()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[2])
                    + (other.group2()[3] * self.group0()[3])
                    + (other.group2()[3] * self.group1()[3])
                    + (other.group3()[0] * self.group2()[0])
                    + (other.group3()[1] * self.group2()[1])
                    + (other.group3()[2] * self.group2()[2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[1])
                    + (other.group0()[3] * self.group3()[0])
                    + (other.group1()[0] * self.group1()[3])
                    - (other.group1()[1] * self.group3()[2])
                    + (other.group1()[2] * self.group3()[1])
                    + (other.group1()[3] * self.group1()[0])
                    - (other.group2()[0] * self.group3()[3])
                    + (other.group2()[1] * self.group0()[2])
                    - (other.group2()[2] * self.group0()[1])
                    - (other.group2()[3] * self.group0()[0])
                    + (other.group3()[0] * self.group0()[3])
                    - (other.group3()[1] * self.group1()[2])
                    + (other.group3()[2] * self.group1()[1])
                    + (other.group3()[3] * self.group2()[0])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group2()[3]) - (other.group0()[2] * self.group2()[0])
                    + (other.group0()[3] * self.group3()[1])
                    + (other.group1()[0] * self.group3()[2])
                    + (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group3()[0])
                    + (other.group1()[3] * self.group1()[1])
                    - (other.group2()[0] * self.group0()[2])
                    - (other.group2()[1] * self.group3()[3])
                    + (other.group2()[2] * self.group0()[0])
                    - (other.group2()[3] * self.group0()[1])
                    + (other.group3()[0] * self.group1()[2])
                    + (other.group3()[1] * self.group0()[3])
                    - (other.group3()[2] * self.group1()[0])
                    + (other.group3()[3] * self.group2()[1])),
                (-(other.group0()[0] * self.group2()[1])
                    + (other.group0()[1] * self.group2()[0])
                    + (other.group0()[2] * self.group2()[3])
                    + (other.group0()[3] * self.group3()[2])
                    - (other.group1()[0] * self.group3()[1])
                    + (other.group1()[1] * self.group3()[0])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])
                    + (other.group2()[0] * self.group0()[1])
                    - (other.group2()[1] * self.group0()[0])
                    - (other.group2()[2] * self.group3()[3])
                    - (other.group2()[3] * self.group0()[2])
                    - (other.group3()[0] * self.group1()[1])
                    + (other.group3()[1] * self.group1()[0])
                    + (other.group3()[2] * self.group0()[3])
                    + (other.group3()[3] * self.group2()[2])),
                (-(other.group0()[0] * self.group1()[0]) + (other.group0()[0] * self.group3()[0]) - (other.group0()[1] * self.group1()[1])
                    + (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])
                    + (other.group0()[3] * self.group3()[3])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])
                    + (other.group1()[3] * self.group3()[3])
                    - (other.group3()[0] * self.group0()[0])
                    - (other.group3()[1] * self.group0()[1])
                    - (other.group3()[2] * self.group0()[2])
                    + (other.group3()[3] * self.group0()[3])
                    - (other.group3()[3] * self.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorOdd> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      240      256        0
    fn geometric_anti_product(self, other: VersorOdd) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[1] * other.group3()[2])
                    - (self.group0()[2] * other.group1()[1])
                    + (self.group0()[2] * other.group3()[1])
                    + (self.group0()[3] * other.group0()[0])
                    + (self.group1()[0] * other.group2()[3])
                    + (self.group1()[1] * other.group0()[2])
                    - (self.group1()[2] * other.group0()[1])
                    - (self.group1()[3] * other.group0()[0])
                    - (self.group3()[0] * other.group2()[3])
                    - (self.group3()[1] * other.group0()[2])
                    + (self.group3()[2] * other.group0()[1])
                    + (self.group3()[3] * other.group1()[0])
                    - (self.group3()[3] * other.group3()[0])),
                (-(self.group0()[0] * other.group1()[2]) + (self.group0()[0] * other.group3()[2]) + (self.group0()[1] * other.group0()[3])
                    - (self.group0()[1] * other.group1()[3])
                    + (self.group0()[2] * other.group1()[0])
                    - (self.group0()[2] * other.group3()[0])
                    + (self.group0()[3] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[2])
                    + (self.group1()[1] * other.group2()[3])
                    + (self.group1()[2] * other.group0()[0])
                    - (self.group1()[3] * other.group0()[1])
                    + (self.group3()[0] * other.group0()[2])
                    - (self.group3()[1] * other.group2()[3])
                    - (self.group3()[2] * other.group0()[0])
                    + (self.group3()[3] * other.group1()[1])
                    - (self.group3()[3] * other.group3()[1])),
                ((self.group0()[0] * other.group1()[1]) - (self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group1()[0])
                    + (self.group0()[1] * other.group3()[0])
                    + (self.group0()[2] * other.group0()[3])
                    - (self.group0()[2] * other.group1()[3])
                    + (self.group0()[3] * other.group0()[2])
                    + (self.group1()[0] * other.group0()[1])
                    - (self.group1()[1] * other.group0()[0])
                    + (self.group1()[2] * other.group2()[3])
                    - (self.group1()[3] * other.group0()[2])
                    - (self.group3()[0] * other.group0()[1])
                    + (self.group3()[1] * other.group0()[0])
                    - (self.group3()[2] * other.group2()[3])
                    + (self.group3()[3] * other.group1()[2])
                    - (self.group3()[3] * other.group3()[2])),
                (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])
                    + (self.group0()[3] * other.group0()[3])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[3] * other.group1()[3])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[2] * other.group0()[2])
                    + (self.group2()[3] * other.group2()[3])
                    + (self.group3()[0] * other.group3()[0])
                    + (self.group3()[1] * other.group3()[1])
                    + (self.group3()[2] * other.group3()[2])
                    + (self.group3()[3] * other.group3()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])
                    + (self.group0()[3] * other.group1()[0])
                    + (self.group1()[0] * other.group0()[3])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])
                    - (self.group1()[3] * other.group3()[0])
                    + (self.group2()[0] * other.group2()[3])
                    + (self.group2()[1] * other.group0()[2])
                    - (self.group2()[2] * other.group0()[1])
                    + (self.group2()[3] * other.group0()[0])
                    - (self.group3()[0] * other.group1()[3])
                    - (self.group3()[1] * other.group3()[2])
                    + (self.group3()[2] * other.group3()[1])
                    + (self.group3()[3] * other.group2()[0])),
                (-(self.group0()[0] * other.group2()[2])
                    + (self.group0()[1] * other.group3()[3])
                    + (self.group0()[2] * other.group2()[0])
                    + (self.group0()[3] * other.group1()[1])
                    - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[1] * other.group0()[3])
                    + (self.group1()[2] * other.group1()[0])
                    - (self.group1()[3] * other.group3()[1])
                    - (self.group2()[0] * other.group0()[2])
                    + (self.group2()[1] * other.group2()[3])
                    + (self.group2()[2] * other.group0()[0])
                    + (self.group2()[3] * other.group0()[1])
                    + (self.group3()[0] * other.group3()[2])
                    - (self.group3()[1] * other.group1()[3])
                    - (self.group3()[2] * other.group3()[0])
                    + (self.group3()[3] * other.group2()[1])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0])
                    + (self.group0()[2] * other.group3()[3])
                    + (self.group0()[3] * other.group1()[2])
                    + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[0])
                    + (self.group1()[2] * other.group0()[3])
                    - (self.group1()[3] * other.group3()[2])
                    + (self.group2()[0] * other.group0()[1])
                    - (self.group2()[1] * other.group0()[0])
                    + (self.group2()[2] * other.group2()[3])
                    + (self.group2()[3] * other.group0()[2])
                    - (self.group3()[0] * other.group3()[1])
                    + (self.group3()[1] * other.group3()[0])
                    - (self.group3()[2] * other.group1()[3])
                    + (self.group3()[3] * other.group2()[2])),
                (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1]) - (self.group0()[2] * other.group2()[2])
                    + (self.group0()[3] * other.group1()[3])
                    - (self.group1()[0] * other.group3()[0])
                    - (self.group1()[1] * other.group3()[1])
                    - (self.group1()[2] * other.group3()[2])
                    - (self.group1()[3] * other.group0()[3])
                    + (self.group2()[0] * other.group0()[0])
                    + (self.group2()[1] * other.group0()[1])
                    + (self.group2()[2] * other.group0()[2])
                    - (self.group2()[3] * other.group2()[3])
                    + (self.group3()[0] * other.group1()[0])
                    + (self.group3()[1] * other.group1()[1])
                    + (self.group3()[2] * other.group1()[2])
                    + (self.group3()[3] * other.group3()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[3] * other.group2()[0]) + (self.group1()[0] * other.group3()[3]) + (self.group1()[1] * other.group2()[2]) - (self.group1()[2] * other.group2()[1])
                    + (self.group1()[3] * other.group2()[0])
                    + (self.group2()[0] * other.group0()[3])
                    + (self.group2()[0] * other.group1()[3])
                    + (self.group2()[1] * other.group1()[2])
                    + (self.group2()[1] * other.group3()[2])
                    - (self.group2()[2] * other.group1()[1])
                    - (self.group2()[2] * other.group3()[1])
                    + (self.group2()[3] * other.group1()[0])
                    + (self.group2()[3] * other.group3()[0])
                    + (self.group3()[0] * other.group3()[3])
                    + (self.group3()[1] * other.group2()[2])
                    - (self.group3()[2] * other.group2()[1])),
                ((self.group0()[3] * other.group2()[1]) - (self.group1()[0] * other.group2()[2])
                    + (self.group1()[1] * other.group3()[3])
                    + (self.group1()[2] * other.group2()[0])
                    + (self.group1()[3] * other.group2()[1])
                    - (self.group2()[0] * other.group1()[2])
                    - (self.group2()[0] * other.group3()[2])
                    + (self.group2()[1] * other.group0()[3])
                    + (self.group2()[1] * other.group1()[3])
                    + (self.group2()[2] * other.group1()[0])
                    + (self.group2()[2] * other.group3()[0])
                    + (self.group2()[3] * other.group1()[1])
                    + (self.group2()[3] * other.group3()[1])
                    - (self.group3()[0] * other.group2()[2])
                    + (self.group3()[1] * other.group3()[3])
                    + (self.group3()[2] * other.group2()[0])),
                ((self.group0()[3] * other.group2()[2]) + (self.group1()[0] * other.group2()[1]) - (self.group1()[1] * other.group2()[0])
                    + (self.group1()[2] * other.group3()[3])
                    + (self.group1()[3] * other.group2()[2])
                    + (self.group2()[0] * other.group1()[1])
                    + (self.group2()[0] * other.group3()[1])
                    - (self.group2()[1] * other.group1()[0])
                    - (self.group2()[1] * other.group3()[0])
                    + (self.group2()[2] * other.group0()[3])
                    + (self.group2()[2] * other.group1()[3])
                    + (self.group2()[3] * other.group1()[2])
                    + (self.group2()[3] * other.group3()[2])
                    + (self.group3()[0] * other.group2()[1])
                    - (self.group3()[1] * other.group2()[0])
                    + (self.group3()[2] * other.group3()[3])),
                (-(self.group0()[0] * other.group1()[0]) + (self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group1()[1])
                    + (self.group0()[1] * other.group3()[1])
                    - (self.group0()[2] * other.group1()[2])
                    + (self.group0()[2] * other.group3()[2])
                    + (self.group0()[3] * other.group2()[3])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[2] * other.group0()[2])
                    - (self.group1()[3] * other.group2()[3])
                    + (self.group3()[0] * other.group0()[0])
                    + (self.group3()[1] * other.group0()[1])
                    + (self.group3()[2] * other.group0()[2])
                    + (self.group3()[3] * other.group0()[3])
                    - (self.group3()[3] * other.group1()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])
                    + (self.group0()[3] * other.group3()[0])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group1()[1] * other.group3()[2])
                    - (self.group1()[2] * other.group3()[1])
                    - (self.group1()[3] * other.group1()[0])
                    - (self.group2()[0] * other.group2()[3])
                    - (self.group2()[1] * other.group0()[2])
                    + (self.group2()[2] * other.group0()[1])
                    - (self.group2()[3] * other.group0()[0])
                    - (self.group3()[0] * other.group0()[3])
                    - (self.group3()[1] * other.group1()[2])
                    + (self.group3()[2] * other.group1()[1])
                    + (self.group3()[3] * other.group2()[0])),
                (-(self.group0()[0] * other.group2()[2])
                    + (self.group0()[1] * other.group3()[3])
                    + (self.group0()[2] * other.group2()[0])
                    + (self.group0()[3] * other.group3()[1])
                    - (self.group1()[0] * other.group3()[2])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group1()[2] * other.group3()[0])
                    - (self.group1()[3] * other.group1()[1])
                    + (self.group2()[0] * other.group0()[2])
                    - (self.group2()[1] * other.group2()[3])
                    - (self.group2()[2] * other.group0()[0])
                    - (self.group2()[3] * other.group0()[1])
                    + (self.group3()[0] * other.group1()[2])
                    - (self.group3()[1] * other.group0()[3])
                    - (self.group3()[2] * other.group1()[0])
                    + (self.group3()[3] * other.group2()[1])),
                ((self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0])
                    + (self.group0()[2] * other.group3()[3])
                    + (self.group0()[3] * other.group3()[2])
                    + (self.group1()[0] * other.group3()[1])
                    - (self.group1()[1] * other.group3()[0])
                    + (self.group1()[2] * other.group1()[3])
                    - (self.group1()[3] * other.group1()[2])
                    - (self.group2()[0] * other.group0()[1])
                    + (self.group2()[1] * other.group0()[0])
                    - (self.group2()[2] * other.group2()[3])
                    - (self.group2()[3] * other.group0()[2])
                    - (self.group3()[0] * other.group1()[1])
                    + (self.group3()[1] * other.group1()[0])
                    - (self.group3()[2] * other.group0()[3])
                    + (self.group3()[3] * other.group2()[2])),
                ((self.group0()[3] * other.group3()[3]) - (self.group1()[0] * other.group2()[0]) - (self.group1()[1] * other.group2()[1]) - (self.group1()[2] * other.group2()[2])
                    + (self.group1()[3] * other.group3()[3])
                    - (self.group2()[0] * other.group1()[0])
                    - (self.group2()[0] * other.group3()[0])
                    - (self.group2()[1] * other.group1()[1])
                    - (self.group2()[1] * other.group3()[1])
                    - (self.group2()[2] * other.group1()[2])
                    - (self.group2()[2] * other.group3()[2])
                    + (self.group2()[3] * other.group0()[3])
                    + (self.group2()[3] * other.group1()[3])
                    - (self.group3()[0] * other.group2()[0])
                    - (self.group3()[1] * other.group2()[1])
                    - (self.group3()[2] * other.group2()[2])),
            ]),
        );
    }
}
impl InfixGeometricAntiProduct for VersorOdd {}
impl GeometricAntiProduct<AntiCircleRotor> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      160      176        0
    fn geometric_anti_product(self, other: AntiCircleRotor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group0()[0] * self.group1()[3])
                    + (other.group0()[1] * self.group1()[2])
                    + (other.group0()[1] * self.group3()[2])
                    - (other.group0()[2] * self.group1()[1])
                    - (other.group0()[2] * self.group3()[1])
                    - (other.group1()[0] * self.group2()[3])
                    + (other.group1()[1] * self.group0()[2])
                    - (other.group1()[2] * self.group0()[1])
                    + (other.group1()[3] * self.group0()[0])
                    - (other.group2()[3] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[2])
                    - (other.group0()[0] * self.group3()[2])
                    - (other.group0()[1] * self.group0()[3])
                    - (other.group0()[1] * self.group1()[3])
                    + (other.group0()[2] * self.group1()[0])
                    + (other.group0()[2] * self.group3()[0])
                    - (other.group1()[0] * self.group0()[2])
                    - (other.group1()[1] * self.group2()[3])
                    + (other.group1()[2] * self.group0()[0])
                    + (other.group1()[3] * self.group0()[1])
                    - (other.group2()[3] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[0] * self.group3()[1])
                    - (other.group0()[1] * self.group1()[0])
                    - (other.group0()[1] * self.group3()[0])
                    - (other.group0()[2] * self.group0()[3])
                    - (other.group0()[2] * self.group1()[3])
                    + (other.group1()[0] * self.group0()[1])
                    - (other.group1()[1] * self.group0()[0])
                    - (other.group1()[2] * self.group2()[3])
                    + (other.group1()[3] * self.group0()[2])
                    - (other.group2()[3] * self.group0()[2])),
                ((other.group0()[0] * self.group2()[0])
                    + (other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])
                    + (other.group1()[0] * self.group1()[0])
                    + (other.group1()[1] * self.group1()[1])
                    + (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])
                    + (other.group2()[0] * self.group0()[0])
                    + (other.group2()[1] * self.group0()[1])
                    + (other.group2()[2] * self.group0()[2])
                    - (other.group2()[3] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self.group2()[2])
                    - (other.group0()[2] * self.group2()[1])
                    - (other.group1()[0] * self.group0()[3])
                    + (other.group1()[1] * self.group1()[2])
                    - (other.group1()[2] * self.group1()[1])
                    - (other.group1()[3] * self.group3()[0])
                    - (other.group2()[0] * self.group2()[3])
                    + (other.group2()[1] * self.group0()[2])
                    - (other.group2()[2] * self.group0()[1])
                    - (other.group2()[3] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group3()[3]) + (other.group0()[2] * self.group2()[0])
                    - (other.group1()[0] * self.group1()[2])
                    - (other.group1()[1] * self.group0()[3])
                    + (other.group1()[2] * self.group1()[0])
                    - (other.group1()[3] * self.group3()[1])
                    - (other.group2()[0] * self.group0()[2])
                    - (other.group2()[1] * self.group2()[3])
                    + (other.group2()[2] * self.group0()[0])
                    - (other.group2()[3] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) - (other.group0()[2] * self.group3()[3]) + (other.group1()[0] * self.group1()[1])
                    - (other.group1()[1] * self.group1()[0])
                    - (other.group1()[2] * self.group0()[3])
                    - (other.group1()[3] * self.group3()[2])
                    + (other.group2()[0] * self.group0()[1])
                    - (other.group2()[1] * self.group0()[0])
                    - (other.group2()[2] * self.group2()[3])
                    - (other.group2()[3] * self.group1()[2])),
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2])
                    - (other.group1()[0] * self.group3()[0])
                    - (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group3()[2])
                    + (other.group1()[3] * self.group0()[3])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    + (other.group2()[3] * self.group1()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(other.group1()[0] * self.group3()[3]) + (other.group1()[1] * self.group2()[2])
                    - (other.group1()[2] * self.group2()[1])
                    - (other.group1()[3] * self.group2()[0])
                    - (other.group2()[0] * self.group0()[3])
                    + (other.group2()[0] * self.group1()[3])
                    + (other.group2()[1] * self.group1()[2])
                    - (other.group2()[1] * self.group3()[2])
                    - (other.group2()[2] * self.group1()[1])
                    + (other.group2()[2] * self.group3()[1])
                    - (other.group2()[3] * self.group2()[0])),
                (-(other.group1()[0] * self.group2()[2]) - (other.group1()[1] * self.group3()[3]) + (other.group1()[2] * self.group2()[0])
                    - (other.group1()[3] * self.group2()[1])
                    - (other.group2()[0] * self.group1()[2])
                    + (other.group2()[0] * self.group3()[2])
                    - (other.group2()[1] * self.group0()[3])
                    + (other.group2()[1] * self.group1()[3])
                    + (other.group2()[2] * self.group1()[0])
                    - (other.group2()[2] * self.group3()[0])
                    - (other.group2()[3] * self.group2()[1])),
                ((other.group1()[0] * self.group2()[1]) - (other.group1()[1] * self.group2()[0]) - (other.group1()[2] * self.group3()[3]) - (other.group1()[3] * self.group2()[2])
                    + (other.group2()[0] * self.group1()[1])
                    - (other.group2()[0] * self.group3()[1])
                    - (other.group2()[1] * self.group1()[0])
                    + (other.group2()[1] * self.group3()[0])
                    - (other.group2()[2] * self.group0()[3])
                    + (other.group2()[2] * self.group1()[3])
                    - (other.group2()[3] * self.group2()[2])),
                ((other.group1()[0] * self.group2()[0]) + (other.group1()[1] * self.group2()[1]) + (other.group1()[2] * self.group2()[2]) - (other.group1()[3] * self.group3()[3])
                    + (other.group2()[0] * self.group1()[0])
                    - (other.group2()[0] * self.group3()[0])
                    + (other.group2()[1] * self.group1()[1])
                    - (other.group2()[1] * self.group3()[1])
                    + (other.group2()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[2])
                    - (other.group2()[3] * self.group3()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1])
                    + (other.group1()[0] * self.group1()[3])
                    - (other.group1()[1] * self.group3()[2])
                    + (other.group1()[2] * self.group3()[1])
                    + (other.group1()[3] * self.group1()[0])
                    + (other.group2()[0] * self.group2()[3])
                    - (other.group2()[1] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[1])
                    + (other.group2()[3] * self.group3()[0])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group3()[3])
                    + (other.group0()[2] * self.group2()[0])
                    + (other.group1()[0] * self.group3()[2])
                    + (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group3()[0])
                    + (other.group1()[3] * self.group1()[1])
                    + (other.group2()[0] * self.group0()[2])
                    + (other.group2()[1] * self.group2()[3])
                    - (other.group2()[2] * self.group0()[0])
                    + (other.group2()[3] * self.group3()[1])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) - (other.group0()[2] * self.group3()[3]) - (other.group1()[0] * self.group3()[1])
                    + (other.group1()[1] * self.group3()[0])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])
                    - (other.group2()[0] * self.group0()[1])
                    + (other.group2()[1] * self.group0()[0])
                    + (other.group2()[2] * self.group2()[3])
                    + (other.group2()[3] * self.group3()[2])),
                ((other.group0()[0] * self.group1()[0])
                    + (other.group0()[0] * self.group3()[0])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[1] * self.group3()[1])
                    + (other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])
                    + (other.group1()[0] * self.group0()[0])
                    + (other.group1()[1] * self.group0()[1])
                    + (other.group1()[2] * self.group0()[2])
                    + (other.group1()[3] * self.group2()[3])
                    - (other.group2()[3] * self.group2()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDipoleInversion> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      224      240        0
    fn geometric_anti_product(self, other: AntiDipoleInversion) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2]) - (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (other.group0()[2] * self.group3()[1])
                    + (other.group1()[0] * self.group2()[3])
                    - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])
                    + (other.group1()[3] * self.group0()[0])
                    + (other.group2()[3] * self.group1()[0])
                    + (other.group2()[3] * self.group3()[0])
                    + (other.group3()[0] * self.group2()[3])
                    - (other.group3()[1] * self.group0()[2])
                    + (other.group3()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group0()[3]) + (other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group1()[0])
                    - (other.group0()[2] * self.group3()[0])
                    + (other.group1()[0] * self.group0()[2])
                    + (other.group1()[1] * self.group2()[3])
                    - (other.group1()[2] * self.group0()[0])
                    + (other.group1()[3] * self.group0()[1])
                    + (other.group2()[3] * self.group1()[1])
                    + (other.group2()[3] * self.group3()[1])
                    + (other.group3()[0] * self.group0()[2])
                    + (other.group3()[1] * self.group2()[3])
                    - (other.group3()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[1]) - (other.group0()[0] * self.group3()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group0()[3])
                    + (other.group0()[2] * self.group1()[3])
                    - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group2()[3])
                    + (other.group1()[3] * self.group0()[2])
                    + (other.group2()[3] * self.group1()[2])
                    + (other.group2()[3] * self.group3()[2])
                    - (other.group3()[0] * self.group0()[1])
                    + (other.group3()[1] * self.group0()[0])
                    + (other.group3()[2] * self.group2()[3])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    + (other.group2()[3] * self.group3()[3])
                    + (other.group3()[0] * self.group3()[0])
                    + (other.group3()[1] * self.group3()[1])
                    + (other.group3()[2] * self.group3()[2])
                    + (other.group3()[3] * self.group2()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1]) + (other.group1()[0] * self.group0()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])
                    - (other.group1()[3] * self.group3()[0])
                    + (other.group2()[0] * self.group2()[3])
                    - (other.group2()[1] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[1])
                    + (other.group2()[3] * self.group2()[0])
                    - (other.group3()[0] * self.group1()[3])
                    + (other.group3()[1] * self.group3()[2])
                    - (other.group3()[2] * self.group3()[1])
                    + (other.group3()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group3()[3]) - (other.group0()[2] * self.group2()[0])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group0()[3])
                    - (other.group1()[2] * self.group1()[0])
                    - (other.group1()[3] * self.group3()[1])
                    + (other.group2()[0] * self.group0()[2])
                    + (other.group2()[1] * self.group2()[3])
                    - (other.group2()[2] * self.group0()[0])
                    + (other.group2()[3] * self.group2()[1])
                    - (other.group3()[0] * self.group3()[2])
                    - (other.group3()[1] * self.group1()[3])
                    + (other.group3()[2] * self.group3()[0])
                    + (other.group3()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) + (other.group0()[2] * self.group3()[3])
                    - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group0()[3])
                    - (other.group1()[3] * self.group3()[2])
                    - (other.group2()[0] * self.group0()[1])
                    + (other.group2()[1] * self.group0()[0])
                    + (other.group2()[2] * self.group2()[3])
                    + (other.group2()[3] * self.group2()[2])
                    + (other.group3()[0] * self.group3()[1])
                    - (other.group3()[1] * self.group3()[0])
                    - (other.group3()[2] * self.group1()[3])
                    + (other.group3()[3] * self.group0()[2])),
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2])
                    - (other.group1()[0] * self.group3()[0])
                    - (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group3()[2])
                    - (other.group1()[3] * self.group0()[3])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    - (other.group2()[3] * self.group3()[3])
                    + (other.group3()[0] * self.group1()[0])
                    + (other.group3()[1] * self.group1()[1])
                    + (other.group3()[2] * self.group1()[2])
                    + (other.group3()[3] * self.group2()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group1()[0] * self.group3()[3]) - (other.group1()[1] * self.group2()[2]) + (other.group1()[2] * self.group2()[1]) - (other.group1()[3] * self.group2()[0])
                    + (other.group2()[0] * self.group0()[3])
                    - (other.group2()[0] * self.group1()[3])
                    - (other.group2()[1] * self.group1()[2])
                    + (other.group2()[1] * self.group3()[2])
                    + (other.group2()[2] * self.group1()[1])
                    - (other.group2()[2] * self.group3()[1])
                    - (other.group3()[0] * self.group3()[3])
                    + (other.group3()[1] * self.group2()[2])
                    - (other.group3()[2] * self.group2()[1])
                    + (other.group3()[3] * self.group1()[0])
                    - (other.group3()[3] * self.group3()[0])),
                ((other.group1()[0] * self.group2()[2]) + (other.group1()[1] * self.group3()[3]) - (other.group1()[2] * self.group2()[0]) - (other.group1()[3] * self.group2()[1])
                    + (other.group2()[0] * self.group1()[2])
                    - (other.group2()[0] * self.group3()[2])
                    + (other.group2()[1] * self.group0()[3])
                    - (other.group2()[1] * self.group1()[3])
                    - (other.group2()[2] * self.group1()[0])
                    + (other.group2()[2] * self.group3()[0])
                    - (other.group3()[0] * self.group2()[2])
                    - (other.group3()[1] * self.group3()[3])
                    + (other.group3()[2] * self.group2()[0])
                    + (other.group3()[3] * self.group1()[1])
                    - (other.group3()[3] * self.group3()[1])),
                (-(other.group1()[0] * self.group2()[1]) + (other.group1()[1] * self.group2()[0]) + (other.group1()[2] * self.group3()[3])
                    - (other.group1()[3] * self.group2()[2])
                    - (other.group2()[0] * self.group1()[1])
                    + (other.group2()[0] * self.group3()[1])
                    + (other.group2()[1] * self.group1()[0])
                    - (other.group2()[1] * self.group3()[0])
                    + (other.group2()[2] * self.group0()[3])
                    - (other.group2()[2] * self.group1()[3])
                    + (other.group3()[0] * self.group2()[1])
                    - (other.group3()[1] * self.group2()[0])
                    - (other.group3()[2] * self.group3()[3])
                    + (other.group3()[3] * self.group1()[2])
                    - (other.group3()[3] * self.group3()[2])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[0] * self.group3()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group3()[2])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])
                    + (other.group1()[3] * self.group2()[3])
                    + (other.group2()[3] * self.group0()[3])
                    + (other.group2()[3] * self.group1()[3])
                    - (other.group3()[0] * self.group0()[0])
                    - (other.group3()[1] * self.group0()[1])
                    - (other.group3()[2] * self.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1])
                    + (other.group1()[0] * self.group1()[3])
                    - (other.group1()[1] * self.group3()[2])
                    + (other.group1()[2] * self.group3()[1])
                    - (other.group1()[3] * self.group1()[0])
                    + (other.group2()[0] * self.group2()[3])
                    - (other.group2()[1] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[1])
                    - (other.group2()[3] * self.group2()[0])
                    - (other.group3()[0] * self.group0()[3])
                    + (other.group3()[1] * self.group1()[2])
                    - (other.group3()[2] * self.group1()[1])
                    + (other.group3()[3] * self.group0()[0])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group3()[3])
                    + (other.group0()[2] * self.group2()[0])
                    + (other.group1()[0] * self.group3()[2])
                    + (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group3()[0])
                    - (other.group1()[3] * self.group1()[1])
                    + (other.group2()[0] * self.group0()[2])
                    + (other.group2()[1] * self.group2()[3])
                    - (other.group2()[2] * self.group0()[0])
                    - (other.group2()[3] * self.group2()[1])
                    - (other.group3()[0] * self.group1()[2])
                    - (other.group3()[1] * self.group0()[3])
                    + (other.group3()[2] * self.group1()[0])
                    + (other.group3()[3] * self.group0()[1])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) - (other.group0()[2] * self.group3()[3]) - (other.group1()[0] * self.group3()[1])
                    + (other.group1()[1] * self.group3()[0])
                    + (other.group1()[2] * self.group1()[3])
                    - (other.group1()[3] * self.group1()[2])
                    - (other.group2()[0] * self.group0()[1])
                    + (other.group2()[1] * self.group0()[0])
                    + (other.group2()[2] * self.group2()[3])
                    - (other.group2()[3] * self.group2()[2])
                    + (other.group3()[0] * self.group1()[1])
                    - (other.group3()[1] * self.group1()[0])
                    - (other.group3()[2] * self.group0()[3])
                    + (other.group3()[3] * self.group0()[2])),
                (-(other.group1()[0] * self.group2()[0])
                    - (other.group1()[1] * self.group2()[1])
                    - (other.group1()[2] * self.group2()[2])
                    - (other.group1()[3] * self.group3()[3])
                    - (other.group2()[0] * self.group1()[0])
                    + (other.group2()[0] * self.group3()[0])
                    - (other.group2()[1] * self.group1()[1])
                    + (other.group2()[1] * self.group3()[1])
                    - (other.group2()[2] * self.group1()[2])
                    + (other.group2()[2] * self.group3()[2])
                    + (other.group3()[0] * self.group2()[0])
                    + (other.group3()[1] * self.group2()[1])
                    + (other.group3()[2] * self.group2()[2])
                    + (other.group3()[3] * self.group0()[3])
                    - (other.group3()[3] * self.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiDualNum> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       16       36        0
    fn geometric_anti_product(self, other: AntiDualNum) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[0] * self.group3()[0]) - (other.group0()[1] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[1]) - (other.group0()[0] * self.group3()[1]) - (other.group0()[1] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[0] * self.group3()[2]) - (other.group0()[1] * self.group0()[2])),
                (-(other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self.group0()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group2()[0]) - (other.group0()[1] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group1()[2])),
                (-(other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self.group1()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other.group0()[1] * self.group2()[0] * -1.0),
                (other.group0()[1] * self.group2()[1] * -1.0),
                (other.group0()[1] * self.group2()[2] * -1.0),
                (other.group0()[1] * self.group3()[3] * -1.0),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group3()[0])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group3()[1])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group3()[2])),
                (-(other.group0()[0] * self.group0()[3]) - (other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group2()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiFlatPoint> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       48       64        0
    fn geometric_anti_product(self, other: AntiFlatPoint) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other.group0()[3] * self.group0()[0]),
                (other.group0()[3] * self.group0()[1]),
                (other.group0()[3] * self.group0()[2]),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group0()[3] * self.group1()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) - (other.group0()[3] * self.group3()[0])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group2()[3]) - (other.group0()[2] * self.group0()[0]) - (other.group0()[3] * self.group3()[1])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group2()[3])
                    - (other.group0()[3] * self.group3()[2])),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group0()[3] * self.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group1()[1])
                    - (other.group0()[2] * self.group3()[1])
                    - (other.group0()[3] * self.group2()[0])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group0()[3])
                    - (other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group1()[0])
                    + (other.group0()[2] * self.group3()[0])
                    - (other.group0()[3] * self.group2()[1])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group1()[0])
                    - (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group0()[3])
                    - (other.group0()[2] * self.group1()[3])
                    - (other.group0()[3] * self.group2()[2])),
                (other.group0()[3] * self.group2()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) - (other.group0()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group2()[3]) - (other.group0()[2] * self.group0()[0]) - (other.group0()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group2()[3])
                    - (other.group0()[3] * self.group1()[2])),
                (-(other.group0()[0] * self.group1()[0]) + (other.group0()[0] * self.group3()[0]) - (other.group0()[1] * self.group1()[1])
                    + (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])
                    - (other.group0()[3] * self.group3()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiFlector> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      112      128        0
    fn geometric_anti_product(self, other: AntiFlector) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((other.group0()[3] * self.group0()[0]) + (other.group1()[0] * self.group2()[3]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[3] * self.group0()[1]) + (other.group1()[0] * self.group0()[2]) + (other.group1()[1] * self.group2()[3]) - (other.group1()[2] * self.group0()[0])),
                ((other.group0()[3] * self.group0()[2]) - (other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0]) + (other.group1()[2] * self.group2()[3])),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group0()[3] * self.group1()[3])
                    + (other.group1()[0] * self.group3()[0])
                    + (other.group1()[1] * self.group3()[1])
                    + (other.group1()[2] * self.group3()[2])
                    + (other.group1()[3] * self.group2()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])
                    - (other.group0()[3] * self.group3()[0])
                    - (other.group1()[0] * self.group1()[3])
                    + (other.group1()[1] * self.group3()[2])
                    - (other.group1()[2] * self.group3()[1])
                    + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group2()[3])
                    - (other.group0()[2] * self.group0()[0])
                    - (other.group0()[3] * self.group3()[1])
                    - (other.group1()[0] * self.group3()[2])
                    - (other.group1()[1] * self.group1()[3])
                    + (other.group1()[2] * self.group3()[0])
                    + (other.group1()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group2()[3])
                    - (other.group0()[3] * self.group3()[2])
                    + (other.group1()[0] * self.group3()[1])
                    - (other.group1()[1] * self.group3()[0])
                    - (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (other.group0()[3] * self.group0()[3])
                    + (other.group1()[0] * self.group1()[0])
                    + (other.group1()[1] * self.group1()[1])
                    + (other.group1()[2] * self.group1()[2])
                    + (other.group1()[3] * self.group2()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group1()[1])
                    - (other.group0()[2] * self.group3()[1])
                    - (other.group0()[3] * self.group2()[0])
                    - (other.group1()[0] * self.group3()[3])
                    + (other.group1()[1] * self.group2()[2])
                    - (other.group1()[2] * self.group2()[1])
                    + (other.group1()[3] * self.group1()[0])
                    - (other.group1()[3] * self.group3()[0])),
                ((other.group0()[0] * self.group1()[2]) - (other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group0()[3])
                    - (other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group1()[0])
                    + (other.group0()[2] * self.group3()[0])
                    - (other.group0()[3] * self.group2()[1])
                    - (other.group1()[0] * self.group2()[2])
                    - (other.group1()[1] * self.group3()[3])
                    + (other.group1()[2] * self.group2()[0])
                    + (other.group1()[3] * self.group1()[1])
                    - (other.group1()[3] * self.group3()[1])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group1()[0])
                    - (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group0()[3])
                    - (other.group0()[2] * self.group1()[3])
                    - (other.group0()[3] * self.group2()[2])
                    + (other.group1()[0] * self.group2()[1])
                    - (other.group1()[1] * self.group2()[0])
                    - (other.group1()[2] * self.group3()[3])
                    + (other.group1()[3] * self.group1()[2])
                    - (other.group1()[3] * self.group3()[2])),
                ((other.group0()[3] * self.group2()[3]) - (other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])
                    - (other.group0()[3] * self.group1()[0])
                    - (other.group1()[0] * self.group0()[3])
                    + (other.group1()[1] * self.group1()[2])
                    - (other.group1()[2] * self.group1()[1])
                    + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group2()[3])
                    - (other.group0()[2] * self.group0()[0])
                    - (other.group0()[3] * self.group1()[1])
                    - (other.group1()[0] * self.group1()[2])
                    - (other.group1()[1] * self.group0()[3])
                    + (other.group1()[2] * self.group1()[0])
                    + (other.group1()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group2()[3])
                    - (other.group0()[3] * self.group1()[2])
                    + (other.group1()[0] * self.group1()[1])
                    - (other.group1()[1] * self.group1()[0])
                    - (other.group1()[2] * self.group0()[3])
                    + (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[0] * self.group1()[0]) + (other.group0()[0] * self.group3()[0]) - (other.group0()[1] * self.group1()[1])
                    + (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])
                    - (other.group0()[3] * self.group3()[3])
                    + (other.group1()[0] * self.group2()[0])
                    + (other.group1()[1] * self.group2()[1])
                    + (other.group1()[2] * self.group2()[2])
                    + (other.group1()[3] * self.group0()[3])
                    - (other.group1()[3] * self.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiLine> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       80       96        0
    fn geometric_anti_product(self, other: AntiLine) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(other.group0()[0] * self.group2()[3]) + (other.group0()[1] * self.group0()[2]) - (other.group0()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group2()[3]) + (other.group0()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) - (other.group0()[2] * self.group2()[3])),
                ((other.group0()[0] * self.group1()[0])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[2] * self.group1()[2])
                    + (other.group1()[0] * self.group0()[0])
                    + (other.group1()[1] * self.group0()[1])
                    + (other.group1()[2] * self.group0()[2])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group1()[2])
                    - (other.group0()[2] * self.group1()[1])
                    - (other.group1()[0] * self.group2()[3])
                    + (other.group1()[1] * self.group0()[2])
                    - (other.group1()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group0()[3]) + (other.group0()[2] * self.group1()[0])
                    - (other.group1()[0] * self.group0()[2])
                    - (other.group1()[1] * self.group2()[3])
                    + (other.group1()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) - (other.group0()[2] * self.group0()[3]) + (other.group1()[0] * self.group0()[1])
                    - (other.group1()[1] * self.group0()[0])
                    - (other.group1()[2] * self.group2()[3])),
                (-(other.group0()[0] * self.group3()[0])
                    - (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group3()[2])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self.group2()[2])
                    - (other.group0()[2] * self.group2()[1])
                    - (other.group1()[0] * self.group0()[3])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[1] * self.group1()[2])
                    - (other.group1()[1] * self.group3()[2])
                    - (other.group1()[2] * self.group1()[1])
                    + (other.group1()[2] * self.group3()[1])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group3()[3]) + (other.group0()[2] * self.group2()[0])
                    - (other.group1()[0] * self.group1()[2])
                    + (other.group1()[0] * self.group3()[2])
                    - (other.group1()[1] * self.group0()[3])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[2] * self.group1()[0])
                    - (other.group1()[2] * self.group3()[0])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) - (other.group0()[2] * self.group3()[3]) + (other.group1()[0] * self.group1()[1])
                    - (other.group1()[0] * self.group3()[1])
                    - (other.group1()[1] * self.group1()[0])
                    + (other.group1()[1] * self.group3()[0])
                    - (other.group1()[2] * self.group0()[3])
                    + (other.group1()[2] * self.group1()[3])),
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2]) + (other.group1()[0] * self.group1()[0])
                    - (other.group1()[0] * self.group3()[0])
                    + (other.group1()[1] * self.group1()[1])
                    - (other.group1()[1] * self.group3()[1])
                    + (other.group1()[2] * self.group1()[2])
                    - (other.group1()[2] * self.group3()[2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group3()[2]) + (other.group0()[2] * self.group3()[1]) + (other.group1()[0] * self.group2()[3])
                    - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group3()[0])
                    + (other.group1()[0] * self.group0()[2])
                    + (other.group1()[1] * self.group2()[3])
                    - (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group3()[0]) + (other.group0()[2] * self.group1()[3])
                    - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group2()[3])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiMotor> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      112      128        0
    fn geometric_anti_product(self, other: AntiMotor) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(other.group0()[0] * self.group2()[3]) + (other.group0()[1] * self.group0()[2])
                    - (other.group0()[2] * self.group0()[1])
                    - (other.group0()[3] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group2()[3]) + (other.group0()[2] * self.group0()[0])
                    - (other.group0()[3] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) - (other.group0()[2] * self.group2()[3]) - (other.group0()[3] * self.group0()[2])),
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2]) - (other.group0()[3] * self.group0()[3])
                    + (other.group1()[0] * self.group0()[0])
                    + (other.group1()[1] * self.group0()[1])
                    + (other.group1()[2] * self.group0()[2])
                    - (other.group1()[3] * self.group2()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group1()[2])
                    - (other.group0()[2] * self.group1()[1])
                    - (other.group0()[3] * self.group1()[0])
                    - (other.group1()[0] * self.group2()[3])
                    + (other.group1()[1] * self.group0()[2])
                    - (other.group1()[2] * self.group0()[1])
                    - (other.group1()[3] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group0()[3]) + (other.group0()[2] * self.group1()[0])
                    - (other.group0()[3] * self.group1()[1])
                    - (other.group1()[0] * self.group0()[2])
                    - (other.group1()[1] * self.group2()[3])
                    + (other.group1()[2] * self.group0()[0])
                    - (other.group1()[3] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) - (other.group0()[2] * self.group0()[3]) - (other.group0()[3] * self.group1()[2])
                    + (other.group1()[0] * self.group0()[1])
                    - (other.group1()[1] * self.group0()[0])
                    - (other.group1()[2] * self.group2()[3])
                    - (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[0] * self.group3()[0]) - (other.group0()[1] * self.group3()[1]) - (other.group0()[2] * self.group3()[2])
                    + (other.group0()[3] * self.group1()[3])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])
                    + (other.group1()[3] * self.group2()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self.group2()[2])
                    - (other.group0()[2] * self.group2()[1])
                    - (other.group0()[3] * self.group2()[0])
                    - (other.group1()[0] * self.group0()[3])
                    + (other.group1()[0] * self.group1()[3])
                    + (other.group1()[1] * self.group1()[2])
                    - (other.group1()[1] * self.group3()[2])
                    - (other.group1()[2] * self.group1()[1])
                    + (other.group1()[2] * self.group3()[1])
                    - (other.group1()[3] * self.group1()[0])
                    + (other.group1()[3] * self.group3()[0])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group3()[3]) + (other.group0()[2] * self.group2()[0])
                    - (other.group0()[3] * self.group2()[1])
                    - (other.group1()[0] * self.group1()[2])
                    + (other.group1()[0] * self.group3()[2])
                    - (other.group1()[1] * self.group0()[3])
                    + (other.group1()[1] * self.group1()[3])
                    + (other.group1()[2] * self.group1()[0])
                    - (other.group1()[2] * self.group3()[0])
                    - (other.group1()[3] * self.group1()[1])
                    + (other.group1()[3] * self.group3()[1])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) - (other.group0()[2] * self.group3()[3]) - (other.group0()[3] * self.group2()[2])
                    + (other.group1()[0] * self.group1()[1])
                    - (other.group1()[0] * self.group3()[1])
                    - (other.group1()[1] * self.group1()[0])
                    + (other.group1()[1] * self.group3()[0])
                    - (other.group1()[2] * self.group0()[3])
                    + (other.group1()[2] * self.group1()[3])
                    - (other.group1()[3] * self.group1()[2])
                    + (other.group1()[3] * self.group3()[2])),
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2]) - (other.group0()[3] * self.group3()[3])
                    + (other.group1()[0] * self.group1()[0])
                    - (other.group1()[0] * self.group3()[0])
                    + (other.group1()[1] * self.group1()[1])
                    - (other.group1()[1] * self.group3()[1])
                    + (other.group1()[2] * self.group1()[2])
                    - (other.group1()[2] * self.group3()[2])
                    - (other.group1()[3] * self.group0()[3])
                    + (other.group1()[3] * self.group1()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group3()[1])
                    + (other.group0()[3] * self.group3()[0])
                    + (other.group1()[0] * self.group2()[3])
                    - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])
                    + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group3()[0])
                    + (other.group0()[3] * self.group3()[1])
                    + (other.group1()[0] * self.group0()[2])
                    + (other.group1()[1] * self.group2()[3])
                    - (other.group1()[2] * self.group0()[0])
                    + (other.group1()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group3()[1])
                    + (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (other.group0()[3] * self.group3()[2])
                    - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group2()[3])
                    + (other.group1()[3] * self.group0()[2])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self.group2()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiPlane> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       48       64        0
    fn geometric_anti_product(self, other: AntiPlane) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group2()[3]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group2()[3])),
                ((other.group0()[0] * self.group3()[0]) + (other.group0()[1] * self.group3()[1]) + (other.group0()[2] * self.group3()[2]) + (other.group0()[3] * self.group2()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group3()[2]) - (other.group0()[2] * self.group3()[1])
                    + (other.group0()[3] * self.group0()[0])),
                (-(other.group0()[0] * self.group3()[2]) - (other.group0()[1] * self.group1()[3])
                    + (other.group0()[2] * self.group3()[0])
                    + (other.group0()[3] * self.group0()[1])),
                ((other.group0()[0] * self.group3()[1]) - (other.group0()[1] * self.group3()[0]) - (other.group0()[2] * self.group1()[3]) + (other.group0()[3] * self.group0()[2])),
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2]) + (other.group0()[3] * self.group2()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1])
                    + (other.group0()[3] * self.group1()[0])
                    - (other.group0()[3] * self.group3()[0])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group3()[3])
                    + (other.group0()[2] * self.group2()[0])
                    + (other.group0()[3] * self.group1()[1])
                    - (other.group0()[3] * self.group3()[1])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) - (other.group0()[2] * self.group3()[3]) + (other.group0()[3] * self.group1()[2])
                    - (other.group0()[3] * self.group3()[2])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group1()[2]) - (other.group0()[2] * self.group1()[1])
                    + (other.group0()[3] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group0()[3])
                    + (other.group0()[2] * self.group1()[0])
                    + (other.group0()[3] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) - (other.group0()[2] * self.group0()[3]) + (other.group0()[3] * self.group0()[2])),
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2]) + (other.group0()[3] * self.group0()[3])
                    - (other.group0()[3] * self.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<AntiScalar> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0       16        0
    fn geometric_anti_product(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other[e12345]),
                (self.group0()[1] * other[e12345]),
                (self.group0()[2] * other[e12345]),
                (self.group0()[3] * other[e12345]),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group1()[0] * other[e12345]),
                (self.group1()[1] * other[e12345]),
                (self.group1()[2] * other[e12345]),
                (self.group1()[3] * other[e12345]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group2()[0] * other[e12345]),
                (self.group2()[1] * other[e12345]),
                (self.group2()[2] * other[e12345]),
                (self.group2()[3] * other[e12345]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group3()[0] * other[e12345]),
                (self.group3()[1] * other[e12345]),
                (self.group3()[2] * other[e12345]),
                (self.group3()[3] * other[e12345]),
            ]),
        );
    }
}
impl GeometricAntiProduct<Circle> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      144      160        0
    fn geometric_anti_product(self, other: Circle) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2]) - (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (other.group0()[2] * self.group3()[1])
                    + (other.group1()[0] * self.group2()[3])
                    - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])
                    + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group0()[3]) + (other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group1()[0])
                    - (other.group0()[2] * self.group3()[0])
                    + (other.group1()[0] * self.group0()[2])
                    + (other.group1()[1] * self.group2()[3])
                    - (other.group1()[2] * self.group0()[0])
                    + (other.group1()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[1]) - (other.group0()[0] * self.group3()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group0()[3])
                    + (other.group0()[2] * self.group1()[3])
                    - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group2()[3])
                    + (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1]) + (other.group2()[0] * self.group2()[3])
                    - (other.group2()[1] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[1])
                    + (other.group1()[0] * self.group0()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])
                    - (other.group1()[3] * self.group3()[0])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group3()[3]) - (other.group0()[2] * self.group2()[0])
                    + (other.group2()[0] * self.group0()[2])
                    + (other.group2()[1] * self.group2()[3])
                    - (other.group2()[2] * self.group0()[0])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group0()[3])
                    - (other.group1()[2] * self.group1()[0])
                    - (other.group1()[3] * self.group3()[1])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) + (other.group0()[2] * self.group3()[3])
                    - (other.group2()[0] * self.group0()[1])
                    + (other.group2()[1] * self.group0()[0])
                    + (other.group2()[2] * self.group2()[3])
                    - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group0()[3])
                    - (other.group1()[3] * self.group3()[2])),
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    - (other.group1()[0] * self.group3()[0])
                    - (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group3()[2])
                    - (other.group1()[3] * self.group0()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group2()[0] * self.group0()[3]) - (other.group2()[0] * self.group1()[3]) - (other.group2()[1] * self.group1()[2])
                    + (other.group2()[1] * self.group3()[2])
                    + (other.group2()[2] * self.group1()[1])
                    - (other.group2()[2] * self.group3()[1])
                    + (other.group1()[0] * self.group3()[3])
                    - (other.group1()[1] * self.group2()[2])
                    + (other.group1()[2] * self.group2()[1])
                    - (other.group1()[3] * self.group2()[0])),
                ((other.group2()[0] * self.group1()[2]) - (other.group2()[0] * self.group3()[2]) + (other.group2()[1] * self.group0()[3])
                    - (other.group2()[1] * self.group1()[3])
                    - (other.group2()[2] * self.group1()[0])
                    + (other.group2()[2] * self.group3()[0])
                    + (other.group1()[0] * self.group2()[2])
                    + (other.group1()[1] * self.group3()[3])
                    - (other.group1()[2] * self.group2()[0])
                    - (other.group1()[3] * self.group2()[1])),
                (-(other.group2()[0] * self.group1()[1]) + (other.group2()[0] * self.group3()[1]) + (other.group2()[1] * self.group1()[0])
                    - (other.group2()[1] * self.group3()[0])
                    + (other.group2()[2] * self.group0()[3])
                    - (other.group2()[2] * self.group1()[3])
                    - (other.group1()[0] * self.group2()[1])
                    + (other.group1()[1] * self.group2()[0])
                    + (other.group1()[2] * self.group3()[3])
                    - (other.group1()[3] * self.group2()[2])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[0] * self.group3()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group3()[2])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])
                    + (other.group1()[3] * self.group2()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1])
                    + (other.group2()[0] * self.group2()[3])
                    - (other.group2()[1] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[1])
                    + (other.group1()[0] * self.group1()[3])
                    - (other.group1()[1] * self.group3()[2])
                    + (other.group1()[2] * self.group3()[1])
                    - (other.group1()[3] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group3()[3])
                    + (other.group0()[2] * self.group2()[0])
                    + (other.group2()[0] * self.group0()[2])
                    + (other.group2()[1] * self.group2()[3])
                    - (other.group2()[2] * self.group0()[0])
                    + (other.group1()[0] * self.group3()[2])
                    + (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group3()[0])
                    - (other.group1()[3] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) - (other.group0()[2] * self.group3()[3]) - (other.group2()[0] * self.group0()[1])
                    + (other.group2()[1] * self.group0()[0])
                    + (other.group2()[2] * self.group2()[3])
                    - (other.group1()[0] * self.group3()[1])
                    + (other.group1()[1] * self.group3()[0])
                    + (other.group1()[2] * self.group1()[3])
                    - (other.group1()[3] * self.group1()[2])),
                (-(other.group2()[0] * self.group1()[0]) + (other.group2()[0] * self.group3()[0]) - (other.group2()[1] * self.group1()[1])
                    + (other.group2()[1] * self.group3()[1])
                    - (other.group2()[2] * self.group1()[2])
                    + (other.group2()[2] * self.group3()[2])
                    - (other.group1()[0] * self.group2()[0])
                    - (other.group1()[1] * self.group2()[1])
                    - (other.group1()[2] * self.group2()[2])
                    - (other.group1()[3] * self.group3()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<CircleRotor> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      160      176        0
    fn geometric_anti_product(self, other: CircleRotor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2]) - (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (other.group0()[2] * self.group3()[1])
                    + (other.group1()[0] * self.group2()[3])
                    - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])
                    + (other.group1()[3] * self.group0()[0])
                    + (other.group2()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group0()[3]) + (other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group1()[0])
                    - (other.group0()[2] * self.group3()[0])
                    + (other.group1()[0] * self.group0()[2])
                    + (other.group1()[1] * self.group2()[3])
                    - (other.group1()[2] * self.group0()[0])
                    + (other.group1()[3] * self.group0()[1])
                    + (other.group2()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[1]) - (other.group0()[0] * self.group3()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group0()[3])
                    + (other.group0()[2] * self.group1()[3])
                    - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group2()[3])
                    + (other.group1()[3] * self.group0()[2])
                    + (other.group2()[3] * self.group0()[2])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    + (other.group2()[3] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1]) + (other.group1()[0] * self.group0()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])
                    - (other.group1()[3] * self.group3()[0])
                    + (other.group2()[0] * self.group2()[3])
                    - (other.group2()[1] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[1])
                    + (other.group2()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group3()[3]) - (other.group0()[2] * self.group2()[0])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group0()[3])
                    - (other.group1()[2] * self.group1()[0])
                    - (other.group1()[3] * self.group3()[1])
                    + (other.group2()[0] * self.group0()[2])
                    + (other.group2()[1] * self.group2()[3])
                    - (other.group2()[2] * self.group0()[0])
                    + (other.group2()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) + (other.group0()[2] * self.group3()[3])
                    - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group0()[3])
                    - (other.group1()[3] * self.group3()[2])
                    - (other.group2()[0] * self.group0()[1])
                    + (other.group2()[1] * self.group0()[0])
                    + (other.group2()[2] * self.group2()[3])
                    + (other.group2()[3] * self.group1()[2])),
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2])
                    - (other.group1()[0] * self.group3()[0])
                    - (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group3()[2])
                    - (other.group1()[3] * self.group0()[3])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    + (other.group2()[3] * self.group1()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group1()[0] * self.group3()[3]) - (other.group1()[1] * self.group2()[2]) + (other.group1()[2] * self.group2()[1]) - (other.group1()[3] * self.group2()[0])
                    + (other.group2()[0] * self.group0()[3])
                    - (other.group2()[0] * self.group1()[3])
                    - (other.group2()[1] * self.group1()[2])
                    + (other.group2()[1] * self.group3()[2])
                    + (other.group2()[2] * self.group1()[1])
                    - (other.group2()[2] * self.group3()[1])
                    + (other.group2()[3] * self.group2()[0])),
                ((other.group1()[0] * self.group2()[2]) + (other.group1()[1] * self.group3()[3]) - (other.group1()[2] * self.group2()[0]) - (other.group1()[3] * self.group2()[1])
                    + (other.group2()[0] * self.group1()[2])
                    - (other.group2()[0] * self.group3()[2])
                    + (other.group2()[1] * self.group0()[3])
                    - (other.group2()[1] * self.group1()[3])
                    - (other.group2()[2] * self.group1()[0])
                    + (other.group2()[2] * self.group3()[0])
                    + (other.group2()[3] * self.group2()[1])),
                (-(other.group1()[0] * self.group2()[1]) + (other.group1()[1] * self.group2()[0]) + (other.group1()[2] * self.group3()[3])
                    - (other.group1()[3] * self.group2()[2])
                    - (other.group2()[0] * self.group1()[1])
                    + (other.group2()[0] * self.group3()[1])
                    + (other.group2()[1] * self.group1()[0])
                    - (other.group2()[1] * self.group3()[0])
                    + (other.group2()[2] * self.group0()[3])
                    - (other.group2()[2] * self.group1()[3])
                    + (other.group2()[3] * self.group2()[2])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[0] * self.group3()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group3()[2])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])
                    + (other.group1()[3] * self.group2()[3])
                    + (other.group2()[3] * self.group2()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1])
                    + (other.group1()[0] * self.group1()[3])
                    - (other.group1()[1] * self.group3()[2])
                    + (other.group1()[2] * self.group3()[1])
                    - (other.group1()[3] * self.group1()[0])
                    + (other.group2()[0] * self.group2()[3])
                    - (other.group2()[1] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[1])
                    + (other.group2()[3] * self.group3()[0])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group3()[3])
                    + (other.group0()[2] * self.group2()[0])
                    + (other.group1()[0] * self.group3()[2])
                    + (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group3()[0])
                    - (other.group1()[3] * self.group1()[1])
                    + (other.group2()[0] * self.group0()[2])
                    + (other.group2()[1] * self.group2()[3])
                    - (other.group2()[2] * self.group0()[0])
                    + (other.group2()[3] * self.group3()[1])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) - (other.group0()[2] * self.group3()[3]) - (other.group1()[0] * self.group3()[1])
                    + (other.group1()[1] * self.group3()[0])
                    + (other.group1()[2] * self.group1()[3])
                    - (other.group1()[3] * self.group1()[2])
                    - (other.group2()[0] * self.group0()[1])
                    + (other.group2()[1] * self.group0()[0])
                    + (other.group2()[2] * self.group2()[3])
                    + (other.group2()[3] * self.group3()[2])),
                (-(other.group1()[0] * self.group2()[0])
                    - (other.group1()[1] * self.group2()[1])
                    - (other.group1()[2] * self.group2()[2])
                    - (other.group1()[3] * self.group3()[3])
                    - (other.group2()[0] * self.group1()[0])
                    + (other.group2()[0] * self.group3()[0])
                    - (other.group2()[1] * self.group1()[1])
                    + (other.group2()[1] * self.group3()[1])
                    - (other.group2()[2] * self.group1()[2])
                    + (other.group2()[2] * self.group3()[2])
                    + (other.group2()[3] * self.group3()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Dipole> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      144      160        0
    fn geometric_anti_product(self, other: Dipole) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group0()[0] * self.group1()[3])
                    + (other.group0()[1] * self.group1()[2])
                    + (other.group0()[1] * self.group3()[2])
                    - (other.group0()[2] * self.group1()[1])
                    - (other.group0()[2] * self.group3()[1])
                    - (other.group1()[0] * self.group2()[3])
                    + (other.group1()[1] * self.group0()[2])
                    - (other.group1()[2] * self.group0()[1])
                    + (other.group1()[3] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[2])
                    - (other.group0()[0] * self.group3()[2])
                    - (other.group0()[1] * self.group0()[3])
                    - (other.group0()[1] * self.group1()[3])
                    + (other.group0()[2] * self.group1()[0])
                    + (other.group0()[2] * self.group3()[0])
                    - (other.group1()[0] * self.group0()[2])
                    - (other.group1()[1] * self.group2()[3])
                    + (other.group1()[2] * self.group0()[0])
                    + (other.group1()[3] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[0] * self.group3()[1])
                    - (other.group0()[1] * self.group1()[0])
                    - (other.group0()[1] * self.group3()[0])
                    - (other.group0()[2] * self.group0()[3])
                    - (other.group0()[2] * self.group1()[3])
                    + (other.group1()[0] * self.group0()[1])
                    - (other.group1()[1] * self.group0()[0])
                    - (other.group1()[2] * self.group2()[3])
                    + (other.group1()[3] * self.group0()[2])),
                ((other.group0()[0] * self.group2()[0])
                    + (other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])
                    + (other.group2()[0] * self.group0()[0])
                    + (other.group2()[1] * self.group0()[1])
                    + (other.group2()[2] * self.group0()[2])
                    + (other.group1()[0] * self.group1()[0])
                    + (other.group1()[1] * self.group1()[1])
                    + (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self.group2()[2])
                    - (other.group0()[2] * self.group2()[1])
                    - (other.group2()[0] * self.group2()[3])
                    + (other.group2()[1] * self.group0()[2])
                    - (other.group2()[2] * self.group0()[1])
                    - (other.group1()[0] * self.group0()[3])
                    + (other.group1()[1] * self.group1()[2])
                    - (other.group1()[2] * self.group1()[1])
                    - (other.group1()[3] * self.group3()[0])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group3()[3]) + (other.group0()[2] * self.group2()[0])
                    - (other.group2()[0] * self.group0()[2])
                    - (other.group2()[1] * self.group2()[3])
                    + (other.group2()[2] * self.group0()[0])
                    - (other.group1()[0] * self.group1()[2])
                    - (other.group1()[1] * self.group0()[3])
                    + (other.group1()[2] * self.group1()[0])
                    - (other.group1()[3] * self.group3()[1])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) - (other.group0()[2] * self.group3()[3]) + (other.group2()[0] * self.group0()[1])
                    - (other.group2()[1] * self.group0()[0])
                    - (other.group2()[2] * self.group2()[3])
                    + (other.group1()[0] * self.group1()[1])
                    - (other.group1()[1] * self.group1()[0])
                    - (other.group1()[2] * self.group0()[3])
                    - (other.group1()[3] * self.group3()[2])),
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    - (other.group1()[0] * self.group3()[0])
                    - (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group3()[2])
                    + (other.group1()[3] * self.group0()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(other.group2()[0] * self.group0()[3]) + (other.group2()[0] * self.group1()[3]) + (other.group2()[1] * self.group1()[2])
                    - (other.group2()[1] * self.group3()[2])
                    - (other.group2()[2] * self.group1()[1])
                    + (other.group2()[2] * self.group3()[1])
                    - (other.group1()[0] * self.group3()[3])
                    + (other.group1()[1] * self.group2()[2])
                    - (other.group1()[2] * self.group2()[1])
                    - (other.group1()[3] * self.group2()[0])),
                (-(other.group2()[0] * self.group1()[2]) + (other.group2()[0] * self.group3()[2]) - (other.group2()[1] * self.group0()[3])
                    + (other.group2()[1] * self.group1()[3])
                    + (other.group2()[2] * self.group1()[0])
                    - (other.group2()[2] * self.group3()[0])
                    - (other.group1()[0] * self.group2()[2])
                    - (other.group1()[1] * self.group3()[3])
                    + (other.group1()[2] * self.group2()[0])
                    - (other.group1()[3] * self.group2()[1])),
                ((other.group2()[0] * self.group1()[1]) - (other.group2()[0] * self.group3()[1]) - (other.group2()[1] * self.group1()[0]) + (other.group2()[1] * self.group3()[0])
                    - (other.group2()[2] * self.group0()[3])
                    + (other.group2()[2] * self.group1()[3])
                    + (other.group1()[0] * self.group2()[1])
                    - (other.group1()[1] * self.group2()[0])
                    - (other.group1()[2] * self.group3()[3])
                    - (other.group1()[3] * self.group2()[2])),
                ((other.group2()[0] * self.group1()[0]) - (other.group2()[0] * self.group3()[0]) + (other.group2()[1] * self.group1()[1]) - (other.group2()[1] * self.group3()[1])
                    + (other.group2()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[2])
                    + (other.group1()[0] * self.group2()[0])
                    + (other.group1()[1] * self.group2()[1])
                    + (other.group1()[2] * self.group2()[2])
                    - (other.group1()[3] * self.group3()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1])
                    + (other.group2()[0] * self.group2()[3])
                    - (other.group2()[1] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[1])
                    + (other.group1()[0] * self.group1()[3])
                    - (other.group1()[1] * self.group3()[2])
                    + (other.group1()[2] * self.group3()[1])
                    + (other.group1()[3] * self.group1()[0])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group3()[3])
                    + (other.group0()[2] * self.group2()[0])
                    + (other.group2()[0] * self.group0()[2])
                    + (other.group2()[1] * self.group2()[3])
                    - (other.group2()[2] * self.group0()[0])
                    + (other.group1()[0] * self.group3()[2])
                    + (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group3()[0])
                    + (other.group1()[3] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) - (other.group0()[2] * self.group3()[3]) - (other.group2()[0] * self.group0()[1])
                    + (other.group2()[1] * self.group0()[0])
                    + (other.group2()[2] * self.group2()[3])
                    - (other.group1()[0] * self.group3()[1])
                    + (other.group1()[1] * self.group3()[0])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])),
                ((other.group0()[0] * self.group1()[0])
                    + (other.group0()[0] * self.group3()[0])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[1] * self.group3()[1])
                    + (other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])
                    + (other.group1()[0] * self.group0()[0])
                    + (other.group1()[1] * self.group0()[1])
                    + (other.group1()[2] * self.group0()[2])
                    + (other.group1()[3] * self.group2()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<DipoleInversion> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      224      240        0
    fn geometric_anti_product(self, other: DipoleInversion) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group0()[0] * self.group1()[3])
                    + (other.group0()[1] * self.group1()[2])
                    + (other.group0()[1] * self.group3()[2])
                    - (other.group0()[2] * self.group1()[1])
                    - (other.group0()[2] * self.group3()[1])
                    - (other.group1()[0] * self.group2()[3])
                    + (other.group1()[1] * self.group0()[2])
                    - (other.group1()[2] * self.group0()[1])
                    + (other.group1()[3] * self.group0()[0])
                    - (other.group2()[3] * self.group1()[0])
                    - (other.group2()[3] * self.group3()[0])
                    + (other.group3()[0] * self.group2()[3])
                    - (other.group3()[1] * self.group0()[2])
                    + (other.group3()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[2])
                    - (other.group0()[0] * self.group3()[2])
                    - (other.group0()[1] * self.group0()[3])
                    - (other.group0()[1] * self.group1()[3])
                    + (other.group0()[2] * self.group1()[0])
                    + (other.group0()[2] * self.group3()[0])
                    - (other.group1()[0] * self.group0()[2])
                    - (other.group1()[1] * self.group2()[3])
                    + (other.group1()[2] * self.group0()[0])
                    + (other.group1()[3] * self.group0()[1])
                    - (other.group2()[3] * self.group1()[1])
                    - (other.group2()[3] * self.group3()[1])
                    + (other.group3()[0] * self.group0()[2])
                    + (other.group3()[1] * self.group2()[3])
                    - (other.group3()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[0] * self.group3()[1])
                    - (other.group0()[1] * self.group1()[0])
                    - (other.group0()[1] * self.group3()[0])
                    - (other.group0()[2] * self.group0()[3])
                    - (other.group0()[2] * self.group1()[3])
                    + (other.group1()[0] * self.group0()[1])
                    - (other.group1()[1] * self.group0()[0])
                    - (other.group1()[2] * self.group2()[3])
                    + (other.group1()[3] * self.group0()[2])
                    - (other.group2()[3] * self.group1()[2])
                    - (other.group2()[3] * self.group3()[2])
                    - (other.group3()[0] * self.group0()[1])
                    + (other.group3()[1] * self.group0()[0])
                    + (other.group3()[2] * self.group2()[3])),
                ((other.group0()[0] * self.group2()[0])
                    + (other.group0()[1] * self.group2()[1])
                    + (other.group0()[2] * self.group2()[2])
                    + (other.group1()[0] * self.group1()[0])
                    + (other.group1()[1] * self.group1()[1])
                    + (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])
                    + (other.group2()[0] * self.group0()[0])
                    + (other.group2()[1] * self.group0()[1])
                    + (other.group2()[2] * self.group0()[2])
                    - (other.group2()[3] * self.group3()[3])
                    + (other.group3()[0] * self.group3()[0])
                    + (other.group3()[1] * self.group3()[1])
                    + (other.group3()[2] * self.group3()[2])
                    - (other.group3()[3] * self.group2()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self.group2()[2])
                    - (other.group0()[2] * self.group2()[1])
                    - (other.group1()[0] * self.group0()[3])
                    + (other.group1()[1] * self.group1()[2])
                    - (other.group1()[2] * self.group1()[1])
                    - (other.group1()[3] * self.group3()[0])
                    - (other.group2()[0] * self.group2()[3])
                    + (other.group2()[1] * self.group0()[2])
                    - (other.group2()[2] * self.group0()[1])
                    - (other.group2()[3] * self.group2()[0])
                    - (other.group3()[0] * self.group1()[3])
                    + (other.group3()[1] * self.group3()[2])
                    - (other.group3()[2] * self.group3()[1])
                    - (other.group3()[3] * self.group0()[0])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group3()[3]) + (other.group0()[2] * self.group2()[0])
                    - (other.group1()[0] * self.group1()[2])
                    - (other.group1()[1] * self.group0()[3])
                    + (other.group1()[2] * self.group1()[0])
                    - (other.group1()[3] * self.group3()[1])
                    - (other.group2()[0] * self.group0()[2])
                    - (other.group2()[1] * self.group2()[3])
                    + (other.group2()[2] * self.group0()[0])
                    - (other.group2()[3] * self.group2()[1])
                    - (other.group3()[0] * self.group3()[2])
                    - (other.group3()[1] * self.group1()[3])
                    + (other.group3()[2] * self.group3()[0])
                    - (other.group3()[3] * self.group0()[1])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) - (other.group0()[2] * self.group3()[3]) + (other.group1()[0] * self.group1()[1])
                    - (other.group1()[1] * self.group1()[0])
                    - (other.group1()[2] * self.group0()[3])
                    - (other.group1()[3] * self.group3()[2])
                    + (other.group2()[0] * self.group0()[1])
                    - (other.group2()[1] * self.group0()[0])
                    - (other.group2()[2] * self.group2()[3])
                    - (other.group2()[3] * self.group2()[2])
                    + (other.group3()[0] * self.group3()[1])
                    - (other.group3()[1] * self.group3()[0])
                    - (other.group3()[2] * self.group1()[3])
                    - (other.group3()[3] * self.group0()[2])),
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2])
                    - (other.group1()[0] * self.group3()[0])
                    - (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group3()[2])
                    + (other.group1()[3] * self.group0()[3])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    - (other.group2()[3] * self.group3()[3])
                    - (other.group3()[0] * self.group1()[0])
                    - (other.group3()[1] * self.group1()[1])
                    - (other.group3()[2] * self.group1()[2])
                    + (other.group3()[3] * self.group2()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(other.group1()[0] * self.group3()[3]) + (other.group1()[1] * self.group2()[2])
                    - (other.group1()[2] * self.group2()[1])
                    - (other.group1()[3] * self.group2()[0])
                    - (other.group2()[0] * self.group0()[3])
                    + (other.group2()[0] * self.group1()[3])
                    + (other.group2()[1] * self.group1()[2])
                    - (other.group2()[1] * self.group3()[2])
                    - (other.group2()[2] * self.group1()[1])
                    + (other.group2()[2] * self.group3()[1])
                    - (other.group3()[0] * self.group3()[3])
                    + (other.group3()[1] * self.group2()[2])
                    - (other.group3()[2] * self.group2()[1])
                    - (other.group3()[3] * self.group1()[0])
                    + (other.group3()[3] * self.group3()[0])),
                (-(other.group1()[0] * self.group2()[2]) - (other.group1()[1] * self.group3()[3]) + (other.group1()[2] * self.group2()[0])
                    - (other.group1()[3] * self.group2()[1])
                    - (other.group2()[0] * self.group1()[2])
                    + (other.group2()[0] * self.group3()[2])
                    - (other.group2()[1] * self.group0()[3])
                    + (other.group2()[1] * self.group1()[3])
                    + (other.group2()[2] * self.group1()[0])
                    - (other.group2()[2] * self.group3()[0])
                    - (other.group3()[0] * self.group2()[2])
                    - (other.group3()[1] * self.group3()[3])
                    + (other.group3()[2] * self.group2()[0])
                    - (other.group3()[3] * self.group1()[1])
                    + (other.group3()[3] * self.group3()[1])),
                ((other.group1()[0] * self.group2()[1]) - (other.group1()[1] * self.group2()[0]) - (other.group1()[2] * self.group3()[3]) - (other.group1()[3] * self.group2()[2])
                    + (other.group2()[0] * self.group1()[1])
                    - (other.group2()[0] * self.group3()[1])
                    - (other.group2()[1] * self.group1()[0])
                    + (other.group2()[1] * self.group3()[0])
                    - (other.group2()[2] * self.group0()[3])
                    + (other.group2()[2] * self.group1()[3])
                    + (other.group3()[0] * self.group2()[1])
                    - (other.group3()[1] * self.group2()[0])
                    - (other.group3()[2] * self.group3()[3])
                    - (other.group3()[3] * self.group1()[2])
                    + (other.group3()[3] * self.group3()[2])),
                ((other.group1()[0] * self.group2()[0]) + (other.group1()[1] * self.group2()[1]) + (other.group1()[2] * self.group2()[2]) - (other.group1()[3] * self.group3()[3])
                    + (other.group2()[0] * self.group1()[0])
                    - (other.group2()[0] * self.group3()[0])
                    + (other.group2()[1] * self.group1()[1])
                    - (other.group2()[1] * self.group3()[1])
                    + (other.group2()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[2])
                    + (other.group3()[0] * self.group2()[0])
                    + (other.group3()[1] * self.group2()[1])
                    + (other.group3()[2] * self.group2()[2])
                    - (other.group3()[3] * self.group0()[3])
                    + (other.group3()[3] * self.group1()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1])
                    + (other.group1()[0] * self.group1()[3])
                    - (other.group1()[1] * self.group3()[2])
                    + (other.group1()[2] * self.group3()[1])
                    + (other.group1()[3] * self.group1()[0])
                    + (other.group2()[0] * self.group2()[3])
                    - (other.group2()[1] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[1])
                    - (other.group2()[3] * self.group2()[0])
                    + (other.group3()[0] * self.group0()[3])
                    - (other.group3()[1] * self.group1()[2])
                    + (other.group3()[2] * self.group1()[1])
                    + (other.group3()[3] * self.group0()[0])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group3()[3])
                    + (other.group0()[2] * self.group2()[0])
                    + (other.group1()[0] * self.group3()[2])
                    + (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group3()[0])
                    + (other.group1()[3] * self.group1()[1])
                    + (other.group2()[0] * self.group0()[2])
                    + (other.group2()[1] * self.group2()[3])
                    - (other.group2()[2] * self.group0()[0])
                    - (other.group2()[3] * self.group2()[1])
                    + (other.group3()[0] * self.group1()[2])
                    + (other.group3()[1] * self.group0()[3])
                    - (other.group3()[2] * self.group1()[0])
                    + (other.group3()[3] * self.group0()[1])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) - (other.group0()[2] * self.group3()[3]) - (other.group1()[0] * self.group3()[1])
                    + (other.group1()[1] * self.group3()[0])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])
                    - (other.group2()[0] * self.group0()[1])
                    + (other.group2()[1] * self.group0()[0])
                    + (other.group2()[2] * self.group2()[3])
                    - (other.group2()[3] * self.group2()[2])
                    - (other.group3()[0] * self.group1()[1])
                    + (other.group3()[1] * self.group1()[0])
                    + (other.group3()[2] * self.group0()[3])
                    + (other.group3()[3] * self.group0()[2])),
                ((other.group0()[0] * self.group1()[0])
                    + (other.group0()[0] * self.group3()[0])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[1] * self.group3()[1])
                    + (other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])
                    + (other.group1()[0] * self.group0()[0])
                    + (other.group1()[1] * self.group0()[1])
                    + (other.group1()[2] * self.group0()[2])
                    + (other.group1()[3] * self.group2()[3])
                    - (other.group2()[3] * self.group0()[3])
                    - (other.group2()[3] * self.group1()[3])
                    - (other.group3()[0] * self.group0()[0])
                    - (other.group3()[1] * self.group0()[1])
                    - (other.group3()[2] * self.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<DualNum> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       16       32        0
    fn geometric_anti_product(self, other: DualNum) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[0] * self.group3()[0]) + (other.group0()[1] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group0()[2])),
                ((other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self.group0()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group1()[0])),
                ((other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group1()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group1()[2])),
                (-(other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self.group1()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other.group0()[1] * self.group2()[0]),
                (other.group0()[1] * self.group2()[1]),
                (other.group0()[1] * self.group2()[2]),
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group2()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group3()[0])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group3()[1])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group3()[2])),
                (other.group0()[1] * self.group3()[3]),
            ]),
        );
    }
}
impl GeometricAntiProduct<FlatPoint> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       48       64        0
    fn geometric_anti_product(self, other: FlatPoint) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other.group0()[3] * self.group0()[0]),
                (other.group0()[3] * self.group0()[1]),
                (other.group0()[3] * self.group0()[2]),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self.group1()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group2()[3]) + (other.group0()[1] * self.group0()[2])
                    - (other.group0()[2] * self.group0()[1])
                    - (other.group0()[3] * self.group3()[0])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group2()[3]) + (other.group0()[2] * self.group0()[0])
                    - (other.group0()[3] * self.group3()[1])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) - (other.group0()[2] * self.group2()[3]) - (other.group0()[3] * self.group3()[2])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])
                    + (other.group0()[3] * self.group0()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) + (other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group1()[2])
                    - (other.group0()[1] * self.group3()[2])
                    - (other.group0()[2] * self.group1()[1])
                    + (other.group0()[2] * self.group3()[1])
                    - (other.group0()[3] * self.group2()[0])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[0] * self.group3()[2]) - (other.group0()[1] * self.group0()[3])
                    + (other.group0()[1] * self.group1()[3])
                    + (other.group0()[2] * self.group1()[0])
                    - (other.group0()[2] * self.group3()[0])
                    - (other.group0()[3] * self.group2()[1])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[0] * self.group3()[1]) - (other.group0()[1] * self.group1()[0]) + (other.group0()[1] * self.group3()[0])
                    - (other.group0()[2] * self.group0()[3])
                    + (other.group0()[2] * self.group1()[3])
                    - (other.group0()[3] * self.group2()[2])),
                ((other.group0()[0] * self.group1()[0]) - (other.group0()[0] * self.group3()[0]) + (other.group0()[1] * self.group1()[1]) - (other.group0()[1] * self.group3()[1])
                    + (other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group3()[2])
                    - (other.group0()[3] * self.group3()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (other.group0()[3] * self.group1()[0])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group2()[3]) - (other.group0()[2] * self.group0()[0]) + (other.group0()[3] * self.group1()[1])),
                (-(other.group0()[0] * self.group0()[1])
                    + (other.group0()[1] * self.group0()[0])
                    + (other.group0()[2] * self.group2()[3])
                    + (other.group0()[3] * self.group1()[2])),
                (other.group0()[3] * self.group2()[3]),
            ]),
        );
    }
}
impl GeometricAntiProduct<Flector> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      112      128        0
    fn geometric_anti_product(self, other: Flector) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((other.group0()[3] * self.group0()[0]) + (other.group1()[0] * self.group2()[3]) - (other.group1()[1] * self.group0()[2]) + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[3] * self.group0()[1]) + (other.group1()[0] * self.group0()[2]) + (other.group1()[1] * self.group2()[3]) - (other.group1()[2] * self.group0()[0])),
                ((other.group0()[3] * self.group0()[2]) - (other.group1()[0] * self.group0()[1]) + (other.group1()[1] * self.group0()[0]) + (other.group1()[2] * self.group2()[3])),
                ((other.group0()[0] * self.group0()[0]) + (other.group0()[1] * self.group0()[1]) + (other.group0()[2] * self.group0()[2]) - (other.group0()[3] * self.group1()[3])
                    + (other.group1()[0] * self.group3()[0])
                    + (other.group1()[1] * self.group3()[1])
                    + (other.group1()[2] * self.group3()[2])
                    - (other.group1()[3] * self.group2()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group2()[3]) + (other.group0()[1] * self.group0()[2])
                    - (other.group0()[2] * self.group0()[1])
                    - (other.group0()[3] * self.group3()[0])
                    - (other.group1()[0] * self.group1()[3])
                    + (other.group1()[1] * self.group3()[2])
                    - (other.group1()[2] * self.group3()[1])
                    - (other.group1()[3] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[2]) - (other.group0()[1] * self.group2()[3]) + (other.group0()[2] * self.group0()[0])
                    - (other.group0()[3] * self.group3()[1])
                    - (other.group1()[0] * self.group3()[2])
                    - (other.group1()[1] * self.group1()[3])
                    + (other.group1()[2] * self.group3()[0])
                    - (other.group1()[3] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[1]) - (other.group0()[1] * self.group0()[0]) - (other.group0()[2] * self.group2()[3]) - (other.group0()[3] * self.group3()[2])
                    + (other.group1()[0] * self.group3()[1])
                    - (other.group1()[1] * self.group3()[0])
                    - (other.group1()[2] * self.group1()[3])
                    - (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])
                    + (other.group0()[3] * self.group0()[3])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    + (other.group1()[3] * self.group2()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) + (other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group1()[2])
                    - (other.group0()[1] * self.group3()[2])
                    - (other.group0()[2] * self.group1()[1])
                    + (other.group0()[2] * self.group3()[1])
                    - (other.group0()[3] * self.group2()[0])
                    - (other.group1()[0] * self.group3()[3])
                    + (other.group1()[1] * self.group2()[2])
                    - (other.group1()[2] * self.group2()[1])
                    - (other.group1()[3] * self.group1()[0])
                    + (other.group1()[3] * self.group3()[0])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group0()[0] * self.group3()[2]) - (other.group0()[1] * self.group0()[3])
                    + (other.group0()[1] * self.group1()[3])
                    + (other.group0()[2] * self.group1()[0])
                    - (other.group0()[2] * self.group3()[0])
                    - (other.group0()[3] * self.group2()[1])
                    - (other.group1()[0] * self.group2()[2])
                    - (other.group1()[1] * self.group3()[3])
                    + (other.group1()[2] * self.group2()[0])
                    - (other.group1()[3] * self.group1()[1])
                    + (other.group1()[3] * self.group3()[1])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[0] * self.group3()[1]) - (other.group0()[1] * self.group1()[0]) + (other.group0()[1] * self.group3()[0])
                    - (other.group0()[2] * self.group0()[3])
                    + (other.group0()[2] * self.group1()[3])
                    - (other.group0()[3] * self.group2()[2])
                    + (other.group1()[0] * self.group2()[1])
                    - (other.group1()[1] * self.group2()[0])
                    - (other.group1()[2] * self.group3()[3])
                    - (other.group1()[3] * self.group1()[2])
                    + (other.group1()[3] * self.group3()[2])),
                ((other.group0()[0] * self.group1()[0]) - (other.group0()[0] * self.group3()[0]) + (other.group0()[1] * self.group1()[1]) - (other.group0()[1] * self.group3()[1])
                    + (other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group3()[2])
                    - (other.group0()[3] * self.group3()[3])
                    + (other.group1()[0] * self.group2()[0])
                    + (other.group1()[1] * self.group2()[1])
                    + (other.group1()[2] * self.group2()[2])
                    - (other.group1()[3] * self.group0()[3])
                    + (other.group1()[3] * self.group1()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group0()[2])
                    + (other.group0()[2] * self.group0()[1])
                    + (other.group0()[3] * self.group1()[0])
                    + (other.group1()[0] * self.group0()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])
                    + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group2()[3]) - (other.group0()[2] * self.group0()[0])
                    + (other.group0()[3] * self.group1()[1])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group0()[3])
                    - (other.group1()[2] * self.group1()[0])
                    + (other.group1()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[1])
                    + (other.group0()[1] * self.group0()[0])
                    + (other.group0()[2] * self.group2()[3])
                    + (other.group0()[3] * self.group1()[2])
                    - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group0()[3])
                    + (other.group1()[3] * self.group0()[2])),
                ((other.group0()[3] * self.group2()[3]) - (other.group1()[0] * self.group0()[0]) - (other.group1()[1] * self.group0()[1]) - (other.group1()[2] * self.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Line> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       80       96        0
    fn geometric_anti_product(self, other: Line) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group2()[3]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group2()[3])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) + (other.group1()[0] * self.group2()[3])
                    - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[3]) - (other.group0()[2] * self.group1()[0])
                    + (other.group1()[0] * self.group0()[2])
                    + (other.group1()[1] * self.group2()[3])
                    - (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group1()[1]) + (other.group0()[1] * self.group1()[0]) + (other.group0()[2] * self.group0()[3])
                    - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group2()[3])),
                (-(other.group0()[0] * self.group3()[0])
                    - (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group3()[2])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self.group2()[2]) + (other.group0()[2] * self.group2()[1]) + (other.group1()[0] * self.group0()[3])
                    - (other.group1()[0] * self.group1()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[1] * self.group3()[2])
                    + (other.group1()[2] * self.group1()[1])
                    - (other.group1()[2] * self.group3()[1])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group3()[3]) - (other.group0()[2] * self.group2()[0]) + (other.group1()[0] * self.group1()[2])
                    - (other.group1()[0] * self.group3()[2])
                    + (other.group1()[1] * self.group0()[3])
                    - (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group1()[0])
                    + (other.group1()[2] * self.group3()[0])),
                (-(other.group0()[0] * self.group2()[1]) + (other.group0()[1] * self.group2()[0]) + (other.group0()[2] * self.group3()[3])
                    - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[0] * self.group3()[1])
                    + (other.group1()[1] * self.group1()[0])
                    - (other.group1()[1] * self.group3()[0])
                    + (other.group1()[2] * self.group0()[3])
                    - (other.group1()[2] * self.group1()[3])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group3()[2]) + (other.group0()[2] * self.group3()[1]) + (other.group1()[0] * self.group2()[3])
                    - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group3()[0])
                    + (other.group1()[0] * self.group0()[2])
                    + (other.group1()[1] * self.group2()[3])
                    - (other.group1()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group3()[1]) + (other.group0()[1] * self.group3()[0]) + (other.group0()[2] * self.group1()[3])
                    - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group2()[3])),
                (-(other.group0()[0] * self.group2()[0])
                    - (other.group0()[1] * self.group2()[1])
                    - (other.group0()[2] * self.group2()[2])
                    - (other.group1()[0] * self.group1()[0])
                    + (other.group1()[0] * self.group3()[0])
                    - (other.group1()[1] * self.group1()[1])
                    + (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group1()[2])
                    + (other.group1()[2] * self.group3()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Motor> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      112      128        0
    fn geometric_anti_product(self, other: Motor) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1]) + (other.group0()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group2()[3]) - (other.group0()[2] * self.group0()[0]) + (other.group0()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group0()[1])
                    + (other.group0()[1] * self.group0()[0])
                    + (other.group0()[2] * self.group2()[3])
                    + (other.group0()[3] * self.group0()[2])),
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])
                    + (other.group0()[3] * self.group0()[3])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])
                    + (other.group1()[3] * self.group2()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group1()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (other.group0()[3] * self.group1()[0])
                    + (other.group1()[0] * self.group2()[3])
                    - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])
                    + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[3]) - (other.group0()[2] * self.group1()[0])
                    + (other.group0()[3] * self.group1()[1])
                    + (other.group1()[0] * self.group0()[2])
                    + (other.group1()[1] * self.group2()[3])
                    - (other.group1()[2] * self.group0()[0])
                    + (other.group1()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group0()[3])
                    + (other.group0()[3] * self.group1()[2])
                    - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group2()[3])
                    + (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[0] * self.group3()[0]) - (other.group0()[1] * self.group3()[1]) - (other.group0()[2] * self.group3()[2])
                    + (other.group0()[3] * self.group1()[3])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])
                    + (other.group1()[3] * self.group2()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[1])
                    + (other.group0()[3] * self.group2()[0])
                    + (other.group1()[0] * self.group0()[3])
                    - (other.group1()[0] * self.group1()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[1] * self.group3()[2])
                    + (other.group1()[2] * self.group1()[1])
                    - (other.group1()[2] * self.group3()[1])
                    + (other.group1()[3] * self.group1()[0])
                    - (other.group1()[3] * self.group3()[0])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group3()[3]) - (other.group0()[2] * self.group2()[0])
                    + (other.group0()[3] * self.group2()[1])
                    + (other.group1()[0] * self.group1()[2])
                    - (other.group1()[0] * self.group3()[2])
                    + (other.group1()[1] * self.group0()[3])
                    - (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group1()[0])
                    + (other.group1()[2] * self.group3()[0])
                    + (other.group1()[3] * self.group1()[1])
                    - (other.group1()[3] * self.group3()[1])),
                (-(other.group0()[0] * self.group2()[1])
                    + (other.group0()[1] * self.group2()[0])
                    + (other.group0()[2] * self.group3()[3])
                    + (other.group0()[3] * self.group2()[2])
                    - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[0] * self.group3()[1])
                    + (other.group1()[1] * self.group1()[0])
                    - (other.group1()[1] * self.group3()[0])
                    + (other.group1()[2] * self.group0()[3])
                    - (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])
                    - (other.group1()[3] * self.group3()[2])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])
                    + (other.group0()[3] * self.group2()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group3()[1])
                    + (other.group0()[3] * self.group3()[0])
                    + (other.group1()[0] * self.group2()[3])
                    - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])
                    + (other.group1()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group1()[3]) - (other.group0()[2] * self.group3()[0])
                    + (other.group0()[3] * self.group3()[1])
                    + (other.group1()[0] * self.group0()[2])
                    + (other.group1()[1] * self.group2()[3])
                    - (other.group1()[2] * self.group0()[0])
                    + (other.group1()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group3()[1])
                    + (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group1()[3])
                    + (other.group0()[3] * self.group3()[2])
                    - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group2()[3])
                    + (other.group1()[3] * self.group0()[2])),
                (-(other.group0()[0] * self.group2()[0]) - (other.group0()[1] * self.group2()[1]) - (other.group0()[2] * self.group2()[2])
                    + (other.group0()[3] * self.group3()[3])
                    - (other.group1()[0] * self.group1()[0])
                    + (other.group1()[0] * self.group3()[0])
                    - (other.group1()[1] * self.group1()[1])
                    + (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group1()[2])
                    + (other.group1()[2] * self.group3()[2])
                    + (other.group1()[3] * self.group0()[3])
                    - (other.group1()[3] * self.group1()[3])),
            ]),
        );
    }
}
impl GeometricAntiProduct<MultiVector> for VersorOdd {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      480      512        0
    fn geometric_anti_product(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((other.group0()[1] * self.group0()[3])
                    - (other.group7()[0] * self.group2()[0])
                    - (other.group7()[1] * self.group2()[1])
                    - (other.group7()[2] * self.group2()[2])
                    - (other.group8()[0] * self.group0()[0])
                    - (other.group8()[1] * self.group0()[1])
                    - (other.group8()[2] * self.group0()[2])
                    + (other.group1()[0] * self.group3()[0])
                    + (other.group1()[1] * self.group3()[1])
                    + (other.group1()[2] * self.group3()[2])
                    + (other.group1()[3] * self.group3()[3])
                    - (other.group6()[0] * self.group1()[0])
                    - (other.group6()[1] * self.group1()[1])
                    - (other.group6()[2] * self.group1()[2])
                    - (other.group6()[3] * self.group1()[3])
                    + (self.group2()[3] * other[e1])),
                (-(other.group0()[0] * self.group0()[3])
                    + (other.group4()[0] * self.group2()[0])
                    + (other.group4()[1] * self.group2()[1])
                    + (other.group4()[2] * self.group2()[2])
                    + (other.group5()[0] * self.group1()[0])
                    + (other.group5()[1] * self.group1()[1])
                    + (other.group5()[2] * self.group1()[2])
                    + (other.group3()[0] * self.group0()[0])
                    + (other.group3()[1] * self.group0()[1])
                    + (other.group3()[2] * self.group0()[2])
                    - (other.group3()[3] * self.group1()[3])
                    + (other.group9()[0] * self.group3()[0])
                    + (other.group9()[1] * self.group3()[1])
                    + (other.group9()[2] * self.group3()[2])
                    - (other.group9()[3] * self.group2()[3])
                    - (self.group3()[3] * other[e45])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group3()[0]) - (other.group4()[0] * self.group3()[3]) + (other.group4()[1] * self.group2()[2]) - (other.group4()[2] * self.group2()[1])
                    + (other.group5()[0] * self.group1()[3])
                    - (other.group5()[1] * self.group3()[2])
                    + (other.group5()[2] * self.group3()[1])
                    + (other.group3()[0] * self.group2()[3])
                    - (other.group3()[1] * self.group0()[2])
                    + (other.group3()[2] * self.group0()[1])
                    + (other.group3()[3] * self.group1()[0])
                    + (other.group9()[0] * self.group0()[3])
                    - (other.group9()[1] * self.group1()[2])
                    + (other.group9()[2] * self.group1()[1])
                    + (other.group9()[3] * self.group0()[0])
                    - (self.group2()[0] * other[e45])),
                ((other.group0()[0] * self.group3()[1]) - (other.group4()[0] * self.group2()[2]) - (other.group4()[1] * self.group3()[3])
                    + (other.group4()[2] * self.group2()[0])
                    + (other.group5()[0] * self.group3()[2])
                    + (other.group5()[1] * self.group1()[3])
                    - (other.group5()[2] * self.group3()[0])
                    + (other.group3()[0] * self.group0()[2])
                    + (other.group3()[1] * self.group2()[3])
                    - (other.group3()[2] * self.group0()[0])
                    + (other.group3()[3] * self.group1()[1])
                    + (other.group9()[0] * self.group1()[2])
                    + (other.group9()[1] * self.group0()[3])
                    - (other.group9()[2] * self.group1()[0])
                    + (other.group9()[3] * self.group0()[1])
                    - (self.group2()[1] * other[e45])),
                ((other.group0()[0] * self.group3()[2]) + (other.group4()[0] * self.group2()[1])
                    - (other.group4()[1] * self.group2()[0])
                    - (other.group4()[2] * self.group3()[3])
                    - (other.group5()[0] * self.group3()[1])
                    + (other.group5()[1] * self.group3()[0])
                    + (other.group5()[2] * self.group1()[3])
                    - (other.group3()[0] * self.group0()[1])
                    + (other.group3()[1] * self.group0()[0])
                    + (other.group3()[2] * self.group2()[3])
                    + (other.group3()[3] * self.group1()[2])
                    - (other.group9()[0] * self.group1()[1])
                    + (other.group9()[1] * self.group1()[0])
                    + (other.group9()[2] * self.group0()[3])
                    + (other.group9()[3] * self.group0()[2])
                    - (self.group2()[2] * other[e45])),
                (-(other.group0()[0] * self.group2()[3])
                    + (other.group4()[0] * self.group1()[0])
                    + (other.group4()[0] * self.group3()[0])
                    + (other.group4()[1] * self.group1()[1])
                    + (other.group4()[1] * self.group3()[1])
                    + (other.group4()[2] * self.group1()[2])
                    + (other.group4()[2] * self.group3()[2])
                    + (other.group5()[0] * self.group0()[0])
                    + (other.group5()[1] * self.group0()[1])
                    + (other.group5()[2] * self.group0()[2])
                    + (other.group3()[3] * self.group2()[3])
                    - (other.group9()[0] * self.group0()[0])
                    - (other.group9()[1] * self.group0()[1])
                    - (other.group9()[2] * self.group0()[2])
                    - (self.group0()[3] * other[e45])
                    - (self.group1()[3] * other[e45])),
            ]),
            // e5
            (-(other.group0()[0] * self.group3()[3])
                + (other.group5()[0] * self.group2()[0])
                + (other.group5()[1] * self.group2()[1])
                + (other.group5()[2] * self.group2()[2])
                + (other.group3()[0] * self.group1()[0])
                - (other.group3()[0] * self.group3()[0])
                + (other.group3()[1] * self.group1()[1])
                - (other.group3()[1] * self.group3()[1])
                + (other.group3()[2] * self.group1()[2])
                - (other.group3()[2] * self.group3()[2])
                - (other.group3()[3] * self.group3()[3])
                + (other.group9()[0] * self.group2()[0])
                + (other.group9()[1] * self.group2()[1])
                + (other.group9()[2] * self.group2()[2])
                - (other.group9()[3] * self.group0()[3])
                + (other.group9()[3] * self.group1()[3])),
            // e15, e25, e35, e45
            Simd32x4::from([
                ((other.group0()[1] * self.group2()[0]) + (other.group8()[0] * self.group0()[3]) - (other.group8()[0] * self.group1()[3]) - (other.group8()[1] * self.group1()[2])
                    + (other.group8()[1] * self.group3()[2])
                    + (other.group8()[2] * self.group1()[1])
                    - (other.group8()[2] * self.group3()[1])
                    - (other.group1()[0] * self.group3()[3])
                    + (other.group1()[1] * self.group2()[2])
                    - (other.group1()[2] * self.group2()[1])
                    + (other.group6()[0] * self.group3()[3])
                    - (other.group6()[1] * self.group2()[2])
                    + (other.group6()[2] * self.group2()[1])
                    - (other.group6()[3] * self.group2()[0])
                    + (self.group1()[0] * other[e1])
                    - (self.group3()[0] * other[e1])),
                ((other.group0()[1] * self.group2()[1]) + (other.group8()[0] * self.group1()[2]) - (other.group8()[0] * self.group3()[2]) + (other.group8()[1] * self.group0()[3])
                    - (other.group8()[1] * self.group1()[3])
                    - (other.group8()[2] * self.group1()[0])
                    + (other.group8()[2] * self.group3()[0])
                    - (other.group1()[0] * self.group2()[2])
                    - (other.group1()[1] * self.group3()[3])
                    + (other.group1()[2] * self.group2()[0])
                    + (other.group6()[0] * self.group2()[2])
                    + (other.group6()[1] * self.group3()[3])
                    - (other.group6()[2] * self.group2()[0])
                    - (other.group6()[3] * self.group2()[1])
                    + (self.group1()[1] * other[e1])
                    - (self.group3()[1] * other[e1])),
                ((other.group0()[1] * self.group2()[2]) - (other.group8()[0] * self.group1()[1]) + (other.group8()[0] * self.group3()[1]) + (other.group8()[1] * self.group1()[0])
                    - (other.group8()[1] * self.group3()[0])
                    + (other.group8()[2] * self.group0()[3])
                    - (other.group8()[2] * self.group1()[3])
                    + (other.group1()[0] * self.group2()[1])
                    - (other.group1()[1] * self.group2()[0])
                    - (other.group1()[2] * self.group3()[3])
                    - (other.group6()[0] * self.group2()[1])
                    + (other.group6()[1] * self.group2()[0])
                    + (other.group6()[2] * self.group3()[3])
                    - (other.group6()[3] * self.group2()[2])
                    + (self.group1()[2] * other[e1])
                    - (self.group3()[2] * other[e1])),
                ((other.group0()[1] * self.group1()[3]) + (other.group7()[0] * self.group2()[0]) + (other.group7()[1] * self.group2()[1]) + (other.group7()[2] * self.group2()[2])
                    - (other.group8()[0] * self.group0()[0])
                    - (other.group8()[1] * self.group0()[1])
                    - (other.group8()[2] * self.group0()[2])
                    + (other.group1()[0] * self.group1()[0])
                    + (other.group1()[1] * self.group1()[1])
                    + (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group3()[3])
                    - (other.group6()[0] * self.group3()[0])
                    - (other.group6()[1] * self.group3()[1])
                    - (other.group6()[2] * self.group3()[2])
                    - (other.group6()[3] * self.group0()[3])
                    + (self.group2()[3] * other[e1])),
            ]),
            // e41, e42, e43
            Simd32x3::from([
                ((other.group0()[1] * self.group0()[0]) + (other.group7()[0] * self.group0()[3]) + (other.group7()[0] * self.group1()[3])
                    - (other.group7()[1] * self.group1()[2])
                    - (other.group7()[1] * self.group3()[2])
                    + (other.group7()[2] * self.group1()[1])
                    + (other.group7()[2] * self.group3()[1])
                    + (other.group1()[0] * self.group2()[3])
                    - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])
                    + (other.group1()[3] * self.group1()[0])
                    + (other.group1()[3] * self.group3()[0])
                    + (other.group6()[0] * self.group2()[3])
                    - (other.group6()[1] * self.group0()[2])
                    + (other.group6()[2] * self.group0()[1])
                    + (other.group6()[3] * self.group0()[0])),
                ((other.group0()[1] * self.group0()[1])
                    + (other.group7()[0] * self.group1()[2])
                    + (other.group7()[0] * self.group3()[2])
                    + (other.group7()[1] * self.group0()[3])
                    + (other.group7()[1] * self.group1()[3])
                    - (other.group7()[2] * self.group1()[0])
                    - (other.group7()[2] * self.group3()[0])
                    + (other.group1()[0] * self.group0()[2])
                    + (other.group1()[1] * self.group2()[3])
                    - (other.group1()[2] * self.group0()[0])
                    + (other.group1()[3] * self.group1()[1])
                    + (other.group1()[3] * self.group3()[1])
                    + (other.group6()[0] * self.group0()[2])
                    + (other.group6()[1] * self.group2()[3])
                    - (other.group6()[2] * self.group0()[0])
                    + (other.group6()[3] * self.group0()[1])),
                ((other.group0()[1] * self.group0()[2]) - (other.group7()[0] * self.group1()[1]) - (other.group7()[0] * self.group3()[1])
                    + (other.group7()[1] * self.group1()[0])
                    + (other.group7()[1] * self.group3()[0])
                    + (other.group7()[2] * self.group0()[3])
                    + (other.group7()[2] * self.group1()[3])
                    - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group2()[3])
                    + (other.group1()[3] * self.group1()[2])
                    + (other.group1()[3] * self.group3()[2])
                    - (other.group6()[0] * self.group0()[1])
                    + (other.group6()[1] * self.group0()[0])
                    + (other.group6()[2] * self.group2()[3])
                    + (other.group6()[3] * self.group0()[2])),
            ]),
            // e23, e31, e12
            Simd32x3::from([
                ((other.group0()[1] * self.group1()[0]) + (other.group7()[0] * self.group3()[3]) - (other.group7()[1] * self.group2()[2])
                    + (other.group7()[2] * self.group2()[1])
                    + (other.group8()[0] * self.group2()[3])
                    - (other.group8()[1] * self.group0()[2])
                    + (other.group8()[2] * self.group0()[1])
                    - (other.group1()[0] * self.group1()[3])
                    + (other.group1()[1] * self.group3()[2])
                    - (other.group1()[2] * self.group3()[1])
                    + (other.group1()[3] * self.group2()[0])
                    + (other.group6()[0] * self.group0()[3])
                    - (other.group6()[1] * self.group1()[2])
                    + (other.group6()[2] * self.group1()[1])
                    - (other.group6()[3] * self.group3()[0])
                    + (self.group0()[0] * other[e1])),
                ((other.group0()[1] * self.group1()[1]) + (other.group7()[0] * self.group2()[2]) + (other.group7()[1] * self.group3()[3]) - (other.group7()[2] * self.group2()[0])
                    + (other.group8()[0] * self.group0()[2])
                    + (other.group8()[1] * self.group2()[3])
                    - (other.group8()[2] * self.group0()[0])
                    - (other.group1()[0] * self.group3()[2])
                    - (other.group1()[1] * self.group1()[3])
                    + (other.group1()[2] * self.group3()[0])
                    + (other.group1()[3] * self.group2()[1])
                    + (other.group6()[0] * self.group1()[2])
                    + (other.group6()[1] * self.group0()[3])
                    - (other.group6()[2] * self.group1()[0])
                    - (other.group6()[3] * self.group3()[1])
                    + (self.group0()[1] * other[e1])),
                ((other.group0()[1] * self.group1()[2]) - (other.group7()[0] * self.group2()[1]) + (other.group7()[1] * self.group2()[0]) + (other.group7()[2] * self.group3()[3])
                    - (other.group8()[0] * self.group0()[1])
                    + (other.group8()[1] * self.group0()[0])
                    + (other.group8()[2] * self.group2()[3])
                    + (other.group1()[0] * self.group3()[1])
                    - (other.group1()[1] * self.group3()[0])
                    - (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group2()[2])
                    - (other.group6()[0] * self.group1()[1])
                    + (other.group6()[1] * self.group1()[0])
                    + (other.group6()[2] * self.group0()[3])
                    - (other.group6()[3] * self.group3()[2])
                    + (self.group0()[2] * other[e1])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[0]) - (other.group4()[0] * self.group3()[3]) + (other.group4()[1] * self.group2()[2])
                    - (other.group4()[2] * self.group2()[1])
                    - (other.group5()[0] * self.group0()[3])
                    + (other.group5()[1] * self.group1()[2])
                    - (other.group5()[2] * self.group1()[1])
                    - (other.group3()[0] * self.group2()[3])
                    + (other.group3()[1] * self.group0()[2])
                    - (other.group3()[2] * self.group0()[1])
                    - (other.group3()[3] * self.group3()[0])
                    - (other.group9()[0] * self.group1()[3])
                    + (other.group9()[1] * self.group3()[2])
                    - (other.group9()[2] * self.group3()[1])
                    - (other.group9()[3] * self.group0()[0])
                    - (self.group2()[0] * other[e45])),
                (-(other.group0()[0] * self.group1()[1]) - (other.group4()[0] * self.group2()[2]) - (other.group4()[1] * self.group3()[3])
                    + (other.group4()[2] * self.group2()[0])
                    - (other.group5()[0] * self.group1()[2])
                    - (other.group5()[1] * self.group0()[3])
                    + (other.group5()[2] * self.group1()[0])
                    - (other.group3()[0] * self.group0()[2])
                    - (other.group3()[1] * self.group2()[3])
                    + (other.group3()[2] * self.group0()[0])
                    - (other.group3()[3] * self.group3()[1])
                    - (other.group9()[0] * self.group3()[2])
                    - (other.group9()[1] * self.group1()[3])
                    + (other.group9()[2] * self.group3()[0])
                    - (other.group9()[3] * self.group0()[1])
                    - (self.group2()[1] * other[e45])),
                (-(other.group0()[0] * self.group1()[2]) + (other.group4()[0] * self.group2()[1])
                    - (other.group4()[1] * self.group2()[0])
                    - (other.group4()[2] * self.group3()[3])
                    + (other.group5()[0] * self.group1()[1])
                    - (other.group5()[1] * self.group1()[0])
                    - (other.group5()[2] * self.group0()[3])
                    + (other.group3()[0] * self.group0()[1])
                    - (other.group3()[1] * self.group0()[0])
                    - (other.group3()[2] * self.group2()[3])
                    - (other.group3()[3] * self.group3()[2])
                    + (other.group9()[0] * self.group3()[1])
                    - (other.group9()[1] * self.group3()[0])
                    - (other.group9()[2] * self.group1()[3])
                    - (other.group9()[3] * self.group0()[2])
                    - (self.group2()[2] * other[e45])),
                ((other.group0()[0] * self.group1()[3]) + (other.group4()[0] * self.group2()[0]) + (other.group4()[1] * self.group2()[1]) + (other.group4()[2] * self.group2()[2])
                    - (other.group5()[0] * self.group3()[0])
                    - (other.group5()[1] * self.group3()[1])
                    - (other.group5()[2] * self.group3()[2])
                    - (other.group3()[0] * self.group0()[0])
                    - (other.group3()[1] * self.group0()[1])
                    - (other.group3()[2] * self.group0()[2])
                    + (other.group3()[3] * self.group0()[3])
                    - (other.group9()[0] * self.group1()[0])
                    - (other.group9()[1] * self.group1()[1])
                    - (other.group9()[2] * self.group1()[2])
                    + (other.group9()[3] * self.group2()[3])
                    - (self.group3()[3] * other[e45])),
            ]),
            // e423, e431, e412
            Simd32x3::from([
                (-(other.group0()[0] * self.group0()[0]) - (other.group4()[0] * self.group0()[3]) - (other.group4()[0] * self.group1()[3])
                    + (other.group4()[1] * self.group1()[2])
                    + (other.group4()[1] * self.group3()[2])
                    - (other.group4()[2] * self.group1()[1])
                    - (other.group4()[2] * self.group3()[1])
                    - (other.group5()[0] * self.group2()[3])
                    + (other.group5()[1] * self.group0()[2])
                    - (other.group5()[2] * self.group0()[1])
                    + (other.group3()[3] * self.group0()[0])
                    + (other.group9()[0] * self.group2()[3])
                    - (other.group9()[1] * self.group0()[2])
                    + (other.group9()[2] * self.group0()[1])
                    - (self.group1()[0] * other[e45])
                    - (self.group3()[0] * other[e45])),
                (-(other.group0()[0] * self.group0()[1])
                    - (other.group4()[0] * self.group1()[2])
                    - (other.group4()[0] * self.group3()[2])
                    - (other.group4()[1] * self.group0()[3])
                    - (other.group4()[1] * self.group1()[3])
                    + (other.group4()[2] * self.group1()[0])
                    + (other.group4()[2] * self.group3()[0])
                    - (other.group5()[0] * self.group0()[2])
                    - (other.group5()[1] * self.group2()[3])
                    + (other.group5()[2] * self.group0()[0])
                    + (other.group3()[3] * self.group0()[1])
                    + (other.group9()[0] * self.group0()[2])
                    + (other.group9()[1] * self.group2()[3])
                    - (other.group9()[2] * self.group0()[0])
                    - (self.group1()[1] * other[e45])
                    - (self.group3()[1] * other[e45])),
                (-(other.group0()[0] * self.group0()[2]) + (other.group4()[0] * self.group1()[1]) + (other.group4()[0] * self.group3()[1])
                    - (other.group4()[1] * self.group1()[0])
                    - (other.group4()[1] * self.group3()[0])
                    - (other.group4()[2] * self.group0()[3])
                    - (other.group4()[2] * self.group1()[3])
                    + (other.group5()[0] * self.group0()[1])
                    - (other.group5()[1] * self.group0()[0])
                    - (other.group5()[2] * self.group2()[3])
                    + (other.group3()[3] * self.group0()[2])
                    - (other.group9()[0] * self.group0()[1])
                    + (other.group9()[1] * self.group0()[0])
                    + (other.group9()[2] * self.group2()[3])
                    - (self.group1()[2] * other[e45])
                    - (self.group3()[2] * other[e45])),
            ]),
            // e235, e315, e125
            Simd32x3::from([
                (-(other.group0()[0] * self.group2()[0]) - (other.group5()[0] * self.group3()[3]) + (other.group5()[1] * self.group2()[2])
                    - (other.group5()[2] * self.group2()[1])
                    - (other.group3()[0] * self.group0()[3])
                    + (other.group3()[0] * self.group1()[3])
                    + (other.group3()[1] * self.group1()[2])
                    - (other.group3()[1] * self.group3()[2])
                    - (other.group3()[2] * self.group1()[1])
                    + (other.group3()[2] * self.group3()[1])
                    - (other.group3()[3] * self.group2()[0])
                    - (other.group9()[0] * self.group3()[3])
                    + (other.group9()[1] * self.group2()[2])
                    - (other.group9()[2] * self.group2()[1])
                    - (other.group9()[3] * self.group1()[0])
                    + (other.group9()[3] * self.group3()[0])),
                (-(other.group0()[0] * self.group2()[1]) - (other.group5()[0] * self.group2()[2]) - (other.group5()[1] * self.group3()[3])
                    + (other.group5()[2] * self.group2()[0])
                    - (other.group3()[0] * self.group1()[2])
                    + (other.group3()[0] * self.group3()[2])
                    - (other.group3()[1] * self.group0()[3])
                    + (other.group3()[1] * self.group1()[3])
                    + (other.group3()[2] * self.group1()[0])
                    - (other.group3()[2] * self.group3()[0])
                    - (other.group3()[3] * self.group2()[1])
                    - (other.group9()[0] * self.group2()[2])
                    - (other.group9()[1] * self.group3()[3])
                    + (other.group9()[2] * self.group2()[0])
                    - (other.group9()[3] * self.group1()[1])
                    + (other.group9()[3] * self.group3()[1])),
                (-(other.group0()[0] * self.group2()[2]) + (other.group5()[0] * self.group2()[1])
                    - (other.group5()[1] * self.group2()[0])
                    - (other.group5()[2] * self.group3()[3])
                    + (other.group3()[0] * self.group1()[1])
                    - (other.group3()[0] * self.group3()[1])
                    - (other.group3()[1] * self.group1()[0])
                    + (other.group3()[1] * self.group3()[0])
                    - (other.group3()[2] * self.group0()[3])
                    + (other.group3()[2] * self.group1()[3])
                    - (other.group3()[3] * self.group2()[2])
                    + (other.group9()[0] * self.group2()[1])
                    - (other.group9()[1] * self.group2()[0])
                    - (other.group9()[2] * self.group3()[3])
                    - (other.group9()[3] * self.group1()[2])
                    + (other.group9()[3] * self.group3()[2])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((other.group0()[1] * self.group3()[0]) - (other.group7()[0] * self.group3()[3]) + (other.group7()[1] * self.group2()[2]) - (other.group7()[2] * self.group2()[1])
                    + (other.group8()[0] * self.group2()[3])
                    - (other.group8()[1] * self.group0()[2])
                    + (other.group8()[2] * self.group0()[1])
                    - (other.group1()[0] * self.group0()[3])
                    + (other.group1()[1] * self.group1()[2])
                    - (other.group1()[2] * self.group1()[1])
                    - (other.group1()[3] * self.group2()[0])
                    + (other.group6()[0] * self.group1()[3])
                    - (other.group6()[1] * self.group3()[2])
                    + (other.group6()[2] * self.group3()[1])
                    - (other.group6()[3] * self.group1()[0])
                    + (self.group0()[0] * other[e1])),
                ((other.group0()[1] * self.group3()[1]) - (other.group7()[0] * self.group2()[2]) - (other.group7()[1] * self.group3()[3])
                    + (other.group7()[2] * self.group2()[0])
                    + (other.group8()[0] * self.group0()[2])
                    + (other.group8()[1] * self.group2()[3])
                    - (other.group8()[2] * self.group0()[0])
                    - (other.group1()[0] * self.group1()[2])
                    - (other.group1()[1] * self.group0()[3])
                    + (other.group1()[2] * self.group1()[0])
                    - (other.group1()[3] * self.group2()[1])
                    + (other.group6()[0] * self.group3()[2])
                    + (other.group6()[1] * self.group1()[3])
                    - (other.group6()[2] * self.group3()[0])
                    - (other.group6()[3] * self.group1()[1])
                    + (self.group0()[1] * other[e1])),
                ((other.group0()[1] * self.group3()[2]) + (other.group7()[0] * self.group2()[1])
                    - (other.group7()[1] * self.group2()[0])
                    - (other.group7()[2] * self.group3()[3])
                    - (other.group8()[0] * self.group0()[1])
                    + (other.group8()[1] * self.group0()[0])
                    + (other.group8()[2] * self.group2()[3])
                    + (other.group1()[0] * self.group1()[1])
                    - (other.group1()[1] * self.group1()[0])
                    - (other.group1()[2] * self.group0()[3])
                    - (other.group1()[3] * self.group2()[2])
                    - (other.group6()[0] * self.group3()[1])
                    + (other.group6()[1] * self.group3()[0])
                    + (other.group6()[2] * self.group1()[3])
                    - (other.group6()[3] * self.group1()[2])
                    + (self.group0()[2] * other[e1])),
                ((other.group0()[1] * self.group3()[3]) - (other.group8()[0] * self.group1()[0]) + (other.group8()[0] * self.group3()[0]) - (other.group8()[1] * self.group1()[1])
                    + (other.group8()[1] * self.group3()[1])
                    - (other.group8()[2] * self.group1()[2])
                    + (other.group8()[2] * self.group3()[2])
                    + (other.group1()[0] * self.group2()[0])
                    + (other.group1()[1] * self.group2()[1])
                    + (other.group1()[2] * self.group2()[2])
                    - (other.group6()[0] * self.group2()[0])
                    - (other.group6()[1] * self.group2()[1])
                    - (other.group6()[2] * self.group2()[2])
                    - (other.group6()[3] * self.group3()[3])
                    + (self.group0()[3] * other[e1])
                    - (self.group1()[3] * other[e1])),
            ]),
            // e1234
            ((other.group0()[1] * self.group2()[3])
                - (other.group7()[0] * self.group1()[0])
                - (other.group7()[0] * self.group3()[0])
                - (other.group7()[1] * self.group1()[1])
                - (other.group7()[1] * self.group3()[1])
                - (other.group7()[2] * self.group1()[2])
                - (other.group7()[2] * self.group3()[2])
                - (other.group1()[0] * self.group0()[0])
                - (other.group1()[1] * self.group0()[1])
                - (other.group1()[2] * self.group0()[2])
                + (other.group1()[3] * self.group0()[3])
                + (other.group1()[3] * self.group1()[3])
                - (other.group6()[0] * self.group0()[0])
                - (other.group6()[1] * self.group0()[1])
                - (other.group6()[2] * self.group0()[2])
                + (other.group6()[3] * self.group2()[3])),
        );
    }
}
impl GeometricAntiProduct<Plane> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       48       64        0
    fn geometric_anti_product(self, other: Plane) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group2()[3]) - (other.group0()[2] * self.group0()[0])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group2()[3])),
                ((other.group0()[0] * self.group3()[0]) + (other.group0()[1] * self.group3()[1]) + (other.group0()[2] * self.group3()[2]) - (other.group0()[3] * self.group2()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group3()[2])
                    - (other.group0()[2] * self.group3()[1])
                    - (other.group0()[3] * self.group0()[0])),
                (-(other.group0()[0] * self.group3()[2]) - (other.group0()[1] * self.group1()[3]) + (other.group0()[2] * self.group3()[0])
                    - (other.group0()[3] * self.group0()[1])),
                ((other.group0()[0] * self.group3()[1]) - (other.group0()[1] * self.group3()[0]) - (other.group0()[2] * self.group1()[3]) - (other.group0()[3] * self.group0()[2])),
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])
                    + (other.group0()[3] * self.group2()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self.group2()[2])
                    - (other.group0()[2] * self.group2()[1])
                    - (other.group0()[3] * self.group1()[0])
                    + (other.group0()[3] * self.group3()[0])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group3()[3]) + (other.group0()[2] * self.group2()[0])
                    - (other.group0()[3] * self.group1()[1])
                    + (other.group0()[3] * self.group3()[1])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) - (other.group0()[2] * self.group3()[3]) - (other.group0()[3] * self.group1()[2])
                    + (other.group0()[3] * self.group3()[2])),
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2]) - (other.group0()[3] * self.group0()[3])
                    + (other.group0()[3] * self.group1()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) + (other.group0()[3] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[3]) - (other.group0()[2] * self.group1()[0]) + (other.group0()[3] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group0()[3])
                    + (other.group0()[3] * self.group0()[2])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<RoundPoint> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       64       80        0
    fn geometric_anti_product(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group0()[2])
                    + (other.group0()[2] * self.group0()[1])
                    + (other.group0()[3] * self.group1()[0])
                    + (other.group0()[3] * self.group3()[0])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group2()[3]) - (other.group0()[2] * self.group0()[0])
                    + (other.group0()[3] * self.group1()[1])
                    + (other.group0()[3] * self.group3()[1])),
                (-(other.group0()[0] * self.group0()[1])
                    + (other.group0()[1] * self.group0()[0])
                    + (other.group0()[2] * self.group2()[3])
                    + (other.group0()[3] * self.group1()[2])
                    + (other.group0()[3] * self.group3()[2])),
                ((other.group0()[0] * self.group3()[0])
                    + (other.group0()[1] * self.group3()[1])
                    + (other.group0()[2] * self.group3()[2])
                    + (other.group0()[3] * self.group3()[3])
                    + (self.group2()[3] * other[e2])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group3()[2]) - (other.group0()[2] * self.group3()[1])
                    + (other.group0()[3] * self.group2()[0])
                    + (self.group0()[0] * other[e2])),
                (-(other.group0()[0] * self.group3()[2]) - (other.group0()[1] * self.group1()[3])
                    + (other.group0()[2] * self.group3()[0])
                    + (other.group0()[3] * self.group2()[1])
                    + (self.group0()[1] * other[e2])),
                ((other.group0()[0] * self.group3()[1]) - (other.group0()[1] * self.group3()[0]) - (other.group0()[2] * self.group1()[3])
                    + (other.group0()[3] * self.group2()[2])
                    + (self.group0()[2] * other[e2])),
                ((other.group0()[0] * self.group1()[0]) + (other.group0()[1] * self.group1()[1]) + (other.group0()[2] * self.group1()[2]) - (other.group0()[3] * self.group3()[3])
                    + (self.group2()[3] * other[e2])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1]) + (self.group1()[0] * other[e2])
                    - (self.group3()[0] * other[e2])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group3()[3]) + (other.group0()[2] * self.group2()[0]) + (self.group1()[1] * other[e2])
                    - (self.group3()[1] * other[e2])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) - (other.group0()[2] * self.group3()[3]) + (self.group1()[2] * other[e2])
                    - (self.group3()[2] * other[e2])),
                (-(other.group0()[0] * self.group0()[0]) - (other.group0()[1] * self.group0()[1]) - (other.group0()[2] * self.group0()[2])
                    + (other.group0()[3] * self.group0()[3])
                    + (other.group0()[3] * self.group1()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) + (other.group0()[1] * self.group1()[2])
                    - (other.group0()[2] * self.group1()[1])
                    - (other.group0()[3] * self.group2()[0])
                    + (self.group0()[0] * other[e2])),
                (-(other.group0()[0] * self.group1()[2]) - (other.group0()[1] * self.group0()[3]) + (other.group0()[2] * self.group1()[0])
                    - (other.group0()[3] * self.group2()[1])
                    + (self.group0()[1] * other[e2])),
                ((other.group0()[0] * self.group1()[1]) - (other.group0()[1] * self.group1()[0]) - (other.group0()[2] * self.group0()[3]) - (other.group0()[3] * self.group2()[2])
                    + (self.group0()[2] * other[e2])),
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2]) + (self.group0()[3] * other[e2])
                    - (self.group1()[3] * other[e2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<Scalar> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0       28        0
    fn geometric_anti_product(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other[scalar] * -1.0),
                (self.group0()[1] * other[scalar] * -1.0),
                (self.group0()[2] * other[scalar] * -1.0),
                (self.group0()[3] * other[scalar] * -1.0),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group1()[0] * other[scalar] * -1.0),
                (self.group1()[1] * other[scalar] * -1.0),
                (self.group1()[2] * other[scalar] * -1.0),
                (self.group1()[3] * other[scalar]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group2()[0] * other[scalar] * -1.0),
                (self.group2()[1] * other[scalar] * -1.0),
                (self.group2()[2] * other[scalar] * -1.0),
                (self.group3()[3] * other[scalar] * -1.0),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group3()[0] * other[scalar]),
                (self.group3()[1] * other[scalar]),
                (self.group3()[2] * other[scalar]),
                (self.group2()[3] * other[scalar] * -1.0),
            ]),
        );
    }
}
impl GeometricAntiProduct<Sphere> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32       64       80        0
    fn geometric_anti_product(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((other.group0()[0] * self.group2()[3]) - (other.group0()[1] * self.group0()[2]) + (other.group0()[2] * self.group0()[1])
                    - (self.group1()[0] * other[e4315])
                    - (self.group3()[0] * other[e4315])),
                ((other.group0()[0] * self.group0()[2]) + (other.group0()[1] * self.group2()[3])
                    - (other.group0()[2] * self.group0()[0])
                    - (self.group1()[1] * other[e4315])
                    - (self.group3()[1] * other[e4315])),
                (-(other.group0()[0] * self.group0()[1]) + (other.group0()[1] * self.group0()[0]) + (other.group0()[2] * self.group2()[3])
                    - (self.group1()[2] * other[e4315])
                    - (self.group3()[2] * other[e4315])),
                ((other.group0()[0] * self.group3()[0]) + (other.group0()[1] * self.group3()[1]) + (other.group0()[2] * self.group3()[2])
                    - (other.group0()[3] * self.group2()[3])
                    - (self.group3()[3] * other[e4315])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group1()[3]) + (other.group0()[1] * self.group3()[2])
                    - (other.group0()[2] * self.group3()[1])
                    - (other.group0()[3] * self.group0()[0])
                    - (self.group2()[0] * other[e4315])),
                (-(other.group0()[0] * self.group3()[2]) - (other.group0()[1] * self.group1()[3]) + (other.group0()[2] * self.group3()[0])
                    - (other.group0()[3] * self.group0()[1])
                    - (self.group2()[1] * other[e4315])),
                ((other.group0()[0] * self.group3()[1])
                    - (other.group0()[1] * self.group3()[0])
                    - (other.group0()[2] * self.group1()[3])
                    - (other.group0()[3] * self.group0()[2])
                    - (self.group2()[2] * other[e4315])),
                (-(other.group0()[0] * self.group1()[0]) - (other.group0()[1] * self.group1()[1]) - (other.group0()[2] * self.group1()[2])
                    + (other.group0()[3] * self.group2()[3])
                    - (self.group3()[3] * other[e4315])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self.group2()[2])
                    - (other.group0()[2] * self.group2()[1])
                    - (other.group0()[3] * self.group1()[0])
                    + (other.group0()[3] * self.group3()[0])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group3()[3]) + (other.group0()[2] * self.group2()[0])
                    - (other.group0()[3] * self.group1()[1])
                    + (other.group0()[3] * self.group3()[1])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) - (other.group0()[2] * self.group3()[3]) - (other.group0()[3] * self.group1()[2])
                    + (other.group0()[3] * self.group3()[2])),
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2]) - (other.group0()[3] * self.group0()[3])
                    + (other.group0()[3] * self.group1()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) - (other.group0()[1] * self.group1()[2]) + (other.group0()[2] * self.group1()[1]) + (other.group0()[3] * self.group0()[0])
                    - (self.group2()[0] * other[e4315])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[1] * self.group0()[3]) - (other.group0()[2] * self.group1()[0]) + (other.group0()[3] * self.group0()[1])
                    - (self.group2()[1] * other[e4315])),
                (-(other.group0()[0] * self.group1()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[2] * self.group0()[3])
                    + (other.group0()[3] * self.group0()[2])
                    - (self.group2()[2] * other[e4315])),
                (-(other.group0()[0] * self.group0()[0])
                    - (other.group0()[1] * self.group0()[1])
                    - (other.group0()[2] * self.group0()[2])
                    - (self.group0()[3] * other[e4315])
                    - (self.group1()[3] * other[e4315])),
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorEven> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      240      256        0
    fn geometric_anti_product(self, other: VersorEven) -> Self::Output {
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((other.group0()[0] * self.group0()[3]) + (other.group0()[0] * self.group1()[3]) - (other.group0()[1] * self.group1()[2]) - (other.group0()[1] * self.group3()[2])
                    + (other.group0()[2] * self.group1()[1])
                    + (other.group0()[2] * self.group3()[1])
                    + (other.group0()[3] * self.group0()[0])
                    + (other.group1()[0] * self.group2()[3])
                    - (other.group1()[1] * self.group0()[2])
                    + (other.group1()[2] * self.group0()[1])
                    + (other.group1()[3] * self.group0()[0])
                    + (other.group3()[0] * self.group2()[3])
                    - (other.group3()[1] * self.group0()[2])
                    + (other.group3()[2] * self.group0()[1])
                    + (other.group3()[3] * self.group1()[0])
                    + (other.group3()[3] * self.group3()[0])),
                ((other.group0()[0] * self.group1()[2]) + (other.group0()[0] * self.group3()[2]) + (other.group0()[1] * self.group0()[3]) + (other.group0()[1] * self.group1()[3])
                    - (other.group0()[2] * self.group1()[0])
                    - (other.group0()[2] * self.group3()[0])
                    + (other.group0()[3] * self.group0()[1])
                    + (other.group1()[0] * self.group0()[2])
                    + (other.group1()[1] * self.group2()[3])
                    - (other.group1()[2] * self.group0()[0])
                    + (other.group1()[3] * self.group0()[1])
                    + (other.group3()[0] * self.group0()[2])
                    + (other.group3()[1] * self.group2()[3])
                    - (other.group3()[2] * self.group0()[0])
                    + (other.group3()[3] * self.group1()[1])
                    + (other.group3()[3] * self.group3()[1])),
                (-(other.group0()[0] * self.group1()[1]) - (other.group0()[0] * self.group3()[1])
                    + (other.group0()[1] * self.group1()[0])
                    + (other.group0()[1] * self.group3()[0])
                    + (other.group0()[2] * self.group0()[3])
                    + (other.group0()[2] * self.group1()[3])
                    + (other.group0()[3] * self.group0()[2])
                    - (other.group1()[0] * self.group0()[1])
                    + (other.group1()[1] * self.group0()[0])
                    + (other.group1()[2] * self.group2()[3])
                    + (other.group1()[3] * self.group0()[2])
                    - (other.group3()[0] * self.group0()[1])
                    + (other.group3()[1] * self.group0()[0])
                    + (other.group3()[2] * self.group2()[3])
                    + (other.group3()[3] * self.group1()[2])
                    + (other.group3()[3] * self.group3()[2])),
                (-(other.group0()[0] * self.group2()[0]) - (other.group0()[1] * self.group2()[1]) - (other.group0()[2] * self.group2()[2])
                    + (other.group0()[3] * self.group0()[3])
                    - (other.group1()[0] * self.group1()[0])
                    - (other.group1()[1] * self.group1()[1])
                    - (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    + (other.group2()[3] * self.group2()[3])
                    + (other.group3()[0] * self.group3()[0])
                    + (other.group3()[1] * self.group3()[1])
                    + (other.group3()[2] * self.group3()[2])
                    + (other.group3()[3] * self.group3()[3])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((other.group0()[0] * self.group3()[3]) - (other.group0()[1] * self.group2()[2])
                    + (other.group0()[2] * self.group2()[1])
                    + (other.group0()[3] * self.group1()[0])
                    + (other.group1()[0] * self.group0()[3])
                    - (other.group1()[1] * self.group1()[2])
                    + (other.group1()[2] * self.group1()[1])
                    - (other.group1()[3] * self.group3()[0])
                    + (other.group2()[0] * self.group2()[3])
                    - (other.group2()[1] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[1])
                    + (other.group2()[3] * self.group0()[0])
                    - (other.group3()[0] * self.group1()[3])
                    + (other.group3()[1] * self.group3()[2])
                    - (other.group3()[2] * self.group3()[1])
                    + (other.group3()[3] * self.group2()[0])),
                ((other.group0()[0] * self.group2()[2]) + (other.group0()[1] * self.group3()[3]) - (other.group0()[2] * self.group2()[0])
                    + (other.group0()[3] * self.group1()[1])
                    + (other.group1()[0] * self.group1()[2])
                    + (other.group1()[1] * self.group0()[3])
                    - (other.group1()[2] * self.group1()[0])
                    - (other.group1()[3] * self.group3()[1])
                    + (other.group2()[0] * self.group0()[2])
                    + (other.group2()[1] * self.group2()[3])
                    - (other.group2()[2] * self.group0()[0])
                    + (other.group2()[3] * self.group0()[1])
                    - (other.group3()[0] * self.group3()[2])
                    - (other.group3()[1] * self.group1()[3])
                    + (other.group3()[2] * self.group3()[0])
                    + (other.group3()[3] * self.group2()[1])),
                (-(other.group0()[0] * self.group2()[1])
                    + (other.group0()[1] * self.group2()[0])
                    + (other.group0()[2] * self.group3()[3])
                    + (other.group0()[3] * self.group1()[2])
                    - (other.group1()[0] * self.group1()[1])
                    + (other.group1()[1] * self.group1()[0])
                    + (other.group1()[2] * self.group0()[3])
                    - (other.group1()[3] * self.group3()[2])
                    - (other.group2()[0] * self.group0()[1])
                    + (other.group2()[1] * self.group0()[0])
                    + (other.group2()[2] * self.group2()[3])
                    + (other.group2()[3] * self.group0()[2])
                    + (other.group3()[0] * self.group3()[1])
                    - (other.group3()[1] * self.group3()[0])
                    - (other.group3()[2] * self.group1()[3])
                    + (other.group3()[3] * self.group2()[2])),
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2]) + (other.group0()[3] * self.group1()[3])
                    - (other.group1()[0] * self.group3()[0])
                    - (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group3()[2])
                    - (other.group1()[3] * self.group0()[3])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    + (other.group2()[3] * self.group2()[3])
                    + (other.group3()[0] * self.group1()[0])
                    + (other.group3()[1] * self.group1()[1])
                    + (other.group3()[2] * self.group1()[2])
                    - (other.group3()[3] * self.group3()[3])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((other.group0()[3] * self.group2()[0]) + (other.group1()[0] * self.group3()[3]) - (other.group1()[1] * self.group2()[2]) + (other.group1()[2] * self.group2()[1])
                    - (other.group1()[3] * self.group2()[0])
                    + (other.group2()[0] * self.group0()[3])
                    - (other.group2()[0] * self.group1()[3])
                    - (other.group2()[1] * self.group1()[2])
                    + (other.group2()[1] * self.group3()[2])
                    + (other.group2()[2] * self.group1()[1])
                    - (other.group2()[2] * self.group3()[1])
                    + (other.group2()[3] * self.group1()[0])
                    - (other.group2()[3] * self.group3()[0])
                    - (other.group3()[0] * self.group3()[3])
                    + (other.group3()[1] * self.group2()[2])
                    - (other.group3()[2] * self.group2()[1])),
                ((other.group0()[3] * self.group2()[1]) + (other.group1()[0] * self.group2()[2]) + (other.group1()[1] * self.group3()[3])
                    - (other.group1()[2] * self.group2()[0])
                    - (other.group1()[3] * self.group2()[1])
                    + (other.group2()[0] * self.group1()[2])
                    - (other.group2()[0] * self.group3()[2])
                    + (other.group2()[1] * self.group0()[3])
                    - (other.group2()[1] * self.group1()[3])
                    - (other.group2()[2] * self.group1()[0])
                    + (other.group2()[2] * self.group3()[0])
                    + (other.group2()[3] * self.group1()[1])
                    - (other.group2()[3] * self.group3()[1])
                    - (other.group3()[0] * self.group2()[2])
                    - (other.group3()[1] * self.group3()[3])
                    + (other.group3()[2] * self.group2()[0])),
                ((other.group0()[3] * self.group2()[2]) - (other.group1()[0] * self.group2()[1]) + (other.group1()[1] * self.group2()[0]) + (other.group1()[2] * self.group3()[3])
                    - (other.group1()[3] * self.group2()[2])
                    - (other.group2()[0] * self.group1()[1])
                    + (other.group2()[0] * self.group3()[1])
                    + (other.group2()[1] * self.group1()[0])
                    - (other.group2()[1] * self.group3()[0])
                    + (other.group2()[2] * self.group0()[3])
                    - (other.group2()[2] * self.group1()[3])
                    + (other.group2()[3] * self.group1()[2])
                    - (other.group2()[3] * self.group3()[2])
                    + (other.group3()[0] * self.group2()[1])
                    - (other.group3()[1] * self.group2()[0])
                    - (other.group3()[2] * self.group3()[3])),
                (-(other.group0()[0] * self.group1()[0])
                    - (other.group0()[0] * self.group3()[0])
                    - (other.group0()[1] * self.group1()[1])
                    - (other.group0()[1] * self.group3()[1])
                    - (other.group0()[2] * self.group1()[2])
                    - (other.group0()[2] * self.group3()[2])
                    + (other.group0()[3] * self.group2()[3])
                    - (other.group1()[0] * self.group0()[0])
                    - (other.group1()[1] * self.group0()[1])
                    - (other.group1()[2] * self.group0()[2])
                    + (other.group1()[3] * self.group2()[3])
                    - (other.group3()[0] * self.group0()[0])
                    - (other.group3()[1] * self.group0()[1])
                    - (other.group3()[2] * self.group0()[2])
                    + (other.group3()[3] * self.group0()[3])
                    + (other.group3()[3] * self.group1()[3])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (-(other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1])
                    + (other.group0()[3] * self.group3()[0])
                    + (other.group1()[0] * self.group1()[3])
                    - (other.group1()[1] * self.group3()[2])
                    + (other.group1()[2] * self.group3()[1])
                    - (other.group1()[3] * self.group1()[0])
                    + (other.group2()[0] * self.group2()[3])
                    - (other.group2()[1] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[1])
                    + (other.group2()[3] * self.group0()[0])
                    - (other.group3()[0] * self.group0()[3])
                    + (other.group3()[1] * self.group1()[2])
                    - (other.group3()[2] * self.group1()[1])
                    - (other.group3()[3] * self.group2()[0])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group3()[3])
                    + (other.group0()[2] * self.group2()[0])
                    + (other.group0()[3] * self.group3()[1])
                    + (other.group1()[0] * self.group3()[2])
                    + (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group3()[0])
                    - (other.group1()[3] * self.group1()[1])
                    + (other.group2()[0] * self.group0()[2])
                    + (other.group2()[1] * self.group2()[3])
                    - (other.group2()[2] * self.group0()[0])
                    + (other.group2()[3] * self.group0()[1])
                    - (other.group3()[0] * self.group1()[2])
                    - (other.group3()[1] * self.group0()[3])
                    + (other.group3()[2] * self.group1()[0])
                    - (other.group3()[3] * self.group2()[1])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) - (other.group0()[2] * self.group3()[3]) + (other.group0()[3] * self.group3()[2])
                    - (other.group1()[0] * self.group3()[1])
                    + (other.group1()[1] * self.group3()[0])
                    + (other.group1()[2] * self.group1()[3])
                    - (other.group1()[3] * self.group1()[2])
                    - (other.group2()[0] * self.group0()[1])
                    + (other.group2()[1] * self.group0()[0])
                    + (other.group2()[2] * self.group2()[3])
                    + (other.group2()[3] * self.group0()[2])
                    + (other.group3()[0] * self.group1()[1])
                    - (other.group3()[1] * self.group1()[0])
                    - (other.group3()[2] * self.group0()[3])
                    - (other.group3()[3] * self.group2()[2])),
                ((other.group0()[3] * self.group3()[3])
                    - (other.group1()[0] * self.group2()[0])
                    - (other.group1()[1] * self.group2()[1])
                    - (other.group1()[2] * self.group2()[2])
                    - (other.group1()[3] * self.group3()[3])
                    - (other.group2()[0] * self.group1()[0])
                    + (other.group2()[0] * self.group3()[0])
                    - (other.group2()[1] * self.group1()[1])
                    + (other.group2()[1] * self.group3()[1])
                    - (other.group2()[2] * self.group1()[2])
                    + (other.group2()[2] * self.group3()[2])
                    + (other.group2()[3] * self.group0()[3])
                    - (other.group2()[3] * self.group1()[3])
                    + (other.group3()[0] * self.group2()[0])
                    + (other.group3()[1] * self.group2()[1])
                    + (other.group3()[2] * self.group2()[2])),
            ]),
        );
    }
}
impl GeometricAntiProduct<VersorOdd> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32      240      256        0
    fn geometric_anti_product(self, other: VersorOdd) -> Self::Output {
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(other.group0()[0] * self.group0()[3]) - (other.group0()[0] * self.group1()[3])
                    + (other.group0()[1] * self.group1()[2])
                    + (other.group0()[1] * self.group3()[2])
                    - (other.group0()[2] * self.group1()[1])
                    - (other.group0()[2] * self.group3()[1])
                    - (other.group0()[3] * self.group0()[0])
                    - (other.group1()[0] * self.group2()[3])
                    + (other.group1()[1] * self.group0()[2])
                    - (other.group1()[2] * self.group0()[1])
                    + (other.group1()[3] * self.group0()[0])
                    - (other.group2()[3] * self.group1()[0])
                    - (other.group2()[3] * self.group3()[0])
                    + (other.group3()[0] * self.group2()[3])
                    - (other.group3()[1] * self.group0()[2])
                    + (other.group3()[2] * self.group0()[1])),
                (-(other.group0()[0] * self.group1()[2])
                    - (other.group0()[0] * self.group3()[2])
                    - (other.group0()[1] * self.group0()[3])
                    - (other.group0()[1] * self.group1()[3])
                    + (other.group0()[2] * self.group1()[0])
                    + (other.group0()[2] * self.group3()[0])
                    - (other.group0()[3] * self.group0()[1])
                    - (other.group1()[0] * self.group0()[2])
                    - (other.group1()[1] * self.group2()[3])
                    + (other.group1()[2] * self.group0()[0])
                    + (other.group1()[3] * self.group0()[1])
                    - (other.group2()[3] * self.group1()[1])
                    - (other.group2()[3] * self.group3()[1])
                    + (other.group3()[0] * self.group0()[2])
                    + (other.group3()[1] * self.group2()[3])
                    - (other.group3()[2] * self.group0()[0])),
                ((other.group0()[0] * self.group1()[1]) + (other.group0()[0] * self.group3()[1])
                    - (other.group0()[1] * self.group1()[0])
                    - (other.group0()[1] * self.group3()[0])
                    - (other.group0()[2] * self.group0()[3])
                    - (other.group0()[2] * self.group1()[3])
                    - (other.group0()[3] * self.group0()[2])
                    + (other.group1()[0] * self.group0()[1])
                    - (other.group1()[1] * self.group0()[0])
                    - (other.group1()[2] * self.group2()[3])
                    + (other.group1()[3] * self.group0()[2])
                    - (other.group2()[3] * self.group1()[2])
                    - (other.group2()[3] * self.group3()[2])
                    - (other.group3()[0] * self.group0()[1])
                    + (other.group3()[1] * self.group0()[0])
                    + (other.group3()[2] * self.group2()[3])),
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2]) - (other.group0()[3] * self.group0()[3])
                    + (other.group1()[0] * self.group1()[0])
                    + (other.group1()[1] * self.group1()[1])
                    + (other.group1()[2] * self.group1()[2])
                    - (other.group1()[3] * self.group1()[3])
                    + (other.group2()[0] * self.group0()[0])
                    + (other.group2()[1] * self.group0()[1])
                    + (other.group2()[2] * self.group0()[2])
                    - (other.group2()[3] * self.group3()[3])
                    + (other.group3()[0] * self.group3()[0])
                    + (other.group3()[1] * self.group3()[1])
                    + (other.group3()[2] * self.group3()[2])
                    - (other.group3()[3] * self.group2()[3])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self.group2()[2])
                    - (other.group0()[2] * self.group2()[1])
                    - (other.group0()[3] * self.group1()[0])
                    - (other.group1()[0] * self.group0()[3])
                    + (other.group1()[1] * self.group1()[2])
                    - (other.group1()[2] * self.group1()[1])
                    - (other.group1()[3] * self.group3()[0])
                    - (other.group2()[0] * self.group2()[3])
                    + (other.group2()[1] * self.group0()[2])
                    - (other.group2()[2] * self.group0()[1])
                    - (other.group2()[3] * self.group2()[0])
                    - (other.group3()[0] * self.group1()[3])
                    + (other.group3()[1] * self.group3()[2])
                    - (other.group3()[2] * self.group3()[1])
                    - (other.group3()[3] * self.group0()[0])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group3()[3]) + (other.group0()[2] * self.group2()[0])
                    - (other.group0()[3] * self.group1()[1])
                    - (other.group1()[0] * self.group1()[2])
                    - (other.group1()[1] * self.group0()[3])
                    + (other.group1()[2] * self.group1()[0])
                    - (other.group1()[3] * self.group3()[1])
                    - (other.group2()[0] * self.group0()[2])
                    - (other.group2()[1] * self.group2()[3])
                    + (other.group2()[2] * self.group0()[0])
                    - (other.group2()[3] * self.group2()[1])
                    - (other.group3()[0] * self.group3()[2])
                    - (other.group3()[1] * self.group1()[3])
                    + (other.group3()[2] * self.group3()[0])
                    - (other.group3()[3] * self.group0()[1])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) - (other.group0()[2] * self.group3()[3]) - (other.group0()[3] * self.group1()[2])
                    + (other.group1()[0] * self.group1()[1])
                    - (other.group1()[1] * self.group1()[0])
                    - (other.group1()[2] * self.group0()[3])
                    - (other.group1()[3] * self.group3()[2])
                    + (other.group2()[0] * self.group0()[1])
                    - (other.group2()[1] * self.group0()[0])
                    - (other.group2()[2] * self.group2()[3])
                    - (other.group2()[3] * self.group2()[2])
                    + (other.group3()[0] * self.group3()[1])
                    - (other.group3()[1] * self.group3()[0])
                    - (other.group3()[2] * self.group1()[3])
                    - (other.group3()[3] * self.group0()[2])),
                ((other.group0()[0] * self.group2()[0]) + (other.group0()[1] * self.group2()[1]) + (other.group0()[2] * self.group2()[2]) + (other.group0()[3] * self.group1()[3])
                    - (other.group1()[0] * self.group3()[0])
                    - (other.group1()[1] * self.group3()[1])
                    - (other.group1()[2] * self.group3()[2])
                    + (other.group1()[3] * self.group0()[3])
                    - (other.group2()[0] * self.group0()[0])
                    - (other.group2()[1] * self.group0()[1])
                    - (other.group2()[2] * self.group0()[2])
                    - (other.group2()[3] * self.group3()[3])
                    - (other.group3()[0] * self.group1()[0])
                    - (other.group3()[1] * self.group1()[1])
                    - (other.group3()[2] * self.group1()[2])
                    + (other.group3()[3] * self.group2()[3])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(other.group0()[3] * self.group2()[0]) - (other.group1()[0] * self.group3()[3]) + (other.group1()[1] * self.group2()[2])
                    - (other.group1()[2] * self.group2()[1])
                    - (other.group1()[3] * self.group2()[0])
                    - (other.group2()[0] * self.group0()[3])
                    + (other.group2()[0] * self.group1()[3])
                    + (other.group2()[1] * self.group1()[2])
                    - (other.group2()[1] * self.group3()[2])
                    - (other.group2()[2] * self.group1()[1])
                    + (other.group2()[2] * self.group3()[1])
                    - (other.group3()[0] * self.group3()[3])
                    + (other.group3()[1] * self.group2()[2])
                    - (other.group3()[2] * self.group2()[1])
                    - (other.group3()[3] * self.group1()[0])
                    + (other.group3()[3] * self.group3()[0])),
                (-(other.group0()[3] * self.group2()[1]) - (other.group1()[0] * self.group2()[2]) - (other.group1()[1] * self.group3()[3])
                    + (other.group1()[2] * self.group2()[0])
                    - (other.group1()[3] * self.group2()[1])
                    - (other.group2()[0] * self.group1()[2])
                    + (other.group2()[0] * self.group3()[2])
                    - (other.group2()[1] * self.group0()[3])
                    + (other.group2()[1] * self.group1()[3])
                    + (other.group2()[2] * self.group1()[0])
                    - (other.group2()[2] * self.group3()[0])
                    - (other.group3()[0] * self.group2()[2])
                    - (other.group3()[1] * self.group3()[3])
                    + (other.group3()[2] * self.group2()[0])
                    - (other.group3()[3] * self.group1()[1])
                    + (other.group3()[3] * self.group3()[1])),
                (-(other.group0()[3] * self.group2()[2]) + (other.group1()[0] * self.group2()[1])
                    - (other.group1()[1] * self.group2()[0])
                    - (other.group1()[2] * self.group3()[3])
                    - (other.group1()[3] * self.group2()[2])
                    + (other.group2()[0] * self.group1()[1])
                    - (other.group2()[0] * self.group3()[1])
                    - (other.group2()[1] * self.group1()[0])
                    + (other.group2()[1] * self.group3()[0])
                    - (other.group2()[2] * self.group0()[3])
                    + (other.group2()[2] * self.group1()[3])
                    + (other.group3()[0] * self.group2()[1])
                    - (other.group3()[1] * self.group2()[0])
                    - (other.group3()[2] * self.group3()[3])
                    - (other.group3()[3] * self.group1()[2])
                    + (other.group3()[3] * self.group3()[2])),
                (-(other.group0()[3] * self.group3()[3])
                    + (other.group1()[0] * self.group2()[0])
                    + (other.group1()[1] * self.group2()[1])
                    + (other.group1()[2] * self.group2()[2])
                    - (other.group1()[3] * self.group3()[3])
                    + (other.group2()[0] * self.group1()[0])
                    - (other.group2()[0] * self.group3()[0])
                    + (other.group2()[1] * self.group1()[1])
                    - (other.group2()[1] * self.group3()[1])
                    + (other.group2()[2] * self.group1()[2])
                    - (other.group2()[2] * self.group3()[2])
                    + (other.group3()[0] * self.group2()[0])
                    + (other.group3()[1] * self.group2()[1])
                    + (other.group3()[2] * self.group2()[2])
                    - (other.group3()[3] * self.group0()[3])
                    + (other.group3()[3] * self.group1()[3])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(other.group0()[0] * self.group3()[3]) + (other.group0()[1] * self.group2()[2]) - (other.group0()[2] * self.group2()[1])
                    + (other.group0()[3] * self.group3()[0])
                    + (other.group1()[0] * self.group1()[3])
                    - (other.group1()[1] * self.group3()[2])
                    + (other.group1()[2] * self.group3()[1])
                    + (other.group1()[3] * self.group1()[0])
                    + (other.group2()[0] * self.group2()[3])
                    - (other.group2()[1] * self.group0()[2])
                    + (other.group2()[2] * self.group0()[1])
                    - (other.group2()[3] * self.group2()[0])
                    + (other.group3()[0] * self.group0()[3])
                    - (other.group3()[1] * self.group1()[2])
                    + (other.group3()[2] * self.group1()[1])
                    + (other.group3()[3] * self.group0()[0])),
                (-(other.group0()[0] * self.group2()[2]) - (other.group0()[1] * self.group3()[3])
                    + (other.group0()[2] * self.group2()[0])
                    + (other.group0()[3] * self.group3()[1])
                    + (other.group1()[0] * self.group3()[2])
                    + (other.group1()[1] * self.group1()[3])
                    - (other.group1()[2] * self.group3()[0])
                    + (other.group1()[3] * self.group1()[1])
                    + (other.group2()[0] * self.group0()[2])
                    + (other.group2()[1] * self.group2()[3])
                    - (other.group2()[2] * self.group0()[0])
                    - (other.group2()[3] * self.group2()[1])
                    + (other.group3()[0] * self.group1()[2])
                    + (other.group3()[1] * self.group0()[3])
                    - (other.group3()[2] * self.group1()[0])
                    + (other.group3()[3] * self.group0()[1])),
                ((other.group0()[0] * self.group2()[1]) - (other.group0()[1] * self.group2()[0]) - (other.group0()[2] * self.group3()[3]) + (other.group0()[3] * self.group3()[2])
                    - (other.group1()[0] * self.group3()[1])
                    + (other.group1()[1] * self.group3()[0])
                    + (other.group1()[2] * self.group1()[3])
                    + (other.group1()[3] * self.group1()[2])
                    - (other.group2()[0] * self.group0()[1])
                    + (other.group2()[1] * self.group0()[0])
                    + (other.group2()[2] * self.group2()[3])
                    - (other.group2()[3] * self.group2()[2])
                    - (other.group3()[0] * self.group1()[1])
                    + (other.group3()[1] * self.group1()[0])
                    + (other.group3()[2] * self.group0()[3])
                    + (other.group3()[3] * self.group0()[2])),
                ((other.group0()[0] * self.group1()[0])
                    + (other.group0()[0] * self.group3()[0])
                    + (other.group0()[1] * self.group1()[1])
                    + (other.group0()[1] * self.group3()[1])
                    + (other.group0()[2] * self.group1()[2])
                    + (other.group0()[2] * self.group3()[2])
                    - (other.group0()[3] * self.group2()[3])
                    + (other.group1()[0] * self.group0()[0])
                    + (other.group1()[1] * self.group0()[1])
                    + (other.group1()[2] * self.group0()[2])
                    + (other.group1()[3] * self.group2()[3])
                    - (other.group2()[3] * self.group0()[3])
                    - (other.group2()[3] * self.group1()[3])
                    - (other.group3()[0] * self.group0()[0])
                    - (other.group3()[1] * self.group0()[1])
                    - (other.group3()[2] * self.group0()[2])),
            ]),
        );
    }
}
