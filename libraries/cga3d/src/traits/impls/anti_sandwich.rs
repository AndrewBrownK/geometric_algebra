use crate::traits::AntiReverse;
use crate::traits::GeometricAntiProduct;
// Note on Operative Statistics:
// Operative Statistics are not a precise predictor of performance or performance comparisons.
// This is due to varying hardware capabilities and compiler optimizations.
// As always, where performance is a concern, there is no substitute for
// real measurements on real work-loads on real hardware.
// Disclaimer aside, enjoy the fun information =)
//
// Total Implementations: 289
//
// Yes SIMD:   add/sub     mul     div
//  Minimum:         0       2       0
//   Median:        69     104       0
//  Average:       118     147       0
//  Maximum:      1114    1176       0
//
//  No SIMD:   add/sub    mul    div
//  Minimum:         0       2       0
//   Median:       128     164       0
//  Average:       221     260       0
//  Maximum:      1984    2068       0
impl InfixAntiSandwich for AntiScalar {}
impl AntiSandwich<AntiScalar> for AntiScalar {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiScalar::from_groups(/* e12345 */ (self[e12345] * other[e12345]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for AntiScalar {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        4        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0       20        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = Circle::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[e12345]) * other.group0()),
            // e415, e425, e435, e321
            (Simd32x4::from(self[e12345]) * other.group1()),
            // e235, e315, e125
            (Simd32x3::from(self[e12345]) * other.group2()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for AntiScalar {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        2        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0       22        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = CircleRotor::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[e12345]) * other.group0()),
            // e415, e425, e435, e321
            (Simd32x4::from(self[e12345]) * other.group1()),
            // e235, e315, e125, e12345
            (Simd32x4::from(self[e12345]) * other.group2()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for AntiScalar {
    type Output = Dipole;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        4        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0       20        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = Dipole::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[e12345]) * other.group0()),
            // e23, e31, e12, e45
            (Simd32x4::from(self[e12345]) * other.group1()),
            // e15, e25, e35
            (Simd32x3::from(self[e12345]) * other.group2()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for AntiScalar {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        2        0
    //    simd4        0        6        0
    // Totals...
    // yes simd        0        8        0
    //  no simd        0       30        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[e12345]) * other.group0()),
            // e23, e31, e12, e45
            (Simd32x4::from(self[e12345]) * other.group1()),
            // e15, e25, e35, e1234
            (Simd32x4::from(self[e12345]) * other.group2()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[e12345]) * other.group3()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum> for AntiScalar {
    type Output = DualNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        2        0
    // no simd        0        4        0
    fn anti_sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = DualNum::from_groups(/* e5, e12345 */ (Simd32x2::from(self[e12345]) * other.group0()));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for AntiScalar {
    type Output = FlatPoint;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = FlatPoint::from_groups(/* e15, e25, e35, e45 */ (Simd32x4::from(self[e12345]) * other.group0()));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for AntiScalar {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from(self[e12345]) * other.group0()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[e12345]) * other.group1()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for AntiScalar {
    type Output = Line;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        4        0
    // no simd        0       12        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = Line::from_groups(
            // e415, e425, e435
            (Simd32x3::from(self[e12345]) * other.group0()),
            // e235, e315, e125
            (Simd32x3::from(self[e12345]) * other.group1()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for AntiScalar {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(self[e12345]) * other.group0()),
            // e235, e315, e125, e5
            (Simd32x4::from(self[e12345]) * other.group1()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for AntiScalar {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        4        0
    //    simd2        0        2        0
    //    simd3        0        8        0
    //    simd4        0        8        0
    // Totals...
    // yes simd        0       22        0
    //  no simd        0       64        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from(self[e12345]) * other.group0()),
            // e1, e2, e3, e4
            (Simd32x4::from(self[e12345]) * other.group1()),
            // e5
            (self[e12345] * other[e1]),
            // e15, e25, e35, e45
            (Simd32x4::from(self[e12345]) * other.group3()),
            // e41, e42, e43
            (Simd32x3::from(self[e12345]) * other.group4()),
            // e415, e425, e435, e321
            (Simd32x4::from(self[e12345]) * other.group5()),
            // e423, e431, e412
            (Simd32x3::from(self[e12345]) * other.group6()),
            // e235, e315, e125
            (Simd32x3::from(self[e12345]) * other.group7()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[e12345]) * other.group8()),
            // e1234
            (self[e12345] * other[e35]),
            // e12, e31, e23
            (Simd32x3::from(self[e12345]) * other.group10()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for AntiScalar {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (Simd32x4::from(self[e12345]) * other.group0()));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for AntiScalar {
    type Output = RoundPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0       10        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = RoundPoint::from_groups(/* e1, e2, e3, e4 */ (Simd32x4::from(self[e12345]) * other.group0()), /* e5 */ (self[e12345] * other[e2]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for AntiScalar {
    type Output = Scalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = Scalar::from_groups(/* scalar */ (self[e12345] * other[scalar]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for AntiScalar {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0       10        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[e12345]) * other.group0()),
            // e1234
            (self[e12345] * other[e4315]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for AntiScalar {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        8        0
    // no simd        0       32        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self[e12345]) * other.group0()),
            // e415, e425, e435, e321
            (Simd32x4::from(self[e12345]) * other.group1()),
            // e235, e315, e125, e5
            (Simd32x4::from(self[e12345]) * other.group2()),
            // e1, e2, e3, e4
            (Simd32x4::from(self[e12345]) * other.group3()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for AntiScalar {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        8        0
    // no simd        0       32        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self[e12345]) * other.group0()),
            // e23, e31, e12, e45
            (Simd32x4::from(self[e12345]) * other.group1()),
            // e15, e25, e35, e1234
            (Simd32x4::from(self[e12345]) * other.group2()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[e12345]) * other.group3()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl InfixAntiSandwich for Circle {}
impl AntiSandwich<AntiScalar> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       72        0
    //    simd3        0        4        0
    //    simd4        7        9        0
    // Totals...
    // yes simd       63       85        0
    //  no simd       84      120        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = Circle::from_groups(
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other[e12345])),
            // e415, e425, e435, e321
            (self.group1() * Simd32x4::from(other[e12345])),
            // e235, e315, e125
            (self.group2() * Simd32x3::from(other[e12345])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      132      164        0
    //    simd3        0        2        0
    //    simd4       24       25        0
    // Totals...
    // yes simd      156      191        0
    //  no simd      228      270        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]))
                - (swizzle!(self.group1(), 2, 0, 1, 1) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[1]]))
                + (swizzle!(self.group1(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]))
                - (swizzle!(other.group1(), 1, 2, 0, 0) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]))
                + Simd32x4::from([
                    ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2])),
                    ((self.group0()[2] * other.group1()[0]) + (self.group0()[1] * other.group1()[3])),
                    ((self.group0()[2] * other.group1()[3]) + (self.group0()[0] * other.group1()[1])),
                    (-(self.group2()[2] * other.group0()[2])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group2()[2] * other.group0()[1]) + (self.group2()[1] * other.group0()[2]) - (self.group1()[2] * other.group1()[1])
                    + (self.group1()[1] * other.group1()[2])
                    + (self.group0()[1] * other.group2()[2])
                    - (self.group0()[2] * other.group2()[1])),
                ((self.group2()[2] * other.group0()[0]) - (self.group2()[0] * other.group0()[2]) + (self.group1()[2] * other.group1()[0])
                    - (self.group1()[0] * other.group1()[2])
                    - (self.group0()[0] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[0])),
                (-(self.group2()[1] * other.group0()[0]) + (self.group2()[0] * other.group0()[1]) - (self.group1()[1] * other.group1()[0])
                    + (self.group1()[0] * other.group1()[1])
                    + (self.group0()[0] * other.group2()[1])
                    - (self.group0()[1] * other.group2()[0])),
                (-(self.group2()[2] * other.group0()[2]) - (self.group2()[1] * other.group0()[1]) - (self.group2()[0] * other.group0()[0])
                    + (self.group0()[2] * other.group2()[2])
                    + (self.group0()[0] * other.group2()[0])
                    + (self.group0()[1] * other.group2()[1])),
            ]),
            // e235, e315, e125, e5
            (-(swizzle!(other.group1(), 1, 3, 3, 2) * Simd32x4::from([self.group2()[2], self.group2()[1], self.group2()[2], self.group2()[2]]))
                - (swizzle!(other.group1(), 3, 2, 0, 1) * Simd32x4::from([self.group2()[0], self.group2()[0], self.group2()[1], self.group2()[1]]))
                - (swizzle!(self.group1(), 2, 0, 1, 2) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group2()[2]]))
                + Simd32x4::from([
                    ((self.group2()[1] * other.group1()[2]) + (self.group1()[3] * other.group2()[0]) + (self.group1()[1] * other.group2()[2])),
                    ((self.group2()[2] * other.group1()[0]) + (self.group1()[3] * other.group2()[1]) + (self.group1()[2] * other.group2()[0])),
                    ((self.group2()[0] * other.group1()[1]) + (self.group1()[3] * other.group2()[2]) + (self.group1()[0] * other.group2()[1])),
                    (-(self.group2()[0] * other.group1()[0]) - (self.group1()[0] * other.group2()[0]) - (self.group1()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group2()[2] * other.group0()[1])
                    + (self.group2()[1] * other.group0()[2])
                    + (self.group1()[3] * other.group1()[0])
                    + (self.group1()[0] * other.group1()[3])
                    - (self.group0()[1] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[1])),
                ((self.group2()[2] * other.group0()[0]) - (self.group2()[0] * other.group0()[2])
                    + (self.group1()[3] * other.group1()[1])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group0()[0] * other.group2()[2])
                    - (self.group0()[2] * other.group2()[0])),
                (-(self.group2()[1] * other.group0()[0])
                    + (self.group2()[0] * other.group0()[1])
                    + (self.group1()[3] * other.group1()[2])
                    + (self.group1()[2] * other.group1()[3])
                    - (self.group0()[0] * other.group2()[1])
                    + (self.group0()[1] * other.group2()[0])),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      134      166        0
    //    simd3        0        2        0
    //    simd4       26       27        0
    // Totals...
    // yes simd      160      195        0
    //  no simd      238      280        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]))
                - (swizzle!(self.group1(), 2, 0, 1, 1) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[1]]))
                + (swizzle!(self.group1(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]))
                - (swizzle!(other.group1(), 1, 2, 0, 0) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]))
                + Simd32x4::from([
                    ((self.group0()[1] * other.group1()[2]) + (self.group0()[0] * other.group1()[3]) + (self.group0()[0] * other.group2()[3])),
                    ((self.group0()[2] * other.group1()[0]) + (self.group0()[1] * other.group2()[3]) + (self.group0()[1] * other.group1()[3])),
                    ((self.group0()[2] * other.group2()[3]) + (self.group0()[2] * other.group1()[3]) + (self.group0()[0] * other.group1()[1])),
                    (-(self.group2()[2] * other.group0()[2])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e321
            ((swizzle!(self.group1(), 1, 2, 2, 3) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group2()[3], other.group2()[3]]))
                + (swizzle!(other.group2(), 3, 3, 1, 2) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group0()[0], self.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group2()[2] * other.group0()[1]) + (self.group2()[1] * other.group0()[2]) - (self.group1()[2] * other.group1()[1])
                        + (self.group0()[1] * other.group2()[2])
                        - (self.group0()[2] * other.group2()[1])),
                    ((self.group2()[2] * other.group0()[0])
                        - (self.group2()[0] * other.group0()[2])
                        - (self.group1()[0] * other.group1()[2])
                        - (self.group0()[0] * other.group2()[2])
                        + (self.group0()[2] * other.group2()[0])),
                    (-(self.group2()[1] * other.group0()[0]) + (self.group2()[0] * other.group0()[1]) - (self.group1()[1] * other.group1()[0])
                        + (self.group1()[0] * other.group1()[1])
                        - (self.group0()[1] * other.group2()[0])),
                    (-(self.group2()[2] * other.group0()[2]) - (self.group2()[1] * other.group0()[1]) - (self.group2()[0] * other.group0()[0])
                        + (self.group0()[0] * other.group2()[0])
                        + (self.group0()[1] * other.group2()[1])),
                ])),
            // e235, e315, e125, e5
            (-(swizzle!(other.group1(), 1, 3, 3, 2) * Simd32x4::from([self.group2()[2], self.group2()[1], self.group2()[2], self.group2()[2]]))
                - (swizzle!(other.group1(), 3, 2, 0, 1) * Simd32x4::from([self.group2()[0], self.group2()[0], self.group2()[1], self.group2()[1]]))
                - (swizzle!(self.group1(), 2, 0, 1, 2) * swizzle!(other.group2(), 1, 2, 0, 2))
                + Simd32x4::from([
                    ((self.group2()[1] * other.group1()[2])
                        + (self.group2()[0] * other.group2()[3])
                        + (self.group1()[3] * other.group2()[0])
                        + (self.group1()[1] * other.group2()[2])),
                    ((self.group2()[2] * other.group1()[0])
                        + (self.group2()[1] * other.group2()[3])
                        + (self.group1()[3] * other.group2()[1])
                        + (self.group1()[2] * other.group2()[0])),
                    ((self.group2()[2] * other.group2()[3])
                        + (self.group2()[0] * other.group1()[1])
                        + (self.group1()[3] * other.group2()[2])
                        + (self.group1()[0] * other.group2()[1])),
                    (-(self.group2()[0] * other.group1()[0]) - (self.group1()[0] * other.group2()[0]) - (self.group1()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group2()[2] * other.group0()[1])
                    + (self.group2()[1] * other.group0()[2])
                    + (self.group1()[3] * other.group1()[0])
                    + (self.group1()[0] * other.group1()[3])
                    - (self.group0()[1] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[1])),
                ((self.group2()[2] * other.group0()[0]) - (self.group2()[0] * other.group0()[2])
                    + (self.group1()[3] * other.group1()[1])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group0()[0] * other.group2()[2])
                    - (self.group0()[2] * other.group2()[0])),
                (-(self.group2()[1] * other.group0()[0])
                    + (self.group2()[0] * other.group0()[1])
                    + (self.group1()[3] * other.group1()[2])
                    + (self.group1()[2] * other.group1()[3])
                    - (self.group0()[0] * other.group2()[1])
                    + (self.group0()[1] * other.group2()[0])),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      128      160        0
    //    simd3        0        2        0
    //    simd4       25       26        0
    // Totals...
    // yes simd      153      188        0
    //  no simd      228      270        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (swizzle!(self.group1(), 2, 0, 1, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[2]]))
                - (swizzle!(other.group1(), 1, 2, 3, 1) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[2], self.group1()[1]]))
                - (swizzle!(other.group1(), 3, 3, 0, 0) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[1], self.group1()[0]]))
                + Simd32x4::from([
                    ((self.group1()[1] * other.group0()[2]) + (self.group0()[1] * other.group1()[2])),
                    ((self.group1()[2] * other.group0()[0]) + (self.group0()[2] * other.group1()[0])),
                    ((self.group1()[0] * other.group0()[1]) + (self.group0()[0] * other.group1()[1])),
                    (-(self.group2()[2] * other.group0()[2])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group2()[2] * other.group0()[1]) + (self.group2()[1] * other.group0()[2]) - (self.group1()[2] * other.group1()[1])
                    + (self.group1()[1] * other.group1()[2])
                    + (self.group0()[1] * other.group2()[2])
                    - (self.group0()[2] * other.group2()[1])),
                ((self.group2()[2] * other.group0()[0]) - (self.group2()[0] * other.group0()[2]) + (self.group1()[2] * other.group1()[0])
                    - (self.group1()[0] * other.group1()[2])
                    - (self.group0()[0] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[0])),
                (-(self.group2()[1] * other.group0()[0]) + (self.group2()[0] * other.group0()[1]) - (self.group1()[1] * other.group1()[0])
                    + (self.group1()[0] * other.group1()[1])
                    + (self.group0()[0] * other.group2()[1])
                    - (self.group0()[1] * other.group2()[0])),
                ((self.group2()[2] * other.group0()[2]) + (self.group2()[1] * other.group0()[1]) + (self.group2()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])),
            ]),
            // e15, e25, e35, e1234
            (-(swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[2]]))
                - (swizzle!(self.group1(), 2, 0, 1, 2) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[2]]))
                + Simd32x4::from([
                    ((self.group2()[1] * other.group1()[2])
                        + (self.group2()[0] * other.group1()[3])
                        + (self.group1()[3] * other.group2()[0])
                        + (self.group1()[1] * other.group2()[2])),
                    ((self.group2()[2] * other.group1()[0])
                        + (self.group2()[1] * other.group1()[3])
                        + (self.group1()[3] * other.group2()[1])
                        + (self.group1()[2] * other.group2()[0])),
                    ((self.group2()[2] * other.group1()[3])
                        + (self.group2()[0] * other.group1()[1])
                        + (self.group1()[3] * other.group2()[2])
                        + (self.group1()[0] * other.group2()[1])),
                    (-(self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(other.group1(), 0, 1, 2, 2) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[2]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group0()[1]) - (self.group2()[1] * other.group0()[2])
                        + (self.group1()[0] * other.group1()[3])
                        + (self.group0()[1] * other.group2()[2])
                        - (self.group0()[2] * other.group2()[1])),
                    (-(self.group2()[2] * other.group0()[0]) + (self.group2()[0] * other.group0()[2]) + (self.group1()[1] * other.group1()[3])
                        - (self.group0()[0] * other.group2()[2])
                        + (self.group0()[2] * other.group2()[0])),
                    ((self.group2()[1] * other.group0()[0]) - (self.group2()[0] * other.group0()[1])
                        + (self.group1()[2] * other.group1()[3])
                        + (self.group0()[0] * other.group2()[1])
                        - (self.group0()[1] * other.group2()[0])),
                    (-(self.group2()[1] * other.group1()[1])
                        - (self.group2()[0] * other.group1()[0])
                        - (self.group1()[2] * other.group2()[2])
                        - (self.group1()[0] * other.group2()[0])
                        - (self.group1()[1] * other.group2()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      138      170        0
    //    simd3        0        2        0
    //    simd4       35       36        0
    // Totals...
    // yes simd      173      208        0
    //  no simd      278      320        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (swizzle!(self.group1(), 2, 0, 1, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[2]]))
                - (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[3], other.group2()[2]]))
                - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group3()[2], other.group1()[3], other.group1()[0], other.group2()[1]]))
                - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group1()[2], other.group3()[1], other.group2()[0]]))
                + Simd32x4::from([
                    ((self.group1()[1] * other.group0()[2])
                        + (self.group1()[0] * other.group2()[3])
                        + (self.group0()[2] * other.group3()[1])
                        + (self.group0()[1] * other.group1()[2])),
                    ((self.group1()[2] * other.group0()[0])
                        + (self.group1()[1] * other.group2()[3])
                        + (self.group0()[2] * other.group1()[0])
                        + (self.group0()[0] * other.group3()[2])),
                    ((self.group1()[2] * other.group2()[3])
                        + (self.group1()[0] * other.group0()[1])
                        + (self.group0()[1] * other.group3()[0])
                        + (self.group0()[0] * other.group1()[1])),
                    (-(self.group2()[2] * other.group0()[2])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])),
                ])),
            // e23, e31, e12, e45
            (-(swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group3(), 0, 1, 2, 2))
                - (swizzle!(self.group1(), 2, 0, 1, 1) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[1]]))
                - (swizzle!(other.group2(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group2()[2] * other.group0()[1])
                        + (self.group2()[1] * other.group0()[2])
                        + (self.group2()[0] * other.group2()[3])
                        + (self.group1()[1] * other.group1()[2])
                        + (self.group0()[0] * other.group3()[3])
                        + (self.group0()[1] * other.group2()[2])),
                    ((self.group2()[2] * other.group0()[0]) + (self.group2()[1] * other.group2()[3]) - (self.group2()[0] * other.group0()[2])
                        + (self.group1()[2] * other.group1()[0])
                        + (self.group0()[2] * other.group2()[0])
                        + (self.group0()[1] * other.group3()[3])),
                    ((self.group2()[2] * other.group2()[3]) - (self.group2()[1] * other.group0()[0])
                        + (self.group2()[0] * other.group0()[1])
                        + (self.group1()[0] * other.group1()[1])
                        + (self.group0()[2] * other.group3()[3])
                        + (self.group0()[0] * other.group2()[1])),
                    ((self.group2()[2] * other.group0()[2]) + (self.group2()[1] * other.group0()[1]) + (self.group2()[0] * other.group0()[0])
                        - (self.group1()[0] * other.group3()[0])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e15, e25, e35, e1234
            (-(swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[2]]))
                + (swizzle!(other.group3(), 2, 0, 1, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[2]]))
                - (swizzle!(self.group1(), 2, 0, 1, 3) * swizzle!(other.group2(), 1, 2, 0, 3))
                + (swizzle!(other.group3(), 3, 3, 3, 1) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[1]]))
                + Simd32x4::from([
                    (-(self.group2()[2] * other.group3()[1])
                        + (self.group2()[1] * other.group1()[2])
                        + (self.group2()[0] * other.group1()[3])
                        + (self.group1()[3] * other.group2()[0])
                        + (self.group1()[1] * other.group2()[2])),
                    ((self.group2()[2] * other.group1()[0]) + (self.group2()[1] * other.group1()[3]) - (self.group2()[0] * other.group3()[2])
                        + (self.group1()[3] * other.group2()[1])
                        + (self.group1()[2] * other.group2()[0])),
                    ((self.group2()[2] * other.group1()[3]) - (self.group2()[1] * other.group3()[0])
                        + (self.group2()[0] * other.group1()[1])
                        + (self.group1()[3] * other.group2()[2])
                        + (self.group1()[0] * other.group2()[1])),
                    (-(self.group1()[2] * other.group0()[2])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group1()[1])
                        - (self.group0()[0] * other.group1()[0])
                        + (self.group0()[0] * other.group3()[0])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(other.group2(), 3, 3, 3, 2) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[2]]))
                - (swizzle!(other.group1(), 0, 1, 2, 2) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[2]]))
                - (swizzle!(other.group3(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]))
                + (swizzle!(self.group1(), 1, 2, 2, 3) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[3], other.group3()[3]]))
                - (swizzle!(other.group2(), 1, 2, 0, 0) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group0()[1]) - (self.group2()[1] * other.group0()[2])
                        + (self.group1()[0] * other.group1()[3])
                        + (self.group0()[0] * other.group3()[3])
                        + (self.group0()[1] * other.group2()[2])),
                    (-(self.group2()[2] * other.group0()[0])
                        + (self.group2()[0] * other.group0()[2])
                        + (self.group1()[1] * other.group1()[3])
                        + (self.group0()[2] * other.group2()[0])
                        + (self.group0()[1] * other.group3()[3])),
                    ((self.group2()[1] * other.group0()[0]) - (self.group2()[0] * other.group0()[1])
                        + (self.group1()[0] * other.group3()[1])
                        + (self.group0()[2] * other.group3()[3])
                        + (self.group0()[0] * other.group2()[1])),
                    (-(self.group2()[1] * other.group3()[1])
                        - (self.group2()[1] * other.group1()[1])
                        - (self.group2()[0] * other.group3()[0])
                        - (self.group2()[0] * other.group1()[0])
                        - (self.group1()[1] * other.group2()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       82      115        0
    //    simd3        0        2        0
    //    simd4       17       18        0
    // Totals...
    // yes simd       99      135        0
    //  no simd      150      193        0
    fn anti_sandwich(self, other: DualNum) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[2] * other.group0()[1]),
                0.0,
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group1()[0] * other.group0()[1])),
                ((self.group0()[1] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[0]) + (self.group1()[2] * other.group0()[1])),
                (self.group1()[3] * other.group0()[1]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[0]) + (self.group2()[0] * other.group0()[1])),
                ((self.group1()[1] * other.group0()[0]) + (self.group2()[1] * other.group0()[1])),
                ((self.group1()[2] * other.group0()[0]) + (self.group2()[2] * other.group0()[1])),
                (self.group1()[3] * other.group0()[0]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0] * -1.0),
                (self.group0()[1] * other.group0()[0] * -1.0),
                (self.group0()[2] * other.group0()[0] * -1.0),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       89      123        0
    //    simd3        0        2        0
    //    simd4       20       21        0
    // Totals...
    // yes simd      109      146        0
    //  no simd      169      213        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                (-(self.group1()[3] * other.group0()[3])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])),
            ]),
            // e23, e31, e12, e45
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[2]]))
                + Simd32x4::from([
                    (self.group0()[1] * other.group0()[2]),
                    (self.group0()[2] * other.group0()[0]),
                    (self.group0()[0] * other.group0()[1]),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group2()[0] * other.group0()[3]) + (self.group1()[3] * other.group0()[0]) + (self.group1()[1] * other.group0()[2]) - (self.group1()[2] * other.group0()[1])),
                ((self.group2()[1] * other.group0()[3]) + (self.group1()[3] * other.group0()[1]) - (self.group1()[0] * other.group0()[2]) + (self.group1()[2] * other.group0()[0])),
                ((self.group2()[2] * other.group0()[3]) + (self.group1()[3] * other.group0()[2]) + (self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2])),
                    ((self.group1()[1] * other.group0()[3]) + (self.group0()[2] * other.group0()[0])),
                    ((self.group1()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1])),
                    (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      104      136        0
    //    simd3        0        2        0
    //    simd4       26       27        0
    // Totals...
    // yes simd      130      165        0
    //  no simd      208      250        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group1()[1]) - (self.group0()[1] * other.group1()[2])),
                    (-(self.group0()[2] * other.group1()[0]) + (self.group0()[0] * other.group1()[2])),
                    (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
                    (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e23, e31, e12, e45
            (-(swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group1(), 0, 1, 2, 2))
                - (swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[2])),
                    ((self.group0()[2] * other.group0()[0]) + (self.group0()[1] * other.group1()[3])),
                    ((self.group0()[2] * other.group1()[3]) + (self.group0()[0] * other.group0()[1])),
                    (-(self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group0()[1])),
                ])),
            // e15, e25, e35, e1234
            ((swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[2]]))
                + (swizzle!(other.group1(), 3, 3, 3, 0) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[0]]))
                + Simd32x4::from([
                    (-(self.group2()[2] * other.group1()[1]) + (self.group2()[0] * other.group0()[3]) + (self.group1()[3] * other.group0()[0])
                        - (self.group1()[2] * other.group0()[1])
                        + (self.group1()[1] * other.group0()[2])),
                    ((self.group2()[1] * other.group0()[3]) - (self.group2()[0] * other.group1()[2])
                        + (self.group1()[3] * other.group0()[1])
                        + (self.group1()[2] * other.group0()[0])
                        - (self.group1()[0] * other.group0()[2])),
                    ((self.group2()[2] * other.group0()[3]) - (self.group2()[1] * other.group1()[0])
                        + (self.group1()[3] * other.group0()[2])
                        + (self.group1()[0] * other.group0()[1])
                        - (self.group1()[1] * other.group0()[0])),
                    (self.group0()[1] * other.group1()[1]),
                ])),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]))
                + (swizzle!(self.group1(), 1, 2, 2, 3) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group1()[3]]))
                - (swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group0()[3]) + (self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[2])),
                    ((self.group1()[1] * other.group0()[3]) + (self.group0()[2] * other.group0()[0]) + (self.group0()[1] * other.group1()[3])),
                    ((self.group1()[0] * other.group1()[1]) + (self.group0()[2] * other.group1()[3]) + (self.group0()[0] * other.group0()[1])),
                    (-(self.group2()[1] * other.group1()[1])
                        - (self.group2()[0] * other.group1()[0])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group1()[1] * other.group0()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      116      148        0
    //    simd3        0        2        0
    //    simd4       18       19        0
    // Totals...
    // yes simd      134      169        0
    //  no simd      188      230        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group1()[2] * other.group0()[1]) + (self.group1()[1] * other.group0()[2]) + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])),
                ((self.group1()[2] * other.group0()[0]) - (self.group1()[0] * other.group0()[2]) - (self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                (-(self.group1()[1] * other.group0()[0]) + (self.group1()[0] * other.group0()[1]) + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])),
                ((self.group0()[2] * other.group1()[2]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
            ]),
            // e235, e315, e125, e5
            (-(swizzle!(self.group1(), 2, 0, 1, 2) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group1()[2]]))
                + Simd32x4::from([
                    (-(self.group2()[2] * other.group0()[1])
                        + (self.group2()[1] * other.group0()[2])
                        + (self.group1()[3] * other.group1()[0])
                        + (self.group1()[1] * other.group1()[2])),
                    ((self.group2()[2] * other.group0()[0]) - (self.group2()[0] * other.group0()[2])
                        + (self.group1()[3] * other.group1()[1])
                        + (self.group1()[2] * other.group1()[0])),
                    (-(self.group2()[1] * other.group0()[0])
                        + (self.group2()[0] * other.group0()[1])
                        + (self.group1()[3] * other.group1()[2])
                        + (self.group1()[0] * other.group1()[1])),
                    (-(self.group2()[2] * other.group0()[2])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group1()[1] * other.group1()[1])),
                ])),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group1()[3] * other.group0()[0]) - (self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])),
                ((self.group1()[3] * other.group0()[1]) + (self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0])),
                ((self.group1()[3] * other.group0()[2]) - (self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      112      144        0
    //    simd3        0        2        0
    //    simd4       24       25        0
    // Totals...
    // yes simd      136      171        0
    //  no simd      208      250        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2])),
                    ((self.group0()[2] * other.group0()[0]) + (self.group0()[1] * other.group0()[3])),
                    ((self.group0()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1])),
                    (-(self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e415, e425, e435, e321
            ((swizzle!(self.group1(), 1, 2, 2, 3) * swizzle!(other.group0(), 2, 0, 3, 3))
                + (swizzle!(other.group1(), 3, 0, 3, 2) * Simd32x4::from([self.group0()[0], self.group0()[2], self.group0()[2], self.group0()[2]]))
                + (swizzle!(other.group1(), 2, 3, 1, 0) * Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[0], self.group0()[0]]))
                + Simd32x4::from([
                    (-(self.group1()[2] * other.group0()[1]) + (self.group1()[0] * other.group0()[3]) - (self.group0()[2] * other.group1()[1])),
                    ((self.group1()[1] * other.group0()[3]) - (self.group1()[0] * other.group0()[2]) - (self.group0()[0] * other.group1()[2])),
                    (-(self.group1()[1] * other.group0()[0]) + (self.group1()[0] * other.group0()[1]) - (self.group0()[1] * other.group1()[0])),
                    (self.group0()[1] * other.group1()[1]),
                ])),
            // e235, e315, e125, e5
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group2()[2]]))
                + (Simd32x4::from(self.group1()[3]) * other.group1())
                - (swizzle!(self.group1(), 2, 0, 1, 2) * swizzle!(other.group1(), 1, 2, 0, 2))
                + Simd32x4::from([
                    ((self.group2()[1] * other.group0()[2])
                        + (self.group2()[0] * other.group0()[3])
                        + (self.group1()[0] * other.group1()[3])
                        + (self.group1()[1] * other.group1()[2])),
                    ((self.group2()[2] * other.group0()[0])
                        + (self.group2()[1] * other.group0()[3])
                        + (self.group1()[2] * other.group1()[0])
                        + (self.group1()[1] * other.group1()[3])),
                    ((self.group2()[2] * other.group0()[3])
                        + (self.group2()[0] * other.group0()[1])
                        + (self.group1()[2] * other.group1()[3])
                        + (self.group1()[0] * other.group1()[1])),
                    (-(self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group1()[1] * other.group1()[1])),
                ])),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group1()[3] * other.group0()[0]) + (self.group0()[2] * other.group1()[1]) - (self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group1()[2])),
                ((self.group1()[3] * other.group0()[1]) - (self.group0()[2] * other.group1()[0]) + (self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group1()[3])),
                ((self.group1()[3] * other.group0()[2]) - (self.group0()[2] * other.group1()[3]) - (self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for Circle {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      228      264        0
    //    simd2       18       22        0
    //    simd3       72       82        0
    //    simd4       24       25        0
    // Totals...
    // yes simd      342      393        0
    //  no simd      576      654        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            (-(Simd32x2::from(self.group2()[2]) * Simd32x2::from([other.group4()[2], other.group6()[2]]))
                - (Simd32x2::from(self.group2()[1]) * Simd32x2::from([other.group4()[1], other.group6()[1]]))
                - (Simd32x2::from(self.group2()[0]) * Simd32x2::from([other.group4()[0], other.group6()[0]]))
                - (Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group10()[0], other.group5()[2]]))
                - (Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group10()[1], other.group5()[1]]))
                - (Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group10()[2], other.group5()[0]]))
                - (Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group3()[2], other.group7()[2]]))
                - (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group3()[0], other.group7()[0]]))
                - (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group3()[1], other.group7()[1]]))
                + (Simd32x2::from([-1.0, 1.0]) * Simd32x2::from(self.group1()[3]) * Simd32x2::from([other.group3()[3], other.group5()[3]]))),
            // e1, e2, e3, e4
            (-(swizzle!(self.group1(), 2, 0, 1, 3) * swizzle!(other.group1(), 1, 2, 0, 3))
                + Simd32x4::from([
                    (-(self.group2()[2] * other.group6()[1])
                        + (self.group2()[1] * other.group6()[2])
                        + (self.group2()[0] * other.group1()[3])
                        + (self.group1()[3] * other.group5()[0])
                        + (self.group1()[1] * other.group1()[2])
                        + (self.group1()[0] * other.group5()[3])
                        + (self.group0()[2] * other.group7()[1])
                        - (self.group0()[0] * other[e1])
                        - (self.group0()[1] * other.group7()[2])),
                    ((self.group2()[2] * other.group6()[0]) + (self.group2()[1] * other.group1()[3]) - (self.group2()[0] * other.group6()[2])
                        + (self.group1()[3] * other.group5()[1])
                        + (self.group1()[2] * other.group1()[0])
                        + (self.group1()[1] * other.group5()[3])
                        - (self.group0()[2] * other.group7()[0])
                        + (self.group0()[0] * other.group7()[2])
                        - (self.group0()[1] * other[e1])),
                    ((self.group2()[2] * other.group1()[3]) - (self.group2()[1] * other.group6()[0])
                        + (self.group2()[0] * other.group6()[1])
                        + (self.group1()[3] * other.group5()[2])
                        + (self.group1()[2] * other.group5()[3])
                        + (self.group1()[0] * other.group1()[1])
                        - (self.group0()[2] * other[e1])
                        - (self.group0()[0] * other.group7()[1])
                        + (self.group0()[1] * other.group7()[0])),
                    (-(self.group1()[2] * other.group6()[2])
                        - (self.group1()[1] * other.group6()[1])
                        - (self.group1()[0] * other.group6()[0])
                        - (self.group0()[2] * other.group5()[2])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[1] * other.group5()[1])
                        - (self.group0()[1] * other.group1()[1])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group5()[0])),
                ])),
            // e5
            (-(self.group2()[2] * other.group5()[2]) + (self.group2()[2] * other.group1()[2]) - (self.group2()[1] * other.group5()[1]) + (self.group2()[1] * other.group1()[1])
                - (self.group2()[0] * other.group5()[0])
                + (self.group2()[0] * other.group1()[0])
                + (self.group1()[3] * other[e1])
                - (self.group1()[2] * other.group7()[2])
                - (self.group1()[0] * other.group7()[0])
                - (self.group1()[1] * other.group7()[1])),
            // e15, e25, e35, e45
            (-(swizzle!(other.group8(), 1, 2, 0, 2) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[2]]))
                - (swizzle!(self.group1(), 2, 0, 1, 3) * Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group0()[0]]))
                + Simd32x4::from([
                    (-(self.group2()[2] * other.group10()[1])
                        + (self.group2()[1] * other.group10()[0])
                        + (self.group2()[1] * other.group8()[2])
                        + (self.group2()[0] * other.group3()[3])
                        + (self.group2()[0] * other.group0()[0])
                        + (self.group1()[3] * other.group3()[0])
                        + (self.group1()[0] * other.group8()[3])
                        + (self.group1()[1] * other.group3()[2])),
                    ((self.group2()[2] * other.group10()[2])
                        + (self.group2()[2] * other.group8()[0])
                        + (self.group2()[1] * other.group3()[3])
                        + (self.group2()[1] * other.group0()[0])
                        - (self.group2()[0] * other.group10()[0])
                        + (self.group1()[3] * other.group3()[1])
                        + (self.group1()[2] * other.group3()[0])
                        + (self.group1()[1] * other.group8()[3])),
                    ((self.group2()[2] * other.group3()[3]) + (self.group2()[2] * other.group0()[0]) - (self.group2()[1] * other.group10()[2])
                        + (self.group2()[0] * other.group10()[1])
                        + (self.group2()[0] * other.group8()[1])
                        + (self.group1()[3] * other.group3()[2])
                        + (self.group1()[2] * other.group8()[3])
                        + (self.group1()[0] * other.group3()[1])),
                    ((self.group2()[2] * other.group4()[2]) + (self.group2()[1] * other.group4()[1]) + (self.group2()[0] * other.group4()[0])
                        - (self.group1()[1] * other.group8()[1])
                        - (self.group1()[0] * other.group8()[0])
                        - (self.group0()[2] * other.group3()[2])
                        - (self.group0()[0] * other.group3()[0])
                        - (self.group0()[1] * other.group3()[1])),
                ])),
            // e41, e42, e43
            (-(Simd32x3::from(self.group1()[3]) * other.group4()) - (swizzle!(other.group4(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))
                + (swizzle!(other.group4(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                + (Simd32x3::from(other[e35]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group10()[1], other.group8()[0], other.group3()[3]]))
                + (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group8()[1], other.group10()[2], other.group0()[0]]))
                + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group10()[0], other.group0()[0], other.group8()[0]]))
                - (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group8()[2], other.group3()[3], other.group10()[2]]))
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group8()[2], other.group10()[1]]))
                - (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group3()[3], other.group10()[0], other.group8()[1]]))),
            // e415, e425, e435, e321
            ((Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[1]]))
                - (swizzle!(self.group1(), 2, 0, 1, 2) * Simd32x4::from([other.group5()[1], other.group5()[2], other.group5()[0], other.group1()[2]]))
                + Simd32x4::from([
                    (-(self.group2()[2] * other.group6()[1])
                        + (self.group2()[1] * other.group6()[2])
                        + (self.group2()[0] * other.group1()[3])
                        + (self.group1()[1] * other.group5()[2])
                        + (self.group1()[0] * other.group0()[1])
                        - (self.group0()[2] * other.group7()[1])
                        + (self.group0()[0] * other[e1])
                        + (self.group0()[1] * other.group7()[2])),
                    ((self.group2()[2] * other.group6()[0]) + (self.group2()[1] * other.group1()[3]) - (self.group2()[0] * other.group6()[2])
                        + (self.group1()[2] * other.group5()[0])
                        + (self.group1()[1] * other.group0()[1])
                        + (self.group0()[2] * other.group7()[0])
                        - (self.group0()[0] * other.group7()[2])
                        + (self.group0()[1] * other[e1])),
                    ((self.group2()[2] * other.group1()[3]) - (self.group2()[1] * other.group6()[0])
                        + (self.group2()[0] * other.group6()[1])
                        + (self.group1()[2] * other.group0()[1])
                        + (self.group1()[0] * other.group5()[1])
                        + (self.group0()[2] * other[e1])
                        + (self.group0()[0] * other.group7()[1])
                        - (self.group0()[1] * other.group7()[0])),
                    (-(self.group2()[2] * other.group6()[2])
                        - (self.group2()[1] * other.group6()[1])
                        - (self.group2()[0] * other.group6()[0])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        + (self.group0()[2] * other.group7()[2])
                        + (self.group0()[0] * other.group7()[0])
                        + (self.group0()[1] * other.group7()[1])),
                ])),
            // e423, e431, e412
            (-(Simd32x3::from(self.group1()[3]) * other.group6()) - (swizzle!(other.group6(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))
                + (swizzle!(other.group6(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group5()[1], other.group1()[2], other.group5()[0]]))
                - (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group1()[1], other.group5()[2], other.group1()[0]]))
                + (swizzle!(self.group0(), 1, 2, 2) * Simd32x3::from([other.group5()[2], other.group5()[0], other.group5()[3]]))
                + (swizzle!(self.group0(), 1, 2, 2) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group0()[1]]))
                + (swizzle!(self.group0(), 0, 1, 0) * Simd32x3::from([other.group0()[1], other.group5()[3], other.group1()[1]]))
                + (swizzle!(self.group0(), 0, 1, 0) * Simd32x3::from([other.group5()[3], other.group0()[1], other.group5()[1]]))),
            // e235, e315, e125
            (-(Simd32x3::from(self.group2()[2]) * Simd32x3::from([other.group5()[1], other.group1()[0], other.group5()[3]]))
                + (Simd32x3::from(self.group2()[2]) * Simd32x3::from([other.group1()[1], other.group5()[0], other.group0()[1]]))
                + (Simd32x3::from(self.group2()[1]) * Simd32x3::from([other.group5()[2], other.group0()[1], other.group1()[0]]))
                - (Simd32x3::from(self.group2()[1]) * Simd32x3::from([other.group1()[2], other.group5()[3], other.group5()[0]]))
                - (Simd32x3::from(self.group2()[0]) * Simd32x3::from([other.group5()[3], other.group5()[2], other.group1()[1]]))
                + (Simd32x3::from(self.group2()[0]) * Simd32x3::from([other.group0()[1], other.group1()[2], other.group5()[1]]))
                + (Simd32x3::from(self.group1()[3]) * other.group7())
                - (swizzle!(other.group7(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (swizzle!(other.group7(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group10()[2], other.group10()[1], other.group10()[0], other.group3()[2]]))
                - (swizzle!(other.group8(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]))
                + (swizzle!(self.group1(), 1, 2, 2, 3) * Simd32x4::from([other.group8()[2], other.group8()[0], other.group3()[3], other.group8()[3]]))
                - (swizzle!(other.group3(), 1, 2, 0, 0) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group4()[1]) - (self.group2()[1] * other.group4()[2]) - (self.group2()[0] * other[e35])
                        + (self.group1()[0] * other.group3()[3])
                        + (self.group0()[0] * other.group8()[3])
                        + (self.group0()[1] * other.group3()[2])),
                    (-(self.group2()[2] * other.group4()[0]) - (self.group2()[1] * other[e35])
                        + (self.group2()[0] * other.group4()[2])
                        + (self.group1()[1] * other.group3()[3])
                        + (self.group0()[2] * other.group3()[0])
                        + (self.group0()[1] * other.group8()[3])),
                    (-(self.group2()[2] * other[e35]) + (self.group2()[1] * other.group4()[0]) - (self.group2()[0] * other.group4()[1])
                        + (self.group1()[0] * other.group8()[1])
                        + (self.group0()[2] * other.group8()[3])
                        + (self.group0()[0] * other.group3()[1])),
                    (-(self.group2()[2] * other.group10()[0])
                        - (self.group2()[1] * other.group10()[1])
                        - (self.group2()[1] * other.group8()[1])
                        - (self.group2()[0] * other.group10()[2])
                        - (self.group2()[0] * other.group8()[0])
                        - (self.group1()[1] * other.group3()[1])),
                ])),
            // e1234
            (-(self.group1()[3] * other[e35])
                - (self.group1()[2] * other.group4()[2])
                - (self.group1()[1] * other.group4()[1])
                - (self.group1()[0] * other.group4()[0])
                - (self.group0()[2] * other.group10()[0])
                + (self.group0()[2] * other.group8()[2])
                - (self.group0()[1] * other.group10()[1])
                + (self.group0()[1] * other.group8()[1])
                + (self.group0()[0] * other.group8()[0])
                - (self.group0()[0] * other.group10()[2])),
            // e12, e31, e23
            ((swizzle!(self.group2(), 2, 2, 1) * Simd32x3::from([other[e35], other.group4()[0], other.group4()[2]]))
                - (swizzle!(self.group2(), 1, 0, 2) * swizzle!(other.group4(), 0, 2, 1))
                + (swizzle!(self.group2(), 0, 1, 0) * Simd32x3::from([other.group4()[1], other[e35], other[e35]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group8()[2], other.group8()[1], other.group8()[0]]))
                + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[2], self.group1()[1], self.group1()[0]]))
                - (swizzle!(other.group10(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[0], self.group1()[2]]))
                + (swizzle!(other.group10(), 1, 2, 0) * Simd32x3::from([self.group1()[0], self.group1()[2], self.group1()[1]]))
                + (swizzle!(self.group0(), 2, 2, 0) * Simd32x3::from([other.group8()[3], other.group3()[0], other.group8()[3]]))
                + (swizzle!(self.group0(), 0, 1, 1) * Simd32x3::from([other.group3()[1], other.group8()[3], other.group3()[2]]))
                - (swizzle!(self.group0(), 1, 0, 2) * Simd32x3::from([other.group3()[0], other.group3()[2], other.group3()[1]]))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       68       92        0
    //    simd3        1        4        0
    //    simd4       22       25        0
    // Totals...
    // yes simd       91      121        0
    //  no simd      159      204        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (-(swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
            // e23, e31, e12, e45
            (-(swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group0(), 0, 1, 2, 2))
                + Simd32x4::from([
                    (self.group0()[0] * other.group0()[3]),
                    (self.group0()[1] * other.group0()[3]),
                    (self.group0()[2] * other.group0()[3]),
                    (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                ])),
            // e15, e25, e35, e1234
            ((swizzle!(other.group0(), 3, 0, 3, 2) * Simd32x4::from([self.group1()[0], self.group2()[2], self.group1()[2], self.group0()[2]]))
                + (swizzle!(other.group0(), 2, 3, 1, 0) * Simd32x4::from([self.group2()[1], self.group1()[1], self.group2()[0], self.group0()[0]]))
                + (Simd32x4::from([-1.0, -1.0, -1.0, 1.0])
                    * swizzle!(other.group0(), 1, 2, 0, 1)
                    * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[1]]))),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]))
                + (swizzle!(other.group0(), 3, 0, 3, 3) * Simd32x4::from([self.group0()[0], self.group1()[2], self.group0()[2], self.group1()[3]]))
                + Simd32x4::from([
                    (self.group1()[1] * other.group0()[2]),
                    (self.group0()[1] * other.group0()[3]),
                    (self.group1()[0] * other.group0()[1]),
                    (-(self.group2()[1] * other.group0()[1]) - (self.group2()[0] * other.group0()[0])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       99      133        0
    //    simd3        0        2        0
    //    simd4       20       21        0
    // Totals...
    // yes simd      119      156        0
    //  no simd      179      223        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                ((self.group1()[1] * other.group0()[3]) - (self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group1()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group2()[0] * other.group0()[3]) + (self.group0()[0] * other[e2]) + (self.group1()[3] * other.group0()[0])),
                ((self.group2()[1] * other.group0()[3]) + (self.group0()[1] * other[e2]) + (self.group1()[3] * other.group0()[1])),
                ((self.group2()[2] * other.group0()[3]) + (self.group0()[2] * other[e2]) + (self.group1()[3] * other.group0()[2])),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            ((swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group2()[2]]))
                + (self.group1() * Simd32x4::from(other[e2]))
                + Simd32x4::from([
                    ((self.group2()[1] * other.group0()[2]) * -1.0),
                    ((self.group2()[2] * other.group0()[0]) * -1.0),
                    ((self.group2()[0] * other.group0()[1]) * -1.0),
                    ((self.group2()[1] * other.group0()[1]) + (self.group2()[0] * other.group0()[0])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(self.group1(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))
                + Simd32x4::from([
                    ((self.group2()[0] * other.group0()[3]) - (self.group0()[0] * other[e2]) + (self.group1()[1] * other.group0()[2])),
                    ((self.group2()[1] * other.group0()[3]) + (self.group1()[2] * other.group0()[0]) - (self.group0()[1] * other[e2])),
                    ((self.group2()[2] * other.group0()[3]) - (self.group0()[2] * other[e2]) + (self.group1()[0] * other.group0()[1])),
                    (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       72        0
    //    simd3        0        4        0
    //    simd4        7       10        0
    // Totals...
    // yes simd       63       86        0
    //  no simd       84      124        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = Dipole::from_groups(
            // e41, e42, e43
            (self.group0() * Simd32x3::from(other[scalar])),
            // e23, e31, e12, e45
            (self.group1() * Simd32x4::from(other[scalar]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e15, e25, e35
            (self.group2() * Simd32x3::from(other[scalar])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       75      106        0
    //    simd3        2        5        0
    //    simd4       22       23        0
    // Totals...
    // yes simd       99      134        0
    //  no simd      169      213        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from(other[e4315]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
            // e23, e31, e12, e45
            (-(swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group0(), 0, 1, 2, 2))
                + Simd32x4::from([
                    ((self.group2()[0] * other[e4315]) + (self.group0()[0] * other.group0()[3])),
                    ((self.group2()[1] * other[e4315]) + (self.group0()[1] * other.group0()[3])),
                    ((self.group2()[2] * other[e4315]) + (self.group0()[2] * other.group0()[3])),
                    (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                ])),
            // e15, e25, e35, e1234
            ((swizzle!(other.group0(), 3, 0, 3, 2) * Simd32x4::from([self.group1()[0], self.group2()[2], self.group1()[2], self.group0()[2]]))
                + (swizzle!(other.group0(), 2, 3, 1, 0) * Simd32x4::from([self.group2()[1], self.group1()[1], self.group2()[0], self.group0()[0]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group0()[1]) * -1.0),
                    ((self.group2()[0] * other.group0()[2]) * -1.0),
                    ((self.group2()[1] * other.group0()[0]) * -1.0),
                    (-(self.group1()[3] * other[e4315]) + (self.group0()[1] * other.group0()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]))
                + (swizzle!(other.group0(), 3, 0, 3, 3) * Simd32x4::from([self.group0()[0], self.group1()[2], self.group0()[2], self.group1()[3]]))
                + Simd32x4::from([
                    (-(self.group2()[0] * other[e4315]) + (self.group1()[1] * other.group0()[2])),
                    (-(self.group2()[1] * other[e4315]) + (self.group0()[1] * other.group0()[3])),
                    (-(self.group2()[2] * other[e4315]) + (self.group1()[0] * other.group0()[1])),
                    (-(self.group2()[1] * other.group0()[1]) - (self.group2()[0] * other.group0()[0])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      144      176        0
    //    simd3        0        2        0
    //    simd4       36       37        0
    // Totals...
    // yes simd      180      215        0
    //  no simd      288      330        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[2]]))
                - (swizzle!(other.group0(), 1, 2, 0, 1) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[1]]))
                + (swizzle!(self.group1(), 1, 2, 2, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group3()[3], other.group1()[3]]))
                - (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group3()[3]) - (self.group0()[2] * other.group3()[1])
                        + (self.group0()[1] * other.group3()[2])
                        + (self.group0()[1] * other.group1()[2])
                        + (self.group0()[0] * other.group0()[3])
                        + (self.group0()[0] * other.group1()[3])),
                    ((self.group1()[1] * other.group3()[3])
                        + (self.group0()[2] * other.group3()[0])
                        + (self.group0()[2] * other.group1()[0])
                        + (self.group0()[1] * other.group1()[3])
                        + (self.group0()[1] * other.group0()[3])
                        - (self.group0()[0] * other.group3()[2])),
                    ((self.group1()[0] * other.group0()[1]) + (self.group0()[2] * other.group1()[3]) + (self.group0()[2] * other.group0()[3])
                        - (self.group0()[1] * other.group3()[0])
                        + (self.group0()[0] * other.group1()[1])
                        + (self.group0()[0] * other.group3()[1])),
                    (-(self.group2()[0] * other.group0()[0])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e321
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group2()[2]]))
                + (swizzle!(other.group0(), 2, 0, 1, 3) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group1()[3]]))
                - (swizzle!(self.group1(), 2, 0, 1, 2) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[2]]))
                + (swizzle!(other.group2(), 3, 0, 3, 2) * Simd32x4::from([self.group0()[0], self.group0()[2], self.group0()[2], self.group0()[2]]))
                + (swizzle!(other.group2(), 2, 3, 1, 0) * Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[0], self.group0()[0]]))
                + Simd32x4::from([
                    ((self.group2()[0] * other.group3()[3])
                        + (self.group1()[3] * other.group3()[0])
                        + (self.group1()[1] * other.group1()[2])
                        + (self.group1()[0] * other.group0()[3])
                        - (self.group0()[2] * other.group2()[1])),
                    ((self.group2()[1] * other.group3()[3])
                        + (self.group1()[3] * other.group3()[1])
                        + (self.group1()[2] * other.group1()[0])
                        + (self.group1()[1] * other.group0()[3])
                        - (self.group0()[0] * other.group2()[2])),
                    ((self.group2()[2] * other.group3()[3])
                        + (self.group1()[3] * other.group3()[2])
                        + (self.group1()[2] * other.group0()[3])
                        + (self.group1()[0] * other.group1()[1])
                        - (self.group0()[1] * other.group2()[0])),
                    (-(self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[1] * other.group3()[1])
                        - (self.group1()[0] * other.group3()[0])
                        + (self.group0()[1] * other.group2()[1])),
                ])),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group0()[3], other.group3()[2]]))
                - (Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[3], other.group1()[2]]))
                - (Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group3()[2], other.group1()[3], other.group1()[0], other.group1()[1]]))
                + (Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group1()[2], other.group0()[3], other.group3()[0], other.group3()[1]]))
                - (Simd32x4::from(self.group2()[0]) * Simd32x4::from([other.group1()[3], other.group1()[2], other.group3()[1], other.group1()[0]]))
                + (Simd32x4::from(self.group2()[0]) * Simd32x4::from([other.group0()[3], other.group3()[2], other.group1()[1], other.group3()[0]]))
                + (Simd32x4::from(self.group1()[3]) * other.group2())
                - (swizzle!(self.group1(), 2, 0, 1, 2) * swizzle!(other.group2(), 1, 2, 0, 2))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group2()[3]) + (self.group1()[1] * other.group2()[2])),
                    ((self.group1()[2] * other.group2()[0]) + (self.group1()[1] * other.group2()[3])),
                    ((self.group1()[2] * other.group2()[3]) + (self.group1()[0] * other.group2()[1])),
                    (-(self.group1()[0] * other.group2()[0]) - (self.group1()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[2]]))
                - (swizzle!(self.group1(), 2, 0, 1, 3) * swizzle!(other.group3(), 1, 2, 0, 3))
                + Simd32x4::from([
                    ((self.group2()[1] * other.group0()[2])
                        + (self.group2()[0] * other.group3()[3])
                        + (self.group1()[3] * other.group1()[0])
                        + (self.group1()[1] * other.group3()[2])
                        + (self.group1()[0] * other.group1()[3])
                        + (self.group0()[2] * other.group2()[1])
                        - (self.group0()[0] * other.group2()[3])
                        - (self.group0()[1] * other.group2()[2])),
                    ((self.group2()[2] * other.group0()[0])
                        + (self.group2()[1] * other.group3()[3])
                        + (self.group1()[3] * other.group1()[1])
                        + (self.group1()[2] * other.group3()[0])
                        + (self.group1()[1] * other.group1()[3])
                        - (self.group0()[2] * other.group2()[0])
                        + (self.group0()[0] * other.group2()[2])
                        - (self.group0()[1] * other.group2()[3])),
                    ((self.group2()[2] * other.group3()[3])
                        + (self.group2()[0] * other.group0()[1])
                        + (self.group1()[3] * other.group1()[2])
                        + (self.group1()[2] * other.group1()[3])
                        + (self.group1()[0] * other.group3()[1])
                        - (self.group0()[2] * other.group2()[3])
                        - (self.group0()[0] * other.group2()[1])
                        + (self.group0()[1] * other.group2()[0])),
                    (-(self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group3()[2])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[1] * other.group3()[1])
                        - (self.group0()[1] * other.group1()[1])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group3()[0])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      136      168        0
    //    simd3        0        2        0
    //    simd4       38       39        0
    // Totals...
    // yes simd      174      209        0
    //  no simd      288      330        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[2]]))
                - (swizzle!(other.group0(), 1, 2, 0, 1) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[1]]))
                - (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[3], other.group2()[2]]))
                - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group3()[2], other.group1()[3], other.group1()[0], other.group2()[1]]))
                - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group1()[2], other.group3()[1], other.group2()[0]]))
                + Simd32x4::from([
                    ((self.group1()[1] * other.group0()[2])
                        + (self.group1()[0] * other.group2()[3])
                        + (self.group0()[2] * other.group3()[1])
                        + (self.group0()[1] * other.group1()[2])
                        + (self.group0()[0] * other.group0()[3])),
                    ((self.group1()[2] * other.group0()[0])
                        + (self.group1()[1] * other.group2()[3])
                        + (self.group0()[2] * other.group1()[0])
                        + (self.group0()[1] * other.group0()[3])
                        + (self.group0()[0] * other.group3()[2])),
                    ((self.group1()[2] * other.group2()[3])
                        + (self.group1()[0] * other.group0()[1])
                        + (self.group0()[2] * other.group0()[3])
                        + (self.group0()[1] * other.group3()[0])
                        + (self.group0()[0] * other.group1()[1])),
                    (-(self.group2()[0] * other.group0()[0])
                        - (self.group1()[3] * other.group1()[3])
                        - (self.group1()[2] * other.group1()[2])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])),
                ])),
            // e23, e31, e12, e45
            (-(swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]))
                + (swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group2()[2]]))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group3(), 0, 1, 2, 2))
                - (swizzle!(self.group1(), 2, 0, 1, 1) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[1]]))
                + (swizzle!(other.group0(), 3, 3, 3, 1) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[1]]))
                - (swizzle!(other.group2(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group2()[0] * other.group2()[3])
                        + (self.group1()[1] * other.group1()[2])
                        + (self.group0()[0] * other.group3()[3])
                        + (self.group0()[1] * other.group2()[2])),
                    ((self.group2()[1] * other.group2()[3])
                        + (self.group1()[2] * other.group1()[0])
                        + (self.group0()[2] * other.group2()[0])
                        + (self.group0()[1] * other.group3()[3])),
                    ((self.group2()[2] * other.group2()[3])
                        + (self.group1()[0] * other.group1()[1])
                        + (self.group0()[2] * other.group3()[3])
                        + (self.group0()[0] * other.group2()[1])),
                    ((self.group2()[0] * other.group0()[0])
                        - (self.group1()[0] * other.group3()[0])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e15, e25, e35, e1234
            (-(swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[2]]))
                + (swizzle!(other.group3(), 2, 0, 1, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[2]]))
                - (swizzle!(self.group1(), 2, 0, 1, 3) * swizzle!(other.group2(), 1, 2, 0, 3))
                + (swizzle!(other.group3(), 3, 3, 3, 1) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[1]]))
                + Simd32x4::from([
                    (-(self.group2()[2] * other.group3()[1])
                        + (self.group2()[1] * other.group1()[2])
                        + (self.group2()[0] * other.group1()[3])
                        + (self.group2()[0] * other.group0()[3])
                        + (self.group1()[3] * other.group2()[0])
                        + (self.group1()[1] * other.group2()[2])),
                    ((self.group2()[2] * other.group1()[0]) + (self.group2()[1] * other.group1()[3]) + (self.group2()[1] * other.group0()[3])
                        - (self.group2()[0] * other.group3()[2])
                        + (self.group1()[3] * other.group2()[1])
                        + (self.group1()[2] * other.group2()[0])),
                    ((self.group2()[2] * other.group1()[3]) + (self.group2()[2] * other.group0()[3]) - (self.group2()[1] * other.group3()[0])
                        + (self.group2()[0] * other.group1()[1])
                        + (self.group1()[3] * other.group2()[2])
                        + (self.group1()[0] * other.group2()[1])),
                    (-(self.group1()[2] * other.group0()[2])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group1()[1])
                        - (self.group0()[0] * other.group1()[0])
                        + (self.group0()[0] * other.group3()[0])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(other.group2(), 3, 3, 3, 2) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[2]]))
                - (swizzle!(other.group1(), 0, 1, 2, 2) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[2]]))
                - (swizzle!(other.group3(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]))
                + (swizzle!(self.group1(), 1, 2, 2, 3) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[3], other.group3()[3]]))
                - (swizzle!(other.group2(), 1, 2, 0, 0) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group0()[1]) - (self.group2()[1] * other.group0()[2])
                        + (self.group1()[0] * other.group1()[3])
                        + (self.group0()[0] * other.group3()[3])
                        + (self.group0()[1] * other.group2()[2])),
                    (-(self.group2()[2] * other.group0()[0])
                        + (self.group2()[0] * other.group0()[2])
                        + (self.group1()[1] * other.group1()[3])
                        + (self.group0()[2] * other.group2()[0])
                        + (self.group0()[1] * other.group3()[3])),
                    ((self.group2()[1] * other.group0()[0]) - (self.group2()[0] * other.group0()[1])
                        + (self.group1()[0] * other.group3()[1])
                        + (self.group0()[2] * other.group3()[3])
                        + (self.group0()[0] * other.group2()[1])),
                    (-(self.group2()[1] * other.group3()[1])
                        - (self.group2()[1] * other.group1()[1])
                        - (self.group2()[0] * other.group3()[0])
                        - (self.group2()[0] * other.group1()[0])
                        - (self.group1()[1] * other.group2()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl InfixAntiSandwich for CircleRotor {}
impl AntiSandwich<AntiScalar> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       57       76        0
    //    simd3        0        2        0
    //    simd4       12       15        0
    // Totals...
    // yes simd       69       93        0
    //  no simd      105      142        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = CircleRotor::from_groups(
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other[e12345])),
            // e415, e425, e435, e321
            (self.group1() * Simd32x4::from(other[e12345])),
            // e235, e315, e125, e12345
            (self.group2() * Simd32x4::from(other[e12345])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      130      165        0
    //    simd3        0        1        0
    //    simd4       31       32        0
    // Totals...
    // yes simd      161      198        0
    //  no simd      254      296        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]))
                - (swizzle!(self.group1(), 2, 0, 1, 1) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[1]]))
                + (swizzle!(self.group1(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]))
                - (swizzle!(other.group1(), 1, 2, 0, 0) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]))
                + Simd32x4::from([
                    ((self.group2()[3] * other.group0()[0]) + (self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2])),
                    ((self.group2()[3] * other.group0()[1]) + (self.group0()[2] * other.group1()[0]) + (self.group0()[1] * other.group1()[3])),
                    ((self.group2()[3] * other.group0()[2]) + (self.group0()[2] * other.group1()[3]) + (self.group0()[0] * other.group1()[1])),
                    (-(self.group2()[2] * other.group0()[2])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e321
            ((Simd32x4::from(self.group2()[3]) * other.group1())
                - (swizzle!(self.group2(), 2, 0, 1, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[2]]))
                + Simd32x4::from([
                    ((self.group2()[1] * other.group0()[2]) - (self.group1()[2] * other.group1()[1])
                        + (self.group1()[1] * other.group1()[2])
                        + (self.group0()[1] * other.group2()[2])
                        - (self.group0()[2] * other.group2()[1])),
                    ((self.group2()[2] * other.group0()[0]) + (self.group1()[2] * other.group1()[0])
                        - (self.group1()[0] * other.group1()[2])
                        - (self.group0()[0] * other.group2()[2])
                        + (self.group0()[2] * other.group2()[0])),
                    ((self.group2()[0] * other.group0()[1]) - (self.group1()[1] * other.group1()[0])
                        + (self.group1()[0] * other.group1()[1])
                        + (self.group0()[0] * other.group2()[1])
                        - (self.group0()[1] * other.group2()[0])),
                    (-(self.group2()[1] * other.group0()[1]) - (self.group2()[0] * other.group0()[0])
                        + (self.group0()[2] * other.group2()[2])
                        + (self.group0()[0] * other.group2()[0])
                        + (self.group0()[1] * other.group2()[1])),
                ])),
            // e235, e315, e125, e5
            (-(swizzle!(self.group2(), 2, 1, 2, 2) * swizzle!(other.group1(), 1, 3, 3, 2))
                - (swizzle!(self.group2(), 0, 0, 1, 1) * swizzle!(other.group1(), 3, 2, 0, 1))
                - (swizzle!(self.group1(), 2, 0, 1, 2) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group2()[2]]))
                + Simd32x4::from([
                    ((self.group2()[3] * other.group2()[0])
                        + (self.group2()[1] * other.group1()[2])
                        + (self.group1()[3] * other.group2()[0])
                        + (self.group1()[1] * other.group2()[2])),
                    ((self.group2()[3] * other.group2()[1])
                        + (self.group2()[2] * other.group1()[0])
                        + (self.group1()[3] * other.group2()[1])
                        + (self.group1()[2] * other.group2()[0])),
                    ((self.group2()[3] * other.group2()[2])
                        + (self.group2()[0] * other.group1()[1])
                        + (self.group1()[3] * other.group2()[2])
                        + (self.group1()[0] * other.group2()[1])),
                    (-(self.group2()[0] * other.group1()[0]) - (self.group1()[0] * other.group2()[0]) - (self.group1()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group2()[2] * other.group0()[1])
                    + (self.group2()[1] * other.group0()[2])
                    + (self.group1()[3] * other.group1()[0])
                    + (self.group1()[0] * other.group1()[3])
                    - (self.group0()[1] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[1])),
                ((self.group2()[2] * other.group0()[0]) - (self.group2()[0] * other.group0()[2])
                    + (self.group1()[3] * other.group1()[1])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group0()[0] * other.group2()[2])
                    - (self.group0()[2] * other.group2()[0])),
                (-(self.group2()[1] * other.group0()[0])
                    + (self.group2()[0] * other.group0()[1])
                    + (self.group1()[3] * other.group1()[2])
                    + (self.group1()[2] * other.group1()[3])
                    - (self.group0()[0] * other.group2()[1])
                    + (self.group0()[1] * other.group2()[0])),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      129      164        0
    //    simd3        0        1        0
    //    simd4       34       35        0
    // Totals...
    // yes simd      163      200        0
    //  no simd      265      307        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]))
                - (swizzle!(self.group1(), 2, 0, 1, 1) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[1]]))
                + (swizzle!(self.group1(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]]))
                - (swizzle!(other.group1(), 1, 2, 0, 0) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]))
                + Simd32x4::from([
                    ((self.group0()[1] * other.group1()[2]) + (self.group0()[0] * other.group1()[3]) + (self.group0()[0] * other.group2()[3])),
                    ((self.group0()[2] * other.group1()[0]) + (self.group0()[1] * other.group2()[3]) + (self.group0()[1] * other.group1()[3])),
                    ((self.group0()[2] * other.group2()[3]) + (self.group0()[2] * other.group1()[3]) + (self.group0()[0] * other.group1()[1])),
                    (-(self.group2()[2] * other.group0()[2])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e321
            ((Simd32x4::from(self.group2()[3]) * other.group1())
                - (swizzle!(self.group2(), 2, 0, 1, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[2]]))
                + (swizzle!(self.group1(), 1, 2, 2, 3) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group2()[3], other.group2()[3]]))
                + (swizzle!(other.group2(), 3, 3, 1, 2) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group0()[0], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group2()[1] * other.group0()[2]) - (self.group1()[2] * other.group1()[1]) + (self.group0()[1] * other.group2()[2])
                        - (self.group0()[2] * other.group2()[1])),
                    ((self.group2()[2] * other.group0()[0]) - (self.group1()[0] * other.group1()[2]) - (self.group0()[0] * other.group2()[2])
                        + (self.group0()[2] * other.group2()[0])),
                    ((self.group2()[0] * other.group0()[1]) - (self.group1()[1] * other.group1()[0]) + (self.group1()[0] * other.group1()[1])
                        - (self.group0()[1] * other.group2()[0])),
                    (-(self.group2()[1] * other.group0()[1]) - (self.group2()[0] * other.group0()[0])
                        + (self.group0()[0] * other.group2()[0])
                        + (self.group0()[1] * other.group2()[1])),
                ])),
            // e235, e315, e125, e5
            (-(swizzle!(self.group2(), 2, 1, 2, 2) * swizzle!(other.group1(), 1, 3, 3, 2))
                - (swizzle!(self.group2(), 0, 0, 1, 1) * swizzle!(other.group1(), 3, 2, 0, 1))
                - (swizzle!(self.group1(), 2, 0, 1, 2) * swizzle!(other.group2(), 1, 2, 0, 2))
                + Simd32x4::from([
                    ((self.group2()[3] * other.group2()[0])
                        + (self.group2()[1] * other.group1()[2])
                        + (self.group2()[0] * other.group2()[3])
                        + (self.group1()[3] * other.group2()[0])
                        + (self.group1()[1] * other.group2()[2])),
                    ((self.group2()[3] * other.group2()[1])
                        + (self.group2()[2] * other.group1()[0])
                        + (self.group2()[1] * other.group2()[3])
                        + (self.group1()[3] * other.group2()[1])
                        + (self.group1()[2] * other.group2()[0])),
                    ((self.group2()[3] * other.group2()[2])
                        + (self.group2()[2] * other.group2()[3])
                        + (self.group2()[0] * other.group1()[1])
                        + (self.group1()[3] * other.group2()[2])
                        + (self.group1()[0] * other.group2()[1])),
                    (-(self.group2()[0] * other.group1()[0]) - (self.group1()[0] * other.group2()[0]) - (self.group1()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group2()[2] * other.group0()[1])
                    + (self.group2()[1] * other.group0()[2])
                    + (self.group1()[3] * other.group1()[0])
                    + (self.group1()[0] * other.group1()[3])
                    - (self.group0()[1] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[1])),
                ((self.group2()[2] * other.group0()[0]) - (self.group2()[0] * other.group0()[2])
                    + (self.group1()[3] * other.group1()[1])
                    + (self.group1()[1] * other.group1()[3])
                    + (self.group0()[0] * other.group2()[2])
                    - (self.group0()[2] * other.group2()[0])),
                (-(self.group2()[1] * other.group0()[0])
                    + (self.group2()[0] * other.group0()[1])
                    + (self.group1()[3] * other.group1()[2])
                    + (self.group1()[2] * other.group1()[3])
                    - (self.group0()[0] * other.group2()[1])
                    + (self.group0()[1] * other.group2()[0])),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      114      149        0
    //    simd3        0        1        0
    //    simd4       35       36        0
    // Totals...
    // yes simd      149      186        0
    //  no simd      254      296        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (swizzle!(self.group1(), 2, 0, 1, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[2]]))
                - (swizzle!(other.group1(), 1, 2, 3, 1) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[2], self.group1()[1]]))
                - (swizzle!(other.group1(), 3, 3, 0, 0) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[1], self.group1()[0]]))
                + Simd32x4::from([
                    ((self.group2()[3] * other.group0()[0]) + (self.group1()[1] * other.group0()[2]) + (self.group0()[1] * other.group1()[2])),
                    ((self.group2()[3] * other.group0()[1]) + (self.group1()[2] * other.group0()[0]) + (self.group0()[2] * other.group1()[0])),
                    ((self.group2()[3] * other.group0()[2]) + (self.group1()[0] * other.group0()[1]) + (self.group0()[0] * other.group1()[1])),
                    (-(self.group2()[2] * other.group0()[2])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e23, e31, e12, e45
            ((Simd32x4::from(self.group2()[3]) * other.group1())
                + (swizzle!(self.group2(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group2()[2] * other.group0()[1]) - (self.group1()[2] * other.group1()[1])
                        + (self.group1()[1] * other.group1()[2])
                        + (self.group0()[1] * other.group2()[2])
                        - (self.group0()[2] * other.group2()[1])),
                    (-(self.group2()[0] * other.group0()[2]) + (self.group1()[2] * other.group1()[0])
                        - (self.group1()[0] * other.group1()[2])
                        - (self.group0()[0] * other.group2()[2])
                        + (self.group0()[2] * other.group2()[0])),
                    (-(self.group2()[1] * other.group0()[0]) - (self.group1()[1] * other.group1()[0])
                        + (self.group1()[0] * other.group1()[1])
                        + (self.group0()[0] * other.group2()[1])
                        - (self.group0()[1] * other.group2()[0])),
                    ((self.group2()[1] * other.group0()[1]) + (self.group2()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e15, e25, e35, e1234
            (-(swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[2]]))
                - (swizzle!(self.group1(), 2, 0, 1, 2) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[2]]))
                + Simd32x4::from([
                    ((self.group2()[3] * other.group2()[0])
                        + (self.group2()[1] * other.group1()[2])
                        + (self.group2()[0] * other.group1()[3])
                        + (self.group1()[3] * other.group2()[0])
                        + (self.group1()[1] * other.group2()[2])),
                    ((self.group2()[3] * other.group2()[1])
                        + (self.group2()[2] * other.group1()[0])
                        + (self.group2()[1] * other.group1()[3])
                        + (self.group1()[3] * other.group2()[1])
                        + (self.group1()[2] * other.group2()[0])),
                    ((self.group2()[3] * other.group2()[2])
                        + (self.group2()[2] * other.group1()[3])
                        + (self.group2()[0] * other.group1()[1])
                        + (self.group1()[3] * other.group2()[2])
                        + (self.group1()[0] * other.group2()[1])),
                    (-(self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group2(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                - (swizzle!(other.group1(), 0, 1, 2, 1) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[1]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group0()[1]) + (self.group1()[0] * other.group1()[3]) + (self.group0()[1] * other.group2()[2])
                        - (self.group0()[2] * other.group2()[1])),
                    ((self.group2()[0] * other.group0()[2]) + (self.group1()[1] * other.group1()[3]) - (self.group0()[0] * other.group2()[2])
                        + (self.group0()[2] * other.group2()[0])),
                    ((self.group2()[1] * other.group0()[0]) + (self.group1()[2] * other.group1()[3]) + (self.group0()[0] * other.group2()[1])
                        - (self.group0()[1] * other.group2()[0])),
                    (-(self.group2()[0] * other.group1()[0])
                        - (self.group1()[2] * other.group2()[2])
                        - (self.group1()[0] * other.group2()[0])
                        - (self.group1()[1] * other.group2()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      117      152        0
    //    simd3        0        1        0
    //    simd4       48       49        0
    // Totals...
    // yes simd      165      202        0
    //  no simd      309      351        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (swizzle!(self.group1(), 2, 0, 1, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[2]]))
                - (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[3], other.group2()[2]]))
                - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group3()[2], other.group1()[3], other.group1()[0], other.group2()[1]]))
                - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group1()[2], other.group3()[1], other.group2()[0]]))
                + Simd32x4::from([
                    ((self.group2()[3] * other.group0()[0])
                        + (self.group1()[1] * other.group0()[2])
                        + (self.group1()[0] * other.group2()[3])
                        + (self.group0()[2] * other.group3()[1])
                        + (self.group0()[1] * other.group1()[2])),
                    ((self.group2()[3] * other.group0()[1])
                        + (self.group1()[2] * other.group0()[0])
                        + (self.group1()[1] * other.group2()[3])
                        + (self.group0()[2] * other.group1()[0])
                        + (self.group0()[0] * other.group3()[2])),
                    ((self.group2()[3] * other.group0()[2])
                        + (self.group1()[2] * other.group2()[3])
                        + (self.group1()[0] * other.group0()[1])
                        + (self.group0()[1] * other.group3()[0])
                        + (self.group0()[0] * other.group1()[1])),
                    (-(self.group2()[2] * other.group0()[2])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])),
                ])),
            // e23, e31, e12, e45
            ((Simd32x4::from(self.group2()[3]) * other.group1())
                + (swizzle!(self.group2(), 1, 2, 2, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group2()[3], other.group0()[2]]))
                + (swizzle!(self.group2(), 0, 1, 0, 1) * Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[1], other.group0()[1]]))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group3(), 0, 1, 2, 2))
                - (swizzle!(self.group1(), 2, 0, 1, 1) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[1]]))
                - (swizzle!(other.group2(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group2()[2] * other.group0()[1])
                        + (self.group1()[1] * other.group1()[2])
                        + (self.group0()[0] * other.group3()[3])
                        + (self.group0()[1] * other.group2()[2])),
                    (-(self.group2()[0] * other.group0()[2])
                        + (self.group1()[2] * other.group1()[0])
                        + (self.group0()[2] * other.group2()[0])
                        + (self.group0()[1] * other.group3()[3])),
                    (-(self.group2()[1] * other.group0()[0])
                        + (self.group1()[0] * other.group1()[1])
                        + (self.group0()[2] * other.group3()[3])
                        + (self.group0()[0] * other.group2()[1])),
                    ((self.group2()[0] * other.group0()[0])
                        - (self.group1()[0] * other.group3()[0])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e15, e25, e35, e1234
            ((Simd32x4::from(self.group2()[3]) * other.group2())
                - (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[2]]))
                + (swizzle!(other.group3(), 2, 0, 1, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[2]]))
                - (swizzle!(self.group1(), 2, 0, 1, 3) * swizzle!(other.group2(), 1, 2, 0, 3))
                + (swizzle!(other.group3(), 3, 3, 3, 1) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[1]]))
                + Simd32x4::from([
                    (-(self.group2()[2] * other.group3()[1])
                        + (self.group2()[1] * other.group1()[2])
                        + (self.group2()[0] * other.group1()[3])
                        + (self.group1()[3] * other.group2()[0])
                        + (self.group1()[1] * other.group2()[2])),
                    ((self.group2()[2] * other.group1()[0]) + (self.group2()[1] * other.group1()[3]) - (self.group2()[0] * other.group3()[2])
                        + (self.group1()[3] * other.group2()[1])
                        + (self.group1()[2] * other.group2()[0])),
                    ((self.group2()[2] * other.group1()[3]) - (self.group2()[1] * other.group3()[0])
                        + (self.group2()[0] * other.group1()[1])
                        + (self.group1()[3] * other.group2()[2])
                        + (self.group1()[0] * other.group2()[1])),
                    (-(self.group1()[2] * other.group0()[2])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group1()[1])
                        - (self.group0()[0] * other.group1()[0])
                        + (self.group0()[0] * other.group3()[0])),
                ])),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(self.group2()[3]) * other.group3())
                - (swizzle!(self.group2(), 1, 2, 2, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group2()[3], other.group3()[2]]))
                - (swizzle!(self.group2(), 0, 1, 0, 2) * Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[1], other.group1()[2]]))
                - (swizzle!(other.group1(), 0, 1, 2, 1) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[1]]))
                - (swizzle!(other.group3(), 1, 2, 0, 1) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[1]]))
                + (swizzle!(self.group1(), 1, 2, 2, 3) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[3], other.group3()[3]]))
                - (swizzle!(other.group2(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group0()[1])
                        + (self.group1()[0] * other.group1()[3])
                        + (self.group0()[0] * other.group3()[3])
                        + (self.group0()[1] * other.group2()[2])),
                    ((self.group2()[0] * other.group0()[2])
                        + (self.group1()[1] * other.group1()[3])
                        + (self.group0()[2] * other.group2()[0])
                        + (self.group0()[1] * other.group3()[3])),
                    ((self.group2()[1] * other.group0()[0])
                        + (self.group1()[0] * other.group3()[1])
                        + (self.group0()[2] * other.group3()[3])
                        + (self.group0()[0] * other.group2()[1])),
                    (-(self.group2()[0] * other.group3()[0])
                        - (self.group2()[0] * other.group1()[0])
                        - (self.group1()[0] * other.group2()[0])
                        - (self.group1()[1] * other.group2()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       75      104        0
    //    simd3        0        1        0
    //    simd4       23       26        0
    // Totals...
    // yes simd       98      131        0
    //  no simd      167      211        0
    fn anti_sandwich(self, other: DualNum) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group1()[0] * other.group0()[1])),
                ((self.group0()[1] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[0]) + (self.group1()[2] * other.group0()[1])),
                (self.group1()[3] * other.group0()[1]),
            ]),
            // e235, e315, e125, e5
            ((self.group1() * Simd32x4::from(other.group0()[0])) + (self.group2() * Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group0()[0]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0] * -1.0),
                (self.group0()[1] * other.group0()[0] * -1.0),
                (self.group0()[2] * other.group0()[0] * -1.0),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       80      114        0
    //    simd3        0        1        0
    //    simd4       28       29        0
    // Totals...
    // yes simd      108      144        0
    //  no simd      192      233        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                (-(self.group1()[3] * other.group0()[3])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])),
            ]),
            // e23, e31, e12, e45
            ((swizzle!(other.group0(), 2, 0, 1, 3) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group2()[3]]))
                - (swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[2]]))
                + Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]))])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group2()[3] * other.group0()[0]) + (self.group2()[0] * other.group0()[3]) + (self.group1()[3] * other.group0()[0]) + (self.group1()[1] * other.group0()[2])
                    - (self.group1()[2] * other.group0()[1])),
                ((self.group2()[3] * other.group0()[1]) + (self.group2()[1] * other.group0()[3]) + (self.group1()[3] * other.group0()[1]) - (self.group1()[0] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[0])),
                ((self.group2()[3] * other.group0()[2]) + (self.group2()[2] * other.group0()[3]) + (self.group1()[3] * other.group0()[2]) + (self.group1()[0] * other.group0()[1])
                    - (self.group1()[1] * other.group0()[0])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2])),
                    ((self.group1()[1] * other.group0()[3]) + (self.group0()[2] * other.group0()[0])),
                    ((self.group1()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1])),
                    (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       92      127        0
    //    simd3        0        1        0
    //    simd4       35       36        0
    // Totals...
    // yes simd      127      164        0
    //  no simd      232      274        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group1()[1]) - (self.group0()[1] * other.group1()[2])),
                    (-(self.group0()[2] * other.group1()[0]) + (self.group0()[0] * other.group1()[2])),
                    (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
                    (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e23, e31, e12, e45
            (-(swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group1(), 0, 1, 2, 2))
                - (swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (swizzle!(other.group0(), 2, 0, 1, 3) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group2()[3]]))
                + Simd32x4::from([
                    (self.group0()[0] * other.group1()[3]),
                    (self.group0()[1] * other.group1()[3]),
                    (self.group0()[2] * other.group1()[3]),
                    (-(self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group0()[1])),
                ])),
            // e15, e25, e35, e1234
            ((swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[2]]))
                + (swizzle!(other.group1(), 3, 3, 3, 0) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[0]]))
                + Simd32x4::from([
                    ((self.group2()[3] * other.group0()[0]) - (self.group2()[2] * other.group1()[1])
                        + (self.group2()[0] * other.group0()[3])
                        + (self.group1()[3] * other.group0()[0])
                        - (self.group1()[2] * other.group0()[1])
                        + (self.group1()[1] * other.group0()[2])),
                    ((self.group2()[3] * other.group0()[1]) + (self.group2()[1] * other.group0()[3]) - (self.group2()[0] * other.group1()[2])
                        + (self.group1()[3] * other.group0()[1])
                        + (self.group1()[2] * other.group0()[0])
                        - (self.group1()[0] * other.group0()[2])),
                    ((self.group2()[3] * other.group0()[2]) + (self.group2()[2] * other.group0()[3]) - (self.group2()[1] * other.group1()[0])
                        + (self.group1()[3] * other.group0()[2])
                        + (self.group1()[0] * other.group0()[1])
                        - (self.group1()[1] * other.group0()[0])),
                    (self.group0()[1] * other.group1()[1]),
                ])),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(self.group2()[3]) * other.group1())
                - (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]))
                + (swizzle!(self.group1(), 1, 2, 2, 3) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group1()[3]]))
                - (swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group0()[3]) + (self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[2])),
                    ((self.group1()[1] * other.group0()[3]) + (self.group0()[2] * other.group0()[0]) + (self.group0()[1] * other.group1()[3])),
                    ((self.group1()[0] * other.group1()[1]) + (self.group0()[2] * other.group1()[3]) + (self.group0()[0] * other.group0()[1])),
                    (-(self.group2()[1] * other.group1()[1])
                        - (self.group2()[0] * other.group1()[0])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group1()[1] * other.group0()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      114      149        0
    //    simd3        0        1        0
    //    simd4       24       25        0
    // Totals...
    // yes simd      138      175        0
    //  no simd      210      252        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group2()[3] * other.group0()[0]) - (self.group1()[2] * other.group0()[1]) + (self.group1()[1] * other.group0()[2]) + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])),
                ((self.group2()[3] * other.group0()[1]) + (self.group1()[2] * other.group0()[0]) - (self.group1()[0] * other.group0()[2]) - (self.group0()[0] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[0])),
                ((self.group2()[3] * other.group0()[2]) - (self.group1()[1] * other.group0()[0]) + (self.group1()[0] * other.group0()[1]) + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])),
                ((self.group0()[2] * other.group1()[2]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
            ]),
            // e235, e315, e125, e5
            (-(swizzle!(self.group2(), 2, 0, 1, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[2]]))
                - (swizzle!(self.group1(), 2, 0, 1, 2) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group2()[3] * other.group1()[0])
                        + (self.group2()[1] * other.group0()[2])
                        + (self.group1()[3] * other.group1()[0])
                        + (self.group1()[1] * other.group1()[2])),
                    ((self.group2()[3] * other.group1()[1])
                        + (self.group2()[2] * other.group0()[0])
                        + (self.group1()[3] * other.group1()[1])
                        + (self.group1()[2] * other.group1()[0])),
                    ((self.group2()[3] * other.group1()[2])
                        + (self.group2()[0] * other.group0()[1])
                        + (self.group1()[3] * other.group1()[2])
                        + (self.group1()[0] * other.group1()[1])),
                    (-(self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group1()[1] * other.group1()[1])),
                ])),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group1()[3] * other.group0()[0]) - (self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])),
                ((self.group1()[3] * other.group0()[1]) + (self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0])),
                ((self.group1()[3] * other.group0()[2]) - (self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      108      143        0
    //    simd3        0        1        0
    //    simd4       31       32        0
    // Totals...
    // yes simd      139      176        0
    //  no simd      232      274        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + (swizzle!(other.group0(), 3, 0, 3, 3) * Simd32x4::from([self.group0()[0], self.group0()[2], self.group0()[2], self.group2()[3]]))
                + Simd32x4::from([
                    (self.group0()[1] * other.group0()[2]),
                    (self.group0()[1] * other.group0()[3]),
                    (self.group0()[0] * other.group0()[1]),
                    (-(self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e415, e425, e435, e321
            ((other.group0() * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group1()[3]]))
                + (swizzle!(other.group1(), 3, 0, 3, 2) * Simd32x4::from([self.group0()[0], self.group0()[2], self.group0()[2], self.group0()[2]]))
                + (swizzle!(other.group1(), 2, 3, 1, 0) * Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[0], self.group0()[0]]))
                + Simd32x4::from([
                    (-(self.group1()[2] * other.group0()[1]) + (self.group1()[1] * other.group0()[2]) + (self.group1()[0] * other.group0()[3])
                        - (self.group0()[2] * other.group1()[1])),
                    ((self.group1()[2] * other.group0()[0]) + (self.group1()[1] * other.group0()[3])
                        - (self.group1()[0] * other.group0()[2])
                        - (self.group0()[0] * other.group1()[2])),
                    ((self.group1()[2] * other.group0()[3]) - (self.group1()[1] * other.group0()[0]) + (self.group1()[0] * other.group0()[1])
                        - (self.group0()[1] * other.group1()[0])),
                    (self.group0()[1] * other.group1()[1]),
                ])),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group2()[3]) * other.group1()) - (swizzle!(self.group2(), 2, 0, 1, 2) * swizzle!(other.group0(), 1, 2, 0, 2))
                + (Simd32x4::from(self.group1()[3]) * other.group1())
                - (swizzle!(self.group1(), 2, 0, 1, 2) * swizzle!(other.group1(), 1, 2, 0, 2))
                + Simd32x4::from([
                    ((self.group2()[1] * other.group0()[2])
                        + (self.group2()[0] * other.group0()[3])
                        + (self.group1()[0] * other.group1()[3])
                        + (self.group1()[1] * other.group1()[2])),
                    ((self.group2()[2] * other.group0()[0])
                        + (self.group2()[1] * other.group0()[3])
                        + (self.group1()[2] * other.group1()[0])
                        + (self.group1()[1] * other.group1()[3])),
                    ((self.group2()[2] * other.group0()[3])
                        + (self.group2()[0] * other.group0()[1])
                        + (self.group1()[2] * other.group1()[3])
                        + (self.group1()[0] * other.group1()[1])),
                    (-(self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group1()[1] * other.group1()[1])),
                ])),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group1()[3] * other.group0()[0]) + (self.group0()[2] * other.group1()[1]) - (self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group1()[2])),
                ((self.group1()[3] * other.group0()[1]) - (self.group0()[2] * other.group1()[0]) + (self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group1()[3])),
                ((self.group1()[3] * other.group0()[2]) - (self.group0()[2] * other.group1()[3]) - (self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for CircleRotor {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      189      231        0
    //    simd2       20       24        0
    //    simd3       77       85        0
    //    simd4       45       46        0
    // Totals...
    // yes simd      331      386        0
    //  no simd      640      718        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from(self.group2()[3]) * other.group0())
                - (Simd32x2::from(self.group2()[2]) * Simd32x2::from([other.group4()[2], other.group6()[2]]))
                - (Simd32x2::from(self.group2()[1]) * Simd32x2::from([other.group4()[1], other.group6()[1]]))
                - (Simd32x2::from(self.group2()[0]) * Simd32x2::from([other.group4()[0], other.group6()[0]]))
                - (Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group10()[0], other.group5()[2]]))
                - (Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group10()[1], other.group5()[1]]))
                - (Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group10()[2], other.group5()[0]]))
                - (Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group3()[2], other.group7()[2]]))
                - (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group3()[0], other.group7()[0]]))
                - (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group3()[1], other.group7()[1]]))
                + (Simd32x2::from([-1.0, 1.0]) * Simd32x2::from(self.group1()[3]) * Simd32x2::from([other.group3()[3], other.group5()[3]]))),
            // e1, e2, e3, e4
            ((Simd32x4::from(self.group2()[3]) * other.group1()) - (swizzle!(self.group1(), 2, 0, 1, 3) * swizzle!(other.group1(), 1, 2, 0, 3))
                + Simd32x4::from([
                    (-(self.group2()[2] * other.group6()[1])
                        + (self.group2()[1] * other.group6()[2])
                        + (self.group2()[0] * other.group1()[3])
                        + (self.group1()[3] * other.group5()[0])
                        + (self.group1()[1] * other.group1()[2])
                        + (self.group1()[0] * other.group5()[3])
                        + (self.group0()[2] * other.group7()[1])
                        - (self.group0()[0] * other[e1])
                        - (self.group0()[1] * other.group7()[2])),
                    ((self.group2()[2] * other.group6()[0]) + (self.group2()[1] * other.group1()[3]) - (self.group2()[0] * other.group6()[2])
                        + (self.group1()[3] * other.group5()[1])
                        + (self.group1()[2] * other.group1()[0])
                        + (self.group1()[1] * other.group5()[3])
                        - (self.group0()[2] * other.group7()[0])
                        + (self.group0()[0] * other.group7()[2])
                        - (self.group0()[1] * other[e1])),
                    ((self.group2()[2] * other.group1()[3]) - (self.group2()[1] * other.group6()[0])
                        + (self.group2()[0] * other.group6()[1])
                        + (self.group1()[3] * other.group5()[2])
                        + (self.group1()[2] * other.group5()[3])
                        + (self.group1()[0] * other.group1()[1])
                        - (self.group0()[2] * other[e1])
                        - (self.group0()[0] * other.group7()[1])
                        + (self.group0()[1] * other.group7()[0])),
                    (-(self.group1()[2] * other.group6()[2])
                        - (self.group1()[1] * other.group6()[1])
                        - (self.group1()[0] * other.group6()[0])
                        - (self.group0()[2] * other.group5()[2])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[1] * other.group5()[1])
                        - (self.group0()[1] * other.group1()[1])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group5()[0])),
                ])),
            // e5
            ((self.group2()[3] * other[e1]) - (self.group2()[2] * other.group5()[2]) + (self.group2()[2] * other.group1()[2]) - (self.group2()[1] * other.group5()[1])
                + (self.group2()[1] * other.group1()[1])
                - (self.group2()[0] * other.group5()[0])
                + (self.group2()[0] * other.group1()[0])
                + (self.group1()[3] * other[e1])
                - (self.group1()[2] * other.group7()[2])
                - (self.group1()[0] * other.group7()[0])
                - (self.group1()[1] * other.group7()[1])),
            // e15, e25, e35, e45
            ((Simd32x4::from(self.group2()[3]) * other.group3())
                - (swizzle!(other.group8(), 1, 2, 0, 2) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[2]]))
                + (swizzle!(self.group2(), 1, 2, 2, 2) * Simd32x4::from([other.group10()[0], other.group10()[2], other.group3()[3], other.group4()[2]]))
                + (swizzle!(self.group2(), 1, 2, 2, 1) * Simd32x4::from([other.group8()[2], other.group8()[0], other.group0()[0], other.group4()[1]]))
                + (swizzle!(self.group2(), 0, 1, 0, 0) * Simd32x4::from([other.group3()[3], other.group3()[3], other.group10()[1], other.group4()[0]]))
                - (swizzle!(self.group1(), 2, 0, 1, 3) * Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group0()[0]]))
                + Simd32x4::from([
                    (-(self.group2()[2] * other.group10()[1])
                        + (self.group2()[0] * other.group0()[0])
                        + (self.group1()[3] * other.group3()[0])
                        + (self.group1()[0] * other.group8()[3])
                        + (self.group1()[1] * other.group3()[2])),
                    ((self.group2()[1] * other.group0()[0]) - (self.group2()[0] * other.group10()[0])
                        + (self.group1()[3] * other.group3()[1])
                        + (self.group1()[2] * other.group3()[0])
                        + (self.group1()[1] * other.group8()[3])),
                    (-(self.group2()[1] * other.group10()[2])
                        + (self.group2()[0] * other.group8()[1])
                        + (self.group1()[3] * other.group3()[2])
                        + (self.group1()[2] * other.group8()[3])
                        + (self.group1()[0] * other.group3()[1])),
                    (-(self.group1()[1] * other.group8()[1])
                        - (self.group1()[0] * other.group8()[0])
                        - (self.group0()[2] * other.group3()[2])
                        - (self.group0()[0] * other.group3()[0])
                        - (self.group0()[1] * other.group3()[1])),
                ])),
            // e41, e42, e43
            ((Simd32x3::from(self.group2()[3]) * other.group4())
                - (Simd32x3::from(self.group1()[3]) * other.group4())
                - (swizzle!(other.group4(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))
                + (swizzle!(other.group4(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                + (Simd32x3::from(other[e35]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group10()[1], other.group8()[0], other.group3()[3]]))
                + (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group8()[1], other.group10()[2], other.group0()[0]]))
                + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group10()[0], other.group0()[0], other.group8()[0]]))
                - (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group8()[2], other.group3()[3], other.group10()[2]]))
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group8()[2], other.group10()[1]]))
                - (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group3()[3], other.group10()[0], other.group8()[1]]))),
            // e415, e425, e435, e321
            ((Simd32x4::from(self.group2()[3]) * other.group5())
                - (swizzle!(self.group2(), 2, 0, 1, 2) * Simd32x4::from([other.group6()[1], other.group6()[2], other.group6()[0], other.group6()[2]]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[1]]))
                - (swizzle!(self.group1(), 2, 0, 1, 2) * Simd32x4::from([other.group5()[1], other.group5()[2], other.group5()[0], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group2()[1] * other.group6()[2])
                        + (self.group2()[0] * other.group1()[3])
                        + (self.group1()[1] * other.group5()[2])
                        + (self.group1()[0] * other.group0()[1])
                        - (self.group0()[2] * other.group7()[1])
                        + (self.group0()[0] * other[e1])
                        + (self.group0()[1] * other.group7()[2])),
                    ((self.group2()[2] * other.group6()[0])
                        + (self.group2()[1] * other.group1()[3])
                        + (self.group1()[2] * other.group5()[0])
                        + (self.group1()[1] * other.group0()[1])
                        + (self.group0()[2] * other.group7()[0])
                        - (self.group0()[0] * other.group7()[2])
                        + (self.group0()[1] * other[e1])),
                    ((self.group2()[2] * other.group1()[3])
                        + (self.group2()[0] * other.group6()[1])
                        + (self.group1()[2] * other.group0()[1])
                        + (self.group1()[0] * other.group5()[1])
                        + (self.group0()[2] * other[e1])
                        + (self.group0()[0] * other.group7()[1])
                        - (self.group0()[1] * other.group7()[0])),
                    (-(self.group2()[1] * other.group6()[1])
                        - (self.group2()[0] * other.group6()[0])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        + (self.group0()[2] * other.group7()[2])
                        + (self.group0()[0] * other.group7()[0])
                        + (self.group0()[1] * other.group7()[1])),
                ])),
            // e423, e431, e412
            ((Simd32x3::from(self.group2()[3]) * other.group6())
                - (Simd32x3::from(self.group1()[3]) * other.group6())
                - (swizzle!(other.group6(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))
                + (swizzle!(other.group6(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group5()[1], other.group1()[2], other.group5()[0]]))
                - (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group1()[1], other.group5()[2], other.group1()[0]]))
                + (swizzle!(self.group0(), 1, 2, 2) * Simd32x3::from([other.group5()[2], other.group5()[0], other.group5()[3]]))
                + (swizzle!(self.group0(), 1, 2, 2) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group0()[1]]))
                + (swizzle!(self.group0(), 0, 1, 0) * Simd32x3::from([other.group0()[1], other.group5()[3], other.group1()[1]]))
                + (swizzle!(self.group0(), 0, 1, 0) * Simd32x3::from([other.group5()[3], other.group0()[1], other.group5()[1]]))),
            // e235, e315, e125
            ((Simd32x3::from(self.group2()[3]) * other.group7()) - (Simd32x3::from(self.group2()[2]) * Simd32x3::from([other.group5()[1], other.group1()[0], other.group5()[3]]))
                + (Simd32x3::from(self.group2()[2]) * Simd32x3::from([other.group1()[1], other.group5()[0], other.group0()[1]]))
                + (Simd32x3::from(self.group2()[1]) * Simd32x3::from([other.group5()[2], other.group0()[1], other.group1()[0]]))
                - (Simd32x3::from(self.group2()[1]) * Simd32x3::from([other.group1()[2], other.group5()[3], other.group5()[0]]))
                - (Simd32x3::from(self.group2()[0]) * Simd32x3::from([other.group5()[3], other.group5()[2], other.group1()[1]]))
                + (Simd32x3::from(self.group2()[0]) * Simd32x3::from([other.group0()[1], other.group1()[2], other.group5()[1]]))
                + (Simd32x3::from(self.group1()[3]) * other.group7())
                - (swizzle!(other.group7(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (swizzle!(other.group7(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(self.group2()[3]) * other.group8())
                - (swizzle!(self.group2(), 1, 2, 2, 2) * Simd32x4::from([other.group4()[2], other.group4()[0], other[e35], other.group10()[0]]))
                - (swizzle!(self.group2(), 0, 1, 0, 2) * Simd32x4::from([other[e35], other[e35], other.group4()[1], other.group8()[2]]))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group10()[2], other.group10()[1], other.group10()[0], other.group3()[2]]))
                - (swizzle!(other.group8(), 1, 2, 0, 1) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[1]]))
                + (swizzle!(self.group1(), 1, 2, 2, 3) * Simd32x4::from([other.group8()[2], other.group8()[0], other.group3()[3], other.group8()[3]]))
                - (swizzle!(other.group3(), 1, 2, 0, 0) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group4()[1])
                        + (self.group1()[0] * other.group3()[3])
                        + (self.group0()[0] * other.group8()[3])
                        + (self.group0()[1] * other.group3()[2])),
                    ((self.group2()[0] * other.group4()[2])
                        + (self.group1()[1] * other.group3()[3])
                        + (self.group0()[2] * other.group3()[0])
                        + (self.group0()[1] * other.group8()[3])),
                    ((self.group2()[1] * other.group4()[0])
                        + (self.group1()[0] * other.group8()[1])
                        + (self.group0()[2] * other.group8()[3])
                        + (self.group0()[0] * other.group3()[1])),
                    (-(self.group2()[1] * other.group10()[1])
                        - (self.group2()[0] * other.group10()[2])
                        - (self.group2()[0] * other.group8()[0])
                        - (self.group1()[1] * other.group3()[1])),
                ])),
            // e1234
            ((self.group2()[3] * other[e35])
                - (self.group1()[3] * other[e35])
                - (self.group1()[2] * other.group4()[2])
                - (self.group1()[1] * other.group4()[1])
                - (self.group1()[0] * other.group4()[0])
                - (self.group0()[2] * other.group10()[0])
                + (self.group0()[2] * other.group8()[2])
                - (self.group0()[1] * other.group10()[1])
                + (self.group0()[1] * other.group8()[1])
                + (self.group0()[0] * other.group8()[0])
                - (self.group0()[0] * other.group10()[2])),
            // e12, e31, e23
            ((Simd32x3::from(self.group2()[3]) * other.group10()) + (Simd32x3::from(other[e35]) * Simd32x3::from([self.group2()[2], self.group2()[1], self.group2()[0]]))
                - (swizzle!(other.group4(), 0, 2, 1) * Simd32x3::from([self.group2()[1], self.group2()[0], self.group2()[2]]))
                + (swizzle!(other.group4(), 1, 0, 2) * Simd32x3::from([self.group2()[0], self.group2()[2], self.group2()[1]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group8()[2], other.group8()[1], other.group8()[0]]))
                + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[2], self.group1()[1], self.group1()[0]]))
                - (swizzle!(other.group10(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[0], self.group1()[2]]))
                + (swizzle!(other.group10(), 1, 2, 0) * Simd32x3::from([self.group1()[0], self.group1()[2], self.group1()[1]]))
                + (swizzle!(self.group0(), 2, 2, 0) * Simd32x3::from([other.group8()[3], other.group3()[0], other.group8()[3]]))
                + (swizzle!(self.group0(), 0, 1, 1) * Simd32x3::from([other.group3()[1], other.group8()[3], other.group3()[2]]))
                - (swizzle!(self.group0(), 1, 0, 2) * Simd32x3::from([other.group3()[0], other.group3()[2], other.group3()[1]]))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       55       82        0
    //    simd3        1        3        0
    //    simd4       30       33        0
    // Totals...
    // yes simd       86      118        0
    //  no simd      178      223        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (-(swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
            // e23, e31, e12, e45
            (-(swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group0(), 0, 1, 2, 2))
                + Simd32x4::from([
                    (self.group0()[0] * other.group0()[3]),
                    (self.group0()[1] * other.group0()[3]),
                    (self.group0()[2] * other.group0()[3]),
                    (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                ])),
            // e15, e25, e35, e1234
            ((swizzle!(other.group0(), 3, 0, 3, 2) * Simd32x4::from([self.group1()[0], self.group2()[2], self.group1()[2], self.group0()[2]]))
                + (swizzle!(other.group0(), 2, 3, 1, 0) * Simd32x4::from([self.group2()[1], self.group1()[1], self.group2()[0], self.group0()[0]]))
                + (Simd32x4::from([-1.0, -1.0, -1.0, 1.0])
                    * swizzle!(other.group0(), 1, 2, 0, 1)
                    * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[1]]))),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(self.group2()[3]) * other.group0())
                - (swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]))
                + (swizzle!(other.group0(), 3, 0, 3, 3) * Simd32x4::from([self.group0()[0], self.group1()[2], self.group0()[2], self.group1()[3]]))
                + Simd32x4::from([
                    (self.group1()[1] * other.group0()[2]),
                    (self.group0()[1] * other.group0()[3]),
                    (self.group1()[0] * other.group0()[1]),
                    (-(self.group2()[1] * other.group0()[1]) - (self.group2()[0] * other.group0()[0])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       96      133        0
    //    simd3        0        1        0
    //    simd4       26       27        0
    // Totals...
    // yes simd      122      161        0
    //  no simd      200      244        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                ((self.group1()[1] * other.group0()[3]) - (self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group1()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group2()[0] * other.group0()[3]) + (self.group0()[0] * other[e2]) + (self.group1()[3] * other.group0()[0])),
                ((self.group2()[1] * other.group0()[3]) + (self.group0()[1] * other[e2]) + (self.group1()[3] * other.group0()[1])),
                ((self.group2()[2] * other.group0()[3]) + (self.group0()[2] * other[e2]) + (self.group1()[3] * other.group0()[2])),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            ((swizzle!(self.group2(), 2, 0, 1, 3) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other[e2]]))
                + (self.group1() * Simd32x4::from(other[e2]))
                + Simd32x4::from([
                    ((self.group2()[1] * other.group0()[2]) * -1.0),
                    ((self.group2()[2] * other.group0()[0]) * -1.0),
                    ((self.group2()[0] * other.group0()[1]) * -1.0),
                    ((self.group2()[2] * other.group0()[2]) + (self.group2()[1] * other.group0()[1]) + (self.group2()[0] * other.group0()[0])),
                ])),
            // e1, e2, e3, e4
            ((Simd32x4::from(self.group2()[3]) * other.group0()) - (swizzle!(self.group1(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))
                + Simd32x4::from([
                    ((self.group2()[0] * other.group0()[3]) - (self.group0()[0] * other[e2]) + (self.group1()[1] * other.group0()[2])),
                    ((self.group2()[1] * other.group0()[3]) + (self.group1()[2] * other.group0()[0]) - (self.group0()[1] * other[e2])),
                    ((self.group2()[2] * other.group0()[3]) - (self.group0()[2] * other[e2]) + (self.group1()[0] * other.group0()[1])),
                    (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       60       82        0
    //    simd3        0        1        0
    //    simd4       25       29        0
    // Totals...
    // yes simd       85      112        0
    //  no simd      160      201        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(other[scalar]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]])),
            // e23, e31, e12, e45
            (self.group1() * Simd32x4::from(other[scalar]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e15, e25, e35, e1234
            Simd32x4::from([(self.group2()[0] * other[scalar]), (self.group2()[1] * other[scalar]), (self.group2()[2] * other[scalar]), 0.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(0.0),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       59       89        0
    //    simd3        2        4        0
    //    simd4       31       34        0
    // Totals...
    // yes simd       92      127        0
    //  no simd      189      237        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from(other[e4315]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
            // e23, e31, e12, e45
            (-(swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group0(), 0, 1, 2, 2))
                + Simd32x4::from([
                    ((self.group2()[0] * other[e4315]) + (self.group0()[0] * other.group0()[3])),
                    ((self.group2()[1] * other[e4315]) + (self.group0()[1] * other.group0()[3])),
                    ((self.group2()[2] * other[e4315]) + (self.group0()[2] * other.group0()[3])),
                    (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                ])),
            // e15, e25, e35, e1234
            ((swizzle!(other.group0(), 3, 0, 3, 2) * Simd32x4::from([self.group1()[0], self.group2()[2], self.group1()[2], self.group0()[2]]))
                + (swizzle!(other.group0(), 2, 3, 1, 0) * Simd32x4::from([self.group2()[1], self.group1()[1], self.group2()[0], self.group0()[0]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group0()[1]) * -1.0),
                    ((self.group2()[0] * other.group0()[2]) * -1.0),
                    ((self.group2()[1] * other.group0()[0]) * -1.0),
                    ((self.group2()[3] * other[e4315]) - (self.group1()[3] * other[e4315]) + (self.group0()[1] * other.group0()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(self.group2()[3]) * other.group0())
                - (swizzle!(self.group2(), 0, 1, 2, 2) * Simd32x4::from([other[e4315], other[e4315], other[e4315], other.group0()[2]]))
                - (swizzle!(other.group0(), 1, 2, 0, 1) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[1]]))
                + (swizzle!(other.group0(), 3, 0, 3, 3) * Simd32x4::from([self.group0()[0], self.group1()[2], self.group0()[2], self.group1()[3]]))
                + (Simd32x4::from([1.0, 1.0, 1.0, -1.0])
                    * swizzle!(other.group0(), 2, 3, 1, 0)
                    * Simd32x4::from([self.group1()[1], self.group0()[1], self.group1()[0], self.group2()[0]]))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      140      175        0
    //    simd3        0        1        0
    //    simd4       45       46        0
    // Totals...
    // yes simd      185      222        0
    //  no simd      320      362        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(self.group2()[3]) * other.group0())
                - (swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[2]]))
                - (swizzle!(other.group0(), 1, 2, 0, 1) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[1]]))
                + (swizzle!(self.group1(), 1, 2, 2, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group3()[3], other.group1()[3]]))
                - (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group3()[3]) - (self.group0()[2] * other.group3()[1])
                        + (self.group0()[1] * other.group3()[2])
                        + (self.group0()[1] * other.group1()[2])
                        + (self.group0()[0] * other.group0()[3])
                        + (self.group0()[0] * other.group1()[3])),
                    ((self.group1()[1] * other.group3()[3])
                        + (self.group0()[2] * other.group3()[0])
                        + (self.group0()[2] * other.group1()[0])
                        + (self.group0()[1] * other.group1()[3])
                        + (self.group0()[1] * other.group0()[3])
                        - (self.group0()[0] * other.group3()[2])),
                    ((self.group1()[0] * other.group0()[1]) + (self.group0()[2] * other.group1()[3]) + (self.group0()[2] * other.group0()[3])
                        - (self.group0()[1] * other.group3()[0])
                        + (self.group0()[0] * other.group1()[1])
                        + (self.group0()[0] * other.group3()[1])),
                    (-(self.group2()[0] * other.group0()[0])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e321
            ((Simd32x4::from(self.group2()[3]) * other.group1()) - (swizzle!(self.group2(), 2, 0, 1, 2) * swizzle!(other.group0(), 1, 2, 0, 2))
                + (swizzle!(other.group0(), 2, 0, 1, 3) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group1()[3]]))
                - (swizzle!(self.group1(), 2, 0, 1, 2) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[2]]))
                + (swizzle!(other.group2(), 3, 0, 3, 2) * Simd32x4::from([self.group0()[0], self.group0()[2], self.group0()[2], self.group0()[2]]))
                + (swizzle!(other.group2(), 2, 3, 1, 0) * Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[0], self.group0()[0]]))
                + Simd32x4::from([
                    ((self.group2()[0] * other.group3()[3])
                        + (self.group1()[3] * other.group3()[0])
                        + (self.group1()[1] * other.group1()[2])
                        + (self.group1()[0] * other.group0()[3])
                        - (self.group0()[2] * other.group2()[1])),
                    ((self.group2()[1] * other.group3()[3])
                        + (self.group1()[3] * other.group3()[1])
                        + (self.group1()[2] * other.group1()[0])
                        + (self.group1()[1] * other.group0()[3])
                        - (self.group0()[0] * other.group2()[2])),
                    ((self.group2()[2] * other.group3()[3])
                        + (self.group1()[3] * other.group3()[2])
                        + (self.group1()[2] * other.group0()[3])
                        + (self.group1()[0] * other.group1()[1])
                        - (self.group0()[1] * other.group2()[0])),
                    (-(self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[1] * other.group3()[1])
                        - (self.group1()[0] * other.group3()[0])
                        + (self.group0()[1] * other.group2()[1])),
                ])),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group2()[3]) * other.group2())
                + (Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group0()[3], other.group3()[2]]))
                - (Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[3], other.group1()[2]]))
                - (Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group3()[2], other.group1()[3], other.group1()[0], other.group1()[1]]))
                + (Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group1()[2], other.group0()[3], other.group3()[0], other.group3()[1]]))
                - (Simd32x4::from(self.group2()[0]) * Simd32x4::from([other.group1()[3], other.group1()[2], other.group3()[1], other.group1()[0]]))
                + (Simd32x4::from(self.group2()[0]) * Simd32x4::from([other.group0()[3], other.group3()[2], other.group1()[1], other.group3()[0]]))
                + (Simd32x4::from(self.group1()[3]) * other.group2())
                - (swizzle!(self.group1(), 2, 0, 1, 2) * swizzle!(other.group2(), 1, 2, 0, 2))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group2()[3]) + (self.group1()[1] * other.group2()[2])),
                    ((self.group1()[2] * other.group2()[0]) + (self.group1()[1] * other.group2()[3])),
                    ((self.group1()[2] * other.group2()[3]) + (self.group1()[0] * other.group2()[1])),
                    (-(self.group1()[0] * other.group2()[0]) - (self.group1()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            ((Simd32x4::from(self.group2()[3]) * other.group3())
                - (swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[2]]))
                - (swizzle!(self.group1(), 2, 0, 1, 3) * swizzle!(other.group3(), 1, 2, 0, 3))
                + Simd32x4::from([
                    ((self.group2()[1] * other.group0()[2])
                        + (self.group2()[0] * other.group3()[3])
                        + (self.group1()[3] * other.group1()[0])
                        + (self.group1()[1] * other.group3()[2])
                        + (self.group1()[0] * other.group1()[3])
                        + (self.group0()[2] * other.group2()[1])
                        - (self.group0()[0] * other.group2()[3])
                        - (self.group0()[1] * other.group2()[2])),
                    ((self.group2()[2] * other.group0()[0])
                        + (self.group2()[1] * other.group3()[3])
                        + (self.group1()[3] * other.group1()[1])
                        + (self.group1()[2] * other.group3()[0])
                        + (self.group1()[1] * other.group1()[3])
                        - (self.group0()[2] * other.group2()[0])
                        + (self.group0()[0] * other.group2()[2])
                        - (self.group0()[1] * other.group2()[3])),
                    ((self.group2()[2] * other.group3()[3])
                        + (self.group2()[0] * other.group0()[1])
                        + (self.group1()[3] * other.group1()[2])
                        + (self.group1()[2] * other.group1()[3])
                        + (self.group1()[0] * other.group3()[1])
                        - (self.group0()[2] * other.group2()[3])
                        - (self.group0()[0] * other.group2()[1])
                        + (self.group0()[1] * other.group2()[0])),
                    (-(self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group3()[2])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[1] * other.group3()[1])
                        - (self.group0()[1] * other.group1()[1])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group3()[0])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      116      151        0
    //    simd3        0        1        0
    //    simd4       51       52        0
    // Totals...
    // yes simd      167      204        0
    //  no simd      320      362        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((Simd32x4::from(self.group2()[3]) * other.group0())
                - (swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[2]]))
                - (swizzle!(other.group0(), 1, 2, 0, 1) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[1]]))
                - (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[3], other.group2()[2]]))
                - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group3()[2], other.group1()[3], other.group1()[0], other.group2()[1]]))
                - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group1()[2], other.group3()[1], other.group2()[0]]))
                + Simd32x4::from([
                    ((self.group1()[1] * other.group0()[2])
                        + (self.group1()[0] * other.group2()[3])
                        + (self.group0()[2] * other.group3()[1])
                        + (self.group0()[1] * other.group1()[2])
                        + (self.group0()[0] * other.group0()[3])),
                    ((self.group1()[2] * other.group0()[0])
                        + (self.group1()[1] * other.group2()[3])
                        + (self.group0()[2] * other.group1()[0])
                        + (self.group0()[1] * other.group0()[3])
                        + (self.group0()[0] * other.group3()[2])),
                    ((self.group1()[2] * other.group2()[3])
                        + (self.group1()[0] * other.group0()[1])
                        + (self.group0()[2] * other.group0()[3])
                        + (self.group0()[1] * other.group3()[0])
                        + (self.group0()[0] * other.group1()[1])),
                    (-(self.group2()[0] * other.group0()[0])
                        - (self.group1()[3] * other.group1()[3])
                        - (self.group1()[2] * other.group1()[2])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])),
                ])),
            // e23, e31, e12, e45
            ((Simd32x4::from(self.group2()[3]) * other.group1())
                - (swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]))
                + (swizzle!(self.group2(), 1, 2, 2, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group2()[3], other.group0()[2]]))
                + (swizzle!(self.group2(), 0, 1, 0, 1) * Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[1], other.group0()[1]]))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group3(), 0, 1, 2, 2))
                - (swizzle!(self.group1(), 2, 0, 1, 1) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[1]]))
                + (swizzle!(other.group0(), 3, 3, 3, 0) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[0]]))
                - (swizzle!(other.group2(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group1()[1] * other.group1()[2]) + (self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group2()[2])),
                    ((self.group1()[2] * other.group1()[0]) + (self.group0()[2] * other.group2()[0]) + (self.group0()[1] * other.group3()[3])),
                    ((self.group1()[0] * other.group1()[1]) + (self.group0()[2] * other.group3()[3]) + (self.group0()[0] * other.group2()[1])),
                    (-(self.group1()[0] * other.group3()[0]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
            // e15, e25, e35, e1234
            ((Simd32x4::from(self.group2()[3]) * other.group2())
                - (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[2]]))
                + (swizzle!(other.group3(), 2, 0, 1, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[2]]))
                - (swizzle!(self.group1(), 2, 0, 1, 3) * swizzle!(other.group2(), 1, 2, 0, 3))
                + (swizzle!(other.group3(), 3, 3, 3, 1) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[1]]))
                + Simd32x4::from([
                    (-(self.group2()[2] * other.group3()[1])
                        + (self.group2()[1] * other.group1()[2])
                        + (self.group2()[0] * other.group1()[3])
                        + (self.group2()[0] * other.group0()[3])
                        + (self.group1()[3] * other.group2()[0])
                        + (self.group1()[1] * other.group2()[2])),
                    ((self.group2()[2] * other.group1()[0]) + (self.group2()[1] * other.group1()[3]) + (self.group2()[1] * other.group0()[3])
                        - (self.group2()[0] * other.group3()[2])
                        + (self.group1()[3] * other.group2()[1])
                        + (self.group1()[2] * other.group2()[0])),
                    ((self.group2()[2] * other.group1()[3]) + (self.group2()[2] * other.group0()[3]) - (self.group2()[1] * other.group3()[0])
                        + (self.group2()[0] * other.group1()[1])
                        + (self.group1()[3] * other.group2()[2])
                        + (self.group1()[0] * other.group2()[1])),
                    (-(self.group1()[2] * other.group0()[2])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group1()[1])
                        - (self.group0()[0] * other.group1()[0])
                        + (self.group0()[0] * other.group3()[0])),
                ])),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(self.group2()[3]) * other.group3())
                - (swizzle!(self.group2(), 1, 2, 2, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group2()[3], other.group3()[2]]))
                - (swizzle!(self.group2(), 0, 1, 0, 2) * Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[1], other.group1()[2]]))
                - (swizzle!(other.group1(), 0, 1, 2, 1) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[1]]))
                - (swizzle!(other.group3(), 1, 2, 0, 1) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[1]]))
                + (swizzle!(self.group1(), 1, 2, 2, 3) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[3], other.group3()[3]]))
                - (swizzle!(other.group2(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group0()[1])
                        + (self.group1()[0] * other.group1()[3])
                        + (self.group0()[0] * other.group3()[3])
                        + (self.group0()[1] * other.group2()[2])),
                    ((self.group2()[0] * other.group0()[2])
                        + (self.group1()[1] * other.group1()[3])
                        + (self.group0()[2] * other.group2()[0])
                        + (self.group0()[1] * other.group3()[3])),
                    ((self.group2()[1] * other.group0()[0])
                        + (self.group1()[0] * other.group3()[1])
                        + (self.group0()[2] * other.group3()[3])
                        + (self.group0()[0] * other.group2()[1])),
                    (-(self.group2()[0] * other.group3()[0])
                        - (self.group2()[0] * other.group1()[0])
                        - (self.group1()[0] * other.group2()[0])
                        - (self.group1()[1] * other.group2()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl InfixAntiSandwich for Dipole {}
impl AntiSandwich<AntiScalar> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       48       64        0
    //    simd3        0        4        0
    //    simd4        9       11        0
    // Totals...
    // yes simd       57       79        0
    //  no simd       84      120        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = Dipole::from_groups(
            // e41, e42, e43
            (self.group0() * Simd32x3::from(other[e12345])),
            // e23, e31, e12, e45
            (self.group1() * Simd32x4::from(other[e12345])),
            // e15, e25, e35
            (self.group2() * Simd32x3::from(other[e12345])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      112      144        0
    //    simd3        0        2        0
    //    simd4       29       30        0
    // Totals...
    // yes simd      141      176        0
    //  no simd      228      270        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(swizzle!(self.group1(), 2, 0, 1, 3) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]))
                - (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group0()[0])
                        + (self.group1()[1] * other.group0()[2])
                        + (self.group0()[0] * other.group1()[3])
                        + (self.group0()[1] * other.group1()[2])),
                    ((self.group1()[3] * other.group0()[1])
                        + (self.group1()[2] * other.group0()[0])
                        + (self.group0()[2] * other.group1()[0])
                        + (self.group0()[1] * other.group1()[3])),
                    ((self.group1()[3] * other.group0()[2])
                        + (self.group1()[0] * other.group0()[1])
                        + (self.group0()[2] * other.group1()[3])
                        + (self.group0()[0] * other.group1()[1])),
                    (-(self.group2()[2] * other.group0()[2])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group2()[2] * other.group0()[1]) + (self.group2()[1] * other.group0()[2]) - (self.group1()[2] * other.group1()[1])
                    + (self.group1()[1] * other.group1()[2])
                    + (self.group0()[1] * other.group2()[2])
                    - (self.group0()[2] * other.group2()[1])),
                ((self.group2()[2] * other.group0()[0]) - (self.group2()[0] * other.group0()[2]) + (self.group1()[2] * other.group1()[0])
                    - (self.group1()[0] * other.group1()[2])
                    - (self.group0()[0] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[0])),
                (-(self.group2()[1] * other.group0()[0]) + (self.group2()[0] * other.group0()[1]) - (self.group1()[1] * other.group1()[0])
                    + (self.group1()[0] * other.group1()[1])
                    + (self.group0()[0] * other.group2()[1])
                    - (self.group0()[1] * other.group2()[0])),
                ((self.group2()[2] * other.group0()[2]) + (self.group2()[1] * other.group0()[1]) + (self.group2()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])),
            ]),
            // e15, e25, e35, e1234
            (-(swizzle!(other.group1(), 1, 3, 3, 2) * Simd32x4::from([self.group2()[2], self.group2()[1], self.group2()[2], self.group0()[2]]))
                - (swizzle!(other.group1(), 3, 2, 0, 0) * Simd32x4::from([self.group2()[0], self.group2()[0], self.group2()[1], self.group0()[0]]))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[2]]))
                - (swizzle!(self.group1(), 2, 0, 1, 1) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[1]]))
                + Simd32x4::from([
                    ((self.group2()[1] * other.group1()[2]) + (self.group1()[1] * other.group2()[2])),
                    ((self.group2()[2] * other.group1()[0]) + (self.group1()[2] * other.group2()[0])),
                    ((self.group2()[0] * other.group1()[1]) + (self.group1()[0] * other.group2()[1])),
                    (-(self.group1()[0] * other.group0()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(other.group1(), 3, 3, 3, 2) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[2]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group0()[1]) - (self.group2()[1] * other.group0()[2])
                        + (self.group1()[3] * other.group1()[0])
                        + (self.group0()[1] * other.group2()[2])
                        - (self.group0()[2] * other.group2()[1])),
                    (-(self.group2()[2] * other.group0()[0]) + (self.group2()[0] * other.group0()[2]) + (self.group1()[3] * other.group1()[1])
                        - (self.group0()[0] * other.group2()[2])
                        + (self.group0()[2] * other.group2()[0])),
                    ((self.group2()[1] * other.group0()[0]) - (self.group2()[0] * other.group0()[1])
                        + (self.group1()[3] * other.group1()[2])
                        + (self.group0()[0] * other.group2()[1])
                        - (self.group0()[1] * other.group2()[0])),
                    (-(self.group2()[1] * other.group1()[1])
                        - (self.group2()[0] * other.group1()[0])
                        - (self.group1()[2] * other.group2()[2])
                        - (self.group1()[0] * other.group2()[0])
                        - (self.group1()[1] * other.group2()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      110      142        0
    //    simd3        0        2        0
    //    simd4       32       33        0
    // Totals...
    // yes simd      142      177        0
    //  no simd      238      280        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(swizzle!(self.group1(), 2, 0, 1, 3) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]))
                - (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group0()[0])
                        + (self.group1()[1] * other.group0()[2])
                        + (self.group0()[1] * other.group1()[2])
                        + (self.group0()[0] * other.group1()[3])
                        + (self.group0()[0] * other.group2()[3])),
                    ((self.group1()[3] * other.group0()[1])
                        + (self.group1()[2] * other.group0()[0])
                        + (self.group0()[2] * other.group1()[0])
                        + (self.group0()[1] * other.group2()[3])
                        + (self.group0()[1] * other.group1()[3])),
                    ((self.group1()[3] * other.group0()[2])
                        + (self.group1()[0] * other.group0()[1])
                        + (self.group0()[2] * other.group2()[3])
                        + (self.group0()[2] * other.group1()[3])
                        + (self.group0()[0] * other.group1()[1])),
                    (-(self.group2()[2] * other.group0()[2])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e23, e31, e12, e45
            ((swizzle!(self.group1(), 1, 2, 2, 3) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group2()[3], other.group2()[3]]))
                - (swizzle!(other.group2(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group2()[2] * other.group0()[1]) + (self.group2()[1] * other.group0()[2]) - (self.group1()[2] * other.group1()[1])
                        + (self.group1()[0] * other.group2()[3])
                        + (self.group0()[1] * other.group2()[2])),
                    ((self.group2()[2] * other.group0()[0]) - (self.group2()[0] * other.group0()[2]) + (self.group1()[1] * other.group2()[3])
                        - (self.group1()[0] * other.group1()[2])
                        + (self.group0()[2] * other.group2()[0])),
                    (-(self.group2()[1] * other.group0()[0]) + (self.group2()[0] * other.group0()[1]) - (self.group1()[1] * other.group1()[0])
                        + (self.group1()[0] * other.group1()[1])
                        + (self.group0()[0] * other.group2()[1])),
                    ((self.group2()[2] * other.group0()[2]) + (self.group2()[1] * other.group0()[1]) + (self.group2()[0] * other.group0()[0])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e15, e25, e35, e1234
            (-(swizzle!(other.group1(), 1, 3, 3, 2) * Simd32x4::from([self.group2()[2], self.group2()[1], self.group2()[2], self.group0()[2]]))
                - (swizzle!(other.group1(), 3, 2, 0, 0) * Simd32x4::from([self.group2()[0], self.group2()[0], self.group2()[1], self.group0()[0]]))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[2]]))
                - (swizzle!(self.group1(), 2, 0, 1, 1) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[1]]))
                + Simd32x4::from([
                    ((self.group2()[1] * other.group1()[2]) + (self.group2()[0] * other.group2()[3]) + (self.group1()[1] * other.group2()[2])),
                    ((self.group2()[2] * other.group1()[0]) + (self.group2()[1] * other.group2()[3]) + (self.group1()[2] * other.group2()[0])),
                    ((self.group2()[2] * other.group2()[3]) + (self.group2()[0] * other.group1()[1]) + (self.group1()[0] * other.group2()[1])),
                    (-(self.group1()[0] * other.group0()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(other.group1(), 3, 3, 3, 2) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[2]]))
                - (swizzle!(other.group2(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group0()[1]) - (self.group2()[1] * other.group0()[2])
                        + (self.group1()[3] * other.group1()[0])
                        + (self.group0()[1] * other.group2()[2])),
                    (-(self.group2()[2] * other.group0()[0])
                        + (self.group2()[0] * other.group0()[2])
                        + (self.group1()[3] * other.group1()[1])
                        + (self.group0()[2] * other.group2()[0])),
                    ((self.group2()[1] * other.group0()[0]) - (self.group2()[0] * other.group0()[1])
                        + (self.group1()[3] * other.group1()[2])
                        + (self.group0()[0] * other.group2()[1])),
                    (-(self.group2()[1] * other.group1()[1])
                        - (self.group2()[0] * other.group1()[0])
                        - (self.group1()[0] * other.group2()[0])
                        - (self.group1()[1] * other.group2()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      108      140        0
    //    simd3        0        2        0
    //    simd4       30       31        0
    // Totals...
    // yes simd      138      173        0
    //  no simd      228      270        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (-(Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (swizzle!(self.group1(), 2, 0, 1, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[2]]))
                + (swizzle!(other.group1(), 1, 2, 3, 1) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[2], self.group1()[1]]))
                + (swizzle!(other.group1(), 3, 3, 0, 0) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[1], self.group1()[0]]))
                + Simd32x4::from([
                    (-(self.group1()[1] * other.group0()[2]) - (self.group0()[1] * other.group1()[2])),
                    (-(self.group1()[2] * other.group0()[0]) - (self.group0()[2] * other.group1()[0])),
                    (-(self.group1()[0] * other.group0()[1]) - (self.group0()[0] * other.group1()[1])),
                    ((self.group2()[2] * other.group0()[2])
                        + (self.group2()[1] * other.group0()[1])
                        + (self.group2()[0] * other.group0()[0])
                        + (self.group0()[2] * other.group2()[2])
                        + (self.group0()[0] * other.group2()[0])
                        + (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group2()[2] * other.group0()[1]) - (self.group2()[1] * other.group0()[2]) + (self.group1()[2] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[2])
                    - (self.group0()[1] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[1])),
                (-(self.group2()[2] * other.group0()[0]) + (self.group2()[0] * other.group0()[2]) - (self.group1()[2] * other.group1()[0])
                    + (self.group1()[0] * other.group1()[2])
                    + (self.group0()[0] * other.group2()[2])
                    - (self.group0()[2] * other.group2()[0])),
                ((self.group2()[1] * other.group0()[0]) - (self.group2()[0] * other.group0()[1]) + (self.group1()[1] * other.group1()[0])
                    - (self.group1()[0] * other.group1()[1])
                    - (self.group0()[0] * other.group2()[1])
                    + (self.group0()[1] * other.group2()[0])),
                ((self.group2()[2] * other.group0()[2]) + (self.group2()[1] * other.group0()[1]) + (self.group2()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])),
            ]),
            // e235, e315, e125, e5
            ((swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group2()[2]]))
                + (swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group2()[2]]))
                + (swizzle!(self.group1(), 2, 0, 1, 0) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group2()[0]]))
                + Simd32x4::from([
                    (-(self.group2()[1] * other.group1()[2]) - (self.group2()[0] * other.group1()[3]) - (self.group1()[1] * other.group2()[2])),
                    (-(self.group2()[2] * other.group1()[0]) - (self.group2()[1] * other.group1()[3]) - (self.group1()[2] * other.group2()[0])),
                    (-(self.group2()[2] * other.group1()[3]) - (self.group2()[0] * other.group1()[1]) - (self.group1()[0] * other.group2()[1])),
                    ((self.group2()[1] * other.group1()[1]) + (self.group2()[0] * other.group1()[0]) + (self.group1()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            ((swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]))
                + (swizzle!(self.group1(), 0, 1, 2, 1) * Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[1]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group0()[1]) - (self.group2()[1] * other.group0()[2]) + (self.group0()[1] * other.group2()[2])
                        - (self.group0()[2] * other.group2()[1])),
                    (-(self.group2()[2] * other.group0()[0]) + (self.group2()[0] * other.group0()[2]) - (self.group0()[0] * other.group2()[2])
                        + (self.group0()[2] * other.group2()[0])),
                    ((self.group2()[1] * other.group0()[0]) - (self.group2()[0] * other.group0()[1]) + (self.group0()[0] * other.group2()[1])
                        - (self.group0()[1] * other.group2()[0])),
                    ((self.group1()[0] * other.group0()[0])
                        + (self.group0()[2] * other.group1()[2])
                        + (self.group0()[0] * other.group1()[0])
                        + (self.group0()[1] * other.group1()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      118      150        0
    //    simd3        0        2        0
    //    simd4       40       41        0
    // Totals...
    // yes simd      158      193        0
    //  no simd      278      320        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (-(Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (swizzle!(self.group1(), 2, 0, 1, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[2]]))
                + (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[3], other.group2()[2]]))
                + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group3()[2], other.group1()[3], other.group1()[0], other.group2()[1]]))
                + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group1()[2], other.group3()[1], other.group2()[0]]))
                + Simd32x4::from([
                    (-(self.group1()[1] * other.group0()[2])
                        - (self.group1()[0] * other.group2()[3])
                        - (self.group0()[2] * other.group3()[1])
                        - (self.group0()[1] * other.group1()[2])),
                    (-(self.group1()[2] * other.group0()[0])
                        - (self.group1()[1] * other.group2()[3])
                        - (self.group0()[2] * other.group1()[0])
                        - (self.group0()[0] * other.group3()[2])),
                    (-(self.group1()[2] * other.group2()[3])
                        - (self.group1()[0] * other.group0()[1])
                        - (self.group0()[1] * other.group3()[0])
                        - (self.group0()[0] * other.group1()[1])),
                    ((self.group2()[2] * other.group0()[2])
                        + (self.group2()[1] * other.group0()[1])
                        + (self.group2()[0] * other.group0()[0])
                        + (self.group1()[1] * other.group1()[1])
                        + (self.group1()[0] * other.group1()[0])),
                ])),
            // e415, e425, e435, e321
            (-(swizzle!(other.group2(), 3, 3, 3, 2) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[2]]))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group3(), 0, 1, 2, 2))
                - (swizzle!(self.group1(), 1, 2, 0, 1) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group3()[1]]))
                - (swizzle!(other.group3(), 3, 3, 3, 0) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]))
                - (swizzle!(other.group2(), 2, 0, 1, 0) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group0()[1]) - (self.group2()[1] * other.group0()[2])
                        + (self.group1()[2] * other.group1()[1])
                        + (self.group0()[2] * other.group2()[1])),
                    (-(self.group2()[2] * other.group0()[0])
                        + (self.group2()[0] * other.group0()[2])
                        + (self.group1()[0] * other.group1()[2])
                        + (self.group0()[0] * other.group2()[2])),
                    ((self.group2()[1] * other.group0()[0]) - (self.group2()[0] * other.group0()[1])
                        + (self.group1()[1] * other.group1()[0])
                        + (self.group0()[1] * other.group2()[0])),
                    ((self.group2()[2] * other.group0()[2]) + (self.group2()[1] * other.group0()[1]) + (self.group2()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e235, e315, e125, e5
            ((swizzle!(other.group3(), 1, 2, 0, 2) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group2()[2]]))
                + (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group2()[2]]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                + (swizzle!(self.group1(), 2, 0, 1, 2) * swizzle!(other.group2(), 1, 2, 0, 2))
                + Simd32x4::from([
                    (-(self.group2()[1] * other.group3()[2])
                        - (self.group2()[1] * other.group1()[2])
                        - (self.group2()[0] * other.group1()[3])
                        - (self.group1()[0] * other.group3()[3])
                        - (self.group1()[1] * other.group2()[2])),
                    (-(self.group2()[2] * other.group3()[0])
                        - (self.group2()[2] * other.group1()[0])
                        - (self.group2()[1] * other.group1()[3])
                        - (self.group1()[2] * other.group2()[0])
                        - (self.group1()[1] * other.group3()[3])),
                    (-(self.group2()[2] * other.group1()[3])
                        - (self.group2()[0] * other.group3()[1])
                        - (self.group2()[0] * other.group1()[1])
                        - (self.group1()[2] * other.group3()[3])
                        - (self.group1()[0] * other.group2()[1])),
                    ((self.group2()[1] * other.group3()[1])
                        + (self.group2()[1] * other.group1()[1])
                        + (self.group2()[0] * other.group3()[0])
                        + (self.group2()[0] * other.group1()[0])
                        + (self.group1()[0] * other.group2()[0])
                        + (self.group1()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            (-(Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                + (swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]))
                - (swizzle!(other.group3(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[2]]))
                + (swizzle!(self.group1(), 1, 2, 2, 1) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[3], other.group0()[1]]))
                + (swizzle!(self.group1(), 0, 1, 0, 0) * Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group0()[0]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group0()[1]) - (self.group2()[1] * other.group0()[2]) - (self.group0()[2] * other.group2()[1])
                        + (self.group0()[0] * other.group3()[3])
                        + (self.group0()[1] * other.group2()[2])),
                    (-(self.group2()[2] * other.group0()[0]) + (self.group2()[0] * other.group0()[2]) + (self.group0()[2] * other.group2()[0])
                        - (self.group0()[0] * other.group2()[2])
                        + (self.group0()[1] * other.group3()[3])),
                    ((self.group2()[1] * other.group0()[0]) - (self.group2()[0] * other.group0()[1])
                        + (self.group0()[2] * other.group3()[3])
                        + (self.group0()[0] * other.group2()[1])
                        - (self.group0()[1] * other.group2()[0])),
                    ((self.group0()[2] * other.group1()[2]) - (self.group0()[1] * other.group3()[1])
                        + (self.group0()[1] * other.group1()[1])
                        + (self.group0()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group3()[0])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       68       91        0
    //    simd3        0        3        0
    //    simd4       18       21        0
    // Totals...
    // yes simd       86      115        0
    //  no simd      140      184        0
    fn anti_sandwich(self, other: DualNum) -> Self::Output {
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (self.group0() * Simd32x3::from(other.group0()[1])),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group1()[0] * other.group0()[1])),
                ((self.group0()[1] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[0]) + (self.group1()[2] * other.group0()[1])),
                (self.group1()[3] * other.group0()[1]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[0]) + (self.group2()[0] * other.group0()[1])),
                ((self.group1()[1] * other.group0()[0]) + (self.group2()[1] * other.group0()[1])),
                ((self.group1()[2] * other.group0()[0]) + (self.group2()[2] * other.group0()[1])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       73      104        0
    //    simd3        0        2        0
    //    simd4       24       25        0
    // Totals...
    // yes simd       97      131        0
    //  no simd      169      210        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group1()[3] * other.group0()[3])
                    + (self.group0()[2] * other.group0()[2])
                    + (self.group0()[0] * other.group0()[0])
                    + (self.group0()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435, e321
            (-(swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[2]]))
                + Simd32x4::from([
                    (self.group0()[2] * other.group0()[1]),
                    (self.group0()[0] * other.group0()[2]),
                    (self.group0()[1] * other.group0()[0]),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            ((swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group0(), 0, 1, 2, 2))
                + (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))
                + Simd32x4::from([
                    (-(self.group2()[0] * other.group0()[3]) - (self.group1()[1] * other.group0()[2])),
                    (-(self.group2()[1] * other.group0()[3]) - (self.group1()[2] * other.group0()[0])),
                    (-(self.group2()[2] * other.group0()[3]) - (self.group1()[0] * other.group0()[1])),
                    (self.group1()[1] * other.group0()[1]),
                ])),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                ((self.group1()[1] * other.group0()[3]) - (self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group1()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       92      124        0
    //    simd3        0        2        0
    //    simd4       29       30        0
    // Totals...
    // yes simd      121      156        0
    //  no simd      208      250        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((swizzle!(other.group0(), 3, 3, 3, 2) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group0()[2] * other.group1()[1]) + (self.group0()[1] * other.group1()[2])),
                    ((self.group0()[2] * other.group1()[0]) - (self.group0()[0] * other.group1()[2])),
                    ((self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                    (-(self.group1()[3] * other.group0()[3]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
            // e415, e425, e435, e321
            (-(swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group1(), 0, 1, 2, 2))
                - (swizzle!(other.group1(), 3, 3, 3, 1) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]))
                - (swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[2]]))
                + Simd32x4::from([
                    (self.group0()[2] * other.group0()[1]),
                    (self.group0()[0] * other.group0()[2]),
                    (self.group0()[1] * other.group0()[0]),
                    (-(self.group1()[0] * other.group1()[0]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            ((swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group2()[2]]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (swizzle!(self.group1(), 2, 0, 1, 2) * swizzle!(other.group0(), 1, 2, 0, 2))
                + Simd32x4::from([
                    (-(self.group2()[1] * other.group1()[2])
                        - (self.group2()[0] * other.group0()[3])
                        - (self.group1()[0] * other.group1()[3])
                        - (self.group1()[1] * other.group0()[2])),
                    (-(self.group2()[2] * other.group1()[0])
                        - (self.group2()[1] * other.group0()[3])
                        - (self.group1()[2] * other.group0()[0])
                        - (self.group1()[1] * other.group1()[3])),
                    (-(self.group2()[2] * other.group0()[3])
                        - (self.group2()[0] * other.group1()[1])
                        - (self.group1()[2] * other.group1()[3])
                        - (self.group1()[0] * other.group0()[1])),
                    ((self.group2()[1] * other.group1()[1])
                        + (self.group2()[0] * other.group1()[0])
                        + (self.group1()[0] * other.group0()[0])
                        + (self.group1()[1] * other.group0()[1])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group1()[1] * other.group1()[2]) + (self.group1()[0] * other.group0()[3]) - (self.group0()[2] * other.group0()[1])
                        + (self.group0()[0] * other.group1()[3])
                        + (self.group0()[1] * other.group0()[2])),
                    ((self.group1()[2] * other.group1()[0]) + (self.group1()[1] * other.group0()[3]) + (self.group0()[2] * other.group0()[0])
                        - (self.group0()[0] * other.group0()[2])
                        + (self.group0()[1] * other.group1()[3])),
                    ((self.group1()[2] * other.group0()[3])
                        + (self.group1()[0] * other.group1()[1])
                        + (self.group0()[2] * other.group1()[3])
                        + (self.group0()[0] * other.group0()[1])
                        - (self.group0()[1] * other.group0()[0])),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      100      132        0
    //    simd3        0        2        0
    //    simd4       22       23        0
    // Totals...
    // yes simd      122      157        0
    //  no simd      188      230        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group1()[2] * other.group0()[1]) + (self.group1()[1] * other.group0()[2]) + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])),
                ((self.group1()[2] * other.group0()[0]) - (self.group1()[0] * other.group0()[2]) - (self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                (-(self.group1()[1] * other.group0()[0]) + (self.group1()[0] * other.group0()[1]) + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group2()[2] * other.group0()[1]) + (self.group2()[1] * other.group0()[2]) - (self.group1()[3] * other.group1()[0])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])),
                ((self.group2()[2] * other.group0()[0]) - (self.group2()[0] * other.group0()[2]) - (self.group1()[3] * other.group1()[1]) - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[2] * other.group1()[0])),
                (-(self.group2()[1] * other.group0()[0]) + (self.group2()[0] * other.group0()[1]) - (self.group1()[3] * other.group1()[2])
                    + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[0])),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group1()[3] * other.group0()[0]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                ((self.group1()[3] * other.group0()[1]) - (self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                ((self.group1()[3] * other.group0()[2]) + (self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                (-(self.group2()[2] * other.group0()[2])
                    - (self.group2()[1] * other.group0()[1])
                    - (self.group2()[0] * other.group0()[0])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      100      132        0
    //    simd3        0        2        0
    //    simd4       27       28        0
    // Totals...
    // yes simd      127      162        0
    //  no simd      208      250        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2])),
                    ((self.group0()[2] * other.group0()[0]) + (self.group0()[1] * other.group0()[3])),
                    ((self.group0()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1])),
                    (-(self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e23, e31, e12, e45
            ((swizzle!(self.group1(), 1, 2, 2, 3) * swizzle!(other.group0(), 2, 0, 3, 3))
                - (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group1()[2] * other.group0()[1])
                        + (self.group1()[0] * other.group0()[3])
                        + (self.group0()[0] * other.group1()[3])
                        + (self.group0()[1] * other.group1()[2])),
                    ((self.group1()[1] * other.group0()[3]) - (self.group1()[0] * other.group0()[2])
                        + (self.group0()[2] * other.group1()[0])
                        + (self.group0()[1] * other.group1()[3])),
                    (-(self.group1()[1] * other.group0()[0])
                        + (self.group1()[0] * other.group0()[1])
                        + (self.group0()[2] * other.group1()[3])
                        + (self.group0()[0] * other.group1()[1])),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e15, e25, e35, e1234
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group2()[1] * other.group0()[2]) + (self.group2()[0] * other.group0()[3])
                        - (self.group1()[3] * other.group1()[0])
                        - (self.group1()[2] * other.group1()[1])
                        + (self.group1()[0] * other.group1()[3])
                        + (self.group1()[1] * other.group1()[2])),
                    ((self.group2()[2] * other.group0()[0]) + (self.group2()[1] * other.group0()[3]) - (self.group1()[3] * other.group1()[1])
                        + (self.group1()[2] * other.group1()[0])
                        - (self.group1()[0] * other.group1()[2])
                        + (self.group1()[1] * other.group1()[3])),
                    ((self.group2()[2] * other.group0()[3]) + (self.group2()[0] * other.group0()[1]) - (self.group1()[3] * other.group1()[2])
                        + (self.group1()[2] * other.group1()[3])
                        + (self.group1()[0] * other.group1()[1])
                        - (self.group1()[1] * other.group1()[0])),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(other.group1(), 1, 2, 0, 3) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[3]]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group0()[0]) + (self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2])),
                    ((self.group1()[3] * other.group0()[1]) + (self.group0()[2] * other.group1()[0]) + (self.group0()[1] * other.group1()[3])),
                    ((self.group1()[3] * other.group0()[2]) + (self.group0()[2] * other.group1()[3]) + (self.group0()[0] * other.group1()[1])),
                    (-(self.group2()[2] * other.group0()[2])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[2] * other.group1()[2])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group1()[1] * other.group1()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for Dipole {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      236      288        0
    //    simd2        2        2        0
    //    simd3       68       74        0
    //    simd4       33       34        0
    // Totals...
    // yes simd      339      398        0
    //  no simd      576      650        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            (-(Simd32x2::from(self.group1()[3]) * Simd32x2::from([other.group5()[3], other.group3()[3]]))
                + Simd32x2::from([
                    (-(self.group2()[2] * other.group6()[2])
                        - (self.group2()[1] * other.group6()[1])
                        - (self.group2()[0] * other.group6()[0])
                        - (self.group1()[2] * other.group5()[2])
                        - (self.group1()[1] * other.group5()[1])
                        - (self.group1()[0] * other.group5()[0])
                        - (self.group0()[2] * other.group7()[2])
                        - (self.group0()[0] * other.group7()[0])
                        - (self.group0()[1] * other.group7()[1])),
                    ((self.group2()[2] * other.group4()[2])
                        + (self.group2()[1] * other.group4()[1])
                        + (self.group2()[0] * other.group4()[0])
                        + (self.group1()[2] * other.group10()[0])
                        + (self.group1()[1] * other.group10()[1])
                        + (self.group1()[0] * other.group10()[2])
                        + (self.group0()[2] * other.group3()[2])
                        + (self.group0()[0] * other.group3()[0])
                        + (self.group0()[1] * other.group3()[1])),
                ])),
            // e1, e2, e3, e4
            (-(Simd32x4::from(other[e35]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                + (swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group10()[2], other.group10()[1], other.group10()[0], other.group4()[2]]))
                - (swizzle!(other.group8(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[2]]))
                + (swizzle!(self.group1(), 1, 2, 2, 1) * Simd32x4::from([other.group8()[2], other.group8()[0], other.group3()[3], other.group4()[1]]))
                + (swizzle!(self.group1(), 0, 1, 0, 0) * Simd32x4::from([other.group3()[3], other.group3()[3], other.group8()[1], other.group4()[0]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group4()[1]) - (self.group2()[1] * other.group4()[2]) - (self.group0()[2] * other.group3()[1])
                        + (self.group0()[0] * other.group8()[3])
                        + (self.group0()[1] * other.group3()[2])),
                    (-(self.group2()[2] * other.group4()[0]) + (self.group2()[0] * other.group4()[2]) + (self.group0()[2] * other.group3()[0])
                        - (self.group0()[0] * other.group3()[2])
                        + (self.group0()[1] * other.group8()[3])),
                    ((self.group2()[1] * other.group4()[0]) - (self.group2()[0] * other.group4()[1])
                        + (self.group0()[2] * other.group8()[3])
                        + (self.group0()[0] * other.group3()[1])
                        - (self.group0()[1] * other.group3()[0])),
                    ((self.group0()[2] * other.group10()[0]) + (self.group0()[1] * other.group10()[1])
                        - (self.group0()[1] * other.group8()[1])
                        - (self.group0()[0] * other.group8()[0])
                        + (self.group0()[0] * other.group10()[2])),
                ])),
            // e5
            ((self.group2()[2] * other.group10()[0])
                + (self.group2()[2] * other.group8()[2])
                + (self.group2()[1] * other.group10()[1])
                + (self.group2()[1] * other.group8()[1])
                + (self.group2()[0] * other.group10()[2])
                + (self.group2()[0] * other.group8()[0])
                + (self.group1()[3] * other.group8()[3])
                + (self.group1()[2] * other.group3()[2])
                + (self.group1()[0] * other.group3()[0])
                + (self.group1()[1] * other.group3()[1])),
            // e15, e25, e35, e45
            ((Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group1()[1], other.group5()[0], other.group0()[1], other.group6()[2]]))
                + (Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group5()[2], other.group0()[1], other.group1()[0], other.group6()[1]]))
                + (Simd32x4::from(self.group2()[0]) * Simd32x4::from([other.group0()[1], other.group1()[2], other.group5()[1], other.group6()[0]]))
                + (swizzle!(self.group1(), 0, 2, 2, 3) * Simd32x4::from([other[e1], other.group7()[0], other[e1], other.group0()[1]]))
                + (swizzle!(self.group1(), 1, 1, 0, 2) * Simd32x4::from([other.group7()[2], other[e1], other.group7()[1], other.group1()[2]]))
                + Simd32x4::from([
                    (-(self.group2()[2] * other.group5()[1])
                        - (self.group2()[1] * other.group1()[2])
                        - (self.group2()[0] * other.group5()[3])
                        - (self.group1()[3] * other.group7()[0])
                        - (self.group1()[2] * other.group7()[1])),
                    (-(self.group2()[2] * other.group1()[0])
                        - (self.group2()[1] * other.group5()[3])
                        - (self.group2()[0] * other.group5()[2])
                        - (self.group1()[3] * other.group7()[1])
                        - (self.group1()[0] * other.group7()[2])),
                    (-(self.group2()[2] * other.group5()[3])
                        - (self.group2()[1] * other.group5()[0])
                        - (self.group2()[0] * other.group1()[1])
                        - (self.group1()[3] * other.group7()[2])
                        - (self.group1()[1] * other.group7()[0])),
                    ((self.group1()[1] * other.group1()[1]) + (self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group7()[2])
                        - (self.group0()[0] * other.group7()[0])
                        - (self.group0()[1] * other.group7()[1])),
                ])),
            // e41, e42, e43
            ((Simd32x3::from(self.group1()[3]) * other.group6()) - (swizzle!(other.group6(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))
                + (swizzle!(other.group6(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group5()[1], other.group1()[2], other.group5()[0]]))
                - (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group1()[1], other.group5()[2], other.group1()[0]]))
                + (swizzle!(self.group0(), 1, 2, 2) * Simd32x3::from([other.group5()[2], other.group5()[0], other.group5()[3]]))
                + (swizzle!(self.group0(), 1, 2, 2) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group0()[1]]))
                + (swizzle!(self.group0(), 0, 1, 0) * Simd32x3::from([other.group0()[1], other.group5()[3], other.group1()[1]]))
                + (swizzle!(self.group0(), 0, 1, 0) * Simd32x3::from([other.group5()[3], other.group0()[1], other.group5()[1]]))),
            // e415, e425, e435, e321
            (-(swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group8(), 0, 1, 2, 2))
                + (swizzle!(self.group1(), 2, 0, 1, 3) * Simd32x4::from([other.group10()[1], other.group10()[0], other.group10()[2], other.group0()[0]]))
                - (swizzle!(self.group1(), 1, 2, 2, 1) * Simd32x4::from([other.group10()[0], other.group10()[2], other.group0()[0], other.group8()[1]]))
                - (swizzle!(self.group1(), 0, 1, 0, 0) * Simd32x4::from([other.group0()[0], other.group0()[0], other.group10()[1], other.group8()[0]]))
                - (swizzle!(other.group3(), 2, 0, 1, 2) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group4()[1]) - (self.group2()[1] * other.group4()[2]) - (self.group2()[0] * other[e35]) + (self.group0()[2] * other.group3()[1])
                        - (self.group0()[0] * other.group8()[3])),
                    (-(self.group2()[2] * other.group4()[0]) - (self.group2()[1] * other[e35]) + (self.group2()[0] * other.group4()[2]) + (self.group0()[0] * other.group3()[2])
                        - (self.group0()[1] * other.group8()[3])),
                    (-(self.group2()[2] * other[e35]) + (self.group2()[1] * other.group4()[0]) - (self.group2()[0] * other.group4()[1]) - (self.group0()[2] * other.group8()[3])
                        + (self.group0()[1] * other.group3()[0])),
                    ((self.group2()[2] * other.group4()[2]) + (self.group2()[1] * other.group4()[1]) + (self.group2()[0] * other.group4()[0])
                        - (self.group0()[0] * other.group3()[0])
                        - (self.group0()[1] * other.group3()[1])),
                ])),
            // e423, e431, e412
            (-(Simd32x3::from(self.group1()[3]) * other.group4()) + (swizzle!(other.group4(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))
                - (swizzle!(other.group4(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                - (Simd32x3::from(other[e35]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group10()[1], other.group8()[0], other.group3()[3]]))
                - (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group8()[1], other.group10()[2], other.group0()[0]]))
                - (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group10()[0], other.group0()[0], other.group8()[0]]))
                + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group8()[2], other.group3()[3], other.group10()[2]]))
                - (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group8()[2], other.group10()[1]]))
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group3()[3], other.group10()[0], other.group8()[1]]))),
            // e235, e315, e125
            ((swizzle!(self.group2(), 2, 0, 1) * swizzle!(other.group10(), 1, 0, 2))
                + (swizzle!(self.group2(), 2, 0, 1) * Simd32x3::from([other.group8()[1], other.group8()[2], other.group8()[0]]))
                - (swizzle!(self.group2(), 1, 2, 2) * Simd32x3::from([other.group10()[0], other.group10()[2], other.group3()[3]]))
                - (swizzle!(self.group2(), 1, 2, 2) * Simd32x3::from([other.group8()[2], other.group8()[0], other.group0()[0]]))
                - (swizzle!(self.group2(), 0, 1, 0) * Simd32x3::from([other.group3()[3], other.group3()[3], other.group10()[1]]))
                - (swizzle!(self.group2(), 0, 1, 0) * Simd32x3::from([other.group0()[0], other.group0()[0], other.group8()[1]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                - (Simd32x3::from(other.group8()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + Simd32x3::from([
                    ((self.group1()[2] * other.group3()[1]) - (self.group1()[1] * other.group3()[2])),
                    (-(self.group1()[2] * other.group3()[0]) + (self.group1()[0] * other.group3()[2])),
                    (-(self.group1()[0] * other.group3()[1]) + (self.group1()[1] * other.group3()[0])),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]))
                - (swizzle!(self.group1(), 1, 2, 2, 3) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group5()[3], other[e1]]))
                - (swizzle!(self.group1(), 0, 1, 0, 2) * Simd32x4::from([other.group5()[3], other.group5()[3], other.group1()[1], other.group7()[2]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group6()[1]) - (self.group2()[1] * other.group6()[2]) - (self.group2()[0] * other.group1()[3])
                        + (self.group1()[3] * other.group5()[0])
                        - (self.group0()[2] * other.group7()[1])
                        + (self.group0()[0] * other[e1])
                        + (self.group0()[1] * other.group7()[2])),
                    (-(self.group2()[2] * other.group6()[0]) - (self.group2()[1] * other.group1()[3])
                        + (self.group2()[0] * other.group6()[2])
                        + (self.group1()[3] * other.group5()[1])
                        + (self.group0()[2] * other.group7()[0])
                        - (self.group0()[0] * other.group7()[2])
                        + (self.group0()[1] * other[e1])),
                    (-(self.group2()[2] * other.group1()[3]) + (self.group2()[1] * other.group6()[0]) - (self.group2()[0] * other.group6()[1])
                        + (self.group1()[3] * other.group5()[2])
                        + (self.group0()[2] * other[e1])
                        + (self.group0()[0] * other.group7()[1])
                        - (self.group0()[1] * other.group7()[0])),
                    (-(self.group2()[2] * other.group5()[2]) - (self.group2()[1] * other.group5()[1]) + (self.group2()[1] * other.group1()[1])
                        - (self.group2()[0] * other.group5()[0])
                        + (self.group2()[0] * other.group1()[0])
                        - (self.group1()[0] * other.group7()[0])
                        - (self.group1()[1] * other.group7()[1])),
                ])),
            // e1234
            ((self.group1()[3] * other.group1()[3])
                - (self.group1()[2] * other.group6()[2])
                - (self.group1()[1] * other.group6()[1])
                - (self.group1()[0] * other.group6()[0])
                - (self.group0()[2] * other.group5()[2])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[1] * other.group5()[1])
                - (self.group0()[1] * other.group1()[1])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[0] * other.group5()[0])),
            // e12, e31, e23
            ((swizzle!(self.group2(), 2, 2, 1) * Simd32x3::from([other.group1()[3], other.group6()[0], other.group6()[2]]))
                - (swizzle!(self.group2(), 1, 0, 2) * swizzle!(other.group6(), 0, 2, 1))
                + (swizzle!(self.group2(), 0, 1, 0) * Simd32x3::from([other.group6()[1], other.group1()[3], other.group1()[3]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[2], other.group1()[1], other.group1()[0]]))
                + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group1()[2], self.group1()[1], self.group1()[0]]))
                + (swizzle!(self.group0(), 2, 2, 0) * Simd32x3::from([other[e1], other.group7()[0], other[e1]]))
                + (swizzle!(self.group0(), 0, 1, 1) * Simd32x3::from([other.group7()[1], other[e1], other.group7()[2]]))
                - (swizzle!(self.group0(), 1, 0, 2) * swizzle!(other.group7(), 0, 2, 1))
                + Simd32x3::from([
                    (-(self.group1()[1] * other.group5()[0]) + (self.group1()[0] * other.group5()[1])),
                    ((self.group1()[2] * other.group5()[0]) - (self.group1()[0] * other.group5()[2])),
                    (-(self.group1()[2] * other.group5()[1]) + (self.group1()[1] * other.group5()[2])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       72      101        0
    //    simd3        0        2        0
    //    simd4       25       26        0
    // Totals...
    // yes simd       97      129        0
    //  no simd      172      211        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
            // e415, e425, e435, e321
            (-(swizzle!(other.group0(), 3, 3, 3, 2) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[2]]))
                - (swizzle!(self.group1(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))
                + Simd32x4::from([0.0, 0.0, 0.0, ((self.group1()[1] * other.group0()[1]) * -1.0)])),
            // e235, e315, e125, e5
            ((swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group2()[2]]))
                + Simd32x4::from([
                    (-(self.group1()[0] * other.group0()[3]) - (self.group2()[1] * other.group0()[2])),
                    (-(self.group2()[2] * other.group0()[0]) - (self.group1()[1] * other.group0()[3])),
                    (-(self.group1()[2] * other.group0()[3]) - (self.group2()[0] * other.group0()[1])),
                    ((self.group2()[1] * other.group0()[1]) + (self.group1()[3] * other.group0()[3]) + (self.group2()[0] * other.group0()[0])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group0()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2])),
                    ((self.group1()[2] * other.group0()[0]) + (self.group0()[1] * other.group0()[3])),
                    ((self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1])),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       71       99        0
    //    simd3        2        5        0
    //    simd4       23       24        0
    // Totals...
    // yes simd       96      128        0
    //  no simd      169      210        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                - (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
            // e23, e31, e12, e45
            ((swizzle!(other.group0(), 3, 3, 3, 2) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[0] * other[e2]) - (self.group1()[3] * other.group0()[0])),
                    ((self.group0()[1] * other[e2]) - (self.group1()[3] * other.group0()[1])),
                    ((self.group0()[2] * other[e2]) - (self.group1()[3] * other.group0()[2])),
                    ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
                ])),
            // e15, e25, e35, e1234
            ((swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]))
                - (swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[2]]))
                + Simd32x4::from([
                    (self.group1()[0] * other[e2]),
                    (self.group1()[1] * other[e2]),
                    (self.group1()[2] * other[e2]),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]))
                - (swizzle!(self.group1(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other[e2]]))
                + Simd32x4::from([
                    (-(self.group2()[0] * other.group0()[3]) + (self.group0()[0] * other[e2])),
                    (-(self.group2()[1] * other.group0()[3]) + (self.group0()[1] * other[e2])),
                    (-(self.group2()[2] * other.group0()[3]) + (self.group0()[2] * other[e2])),
                    ((self.group2()[1] * other.group0()[1]) + (self.group2()[0] * other.group0()[0])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       72        0
    //    simd3        0        6        0
    //    simd4        7       10        0
    // Totals...
    // yes simd       63       88        0
    //  no simd       84      130        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = Circle::from_groups(
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other[scalar]) * Simd32x3::from(-1.0)),
            // e415, e425, e435, e321
            (self.group1() * Simd32x4::from(other[scalar]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e235, e315, e125
            (self.group2() * Simd32x3::from(other[scalar]) * Simd32x3::from(-1.0)),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       75      106        0
    //    simd3        0        2        0
    //    simd4       26       27        0
    // Totals...
    // yes simd      101      135        0
    //  no simd      179      220        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group1()[0] * other[e4315]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group1()[1] * other[e4315]) - (self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                (-(self.group1()[2] * other[e4315]) + (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
            // e415, e425, e435, e321
            (-(swizzle!(other.group0(), 3, 3, 3, 2) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[2]]))
                - (swizzle!(self.group1(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))
                - Simd32x4::from([
                    (self.group2()[0] * other[e4315]),
                    (self.group2()[1] * other[e4315]),
                    (self.group2()[2] * other[e4315]),
                    (self.group1()[1] * other.group0()[1]),
                ])),
            // e235, e315, e125, e5
            ((swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group2()[2]]))
                + Simd32x4::from([
                    (-(self.group1()[0] * other.group0()[3]) - (self.group2()[1] * other.group0()[2])),
                    (-(self.group2()[2] * other.group0()[0]) - (self.group1()[1] * other.group0()[3])),
                    (-(self.group1()[2] * other.group0()[3]) - (self.group2()[0] * other.group0()[1])),
                    ((self.group2()[1] * other.group0()[1]) + (self.group1()[3] * other.group0()[3]) + (self.group2()[0] * other.group0()[0])),
                ])),
            // e1, e2, e3, e4
            (-(Simd32x4::from(other[e4315]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                - (swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group0()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2])),
                    ((self.group1()[2] * other.group0()[0]) + (self.group0()[1] * other.group0()[3])),
                    ((self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1])),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      132      164        0
    //    simd3        0        2        0
    //    simd4       39       40        0
    // Totals...
    // yes simd      171      206        0
    //  no simd      288      330        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]))
                - (swizzle!(other.group1(), 1, 2, 0, 3) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[3]]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group0()[0]) + (self.group1()[1] * other.group0()[2]) + (self.group1()[0] * other.group3()[3])
                        - (self.group0()[2] * other.group3()[1])
                        + (self.group0()[1] * other.group3()[2])
                        + (self.group0()[1] * other.group1()[2])
                        + (self.group0()[0] * other.group0()[3])
                        + (self.group0()[0] * other.group1()[3])),
                    ((self.group1()[3] * other.group0()[1])
                        + (self.group1()[2] * other.group0()[0])
                        + (self.group1()[1] * other.group3()[3])
                        + (self.group0()[2] * other.group3()[0])
                        + (self.group0()[2] * other.group1()[0])
                        + (self.group0()[1] * other.group1()[3])
                        + (self.group0()[1] * other.group0()[3])
                        - (self.group0()[0] * other.group3()[2])),
                    ((self.group1()[3] * other.group0()[2])
                        + (self.group1()[2] * other.group3()[3])
                        + (self.group1()[0] * other.group0()[1])
                        + (self.group0()[2] * other.group1()[3])
                        + (self.group0()[2] * other.group0()[3])
                        - (self.group0()[1] * other.group3()[0])
                        + (self.group0()[0] * other.group1()[1])
                        + (self.group0()[0] * other.group3()[1])),
                    (-(self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[2] * other.group1()[2])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e23, e31, e12, e45
            ((swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group2()[2]]))
                + (swizzle!(other.group3(), 3, 3, 3, 2) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[2]]))
                + (swizzle!(self.group1(), 1, 2, 2, 3) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group0()[3]]))
                + (swizzle!(self.group1(), 0, 1, 0, 1) * Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group3()[1]]))
                - (swizzle!(other.group2(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group2()[2] * other.group0()[1]) - (self.group1()[3] * other.group3()[0]) - (self.group1()[2] * other.group1()[1])
                        + (self.group0()[0] * other.group2()[3])
                        + (self.group0()[1] * other.group2()[2])),
                    (-(self.group2()[0] * other.group0()[2]) - (self.group1()[3] * other.group3()[1]) - (self.group1()[0] * other.group1()[2])
                        + (self.group0()[2] * other.group2()[0])
                        + (self.group0()[1] * other.group2()[3])),
                    (-(self.group2()[1] * other.group0()[0]) - (self.group1()[3] * other.group3()[2]) - (self.group1()[1] * other.group1()[0])
                        + (self.group0()[2] * other.group2()[3])
                        + (self.group0()[0] * other.group2()[1])),
                    ((self.group2()[1] * other.group0()[1]) + (self.group2()[0] * other.group0()[0]) + (self.group1()[0] * other.group3()[0])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e15, e25, e35, e1234
            ((swizzle!(other.group3(), 1, 2, 0, 3) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]))
                - (swizzle!(other.group1(), 1, 3, 3, 2) * Simd32x4::from([self.group2()[2], self.group2()[1], self.group2()[2], self.group0()[2]]))
                - (swizzle!(other.group3(), 2, 0, 1, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[2]]))
                - (swizzle!(other.group1(), 3, 2, 0, 1) * Simd32x4::from([self.group2()[0], self.group2()[0], self.group2()[1], self.group0()[1]]))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[2]]))
                - (swizzle!(self.group1(), 2, 0, 1, 1) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[1]]))
                + Simd32x4::from([
                    ((self.group2()[1] * other.group1()[2])
                        + (self.group2()[0] * other.group0()[3])
                        + (self.group1()[0] * other.group2()[3])
                        + (self.group1()[1] * other.group2()[2])),
                    ((self.group2()[2] * other.group1()[0])
                        + (self.group2()[1] * other.group0()[3])
                        + (self.group1()[2] * other.group2()[0])
                        + (self.group1()[1] * other.group2()[3])),
                    ((self.group2()[2] * other.group0()[3])
                        + (self.group2()[0] * other.group1()[1])
                        + (self.group1()[2] * other.group2()[3])
                        + (self.group1()[0] * other.group2()[1])),
                    (-(self.group1()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group3()[1])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group3()[0])),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group3(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]))
                - (swizzle!(self.group1(), 1, 2, 2, 3) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[3], other.group2()[3]]))
                - (swizzle!(self.group1(), 0, 1, 0, 2) * Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group2()[2]]))
                - (swizzle!(other.group2(), 1, 2, 0, 0) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group0()[1]) - (self.group2()[1] * other.group0()[2]) - (self.group2()[0] * other.group3()[3])
                        + (self.group1()[3] * other.group1()[0])
                        + (self.group0()[0] * other.group2()[3])
                        + (self.group0()[1] * other.group2()[2])),
                    (-(self.group2()[2] * other.group0()[0]) - (self.group2()[1] * other.group3()[3])
                        + (self.group2()[0] * other.group0()[2])
                        + (self.group1()[3] * other.group1()[1])
                        + (self.group0()[2] * other.group2()[0])
                        + (self.group0()[1] * other.group2()[3])),
                    (-(self.group2()[2] * other.group3()[3]) + (self.group2()[1] * other.group0()[0]) - (self.group2()[0] * other.group0()[1])
                        + (self.group1()[3] * other.group1()[2])
                        + (self.group0()[2] * other.group2()[3])
                        + (self.group0()[0] * other.group2()[1])),
                    (-(self.group2()[2] * other.group1()[2]) + (self.group2()[1] * other.group3()[1]) - (self.group2()[1] * other.group1()[1])
                        + (self.group2()[0] * other.group3()[0])
                        - (self.group2()[0] * other.group1()[0])
                        - (self.group1()[1] * other.group2()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      120      152        0
    //    simd3        0        2        0
    //    simd4       42       43        0
    // Totals...
    // yes simd      162      197        0
    //  no simd      288      330        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (-(Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]))
                + (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[3], other.group2()[2]]))
                + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group3()[2], other.group1()[3], other.group1()[0], other.group2()[1]]))
                + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group1()[2], other.group3()[1], other.group2()[0]]))
                + Simd32x4::from([
                    (-(self.group1()[1] * other.group0()[2])
                        - (self.group1()[0] * other.group2()[3])
                        - (self.group0()[2] * other.group3()[1])
                        - (self.group0()[1] * other.group1()[2])
                        - (self.group0()[0] * other.group0()[3])),
                    (-(self.group1()[2] * other.group0()[0])
                        - (self.group1()[1] * other.group2()[3])
                        - (self.group0()[2] * other.group1()[0])
                        - (self.group0()[1] * other.group0()[3])
                        - (self.group0()[0] * other.group3()[2])),
                    (-(self.group1()[2] * other.group2()[3])
                        - (self.group1()[0] * other.group0()[1])
                        - (self.group0()[2] * other.group0()[3])
                        - (self.group0()[1] * other.group3()[0])
                        - (self.group0()[0] * other.group1()[1])),
                    ((self.group2()[1] * other.group0()[1])
                        + (self.group2()[0] * other.group0()[0])
                        + (self.group1()[2] * other.group1()[2])
                        + (self.group1()[1] * other.group1()[1])
                        + (self.group1()[0] * other.group1()[0])),
                ])),
            // e415, e425, e435, e321
            ((swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group2()[2]]))
                - (swizzle!(other.group2(), 3, 3, 3, 2) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[2]]))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group3(), 0, 1, 2, 2))
                + (swizzle!(self.group1(), 2, 0, 1, 3) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[3]]))
                - (swizzle!(self.group1(), 1, 2, 2, 1) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group3()[1]]))
                - (swizzle!(self.group1(), 0, 1, 0, 0) * Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group3()[0]]))
                - (swizzle!(other.group2(), 2, 0, 1, 0) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]))
                + Simd32x4::from([
                    (-(self.group2()[1] * other.group0()[2]) + (self.group0()[2] * other.group2()[1]) - (self.group0()[0] * other.group3()[3])),
                    (-(self.group2()[2] * other.group0()[0]) + (self.group0()[0] * other.group2()[2]) - (self.group0()[1] * other.group3()[3])),
                    (-(self.group2()[0] * other.group0()[1]) - (self.group0()[2] * other.group3()[3]) + (self.group0()[1] * other.group2()[0])),
                    ((self.group2()[1] * other.group0()[1]) + (self.group2()[0] * other.group0()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
            // e235, e315, e125, e5
            ((swizzle!(other.group3(), 1, 2, 0, 2) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group2()[2]]))
                + (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group2()[2]]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                + (swizzle!(self.group1(), 2, 0, 1, 2) * swizzle!(other.group2(), 1, 2, 0, 2))
                + Simd32x4::from([
                    (-(self.group2()[1] * other.group3()[2])
                        - (self.group2()[1] * other.group1()[2])
                        - (self.group2()[0] * other.group1()[3])
                        - (self.group2()[0] * other.group0()[3])
                        - (self.group1()[0] * other.group3()[3])
                        - (self.group1()[1] * other.group2()[2])),
                    (-(self.group2()[2] * other.group3()[0])
                        - (self.group2()[2] * other.group1()[0])
                        - (self.group2()[1] * other.group1()[3])
                        - (self.group2()[1] * other.group0()[3])
                        - (self.group1()[2] * other.group2()[0])
                        - (self.group1()[1] * other.group3()[3])),
                    (-(self.group2()[2] * other.group1()[3])
                        - (self.group2()[2] * other.group0()[3])
                        - (self.group2()[0] * other.group3()[1])
                        - (self.group2()[0] * other.group1()[1])
                        - (self.group1()[2] * other.group3()[3])
                        - (self.group1()[0] * other.group2()[1])),
                    ((self.group2()[1] * other.group3()[1])
                        + (self.group2()[1] * other.group1()[1])
                        + (self.group2()[0] * other.group3()[0])
                        + (self.group2()[0] * other.group1()[0])
                        + (self.group1()[0] * other.group2()[0])
                        + (self.group1()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            ((swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[2]]))
                - (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                + (swizzle!(self.group1(), 3, 3, 3, 1) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[1]]))
                - (swizzle!(other.group3(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[2]]))
                + (swizzle!(self.group1(), 1, 2, 2, 0) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[3], other.group0()[0]]))
                + Simd32x4::from([
                    (-(self.group2()[1] * other.group0()[2]) + (self.group1()[0] * other.group1()[3]) - (self.group0()[2] * other.group2()[1])
                        + (self.group0()[0] * other.group3()[3])
                        + (self.group0()[1] * other.group2()[2])),
                    (-(self.group2()[2] * other.group0()[0]) + (self.group1()[1] * other.group1()[3]) + (self.group0()[2] * other.group2()[0])
                        - (self.group0()[0] * other.group2()[2])
                        + (self.group0()[1] * other.group3()[3])),
                    (-(self.group2()[0] * other.group0()[1])
                        + (self.group1()[0] * other.group3()[1])
                        + (self.group0()[2] * other.group3()[3])
                        + (self.group0()[0] * other.group2()[1])
                        - (self.group0()[1] * other.group2()[0])),
                    ((self.group0()[2] * other.group1()[2]) - (self.group0()[1] * other.group3()[1])
                        + (self.group0()[1] * other.group1()[1])
                        + (self.group0()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group3()[0])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl InfixAntiSandwich for DipoleInversion {}
impl AntiSandwich<AntiScalar> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       61       80        0
    //    simd3        0        2        0
    //    simd4       37       41        0
    // Totals...
    // yes simd       98      123        0
    //  no simd      209      250        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (self.group0() * Simd32x3::from(other[e12345])),
            // e23, e31, e12, e45
            (self.group1() * Simd32x4::from(other[e12345])),
            // e15, e25, e35, e1234
            (self.group2() * Simd32x4::from(other[e12345])),
            // e4235, e4315, e4125, e3215
            (self.group3() * Simd32x4::from(other[e12345])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      118      153        0
    //    simd3        0        1        0
    //    simd4       60       61        0
    // Totals...
    // yes simd      178      215        0
    //  no simd      358      400        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(swizzle!(self.group1(), 2, 0, 1, 3) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]))
                - (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    (-(self.group3()[2] * other.group0()[1])
                        + (self.group3()[1] * other.group0()[2])
                        + (self.group2()[3] * other.group1()[0])
                        + (self.group1()[3] * other.group0()[0])
                        + (self.group1()[1] * other.group0()[2])
                        + (self.group0()[0] * other.group1()[3])
                        + (self.group0()[1] * other.group1()[2])),
                    ((self.group3()[2] * other.group0()[0]) - (self.group3()[0] * other.group0()[2])
                        + (self.group2()[3] * other.group1()[1])
                        + (self.group1()[3] * other.group0()[1])
                        + (self.group1()[2] * other.group0()[0])
                        + (self.group0()[2] * other.group1()[0])
                        + (self.group0()[1] * other.group1()[3])),
                    (-(self.group3()[1] * other.group0()[0])
                        + (self.group3()[0] * other.group0()[1])
                        + (self.group2()[3] * other.group1()[2])
                        + (self.group1()[3] * other.group0()[2])
                        + (self.group1()[0] * other.group0()[1])
                        + (self.group0()[2] * other.group1()[3])
                        + (self.group0()[0] * other.group1()[1])),
                    (-(self.group2()[2] * other.group0()[2])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e23, e31, e12, e45
            (-(swizzle!(self.group3(), 0, 1, 2, 2) * swizzle!(other.group1(), 3, 3, 3, 2))
                + (swizzle!(self.group2(), 3, 3, 3, 2) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[2]]))
                + (swizzle!(self.group2(), 1, 2, 0, 1) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[1]]))
                - (swizzle!(other.group1(), 1, 2, 0, 1) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[1]]))
                + Simd32x4::from([
                    ((self.group3()[3] * other.group0()[0]) - (self.group2()[2] * other.group0()[1])
                        + (self.group1()[1] * other.group1()[2])
                        + (self.group0()[1] * other.group2()[2])
                        - (self.group0()[2] * other.group2()[1])),
                    ((self.group3()[3] * other.group0()[1]) - (self.group2()[0] * other.group0()[2]) + (self.group1()[2] * other.group1()[0])
                        - (self.group0()[0] * other.group2()[2])
                        + (self.group0()[2] * other.group2()[0])),
                    ((self.group3()[3] * other.group0()[2]) - (self.group2()[1] * other.group0()[0])
                        + (self.group1()[0] * other.group1()[1])
                        + (self.group0()[0] * other.group2()[1])
                        - (self.group0()[1] * other.group2()[0])),
                    (-(self.group3()[0] * other.group1()[0]) + (self.group2()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e15, e25, e35, e1234
            ((other.group1() * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group2()[3]]))
                - (swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[2]]))
                - (swizzle!(other.group1(), 1, 3, 3, 2) * Simd32x4::from([self.group2()[2], self.group2()[1], self.group2()[2], self.group0()[2]]))
                - (swizzle!(other.group1(), 3, 2, 0, 0) * Simd32x4::from([self.group2()[0], self.group2()[0], self.group2()[1], self.group0()[0]]))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[2]]))
                - (swizzle!(self.group1(), 2, 0, 1, 1) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[1]]))
                + Simd32x4::from([
                    ((self.group3()[2] * other.group2()[1]) + (self.group2()[1] * other.group1()[2]) + (self.group1()[1] * other.group2()[2])),
                    ((self.group3()[0] * other.group2()[2]) + (self.group2()[2] * other.group1()[0]) + (self.group1()[2] * other.group2()[0])),
                    ((self.group3()[1] * other.group2()[0]) + (self.group2()[0] * other.group1()[1]) + (self.group1()[0] * other.group2()[1])),
                    (-(self.group3()[1] * other.group0()[1])
                        - (self.group3()[0] * other.group0()[0])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[2]]))
                + (swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[2]]))
                - (swizzle!(self.group2(), 1, 2, 0, 1) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[1]]))
                - (swizzle!(other.group1(), 3, 3, 3, 0) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[0]]))
                + Simd32x4::from([
                    ((self.group2()[3] * other.group2()[0])
                        + (self.group2()[2] * other.group0()[1])
                        + (self.group1()[3] * other.group1()[0])
                        + (self.group0()[1] * other.group2()[2])
                        - (self.group0()[2] * other.group2()[1])),
                    ((self.group2()[3] * other.group2()[1]) + (self.group2()[0] * other.group0()[2]) + (self.group1()[3] * other.group1()[1])
                        - (self.group0()[0] * other.group2()[2])
                        + (self.group0()[2] * other.group2()[0])),
                    ((self.group2()[3] * other.group2()[2])
                        + (self.group2()[1] * other.group0()[0])
                        + (self.group1()[3] * other.group1()[2])
                        + (self.group0()[0] * other.group2()[1])
                        - (self.group0()[1] * other.group2()[0])),
                    ((self.group3()[1] * other.group2()[1]) + (self.group3()[0] * other.group2()[0])
                        - (self.group1()[2] * other.group2()[2])
                        - (self.group1()[0] * other.group2()[0])
                        - (self.group1()[1] * other.group2()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      105      140        0
    //    simd3        0        1        0
    //    simd4       67       68        0
    // Totals...
    // yes simd      172      209        0
    //  no simd      373      415        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(swizzle!(self.group1(), 2, 0, 1, 3) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]))
                - (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    (-(self.group3()[2] * other.group0()[1])
                        + (self.group3()[1] * other.group0()[2])
                        + (self.group2()[3] * other.group1()[0])
                        + (self.group1()[3] * other.group0()[0])
                        + (self.group1()[1] * other.group0()[2])
                        + (self.group0()[1] * other.group1()[2])
                        + (self.group0()[0] * other.group1()[3])
                        + (self.group0()[0] * other.group2()[3])),
                    ((self.group3()[2] * other.group0()[0]) - (self.group3()[0] * other.group0()[2])
                        + (self.group2()[3] * other.group1()[1])
                        + (self.group1()[3] * other.group0()[1])
                        + (self.group1()[2] * other.group0()[0])
                        + (self.group0()[2] * other.group1()[0])
                        + (self.group0()[1] * other.group2()[3])
                        + (self.group0()[1] * other.group1()[3])),
                    (-(self.group3()[1] * other.group0()[0])
                        + (self.group3()[0] * other.group0()[1])
                        + (self.group2()[3] * other.group1()[2])
                        + (self.group1()[3] * other.group0()[2])
                        + (self.group1()[0] * other.group0()[1])
                        + (self.group0()[2] * other.group2()[3])
                        + (self.group0()[2] * other.group1()[3])
                        + (self.group0()[0] * other.group1()[1])),
                    (-(self.group2()[2] * other.group0()[2])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e23, e31, e12, e45
            (-(swizzle!(self.group3(), 0, 1, 2, 2) * swizzle!(other.group1(), 3, 3, 3, 2))
                + (swizzle!(self.group2(), 3, 3, 3, 2) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[2]]))
                + (swizzle!(self.group2(), 1, 2, 0, 1) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[1]]))
                - (swizzle!(other.group1(), 1, 2, 0, 1) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[1]]))
                + (swizzle!(self.group1(), 1, 2, 2, 3) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group2()[3], other.group2()[3]]))
                - (swizzle!(other.group2(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group3()[3] * other.group0()[0]) - (self.group2()[2] * other.group0()[1])
                        + (self.group1()[0] * other.group2()[3])
                        + (self.group0()[1] * other.group2()[2])),
                    ((self.group3()[3] * other.group0()[1]) - (self.group2()[0] * other.group0()[2])
                        + (self.group1()[1] * other.group2()[3])
                        + (self.group0()[2] * other.group2()[0])),
                    ((self.group3()[3] * other.group0()[2]) - (self.group2()[1] * other.group0()[0])
                        + (self.group1()[0] * other.group1()[1])
                        + (self.group0()[0] * other.group2()[1])),
                    (-(self.group3()[0] * other.group1()[0]) + (self.group2()[0] * other.group0()[0])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e15, e25, e35, e1234
            ((other.group1() * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group2()[3]]))
                + (swizzle!(other.group2(), 1, 2, 0, 3) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]))
                - (swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[2]]))
                - (swizzle!(other.group1(), 1, 3, 3, 2) * Simd32x4::from([self.group2()[2], self.group2()[1], self.group2()[2], self.group0()[2]]))
                - (swizzle!(other.group1(), 3, 2, 0, 0) * Simd32x4::from([self.group2()[0], self.group2()[0], self.group2()[1], self.group0()[0]]))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[2]]))
                - (swizzle!(self.group1(), 2, 0, 1, 1) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[1]]))
                + Simd32x4::from([
                    ((self.group2()[1] * other.group1()[2]) + (self.group2()[0] * other.group2()[3]) + (self.group1()[1] * other.group2()[2])),
                    ((self.group2()[2] * other.group1()[0]) + (self.group2()[1] * other.group2()[3]) + (self.group1()[2] * other.group2()[0])),
                    ((self.group2()[2] * other.group2()[3]) + (self.group2()[0] * other.group1()[1]) + (self.group1()[0] * other.group2()[1])),
                    (-(self.group3()[1] * other.group0()[1])
                        - (self.group3()[0] * other.group0()[0])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[2]]))
                + (swizzle!(self.group3(), 1, 2, 2, 3) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group2()[3], other.group2()[3]]))
                + (swizzle!(self.group3(), 0, 1, 0, 2) * Simd32x4::from([other.group2()[3], other.group2()[3], other.group1()[1], other.group2()[2]]))
                + (swizzle!(other.group2(), 0, 1, 2, 1) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[1]]))
                - (swizzle!(self.group2(), 1, 2, 0, 1) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[1]]))
                - (swizzle!(other.group1(), 3, 3, 3, 0) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[0]]))
                + (swizzle!(other.group2(), 2, 0, 1, 0) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]))
                - (swizzle!(other.group2(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group0()[1]) + (self.group1()[3] * other.group1()[0])),
                    ((self.group2()[0] * other.group0()[2]) + (self.group1()[3] * other.group1()[1])),
                    ((self.group2()[1] * other.group0()[0]) + (self.group1()[3] * other.group1()[2])),
                    (-(self.group1()[0] * other.group2()[0]) - (self.group1()[1] * other.group2()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      118      153        0
    //    simd3        0        1        0
    //    simd4       60       61        0
    // Totals...
    // yes simd      178      215        0
    //  no simd      358      400        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (-(other.group1() * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group1()[3]]))
                + (swizzle!(self.group1(), 2, 0, 1, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[2]]))
                + (swizzle!(other.group1(), 1, 2, 3, 1) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[2], self.group1()[1]]))
                + (swizzle!(other.group1(), 3, 3, 0, 0) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[1], self.group1()[0]]))
                + Simd32x4::from([
                    ((self.group3()[2] * other.group0()[1])
                        - (self.group3()[1] * other.group0()[2])
                        - (self.group1()[3] * other.group0()[0])
                        - (self.group1()[1] * other.group0()[2])
                        - (self.group0()[1] * other.group1()[2])),
                    (-(self.group3()[2] * other.group0()[0]) + (self.group3()[0] * other.group0()[2])
                        - (self.group1()[3] * other.group0()[1])
                        - (self.group1()[2] * other.group0()[0])
                        - (self.group0()[2] * other.group1()[0])),
                    ((self.group3()[1] * other.group0()[0])
                        - (self.group3()[0] * other.group0()[1])
                        - (self.group1()[3] * other.group0()[2])
                        - (self.group1()[0] * other.group0()[1])
                        - (self.group0()[0] * other.group1()[1])),
                    ((self.group2()[2] * other.group0()[2])
                        + (self.group2()[1] * other.group0()[1])
                        + (self.group2()[0] * other.group0()[0])
                        + (self.group0()[2] * other.group2()[2])
                        + (self.group0()[0] * other.group2()[0])
                        + (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e321
            (-(swizzle!(self.group3(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]))
                - (swizzle!(self.group3(), 0, 1, 2, 1) * swizzle!(other.group1(), 3, 3, 3, 1))
                + (swizzle!(self.group2(), 2, 0, 1, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[2]]))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[0]]))
                + Simd32x4::from([
                    (-(self.group2()[3] * other.group2()[0]) - (self.group2()[1] * other.group0()[2]) + (self.group1()[2] * other.group1()[1])
                        - (self.group0()[1] * other.group2()[2])
                        + (self.group0()[2] * other.group2()[1])),
                    (-(self.group2()[3] * other.group2()[1]) - (self.group2()[2] * other.group0()[0])
                        + (self.group1()[0] * other.group1()[2])
                        + (self.group0()[0] * other.group2()[2])
                        - (self.group0()[2] * other.group2()[0])),
                    (-(self.group2()[3] * other.group2()[2]) - (self.group2()[0] * other.group0()[1]) + (self.group1()[1] * other.group1()[0])
                        - (self.group0()[0] * other.group2()[1])
                        + (self.group0()[1] * other.group2()[0])),
                    ((self.group2()[1] * other.group0()[1]) + (self.group2()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e235, e315, e125, e5
            (-(Simd32x4::from(self.group3()[3]) * other.group1())
                - (swizzle!(self.group3(), 2, 0, 1, 2) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group2()[2]]))
                + (Simd32x4::from(other.group2()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group1()[3], self.group1()[2]]))
                + (swizzle!(self.group2(), 2, 0, 1, 2) * swizzle!(other.group1(), 1, 2, 0, 2))
                + (Simd32x4::from(other.group2()[0]) * Simd32x4::from([self.group1()[3], self.group3()[2], self.group1()[1], self.group1()[0]]))
                + (Simd32x4::from(other.group2()[1]) * Simd32x4::from([self.group1()[2], self.group1()[3], self.group3()[0], self.group1()[1]]))
                + Simd32x4::from([
                    (-(self.group2()[1] * other.group1()[2]) - (self.group2()[0] * other.group1()[3]) - (self.group1()[1] * other.group2()[2])),
                    (-(self.group2()[2] * other.group1()[0]) - (self.group2()[1] * other.group1()[3]) - (self.group1()[2] * other.group2()[0])),
                    (-(self.group2()[2] * other.group1()[3]) - (self.group2()[0] * other.group1()[1]) - (self.group1()[0] * other.group2()[1])),
                    (-(self.group3()[1] * other.group2()[1]) - (self.group3()[0] * other.group2()[0])
                        + (self.group2()[1] * other.group1()[1])
                        + (self.group2()[0] * other.group1()[0])),
                ])),
            // e1, e2, e3, e4
            ((swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]))
                + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))
                + (swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]))
                + (swizzle!(self.group1(), 0, 1, 2, 1) * Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[1]]))
                + Simd32x4::from([
                    (-(self.group3()[3] * other.group0()[0]) - (self.group3()[2] * other.group1()[1]) + (self.group2()[2] * other.group0()[1])
                        - (self.group2()[1] * other.group0()[2])
                        + (self.group0()[1] * other.group2()[2])
                        - (self.group0()[2] * other.group2()[1])),
                    (-(self.group3()[3] * other.group0()[1]) - (self.group3()[0] * other.group1()[2]) - (self.group2()[2] * other.group0()[0])
                        + (self.group2()[0] * other.group0()[2])
                        - (self.group0()[0] * other.group2()[2])
                        + (self.group0()[2] * other.group2()[0])),
                    (-(self.group3()[3] * other.group0()[2]) - (self.group3()[1] * other.group1()[0]) + (self.group2()[1] * other.group0()[0])
                        - (self.group2()[0] * other.group0()[1])
                        + (self.group0()[0] * other.group2()[1])
                        - (self.group0()[1] * other.group2()[0])),
                    ((self.group3()[1] * other.group0()[1])
                        + (self.group3()[0] * other.group0()[0])
                        + (self.group1()[0] * other.group0()[0])
                        + (self.group0()[2] * other.group1()[2])
                        + (self.group0()[0] * other.group1()[0])
                        + (self.group0()[1] * other.group1()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      117      152        0
    //    simd3        0        1        0
    //    simd4       79       80        0
    // Totals...
    // yes simd      196      233        0
    //  no simd      433      475        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((swizzle!(self.group3(), 2, 0, 1, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[2]]))
                - (swizzle!(self.group3(), 1, 2, 2, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group2()[3], other.group2()[3]]))
                + (swizzle!(other.group3(), 0, 1, 2, 1) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[1]]))
                - (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                - (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (swizzle!(self.group1(), 2, 0, 1, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[2]]))
                + (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[3], other.group2()[2]]))
                + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group3()[2], other.group1()[3], other.group1()[0], other.group2()[1]]))
                + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group1()[2], other.group3()[1], other.group2()[0]]))
                + Simd32x4::from([
                    (-(self.group3()[0] * other.group2()[3])
                        - (self.group1()[1] * other.group0()[2])
                        - (self.group1()[0] * other.group2()[3])
                        - (self.group0()[2] * other.group3()[1])
                        - (self.group0()[1] * other.group1()[2])),
                    (-(self.group3()[1] * other.group2()[3])
                        - (self.group1()[2] * other.group0()[0])
                        - (self.group1()[1] * other.group2()[3])
                        - (self.group0()[2] * other.group1()[0])
                        - (self.group0()[0] * other.group3()[2])),
                    (-(self.group3()[0] * other.group0()[1])
                        - (self.group1()[2] * other.group2()[3])
                        - (self.group1()[0] * other.group0()[1])
                        - (self.group0()[1] * other.group3()[0])
                        - (self.group0()[0] * other.group1()[1])),
                    ((self.group3()[0] * other.group3()[0])
                        + (self.group2()[2] * other.group0()[2])
                        + (self.group2()[1] * other.group0()[1])
                        + (self.group2()[0] * other.group0()[0])
                        + (self.group1()[1] * other.group1()[1])
                        + (self.group1()[0] * other.group1()[0])),
                ])),
            // e415, e425, e435, e321
            (-(Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                + (swizzle!(other.group3(), 1, 2, 0, 3) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]))
                - (swizzle!(self.group3(), 1, 2, 2, 2) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[3], other.group1()[2]]))
                - (swizzle!(self.group3(), 0, 1, 0, 1) * Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group1()[1]]))
                - (swizzle!(other.group2(), 0, 1, 2, 2) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[2]]))
                + (swizzle!(self.group2(), 2, 0, 1, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[2]]))
                - (swizzle!(other.group2(), 3, 3, 3, 0) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[0]]))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group3(), 0, 1, 2, 2))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[0]]))
                - (swizzle!(other.group3(), 3, 3, 3, 1) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]))
                - (swizzle!(other.group2(), 2, 0, 1, 1) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[1]]))
                + Simd32x4::from([
                    (-(self.group2()[1] * other.group0()[2]) + (self.group1()[2] * other.group1()[1]) + (self.group0()[2] * other.group2()[1])),
                    (-(self.group2()[2] * other.group0()[0]) + (self.group1()[0] * other.group1()[2]) + (self.group0()[0] * other.group2()[2])),
                    (-(self.group2()[0] * other.group0()[1]) + (self.group1()[1] * other.group1()[0]) + (self.group0()[1] * other.group2()[0])),
                    ((self.group2()[1] * other.group0()[1]) + (self.group2()[0] * other.group0()[0]) - (self.group1()[0] * other.group3()[0])),
                ])),
            // e235, e315, e125, e5
            (-(Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))
                - (swizzle!(self.group3(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[2]]))
                - (swizzle!(self.group3(), 2, 0, 1, 1) * swizzle!(other.group2(), 1, 2, 0, 1))
                + (swizzle!(other.group2(), 2, 0, 1, 2) * Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[2]]))
                + (swizzle!(other.group3(), 3, 3, 3, 2) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[2]]))
                + (swizzle!(self.group2(), 2, 0, 1, 2) * Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[2]]))
                + (swizzle!(self.group2(), 2, 0, 1, 1) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[1]]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                + (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (swizzle!(other.group2(), 2, 0, 1, 0) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[0]]))
                + Simd32x4::from([
                    (-(self.group2()[1] * other.group3()[2])
                        - (self.group2()[1] * other.group1()[2])
                        - (self.group2()[0] * other.group1()[3])
                        - (self.group1()[0] * other.group3()[3])),
                    (-(self.group2()[2] * other.group3()[0])
                        - (self.group2()[2] * other.group1()[0])
                        - (self.group2()[1] * other.group1()[3])
                        - (self.group1()[1] * other.group3()[3])),
                    (-(self.group2()[2] * other.group1()[3])
                        - (self.group2()[0] * other.group3()[1])
                        - (self.group2()[0] * other.group1()[1])
                        - (self.group1()[2] * other.group3()[3])),
                    ((self.group2()[1] * other.group1()[1])
                        + (self.group2()[0] * other.group3()[0])
                        + (self.group2()[0] * other.group1()[0])
                        + (self.group1()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            ((swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]))
                + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))
                - (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                + (swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]))
                - (swizzle!(other.group3(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[2]]))
                + (swizzle!(self.group1(), 1, 2, 2, 1) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[3], other.group0()[1]]))
                + (swizzle!(self.group1(), 0, 1, 0, 0) * Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group0()[0]]))
                + Simd32x4::from([
                    (-(self.group3()[3] * other.group0()[0]) - (self.group3()[2] * other.group1()[1]) + (self.group2()[2] * other.group0()[1])
                        - (self.group2()[1] * other.group0()[2])
                        - (self.group0()[2] * other.group2()[1])
                        + (self.group0()[0] * other.group3()[3])
                        + (self.group0()[1] * other.group2()[2])),
                    (-(self.group3()[3] * other.group0()[1]) - (self.group3()[0] * other.group1()[2]) - (self.group2()[2] * other.group0()[0])
                        + (self.group2()[0] * other.group0()[2])
                        + (self.group0()[2] * other.group2()[0])
                        - (self.group0()[0] * other.group2()[2])
                        + (self.group0()[1] * other.group3()[3])),
                    (-(self.group3()[3] * other.group0()[2]) - (self.group3()[1] * other.group1()[0]) + (self.group2()[1] * other.group0()[0])
                        - (self.group2()[0] * other.group0()[1])
                        + (self.group0()[2] * other.group3()[3])
                        + (self.group0()[0] * other.group2()[1])
                        - (self.group0()[1] * other.group2()[0])),
                    ((self.group3()[1] * other.group0()[1]) + (self.group3()[0] * other.group0()[0]) + (self.group0()[2] * other.group1()[2])
                        - (self.group0()[1] * other.group3()[1])
                        + (self.group0()[1] * other.group1()[1])
                        + (self.group0()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group3()[0])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       58       85        0
    //    simd3        0        1        0
    //    simd4       45       49        0
    // Totals...
    // yes simd      103      135        0
    //  no simd      238      284        0
    fn anti_sandwich(self, other: DualNum) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[2] * other.group0()[1]),
                (self.group2()[3] * other.group0()[0]),
            ]),
            // e23, e31, e12, e45
            ((Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))
                + (self.group1() * Simd32x4::from(other.group0()[1]))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group3()[0] * other.group0()[0]) + (self.group1()[0] * other.group0()[0]) + (self.group2()[0] * other.group0()[1])),
                (-(self.group3()[1] * other.group0()[0]) + (self.group1()[1] * other.group0()[0]) + (self.group2()[1] * other.group0()[1])),
                (-(self.group3()[2] * other.group0()[0]) + (self.group1()[2] * other.group0()[0]) + (self.group2()[2] * other.group0()[1])),
                (self.group2()[3] * other.group0()[1]),
            ]),
            // e4235, e4315, e4125, e3215
            ((self.group3() * Simd32x4::from(other.group0()[1]))
                + (Simd32x4::from([1.0, 1.0, 1.0, -1.0])
                    * Simd32x4::from(other.group0()[0])
                    * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       68      100        0
    //    simd3        0        1        0
    //    simd4       51       52        0
    // Totals...
    // yes simd      119      153        0
    //  no simd      272      311        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group1()[3] * other.group0()[3])
                    + (self.group0()[2] * other.group0()[2])
                    + (self.group0()[0] * other.group0()[0])
                    + (self.group0()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435, e321
            (-(swizzle!(other.group0(), 3, 3, 3, 2) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[2]]))
                - (swizzle!(other.group0(), 0, 1, 2, 0) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[0]]))
                - (swizzle!(other.group0(), 2, 0, 1, 1) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[1]]))
                + Simd32x4::from([
                    (self.group0()[2] * other.group0()[1]),
                    (self.group0()[0] * other.group0()[2]),
                    (self.group0()[1] * other.group0()[0]),
                    0.0,
                ])),
            // e235, e315, e125, e5
            (-(swizzle!(self.group3(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))
                + (swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[2]]))
                - (swizzle!(other.group0(), 3, 3, 3, 2) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[2]]))
                + (swizzle!(self.group1(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))
                - (swizzle!(other.group0(), 2, 0, 1, 1) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[1]]))
                + (swizzle!(self.group1(), 2, 0, 1, 1) * swizzle!(other.group0(), 1, 2, 0, 1))
                + Simd32x4::from([0.0, 0.0, 0.0, ((self.group3()[0] * other.group0()[0]) * -1.0)])),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group2()[3] * other.group0()[0]) + (self.group1()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                ((self.group2()[3] * other.group0()[1]) + (self.group1()[1] * other.group0()[3]) - (self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group2()[3] * other.group0()[2]) + (self.group1()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (self.group2()[3] * other.group0()[3]),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       76      107        0
    //    simd3        0        1        0
    //    simd4       64       65        0
    // Totals...
    // yes simd      140      173        0
    //  no simd      332      370        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((swizzle!(other.group1(), 0, 1, 2, 2) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[2]]))
                - (swizzle!(other.group1(), 1, 2, 0, 3) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]))
                + (swizzle!(other.group0(), 3, 3, 3, 2) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group0()[2]]))
                + (swizzle!(other.group1(), 2, 0, 1, 1) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[1]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    ((self.group3()[0] * other.group1()[0]) - (self.group1()[3] * other.group0()[3])
                        + (self.group0()[0] * other.group0()[0])
                        + (self.group0()[1] * other.group0()[1])),
                ])),
            // e415, e425, e435, e321
            ((swizzle!(other.group1(), 1, 2, 0, 3) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]))
                - (swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[2]]))
                - (swizzle!(other.group0(), 3, 3, 3, 2) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[2]]))
                - (swizzle!(other.group0(), 0, 1, 2, 0) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[0]]))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group1(), 0, 1, 2, 1))
                - (swizzle!(other.group1(), 3, 3, 3, 0) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]))
                - (swizzle!(other.group0(), 2, 0, 1, 1) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[1]]))
                + Simd32x4::from([
                    (self.group0()[2] * other.group0()[1]),
                    (self.group0()[0] * other.group0()[2]),
                    (self.group0()[1] * other.group0()[0]),
                    0.0,
                ])),
            // e235, e315, e125, e5
            (-(Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                - (swizzle!(self.group3(), 2, 0, 1, 2) * swizzle!(other.group0(), 1, 2, 0, 2))
                + (swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[2]]))
                + (swizzle!(other.group1(), 3, 3, 3, 2) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[2]]))
                + (swizzle!(self.group2(), 2, 0, 1, 1) * swizzle!(other.group1(), 1, 2, 0, 1))
                - (swizzle!(other.group0(), 3, 3, 3, 1) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[1]]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[0]]))
                + Simd32x4::from([
                    (-(self.group2()[1] * other.group1()[2]) - (self.group1()[0] * other.group1()[3])),
                    (-(self.group2()[2] * other.group1()[0]) - (self.group1()[1] * other.group1()[3])),
                    (-(self.group2()[0] * other.group1()[1]) - (self.group1()[2] * other.group1()[3])),
                    ((self.group2()[0] * other.group1()[0]) + (self.group1()[1] * other.group0()[1])),
                ])),
            // e1, e2, e3, e4
            ((Simd32x4::from(self.group2()[3]) * other.group0())
                - (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group1()[1] * other.group1()[2]) + (self.group1()[0] * other.group0()[3]) - (self.group0()[2] * other.group0()[1])
                        + (self.group0()[0] * other.group1()[3])
                        + (self.group0()[1] * other.group0()[2])),
                    ((self.group1()[2] * other.group1()[0]) + (self.group1()[1] * other.group0()[3]) + (self.group0()[2] * other.group0()[0])
                        - (self.group0()[0] * other.group0()[2])
                        + (self.group0()[1] * other.group1()[3])),
                    ((self.group1()[2] * other.group0()[3])
                        + (self.group1()[0] * other.group1()[1])
                        + (self.group0()[2] * other.group1()[3])
                        + (self.group0()[0] * other.group0()[1])
                        - (self.group0()[1] * other.group0()[0])),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      122      157        0
    //    simd3        0        1        0
    //    simd4       44       45        0
    // Totals...
    // yes simd      166      203        0
    //  no simd      298      340        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group2()[3] * other.group0()[0]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                ((self.group2()[3] * other.group0()[1]) - (self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group2()[3] * other.group0()[2]) + (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group2()[3] * other.group1()[0]) - (self.group1()[2] * other.group0()[1]) + (self.group1()[1] * other.group0()[2]) + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])),
                ((self.group2()[3] * other.group1()[1]) + (self.group1()[2] * other.group0()[0]) - (self.group1()[0] * other.group0()[2]) - (self.group0()[0] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[0])),
                ((self.group2()[3] * other.group1()[2]) - (self.group1()[1] * other.group0()[0]) + (self.group1()[0] * other.group0()[1]) + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])),
                (-(self.group3()[2] * other.group0()[2])
                    - (self.group3()[1] * other.group0()[1])
                    - (self.group3()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group3()[3] * other.group0()[0]) + (self.group3()[2] * other.group1()[1]) - (self.group3()[1] * other.group1()[2]) - (self.group2()[2] * other.group0()[1])
                    + (self.group2()[1] * other.group0()[2])
                    - (self.group1()[3] * other.group1()[0])
                    + (self.group1()[1] * other.group1()[2])
                    - (self.group1()[2] * other.group1()[1])),
                ((self.group3()[3] * other.group0()[1]) - (self.group3()[2] * other.group1()[0]) + (self.group3()[0] * other.group1()[2]) + (self.group2()[2] * other.group0()[0])
                    - (self.group2()[0] * other.group0()[2])
                    - (self.group1()[3] * other.group1()[1])
                    - (self.group1()[0] * other.group1()[2])
                    + (self.group1()[2] * other.group1()[0])),
                ((self.group3()[3] * other.group0()[2]) + (self.group3()[1] * other.group1()[0]) - (self.group3()[0] * other.group1()[1]) - (self.group2()[1] * other.group0()[0])
                    + (self.group2()[0] * other.group0()[1])
                    - (self.group1()[3] * other.group1()[2])
                    + (self.group1()[0] * other.group1()[1])
                    - (self.group1()[1] * other.group1()[0])),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            ((swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    (-(self.group3()[2] * other.group0()[1])
                        + (self.group2()[3] * other.group1()[0])
                        + (self.group1()[3] * other.group0()[0])
                        + (self.group0()[1] * other.group1()[2])
                        - (self.group0()[2] * other.group1()[1])),
                    (-(self.group3()[0] * other.group0()[2]) + (self.group2()[3] * other.group1()[1]) + (self.group1()[3] * other.group0()[1])
                        - (self.group0()[0] * other.group1()[2])
                        + (self.group0()[2] * other.group1()[0])),
                    (-(self.group3()[1] * other.group0()[0])
                        + (self.group2()[3] * other.group1()[2])
                        + (self.group1()[3] * other.group0()[2])
                        + (self.group0()[0] * other.group1()[1])
                        - (self.group0()[1] * other.group1()[0])),
                    ((self.group3()[1] * other.group1()[1]) + (self.group3()[0] * other.group1()[0])
                        - (self.group2()[2] * other.group0()[2])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[2] * other.group1()[2])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group1()[1] * other.group1()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      100      135        0
    //    simd3        0        1        0
    //    simd4       57       58        0
    // Totals...
    // yes simd      157      194        0
    //  no simd      328      370        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2])),
                    ((self.group0()[2] * other.group0()[0]) + (self.group0()[1] * other.group0()[3])),
                    ((self.group0()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1])),
                    (-(self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e23, e31, e12, e45
            ((Simd32x4::from(self.group2()[3]) * other.group1())
                - (swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[2]]))
                + (swizzle!(self.group1(), 1, 2, 2, 3) * swizzle!(other.group0(), 2, 0, 3, 3))
                - (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group0()[3]) + (self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2])),
                    ((self.group1()[1] * other.group0()[3]) + (self.group0()[2] * other.group1()[0]) + (self.group0()[1] * other.group1()[3])),
                    ((self.group1()[0] * other.group0()[1]) + (self.group0()[2] * other.group1()[3]) + (self.group0()[0] * other.group1()[1])),
                    (-(self.group3()[1] * other.group0()[1])
                        - (self.group3()[0] * other.group0()[0])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e15, e25, e35, e1234
            ((other.group0() * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group2()[3]]))
                - (swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group3()[2] * other.group1()[1]) - (self.group3()[1] * other.group1()[2]) - (self.group3()[0] * other.group1()[3])
                        + (self.group2()[1] * other.group0()[2])
                        + (self.group2()[0] * other.group0()[3])
                        - (self.group1()[3] * other.group1()[0])
                        - (self.group1()[2] * other.group1()[1])
                        + (self.group1()[0] * other.group1()[3])
                        + (self.group1()[1] * other.group1()[2])),
                    (-(self.group3()[2] * other.group1()[0]) - (self.group3()[1] * other.group1()[3])
                        + (self.group3()[0] * other.group1()[2])
                        + (self.group2()[2] * other.group0()[0])
                        + (self.group2()[1] * other.group0()[3])
                        - (self.group1()[3] * other.group1()[1])
                        + (self.group1()[2] * other.group1()[0])
                        - (self.group1()[0] * other.group1()[2])
                        + (self.group1()[1] * other.group1()[3])),
                    (-(self.group3()[2] * other.group1()[3]) + (self.group3()[1] * other.group1()[0]) - (self.group3()[0] * other.group1()[1])
                        + (self.group2()[2] * other.group0()[3])
                        + (self.group2()[0] * other.group0()[1])
                        - (self.group1()[3] * other.group1()[2])
                        + (self.group1()[2] * other.group1()[3])
                        + (self.group1()[0] * other.group1()[1])
                        - (self.group1()[1] * other.group1()[0])),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[2]]))
                + (swizzle!(self.group3(), 1, 2, 2, 3) * swizzle!(other.group0(), 2, 0, 3, 3))
                + (swizzle!(self.group3(), 0, 1, 0, 2) * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[1], other.group1()[2]]))
                + (swizzle!(other.group1(), 0, 1, 2, 1) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[1]]))
                - (swizzle!(other.group1(), 1, 2, 0, 3) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[3]]))
                + (swizzle!(other.group1(), 3, 0, 3, 0) * Simd32x4::from([self.group0()[0], self.group0()[2], self.group0()[2], self.group3()[0]]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group0()[0]) + (self.group0()[1] * other.group1()[2])),
                    ((self.group1()[3] * other.group0()[1]) + (self.group0()[1] * other.group1()[3])),
                    ((self.group1()[3] * other.group0()[2]) + (self.group0()[0] * other.group1()[1])),
                    (-(self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[2] * other.group1()[2])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group1()[1] * other.group1()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for DipoleInversion {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      298      353        0
    //    simd2        8        8        0
    //    simd3       98      103        0
    //    simd4       72       73        0
    // Totals...
    // yes simd      476      537        0
    //  no simd      896      970        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from(self.group3()[2]) * Simd32x2::from([other.group1()[2], other.group8()[2]]))
                + (Simd32x2::from(self.group3()[1]) * Simd32x2::from([other.group1()[1], other.group8()[1]]))
                + (Simd32x2::from(self.group3()[0]) * Simd32x2::from([other.group1()[0], other.group8()[0]]))
                - (Simd32x2::from(self.group1()[3]) * Simd32x2::from([other.group5()[3], other.group3()[3]]))
                + Simd32x2::from([
                    ((self.group3()[3] * other.group1()[3]) + (self.group2()[3] * other[e1])
                        - (self.group2()[2] * other.group6()[2])
                        - (self.group2()[1] * other.group6()[1])
                        - (self.group2()[0] * other.group6()[0])
                        - (self.group1()[2] * other.group5()[2])
                        - (self.group1()[1] * other.group5()[1])
                        - (self.group1()[0] * other.group5()[0])
                        - (self.group0()[2] * other.group7()[2])
                        - (self.group0()[0] * other.group7()[0])
                        - (self.group0()[1] * other.group7()[1])),
                    (-(self.group3()[3] * other[e35]) - (self.group2()[3] * other.group8()[3])
                        + (self.group2()[2] * other.group4()[2])
                        + (self.group2()[1] * other.group4()[1])
                        + (self.group2()[0] * other.group4()[0])
                        + (self.group1()[2] * other.group10()[0])
                        + (self.group1()[1] * other.group10()[1])
                        + (self.group1()[0] * other.group10()[2])
                        + (self.group0()[2] * other.group3()[2])
                        + (self.group0()[0] * other.group3()[0])
                        + (self.group0()[1] * other.group3()[1])),
                ])),
            // e1, e2, e3, e4
            ((swizzle!(self.group3(), 1, 2, 2, 2) * Simd32x4::from([other.group10()[0], other.group10()[2], other.group0()[0], other.group4()[2]]))
                + (swizzle!(self.group3(), 0, 1, 0, 1) * Simd32x4::from([other.group0()[0], other.group0()[0], other.group10()[1], other.group4()[1]]))
                + (Simd32x4::from(self.group2()[3]) * other.group3())
                - (swizzle!(self.group2(), 1, 2, 2, 3) * Simd32x4::from([other.group4()[2], other.group4()[0], other[e35], other.group0()[0]]))
                + (swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group10()[2], other.group10()[1], other.group10()[0], other.group4()[2]]))
                - (swizzle!(self.group1(), 2, 0, 1, 3) * Simd32x4::from([other.group8()[1], other.group8()[2], other.group8()[0], other[e35]]))
                + (swizzle!(self.group1(), 1, 2, 2, 1) * Simd32x4::from([other.group8()[2], other.group8()[0], other.group3()[3], other.group4()[1]]))
                + (swizzle!(self.group1(), 0, 1, 0, 0) * Simd32x4::from([other.group3()[3], other.group3()[3], other.group8()[1], other.group4()[0]]))
                + Simd32x4::from([
                    (-(self.group3()[3] * other.group4()[0]) - (self.group3()[2] * other.group10()[1]) + (self.group2()[2] * other.group4()[1])
                        - (self.group2()[0] * other[e35])
                        - (self.group0()[2] * other.group3()[1])
                        + (self.group0()[0] * other.group8()[3])
                        + (self.group0()[1] * other.group3()[2])),
                    (-(self.group3()[3] * other.group4()[1]) - (self.group3()[0] * other.group10()[0]) - (self.group2()[1] * other[e35])
                        + (self.group2()[0] * other.group4()[2])
                        + (self.group0()[2] * other.group3()[0])
                        - (self.group0()[0] * other.group3()[2])
                        + (self.group0()[1] * other.group8()[3])),
                    (-(self.group3()[3] * other.group4()[2]) - (self.group3()[1] * other.group10()[2]) + (self.group2()[1] * other.group4()[0])
                        - (self.group2()[0] * other.group4()[1])
                        + (self.group0()[2] * other.group8()[3])
                        + (self.group0()[0] * other.group3()[1])
                        - (self.group0()[1] * other.group3()[0])),
                    ((self.group3()[0] * other.group4()[0]) + (self.group0()[2] * other.group10()[0]) - (self.group0()[2] * other.group8()[2])
                        + (self.group0()[1] * other.group10()[1])
                        - (self.group0()[1] * other.group8()[1])
                        - (self.group0()[0] * other.group8()[0])
                        + (self.group0()[0] * other.group10()[2])),
                ])),
            // e5
            (-(self.group3()[3] * other.group3()[3])
                - (self.group3()[3] * other.group0()[0])
                - (self.group3()[2] * other.group3()[2])
                - (self.group3()[1] * other.group3()[1])
                - (self.group3()[0] * other.group3()[0])
                + (self.group2()[2] * other.group10()[0])
                + (self.group2()[2] * other.group8()[2])
                + (self.group2()[1] * other.group10()[1])
                + (self.group2()[1] * other.group8()[1])
                + (self.group2()[0] * other.group10()[2])
                + (self.group2()[0] * other.group8()[0])
                + (self.group1()[3] * other.group8()[3])
                + (self.group1()[2] * other.group3()[2])
                + (self.group1()[0] * other.group3()[0])
                + (self.group1()[1] * other.group3()[1])),
            // e15, e25, e35, e45
            (-(Simd32x4::from(self.group3()[3]) * other.group1())
                - (swizzle!(self.group3(), 1, 2, 2, 2) * Simd32x4::from([other.group7()[2], other.group7()[0], other[e1], other.group5()[2]]))
                - (swizzle!(self.group3(), 0, 1, 0, 1) * Simd32x4::from([other[e1], other[e1], other.group7()[1], other.group5()[1]]))
                - (swizzle!(other.group5(), 1, 3, 3, 0) * Simd32x4::from([self.group2()[2], self.group2()[1], self.group2()[2], self.group3()[0]]))
                + (swizzle!(self.group2(), 2, 2, 2, 3) * Simd32x4::from([other.group1()[1], other.group5()[0], other.group0()[1], other[e1]]))
                + (swizzle!(self.group2(), 1, 1, 1, 2) * Simd32x4::from([other.group5()[2], other.group0()[1], other.group1()[0], other.group6()[2]]))
                + (swizzle!(self.group2(), 0, 0, 0, 1) * Simd32x4::from([other.group0()[1], other.group1()[2], other.group5()[1], other.group6()[1]]))
                + (swizzle!(self.group1(), 0, 2, 2, 3) * Simd32x4::from([other[e1], other.group7()[0], other[e1], other.group0()[1]]))
                + (swizzle!(self.group1(), 1, 1, 0, 2) * Simd32x4::from([other.group7()[2], other[e1], other.group7()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group3()[3] * other.group5()[0]) + (self.group3()[2] * other.group7()[1])
                        - (self.group2()[1] * other.group1()[2])
                        - (self.group2()[0] * other.group5()[3])
                        - (self.group1()[3] * other.group7()[0])
                        - (self.group1()[2] * other.group7()[1])),
                    ((self.group3()[3] * other.group5()[1]) + (self.group3()[0] * other.group7()[2])
                        - (self.group2()[2] * other.group1()[0])
                        - (self.group2()[0] * other.group5()[2])
                        - (self.group1()[3] * other.group7()[1])
                        - (self.group1()[0] * other.group7()[2])),
                    ((self.group3()[3] * other.group5()[2]) + (self.group3()[1] * other.group7()[0])
                        - (self.group2()[1] * other.group5()[0])
                        - (self.group2()[0] * other.group1()[1])
                        - (self.group1()[3] * other.group7()[2])
                        - (self.group1()[1] * other.group7()[0])),
                    ((self.group2()[0] * other.group6()[0]) + (self.group1()[1] * other.group1()[1]) + (self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group7()[2])
                        - (self.group0()[0] * other.group7()[0])
                        - (self.group0()[1] * other.group7()[1])),
                ])),
            // e41, e42, e43
            (-(swizzle!(other.group6(), 1, 2, 0) * Simd32x3::from([self.group3()[2], self.group3()[0], self.group3()[1]]))
                + (swizzle!(other.group6(), 2, 0, 1) * Simd32x3::from([self.group3()[1], self.group3()[2], self.group3()[0]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group5()[0], other.group5()[1], other.group5()[2]]))
                + (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group1()[3]) * other.group6())
                - (swizzle!(other.group6(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))
                + (swizzle!(other.group6(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group5()[1], other.group1()[2], other.group5()[0]]))
                - (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group1()[1], other.group5()[2], other.group1()[0]]))
                + (swizzle!(self.group0(), 1, 2, 2) * Simd32x3::from([other.group5()[2], other.group5()[0], other.group5()[3]]))
                + (swizzle!(self.group0(), 1, 2, 2) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group0()[1]]))
                + (swizzle!(self.group0(), 0, 1, 0) * Simd32x3::from([other.group0()[1], other.group5()[3], other.group1()[1]]))
                + (swizzle!(self.group0(), 0, 1, 0) * Simd32x3::from([other.group5()[3], other.group0()[1], other.group5()[1]]))),
            // e415, e425, e435, e321
            (-(Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[2], other[e35]]))
                + (swizzle!(other.group8(), 1, 2, 0, 3) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]))
                - (swizzle!(self.group3(), 1, 2, 2, 2) * Simd32x4::from([other.group8()[2], other.group8()[0], other.group3()[3], other.group10()[0]]))
                - (swizzle!(self.group3(), 0, 1, 0, 1) * Simd32x4::from([other.group3()[3], other.group3()[3], other.group8()[1], other.group10()[1]]))
                - (swizzle!(other.group3(), 0, 1, 2, 2) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[2]]))
                + (swizzle!(self.group2(), 2, 0, 1, 2) * Simd32x4::from([other.group4()[1], other.group4()[2], other.group4()[0], other.group4()[2]]))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group8(), 0, 1, 2, 2))
                + (swizzle!(self.group1(), 2, 0, 1, 3) * Simd32x4::from([other.group10()[1], other.group10()[0], other.group10()[2], other.group0()[0]]))
                - (swizzle!(self.group1(), 1, 2, 2, 1) * Simd32x4::from([other.group10()[0], other.group10()[2], other.group0()[0], other.group8()[1]]))
                - (swizzle!(self.group1(), 0, 1, 0, 0) * Simd32x4::from([other.group0()[0], other.group0()[0], other.group10()[1], other.group8()[0]]))
                - (swizzle!(other.group3(), 2, 0, 1, 0) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[0]]))
                + Simd32x4::from([
                    (-(self.group2()[1] * other.group4()[2]) - (self.group2()[0] * other[e35]) + (self.group0()[2] * other.group3()[1]) - (self.group0()[0] * other.group8()[3])),
                    (-(self.group2()[2] * other.group4()[0]) - (self.group2()[1] * other[e35]) + (self.group0()[0] * other.group3()[2]) - (self.group0()[1] * other.group8()[3])),
                    (-(self.group2()[2] * other[e35]) - (self.group2()[0] * other.group4()[1]) - (self.group0()[2] * other.group8()[3]) + (self.group0()[1] * other.group3()[0])),
                    (-(self.group3()[0] * other.group10()[2]) + (self.group2()[1] * other.group4()[1]) + (self.group2()[0] * other.group4()[0])
                        - (self.group0()[1] * other.group3()[1])),
                ])),
            // e423, e431, e412
            ((swizzle!(other.group4(), 1, 2, 0) * Simd32x3::from([self.group3()[2], self.group3()[0], self.group3()[1]]))
                - (swizzle!(other.group4(), 2, 0, 1) * Simd32x3::from([self.group3()[1], self.group3()[2], self.group3()[0]]))
                - (Simd32x3::from(other[e35]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                - (Simd32x3::from(self.group2()[3]) * swizzle!(other.group10(), 2, 1, 0))
                + (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group8()[0], other.group8()[1], other.group8()[2]]))
                - (Simd32x3::from(self.group1()[3]) * other.group4())
                + (swizzle!(other.group4(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))
                - (swizzle!(other.group4(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                - (Simd32x3::from(other[e35]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group10()[1], other.group8()[0], other.group3()[3]]))
                - (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group8()[1], other.group10()[2], other.group0()[0]]))
                - (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group10()[0], other.group0()[0], other.group8()[0]]))
                + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group8()[2], other.group3()[3], other.group10()[2]]))
                - (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group8()[2], other.group10()[1]]))
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group3()[3], other.group10()[0], other.group8()[1]]))),
            // e235, e315, e125
            (-(Simd32x3::from(self.group3()[3]) * swizzle!(other.group10(), 2, 1, 0))
                - (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group8()[0], other.group8()[1], other.group8()[2]]))
                + (Simd32x3::from(other.group3()[2]) * Simd32x3::from([self.group3()[1], self.group1()[0], self.group1()[3]]))
                + (Simd32x3::from(other.group8()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (swizzle!(other.group10(), 1, 0, 2) * Simd32x3::from([self.group2()[2], self.group2()[0], self.group2()[1]]))
                - (swizzle!(other.group10(), 0, 2, 1) * Simd32x3::from([self.group2()[1], self.group2()[2], self.group2()[0]]))
                - (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                - (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                + (Simd32x3::from(other.group3()[0]) * Simd32x3::from([self.group1()[3], self.group3()[2], self.group1()[1]]))
                + (Simd32x3::from(other.group3()[1]) * Simd32x3::from([self.group1()[2], self.group1()[3], self.group3()[0]]))
                - (Simd32x3::from(other.group8()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + Simd32x3::from([
                    (-(self.group3()[2] * other.group3()[1]) + (self.group2()[2] * other.group8()[1])
                        - (self.group2()[1] * other.group8()[2])
                        - (self.group1()[1] * other.group3()[2])),
                    (-(self.group3()[0] * other.group3()[2]) - (self.group2()[2] * other.group8()[0]) + (self.group2()[0] * other.group8()[2])
                        - (self.group1()[2] * other.group3()[0])),
                    (-(self.group3()[1] * other.group3()[0]) + (self.group2()[1] * other.group8()[0])
                        - (self.group2()[0] * other.group8()[1])
                        - (self.group1()[0] * other.group3()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group6()[0], other.group6()[1], other.group6()[2], other.group5()[3]]))
                - (swizzle!(other.group5(), 1, 2, 0, 2) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[2]]))
                + (swizzle!(self.group3(), 1, 2, 2, 3) * Simd32x4::from([other.group5()[2], other.group5()[0], other.group0()[1], other.group0()[1]]))
                + (swizzle!(self.group3(), 0, 1, 0, 2) * Simd32x4::from([other.group0()[1], other.group0()[1], other.group5()[1], other.group7()[2]]))
                + (swizzle!(self.group2(), 3, 3, 3, 2) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group1()[2]]))
                + (swizzle!(self.group2(), 2, 0, 1, 1) * Simd32x4::from([other.group6()[1], other.group6()[2], other.group6()[0], other.group1()[1]]))
                - (swizzle!(self.group2(), 1, 2, 2, 1) * Simd32x4::from([other.group6()[2], other.group6()[0], other.group1()[3], other.group5()[1]]))
                - (swizzle!(self.group2(), 0, 1, 0, 0) * Simd32x4::from([other.group1()[3], other.group1()[3], other.group6()[1], other.group5()[0]]))
                + (swizzle!(other.group1(), 1, 2, 0, 0) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]))
                - (swizzle!(self.group1(), 1, 2, 2, 3) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group5()[3], other[e1]]))
                - (swizzle!(self.group1(), 0, 1, 0, 2) * Simd32x4::from([other.group5()[3], other.group5()[3], other.group1()[1], other.group7()[2]]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group5()[0]) - (self.group0()[2] * other.group7()[1]) + (self.group0()[0] * other[e1]) + (self.group0()[1] * other.group7()[2])),
                    ((self.group1()[3] * other.group5()[1]) + (self.group0()[2] * other.group7()[0]) - (self.group0()[0] * other.group7()[2]) + (self.group0()[1] * other[e1])),
                    ((self.group1()[3] * other.group5()[2]) + (self.group0()[2] * other[e1]) + (self.group0()[0] * other.group7()[1]) - (self.group0()[1] * other.group7()[0])),
                    ((self.group3()[1] * other.group7()[1]) + (self.group3()[0] * other.group7()[0])
                        - (self.group1()[0] * other.group7()[0])
                        - (self.group1()[1] * other.group7()[1])),
                ])),
            // e1234
            (-(self.group3()[2] * other.group6()[2]) - (self.group3()[1] * other.group6()[1]) - (self.group3()[0] * other.group6()[0])
                + (self.group2()[3] * other.group5()[3])
                + (self.group2()[3] * other.group0()[1])
                + (self.group1()[3] * other.group1()[3])
                - (self.group1()[2] * other.group6()[2])
                - (self.group1()[1] * other.group6()[1])
                - (self.group1()[0] * other.group6()[0])
                - (self.group0()[2] * other.group5()[2])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[1] * other.group5()[1])
                - (self.group0()[1] * other.group1()[1])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[0] * other.group5()[0])),
            // e12, e31, e23
            ((Simd32x3::from(self.group3()[3]) * swizzle!(other.group6(), 2, 1, 0))
                - (Simd32x3::from(other.group5()[3]) * Simd32x3::from([self.group3()[2], self.group3()[1], self.group3()[0]]))
                + (Simd32x3::from(self.group2()[3]) * swizzle!(other.group7(), 2, 1, 0))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group2()[2], self.group2()[1], self.group2()[0]]))
                - (swizzle!(other.group6(), 0, 2, 1) * Simd32x3::from([self.group2()[1], self.group2()[0], self.group2()[2]]))
                + (swizzle!(other.group6(), 1, 0, 2) * Simd32x3::from([self.group2()[0], self.group2()[2], self.group2()[1]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[2], other.group1()[1], other.group1()[0]]))
                + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group1()[2], self.group1()[1], self.group1()[0]]))
                + (swizzle!(self.group0(), 2, 2, 0) * Simd32x3::from([other[e1], other.group7()[0], other[e1]]))
                + (swizzle!(self.group0(), 0, 1, 1) * Simd32x3::from([other.group7()[1], other[e1], other.group7()[2]]))
                - (swizzle!(self.group0(), 1, 0, 2) * swizzle!(other.group7(), 0, 2, 1))
                + Simd32x3::from([
                    ((self.group3()[1] * other.group1()[0]) - (self.group3()[0] * other.group1()[1]) - (self.group1()[1] * other.group5()[0])
                        + (self.group1()[0] * other.group5()[1])),
                    (-(self.group3()[2] * other.group1()[0]) + (self.group3()[0] * other.group1()[2]) + (self.group1()[2] * other.group5()[0])
                        - (self.group1()[0] * other.group5()[2])),
                    ((self.group3()[2] * other.group1()[1]) - (self.group3()[1] * other.group1()[2]) - (self.group1()[2] * other.group5()[1])
                        + (self.group1()[1] * other.group5()[2])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       67       95        0
    //    simd3        0        1        0
    //    simd4       51       53        0
    // Totals...
    // yes simd      118      149        0
    //  no simd      271      310        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[2]]))
                + (swizzle!(other.group0(), 2, 0, 1, 1) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[1]]))
                - (swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]))
                + Simd32x4::from([0.0, 0.0, 0.0, (self.group3()[0] * other.group0()[0])])),
            // e415, e425, e435, e321
            ((swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]))
                - (swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[2]]))
                - (swizzle!(other.group0(), 3, 3, 3, 0) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e235, e315, e125, e5
            ((swizzle!(other.group0(), 3, 3, 3, 2) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[2]]))
                + (swizzle!(self.group2(), 2, 0, 1, 1) * swizzle!(other.group0(), 1, 2, 0, 1))
                + Simd32x4::from([
                    (-(self.group3()[3] * other.group0()[0]) - (self.group1()[0] * other.group0()[3]) - (self.group2()[1] * other.group0()[2])),
                    (-(self.group3()[3] * other.group0()[1]) - (self.group2()[2] * other.group0()[0]) - (self.group1()[1] * other.group0()[3])),
                    (-(self.group3()[3] * other.group0()[2]) - (self.group1()[2] * other.group0()[3]) - (self.group2()[0] * other.group0()[1])),
                    ((self.group1()[3] * other.group0()[3]) + (self.group2()[0] * other.group0()[0])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group0()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2])),
                    ((self.group1()[2] * other.group0()[0]) + (self.group0()[1] * other.group0()[3])),
                    ((self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1])),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       63       99        0
    //    simd3        0        1        0
    //    simd4       55       57        0
    // Totals...
    // yes simd      118      157        0
    //  no simd      283      330        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((self.group3() * Simd32x4::from(other.group0()[3]))
                + (swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[2]]))
                + (swizzle!(other.group0(), 3, 3, 3, 1) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[1]]))
                + (swizzle!(other.group0(), 2, 0, 1, 0) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]))
                + (Simd32x4::from([
                    (self.group0()[2] * other.group0()[1]),
                    (self.group0()[0] * other.group0()[2]),
                    (self.group0()[1] * other.group0()[0]),
                    (self.group2()[3] * other[e2]),
                ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))),
            // e23, e31, e12, e45
            ((swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[2]]))
                - (swizzle!(self.group3(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))
                + (self.group2() * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other[e2]]))
                + Simd32x4::from([
                    ((self.group0()[0] * other[e2]) - (self.group1()[3] * other.group0()[0])),
                    ((self.group0()[1] * other[e2]) - (self.group1()[3] * other.group0()[1])),
                    ((self.group0()[2] * other[e2]) - (self.group1()[3] * other.group0()[2])),
                    ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
                ])),
            // e15, e25, e35, e1234
            (-(swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group0()[2]]))
                + (swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]))
                + Simd32x4::from([
                    (-(self.group3()[0] * other[e2]) + (self.group1()[0] * other[e2])),
                    (-(self.group3()[1] * other[e2]) + (self.group1()[1] * other[e2])),
                    (-(self.group3()[2] * other[e2]) + (self.group1()[2] * other[e2])),
                    ((self.group0()[1] * other.group0()[1]) * -1.0),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]))
                - (swizzle!(self.group1(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other[e2]]))
                + Simd32x4::from([
                    (-(self.group2()[0] * other.group0()[3]) + (self.group0()[0] * other[e2])),
                    (-(self.group2()[1] * other.group0()[3]) + (self.group0()[1] * other[e2])),
                    (-(self.group2()[2] * other.group0()[3]) + (self.group0()[2] * other[e2])),
                    ((self.group2()[1] * other.group0()[1]) + (self.group2()[0] * other.group0()[0])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       81        0
    //    simd3        0        1        0
    //    simd4       42       49        0
    // Totals...
    // yes simd       98      131        0
    //  no simd      224      280        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other[scalar] * -1.0),
                (self.group0()[1] * other[scalar] * -1.0),
                (self.group0()[2] * other[scalar] * -1.0),
                0.0,
            ]),
            // e415, e425, e435, e321
            (self.group1() * Simd32x4::from(other[scalar]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e235, e315, e125, e5
            (Simd32x4::from(other[scalar]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]) * Simd32x4::from(-1.0)),
            // e1, e2, e3, e4
            (Simd32x4::from(other[scalar]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[3]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       67      102        0
    //    simd3        0        1        0
    //    simd4       54       56        0
    // Totals...
    // yes simd      121      159        0
    //  no simd      283      329        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (-(self.group3() * Simd32x4::from(other[e4315]))
                + (swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[2]]))
                + (swizzle!(other.group0(), 2, 0, 1, 1) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[1]]))
                - (swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]))
                + (Simd32x4::from([
                    (self.group1()[0] * other[e4315]),
                    (self.group1()[1] * other[e4315]),
                    (self.group1()[2] * other[e4315]),
                    (self.group3()[0] * other.group0()[0]),
                ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))),
            // e415, e425, e435, e321
            ((swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]))
                - (swizzle!(self.group3(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other[e4315]]))
                - (swizzle!(other.group0(), 3, 3, 3, 2) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[2]]))
                - (swizzle!(self.group1(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))
                - Simd32x4::from([
                    (self.group2()[0] * other[e4315]),
                    (self.group2()[1] * other[e4315]),
                    (self.group2()[2] * other[e4315]),
                    (self.group1()[1] * other.group0()[1]),
                ])),
            // e235, e315, e125, e5
            ((swizzle!(other.group0(), 3, 3, 3, 2) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[2]]))
                + (swizzle!(self.group2(), 2, 0, 1, 1) * swizzle!(other.group0(), 1, 2, 0, 1))
                + Simd32x4::from([
                    (-(self.group3()[3] * other.group0()[0]) - (self.group1()[0] * other.group0()[3]) - (self.group2()[1] * other.group0()[2])),
                    (-(self.group3()[3] * other.group0()[1]) - (self.group2()[2] * other.group0()[0]) - (self.group1()[1] * other.group0()[3])),
                    (-(self.group3()[3] * other.group0()[2]) - (self.group1()[2] * other.group0()[3]) - (self.group2()[0] * other.group0()[1])),
                    ((self.group1()[3] * other.group0()[3]) + (self.group2()[0] * other.group0()[0])),
                ])),
            // e1, e2, e3, e4
            (-(Simd32x4::from(other[e4315]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                - (swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group0()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2])),
                    ((self.group1()[2] * other.group0()[0]) + (self.group0()[1] * other.group0()[3])),
                    ((self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1])),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      104      139        0
    //    simd3        0        1        0
    //    simd4       86       87        0
    // Totals...
    // yes simd      190      227        0
    //  no simd      448      490        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[2]]))
                + (swizzle!(self.group3(), 1, 2, 2, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group3()[3], other.group3()[3]]))
                + (swizzle!(self.group3(), 0, 1, 0, 2) * Simd32x4::from([other.group3()[3], other.group3()[3], other.group0()[1], other.group3()[2]]))
                + (swizzle!(other.group3(), 0, 1, 2, 1) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[1]]))
                + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                - (swizzle!(other.group0(), 1, 2, 0, 1) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[1]]))
                + (swizzle!(other.group3(), 3, 3, 3, 0) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[0]]))
                - (swizzle!(other.group1(), 1, 2, 0, 3) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[3]]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group0()[0]) + (self.group1()[1] * other.group0()[2]) - (self.group0()[2] * other.group3()[1])
                        + (self.group0()[1] * other.group3()[2])
                        + (self.group0()[1] * other.group1()[2])
                        + (self.group0()[0] * other.group0()[3])
                        + (self.group0()[0] * other.group1()[3])),
                    ((self.group1()[3] * other.group0()[1])
                        + (self.group1()[2] * other.group0()[0])
                        + (self.group0()[2] * other.group3()[0])
                        + (self.group0()[2] * other.group1()[0])
                        + (self.group0()[1] * other.group1()[3])
                        + (self.group0()[1] * other.group0()[3])
                        - (self.group0()[0] * other.group3()[2])),
                    ((self.group1()[3] * other.group0()[2])
                        + (self.group1()[0] * other.group0()[1])
                        + (self.group0()[2] * other.group1()[3])
                        + (self.group0()[2] * other.group0()[3])
                        - (self.group0()[1] * other.group3()[0])
                        + (self.group0()[0] * other.group1()[1])
                        + (self.group0()[0] * other.group3()[1])),
                    (-(self.group2()[0] * other.group0()[0])
                        - (self.group1()[2] * other.group1()[2])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e23, e31, e12, e45
            ((swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group2()[2]]))
                + (swizzle!(other.group3(), 1, 2, 0, 2) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[2]]))
                - (swizzle!(self.group3(), 1, 2, 2, 3) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[3], other.group3()[3]]))
                - (swizzle!(self.group3(), 0, 1, 0, 2) * Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group1()[2]]))
                + (Simd32x4::from(self.group2()[3]) * other.group2())
                + (swizzle!(self.group2(), 1, 2, 2, 1) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group3()[3], other.group0()[1]]))
                + (swizzle!(self.group2(), 0, 1, 0, 0) * Simd32x4::from([other.group3()[3], other.group3()[3], other.group0()[1], other.group0()[0]]))
                - (swizzle!(other.group1(), 1, 2, 0, 1) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[1]]))
                + (swizzle!(self.group1(), 1, 2, 2, 3) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group0()[3]]))
                + (swizzle!(self.group1(), 0, 1, 0, 1) * Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group3()[1]]))
                - (swizzle!(other.group2(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group2()[2] * other.group0()[1]) - (self.group1()[3] * other.group3()[0])
                        + (self.group0()[0] * other.group2()[3])
                        + (self.group0()[1] * other.group2()[2])),
                    (-(self.group2()[0] * other.group0()[2]) - (self.group1()[3] * other.group3()[1])
                        + (self.group0()[2] * other.group2()[0])
                        + (self.group0()[1] * other.group2()[3])),
                    (-(self.group2()[1] * other.group0()[0]) - (self.group1()[3] * other.group3()[2])
                        + (self.group0()[2] * other.group2()[3])
                        + (self.group0()[0] * other.group2()[1])),
                    (-(self.group3()[0] * other.group1()[0]) + (self.group1()[0] * other.group3()[0])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e15, e25, e35, e1234
            (-(swizzle!(self.group3(), 3, 3, 3, 2) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group0()[2]]))
                + (other.group1() * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group2()[3]]))
                - (swizzle!(self.group3(), 1, 2, 2, 1) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[3], other.group0()[1]]))
                - (swizzle!(self.group3(), 0, 1, 0, 0) * Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[1], other.group0()[0]]))
                + (swizzle!(self.group2(), 2, 2, 2, 3) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group0()[3], other.group0()[3]]))
                - (swizzle!(other.group1(), 1, 3, 3, 2) * Simd32x4::from([self.group2()[2], self.group2()[1], self.group2()[2], self.group0()[2]]))
                - (swizzle!(other.group3(), 2, 0, 1, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[2]]))
                - (swizzle!(other.group1(), 3, 2, 0, 1) * Simd32x4::from([self.group2()[0], self.group2()[0], self.group2()[1], self.group0()[1]]))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[2]]))
                - (swizzle!(self.group1(), 2, 0, 1, 1) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[1]]))
                + (swizzle!(self.group1(), 0, 2, 2, 3) * Simd32x4::from([other.group2()[3], other.group2()[0], other.group2()[3], other.group3()[3]]))
                + Simd32x4::from([
                    ((self.group3()[2] * other.group2()[1])
                        + (self.group2()[1] * other.group1()[2])
                        + (self.group2()[0] * other.group0()[3])
                        + (self.group1()[1] * other.group2()[2])),
                    ((self.group3()[0] * other.group2()[2])
                        + (self.group2()[1] * other.group0()[3])
                        + (self.group2()[0] * other.group3()[2])
                        + (self.group1()[1] * other.group2()[3])),
                    ((self.group3()[1] * other.group2()[0])
                        + (self.group2()[1] * other.group3()[0])
                        + (self.group2()[0] * other.group1()[1])
                        + (self.group1()[0] * other.group2()[1])),
                    (-(self.group1()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group3()[1])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group3()[0])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[2]]))
                + (swizzle!(self.group3(), 1, 2, 2, 3) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group0()[3]]))
                + (swizzle!(self.group3(), 0, 1, 0, 2) * Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group2()[2]]))
                + (swizzle!(other.group2(), 0, 1, 2, 1) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[1]]))
                + (swizzle!(self.group2(), 2, 0, 1, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[2]]))
                - (swizzle!(self.group2(), 1, 2, 2, 1) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group3()[3], other.group1()[1]]))
                - (swizzle!(self.group2(), 0, 1, 0, 0) * Simd32x4::from([other.group3()[3], other.group3()[3], other.group0()[1], other.group1()[0]]))
                + (swizzle!(other.group3(), 1, 2, 0, 1) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[1]]))
                - (swizzle!(self.group1(), 1, 2, 2, 3) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[3], other.group2()[3]]))
                - (swizzle!(self.group1(), 0, 1, 0, 2) * Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group2()[2]]))
                - (swizzle!(other.group2(), 1, 2, 0, 0) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]))
                + (swizzle!(other.group2(), 3, 0, 3, 0) * Simd32x4::from([self.group0()[0], self.group0()[2], self.group0()[2], self.group3()[0]]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group1()[0]) + (self.group0()[1] * other.group2()[2])),
                    ((self.group1()[3] * other.group1()[1]) + (self.group0()[1] * other.group2()[3])),
                    ((self.group1()[3] * other.group1()[2]) + (self.group0()[0] * other.group2()[1])),
                    ((self.group2()[0] * other.group3()[0]) - (self.group1()[1] * other.group2()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      116      151        0
    //    simd3        0        1        0
    //    simd4       83       84        0
    // Totals...
    // yes simd      199      236        0
    //  no simd      448      490        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((swizzle!(self.group3(), 2, 0, 1, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[2]]))
                - (swizzle!(self.group3(), 1, 2, 2, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group2()[3], other.group2()[3]]))
                + (swizzle!(other.group3(), 0, 1, 2, 1) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[1]]))
                - (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                - (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]))
                + (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[3], other.group2()[2]]))
                + (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group3()[2], other.group1()[3], other.group1()[0], other.group2()[1]]))
                + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[3], other.group1()[2], other.group3()[1], other.group2()[0]]))
                + Simd32x4::from([
                    (-(self.group3()[0] * other.group2()[3])
                        - (self.group1()[1] * other.group0()[2])
                        - (self.group1()[0] * other.group2()[3])
                        - (self.group0()[2] * other.group3()[1])
                        - (self.group0()[1] * other.group1()[2])
                        - (self.group0()[0] * other.group0()[3])),
                    (-(self.group3()[1] * other.group2()[3])
                        - (self.group1()[2] * other.group0()[0])
                        - (self.group1()[1] * other.group2()[3])
                        - (self.group0()[2] * other.group1()[0])
                        - (self.group0()[1] * other.group0()[3])
                        - (self.group0()[0] * other.group3()[2])),
                    (-(self.group3()[0] * other.group0()[1])
                        - (self.group1()[2] * other.group2()[3])
                        - (self.group1()[0] * other.group0()[1])
                        - (self.group0()[2] * other.group0()[3])
                        - (self.group0()[1] * other.group3()[0])
                        - (self.group0()[0] * other.group1()[1])),
                    ((self.group3()[0] * other.group3()[0])
                        + (self.group2()[1] * other.group0()[1])
                        + (self.group2()[0] * other.group0()[0])
                        + (self.group1()[2] * other.group1()[2])
                        + (self.group1()[1] * other.group1()[1])
                        + (self.group1()[0] * other.group1()[0])),
                ])),
            // e415, e425, e435, e321
            (-(Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                + (swizzle!(other.group3(), 1, 2, 0, 3) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]))
                - (swizzle!(self.group3(), 1, 2, 2, 2) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[3], other.group1()[2]]))
                - (swizzle!(self.group3(), 0, 1, 0, 1) * Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group1()[1]]))
                - (swizzle!(other.group2(), 0, 1, 2, 2) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[2]]))
                + (swizzle!(self.group2(), 2, 0, 1, 2) * swizzle!(other.group0(), 1, 2, 0, 2))
                - (swizzle!(other.group2(), 3, 3, 3, 0) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[0]]))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group3(), 0, 1, 2, 2))
                + (swizzle!(self.group1(), 2, 0, 1, 3) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[3]]))
                - (swizzle!(self.group1(), 1, 2, 2, 1) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group3()[1]]))
                - (swizzle!(self.group1(), 0, 1, 0, 0) * Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group3()[0]]))
                - (swizzle!(other.group2(), 2, 0, 1, 1) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group0()[1]]))
                + Simd32x4::from([
                    (-(self.group2()[1] * other.group0()[2]) + (self.group0()[2] * other.group2()[1]) - (self.group0()[0] * other.group3()[3])),
                    (-(self.group2()[2] * other.group0()[0]) + (self.group0()[0] * other.group2()[2]) - (self.group0()[1] * other.group3()[3])),
                    (-(self.group2()[0] * other.group0()[1]) - (self.group0()[2] * other.group3()[3]) + (self.group0()[1] * other.group2()[0])),
                    (-(self.group3()[0] * other.group1()[0]) + (self.group2()[1] * other.group0()[1]) + (self.group2()[0] * other.group0()[0])),
                ])),
            // e235, e315, e125, e5
            (-(Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))
                - (Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                - (swizzle!(self.group3(), 2, 0, 1, 2) * swizzle!(other.group2(), 1, 2, 0, 2))
                + (swizzle!(other.group2(), 2, 0, 1, 2) * Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[2]]))
                + (swizzle!(other.group3(), 3, 3, 3, 2) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[2]]))
                + (swizzle!(self.group2(), 2, 0, 1, 2) * Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[2]]))
                + (swizzle!(self.group2(), 2, 0, 1, 1) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[1]]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                + (swizzle!(self.group1(), 2, 0, 1, 0) * swizzle!(other.group2(), 1, 2, 0, 0))
                - (swizzle!(other.group2(), 2, 0, 1, 1) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[1]]))
                + Simd32x4::from([
                    (-(self.group2()[1] * other.group3()[2])
                        - (self.group2()[1] * other.group1()[2])
                        - (self.group2()[0] * other.group1()[3])
                        - (self.group2()[0] * other.group0()[3])
                        - (self.group1()[0] * other.group3()[3])),
                    (-(self.group2()[2] * other.group3()[0])
                        - (self.group2()[2] * other.group1()[0])
                        - (self.group2()[1] * other.group1()[3])
                        - (self.group2()[1] * other.group0()[3])
                        - (self.group1()[1] * other.group3()[3])),
                    (-(self.group2()[2] * other.group1()[3])
                        - (self.group2()[2] * other.group0()[3])
                        - (self.group2()[0] * other.group3()[1])
                        - (self.group2()[0] * other.group1()[1])
                        - (self.group1()[2] * other.group3()[3])),
                    (-(self.group3()[0] * other.group2()[0])
                        + (self.group2()[1] * other.group1()[1])
                        + (self.group2()[0] * other.group3()[0])
                        + (self.group2()[0] * other.group1()[0])
                        + (self.group1()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            (-(other.group0() * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group2()[3]]))
                + (swizzle!(self.group3(), 1, 2, 2, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group0()[2]]))
                + (swizzle!(self.group3(), 0, 1, 0, 1) * Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group0()[1]]))
                + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))
                + (swizzle!(other.group0(), 1, 2, 0, 0) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group3()[0]]))
                - (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                + (swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]))
                - (swizzle!(other.group3(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[2]]))
                + (swizzle!(self.group1(), 1, 2, 2, 1) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[3], other.group0()[1]]))
                + (swizzle!(self.group1(), 0, 1, 0, 0) * Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group0()[0]]))
                + Simd32x4::from([
                    (-(self.group3()[2] * other.group1()[1]) - (self.group2()[1] * other.group0()[2]) - (self.group0()[2] * other.group2()[1])
                        + (self.group0()[0] * other.group3()[3])
                        + (self.group0()[1] * other.group2()[2])),
                    (-(self.group3()[0] * other.group1()[2]) - (self.group2()[2] * other.group0()[0]) + (self.group0()[2] * other.group2()[0])
                        - (self.group0()[0] * other.group2()[2])
                        + (self.group0()[1] * other.group3()[3])),
                    (-(self.group3()[1] * other.group1()[0]) - (self.group2()[0] * other.group0()[1])
                        + (self.group0()[2] * other.group3()[3])
                        + (self.group0()[0] * other.group2()[1])
                        - (self.group0()[1] * other.group2()[0])),
                    ((self.group0()[2] * other.group1()[2]) - (self.group0()[1] * other.group3()[1])
                        + (self.group0()[1] * other.group1()[1])
                        + (self.group0()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group3()[0])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl InfixAntiSandwich for DualNum {}
impl AntiSandwich<AntiScalar> for DualNum {
    type Output = DualNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        3        0
    //    simd2        0        1        0
    // Totals...
    // yes simd        1        4        0
    //  no simd        1        5        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = DualNum::from_groups(/* e5, e12345 */ (self.group0() * Simd32x2::from(other[e12345])));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       33        0
    //    simd4        3        6        0
    // Totals...
    // yes simd       13       39        0
    //  no simd       22       57        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                0.0,
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group2()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group2()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group2()[2])),
                (self.group0()[0] * other.group1()[3] * -1.0),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       26        0
    //    simd4        4        9        0
    // Totals...
    // yes simd       11       35        0
    //  no simd       23       62        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3]),
            ]),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                + (Simd32x4::from([
                    (self.group0()[1] * other.group2()[0]),
                    (self.group0()[1] * other.group2()[1]),
                    (self.group0()[1] * other.group2()[2]),
                    (self.group0()[0] * other.group1()[3]),
                ]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       27        0
    //    simd3        0        1        0
    //    simd4        2        7        0
    // Totals...
    // yes simd       14       35        0
    //  no simd       20       58        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group0()[1]) * other.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group2()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group2()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group2()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group0()[0])
                * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]])
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       31        0
    //    simd4        5       10        0
    // Totals...
    // yes simd       18       41        0
    //  no simd       33       71        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[0] * other.group2()[3]),
            ]),
            // e23, e31, e12, e45
            ((Simd32x4::from(self.group0()[1]) * other.group1())
                + (Simd32x4::from([1.0, 1.0, 1.0, -1.0])
                    * Simd32x4::from(self.group0()[0])
                    * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[1] * other.group2()[0]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[0] * other.group3()[0])),
                ((self.group0()[1] * other.group2()[1]) + (self.group0()[0] * other.group1()[1]) + (self.group0()[0] * other.group3()[1])),
                ((self.group0()[1] * other.group2()[2]) + (self.group0()[0] * other.group1()[2]) + (self.group0()[0] * other.group3()[2])),
                (self.group0()[1] * other.group2()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(self.group0()[1]) * other.group3())
                + (Simd32x4::from([-1.0, -1.0, -1.0, 1.0])
                    * Simd32x4::from(self.group0()[0])
                    * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum> for DualNum {
    type Output = DualNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn anti_sandwich(self, other: DualNum) -> Self::Output {
        let geometric_anti_product = DualNum::from_groups(/* e5, e12345 */ Simd32x2::from([
            ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
            (self.group0()[1] * other.group0()[1]),
        ]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for DualNum {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       13        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        4       14        0
    //  no simd        4       17        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_anti_product = Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from(self.group0()[1]) * other.group0()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3])]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for DualNum {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        8       24        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        let geometric_anti_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[1] * other.group0()[2])),
                (self.group0()[1] * other.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[1] * other.group1()[0]),
                (self.group0()[1] * other.group1()[1]),
                (self.group0()[1] * other.group1()[2]),
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[3])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for DualNum {
    type Output = Line;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        2        6        0
    // no simd        6       18        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        let geometric_anti_product = Line::from_groups(
            // e415, e425, e435
            (Simd32x3::from(self.group0()[1]) * other.group0()),
            // e235, e315, e125
            ((Simd32x3::from(self.group0()[0]) * other.group0()) + (Simd32x3::from(self.group0()[1]) * other.group1())),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for DualNum {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        2        6        0
    // no simd        8       24        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        let geometric_anti_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(self.group0()[1]) * other.group0()),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group0()[0]) * other.group0()) + (Simd32x4::from(self.group0()[1]) * other.group1())),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for DualNum {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       46        0
    //    simd2        2        4        0
    //    simd3        6       14        0
    //    simd4        8       11        0
    // Totals...
    // yes simd       30       75        0
    //  no simd       68      140        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from(self.group0()[0]) * Simd32x2::from([other[e35], other.group1()[3]])) + (Simd32x2::from(self.group0()[1]) * other.group0())),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group6()[0]) + (self.group0()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group6()[1]) + (self.group0()[1] * other.group1()[1])),
                ((self.group0()[0] * other.group6()[2]) + (self.group0()[1] * other.group1()[2])),
                (self.group0()[1] * other.group1()[3]),
            ]),
            // e5
            ((self.group0()[1] * other[e1]) + (self.group0()[0] * other.group0()[1]) - (self.group0()[0] * other.group5()[3])),
            // e15, e25, e35, e45
            ((Simd32x4::from(self.group0()[1]) * other.group3())
                + Simd32x4::from([
                    ((self.group0()[0] * other.group8()[0]) + (self.group0()[0] * other.group10()[2])),
                    ((self.group0()[0] * other.group8()[1]) + (self.group0()[0] * other.group10()[1])),
                    ((self.group0()[0] * other.group8()[2]) + (self.group0()[0] * other.group10()[0])),
                    ((self.group0()[0] * other[e35]) * -1.0),
                ])),
            // e41, e42, e43
            (Simd32x3::from(self.group0()[1]) * other.group4()),
            // e415, e425, e435, e321
            ((Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group6()[0], other.group6()[1], other.group6()[2], other.group1()[3]]))
                + (Simd32x4::from(self.group0()[1]) * other.group5())),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[1]) * other.group6()),
            // e235, e315, e125
            ((Simd32x3::from(self.group0()[1]) * other.group7()) - (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group5()[0], other.group5()[1], other.group5()[2]]))),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(self.group0()[1]) * other.group8())
                + Simd32x4::from([
                    ((self.group0()[0] * other.group4()[0]) * -1.0),
                    ((self.group0()[0] * other.group4()[1]) * -1.0),
                    ((self.group0()[0] * other.group4()[2]) * -1.0),
                    ((self.group0()[0] * other.group0()[0]) + (self.group0()[0] * other.group3()[3])),
                ])),
            // e1234
            (self.group0()[1] * other[e35]),
            // e12, e31, e23
            ((Simd32x3::from(self.group0()[0]) * swizzle!(other.group4(), 2, 1, 0)) + (Simd32x3::from(self.group0()[1]) * other.group10())),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for DualNum {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       15        0
    //    simd4        0        1        0
    // Totals...
    // yes simd        4       16        0
    //  no simd        4       19        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        let geometric_anti_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group0()[1]) * other.group0()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       18        0
    //    simd4        3        8        0
    // Totals...
    // yes simd        7       26        0
    //  no simd       16       50        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3])]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3])]),
            // e235, e315, e125, e5
            (Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (self.group0()[1] * other[e2]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[1]) * other.group0()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       19        0
    //    simd4        3        4        0
    // Totals...
    // yes simd       10       23        0
    //  no simd       19       35        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other[scalar])]),
            // e23, e31, e12, e45
            Simd32x4::from(0.0),
            // e15, e25, e35, e1234
            Simd32x4::from(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other[scalar])]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       24        0
    //    simd4        3        5        0
    // Totals...
    // yes simd       10       29        0
    //  no simd       19       44        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other[e4315])]),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other[e4315] * -1.0)]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (self.group0()[1] * other[e4315]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group0()[1]) * other.group0()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       24        0
    //    simd4        6       11        0
    // Totals...
    // yes simd       14       35        0
    //  no simd       32       68        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group0()[3])),
            ]),
            // e415, e425, e435, e321
            ((Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group3()[3]]))
                + (Simd32x4::from(self.group0()[1]) * other.group1())),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group0()[1]) * other.group2())
                + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                - (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group3()[0])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group3()[1])),
                ((self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group3()[2])),
                (self.group0()[1] * other.group3()[3]),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       40        0
    //    simd4        5        8        0
    // Totals...
    // yes simd       20       48        0
    //  no simd       35       72        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                ((self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group0()[3])),
            ]),
            // e23, e31, e12, e45
            ((Simd32x4::from(self.group0()[1]) * other.group1())
                + (Simd32x4::from([1.0, 1.0, 1.0, -1.0])
                    * Simd32x4::from(self.group0()[0])
                    * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[1] * other.group2()[0]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[0] * other.group3()[0])),
                ((self.group0()[1] * other.group2()[1]) + (self.group0()[0] * other.group1()[1]) + (self.group0()[0] * other.group3()[1])),
                ((self.group0()[1] * other.group2()[2]) + (self.group0()[0] * other.group1()[2]) + (self.group0()[0] * other.group3()[2])),
                (self.group0()[1] * other.group2()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(self.group0()[1]) * other.group3())
                + Simd32x4::from([
                    ((self.group0()[0] * other.group0()[0]) * -1.0),
                    ((self.group0()[0] * other.group0()[1]) * -1.0),
                    ((self.group0()[0] * other.group0()[2]) * -1.0),
                    ((self.group0()[0] * other.group0()[3]) + (self.group0()[0] * other.group1()[3])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl InfixAntiSandwich for FlatPoint {}
impl AntiSandwich<AntiScalar> for FlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        8        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        3       10        0
    //  no simd        3       16        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = FlatPoint::from_groups(/* e15, e25, e35, e45 */ (self.group0() * Simd32x4::from(other[e12345])));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       29       55        0
    //    simd4       11       14        0
    // Totals...
    // yes simd       40       69        0
    //  no simd       73      111        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[3] * other.group1()[3])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])),
            ]),
            // e23, e31, e12, e45
            ((swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[2]]))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group0()[1]) * -1.0),
                    ((self.group0()[0] * other.group0()[2]) * -1.0),
                    ((self.group0()[1] * other.group0()[0]) * -1.0),
                    ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group0()[3] * other.group2()[0]) - (self.group0()[2] * other.group1()[1]) - (self.group0()[0] * other.group1()[3])
                    + (self.group0()[1] * other.group1()[2])),
                (-(self.group0()[3] * other.group2()[1]) + (self.group0()[2] * other.group1()[0])
                    - (self.group0()[0] * other.group1()[2])
                    - (self.group0()[1] * other.group1()[3])),
                (-(self.group0()[3] * other.group2()[2]) - (self.group0()[2] * other.group1()[3]) + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group1()[0]) + (self.group0()[2] * other.group0()[1])),
                    ((self.group0()[3] * other.group1()[1]) + (self.group0()[0] * other.group0()[2])),
                    ((self.group0()[3] * other.group1()[2]) + (self.group0()[1] * other.group0()[0])),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       33       59        0
    //    simd4       11       14        0
    // Totals...
    // yes simd       44       73        0
    //  no simd       77      115        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[3] * other.group1()[3])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])),
            ]),
            // e23, e31, e12, e45
            ((swizzle!(self.group0(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group0()[1]) * -1.0),
                    ((self.group0()[0] * other.group0()[2]) * -1.0),
                    ((self.group0()[1] * other.group0()[0]) * -1.0),
                    ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group0()[3] * other.group2()[0]) - (self.group0()[2] * other.group1()[1]) + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[3])
                    + (self.group0()[0] * other.group2()[3])),
                (-(self.group0()[3] * other.group2()[1]) + (self.group0()[2] * other.group1()[0]) + (self.group0()[1] * other.group2()[3])
                    - (self.group0()[0] * other.group1()[2])
                    - (self.group0()[1] * other.group1()[3])),
                (-(self.group0()[3] * other.group2()[2]) + (self.group0()[2] * other.group2()[3]) - (self.group0()[2] * other.group1()[3])
                    + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group1()[0]) + (self.group0()[2] * other.group0()[1])),
                    ((self.group0()[3] * other.group1()[1]) + (self.group0()[0] * other.group0()[2])),
                    ((self.group0()[3] * other.group1()[2]) + (self.group0()[1] * other.group0()[0])),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       41       78        0
    //    simd4        8       11        0
    // Totals...
    // yes simd       49       89        0
    //  no simd       73      122        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                (-(self.group0()[3] * other.group1()[3])
                    + (self.group0()[2] * other.group0()[2])
                    + (self.group0()[0] * other.group0()[0])
                    + (self.group0()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435, e321
            ((swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[2]]))
                + Simd32x4::from([
                    ((self.group0()[1] * other.group0()[2]) * -1.0),
                    ((self.group0()[2] * other.group0()[0]) * -1.0),
                    ((self.group0()[0] * other.group0()[1]) * -1.0),
                    ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            ((swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[2]]))
                + (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group1(), 1, 2, 0, 0))
                + Simd32x4::from([
                    (-(self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group1()[2])),
                    (-(self.group0()[2] * other.group1()[0]) - (self.group0()[1] * other.group1()[3])),
                    (-(self.group0()[2] * other.group1()[3]) - (self.group0()[0] * other.group1()[1])),
                    (self.group0()[1] * other.group1()[1]),
                ])),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[3] * other.group1()[0]) - (self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[3] * other.group1()[1]) + (self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                ((self.group0()[3] * other.group1()[2]) - (self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       92        0
    //    simd4        9       12        0
    // Totals...
    // yes simd       65      104        0
    //  no simd       92      140        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                (-(self.group0()[3] * other.group1()[3])
                    + (self.group0()[2] * other.group0()[2])
                    + (self.group0()[0] * other.group0()[0])
                    + (self.group0()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435, e321
            ((swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group0()[3] * other.group3()[0]) - (self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group0()[2])),
                    (-(self.group0()[3] * other.group3()[1]) - (self.group0()[2] * other.group0()[0]) - (self.group0()[1] * other.group2()[3])),
                    (-(self.group0()[3] * other.group3()[2]) - (self.group0()[2] * other.group2()[3]) - (self.group0()[0] * other.group0()[1])),
                    ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                + (swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group3()[1], other.group1()[2], other.group3()[0], other.group3()[2]]))
                + (swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group1()[1], other.group3()[2], other.group1()[0], other.group1()[2]]))
                + Simd32x4::from([
                    (-(self.group0()[1] * other.group3()[2]) - (self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group1()[2])),
                    (-(self.group0()[2] * other.group3()[0]) - (self.group0()[2] * other.group1()[0]) - (self.group0()[1] * other.group1()[3])),
                    (-(self.group0()[2] * other.group1()[3]) - (self.group0()[0] * other.group1()[1]) - (self.group0()[0] * other.group3()[1])),
                    ((self.group0()[1] * other.group3()[1])
                        + (self.group0()[1] * other.group1()[1])
                        + (self.group0()[0] * other.group1()[0])
                        + (self.group0()[0] * other.group3()[0])),
                ])),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[3] * other.group1()[0]) + (self.group0()[2] * other.group0()[1]) - (self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group0()[2])),
                ((self.group0()[3] * other.group1()[1]) - (self.group0()[2] * other.group0()[0]) + (self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group2()[3])),
                ((self.group0()[3] * other.group1()[2]) - (self.group0()[2] * other.group2()[3]) - (self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other.group2()[3] * -1.0),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum> for FlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       10        0
    //    simd4        2        6        0
    // Totals...
    // yes simd        6       16        0
    //  no simd       12       34        0
    fn anti_sandwich(self, other: DualNum) -> Self::Output {
        let geometric_anti_product = Flector::from_groups(
            // e15, e25, e35, e45
            (self.group0() * Simd32x4::from(other.group0()[1])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[0] * -1.0)]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for FlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       28        0
    //    simd4        0        1        0
    // Totals...
    // yes simd       15       29        0
    //  no simd       15       32        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_anti_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[3] * -1.0)]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0])),
                (-(self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
                (-(self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for FlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       28        0
    //    simd4        2        5        0
    // Totals...
    // yes simd       18       33        0
    //  no simd       24       48        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        let geometric_anti_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]) * Simd32x4::from(-1.0)),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (swizzle!(self.group0(), 2, 0, 1, 2) * swizzle!(other.group1(), 1, 2, 0, 2))
                + Simd32x4::from([
                    (-(self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group1()[2])),
                    (-(self.group0()[2] * other.group1()[0]) - (self.group0()[1] * other.group0()[3])),
                    (-(self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group1()[1])),
                    ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for FlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       23        0
    //    simd4        2        5        0
    // Totals...
    // yes simd       14       28        0
    //  no simd       20       43        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        let geometric_anti_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (-(self.group0()[3] * other.group1()[0]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[3] * other.group1()[1]) - (self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[3] * other.group1()[2]) + (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for FlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       28        0
    //    simd4        2        5        0
    // Totals...
    // yes simd       18       33        0
    //  no simd       24       48        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        let geometric_anti_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (-(self.group0()[3] * other.group1()[0]) - (self.group0()[2] * other.group0()[1])
                    + (self.group0()[0] * other.group0()[3])
                    + (self.group0()[1] * other.group0()[2])),
                (-(self.group0()[3] * other.group1()[1]) + (self.group0()[2] * other.group0()[0]) - (self.group0()[0] * other.group0()[2])
                    + (self.group0()[1] * other.group0()[3])),
                (-(self.group0()[3] * other.group1()[2]) + (self.group0()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1])
                    - (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[3] * other.group1()[3])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for FlatPoint {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       79      121        0
    //    simd2        2        2        0
    //    simd3       16       24        0
    //    simd4       16       18        0
    // Totals...
    // yes simd      113      165        0
    //  no simd      195      269        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            (-(Simd32x2::from(self.group0()[3]) * Simd32x2::from([other.group5()[3], other.group3()[3]]))
                + Simd32x2::from([
                    (-(self.group0()[2] * other.group6()[2]) - (self.group0()[0] * other.group6()[0]) - (self.group0()[1] * other.group6()[1])),
                    ((self.group0()[2] * other.group4()[2]) + (self.group0()[0] * other.group4()[0]) + (self.group0()[1] * other.group4()[1])),
                ])),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[3] * other.group10()[2]) + (self.group0()[2] * other.group4()[1]) - (self.group0()[0] * other[e35]) - (self.group0()[1] * other.group4()[2])),
                ((self.group0()[3] * other.group10()[1]) - (self.group0()[2] * other.group4()[0]) + (self.group0()[0] * other.group4()[2]) - (self.group0()[1] * other[e35])),
                ((self.group0()[3] * other.group10()[0]) - (self.group0()[2] * other[e35]) - (self.group0()[0] * other.group4()[1]) + (self.group0()[1] * other.group4()[0])),
                (self.group0()[3] * other[e35] * -1.0),
            ]),
            // e5
            ((self.group0()[3] * other.group8()[3])
                + (self.group0()[2] * other.group10()[0])
                + (self.group0()[2] * other.group8()[2])
                + (self.group0()[1] * other.group10()[1])
                + (self.group0()[1] * other.group8()[1])
                + (self.group0()[0] * other.group8()[0])
                + (self.group0()[0] * other.group10()[2])),
            // e15, e25, e35, e45
            ((swizzle!(self.group0(), 2, 2, 2, 3) * Simd32x4::from([other.group1()[1], other.group5()[0], other.group0()[1], other.group0()[1]]))
                + (swizzle!(self.group0(), 1, 1, 1, 2) * Simd32x4::from([other.group5()[2], other.group0()[1], other.group1()[0], other.group6()[2]]))
                + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[1], other.group1()[2], other.group5()[1], other.group6()[0]]))
                + Simd32x4::from([
                    (-(self.group0()[3] * other.group7()[0])
                        - (self.group0()[2] * other.group5()[1])
                        - (self.group0()[1] * other.group1()[2])
                        - (self.group0()[0] * other.group5()[3])),
                    (-(self.group0()[3] * other.group7()[1])
                        - (self.group0()[2] * other.group1()[0])
                        - (self.group0()[1] * other.group5()[3])
                        - (self.group0()[0] * other.group5()[2])),
                    (-(self.group0()[3] * other.group7()[2])
                        - (self.group0()[2] * other.group5()[3])
                        - (self.group0()[1] * other.group5()[0])
                        - (self.group0()[0] * other.group1()[1])),
                    (self.group0()[1] * other.group6()[1]),
                ])),
            // e41, e42, e43
            (Simd32x3::from(self.group0()[3]) * other.group6()),
            // e415, e425, e435, e321
            ((swizzle!(self.group0(), 2, 0, 1, 3) * Simd32x4::from([other.group4()[1], other.group4()[2], other.group4()[0], other.group0()[0]]))
                + Simd32x4::from([
                    (-(self.group0()[3] * other.group8()[0]) - (self.group0()[0] * other[e35]) - (self.group0()[1] * other.group4()[2])),
                    (-(self.group0()[3] * other.group8()[1]) - (self.group0()[2] * other.group4()[0]) - (self.group0()[1] * other[e35])),
                    (-(self.group0()[3] * other.group8()[2]) - (self.group0()[2] * other[e35]) - (self.group0()[0] * other.group4()[1])),
                    ((self.group0()[2] * other.group4()[2]) + (self.group0()[0] * other.group4()[0]) + (self.group0()[1] * other.group4()[1])),
                ])),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[3]) * other.group4() * Simd32x3::from(-1.0)),
            // e235, e315, e125
            ((Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (swizzle!(other.group10(), 1, 0, 2) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))
                - (swizzle!(other.group10(), 0, 2, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                - (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + Simd32x3::from([
                    ((self.group0()[2] * other.group8()[1]) - (self.group0()[1] * other.group8()[2])),
                    (-(self.group0()[2] * other.group8()[0]) + (self.group0()[0] * other.group8()[2])),
                    ((self.group0()[1] * other.group8()[0]) - (self.group0()[0] * other.group8()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other.group1()[2]]))
                + (swizzle!(self.group0(), 2, 0, 1, 1) * Simd32x4::from([other.group6()[1], other.group6()[2], other.group6()[0], other.group1()[1]]))
                - (swizzle!(self.group0(), 0, 2, 2, 3) * Simd32x4::from([other.group1()[3], other.group6()[0], other.group1()[3], other[e1]]))
                - (swizzle!(self.group0(), 1, 1, 0, 2) * Simd32x4::from([other.group6()[2], other.group1()[3], other.group6()[1], other.group5()[2]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    (-(self.group0()[1] * other.group5()[1]) + (self.group0()[0] * other.group1()[0]) - (self.group0()[0] * other.group5()[0])),
                ])),
            // e1234
            (self.group0()[3] * other.group1()[3]),
            // e12, e31, e23
            (-(Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[2], other.group1()[1], other.group1()[0]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group0()[2], self.group0()[1], self.group0()[0]]))
                + (swizzle!(other.group6(), 1, 0, 2) * Simd32x3::from([self.group0()[0], self.group0()[2], self.group0()[1]]))
                - (swizzle!(other.group6(), 0, 2, 1) * Simd32x3::from([self.group0()[1], self.group0()[0], self.group0()[2]]))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for FlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       35        0
    //    simd4        1        2        0
    // Totals...
    // yes simd       15       37        0
    //  no simd       18       43        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        let geometric_anti_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                0.0,
            ]),
            // e235, e315, e125, e5
            ((swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))
                + Simd32x4::from([
                    ((self.group0()[1] * other.group0()[2]) * -1.0),
                    ((self.group0()[2] * other.group0()[0]) * -1.0),
                    ((self.group0()[0] * other.group0()[1]) * -1.0),
                    ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       21       48        0
    //    simd4        9       10        0
    // Totals...
    // yes simd       30       58        0
    //  no simd       57       88        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) - (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) - (self.group0()[3] * other.group0()[2])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                (-(self.group0()[3] * other[e2]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       36        0
    //    simd3        0        2        0
    //    simd4        2        3        0
    // Totals...
    // yes simd       19       41        0
    //  no simd       25       54        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = Circle::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other[scalar])]),
            // e235, e315, e125
            (Simd32x3::from(other[scalar]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(-1.0)),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       33       59        0
    //    simd4        6       11        0
    // Totals...
    // yes simd       39       70        0
    //  no simd       57      103        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other[e4315]) - (self.group0()[3] * other.group0()[0])),
                (-(self.group0()[1] * other[e4315]) - (self.group0()[3] * other.group0()[1])),
                (-(self.group0()[2] * other[e4315]) - (self.group0()[3] * other.group0()[2])),
                0.0,
            ]),
            // e235, e315, e125, e5
            ((swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))
                + Simd32x4::from([
                    ((self.group0()[1] * other.group0()[2]) * -1.0),
                    ((self.group0()[2] * other.group0()[0]) * -1.0),
                    ((self.group0()[0] * other.group0()[1]) * -1.0),
                    ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
            // e1, e2, e3, e4
            (self.group0() * Simd32x4::from(other[e4315]) * Simd32x4::from(-1.0)),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       39       60        0
    //    simd4       15       18        0
    // Totals...
    // yes simd       54       78        0
    //  no simd       99      132        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[3] * other.group1()[3])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])),
            ]),
            // e23, e31, e12, e45
            ((swizzle!(self.group0(), 0, 2, 2, 3) * Simd32x4::from([other.group3()[3], other.group0()[0], other.group3()[3], other.group0()[3]]))
                + (swizzle!(self.group0(), 1, 1, 0, 2) * Simd32x4::from([other.group0()[2], other.group3()[3], other.group0()[1], other.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group0()[3] * other.group3()[0]) - (self.group0()[2] * other.group0()[1])),
                    (-(self.group0()[3] * other.group3()[1]) - (self.group0()[0] * other.group0()[2])),
                    (-(self.group0()[3] * other.group3()[2]) - (self.group0()[1] * other.group0()[0])),
                    ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group0()[3] * other.group2()[0]) + (self.group0()[2] * other.group3()[1])
                    - (self.group0()[2] * other.group1()[1])
                    - (self.group0()[1] * other.group3()[2])
                    + (self.group0()[1] * other.group1()[2])
                    + (self.group0()[0] * other.group0()[3])
                    - (self.group0()[0] * other.group1()[3])),
                (-(self.group0()[3] * other.group2()[1]) - (self.group0()[2] * other.group3()[0]) + (self.group0()[2] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[3])
                    + (self.group0()[1] * other.group0()[3])
                    - (self.group0()[0] * other.group1()[2])
                    + (self.group0()[0] * other.group3()[2])),
                (-(self.group0()[3] * other.group2()[2]) - (self.group0()[2] * other.group1()[3])
                    + (self.group0()[2] * other.group0()[3])
                    + (self.group0()[1] * other.group3()[0])
                    - (self.group0()[1] * other.group1()[0])
                    + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[0] * other.group3()[1])),
                (self.group0()[3] * other.group3()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            ((swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[2]]))
                + (swizzle!(self.group0(), 2, 0, 1, 1) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[1]]))
                - (swizzle!(self.group0(), 0, 2, 2, 3) * Simd32x4::from([other.group3()[3], other.group0()[0], other.group3()[3], other.group2()[3]]))
                - (swizzle!(self.group0(), 1, 1, 0, 2) * Simd32x4::from([other.group0()[2], other.group3()[3], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    (-(self.group0()[1] * other.group1()[1]) - (self.group0()[0] * other.group1()[0]) + (self.group0()[0] * other.group3()[0])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       60       96        0
    //    simd4        9       12        0
    // Totals...
    // yes simd       69      108        0
    //  no simd       96      144        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                (-(self.group0()[3] * other.group1()[3])
                    + (self.group0()[2] * other.group0()[2])
                    + (self.group0()[0] * other.group0()[0])
                    + (self.group0()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435, e321
            ((swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))
                + Simd32x4::from([
                    (-(self.group0()[3] * other.group3()[0]) - (self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group0()[2])),
                    (-(self.group0()[3] * other.group3()[1]) - (self.group0()[2] * other.group0()[0]) - (self.group0()[1] * other.group2()[3])),
                    (-(self.group0()[3] * other.group3()[2]) - (self.group0()[2] * other.group2()[3]) - (self.group0()[0] * other.group0()[1])),
                    ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                + (swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group3()[1], other.group1()[2], other.group3()[0], other.group3()[2]]))
                + (swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group1()[1], other.group3()[2], other.group1()[0], other.group1()[2]]))
                + Simd32x4::from([
                    (-(self.group0()[1] * other.group3()[2])
                        - (self.group0()[1] * other.group1()[2])
                        - (self.group0()[0] * other.group0()[3])
                        - (self.group0()[0] * other.group1()[3])),
                    (-(self.group0()[2] * other.group3()[0])
                        - (self.group0()[2] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[3])
                        - (self.group0()[1] * other.group0()[3])),
                    (-(self.group0()[2] * other.group1()[3])
                        - (self.group0()[2] * other.group0()[3])
                        - (self.group0()[0] * other.group1()[1])
                        - (self.group0()[0] * other.group3()[1])),
                    ((self.group0()[1] * other.group3()[1])
                        + (self.group0()[1] * other.group1()[1])
                        + (self.group0()[0] * other.group1()[0])
                        + (self.group0()[0] * other.group3()[0])),
                ])),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[3] * other.group1()[0]) + (self.group0()[2] * other.group0()[1]) - (self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group0()[2])),
                ((self.group0()[3] * other.group1()[1]) - (self.group0()[2] * other.group0()[0]) + (self.group0()[0] * other.group0()[2]) - (self.group0()[1] * other.group2()[3])),
                ((self.group0()[3] * other.group1()[2]) - (self.group0()[2] * other.group2()[3]) - (self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other.group2()[3] * -1.0),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl InfixAntiSandwich for Flector {}
impl AntiSandwich<AntiScalar> for Flector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       16        0
    //    simd4        8       11        0
    // Totals...
    // yes simd       16       27        0
    //  no simd       40       60        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = Flector::from_groups(
            // e15, e25, e35, e45
            (self.group0() * Simd32x4::from(other[e12345])),
            // e4235, e4315, e4125, e3215
            (self.group1() * Simd32x4::from(other[e12345])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       55       85        0
    //    simd4       31       32        0
    // Totals...
    // yes simd       86      117        0
    //  no simd      179      213        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(self.group1()[2] * other.group0()[1]) + (self.group0()[3] * other.group0()[0]) + (self.group1()[1] * other.group0()[2])),
                ((self.group1()[2] * other.group0()[0]) + (self.group0()[3] * other.group0()[1]) - (self.group1()[0] * other.group0()[2])),
                (-(self.group1()[1] * other.group0()[0]) + (self.group0()[3] * other.group0()[2]) + (self.group1()[0] * other.group0()[1])),
                (-(self.group0()[3] * other.group1()[3])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])),
            ]),
            // e23, e31, e12, e45
            (-(swizzle!(self.group1(), 0, 1, 2, 2) * swizzle!(other.group1(), 3, 3, 3, 2))
                + (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[2]]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group0()[0]) - (self.group0()[2] * other.group0()[1])),
                    ((self.group1()[3] * other.group0()[1]) - (self.group0()[0] * other.group0()[2])),
                    ((self.group1()[3] * other.group0()[2]) - (self.group0()[1] * other.group0()[0])),
                    (-(self.group1()[1] * other.group1()[1]) - (self.group1()[0] * other.group1()[0])
                        + (self.group0()[0] * other.group0()[0])
                        + (self.group0()[1] * other.group0()[1])),
                ])),
            // e15, e25, e35, e1234
            (-(swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[2]]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group1()[0]) + (self.group1()[2] * other.group2()[1])
                        - (self.group0()[3] * other.group2()[0])
                        - (self.group0()[2] * other.group1()[1])
                        - (self.group0()[0] * other.group1()[3])
                        + (self.group0()[1] * other.group1()[2])),
                    ((self.group1()[3] * other.group1()[1]) + (self.group1()[0] * other.group2()[2]) - (self.group0()[3] * other.group2()[1])
                        + (self.group0()[2] * other.group1()[0])
                        - (self.group0()[0] * other.group1()[2])
                        - (self.group0()[1] * other.group1()[3])),
                    ((self.group1()[3] * other.group1()[2]) + (self.group1()[1] * other.group2()[0])
                        - (self.group0()[3] * other.group2()[2])
                        - (self.group0()[2] * other.group1()[3])
                        + (self.group0()[0] * other.group1()[1])
                        - (self.group0()[1] * other.group1()[0])),
                    (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[2]]))
                + (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[2]]))
                - (swizzle!(self.group0(), 1, 2, 0, 0) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group1()[0]) + (self.group0()[2] * other.group0()[1])),
                    ((self.group0()[3] * other.group1()[1]) + (self.group0()[0] * other.group0()[2])),
                    ((self.group0()[3] * other.group1()[2]) + (self.group0()[1] * other.group0()[0])),
                    ((self.group1()[1] * other.group2()[1]) + (self.group1()[0] * other.group2()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       59       89        0
    //    simd4       32       33        0
    // Totals...
    // yes simd       91      122        0
    //  no simd      187      221        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(self.group1()[2] * other.group0()[1]) + (self.group0()[3] * other.group0()[0]) + (self.group1()[1] * other.group0()[2])),
                ((self.group1()[2] * other.group0()[0]) + (self.group0()[3] * other.group0()[1]) - (self.group1()[0] * other.group0()[2])),
                (-(self.group1()[1] * other.group0()[0]) + (self.group0()[3] * other.group0()[2]) + (self.group1()[0] * other.group0()[1])),
                (-(self.group0()[3] * other.group1()[3])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])),
            ]),
            // e23, e31, e12, e45
            (-(swizzle!(self.group1(), 0, 1, 2, 2) * swizzle!(other.group1(), 3, 3, 3, 2))
                + (swizzle!(self.group0(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group2()[3]]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group0()[0]) - (self.group0()[2] * other.group0()[1])),
                    ((self.group1()[3] * other.group0()[1]) - (self.group0()[0] * other.group0()[2])),
                    ((self.group1()[3] * other.group0()[2]) - (self.group0()[1] * other.group0()[0])),
                    (-(self.group1()[1] * other.group1()[1]) - (self.group1()[0] * other.group1()[0])
                        + (self.group0()[2] * other.group0()[2])
                        + (self.group0()[0] * other.group0()[0])
                        + (self.group0()[1] * other.group0()[1])),
                ])),
            // e15, e25, e35, e1234
            (-(swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[2]]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group1()[0]) + (self.group1()[2] * other.group2()[1])
                        - (self.group0()[3] * other.group2()[0])
                        - (self.group0()[2] * other.group1()[1])
                        + (self.group0()[1] * other.group1()[2])
                        - (self.group0()[0] * other.group1()[3])
                        + (self.group0()[0] * other.group2()[3])),
                    ((self.group1()[3] * other.group1()[1]) + (self.group1()[0] * other.group2()[2]) - (self.group0()[3] * other.group2()[1])
                        + (self.group0()[2] * other.group1()[0])
                        + (self.group0()[1] * other.group2()[3])
                        - (self.group0()[0] * other.group1()[2])
                        - (self.group0()[1] * other.group1()[3])),
                    ((self.group1()[3] * other.group1()[2]) + (self.group1()[1] * other.group2()[0]) - (self.group0()[3] * other.group2()[2])
                        + (self.group0()[2] * other.group2()[3])
                        - (self.group0()[2] * other.group1()[3])
                        + (self.group0()[0] * other.group1()[1])
                        - (self.group0()[1] * other.group1()[0])),
                    (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[2]]))
                + (swizzle!(self.group1(), 1, 2, 2, 3) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group2()[3], other.group2()[3]]))
                + (swizzle!(self.group1(), 0, 1, 0, 2) * Simd32x4::from([other.group2()[3], other.group2()[3], other.group1()[1], other.group2()[2]]))
                - (swizzle!(self.group0(), 1, 2, 0, 0) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group1()[0]) + (self.group0()[2] * other.group0()[1])),
                    ((self.group0()[3] * other.group1()[1]) + (self.group0()[0] * other.group0()[2])),
                    ((self.group0()[3] * other.group1()[2]) + (self.group0()[1] * other.group0()[0])),
                    ((self.group1()[1] * other.group2()[1]) + (self.group1()[0] * other.group2()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       69      106        0
    //    simd4       27       28        0
    // Totals...
    // yes simd       96      134        0
    //  no simd      177      218        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (-(Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group0()[1]) - (self.group1()[1] * other.group0()[2])),
                    (-(self.group1()[2] * other.group0()[0]) + (self.group1()[0] * other.group0()[2])),
                    ((self.group1()[1] * other.group0()[0]) - (self.group1()[0] * other.group0()[1])),
                    ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
            // e415, e425, e435, e321
            (-(swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]))
                - (swizzle!(self.group1(), 0, 1, 2, 1) * swizzle!(other.group1(), 3, 3, 3, 1))
                + (swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[2]]))
                + Simd32x4::from([
                    ((self.group0()[1] * other.group0()[2]) * -1.0),
                    ((self.group0()[2] * other.group0()[0]) * -1.0),
                    ((self.group0()[0] * other.group0()[1]) * -1.0),
                    (-(self.group1()[0] * other.group1()[0]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            (-(Simd32x4::from(self.group1()[3]) * other.group1())
                - (swizzle!(self.group1(), 2, 0, 1, 2) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group2()[2]]))
                + (swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[2]]))
                + (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group1(), 1, 2, 0, 0))
                + Simd32x4::from([
                    ((self.group1()[1] * other.group2()[2]) - (self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group1()[2])),
                    ((self.group1()[2] * other.group2()[0]) - (self.group0()[2] * other.group1()[0]) - (self.group0()[1] * other.group1()[3])),
                    ((self.group1()[0] * other.group2()[1]) - (self.group0()[2] * other.group1()[3]) - (self.group0()[0] * other.group1()[1])),
                    (-(self.group1()[1] * other.group2()[1]) - (self.group1()[0] * other.group2()[0]) + (self.group0()[1] * other.group1()[1])),
                ])),
            // e1, e2, e3, e4
            ((swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group1()[3] * other.group0()[0]) - (self.group1()[2] * other.group1()[1]) + (self.group0()[3] * other.group1()[0])
                        - (self.group0()[1] * other.group0()[2])
                        + (self.group0()[2] * other.group0()[1])),
                    (-(self.group1()[3] * other.group0()[1]) - (self.group1()[0] * other.group1()[2])
                        + (self.group0()[3] * other.group1()[1])
                        + (self.group0()[0] * other.group0()[2])
                        - (self.group0()[2] * other.group0()[0])),
                    (-(self.group1()[3] * other.group0()[2]) - (self.group1()[1] * other.group1()[0]) + (self.group0()[3] * other.group1()[2])
                        - (self.group0()[0] * other.group0()[1])
                        + (self.group0()[1] * other.group0()[0])),
                    ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       81      118        0
    //    simd4       34       35        0
    // Totals...
    // yes simd      115      153        0
    //  no simd      217      258        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((swizzle!(self.group1(), 2, 0, 1, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[2]]))
                - (swizzle!(self.group1(), 1, 2, 2, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group2()[3], other.group2()[3]]))
                - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group2()[3]) * -1.0),
                    ((self.group1()[1] * other.group2()[3]) * -1.0),
                    ((self.group1()[0] * other.group0()[1]) * -1.0),
                    ((self.group1()[1] * other.group3()[1])
                        + (self.group1()[0] * other.group3()[0])
                        + (self.group0()[2] * other.group0()[2])
                        + (self.group0()[0] * other.group0()[0])
                        + (self.group0()[1] * other.group0()[1])),
                ])),
            // e415, e425, e435, e321
            (-(Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (swizzle!(self.group1(), 1, 2, 2, 2) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[3], other.group1()[2]]))
                - (swizzle!(self.group1(), 0, 1, 0, 1) * Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group1()[1]]))
                + (swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[2]]))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group3()[1])
                        - (self.group0()[3] * other.group3()[0])
                        - (self.group0()[0] * other.group2()[3])
                        - (self.group0()[1] * other.group0()[2])),
                    ((self.group1()[0] * other.group3()[2])
                        - (self.group0()[3] * other.group3()[1])
                        - (self.group0()[2] * other.group0()[0])
                        - (self.group0()[1] * other.group2()[3])),
                    ((self.group1()[1] * other.group3()[0])
                        - (self.group0()[3] * other.group3()[2])
                        - (self.group0()[2] * other.group2()[3])
                        - (self.group0()[0] * other.group0()[1])),
                    (-(self.group1()[0] * other.group1()[0]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            (-(Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[2]]))
                - (swizzle!(self.group1(), 2, 0, 1, 1) * swizzle!(other.group2(), 1, 2, 0, 1))
                + (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]))
                + (swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[2]]))
                + (swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group3()[1], other.group1()[2], other.group3()[0], other.group1()[2]]))
                + (swizzle!(self.group0(), 2, 0, 1, 1) * Simd32x4::from([other.group1()[1], other.group3()[2], other.group1()[0], other.group3()[1]]))
                + Simd32x4::from([
                    ((self.group1()[1] * other.group2()[2])
                        - (self.group0()[1] * other.group3()[2])
                        - (self.group0()[0] * other.group1()[3])
                        - (self.group0()[1] * other.group1()[2])),
                    ((self.group1()[2] * other.group2()[0])
                        - (self.group0()[2] * other.group3()[0])
                        - (self.group0()[2] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[3])),
                    ((self.group1()[0] * other.group2()[1])
                        - (self.group0()[2] * other.group1()[3])
                        - (self.group0()[0] * other.group1()[1])
                        - (self.group0()[0] * other.group3()[1])),
                    (-(self.group1()[0] * other.group2()[0])
                        + (self.group0()[1] * other.group1()[1])
                        + (self.group0()[0] * other.group1()[0])
                        + (self.group0()[0] * other.group3()[0])),
                ])),
            // e1, e2, e3, e4
            ((swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]))
                - (swizzle!(self.group0(), 0, 2, 2, 3) * Simd32x4::from([other.group2()[3], other.group0()[0], other.group2()[3], other.group2()[3]]))
                + Simd32x4::from([
                    (-(self.group1()[3] * other.group0()[0]) - (self.group1()[2] * other.group1()[1])
                        + (self.group0()[3] * other.group1()[0])
                        + (self.group0()[2] * other.group0()[1])
                        - (self.group0()[1] * other.group0()[2])),
                    (-(self.group1()[3] * other.group0()[1]) - (self.group1()[0] * other.group1()[2])
                        + (self.group0()[3] * other.group1()[1])
                        + (self.group0()[0] * other.group0()[2])
                        - (self.group0()[1] * other.group2()[3])),
                    (-(self.group1()[3] * other.group0()[2]) - (self.group1()[1] * other.group1()[0]) + (self.group0()[3] * other.group1()[2])
                        - (self.group0()[0] * other.group0()[1])
                        + (self.group0()[1] * other.group0()[0])),
                    ((self.group1()[1] * other.group0()[1]) + (self.group1()[0] * other.group0()[0])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum> for Flector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       28        0
    //    simd4        8        9        0
    // Totals...
    // yes simd       20       37        0
    //  no simd       44       64        0
    fn anti_sandwich(self, other: DualNum) -> Self::Output {
        let geometric_anti_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[1]) - (self.group1()[0] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[1]) - (self.group1()[1] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[1]) - (self.group1()[2] * other.group0()[0])),
                (self.group0()[3] * other.group0()[1]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group1()[0] * other.group0()[1]),
                (self.group1()[1] * other.group0()[1]),
                (self.group1()[2] * other.group0()[1]),
                (-(self.group0()[3] * other.group0()[0]) + (self.group1()[3] * other.group0()[1])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for Flector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       33        0
    //    simd4        8       11        0
    // Totals...
    // yes simd       28       44        0
    //  no simd       52       77        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_anti_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]) * Simd32x4::from(-1.0)),
            // e235, e315, e125, e5
            (-(swizzle!(self.group1(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))
                - (swizzle!(other.group0(), 3, 3, 3, 2) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[1] * other.group0()[2]) + (self.group0()[3] * other.group0()[0])),
                    ((self.group1()[2] * other.group0()[0]) + (self.group0()[3] * other.group0()[1])),
                    ((self.group1()[0] * other.group0()[1]) + (self.group0()[3] * other.group0()[2])),
                    (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for Flector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       41        0
    //    simd4       14       15        0
    // Totals...
    // yes simd       38       56        0
    //  no simd       80      101        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        let geometric_anti_product = Motor::from_groups(
            // e415, e425, e435, e12345
            ((swizzle!(self.group1(), 2, 0, 1, 2) * swizzle!(other.group1(), 1, 2, 0, 2))
                - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                + Simd32x4::from([
                    (-(self.group1()[1] * other.group1()[2]) - (self.group1()[0] * other.group0()[3])),
                    (-(self.group1()[2] * other.group1()[0]) - (self.group1()[1] * other.group0()[3])),
                    (-(self.group1()[2] * other.group0()[3]) - (self.group1()[0] * other.group1()[1])),
                    ((self.group1()[1] * other.group1()[1]) + (self.group1()[0] * other.group1()[0])),
                ])),
            // e235, e315, e125, e5
            (-(Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                - (swizzle!(self.group1(), 2, 0, 1, 2) * swizzle!(other.group0(), 1, 2, 0, 2))
                + (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]))
                + (swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]))
                + (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group1(), 1, 2, 0, 0))
                - (swizzle!(other.group0(), 3, 3, 3, 1) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]))
                + Simd32x4::from([
                    ((self.group1()[1] * other.group0()[2]) - (self.group0()[1] * other.group1()[2])),
                    ((self.group1()[2] * other.group0()[0]) - (self.group0()[2] * other.group1()[0])),
                    ((self.group1()[0] * other.group0()[1]) - (self.group0()[0] * other.group1()[1])),
                    (-(self.group1()[0] * other.group0()[0]) + (self.group0()[1] * other.group1()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for Flector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       44        0
    //    simd4       10       11        0
    // Totals...
    // yes simd       38       55        0
    //  no simd       68       88        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        let geometric_anti_product = Flector::from_groups(
            // e15, e25, e35, e45
            (-(swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group0()[0]) + (self.group1()[2] * other.group1()[1]) - (self.group0()[3] * other.group1()[0])
                        + (self.group0()[1] * other.group0()[2])
                        - (self.group0()[2] * other.group0()[1])),
                    ((self.group1()[3] * other.group0()[1]) + (self.group1()[0] * other.group1()[2])
                        - (self.group0()[3] * other.group1()[1])
                        - (self.group0()[0] * other.group0()[2])
                        + (self.group0()[2] * other.group0()[0])),
                    ((self.group1()[3] * other.group0()[2]) + (self.group1()[1] * other.group1()[0]) - (self.group0()[3] * other.group1()[2])
                        + (self.group0()[0] * other.group0()[1])
                        - (self.group0()[1] * other.group0()[0])),
                    (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    (-(self.group1()[2] * other.group0()[1]) + (self.group0()[3] * other.group0()[0])),
                    ((self.group0()[3] * other.group0()[1]) - (self.group1()[0] * other.group0()[2])),
                    (-(self.group1()[1] * other.group0()[0]) + (self.group0()[3] * other.group0()[2])),
                    ((self.group1()[1] * other.group1()[1]) + (self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group0()[2])
                        - (self.group0()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group0()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for Flector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       21       36        0
    //    simd4       15       16        0
    // Totals...
    // yes simd       36       52        0
    //  no simd       81      100        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        let geometric_anti_product = Flector::from_groups(
            // e15, e25, e35, e45
            ((other.group0() * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[3]]))
                - (swizzle!(self.group1(), 1, 2, 2, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[3], other.group0()[2]]))
                - (swizzle!(self.group1(), 0, 1, 0, 1) * Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[1], other.group0()[1]]))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group1()[1]) - (self.group0()[3] * other.group1()[0])
                        + (self.group0()[0] * other.group0()[3])
                        + (self.group0()[1] * other.group0()[2])),
                    ((self.group1()[0] * other.group1()[2]) - (self.group0()[3] * other.group1()[1])
                        + (self.group0()[2] * other.group0()[0])
                        + (self.group0()[1] * other.group0()[3])),
                    ((self.group1()[1] * other.group1()[0]) - (self.group0()[3] * other.group1()[2])
                        + (self.group0()[2] * other.group0()[3])
                        + (self.group0()[0] * other.group0()[1])),
                    0.0,
                ])),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[2]]))
                + (swizzle!(self.group1(), 1, 2, 2, 3) * swizzle!(other.group0(), 2, 0, 3, 3))
                + (swizzle!(self.group1(), 0, 1, 0, 2) * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    (self.group0()[3] * other.group0()[0]),
                    (self.group0()[3] * other.group0()[1]),
                    (self.group0()[3] * other.group0()[2]),
                    ((self.group1()[1] * other.group1()[1]) + (self.group1()[0] * other.group1()[0])
                        - (self.group0()[3] * other.group1()[3])
                        - (self.group0()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group0()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for Flector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      151      196        0
    //    simd2        8        8        0
    //    simd3       40       44        0
    //    simd4       41       43        0
    // Totals...
    // yes simd      240      291        0
    //  no simd      451      516        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group1()[2], other.group8()[2]]))
                + (Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group1()[1], other.group8()[1]]))
                + (Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group1()[0], other.group8()[0]]))
                - (Simd32x2::from(self.group0()[3]) * Simd32x2::from([other.group5()[3], other.group3()[3]]))
                + Simd32x2::from([
                    ((self.group1()[3] * other.group1()[3])
                        - (self.group0()[2] * other.group6()[2])
                        - (self.group0()[0] * other.group6()[0])
                        - (self.group0()[1] * other.group6()[1])),
                    (-(self.group1()[3] * other[e35]) + (self.group0()[2] * other.group4()[2]) + (self.group0()[0] * other.group4()[0]) + (self.group0()[1] * other.group4()[1])),
                ])),
            // e1, e2, e3, e4
            ((swizzle!(self.group1(), 1, 2, 2, 2) * Simd32x4::from([other.group10()[0], other.group10()[2], other.group0()[0], other.group4()[2]]))
                + (swizzle!(self.group1(), 0, 1, 0, 1) * Simd32x4::from([other.group0()[0], other.group0()[0], other.group10()[1], other.group4()[1]]))
                - (swizzle!(self.group0(), 0, 2, 2, 3) * Simd32x4::from([other[e35], other.group4()[0], other[e35], other[e35]]))
                + Simd32x4::from([
                    (-(self.group1()[3] * other.group4()[0]) - (self.group1()[2] * other.group10()[1])
                        + (self.group0()[3] * other.group10()[2])
                        + (self.group0()[2] * other.group4()[1])
                        - (self.group0()[1] * other.group4()[2])),
                    (-(self.group1()[3] * other.group4()[1]) - (self.group1()[0] * other.group10()[0])
                        + (self.group0()[3] * other.group10()[1])
                        + (self.group0()[0] * other.group4()[2])
                        - (self.group0()[1] * other[e35])),
                    (-(self.group1()[3] * other.group4()[2]) - (self.group1()[1] * other.group10()[2]) + (self.group0()[3] * other.group10()[0])
                        - (self.group0()[0] * other.group4()[1])
                        + (self.group0()[1] * other.group4()[0])),
                    (self.group1()[0] * other.group4()[0]),
                ])),
            // e5
            (-(self.group1()[3] * other.group3()[3])
                - (self.group1()[3] * other.group0()[0])
                - (self.group1()[2] * other.group3()[2])
                - (self.group1()[1] * other.group3()[1])
                - (self.group1()[0] * other.group3()[0])
                + (self.group0()[3] * other.group8()[3])
                + (self.group0()[2] * other.group10()[0])
                + (self.group0()[2] * other.group8()[2])
                + (self.group0()[1] * other.group10()[1])
                + (self.group0()[1] * other.group8()[1])
                + (self.group0()[0] * other.group8()[0])
                + (self.group0()[0] * other.group10()[2])),
            // e15, e25, e35, e45
            (-(Simd32x4::from(self.group1()[3]) * other.group1())
                - (swizzle!(self.group1(), 1, 2, 2, 2) * Simd32x4::from([other.group7()[2], other.group7()[0], other[e1], other.group5()[2]]))
                - (swizzle!(self.group1(), 0, 1, 0, 1) * Simd32x4::from([other[e1], other[e1], other.group7()[1], other.group5()[1]]))
                - (swizzle!(other.group5(), 1, 3, 3, 0) * Simd32x4::from([self.group0()[2], self.group0()[1], self.group0()[2], self.group1()[0]]))
                + (swizzle!(self.group0(), 2, 2, 2, 3) * Simd32x4::from([other.group1()[1], other.group5()[0], other.group0()[1], other.group0()[1]]))
                + (swizzle!(self.group0(), 1, 1, 1, 2) * Simd32x4::from([other.group5()[2], other.group0()[1], other.group1()[0], other.group6()[2]]))
                + (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[1], other.group1()[2], other.group5()[1], other.group6()[0]]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group5()[0]) + (self.group1()[2] * other.group7()[1])
                        - (self.group0()[3] * other.group7()[0])
                        - (self.group0()[1] * other.group1()[2])
                        - (self.group0()[0] * other.group5()[3])),
                    ((self.group1()[3] * other.group5()[1]) + (self.group1()[0] * other.group7()[2])
                        - (self.group0()[3] * other.group7()[1])
                        - (self.group0()[2] * other.group1()[0])
                        - (self.group0()[0] * other.group5()[2])),
                    ((self.group1()[3] * other.group5()[2]) + (self.group1()[1] * other.group7()[0])
                        - (self.group0()[3] * other.group7()[2])
                        - (self.group0()[1] * other.group5()[0])
                        - (self.group0()[0] * other.group1()[1])),
                    (self.group0()[1] * other.group6()[1]),
                ])),
            // e41, e42, e43
            (-(swizzle!(other.group6(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))
                + (swizzle!(other.group6(), 2, 0, 2) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group0()[3]]))
                + (swizzle!(other.group6(), 0, 1, 1) * Simd32x3::from([self.group0()[3], self.group0()[3], self.group1()[0]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))),
            // e415, e425, e435, e321
            (-(Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[2], other[e35]]))
                - (swizzle!(self.group1(), 1, 2, 2, 2) * Simd32x4::from([other.group8()[2], other.group8()[0], other.group3()[3], other.group10()[0]]))
                - (swizzle!(self.group1(), 0, 1, 0, 1) * Simd32x4::from([other.group3()[3], other.group3()[3], other.group8()[1], other.group10()[1]]))
                + (swizzle!(self.group0(), 2, 0, 1, 3) * Simd32x4::from([other.group4()[1], other.group4()[2], other.group4()[0], other.group0()[0]]))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group8()[1]) - (self.group0()[3] * other.group8()[0]) - (self.group0()[0] * other[e35]) - (self.group0()[1] * other.group4()[2])),
                    ((self.group1()[0] * other.group8()[2]) - (self.group0()[3] * other.group8()[1]) - (self.group0()[2] * other.group4()[0]) - (self.group0()[1] * other[e35])),
                    ((self.group1()[1] * other.group8()[0]) - (self.group0()[3] * other.group8()[2]) - (self.group0()[2] * other[e35]) - (self.group0()[0] * other.group4()[1])),
                    (-(self.group1()[0] * other.group10()[2])
                        + (self.group0()[2] * other.group4()[2])
                        + (self.group0()[0] * other.group4()[0])
                        + (self.group0()[1] * other.group4()[1])),
                ])),
            // e423, e431, e412
            ((swizzle!(other.group4(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))
                - (swizzle!(other.group4(), 2, 0, 2) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group0()[3]]))
                - (swizzle!(other.group4(), 0, 1, 1) * Simd32x3::from([self.group0()[3], self.group0()[3], self.group1()[0]]))
                - (Simd32x3::from(other[e35]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))),
            // e235, e315, e125
            (-(Simd32x3::from(self.group1()[3]) * swizzle!(other.group10(), 2, 1, 0))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group8()[0], other.group8()[1], other.group8()[2]]))
                + (Simd32x3::from(other.group8()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (swizzle!(other.group10(), 1, 0, 2) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))
                - (swizzle!(other.group10(), 0, 2, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                - (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + Simd32x3::from([
                    (-(self.group1()[2] * other.group3()[1]) + (self.group1()[1] * other.group3()[2]) + (self.group0()[2] * other.group8()[1])
                        - (self.group0()[1] * other.group8()[2])),
                    ((self.group1()[2] * other.group3()[0]) - (self.group1()[0] * other.group3()[2]) - (self.group0()[2] * other.group8()[0])
                        + (self.group0()[0] * other.group8()[2])),
                    (-(self.group1()[1] * other.group3()[0]) + (self.group1()[0] * other.group3()[1]) + (self.group0()[1] * other.group8()[0])
                        - (self.group0()[0] * other.group8()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group6()[0], other.group6()[1], other.group6()[2], other.group5()[3]]))
                - (swizzle!(other.group5(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[2]]))
                + (swizzle!(self.group1(), 1, 2, 2, 3) * Simd32x4::from([other.group5()[2], other.group5()[0], other.group0()[1], other.group0()[1]]))
                + (swizzle!(self.group1(), 0, 1, 0, 2) * Simd32x4::from([other.group0()[1], other.group0()[1], other.group5()[1], other.group7()[2]]))
                + (swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other.group1()[2]]))
                + (swizzle!(self.group0(), 2, 0, 1, 1) * Simd32x4::from([other.group6()[1], other.group6()[2], other.group6()[0], other.group1()[1]]))
                - (swizzle!(self.group0(), 0, 2, 2, 3) * Simd32x4::from([other.group1()[3], other.group6()[0], other.group1()[3], other[e1]]))
                - (swizzle!(self.group0(), 1, 1, 0, 1) * Simd32x4::from([other.group6()[2], other.group1()[3], other.group6()[1], other.group5()[1]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    ((self.group1()[1] * other.group7()[1]) + (self.group1()[0] * other.group7()[0]) + (self.group0()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group5()[0])),
                ])),
            // e1234
            (-(self.group1()[2] * other.group6()[2]) - (self.group1()[1] * other.group6()[1]) + (self.group0()[3] * other.group1()[3]) - (self.group1()[0] * other.group6()[0])),
            // e12, e31, e23
            ((Simd32x3::from(self.group1()[3]) * swizzle!(other.group6(), 2, 1, 0))
                - (Simd32x3::from(other.group5()[3]) * Simd32x3::from([self.group1()[2], self.group1()[1], self.group1()[0]]))
                - (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[2], other.group1()[1], other.group1()[0]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group0()[2], self.group0()[1], self.group0()[0]]))
                + (swizzle!(other.group6(), 1, 0, 2) * Simd32x3::from([self.group0()[0], self.group0()[2], self.group0()[1]]))
                - (swizzle!(other.group6(), 0, 2, 1) * Simd32x3::from([self.group0()[1], self.group0()[0], self.group0()[2]]))
                + Simd32x3::from([
                    ((self.group1()[1] * other.group1()[0]) - (self.group1()[0] * other.group1()[1])),
                    (-(self.group1()[2] * other.group1()[0]) + (self.group1()[0] * other.group1()[2])),
                    ((self.group1()[2] * other.group1()[1]) - (self.group1()[1] * other.group1()[2])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for Flector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       41        0
    //    simd4        9       10        0
    // Totals...
    // yes simd       33       51        0
    //  no simd       60       81        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        let geometric_anti_product = Motor::from_groups(
            // e415, e425, e435, e12345
            ((swizzle!(self.group1(), 2, 0, 1, 2) * swizzle!(other.group0(), 1, 2, 0, 2))
                + Simd32x4::from([
                    (-(self.group0()[3] * other.group0()[0]) - (self.group1()[1] * other.group0()[2])),
                    (-(self.group1()[2] * other.group0()[0]) - (self.group0()[3] * other.group0()[1])),
                    (-(self.group0()[3] * other.group0()[2]) - (self.group1()[0] * other.group0()[1])),
                    ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            ((Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]))
                + (swizzle!(self.group0(), 2, 0, 1, 2) * swizzle!(other.group0(), 1, 2, 0, 2))
                + Simd32x4::from([
                    (-(self.group1()[3] * other.group0()[0]) - (self.group0()[1] * other.group0()[2])),
                    (-(self.group1()[3] * other.group0()[1]) - (self.group0()[2] * other.group0()[0])),
                    (-(self.group1()[3] * other.group0()[2]) - (self.group0()[0] * other.group0()[1])),
                    ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       43       77        0
    //    simd4       24       25        0
    // Totals...
    // yes simd       67      102        0
    //  no simd      139      177        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                ((self.group1()[3] * other.group0()[3]) + (self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group1()[2] * other.group0()[1]) - (self.group1()[1] * other.group0()[2]) + (self.group0()[0] * other.group0()[3]) - (self.group0()[3] * other.group0()[0])),
                (-(self.group1()[2] * other.group0()[0]) + (self.group1()[0] * other.group0()[2]) + (self.group0()[1] * other.group0()[3])
                    - (self.group0()[3] * other.group0()[1])),
                ((self.group1()[1] * other.group0()[0]) - (self.group1()[0] * other.group0()[1]) + (self.group0()[2] * other.group0()[3]) - (self.group0()[3] * other.group0()[2])),
                (self.group1()[3] * other.group0()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group1()[3] * other.group0()[0]) - (self.group1()[0] * other[e2]) - (self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                (-(self.group1()[3] * other.group0()[1]) - (self.group1()[1] * other[e2]) + (self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group1()[3] * other.group0()[2]) - (self.group1()[2] * other[e2]) - (self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                (-(self.group0()[3] * other[e2]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       41       63        0
    //    simd4       18       21        0
    // Totals...
    // yes simd       59       84        0
    //  no simd      113      147        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other[scalar])]),
            // e235, e315, e125, e5
            (Simd32x4::from(other[scalar]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]) * Simd32x4::from(-1.0)),
            // e1, e2, e3, e4
            Simd32x4::from([(self.group1()[0] * other[scalar]), (self.group1()[1] * other[scalar]), (self.group1()[2] * other[scalar]), 0.0]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       57       91        0
    //    simd4       20       23        0
    // Totals...
    // yes simd       77      114        0
    //  no simd      137      183        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group1()[0] * other[e4315] * -1.0),
                (self.group1()[1] * other[e4315] * -1.0),
                (self.group1()[2] * other[e4315] * -1.0),
                (-(self.group1()[3] * other[e4315]) + (self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self.group1()[2] * other.group0()[1]) - (self.group1()[1] * other.group0()[2]) - (self.group0()[0] * other[e4315]) - (self.group0()[3] * other.group0()[0])),
                (-(self.group1()[2] * other.group0()[0]) + (self.group1()[0] * other.group0()[2]) - (self.group0()[1] * other[e4315]) - (self.group0()[3] * other.group0()[1])),
                ((self.group1()[1] * other.group0()[0]) - (self.group1()[0] * other.group0()[1]) - (self.group0()[2] * other[e4315]) - (self.group0()[3] * other.group0()[2])),
                (self.group1()[3] * other[e4315] * -1.0),
            ]),
            // e235, e315, e125, e5
            ((Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]))
                + (swizzle!(self.group0(), 2, 0, 1, 2) * swizzle!(other.group0(), 1, 2, 0, 2))
                + Simd32x4::from([
                    (-(self.group1()[3] * other.group0()[0]) - (self.group0()[1] * other.group0()[2])),
                    (-(self.group1()[3] * other.group0()[1]) - (self.group0()[2] * other.group0()[0])),
                    (-(self.group1()[3] * other.group0()[2]) - (self.group0()[0] * other.group0()[1])),
                    ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
            // e1, e2, e3, e4
            (self.group0() * Simd32x4::from(other[e4315]) * Simd32x4::from(-1.0)),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       55       81        0
    //    simd4       44       45        0
    // Totals...
    // yes simd       99      126        0
    //  no simd      231      261        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[2]]))
                + (swizzle!(self.group1(), 1, 2, 2, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group3()[3], other.group3()[3]]))
                + (swizzle!(self.group1(), 0, 1, 0, 2) * Simd32x4::from([other.group3()[3], other.group3()[3], other.group0()[1], other.group3()[2]]))
                + Simd32x4::from([
                    (self.group0()[3] * other.group0()[0]),
                    (self.group0()[3] * other.group0()[1]),
                    (self.group0()[3] * other.group0()[2]),
                    ((self.group1()[1] * other.group3()[1]) + (self.group1()[0] * other.group3()[0])
                        - (self.group0()[3] * other.group1()[3])
                        - (self.group0()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group0()[1])),
                ])),
            // e23, e31, e12, e45
            ((other.group0() * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[3]]))
                - (swizzle!(self.group1(), 1, 2, 2, 3) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[3], other.group3()[3]]))
                - (swizzle!(self.group1(), 0, 1, 0, 2) * Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group1()[2]]))
                + (swizzle!(self.group0(), 0, 2, 2, 2) * Simd32x4::from([other.group3()[3], other.group0()[0], other.group3()[3], other.group0()[2]]))
                + (swizzle!(self.group0(), 1, 1, 0, 0) * Simd32x4::from([other.group0()[2], other.group3()[3], other.group0()[1], other.group0()[0]]))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group3()[1]) - (self.group0()[3] * other.group3()[0]) - (self.group0()[2] * other.group0()[1])),
                    ((self.group1()[0] * other.group3()[2]) - (self.group0()[3] * other.group3()[1]) - (self.group0()[0] * other.group0()[2])),
                    ((self.group1()[1] * other.group3()[0]) - (self.group0()[3] * other.group3()[2]) - (self.group0()[1] * other.group0()[0])),
                    (-(self.group1()[1] * other.group1()[1]) - (self.group1()[0] * other.group1()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
            // e15, e25, e35, e1234
            (-(swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group0()[2]]))
                - (swizzle!(self.group1(), 1, 2, 2, 1) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[3], other.group0()[1]]))
                - (swizzle!(self.group1(), 0, 1, 0, 0) * Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[1], other.group0()[0]]))
                + (swizzle!(self.group0(), 2, 2, 2, 3) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group0()[3], other.group3()[3]]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group1()[0]) + (self.group1()[2] * other.group2()[1])
                        - (self.group0()[3] * other.group2()[0])
                        - (self.group0()[2] * other.group1()[1])
                        - (self.group0()[1] * other.group3()[2])
                        + (self.group0()[1] * other.group1()[2])
                        + (self.group0()[0] * other.group0()[3])
                        - (self.group0()[0] * other.group1()[3])),
                    ((self.group1()[3] * other.group1()[1]) + (self.group1()[0] * other.group2()[2])
                        - (self.group0()[3] * other.group2()[1])
                        - (self.group0()[2] * other.group3()[0])
                        - (self.group0()[1] * other.group1()[3])
                        + (self.group0()[1] * other.group0()[3])
                        - (self.group0()[0] * other.group1()[2])
                        + (self.group0()[0] * other.group3()[2])),
                    ((self.group1()[3] * other.group1()[2]) + (self.group1()[1] * other.group2()[0])
                        - (self.group0()[3] * other.group2()[2])
                        - (self.group0()[2] * other.group1()[3])
                        + (self.group0()[1] * other.group3()[0])
                        - (self.group0()[1] * other.group1()[0])
                        + (self.group0()[0] * other.group1()[1])
                        - (self.group0()[0] * other.group3()[1])),
                    0.0,
                ])),
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[2]]))
                + (swizzle!(self.group1(), 1, 2, 2, 3) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group0()[3]]))
                + (swizzle!(self.group1(), 0, 1, 0, 2) * Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group2()[2]]))
                + (swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[2]]))
                + (swizzle!(self.group0(), 2, 0, 1, 1) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[1]]))
                - (swizzle!(self.group0(), 0, 2, 2, 3) * Simd32x4::from([other.group3()[3], other.group0()[0], other.group3()[3], other.group2()[3]]))
                - (swizzle!(self.group0(), 1, 1, 0, 1) * Simd32x4::from([other.group0()[2], other.group3()[3], other.group0()[1], other.group1()[1]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    ((self.group1()[1] * other.group2()[1]) + (self.group1()[0] * other.group2()[0]) - (self.group0()[0] * other.group1()[0])
                        + (self.group0()[0] * other.group3()[0])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       82      118        0
    //    simd4       36       37        0
    // Totals...
    // yes simd      118      155        0
    //  no simd      226      266        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((swizzle!(self.group1(), 2, 0, 1, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[2]]))
                - (swizzle!(self.group1(), 1, 2, 2, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group2()[3], other.group2()[3]]))
                - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group2()[3]) * -1.0),
                    ((self.group1()[1] * other.group2()[3]) * -1.0),
                    ((self.group1()[0] * other.group0()[1]) * -1.0),
                    ((self.group1()[1] * other.group3()[1])
                        + (self.group1()[0] * other.group3()[0])
                        + (self.group0()[2] * other.group0()[2])
                        + (self.group0()[0] * other.group0()[0])
                        + (self.group0()[1] * other.group0()[1])),
                ])),
            // e415, e425, e435, e321
            (-(Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (swizzle!(self.group1(), 1, 2, 2, 2) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[3], other.group1()[2]]))
                - (swizzle!(self.group1(), 0, 1, 0, 1) * Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group1()[1]]))
                + (swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group3()[1])
                        - (self.group0()[3] * other.group3()[0])
                        - (self.group0()[0] * other.group2()[3])
                        - (self.group0()[1] * other.group0()[2])),
                    ((self.group1()[0] * other.group3()[2])
                        - (self.group0()[3] * other.group3()[1])
                        - (self.group0()[2] * other.group0()[0])
                        - (self.group0()[1] * other.group2()[3])),
                    ((self.group1()[1] * other.group3()[0])
                        - (self.group0()[3] * other.group3()[2])
                        - (self.group0()[2] * other.group2()[3])
                        - (self.group0()[0] * other.group0()[1])),
                    (-(self.group1()[0] * other.group1()[0])
                        + (self.group0()[2] * other.group0()[2])
                        + (self.group0()[0] * other.group0()[0])
                        + (self.group0()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            (-(Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))
                - (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                - (swizzle!(self.group1(), 2, 0, 1, 2) * swizzle!(other.group2(), 1, 2, 0, 2))
                + (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]))
                + (swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[2]]))
                + (swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group3()[1], other.group1()[2], other.group3()[0], other.group1()[2]]))
                + (swizzle!(self.group0(), 2, 0, 1, 1) * Simd32x4::from([other.group1()[1], other.group3()[2], other.group1()[0], other.group3()[1]]))
                + Simd32x4::from([
                    ((self.group1()[1] * other.group2()[2])
                        - (self.group0()[1] * other.group3()[2])
                        - (self.group0()[1] * other.group1()[2])
                        - (self.group0()[0] * other.group0()[3])
                        - (self.group0()[0] * other.group1()[3])),
                    ((self.group1()[2] * other.group2()[0])
                        - (self.group0()[2] * other.group3()[0])
                        - (self.group0()[2] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[3])
                        - (self.group0()[1] * other.group0()[3])),
                    ((self.group1()[0] * other.group2()[1])
                        - (self.group0()[2] * other.group1()[3])
                        - (self.group0()[2] * other.group0()[3])
                        - (self.group0()[0] * other.group1()[1])
                        - (self.group0()[0] * other.group3()[1])),
                    (-(self.group1()[1] * other.group2()[1]) - (self.group1()[0] * other.group2()[0])
                        + (self.group0()[1] * other.group1()[1])
                        + (self.group0()[0] * other.group1()[0])
                        + (self.group0()[0] * other.group3()[0])),
                ])),
            // e1, e2, e3, e4
            ((swizzle!(self.group1(), 1, 2, 2, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group0()[2]]))
                + (swizzle!(self.group1(), 0, 1, 0, 1) * Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group0()[1]]))
                + (swizzle!(other.group0(), 1, 2, 0, 0) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]))
                - (swizzle!(self.group0(), 0, 2, 2, 3) * Simd32x4::from([other.group2()[3], other.group0()[0], other.group2()[3], other.group2()[3]]))
                + Simd32x4::from([
                    (-(self.group1()[3] * other.group0()[0]) - (self.group1()[2] * other.group1()[1]) + (self.group0()[3] * other.group1()[0])
                        - (self.group0()[1] * other.group0()[2])),
                    (-(self.group1()[3] * other.group0()[1]) - (self.group1()[0] * other.group1()[2]) + (self.group0()[3] * other.group1()[1])
                        - (self.group0()[1] * other.group2()[3])),
                    (-(self.group1()[3] * other.group0()[2]) - (self.group1()[1] * other.group1()[0]) + (self.group0()[3] * other.group1()[2])
                        - (self.group0()[0] * other.group0()[1])),
                    0.0,
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl InfixAntiSandwich for Line {}
impl AntiSandwich<AntiScalar> for Line {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       27        0
    //    simd3        0        4        0
    // Totals...
    // yes simd       19       31        0
    //  no simd       19       39        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = Line::from_groups(
            // e415, e425, e435
            (self.group0() * Simd32x3::from(other[e12345])),
            // e235, e315, e125
            (self.group1() * Simd32x3::from(other[e12345])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       88      120        0
    //    simd3        0        2        0
    //    simd4        9        9        0
    // Totals...
    // yes simd       97      131        0
    //  no simd      124      162        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group1()[2] * other.group0()[1]) + (self.group1()[1] * other.group0()[2]) + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])),
                ((self.group1()[2] * other.group0()[0]) - (self.group1()[0] * other.group0()[2]) - (self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                (-(self.group1()[1] * other.group0()[0]) + (self.group1()[0] * other.group0()[1]) + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            (-(swizzle!(other.group1(), 1, 3, 3, 2) * Simd32x4::from([self.group1()[2], self.group1()[1], self.group1()[2], self.group1()[2]]))
                - (swizzle!(other.group1(), 3, 2, 0, 1) * Simd32x4::from([self.group1()[0], self.group1()[0], self.group1()[1], self.group1()[1]]))
                + Simd32x4::from([
                    ((self.group1()[1] * other.group1()[2]) + (self.group0()[1] * other.group2()[2]) - (self.group0()[2] * other.group2()[1])),
                    ((self.group1()[2] * other.group1()[0]) - (self.group0()[0] * other.group2()[2]) + (self.group0()[2] * other.group2()[0])),
                    ((self.group1()[0] * other.group1()[1]) + (self.group0()[0] * other.group2()[1]) - (self.group0()[1] * other.group2()[0])),
                    (-(self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group1()[2] * other.group0()[1]) + (self.group0()[0] * other.group1()[3]) + (self.group1()[1] * other.group0()[2])),
                ((self.group1()[2] * other.group0()[0]) + (self.group0()[1] * other.group1()[3]) - (self.group1()[0] * other.group0()[2])),
                (-(self.group1()[1] * other.group0()[0]) + (self.group0()[2] * other.group1()[3]) + (self.group1()[0] * other.group0()[1])),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       90      122        0
    //    simd3        0        2        0
    //    simd4       10       10        0
    // Totals...
    // yes simd      100      134        0
    //  no simd      130      168        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group1()[2] * other.group0()[1]) + (self.group1()[1] * other.group0()[2]) - (self.group0()[2] * other.group1()[1])
                    + (self.group0()[0] * other.group2()[3])
                    + (self.group0()[1] * other.group1()[2])),
                ((self.group1()[2] * other.group0()[0]) - (self.group1()[0] * other.group0()[2]) + (self.group0()[2] * other.group1()[0]) - (self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group2()[3])),
                (-(self.group1()[1] * other.group0()[0])
                    + (self.group1()[0] * other.group0()[1])
                    + (self.group0()[2] * other.group2()[3])
                    + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            (-(swizzle!(other.group1(), 1, 3, 3, 2) * Simd32x4::from([self.group1()[2], self.group1()[1], self.group1()[2], self.group1()[2]]))
                - (swizzle!(other.group1(), 3, 2, 0, 1) * Simd32x4::from([self.group1()[0], self.group1()[0], self.group1()[1], self.group1()[1]]))
                - (swizzle!(other.group2(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group1()[1] * other.group1()[2]) + (self.group1()[0] * other.group2()[3]) + (self.group0()[1] * other.group2()[2])),
                    ((self.group1()[2] * other.group1()[0]) + (self.group1()[1] * other.group2()[3]) + (self.group0()[2] * other.group2()[0])),
                    ((self.group1()[2] * other.group2()[3]) + (self.group1()[0] * other.group1()[1]) + (self.group0()[0] * other.group2()[1])),
                    (-(self.group1()[0] * other.group1()[0]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group1()[2] * other.group0()[1]) + (self.group0()[0] * other.group1()[3]) + (self.group1()[1] * other.group0()[2])),
                ((self.group1()[2] * other.group0()[0]) + (self.group0()[1] * other.group1()[3]) - (self.group1()[0] * other.group0()[2])),
                (-(self.group1()[1] * other.group0()[0]) + (self.group0()[2] * other.group1()[3]) + (self.group1()[0] * other.group0()[1])),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      112      144        0
    //    simd3        0        2        0
    //    simd4        3        3        0
    // Totals...
    // yes simd      115      149        0
    //  no simd      124      162        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group1()[2] * other.group0()[1]) + (self.group1()[1] * other.group0()[2]) + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])),
                ((self.group1()[2] * other.group0()[0]) - (self.group1()[0] * other.group0()[2]) - (self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                (-(self.group1()[1] * other.group0()[0]) + (self.group1()[0] * other.group0()[1]) + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])),
                ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group1()[2] * other.group1()[1])
                    + (self.group1()[1] * other.group1()[2])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group0()[1] * other.group2()[2])
                    - (self.group0()[2] * other.group2()[1])),
                ((self.group1()[2] * other.group1()[0]) + (self.group1()[1] * other.group1()[3]) - (self.group1()[0] * other.group1()[2]) - (self.group0()[0] * other.group2()[2])
                    + (self.group0()[2] * other.group2()[0])),
                ((self.group1()[2] * other.group1()[3]) - (self.group1()[1] * other.group1()[0]) + (self.group1()[0] * other.group1()[1]) + (self.group0()[0] * other.group2()[1])
                    - (self.group0()[1] * other.group2()[0])),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group1()[2] * other.group0()[1]) + (self.group0()[0] * other.group1()[3]) - (self.group1()[1] * other.group0()[2])),
                (-(self.group1()[2] * other.group0()[0]) + (self.group0()[1] * other.group1()[3]) + (self.group1()[0] * other.group0()[2])),
                ((self.group1()[1] * other.group0()[0]) + (self.group0()[2] * other.group1()[3]) - (self.group1()[0] * other.group0()[1])),
                (-(self.group1()[2] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[1])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      134      166        0
    //    simd3        0        2        0
    //    simd4        5        5        0
    // Totals...
    // yes simd      139      173        0
    //  no simd      154      192        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(self.group0()[2] * other.group0()[1]) + (self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group0()[2])),
                ((self.group0()[2] * other.group0()[0]) - (self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group2()[3])),
                ((self.group0()[2] * other.group2()[3]) + (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group1()[2] * other.group0()[1])
                    + (self.group1()[1] * other.group0()[2])
                    + (self.group1()[0] * other.group2()[3])
                    + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])),
                ((self.group1()[2] * other.group0()[0]) + (self.group1()[1] * other.group2()[3]) - (self.group1()[0] * other.group0()[2]) - (self.group0()[0] * other.group1()[2])
                    + (self.group0()[2] * other.group1()[0])),
                ((self.group1()[2] * other.group2()[3]) - (self.group1()[1] * other.group0()[0]) + (self.group1()[0] * other.group0()[1]) + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])),
                ((self.group1()[2] * other.group0()[2]) + (self.group1()[1] * other.group0()[1]) + (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group3()[2])
                    - (self.group0()[0] * other.group3()[0])
                    - (self.group0()[1] * other.group3()[1])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group1()[2] * other.group3()[1]) - (self.group1()[2] * other.group1()[1])
                    + (self.group1()[1] * other.group3()[2])
                    + (self.group1()[1] * other.group1()[2])
                    + (self.group1()[0] * other.group1()[3])
                    - (self.group0()[2] * other.group2()[1])
                    + (self.group0()[0] * other.group3()[3])
                    + (self.group0()[1] * other.group2()[2])),
                ((self.group1()[2] * other.group3()[0]) + (self.group1()[2] * other.group1()[0]) + (self.group1()[1] * other.group1()[3])
                    - (self.group1()[0] * other.group3()[2])
                    - (self.group1()[0] * other.group1()[2])
                    + (self.group0()[2] * other.group2()[0])
                    - (self.group0()[0] * other.group2()[2])
                    + (self.group0()[1] * other.group3()[3])),
                ((self.group1()[2] * other.group1()[3]) - (self.group1()[1] * other.group3()[0]) - (self.group1()[1] * other.group1()[0])
                    + (self.group1()[0] * other.group3()[1])
                    + (self.group1()[0] * other.group1()[1])
                    + (self.group0()[2] * other.group3()[3])
                    + (self.group0()[0] * other.group2()[1])
                    - (self.group0()[1] * other.group2()[0])),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(other.group2(), 3, 3, 3, 2) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[2]]))
                - (swizzle!(other.group3(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group0()[1]) - (self.group1()[1] * other.group0()[2])
                        + (self.group0()[0] * other.group1()[3])
                        + (self.group0()[1] * other.group3()[2])),
                    (-(self.group1()[2] * other.group0()[0])
                        + (self.group1()[0] * other.group0()[2])
                        + (self.group0()[2] * other.group3()[0])
                        + (self.group0()[1] * other.group1()[3])),
                    ((self.group1()[1] * other.group0()[0]) - (self.group1()[0] * other.group0()[1])
                        + (self.group0()[2] * other.group1()[3])
                        + (self.group0()[0] * other.group3()[1])),
                    (-(self.group1()[2] * other.group1()[2])
                        - (self.group1()[1] * other.group3()[1])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group3()[0])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum> for Line {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       27        0
    //    simd3        1        5        0
    // Totals...
    // yes simd       20       32        0
    //  no simd       22       42        0
    fn anti_sandwich(self, other: DualNum) -> Self::Output {
        let geometric_anti_product = Line::from_groups(
            // e415, e425, e435
            (self.group0() * Simd32x3::from(other.group0()[1])),
            // e235, e315, e125
            ((self.group0() * Simd32x3::from(other.group0()[0])) + (self.group1() * Simd32x3::from(other.group0()[1]))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for Line {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       43        0
    //    simd3        0        2        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       30       47        0
    //  no simd       36       57        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_anti_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                ((self.group1()[1] * other.group0()[3]) - (self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group1()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for Line {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       56        0
    //    simd3        0        2        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       44       62        0
    //  no simd       56       78        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        let geometric_anti_product = Flector::from_groups(
            // e15, e25, e35, e45
            (-(swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group1()[1] * other.group1()[2]) + (self.group1()[0] * other.group0()[3]) - (self.group0()[2] * other.group0()[1])
                        + (self.group0()[0] * other.group1()[3])
                        + (self.group0()[1] * other.group0()[2])),
                    ((self.group1()[2] * other.group1()[0]) + (self.group1()[1] * other.group0()[3]) + (self.group0()[2] * other.group0()[0])
                        - (self.group0()[0] * other.group0()[2])
                        + (self.group0()[1] * other.group1()[3])),
                    ((self.group1()[2] * other.group0()[3])
                        + (self.group1()[0] * other.group1()[1])
                        + (self.group0()[2] * other.group1()[3])
                        + (self.group0()[0] * other.group0()[1])
                        - (self.group0()[1] * other.group0()[0])),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[2])),
                    ((self.group0()[2] * other.group1()[0]) + (self.group0()[1] * other.group0()[3])),
                    ((self.group0()[2] * other.group0()[3]) + (self.group0()[0] * other.group1()[1])),
                    (-(self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group0()[2])
                        - (self.group0()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group0()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for Line {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       35       51        0
    //    simd3        0        2        0
    //    simd4        3        3        0
    // Totals...
    // yes simd       38       56        0
    //  no simd       47       69        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        let geometric_anti_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (-(self.group1()[2] * other.group0()[1]) + (self.group1()[1] * other.group0()[2]) + (self.group0()[1] * other.group1()[2])
                    - (self.group0()[2] * other.group1()[1])),
                ((self.group1()[2] * other.group0()[0]) - (self.group1()[0] * other.group0()[2]) - (self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                (-(self.group1()[1] * other.group0()[0]) + (self.group1()[0] * other.group0()[1]) + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for Line {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       48        0
    //    simd3        0        2        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       38       56        0
    //  no simd       56       78        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        let geometric_anti_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2])),
                    ((self.group0()[2] * other.group0()[0]) + (self.group0()[1] * other.group0()[3])),
                    ((self.group0()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1])),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group1()[1] * other.group0()[2])
                        + (self.group1()[0] * other.group0()[3])
                        + (self.group0()[0] * other.group1()[3])
                        + (self.group0()[1] * other.group1()[2])),
                    ((self.group1()[2] * other.group0()[0])
                        + (self.group1()[1] * other.group0()[3])
                        + (self.group0()[2] * other.group1()[0])
                        + (self.group0()[1] * other.group1()[3])),
                    ((self.group1()[2] * other.group0()[3])
                        + (self.group1()[0] * other.group0()[1])
                        + (self.group0()[2] * other.group1()[3])
                        + (self.group0()[0] * other.group1()[1])),
                    (-(self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for Line {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      174      210        0
    //    simd2       10       12        0
    //    simd3       34       44        0
    //    simd4        6        6        0
    // Totals...
    // yes simd      224      272        0
    //  no simd      320      390        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            (-(Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group4()[2], other.group6()[2]]))
                - (Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group4()[1], other.group6()[1]]))
                - (Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group4()[0], other.group6()[0]]))
                - (Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group10()[0], other.group5()[2]]))
                - (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group10()[2], other.group5()[0]]))
                - (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group10()[1], other.group5()[1]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group1()[2] * other.group6()[1]) + (self.group1()[1] * other.group6()[2]) + (self.group1()[0] * other.group1()[3])
                    - (self.group0()[2] * other.group1()[1])
                    + (self.group0()[0] * other.group5()[3])
                    + (self.group0()[1] * other.group1()[2])),
                ((self.group1()[2] * other.group6()[0]) + (self.group1()[1] * other.group1()[3]) - (self.group1()[0] * other.group6()[2]) + (self.group0()[2] * other.group1()[0])
                    - (self.group0()[0] * other.group1()[2])
                    + (self.group0()[1] * other.group5()[3])),
                ((self.group1()[2] * other.group1()[3]) - (self.group1()[1] * other.group6()[0])
                    + (self.group1()[0] * other.group6()[1])
                    + (self.group0()[2] * other.group5()[3])
                    + (self.group0()[0] * other.group1()[1])
                    - (self.group0()[1] * other.group1()[0])),
                (-(self.group0()[2] * other.group6()[2]) - (self.group0()[0] * other.group6()[0]) - (self.group0()[1] * other.group6()[1])),
            ]),
            // e5
            (-(self.group1()[2] * other.group5()[2]) + (self.group1()[2] * other.group1()[2]) - (self.group1()[1] * other.group5()[1]) + (self.group1()[1] * other.group1()[1])
                - (self.group1()[0] * other.group5()[0])
                + (self.group1()[0] * other.group1()[0])
                - (self.group0()[2] * other.group7()[2])
                - (self.group0()[0] * other.group7()[0])
                - (self.group0()[1] * other.group7()[1])),
            // e15, e25, e35, e45
            (-(swizzle!(other.group8(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group1()[2] * other.group10()[1])
                        + (self.group1()[1] * other.group10()[0])
                        + (self.group1()[1] * other.group8()[2])
                        + (self.group1()[0] * other.group3()[3])
                        + (self.group1()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group3()[1])
                        + (self.group0()[0] * other.group8()[3])
                        + (self.group0()[1] * other.group3()[2])),
                    ((self.group1()[2] * other.group10()[2])
                        + (self.group1()[2] * other.group8()[0])
                        + (self.group1()[1] * other.group3()[3])
                        + (self.group1()[1] * other.group0()[0])
                        - (self.group1()[0] * other.group10()[0])
                        + (self.group0()[2] * other.group3()[0])
                        - (self.group0()[0] * other.group3()[2])
                        + (self.group0()[1] * other.group8()[3])),
                    ((self.group1()[2] * other.group3()[3]) + (self.group1()[2] * other.group0()[0]) - (self.group1()[1] * other.group10()[2])
                        + (self.group1()[0] * other.group10()[1])
                        + (self.group1()[0] * other.group8()[1])
                        + (self.group0()[2] * other.group8()[3])
                        + (self.group0()[0] * other.group3()[1])
                        - (self.group0()[1] * other.group3()[0])),
                    ((self.group1()[2] * other.group4()[2]) + (self.group1()[1] * other.group4()[1]) + (self.group1()[0] * other.group4()[0])
                        - (self.group0()[0] * other.group8()[0])
                        - (self.group0()[1] * other.group8()[1])),
                ])),
            // e41, e42, e43
            (-(swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group4(), 1, 2, 0))
                + (swizzle!(self.group0(), 0, 2, 2) * Simd32x3::from([other[e35], other.group4()[0], other[e35]]))
                + (swizzle!(self.group0(), 1, 1, 0) * Simd32x3::from([other.group4()[2], other[e35], other.group4()[1]]))),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group1()[2] * other.group6()[1]) + (self.group1()[1] * other.group6()[2]) + (self.group1()[0] * other.group1()[3])
                    - (self.group0()[2] * other.group5()[1])
                    + (self.group0()[0] * other.group0()[1])
                    + (self.group0()[1] * other.group5()[2])),
                ((self.group1()[2] * other.group6()[0]) + (self.group1()[1] * other.group1()[3]) - (self.group1()[0] * other.group6()[2]) + (self.group0()[2] * other.group5()[0])
                    - (self.group0()[0] * other.group5()[2])
                    + (self.group0()[1] * other.group0()[1])),
                ((self.group1()[2] * other.group1()[3]) - (self.group1()[1] * other.group6()[0])
                    + (self.group1()[0] * other.group6()[1])
                    + (self.group0()[2] * other.group0()[1])
                    + (self.group0()[0] * other.group5()[1])
                    - (self.group0()[1] * other.group5()[0])),
                (-(self.group1()[2] * other.group6()[2])
                    - (self.group1()[1] * other.group6()[1])
                    - (self.group1()[0] * other.group6()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e423, e431, e412
            (-(swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group6(), 1, 2, 0))
                + (swizzle!(self.group0(), 0, 2, 2) * Simd32x3::from([other.group1()[3], other.group6()[0], other.group1()[3]]))
                + (swizzle!(self.group0(), 1, 1, 0) * Simd32x3::from([other.group6()[2], other.group1()[3], other.group6()[1]]))),
            // e235, e315, e125
            (-(Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group5()[1], other.group1()[0], other.group5()[3]]))
                + (Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group1()[1], other.group5()[0], other.group0()[1]]))
                + (Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group5()[2], other.group0()[1], other.group1()[0]]))
                - (Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group1()[2], other.group5()[3], other.group5()[0]]))
                - (Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group5()[3], other.group5()[2], other.group1()[1]]))
                + (Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group0()[1], other.group1()[2], other.group5()[1]]))
                - (swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group7(), 1, 2, 0))
                + (swizzle!(self.group0(), 0, 2, 2) * Simd32x3::from([other[e1], other.group7()[0], other[e1]]))
                + (swizzle!(self.group0(), 1, 1, 0) * Simd32x3::from([other.group7()[2], other[e1], other.group7()[1]]))),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(other.group8(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group4()[1]) - (self.group1()[1] * other.group4()[2]) - (self.group1()[0] * other[e35])
                        + (self.group0()[0] * other.group3()[3])
                        + (self.group0()[1] * other.group8()[2])),
                    (-(self.group1()[2] * other.group4()[0]) - (self.group1()[1] * other[e35])
                        + (self.group1()[0] * other.group4()[2])
                        + (self.group0()[2] * other.group8()[0])
                        + (self.group0()[1] * other.group3()[3])),
                    (-(self.group1()[2] * other[e35]) + (self.group1()[1] * other.group4()[0]) - (self.group1()[0] * other.group4()[1])
                        + (self.group0()[2] * other.group3()[3])
                        + (self.group0()[0] * other.group8()[1])),
                    (-(self.group1()[2] * other.group10()[0])
                        - (self.group1()[1] * other.group10()[1])
                        - (self.group1()[1] * other.group8()[1])
                        - (self.group1()[0] * other.group10()[2])
                        - (self.group1()[0] * other.group8()[0])
                        - (self.group0()[2] * other.group3()[2])
                        - (self.group0()[0] * other.group3()[0])
                        - (self.group0()[1] * other.group3()[1])),
                ])),
            // e1234
            (-(self.group0()[2] * other.group4()[2]) - (self.group0()[0] * other.group4()[0]) - (self.group0()[1] * other.group4()[1])),
            // e12, e31, e23
            ((swizzle!(self.group1(), 2, 2, 1) * Simd32x3::from([other[e35], other.group4()[0], other.group4()[2]]))
                - (swizzle!(self.group1(), 1, 0, 2) * swizzle!(other.group4(), 0, 2, 1))
                + (swizzle!(self.group1(), 0, 1, 0) * Simd32x3::from([other.group4()[1], other[e35], other[e35]]))
                + (swizzle!(self.group0(), 2, 2, 0) * Simd32x3::from([other.group0()[0], other.group10()[2], other.group0()[0]]))
                + (swizzle!(self.group0(), 0, 1, 1) * Simd32x3::from([other.group10()[1], other.group0()[0], other.group10()[0]]))
                - (swizzle!(self.group0(), 1, 0, 2) * swizzle!(other.group10(), 2, 0, 1))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for Line {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       25       41        0
    //    simd3        0        2        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       29       47        0
    //  no simd       41       63        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        let geometric_anti_product = Flector::from_groups(
            // e15, e25, e35, e45
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group0()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2])),
                    ((self.group1()[2] * other.group0()[0]) + (self.group0()[1] * other.group0()[3])),
                    ((self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1])),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    (self.group0()[1] * other.group0()[2]),
                    (self.group0()[2] * other.group0()[0]),
                    (self.group0()[0] * other.group0()[1]),
                    (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       64       94        0
    //    simd3        0        2        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       72      104        0
    //  no simd       96      132        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            ((swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[0] * other[e2]) - (self.group1()[1] * other.group0()[2])),
                    (-(self.group1()[2] * other.group0()[0]) + (self.group0()[1] * other[e2])),
                    ((self.group0()[2] * other[e2]) - (self.group1()[0] * other.group0()[1])),
                    ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
                ])),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                ((self.group1()[1] * other.group0()[3]) - (self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group1()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       44       63        0
    //    simd3        0        3        0
    // Totals...
    // yes simd       44       66        0
    //  no simd       44       72        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([(self.group0()[0] * other[scalar]), (self.group0()[1] * other[scalar]), (self.group0()[2] * other[scalar]), 0.0]),
            // e15, e25, e35
            (self.group1() * Simd32x3::from(other[scalar])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       82      109        0
    //    simd3        0        3        0
    //    simd4        2        2        0
    // Totals...
    // yes simd       84      114        0
    //  no simd       90      126        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (self.group0() * Simd32x3::from(other[e4315])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group1()[0] * other[e4315]),
                (self.group1()[1] * other[e4315]),
                (self.group1()[2] * other[e4315]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group1()[2] * other.group0()[1]) + (self.group0()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2])),
                ((self.group1()[2] * other.group0()[0]) + (self.group0()[1] * other.group0()[3]) - (self.group1()[0] * other.group0()[2])),
                (-(self.group1()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    (-(self.group1()[0] * other[e4315]) + (self.group0()[1] * other.group0()[2])),
                    (-(self.group1()[1] * other[e4315]) + (self.group0()[2] * other.group0()[0])),
                    (-(self.group1()[2] * other[e4315]) + (self.group0()[0] * other.group0()[1])),
                    (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       92      124        0
    //    simd3        0        2        0
    //    simd4       17       17        0
    // Totals...
    // yes simd      109      143        0
    //  no simd      160      198        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group0()[2])),
                    ((self.group0()[2] * other.group0()[0]) + (self.group0()[1] * other.group3()[3])),
                    ((self.group0()[2] * other.group3()[3]) + (self.group0()[0] * other.group0()[1])),
                    (-(self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e415, e425, e435, e321
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[1] * other.group0()[2]) + (self.group1()[0] * other.group3()[3]) - (self.group0()[2] * other.group1()[1])
                        + (self.group0()[0] * other.group0()[3])
                        + (self.group0()[1] * other.group1()[2])),
                    ((self.group1()[2] * other.group0()[0]) + (self.group1()[1] * other.group3()[3]) + (self.group0()[2] * other.group1()[0])
                        - (self.group0()[0] * other.group1()[2])
                        + (self.group0()[1] * other.group0()[3])),
                    ((self.group1()[2] * other.group3()[3])
                        + (self.group1()[0] * other.group0()[1])
                        + (self.group0()[2] * other.group0()[3])
                        + (self.group0()[0] * other.group1()[1])
                        - (self.group0()[1] * other.group1()[0])),
                    (-(self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group3()[2])
                        - (self.group0()[0] * other.group3()[0])
                        - (self.group0()[1] * other.group3()[1])),
                ])),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group0()[3], other.group3()[2]]))
                - (Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[3], other.group1()[2]]))
                - (Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group3()[2], other.group1()[3], other.group1()[0], other.group1()[1]]))
                + (Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group1()[2], other.group0()[3], other.group3()[0], other.group3()[1]]))
                - (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group1()[3], other.group1()[2], other.group3()[1], other.group1()[0]]))
                + (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[3], other.group3()[2], other.group1()[1], other.group3()[0]]))
                - (swizzle!(other.group2(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group2()[2])),
                    ((self.group0()[2] * other.group2()[0]) + (self.group0()[1] * other.group2()[3])),
                    ((self.group0()[2] * other.group2()[3]) + (self.group0()[0] * other.group2()[1])),
                    (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group1()[1] * other.group0()[2]) + (self.group1()[0] * other.group3()[3]) - (self.group0()[2] * other.group3()[1])
                        + (self.group0()[0] * other.group1()[3])
                        + (self.group0()[1] * other.group3()[2])),
                    ((self.group1()[2] * other.group0()[0]) + (self.group1()[1] * other.group3()[3]) + (self.group0()[2] * other.group3()[0])
                        - (self.group0()[0] * other.group3()[2])
                        + (self.group0()[1] * other.group1()[3])),
                    ((self.group1()[2] * other.group3()[3])
                        + (self.group1()[0] * other.group0()[1])
                        + (self.group0()[2] * other.group1()[3])
                        + (self.group0()[0] * other.group3()[1])
                        - (self.group0()[1] * other.group3()[0])),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      128      160        0
    //    simd3        0        2        0
    //    simd4        8        8        0
    // Totals...
    // yes simd      136      170        0
    //  no simd      160      198        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group0()[2])),
                    ((self.group0()[2] * other.group0()[0]) + (self.group0()[1] * other.group2()[3])),
                    ((self.group0()[2] * other.group2()[3]) + (self.group0()[0] * other.group0()[1])),
                    (-(self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e23, e31, e12, e45
            ((swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group1()[2]]))
                + (swizzle!(other.group0(), 3, 3, 3, 1) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]))
                + Simd32x4::from([
                    (-(self.group1()[2] * other.group0()[1]) + (self.group1()[0] * other.group2()[3]) - (self.group0()[2] * other.group1()[1])
                        + (self.group0()[1] * other.group1()[2])),
                    ((self.group1()[1] * other.group2()[3]) - (self.group1()[0] * other.group0()[2]) + (self.group0()[2] * other.group1()[0])
                        - (self.group0()[0] * other.group1()[2])),
                    ((self.group1()[2] * other.group2()[3]) - (self.group1()[1] * other.group0()[0]) + (self.group0()[0] * other.group1()[1])
                        - (self.group0()[1] * other.group1()[0])),
                    ((self.group1()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group3()[2])
                        - (self.group0()[0] * other.group3()[0])
                        - (self.group0()[1] * other.group3()[1])),
                ])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group1()[2] * other.group3()[1]) - (self.group1()[2] * other.group1()[1])
                    + (self.group1()[1] * other.group3()[2])
                    + (self.group1()[1] * other.group1()[2])
                    + (self.group1()[0] * other.group1()[3])
                    + (self.group1()[0] * other.group0()[3])
                    - (self.group0()[2] * other.group2()[1])
                    + (self.group0()[0] * other.group3()[3])
                    + (self.group0()[1] * other.group2()[2])),
                ((self.group1()[2] * other.group3()[0]) + (self.group1()[2] * other.group1()[0]) + (self.group1()[1] * other.group1()[3]) + (self.group1()[1] * other.group0()[3])
                    - (self.group1()[0] * other.group3()[2])
                    - (self.group1()[0] * other.group1()[2])
                    + (self.group0()[2] * other.group2()[0])
                    - (self.group0()[0] * other.group2()[2])
                    + (self.group0()[1] * other.group3()[3])),
                ((self.group1()[2] * other.group1()[3]) + (self.group1()[2] * other.group0()[3]) - (self.group1()[1] * other.group3()[0]) - (self.group1()[1] * other.group1()[0])
                    + (self.group1()[0] * other.group3()[1])
                    + (self.group1()[0] * other.group1()[1])
                    + (self.group0()[2] * other.group3()[3])
                    + (self.group0()[0] * other.group2()[1])
                    - (self.group0()[1] * other.group2()[0])),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(other.group2(), 3, 3, 3, 2) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[2]]))
                - (swizzle!(other.group3(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[2] * other.group0()[1]) - (self.group1()[1] * other.group0()[2])
                        + (self.group0()[0] * other.group1()[3])
                        + (self.group0()[1] * other.group3()[2])),
                    (-(self.group1()[2] * other.group0()[0])
                        + (self.group1()[0] * other.group0()[2])
                        + (self.group0()[2] * other.group3()[0])
                        + (self.group0()[1] * other.group1()[3])),
                    ((self.group1()[1] * other.group0()[0]) - (self.group1()[0] * other.group0()[1])
                        + (self.group0()[2] * other.group1()[3])
                        + (self.group0()[0] * other.group3()[1])),
                    (-(self.group1()[2] * other.group1()[2])
                        - (self.group1()[1] * other.group3()[1])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group3()[0])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl InfixAntiSandwich for Motor {}
impl AntiSandwich<AntiScalar> for Motor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       30        0
    //    simd4        6        8        0
    // Totals...
    // yes simd       22       38        0
    //  no simd       40       62        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (self.group0() * Simd32x4::from(other[e12345])),
            // e235, e315, e125, e5
            (self.group1() * Simd32x4::from(other[e12345])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       77      114        0
    //    simd4       25       25        0
    // Totals...
    // yes simd      102      139        0
    //  no simd      177      214        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group0()[0]) + (self.group0()[1] * other.group0()[2])),
                    ((self.group0()[3] * other.group0()[1]) + (self.group0()[2] * other.group0()[0])),
                    ((self.group0()[3] * other.group0()[2]) + (self.group0()[0] * other.group0()[1])),
                    (-(self.group1()[2] * other.group0()[2])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e415, e425, e435, e321
            (-(swizzle!(self.group1(), 2, 0, 1, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[2]]))
                + (Simd32x4::from(self.group0()[3]) * other.group1())
                + Simd32x4::from([
                    ((self.group1()[3] * other.group0()[0]) + (self.group1()[1] * other.group0()[2]) + (self.group0()[1] * other.group1()[2])
                        - (self.group0()[2] * other.group1()[1])),
                    ((self.group1()[3] * other.group0()[1]) + (self.group1()[2] * other.group0()[0]) - (self.group0()[0] * other.group1()[2])
                        + (self.group0()[2] * other.group1()[0])),
                    ((self.group1()[3] * other.group0()[2]) + (self.group1()[0] * other.group0()[1]) + (self.group0()[0] * other.group1()[1])
                        - (self.group0()[1] * other.group1()[0])),
                    (-(self.group1()[1] * other.group0()[1]) - (self.group1()[0] * other.group0()[0])),
                ])),
            // e235, e315, e125, e5
            (-(swizzle!(self.group1(), 2, 1, 2, 3) * swizzle!(other.group1(), 1, 3, 3, 3))
                - (swizzle!(self.group1(), 0, 0, 1, 2) * swizzle!(other.group1(), 3, 2, 0, 2))
                - (swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group2()[2]]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group1()[0])
                        + (self.group1()[1] * other.group1()[2])
                        + (self.group0()[3] * other.group2()[0])
                        + (self.group0()[1] * other.group2()[2])),
                    ((self.group1()[3] * other.group1()[1])
                        + (self.group1()[2] * other.group1()[0])
                        + (self.group0()[3] * other.group2()[1])
                        + (self.group0()[2] * other.group2()[0])),
                    ((self.group1()[3] * other.group1()[2])
                        + (self.group1()[0] * other.group1()[1])
                        + (self.group0()[3] * other.group2()[2])
                        + (self.group0()[0] * other.group2()[1])),
                    (-(self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group1()[3] * other.group0()[0]) - (self.group1()[2] * other.group0()[1]) + (self.group0()[0] * other.group1()[3]) + (self.group1()[1] * other.group0()[2])),
                ((self.group1()[3] * other.group0()[1]) + (self.group1()[2] * other.group0()[0]) + (self.group0()[1] * other.group1()[3]) - (self.group1()[0] * other.group0()[2])),
                ((self.group1()[3] * other.group0()[2]) - (self.group1()[1] * other.group0()[0]) + (self.group0()[2] * other.group1()[3]) + (self.group1()[0] * other.group0()[1])),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       77      114        0
    //    simd4       27       27        0
    // Totals...
    // yes simd      104      141        0
    //  no simd      185      222        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[2]]))
                + Simd32x4::from([
                    (self.group0()[1] * other.group0()[2]),
                    (self.group0()[2] * other.group0()[0]),
                    (self.group0()[0] * other.group0()[1]),
                    (-(self.group1()[2] * other.group0()[2])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e415, e425, e435, e321
            (-(swizzle!(self.group1(), 2, 0, 1, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[2]]))
                + (Simd32x4::from(self.group0()[3]) * other.group1())
                + Simd32x4::from([
                    ((self.group1()[3] * other.group0()[0]) + (self.group1()[1] * other.group0()[2]) - (self.group0()[2] * other.group1()[1])
                        + (self.group0()[0] * other.group2()[3])
                        + (self.group0()[1] * other.group1()[2])),
                    ((self.group1()[3] * other.group0()[1]) + (self.group1()[2] * other.group0()[0]) + (self.group0()[2] * other.group1()[0])
                        - (self.group0()[0] * other.group1()[2])
                        + (self.group0()[1] * other.group2()[3])),
                    ((self.group1()[3] * other.group0()[2])
                        + (self.group1()[0] * other.group0()[1])
                        + (self.group0()[2] * other.group2()[3])
                        + (self.group0()[0] * other.group1()[1])
                        - (self.group0()[1] * other.group1()[0])),
                    (-(self.group1()[1] * other.group0()[1]) - (self.group1()[0] * other.group0()[0])),
                ])),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                - (swizzle!(self.group1(), 2, 1, 2, 3) * swizzle!(other.group1(), 1, 3, 3, 3))
                - (swizzle!(self.group1(), 0, 0, 1, 2) * swizzle!(other.group1(), 3, 2, 0, 2))
                - (swizzle!(self.group0(), 2, 0, 1, 2) * swizzle!(other.group2(), 1, 2, 0, 2))
                + Simd32x4::from([
                    ((self.group1()[1] * other.group1()[2])
                        + (self.group1()[0] * other.group2()[3])
                        + (self.group0()[3] * other.group2()[0])
                        + (self.group0()[1] * other.group2()[2])),
                    ((self.group1()[2] * other.group1()[0])
                        + (self.group1()[1] * other.group2()[3])
                        + (self.group0()[3] * other.group2()[1])
                        + (self.group0()[2] * other.group2()[0])),
                    ((self.group1()[2] * other.group2()[3])
                        + (self.group1()[0] * other.group1()[1])
                        + (self.group0()[3] * other.group2()[2])
                        + (self.group0()[0] * other.group2()[1])),
                    (-(self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group1()[3] * other.group0()[0]) - (self.group1()[2] * other.group0()[1]) + (self.group0()[0] * other.group1()[3]) + (self.group1()[1] * other.group0()[2])),
                ((self.group1()[3] * other.group0()[1]) + (self.group1()[2] * other.group0()[0]) + (self.group0()[1] * other.group1()[3]) - (self.group1()[0] * other.group0()[2])),
                ((self.group1()[3] * other.group0()[2]) - (self.group1()[1] * other.group0()[0]) + (self.group0()[2] * other.group1()[3]) + (self.group1()[0] * other.group0()[1])),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       80      118        0
    //    simd4       24       24        0
    // Totals...
    // yes simd      104      142        0
    //  no simd      176      214        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group0()[0]) + (self.group0()[1] * other.group0()[2])),
                    ((self.group0()[3] * other.group0()[1]) + (self.group0()[2] * other.group0()[0])),
                    ((self.group0()[3] * other.group0()[2]) + (self.group0()[0] * other.group0()[1])),
                    (-(self.group1()[2] * other.group0()[2])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e23, e31, e12, e45
            ((swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[2]]))
                + (swizzle!(self.group1(), 1, 2, 0, 1) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[1]]))
                + (Simd32x4::from(self.group0()[3]) * other.group1())
                + Simd32x4::from([
                    (-(self.group1()[2] * other.group0()[1]) + (self.group0()[1] * other.group1()[2]) - (self.group0()[2] * other.group1()[1])),
                    (-(self.group1()[0] * other.group0()[2]) - (self.group0()[0] * other.group1()[2]) + (self.group0()[2] * other.group1()[0])),
                    (-(self.group1()[1] * other.group0()[0]) + (self.group0()[0] * other.group1()[1]) - (self.group0()[1] * other.group1()[0])),
                    (self.group1()[0] * other.group0()[0]),
                ])),
            // e15, e25, e35, e1234
            (-(swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[2]]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group1()[0]) - (self.group1()[2] * other.group1()[1])
                        + (self.group1()[1] * other.group1()[2])
                        + (self.group1()[0] * other.group1()[3])
                        + (self.group0()[3] * other.group2()[0])
                        + (self.group0()[1] * other.group2()[2])),
                    ((self.group1()[3] * other.group1()[1]) + (self.group1()[2] * other.group1()[0]) + (self.group1()[1] * other.group1()[3])
                        - (self.group1()[0] * other.group1()[2])
                        + (self.group0()[3] * other.group2()[1])
                        + (self.group0()[2] * other.group2()[0])),
                    ((self.group1()[3] * other.group1()[2]) + (self.group1()[2] * other.group1()[3]) - (self.group1()[1] * other.group1()[0])
                        + (self.group1()[0] * other.group1()[1])
                        + (self.group0()[3] * other.group2()[2])
                        + (self.group0()[0] * other.group2()[1])),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]))
                + (swizzle!(self.group1(), 2, 0, 1, 3) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]))
                - (swizzle!(self.group1(), 1, 2, 0, 1) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[1]]))
                + Simd32x4::from([
                    (self.group0()[0] * other.group1()[3]),
                    (self.group0()[1] * other.group1()[3]),
                    (self.group0()[2] * other.group1()[3]),
                    (-(self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       88      126        0
    //    simd4       32       32        0
    // Totals...
    // yes simd      120      158        0
    //  no simd      216      254        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[2]]))
                + (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group0()[0]) + (self.group0()[1] * other.group0()[2])),
                    ((self.group0()[3] * other.group0()[1]) + (self.group0()[2] * other.group0()[0])),
                    ((self.group0()[3] * other.group0()[2]) + (self.group0()[0] * other.group0()[1])),
                    (-(self.group1()[2] * other.group0()[2])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e23, e31, e12, e45
            ((swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[2]]))
                - (swizzle!(self.group1(), 2, 0, 1, 3) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group2()[3]]))
                + (swizzle!(self.group1(), 1, 2, 2, 1) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group2()[3], other.group0()[1]]))
                + (swizzle!(self.group1(), 0, 1, 0, 0) * Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[1], other.group0()[0]]))
                + (Simd32x4::from(self.group0()[3]) * other.group1())
                - (swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[2]]))
                + Simd32x4::from([
                    (self.group0()[1] * other.group1()[2]),
                    (self.group0()[2] * other.group1()[0]),
                    (self.group0()[0] * other.group1()[1]),
                    (-(self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group3()[1])),
                ])),
            // e15, e25, e35, e1234
            ((Simd32x4::from(self.group0()[3]) * other.group2())
                - (swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[2]]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group3()[0]) + (self.group1()[3] * other.group1()[0])
                        - (self.group1()[2] * other.group3()[1])
                        - (self.group1()[2] * other.group1()[1])
                        + (self.group1()[1] * other.group3()[2])
                        + (self.group1()[1] * other.group1()[2])
                        + (self.group1()[0] * other.group1()[3])
                        + (self.group0()[0] * other.group3()[3])
                        + (self.group0()[1] * other.group2()[2])),
                    ((self.group1()[3] * other.group3()[1])
                        + (self.group1()[3] * other.group1()[1])
                        + (self.group1()[2] * other.group3()[0])
                        + (self.group1()[2] * other.group1()[0])
                        + (self.group1()[1] * other.group1()[3])
                        - (self.group1()[0] * other.group3()[2])
                        - (self.group1()[0] * other.group1()[2])
                        + (self.group0()[2] * other.group2()[0])
                        + (self.group0()[1] * other.group3()[3])),
                    ((self.group1()[3] * other.group3()[2]) + (self.group1()[3] * other.group1()[2]) + (self.group1()[2] * other.group1()[3])
                        - (self.group1()[1] * other.group3()[0])
                        - (self.group1()[1] * other.group1()[0])
                        + (self.group1()[0] * other.group3()[1])
                        + (self.group1()[0] * other.group1()[1])
                        + (self.group0()[2] * other.group3()[3])
                        + (self.group0()[0] * other.group2()[1])),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group3()[2]]))
                + (swizzle!(self.group1(), 2, 0, 1, 3) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]))
                - (swizzle!(self.group1(), 1, 2, 2, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group2()[3], other.group1()[2]]))
                - (swizzle!(self.group1(), 0, 1, 0, 1) * Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[1], other.group3()[1]]))
                + (Simd32x4::from(self.group0()[3]) * other.group3())
                - (swizzle!(other.group3(), 1, 2, 0, 0) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]))
                + Simd32x4::from([
                    ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group3()[2])),
                    ((self.group0()[2] * other.group3()[0]) + (self.group0()[1] * other.group1()[3])),
                    ((self.group0()[2] * other.group1()[3]) + (self.group0()[0] * other.group3()[1])),
                    (-(self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum> for Motor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       30        0
    //    simd4        7        9        0
    // Totals...
    // yes simd       23       39        0
    //  no simd       44       66        0
    fn anti_sandwich(self, other: DualNum) -> Self::Output {
        let geometric_anti_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (self.group0() * Simd32x4::from(other.group0()[1])),
            // e235, e315, e125, e5
            ((self.group0() * Simd32x4::from(other.group0()[0])) + (self.group1() * Simd32x4::from(other.group0()[1]))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for Motor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       25       46        0
    //    simd4        7        7        0
    // Totals...
    // yes simd       32       53        0
    //  no simd       53       74        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_anti_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                ((self.group1()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1]) - (self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group1()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2]) + (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                ((self.group1()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for Motor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       29       51        0
    //    simd4       13       13        0
    // Totals...
    // yes simd       42       64        0
    //  no simd       81      103        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        let geometric_anti_product = Flector::from_groups(
            // e15, e25, e35, e45
            (-(swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[2]]))
                + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]))
                - (swizzle!(self.group0(), 2, 0, 1, 0) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group1()[0])
                        + (self.group1()[1] * other.group1()[2])
                        + (self.group0()[3] * other.group0()[0])
                        + (self.group0()[0] * other.group1()[3])
                        + (self.group0()[1] * other.group0()[2])),
                    ((self.group1()[3] * other.group1()[1])
                        + (self.group1()[2] * other.group1()[0])
                        + (self.group0()[3] * other.group0()[1])
                        + (self.group0()[2] * other.group0()[0])
                        + (self.group0()[1] * other.group1()[3])),
                    ((self.group1()[3] * other.group1()[2])
                        + (self.group1()[0] * other.group1()[1])
                        + (self.group0()[3] * other.group0()[2])
                        + (self.group0()[2] * other.group1()[3])
                        + (self.group0()[0] * other.group0()[1])),
                    ((self.group0()[1] * other.group1()[1]) * -1.0),
                ])),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(self.group0()[3]) * other.group1())
                - (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + Simd32x4::from([
                    (self.group0()[1] * other.group1()[2]),
                    (self.group0()[2] * other.group1()[0]),
                    (self.group0()[0] * other.group1()[1]),
                    (-(self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group0()[2])
                        - (self.group0()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group0()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for Motor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       54        0
    //    simd4        9        9        0
    // Totals...
    // yes simd       41       63        0
    //  no simd       68       90        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        let geometric_anti_product = Motor::from_groups(
            // e415, e425, e435, e12345
            (-(swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group0()[0]) + (self.group0()[1] * other.group0()[2])),
                    ((self.group0()[3] * other.group0()[1]) + (self.group0()[2] * other.group0()[0])),
                    ((self.group0()[3] * other.group0()[2]) + (self.group0()[0] * other.group0()[1])),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            (-(swizzle!(self.group1(), 2, 0, 1, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[2]]))
                - (swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group0()[0])
                        + (self.group1()[1] * other.group0()[2])
                        + (self.group0()[3] * other.group1()[0])
                        + (self.group0()[1] * other.group1()[2])),
                    ((self.group1()[3] * other.group0()[1])
                        + (self.group1()[2] * other.group0()[0])
                        + (self.group0()[3] * other.group1()[1])
                        + (self.group0()[2] * other.group1()[0])),
                    ((self.group1()[3] * other.group0()[2])
                        + (self.group1()[0] * other.group0()[1])
                        + (self.group0()[3] * other.group1()[2])
                        + (self.group0()[0] * other.group1()[1])),
                    (-(self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for Motor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       54        0
    //    simd4       12       12        0
    // Totals...
    // yes simd       44       66        0
    //  no simd       80      102        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        let geometric_anti_product = Motor::from_groups(
            // e415, e425, e435, e12345
            ((Simd32x4::from(self.group0()[3]) * other.group0()) - (swizzle!(self.group0(), 2, 0, 1, 2) * swizzle!(other.group0(), 1, 2, 0, 2))
                + Simd32x4::from([
                    ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2])),
                    ((self.group0()[2] * other.group0()[0]) + (self.group0()[1] * other.group0()[3])),
                    ((self.group0()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1])),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group1()[3]) * other.group0()) - (swizzle!(self.group1(), 2, 0, 1, 2) * swizzle!(other.group0(), 1, 2, 0, 2))
                + (Simd32x4::from(self.group0()[3]) * other.group1())
                - (swizzle!(self.group0(), 2, 0, 1, 2) * swizzle!(other.group1(), 1, 2, 0, 2))
                + Simd32x4::from([
                    ((self.group1()[1] * other.group0()[2])
                        + (self.group1()[0] * other.group0()[3])
                        + (self.group0()[0] * other.group1()[3])
                        + (self.group0()[1] * other.group1()[2])),
                    ((self.group1()[2] * other.group0()[0])
                        + (self.group1()[1] * other.group0()[3])
                        + (self.group0()[2] * other.group1()[0])
                        + (self.group0()[1] * other.group1()[3])),
                    ((self.group1()[2] * other.group0()[3])
                        + (self.group1()[0] * other.group0()[1])
                        + (self.group0()[2] * other.group1()[3])
                        + (self.group0()[0] * other.group1()[1])),
                    (-(self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for Motor {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      121      168        0
    //    simd2       14       16        0
    //    simd3       45       52        0
    //    simd4       41       41        0
    // Totals...
    // yes simd      221      277        0
    //  no simd      448      520        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from(self.group1()[3]) * Simd32x2::from([other[e35], other.group1()[3]]))
                - (Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group4()[2], other.group6()[2]]))
                - (Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group4()[1], other.group6()[1]]))
                - (Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group4()[0], other.group6()[0]]))
                + (Simd32x2::from(self.group0()[3]) * other.group0())
                - (Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group10()[0], other.group5()[2]]))
                - (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group10()[2], other.group5()[0]]))
                - (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group10()[1], other.group5()[1]]))),
            // e1, e2, e3, e4
            ((Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]))
                - (swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group6()[2]]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group6()[0]) - (self.group1()[2] * other.group6()[1])
                        + (self.group1()[1] * other.group6()[2])
                        + (self.group0()[3] * other.group1()[0])
                        + (self.group0()[0] * other.group5()[3])
                        + (self.group0()[1] * other.group1()[2])),
                    ((self.group1()[3] * other.group6()[1]) + (self.group1()[2] * other.group6()[0]) - (self.group1()[0] * other.group6()[2])
                        + (self.group0()[3] * other.group1()[1])
                        + (self.group0()[2] * other.group1()[0])
                        + (self.group0()[1] * other.group5()[3])),
                    ((self.group1()[3] * other.group6()[2]) - (self.group1()[1] * other.group6()[0])
                        + (self.group1()[0] * other.group6()[1])
                        + (self.group0()[3] * other.group1()[2])
                        + (self.group0()[2] * other.group5()[3])
                        + (self.group0()[0] * other.group1()[1])),
                    (-(self.group0()[0] * other.group6()[0]) - (self.group0()[1] * other.group6()[1])),
                ])),
            // e5
            (-(self.group1()[3] * other.group5()[3]) + (self.group1()[3] * other.group0()[1]) - (self.group1()[2] * other.group5()[2]) + (self.group1()[2] * other.group1()[2])
                - (self.group1()[1] * other.group5()[1])
                + (self.group1()[1] * other.group1()[1])
                - (self.group1()[0] * other.group5()[0])
                + (self.group1()[0] * other.group1()[0])
                + (self.group0()[3] * other[e1])
                - (self.group0()[2] * other.group7()[2])
                - (self.group0()[0] * other.group7()[0])
                - (self.group0()[1] * other.group7()[1])),
            // e15, e25, e35, e45
            ((swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group10()[2], other.group10()[1], other.group10()[0], other.group4()[2]]))
                + (swizzle!(self.group1(), 3, 3, 3, 1) * Simd32x4::from([other.group8()[0], other.group8()[1], other.group8()[2], other.group4()[1]]))
                - (swizzle!(self.group1(), 2, 0, 1, 3) * Simd32x4::from([other.group10()[1], other.group10()[0], other.group10()[2], other[e35]]))
                - (swizzle!(other.group8(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[2]]))
                + (swizzle!(self.group1(), 1, 2, 2, 0) * Simd32x4::from([other.group10()[0], other.group10()[2], other.group3()[3], other.group4()[0]]))
                + (swizzle!(other.group3(), 3, 3, 2, 3) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group0()[3], self.group0()[3]]))
                - (swizzle!(self.group0(), 2, 0, 1, 0) * Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group8()[0]]))
                + Simd32x4::from([
                    ((self.group1()[1] * other.group8()[2])
                        + (self.group1()[0] * other.group0()[0])
                        + (self.group0()[3] * other.group3()[0])
                        + (self.group0()[0] * other.group8()[3])
                        + (self.group0()[1] * other.group3()[2])),
                    ((self.group1()[2] * other.group8()[0])
                        + (self.group1()[1] * other.group0()[0])
                        + (self.group0()[3] * other.group3()[1])
                        + (self.group0()[2] * other.group3()[0])
                        + (self.group0()[1] * other.group8()[3])),
                    ((self.group1()[2] * other.group0()[0])
                        + (self.group1()[0] * other.group10()[1])
                        + (self.group1()[0] * other.group8()[1])
                        + (self.group0()[2] * other.group8()[3])
                        + (self.group0()[0] * other.group3()[1])),
                    ((self.group0()[1] * other.group8()[1]) * -1.0),
                ])),
            // e41, e42, e43
            ((Simd32x3::from(self.group0()[3]) * other.group4()) - (swizzle!(other.group4(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))
                + (Simd32x3::from(other[e35]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (swizzle!(other.group4(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))),
            // e415, e425, e435, e321
            ((Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group6()[0], other.group6()[1], other.group6()[2], other.group1()[3]]))
                - (swizzle!(self.group1(), 2, 0, 1, 2) * Simd32x4::from([other.group6()[1], other.group6()[2], other.group6()[0], other.group6()[2]]))
                + (Simd32x4::from(self.group0()[3]) * other.group5())
                - (swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group5()[1], other.group5()[2], other.group5()[0], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group1()[1] * other.group6()[2])
                        + (self.group1()[0] * other.group1()[3])
                        + (self.group0()[0] * other.group0()[1])
                        + (self.group0()[1] * other.group5()[2])),
                    ((self.group1()[2] * other.group6()[0])
                        + (self.group1()[1] * other.group1()[3])
                        + (self.group0()[2] * other.group5()[0])
                        + (self.group0()[1] * other.group0()[1])),
                    ((self.group1()[2] * other.group1()[3])
                        + (self.group1()[0] * other.group6()[1])
                        + (self.group0()[2] * other.group0()[1])
                        + (self.group0()[0] * other.group5()[1])),
                    (-(self.group1()[1] * other.group6()[1])
                        - (self.group1()[0] * other.group6()[0])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e423, e431, e412
            ((Simd32x3::from(self.group0()[3]) * other.group6()) - (swizzle!(other.group6(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (swizzle!(other.group6(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))),
            // e235, e315, e125
            ((Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group5()[0], other.group5()[1], other.group5()[2]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group5()[1], other.group1()[0], other.group5()[3]]))
                + (Simd32x3::from(self.group1()[2]) * Simd32x3::from([other.group1()[1], other.group5()[0], other.group0()[1]]))
                + (Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group5()[2], other.group0()[1], other.group1()[0]]))
                - (Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group1()[2], other.group5()[3], other.group5()[0]]))
                - (Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group5()[3], other.group5()[2], other.group1()[1]]))
                + (Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group0()[1], other.group1()[2], other.group5()[1]]))
                + (Simd32x3::from(self.group0()[3]) * other.group7())
                - (swizzle!(other.group7(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (swizzle!(other.group7(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[2], other.group10()[0]]))
                + (swizzle!(self.group1(), 2, 0, 1, 3) * Simd32x4::from([other.group4()[1], other.group4()[2], other.group4()[0], other.group3()[3]]))
                - (swizzle!(self.group1(), 1, 2, 2, 2) * Simd32x4::from([other.group4()[2], other.group4()[0], other[e35], other.group8()[2]]))
                - (swizzle!(self.group1(), 0, 1, 0, 1) * Simd32x4::from([other[e35], other[e35], other.group4()[1], other.group10()[1]]))
                + (Simd32x4::from(self.group0()[3]) * other.group8())
                - (swizzle!(other.group8(), 1, 2, 0, 1) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[1]]))
                + Simd32x4::from([
                    ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group8()[2])),
                    ((self.group0()[2] * other.group8()[0]) + (self.group0()[1] * other.group3()[3])),
                    ((self.group0()[2] * other.group3()[3]) + (self.group0()[0] * other.group8()[1])),
                    ((self.group1()[3] * other.group0()[0])
                        - (self.group1()[0] * other.group10()[2])
                        - (self.group1()[0] * other.group8()[0])
                        - (self.group0()[2] * other.group3()[2])
                        - (self.group0()[0] * other.group3()[0])
                        - (self.group0()[1] * other.group3()[1])),
                ])),
            // e1234
            ((self.group0()[3] * other[e35]) - (self.group0()[2] * other.group4()[2]) - (self.group0()[0] * other.group4()[0]) - (self.group0()[1] * other.group4()[1])),
            // e12, e31, e23
            ((Simd32x3::from(self.group1()[3]) * swizzle!(other.group4(), 2, 1, 0))
                + (Simd32x3::from(other[e35]) * Simd32x3::from([self.group1()[2], self.group1()[1], self.group1()[0]]))
                - (swizzle!(other.group4(), 0, 2, 1) * Simd32x3::from([self.group1()[1], self.group1()[0], self.group1()[2]]))
                + (swizzle!(other.group4(), 1, 0, 2) * Simd32x3::from([self.group1()[0], self.group1()[2], self.group1()[1]]))
                + (Simd32x3::from(self.group0()[3]) * other.group10())
                + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[2], self.group0()[1], self.group0()[0]]))
                + (swizzle!(other.group10(), 1, 2, 0) * Simd32x3::from([self.group0()[0], self.group0()[2], self.group0()[1]]))
                - (swizzle!(other.group10(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[0], self.group0()[2]]))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for Motor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       21       42        0
    //    simd4       10       10        0
    // Totals...
    // yes simd       31       52        0
    //  no simd       61       82        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        let geometric_anti_product = Flector::from_groups(
            // e15, e25, e35, e45
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group0()[0]) + (self.group0()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2])),
                    ((self.group1()[3] * other.group0()[1]) + (self.group1()[2] * other.group0()[0]) + (self.group0()[1] * other.group0()[3])),
                    ((self.group1()[3] * other.group0()[2]) + (self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1])),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(self.group0()[3]) * other.group0())
                - (swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    (self.group0()[1] * other.group0()[2]),
                    (self.group0()[2] * other.group0()[0]),
                    (self.group0()[0] * other.group0()[1]),
                    (-(self.group1()[1] * other.group0()[1]) - (self.group1()[0] * other.group0()[0])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       53       86        0
    //    simd4       21       22        0
    // Totals...
    // yes simd       74      108        0
    //  no simd      137      174        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                ((self.group1()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            ((swizzle!(self.group1(), 2, 0, 1, 2) * swizzle!(other.group0(), 1, 2, 0, 2))
                + (self.group0() * Simd32x4::from(other[e2]))
                + Simd32x4::from([
                    (-(self.group1()[3] * other.group0()[0]) - (self.group1()[1] * other.group0()[2])),
                    (-(self.group1()[3] * other.group0()[1]) - (self.group1()[2] * other.group0()[0])),
                    (-(self.group1()[3] * other.group0()[2]) - (self.group1()[0] * other.group0()[1])),
                    ((self.group1()[1] * other.group0()[1]) + (self.group1()[0] * other.group0()[0])),
                ])),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                ((self.group1()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1]) - (self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group1()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2]) + (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other.group0()[3]),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       48       78        0
    //    simd4       16       16        0
    // Totals...
    // yes simd       64       94        0
    //  no simd      112      142        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other[scalar])]),
            // e23, e31, e12, e45
            Simd32x4::from([(self.group0()[0] * other[scalar]), (self.group0()[1] * other[scalar]), (self.group0()[2] * other[scalar]), 0.0]),
            // e15, e25, e35, e1234
            Simd32x4::from([(self.group1()[0] * other[scalar]), (self.group1()[1] * other[scalar]), (self.group1()[2] * other[scalar]), 0.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([0.0, 0.0, 0.0, (self.group1()[3] * other[scalar])]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       60       90        0
    //    simd4       19       22        0
    // Totals...
    // yes simd       79      112        0
    //  no simd      136      178        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(other[e4315]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self.group1()[0] * other[e4315]),
                (self.group1()[1] * other[e4315]),
                (self.group1()[2] * other[e4315]),
                (-(self.group1()[3] * other[e4315]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group1()[3] * other.group0()[0]) - (self.group1()[2] * other.group0()[1]) + (self.group0()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2])),
                ((self.group1()[3] * other.group0()[1]) + (self.group1()[2] * other.group0()[0]) + (self.group0()[1] * other.group0()[3]) - (self.group1()[0] * other.group0()[2])),
                ((self.group1()[3] * other.group0()[2]) - (self.group1()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1])),
                (self.group0()[3] * other[e4315]),
            ]),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group1(), 0, 1, 2, 2) * Simd32x4::from([other[e4315], other[e4315], other[e4315], other.group0()[2]]))
                + (Simd32x4::from(self.group0()[3]) * other.group0())
                - (swizzle!(other.group0(), 1, 2, 0, 1) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[1]]))
                + (Simd32x4::from([1.0, 1.0, 1.0, -1.0])
                    * swizzle!(other.group0(), 2, 0, 1, 0)
                    * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[0]]))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       69      107        0
    //    simd4       39       39        0
    // Totals...
    // yes simd      108      146        0
    //  no simd      225      263        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(self.group0()[3]) * other.group0())
                - (swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + Simd32x4::from([
                    (self.group0()[1] * other.group0()[2]),
                    (self.group0()[2] * other.group0()[0]),
                    (self.group0()[0] * other.group0()[1]),
                    (-(self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e415, e425, e435, e321
            ((Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group3()[3]]))
                - (swizzle!(self.group1(), 2, 0, 1, 2) * swizzle!(other.group0(), 1, 2, 0, 2))
                + (Simd32x4::from(self.group0()[3]) * other.group1())
                - (swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[2]]))
                + Simd32x4::from([
                    ((self.group1()[1] * other.group0()[2])
                        + (self.group1()[0] * other.group3()[3])
                        + (self.group0()[0] * other.group0()[3])
                        + (self.group0()[1] * other.group1()[2])),
                    ((self.group1()[2] * other.group0()[0])
                        + (self.group1()[1] * other.group3()[3])
                        + (self.group0()[2] * other.group1()[0])
                        + (self.group0()[1] * other.group0()[3])),
                    ((self.group1()[2] * other.group3()[3])
                        + (self.group1()[0] * other.group0()[1])
                        + (self.group0()[2] * other.group0()[3])
                        + (self.group0()[0] * other.group1()[1])),
                    (-(self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[0] * other.group3()[0])
                        - (self.group0()[1] * other.group3()[1])),
                ])),
            // e235, e315, e125, e5
            (-(Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                + (Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group0()[3], other.group3()[2]]))
                - (Simd32x4::from(self.group1()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[3], other.group1()[2]]))
                - (Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group3()[2], other.group1()[3], other.group1()[0], other.group1()[1]]))
                + (Simd32x4::from(self.group1()[1]) * Simd32x4::from([other.group1()[2], other.group0()[3], other.group3()[0], other.group3()[1]]))
                - (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group1()[3], other.group1()[2], other.group3()[1], other.group1()[0]]))
                + (Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group0()[3], other.group3()[2], other.group1()[1], other.group3()[0]]))
                + (Simd32x4::from(self.group0()[3]) * other.group2())
                - (swizzle!(self.group0(), 2, 0, 1, 2) * swizzle!(other.group2(), 1, 2, 0, 2))
                + Simd32x4::from([
                    ((self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group2()[2])),
                    ((self.group0()[2] * other.group2()[0]) + (self.group0()[1] * other.group2()[3])),
                    ((self.group0()[2] * other.group2()[3]) + (self.group0()[0] * other.group2()[1])),
                    (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[2]]))
                + (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]))
                - (swizzle!(self.group0(), 2, 0, 1, 0) * Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group0()[0]]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group0()[0])
                        + (self.group1()[1] * other.group0()[2])
                        + (self.group0()[3] * other.group3()[0])
                        + (self.group0()[0] * other.group1()[3])
                        + (self.group0()[1] * other.group3()[2])),
                    ((self.group1()[3] * other.group0()[1])
                        + (self.group1()[2] * other.group0()[0])
                        + (self.group0()[3] * other.group3()[1])
                        + (self.group0()[2] * other.group3()[0])
                        + (self.group0()[1] * other.group1()[3])),
                    ((self.group1()[3] * other.group0()[2])
                        + (self.group1()[0] * other.group0()[1])
                        + (self.group0()[3] * other.group3()[2])
                        + (self.group0()[2] * other.group1()[3])
                        + (self.group0()[0] * other.group3()[1])),
                    ((self.group0()[1] * other.group0()[1]) * -1.0),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       92      130        0
    //    simd4       33       33        0
    // Totals...
    // yes simd      125      163        0
    //  no simd      224      262        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((Simd32x4::from(self.group0()[3]) * other.group0())
                - (swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + Simd32x4::from([
                    (self.group0()[1] * other.group0()[2]),
                    (self.group0()[2] * other.group0()[0]),
                    (self.group0()[0] * other.group0()[1]),
                    (-(self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e23, e31, e12, e45
            ((swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group0(), 0, 1, 2, 2))
                - (swizzle!(self.group1(), 2, 0, 1, 3) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group2()[3]]))
                + (swizzle!(self.group1(), 1, 2, 2, 1) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group2()[3], other.group0()[1]]))
                + (swizzle!(self.group1(), 0, 1, 0, 0) * Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[1], other.group0()[0]]))
                + (Simd32x4::from(self.group0()[3]) * other.group1())
                - (swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[2]]))
                + Simd32x4::from([
                    ((self.group0()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[2])),
                    ((self.group0()[2] * other.group1()[0]) + (self.group0()[1] * other.group0()[3])),
                    ((self.group0()[2] * other.group0()[3]) + (self.group0()[0] * other.group1()[1])),
                    (-(self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group3()[1])),
                ])),
            // e15, e25, e35, e1234
            ((Simd32x4::from(self.group0()[3]) * other.group2())
                - (swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[2]]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group3()[0]) + (self.group1()[3] * other.group1()[0])
                        - (self.group1()[2] * other.group3()[1])
                        - (self.group1()[2] * other.group1()[1])
                        + (self.group1()[1] * other.group3()[2])
                        + (self.group1()[1] * other.group1()[2])
                        + (self.group1()[0] * other.group1()[3])
                        + (self.group1()[0] * other.group0()[3])
                        + (self.group0()[0] * other.group3()[3])
                        + (self.group0()[1] * other.group2()[2])),
                    ((self.group1()[3] * other.group3()[1])
                        + (self.group1()[3] * other.group1()[1])
                        + (self.group1()[2] * other.group3()[0])
                        + (self.group1()[2] * other.group1()[0])
                        + (self.group1()[1] * other.group1()[3])
                        + (self.group1()[1] * other.group0()[3])
                        - (self.group1()[0] * other.group3()[2])
                        - (self.group1()[0] * other.group1()[2])
                        + (self.group0()[2] * other.group2()[0])
                        + (self.group0()[1] * other.group3()[3])),
                    ((self.group1()[3] * other.group3()[2])
                        + (self.group1()[3] * other.group1()[2])
                        + (self.group1()[2] * other.group1()[3])
                        + (self.group1()[2] * other.group0()[3])
                        - (self.group1()[1] * other.group3()[0])
                        - (self.group1()[1] * other.group1()[0])
                        + (self.group1()[0] * other.group3()[1])
                        + (self.group1()[0] * other.group1()[1])
                        + (self.group0()[2] * other.group3()[3])
                        + (self.group0()[0] * other.group2()[1])),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group3()[2]]))
                + (swizzle!(self.group1(), 2, 0, 1, 3) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]))
                - (swizzle!(self.group1(), 1, 2, 2, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group2()[3], other.group1()[2]]))
                - (swizzle!(self.group1(), 0, 1, 0, 1) * Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[1], other.group3()[1]]))
                + (Simd32x4::from(self.group0()[3]) * other.group3())
                - (swizzle!(other.group3(), 1, 2, 0, 0) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[0]]))
                + Simd32x4::from([
                    ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group3()[2])),
                    ((self.group0()[2] * other.group3()[0]) + (self.group0()[1] * other.group1()[3])),
                    ((self.group0()[2] * other.group1()[3]) + (self.group0()[0] * other.group3()[1])),
                    ((self.group1()[3] * other.group0()[3])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl InfixAntiSandwich for MultiVector {}
impl AntiSandwich<AntiScalar> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      362      390        0
    //    simd2       16       17        0
    //    simd3      118      128        0
    //    simd4       61       67        0
    // Totals...
    // yes simd      557      602        0
    //  no simd      992     1076        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            (self.group0() * Simd32x2::from(other[e12345])),
            // e1, e2, e3, e4
            (self.group1() * Simd32x4::from(other[e12345])),
            // e5
            (self[e1] * other[e12345]),
            // e15, e25, e35, e45
            (self.group3() * Simd32x4::from(other[e12345])),
            // e41, e42, e43
            (self.group4() * Simd32x3::from(other[e12345])),
            // e415, e425, e435, e321
            (self.group5() * Simd32x4::from(other[e12345])),
            // e423, e431, e412
            (self.group6() * Simd32x3::from(other[e12345])),
            // e235, e315, e125
            (self.group7() * Simd32x3::from(other[e12345])),
            // e4235, e4315, e4125, e3215
            (self.group8() * Simd32x4::from(other[e12345])),
            // e1234
            (self[e35] * other[e12345]),
            // e12, e31, e23
            (self.group10() * Simd32x3::from(other[e12345])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      464      508        0
    //    simd2       25       27        0
    //    simd3      154      164        0
    //    simd4       76       78        0
    // Totals...
    // yes simd      719      777        0
    //  no simd     1280     1366        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            (-(Simd32x2::from(other.group1()[0]) * Simd32x2::from([self.group10()[2], self.group5()[0]]))
                - (Simd32x2::from(other.group1()[1]) * Simd32x2::from([self.group10()[1], self.group5()[1]]))
                - (Simd32x2::from(other.group1()[2]) * Simd32x2::from([self.group10()[0], self.group5()[2]]))
                - (Simd32x2::from(other.group2()[2]) * Simd32x2::from([self.group4()[2], self.group6()[2]]))
                - (Simd32x2::from(other.group2()[1]) * Simd32x2::from([self.group4()[1], self.group6()[1]]))
                - (Simd32x2::from(other.group2()[0]) * Simd32x2::from([self.group4()[0], self.group6()[0]]))
                - (Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group3()[2], self.group7()[2]]))
                - (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group3()[0], self.group7()[0]]))
                - (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group3()[1], self.group7()[1]]))
                + (Simd32x2::from([-1.0, 1.0]) * Simd32x2::from(other.group1()[3]) * Simd32x2::from([self.group3()[3], self.group5()[3]]))),
            // e1, e2, e3, e4
            ((other.group1() * Simd32x4::from([self.group5()[3], self.group5()[3], self.group5()[3], self.group1()[3]]))
                + (swizzle!(self.group1(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]))
                - (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group6()[2]]))
                + Simd32x4::from([
                    (-(self.group7()[2] * other.group0()[1]) + (self.group7()[1] * other.group0()[2]) + (self.group6()[2] * other.group2()[1])
                        - (self.group6()[1] * other.group2()[2])
                        + (self.group5()[0] * other.group1()[3])
                        + (self[e1] * other.group0()[0])
                        - (self.group1()[3] * other.group2()[0])),
                    ((self.group7()[2] * other.group0()[0]) - (self.group7()[0] * other.group0()[2]) - (self.group6()[2] * other.group2()[0])
                        + (self.group6()[0] * other.group2()[2])
                        + (self.group5()[1] * other.group1()[3])
                        + (self[e1] * other.group0()[1])
                        - (self.group1()[3] * other.group2()[1])),
                    (-(self.group7()[1] * other.group0()[0]) + (self.group7()[0] * other.group0()[1]) + (self.group6()[1] * other.group2()[0])
                        - (self.group6()[0] * other.group2()[1])
                        + (self.group5()[2] * other.group1()[3])
                        + (self[e1] * other.group0()[2])
                        - (self.group1()[3] * other.group2()[2])),
                    (-(self.group6()[1] * other.group1()[1])
                        - (self.group6()[0] * other.group1()[0])
                        - (self.group5()[2] * other.group0()[2])
                        - (self.group5()[1] * other.group0()[1])
                        - (self.group5()[0] * other.group0()[0])
                        + (self.group1()[0] * other.group0()[0])
                        + (self.group1()[1] * other.group0()[1])),
                ])),
            // e5
            (-(self.group7()[2] * other.group1()[2])
                - (self.group7()[1] * other.group1()[1])
                - (self.group7()[0] * other.group1()[0])
                - (self.group5()[2] * other.group2()[2])
                - (self.group5()[1] * other.group2()[1])
                - (self.group5()[0] * other.group2()[0])
                - (self[e1] * other.group1()[3])
                - (self.group1()[2] * other.group2()[2])
                - (self.group1()[0] * other.group2()[0])
                - (self.group1()[1] * other.group2()[1])),
            // e15, e25, e35, e45
            (-(Simd32x4::from(other.group2()[1]) * Simd32x4::from([self.group10()[0], self.group3()[3], self.group8()[0], self.group4()[1]]))
                - (Simd32x4::from(other.group2()[2]) * Simd32x4::from([self.group8()[1], self.group10()[2], self.group3()[3], self.group4()[2]]))
                - (Simd32x4::from(other.group2()[0]) * Simd32x4::from([self.group3()[3], self.group8()[2], self.group10()[1], self.group4()[0]]))
                - (swizzle!(other.group1(), 1, 3, 3, 2) * Simd32x4::from([self.group3()[2], self.group3()[1], self.group3()[2], self.group8()[2]]))
                + (swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]))
                - (swizzle!(other.group1(), 3, 2, 0, 1) * Simd32x4::from([self.group3()[0], self.group3()[0], self.group3()[1], self.group8()[1]]))
                + Simd32x4::from([
                    ((self.group10()[1] * other.group2()[2])
                        + (self.group8()[3] * other.group1()[0])
                        + (self.group8()[2] * other.group2()[1])
                        + (self.group0()[0] * other.group2()[0])),
                    ((self.group10()[0] * other.group2()[0])
                        + (self.group8()[3] * other.group1()[1])
                        + (self.group8()[0] * other.group2()[2])
                        + (self.group0()[0] * other.group2()[1])),
                    ((self.group10()[2] * other.group2()[1])
                        + (self.group8()[3] * other.group1()[2])
                        + (self.group8()[1] * other.group2()[0])
                        + (self.group0()[0] * other.group2()[2])),
                    (-(self.group8()[0] * other.group1()[0]) + (self.group3()[1] * other.group0()[1]) - (self.group0()[0] * other.group1()[3])
                        + (self.group3()[0] * other.group0()[0])),
                ])),
            // e41, e42, e43
            ((swizzle!(self.group10(), 1, 0, 2) * swizzle!(other.group0(), 2, 0, 1)) - (swizzle!(self.group10(), 0, 2, 1) * swizzle!(other.group0(), 1, 2, 0))
                + (Simd32x3::from(self[e35]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group8()[2], self.group8()[0], self.group8()[1]]))
                + (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group8()[1], self.group8()[2], self.group8()[0]]))
                - (swizzle!(self.group4(), 2, 0, 1) * Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]))
                + (swizzle!(self.group4(), 1, 2, 2) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[3]]))
                + (swizzle!(self.group4(), 0, 1, 0) * Simd32x3::from([other.group1()[3], other.group1()[3], other.group1()[1]]))
                + (Simd32x3::from(self.group0()[0]) * other.group0())
                + (Simd32x3::from(self.group3()[3]) * other.group0())),
            // e415, e425, e435, e321
            (-(swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group1()[2]]))
                + (swizzle!(other.group1(), 2, 0, 1, 3) * Simd32x4::from([self.group5()[1], self.group5()[2], self.group5()[0], self.group0()[1]]))
                + Simd32x4::from([
                    (-(self.group7()[2] * other.group0()[1]) + (self.group7()[1] * other.group0()[2]) - (self.group6()[2] * other.group2()[1])
                        + (self.group6()[1] * other.group2()[2])
                        + (self[e1] * other.group0()[0])
                        + (self.group1()[3] * other.group2()[0])
                        + (self.group0()[1] * other.group1()[0])
                        + (self.group1()[0] * other.group1()[3])),
                    ((self.group7()[2] * other.group0()[0]) - (self.group7()[0] * other.group0()[2]) + (self.group6()[2] * other.group2()[0])
                        - (self.group6()[0] * other.group2()[2])
                        + (self[e1] * other.group0()[1])
                        + (self.group1()[3] * other.group2()[1])
                        + (self.group0()[1] * other.group1()[1])
                        + (self.group1()[1] * other.group1()[3])),
                    (-(self.group7()[1] * other.group0()[0]) + (self.group7()[0] * other.group0()[1]) - (self.group6()[1] * other.group2()[0])
                        + (self.group6()[0] * other.group2()[1])
                        + (self[e1] * other.group0()[2])
                        + (self.group1()[3] * other.group2()[2])
                        + (self.group0()[1] * other.group1()[2])
                        + (self.group1()[2] * other.group1()[3])),
                    (-(self.group7()[2] * other.group0()[2]) - (self.group7()[1] * other.group0()[1]) - (self.group7()[0] * other.group0()[0])
                        + (self.group6()[2] * other.group2()[2])
                        + (self.group6()[1] * other.group2()[1])
                        + (self.group6()[0] * other.group2()[0])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])),
                ])),
            // e423, e431, e412
            (-(swizzle!(self.group6(), 2, 0, 1) * Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]))
                + (swizzle!(self.group6(), 1, 2, 2) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[3]]))
                + (swizzle!(self.group6(), 0, 1, 0) * Simd32x3::from([other.group1()[3], other.group1()[3], other.group1()[1]]))
                - (Simd32x3::from(self.group5()[3]) * other.group0())
                - (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group5()[2], self.group5()[0], self.group5()[1]]))
                + (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group5()[1], self.group5()[2], self.group5()[0]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (swizzle!(other.group0(), 1, 1, 0) * Simd32x3::from([self.group1()[2], self.group0()[1], self.group1()[1]]))
                + (swizzle!(other.group0(), 0, 2, 2) * Simd32x3::from([self.group0()[1], self.group1()[0], self.group0()[1]]))
                - (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))),
            // e235, e315, e125
            (-(swizzle!(self.group7(), 2, 1, 2) * Simd32x3::from([other.group1()[1], other.group1()[3], other.group1()[3]]))
                + (swizzle!(self.group7(), 1, 2, 0) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]))
                - (swizzle!(self.group7(), 0, 0, 1) * Simd32x3::from([other.group1()[3], other.group1()[2], other.group1()[0]]))
                + (Simd32x3::from(self.group5()[3]) * other.group2())
                - (swizzle!(other.group2(), 1, 2, 0) * Simd32x3::from([self.group5()[2], self.group5()[0], self.group5()[1]]))
                + (swizzle!(other.group2(), 2, 0, 1) * Simd32x3::from([self.group5()[1], self.group5()[2], self.group5()[0]]))
                + (Simd32x3::from(self[e1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (swizzle!(other.group2(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))
                + (swizzle!(other.group2(), 0, 0, 2) * Simd32x3::from([self.group0()[1], self.group1()[2], self.group0()[1]]))
                + (swizzle!(other.group2(), 2, 1, 1) * Simd32x3::from([self.group1()[1], self.group0()[1], self.group1()[0]]))),
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group10()[2], self.group10()[1], self.group10()[0], self.group8()[3]]))
                - (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group8()[2], self.group8()[0], self.group8()[1], self.group3()[2]]))
                + (swizzle!(self.group8(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[2]]))
                - (swizzle!(self.group3(), 1, 2, 0, 0) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]))
                + Simd32x4::from([
                    ((self[e35] * other.group2()[0]) - (self.group8()[3] * other.group0()[0]) - (self.group4()[2] * other.group2()[1])
                        + (self.group4()[1] * other.group2()[2])
                        + (self.group3()[3] * other.group1()[0])
                        + (self.group3()[2] * other.group0()[1])),
                    ((self[e35] * other.group2()[1]) - (self.group8()[3] * other.group0()[1]) + (self.group4()[2] * other.group2()[0]) - (self.group4()[0] * other.group2()[2])
                        + (self.group3()[3] * other.group1()[1])
                        + (self.group3()[0] * other.group0()[2])),
                    ((self[e35] * other.group2()[2]) - (self.group8()[3] * other.group0()[2]) - (self.group4()[1] * other.group2()[0])
                        + (self.group4()[0] * other.group2()[1])
                        + (self.group3()[3] * other.group1()[2])
                        + (self.group3()[1] * other.group0()[0])),
                    (-(self.group10()[2] * other.group2()[0]) - (self.group10()[1] * other.group2()[1]) - (self.group10()[0] * other.group2()[2])
                        + (self.group8()[1] * other.group2()[1])
                        + (self.group8()[0] * other.group2()[0])
                        - (self.group3()[1] * other.group1()[1])),
                ])),
            // e1234
            (-(self.group10()[2] * other.group0()[0]) - (self.group10()[1] * other.group0()[1]) - (self.group10()[0] * other.group0()[2]) + (self[e35] * other.group1()[3])
                - (self.group8()[2] * other.group0()[2])
                - (self.group8()[1] * other.group0()[1])
                - (self.group8()[0] * other.group0()[0])
                - (self.group4()[2] * other.group1()[2])
                - (self.group4()[0] * other.group1()[0])
                - (self.group4()[1] * other.group1()[1])),
            // e12, e31, e23
            ((swizzle!(self.group10(), 2, 0, 1) * Simd32x3::from([other.group1()[1], other.group1()[0], other.group1()[2]]))
                - (swizzle!(self.group10(), 1, 2, 0) * Simd32x3::from([other.group1()[0], other.group1()[2], other.group1()[1]]))
                + (Simd32x3::from(self[e35]) * swizzle!(other.group2(), 2, 1, 0))
                + (Simd32x3::from(self.group8()[3]) * swizzle!(other.group0(), 2, 1, 0))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group8()[2], self.group8()[1], self.group8()[0]]))
                - (swizzle!(self.group4(), 1, 0, 2) * swizzle!(other.group2(), 0, 2, 1))
                + (swizzle!(self.group4(), 0, 2, 1) * swizzle!(other.group2(), 1, 0, 2))
                - (swizzle!(other.group0(), 0, 2, 1) * Simd32x3::from([self.group3()[1], self.group3()[0], self.group3()[2]]))
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[2], other.group1()[1], other.group1()[0]]))
                + (swizzle!(other.group0(), 1, 0, 2) * Simd32x3::from([self.group3()[0], self.group3()[2], self.group3()[1]]))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      447      494        0
    //    simd2       26       28        0
    //    simd3      155      164        0
    //    simd4       87       89        0
    // Totals...
    // yes simd      715      775        0
    //  no simd     1312     1398        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            (-(Simd32x2::from(other.group1()[0]) * Simd32x2::from([self.group10()[2], self.group5()[0]]))
                - (Simd32x2::from(other.group1()[1]) * Simd32x2::from([self.group10()[1], self.group5()[1]]))
                - (Simd32x2::from(other.group1()[2]) * Simd32x2::from([self.group10()[0], self.group5()[2]]))
                - (Simd32x2::from(other.group2()[2]) * Simd32x2::from([self.group4()[2], self.group6()[2]]))
                - (Simd32x2::from(other.group2()[1]) * Simd32x2::from([self.group4()[1], self.group6()[1]]))
                - (Simd32x2::from(other.group2()[0]) * Simd32x2::from([self.group4()[0], self.group6()[0]]))
                - (Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group3()[2], self.group7()[2]]))
                - (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group3()[1], self.group7()[1]]))
                + (self.group0() * Simd32x2::from(other.group2()[3]))
                - (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group3()[0], self.group7()[0]]))
                + (Simd32x2::from([-1.0, 1.0]) * Simd32x2::from(other.group1()[3]) * Simd32x2::from([self.group3()[3], self.group5()[3]]))),
            // e1, e2, e3, e4
            ((swizzle!(other.group2(), 1, 2, 0, 3) * Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group1()[3]]))
                + (other.group1() * Simd32x4::from([self.group5()[3], self.group5()[3], self.group5()[3], self.group1()[3]]))
                - (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group6()[2]]))
                + (swizzle!(self.group1(), 0, 2, 2, 2) * Simd32x4::from([other.group2()[3], other.group1()[0], other.group2()[3], other.group0()[2]]))
                + (swizzle!(self.group1(), 1, 1, 0, 0) * Simd32x4::from([other.group1()[2], other.group2()[3], other.group1()[1], other.group0()[0]]))
                + Simd32x4::from([
                    (-(self.group7()[2] * other.group0()[1]) + (self.group7()[1] * other.group0()[2]) - (self.group6()[1] * other.group2()[2])
                        + (self.group5()[0] * other.group1()[3])
                        + (self[e1] * other.group0()[0])
                        - (self.group1()[3] * other.group2()[0])),
                    ((self.group7()[2] * other.group0()[0]) - (self.group7()[0] * other.group0()[2]) - (self.group6()[2] * other.group2()[0])
                        + (self.group5()[1] * other.group1()[3])
                        + (self[e1] * other.group0()[1])
                        - (self.group1()[3] * other.group2()[1])),
                    (-(self.group7()[1] * other.group0()[0]) + (self.group7()[0] * other.group0()[1]) - (self.group6()[0] * other.group2()[1])
                        + (self.group5()[2] * other.group1()[3])
                        + (self[e1] * other.group0()[2])
                        - (self.group1()[3] * other.group2()[2])),
                    (-(self.group6()[1] * other.group1()[1])
                        - (self.group6()[0] * other.group1()[0])
                        - (self.group5()[2] * other.group0()[2])
                        - (self.group5()[1] * other.group0()[1])
                        - (self.group5()[0] * other.group0()[0])
                        + (self.group1()[1] * other.group0()[1])),
                ])),
            // e5
            (-(self.group7()[2] * other.group1()[2])
                - (self.group7()[1] * other.group1()[1])
                - (self.group7()[0] * other.group1()[0])
                - (self.group5()[2] * other.group2()[2])
                - (self.group5()[1] * other.group2()[1])
                - (self.group5()[0] * other.group2()[0])
                + (self[e1] * other.group2()[3])
                - (self[e1] * other.group1()[3])
                - (self.group1()[2] * other.group2()[2])
                - (self.group1()[0] * other.group2()[0])
                - (self.group1()[1] * other.group2()[1])),
            // e15, e25, e35, e45
            ((swizzle!(other.group2(), 2, 0, 1, 3) * Simd32x4::from([self.group10()[1], self.group10()[0], self.group10()[2], self.group3()[3]]))
                - (swizzle!(other.group2(), 1, 2, 0, 2) * Simd32x4::from([self.group10()[0], self.group10()[2], self.group10()[1], self.group4()[2]]))
                - (swizzle!(self.group8(), 1, 2, 0, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[2]]))
                - (swizzle!(other.group2(), 0, 1, 2, 1) * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group4()[1]]))
                - (swizzle!(other.group1(), 1, 3, 3, 1) * Simd32x4::from([self.group3()[2], self.group3()[1], self.group3()[2], self.group8()[1]]))
                + (swizzle!(self.group3(), 1, 2, 2, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group2()[3], other.group0()[2]]))
                + (swizzle!(self.group3(), 0, 1, 0, 1) * Simd32x4::from([other.group2()[3], other.group2()[3], other.group1()[1], other.group0()[1]]))
                - (swizzle!(other.group1(), 3, 2, 0, 0) * Simd32x4::from([self.group3()[0], self.group3()[0], self.group3()[1], self.group8()[0]]))
                + Simd32x4::from([
                    ((self.group8()[3] * other.group1()[0]) + (self.group8()[2] * other.group2()[1]) + (self.group0()[0] * other.group2()[0])),
                    ((self.group8()[3] * other.group1()[1]) + (self.group8()[0] * other.group2()[2]) + (self.group0()[0] * other.group2()[1])),
                    ((self.group8()[3] * other.group1()[2]) + (self.group8()[1] * other.group2()[0]) + (self.group0()[0] * other.group2()[2])),
                    (-(self.group4()[0] * other.group2()[0]) - (self.group0()[0] * other.group1()[3]) + (self.group3()[0] * other.group0()[0])),
                ])),
            // e41, e42, e43
            ((swizzle!(self.group10(), 1, 0, 2) * swizzle!(other.group0(), 2, 0, 1)) - (swizzle!(self.group10(), 0, 2, 1) * swizzle!(other.group0(), 1, 2, 0))
                + (Simd32x3::from(self[e35]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group8()[2], self.group8()[0], self.group8()[1]]))
                + (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group8()[1], self.group8()[2], self.group8()[0]]))
                - (swizzle!(self.group4(), 2, 0, 1) * Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]))
                + (swizzle!(self.group4(), 1, 2, 2) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group2()[3]]))
                + (self.group4() * Simd32x3::from([other.group2()[3], other.group2()[3], other.group1()[3]]))
                + (swizzle!(self.group4(), 0, 1, 0) * Simd32x3::from([other.group1()[3], other.group1()[3], other.group1()[1]]))
                + (Simd32x3::from(self.group0()[0]) * other.group0())
                + (Simd32x3::from(self.group3()[3]) * other.group0())),
            // e415, e425, e435, e321
            ((swizzle!(other.group2(), 2, 0, 1, 2) * Simd32x4::from([self.group6()[1], self.group6()[2], self.group6()[0], self.group6()[2]]))
                - (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group1()[2]]))
                + (swizzle!(self.group5(), 1, 2, 2, 3) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group2()[3], other.group2()[3]]))
                + (swizzle!(other.group2(), 3, 3, 2, 1) * Simd32x4::from([self.group5()[0], self.group5()[1], self.group1()[3], self.group6()[1]]))
                + (swizzle!(other.group1(), 0, 1, 1, 3) * Simd32x4::from([self.group0()[1], self.group0()[1], self.group5()[0], self.group0()[1]]))
                + Simd32x4::from([
                    (-(self.group7()[2] * other.group0()[1]) + (self.group7()[1] * other.group0()[2]) - (self.group6()[2] * other.group2()[1])
                        + (self[e1] * other.group0()[0])
                        + (self.group1()[3] * other.group2()[0])
                        + (self.group1()[0] * other.group1()[3])),
                    ((self.group7()[2] * other.group0()[0]) - (self.group7()[0] * other.group0()[2]) - (self.group6()[0] * other.group2()[2])
                        + (self[e1] * other.group0()[1])
                        + (self.group1()[3] * other.group2()[1])
                        + (self.group1()[1] * other.group1()[3])),
                    (-(self.group7()[1] * other.group0()[0]) + (self.group7()[0] * other.group0()[1]) - (self.group6()[1] * other.group2()[0])
                        + (self[e1] * other.group0()[2])
                        + (self.group0()[1] * other.group1()[2])
                        + (self.group1()[2] * other.group1()[3])),
                    (-(self.group7()[2] * other.group0()[2]) - (self.group7()[1] * other.group0()[1]) - (self.group7()[0] * other.group0()[0])
                        + (self.group6()[0] * other.group2()[0])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])),
                ])),
            // e423, e431, e412
            (-(swizzle!(self.group6(), 2, 0, 1) * Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]))
                + (swizzle!(self.group6(), 1, 2, 2) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group2()[3]]))
                + (self.group6() * Simd32x3::from([other.group2()[3], other.group2()[3], other.group1()[3]]))
                + (swizzle!(self.group6(), 0, 1, 0) * Simd32x3::from([other.group1()[3], other.group1()[3], other.group1()[1]]))
                - (Simd32x3::from(self.group5()[3]) * other.group0())
                - (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group5()[2], self.group5()[0], self.group5()[1]]))
                + (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group5()[1], self.group5()[2], self.group5()[0]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (swizzle!(other.group0(), 1, 1, 0) * Simd32x3::from([self.group1()[2], self.group0()[1], self.group1()[1]]))
                + (swizzle!(other.group0(), 0, 2, 2) * Simd32x3::from([self.group0()[1], self.group1()[0], self.group0()[1]]))
                - (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))),
            // e235, e315, e125
            (-(swizzle!(self.group7(), 2, 1, 2) * Simd32x3::from([other.group1()[1], other.group1()[3], other.group1()[3]]))
                + (swizzle!(self.group7(), 1, 2, 2) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group2()[3]]))
                + (swizzle!(self.group7(), 0, 1, 0) * Simd32x3::from([other.group2()[3], other.group2()[3], other.group1()[1]]))
                - (swizzle!(self.group7(), 0, 0, 1) * Simd32x3::from([other.group1()[3], other.group1()[2], other.group1()[0]]))
                + (Simd32x3::from(self.group5()[3]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                + (Simd32x3::from(self[e1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                + Simd32x3::from([
                    (-(self.group5()[2] * other.group2()[1]) + (self.group5()[1] * other.group2()[2]) - (self.group1()[2] * other.group2()[1])
                        + (self.group1()[1] * other.group2()[2])),
                    ((self.group5()[2] * other.group2()[0]) - (self.group5()[0] * other.group2()[2]) + (self.group1()[2] * other.group2()[0])
                        - (self.group1()[0] * other.group2()[2])),
                    (-(self.group5()[1] * other.group2()[0]) + (self.group5()[0] * other.group2()[1]) - (self.group1()[1] * other.group2()[0])
                        + (self.group1()[0] * other.group2()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group10()[2], self.group10()[1], self.group10()[0], self.group8()[3]]))
                + (other.group2() * Simd32x4::from([self[e35], self[e35], self[e35], self.group8()[3]]))
                - (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group8()[2], self.group8()[0], self.group8()[1], self.group3()[2]]))
                + (swizzle!(self.group8(), 1, 2, 2, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group2()[3], other.group2()[2]]))
                + (swizzle!(self.group8(), 0, 1, 0, 1) * Simd32x4::from([other.group2()[3], other.group2()[3], other.group1()[1], other.group2()[1]]))
                - (swizzle!(other.group2(), 1, 2, 0, 0) * Simd32x4::from([self.group4()[2], self.group4()[0], self.group4()[1], self.group10()[2]]))
                + (swizzle!(other.group2(), 2, 0, 1, 0) * Simd32x4::from([self.group4()[1], self.group4()[2], self.group4()[0], self.group8()[0]]))
                - (swizzle!(self.group3(), 1, 2, 0, 0) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[0]]))
                + Simd32x4::from([
                    (-(self.group8()[3] * other.group0()[0]) + (self.group3()[3] * other.group1()[0]) + (self.group3()[2] * other.group0()[1])),
                    (-(self.group8()[3] * other.group0()[1]) + (self.group3()[3] * other.group1()[1]) + (self.group3()[0] * other.group0()[2])),
                    (-(self.group8()[3] * other.group0()[2]) + (self.group3()[3] * other.group1()[2]) + (self.group3()[1] * other.group0()[0])),
                    (-(self.group10()[1] * other.group2()[1]) - (self.group10()[0] * other.group2()[2]) - (self.group3()[1] * other.group1()[1])),
                ])),
            // e1234
            (-(self.group10()[2] * other.group0()[0]) - (self.group10()[1] * other.group0()[1]) - (self.group10()[0] * other.group0()[2])
                + (self[e35] * other.group2()[3])
                + (self[e35] * other.group1()[3])
                - (self.group8()[2] * other.group0()[2])
                - (self.group8()[1] * other.group0()[1])
                - (self.group8()[0] * other.group0()[0])
                - (self.group4()[2] * other.group1()[2])
                - (self.group4()[0] * other.group1()[0])
                - (self.group4()[1] * other.group1()[1])),
            // e12, e31, e23
            ((swizzle!(self.group10(), 2, 1, 2) * Simd32x3::from([other.group1()[1], other.group2()[3], other.group2()[3]]))
                - (swizzle!(self.group10(), 1, 2, 0) * Simd32x3::from([other.group1()[0], other.group1()[2], other.group1()[1]]))
                + (swizzle!(self.group10(), 0, 0, 1) * Simd32x3::from([other.group2()[3], other.group1()[0], other.group1()[2]]))
                + (Simd32x3::from(self[e35]) * Simd32x3::from([other.group2()[2], other.group2()[1], other.group2()[0]]))
                + (Simd32x3::from(self.group8()[3]) * swizzle!(other.group0(), 2, 1, 0))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group8()[2], self.group8()[1], self.group8()[0]]))
                - (swizzle!(self.group4(), 1, 0, 2) * Simd32x3::from([other.group2()[0], other.group2()[2], other.group2()[1]]))
                + (swizzle!(self.group4(), 0, 2, 1) * Simd32x3::from([other.group2()[1], other.group2()[0], other.group2()[2]]))
                - (swizzle!(other.group0(), 0, 2, 1) * Simd32x3::from([self.group3()[1], self.group3()[0], self.group3()[2]]))
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[2], other.group1()[1], other.group1()[0]]))
                + (swizzle!(other.group0(), 1, 0, 2) * Simd32x3::from([self.group3()[0], self.group3()[2], self.group3()[1]]))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      486      538        0
    //    simd2       17       17        0
    //    simd3      152      160        0
    //    simd4       76       78        0
    // Totals...
    // yes simd      731      793        0
    //  no simd     1280     1364        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            (-(Simd32x2::from(other.group1()[3]) * Simd32x2::from([self.group5()[3], self.group3()[3]]))
                + Simd32x2::from([
                    (-(self.group7()[2] * other.group0()[2])
                        - (self.group7()[1] * other.group0()[1])
                        - (self.group7()[0] * other.group0()[0])
                        - (self.group6()[2] * other.group2()[2])
                        - (self.group6()[1] * other.group2()[1])
                        - (self.group6()[0] * other.group2()[0])
                        - (self.group5()[2] * other.group1()[2])
                        - (self.group5()[0] * other.group1()[0])
                        - (self.group5()[1] * other.group1()[1])),
                    ((self.group10()[2] * other.group1()[0])
                        + (self.group10()[1] * other.group1()[1])
                        + (self.group10()[0] * other.group1()[2])
                        + (self.group4()[2] * other.group2()[2])
                        + (self.group4()[1] * other.group2()[1])
                        + (self.group4()[0] * other.group2()[0])
                        + (self.group3()[2] * other.group0()[2])
                        + (self.group3()[0] * other.group0()[0])
                        + (self.group3()[1] * other.group0()[1])),
                ])),
            // e1, e2, e3, e4
            ((Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group10()[2], self.group10()[1], self.group10()[0], self[e35]]))
                + (swizzle!(self.group8(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]))
                + (swizzle!(other.group1(), 0, 1, 2, 2) * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group4()[2]]))
                + Simd32x4::from([
                    ((self[e35] * other.group2()[0]) - (self.group8()[3] * other.group0()[0]) - (self.group8()[2] * other.group1()[1]) - (self.group4()[2] * other.group2()[1])
                        + (self.group4()[1] * other.group2()[2])
                        - (self.group3()[1] * other.group0()[2])
                        + (self.group3()[2] * other.group0()[1])),
                    ((self[e35] * other.group2()[1]) - (self.group8()[3] * other.group0()[1]) - (self.group8()[0] * other.group1()[2]) + (self.group4()[2] * other.group2()[0])
                        - (self.group4()[0] * other.group2()[2])
                        + (self.group3()[0] * other.group0()[2])
                        - (self.group3()[2] * other.group0()[0])),
                    ((self[e35] * other.group2()[2]) - (self.group8()[3] * other.group0()[2]) - (self.group8()[1] * other.group1()[0]) - (self.group4()[1] * other.group2()[0])
                        + (self.group4()[0] * other.group2()[1])
                        - (self.group3()[0] * other.group0()[1])
                        + (self.group3()[1] * other.group0()[0])),
                    ((self.group10()[2] * other.group0()[0])
                        + (self.group10()[1] * other.group0()[1])
                        + (self.group10()[0] * other.group0()[2])
                        + (self.group8()[1] * other.group0()[1])
                        + (self.group8()[0] * other.group0()[0])
                        + (self.group4()[0] * other.group1()[0])
                        + (self.group4()[1] * other.group1()[1])),
                ])),
            // e5
            ((self.group10()[2] * other.group2()[0]) + (self.group10()[1] * other.group2()[1]) + (self.group10()[0] * other.group2()[2])
                - (self.group8()[3] * other.group1()[3])
                - (self.group8()[2] * other.group2()[2])
                - (self.group8()[1] * other.group2()[1])
                - (self.group8()[0] * other.group2()[0])
                + (self.group3()[2] * other.group1()[2])
                + (self.group3()[0] * other.group1()[0])
                + (self.group3()[1] * other.group1()[1])),
            // e15, e25, e35, e45
            ((swizzle!(other.group1(), 2, 0, 3, 2) * Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[2], self.group1()[2]]))
                + (swizzle!(other.group1(), 3, 3, 1, 1) * Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[0], self.group1()[1]]))
                + (other.group1() * Simd32x4::from([self[e1], self[e1], self[e1], self.group0()[1]]))
                + (swizzle!(self.group1(), 1, 2, 0, 0) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[0]]))
                + Simd32x4::from([
                    (-(self.group7()[2] * other.group1()[1]) + (self.group5()[3] * other.group2()[0]) - (self.group5()[2] * other.group2()[1])
                        + (self.group5()[1] * other.group2()[2])
                        - (self.group1()[2] * other.group2()[1])
                        + (self.group0()[1] * other.group2()[0])),
                    (-(self.group7()[0] * other.group1()[2]) + (self.group5()[3] * other.group2()[1]) + (self.group5()[2] * other.group2()[0])
                        - (self.group5()[0] * other.group2()[2])
                        + (self.group0()[1] * other.group2()[1])
                        - (self.group1()[0] * other.group2()[2])),
                    (-(self.group7()[1] * other.group1()[0]) + (self.group5()[3] * other.group2()[2]) - (self.group5()[1] * other.group2()[0])
                        + (self.group5()[0] * other.group2()[1])
                        - (self.group1()[1] * other.group2()[0])
                        + (self.group0()[1] * other.group2()[2])),
                    ((self.group7()[2] * other.group0()[2]) + (self.group7()[1] * other.group0()[1]) + (self.group7()[0] * other.group0()[0])
                        - (self.group6()[2] * other.group2()[2])
                        - (self.group6()[1] * other.group2()[1])
                        - (self.group6()[0] * other.group2()[0])),
                ])),
            // e41, e42, e43
            (-(swizzle!(self.group6(), 2, 1, 2) * Simd32x3::from([other.group1()[1], other.group1()[3], other.group1()[3]]))
                + (swizzle!(self.group6(), 1, 2, 0) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]))
                - (swizzle!(self.group6(), 0, 0, 1) * Simd32x3::from([other.group1()[3], other.group1()[2], other.group1()[0]]))
                - (Simd32x3::from(self.group5()[3]) * other.group0())
                - (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group5()[2], self.group5()[0], self.group5()[1]]))
                + (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group5()[1], self.group5()[2], self.group5()[0]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (swizzle!(other.group0(), 1, 1, 0) * Simd32x3::from([self.group1()[2], self.group0()[1], self.group1()[1]]))
                + (swizzle!(other.group0(), 0, 2, 2) * Simd32x3::from([self.group0()[1], self.group1()[0], self.group0()[1]]))
                - (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))),
            // e415, e425, e435, e321
            (-(swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group10()[1], self.group10()[0], self.group10()[2], self.group8()[2]]))
                + (swizzle!(other.group1(), 1, 2, 0, 3) * Simd32x4::from([self.group10()[0], self.group10()[2], self.group10()[1], self.group0()[0]]))
                - (swizzle!(self.group8(), 3, 3, 3, 1) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]]))
                - (swizzle!(self.group8(), 0, 1, 2, 0) * swizzle!(other.group1(), 3, 3, 3, 0))
                + (swizzle!(self.group3(), 2, 0, 1, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[2]]))
                + Simd32x4::from([
                    (-(self[e35] * other.group2()[0]) + (self.group4()[2] * other.group2()[1])
                        - (self.group4()[1] * other.group2()[2])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group3()[1] * other.group0()[2])),
                    (-(self[e35] * other.group2()[1]) - (self.group4()[2] * other.group2()[0]) + (self.group4()[0] * other.group2()[2])
                        - (self.group3()[2] * other.group0()[0])
                        - (self.group0()[0] * other.group1()[1])),
                    (-(self[e35] * other.group2()[2]) + (self.group4()[1] * other.group2()[0])
                        - (self.group4()[0] * other.group2()[1])
                        - (self.group0()[0] * other.group1()[2])
                        - (self.group3()[0] * other.group0()[1])),
                    (-(self.group4()[2] * other.group2()[2]) - (self.group4()[1] * other.group2()[1]) - (self.group4()[0] * other.group2()[0])
                        + (self.group3()[1] * other.group0()[1])
                        + (self.group3()[0] * other.group0()[0])),
                ])),
            // e423, e431, e412
            (-(swizzle!(self.group10(), 1, 0, 2) * swizzle!(other.group0(), 2, 0, 1)) + (swizzle!(self.group10(), 0, 2, 1) * swizzle!(other.group0(), 1, 2, 0))
                - (Simd32x3::from(self[e35]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group8()[2], self.group8()[0], self.group8()[1]]))
                - (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group8()[1], self.group8()[2], self.group8()[0]]))
                + (swizzle!(self.group4(), 2, 1, 2) * Simd32x3::from([other.group1()[1], other.group1()[3], other.group1()[3]]))
                - (swizzle!(self.group4(), 1, 2, 0) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]))
                + (swizzle!(self.group4(), 0, 0, 1) * Simd32x3::from([other.group1()[3], other.group1()[2], other.group1()[0]]))
                - (Simd32x3::from(self.group0()[0]) * other.group0())
                - (Simd32x3::from(self.group3()[3]) * other.group0())),
            // e235, e315, e125
            (-(swizzle!(self.group10(), 1, 0, 2) * swizzle!(other.group2(), 2, 0, 1)) + (swizzle!(self.group10(), 0, 2, 1) * swizzle!(other.group2(), 1, 2, 0))
                - (Simd32x3::from(self.group8()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (swizzle!(other.group2(), 1, 2, 0) * Simd32x3::from([self.group8()[2], self.group8()[0], self.group8()[1]]))
                + (swizzle!(other.group2(), 2, 0, 1) * Simd32x3::from([self.group8()[1], self.group8()[2], self.group8()[0]]))
                + (Simd32x3::from(self.group3()[3]) * other.group2())
                - (Simd32x3::from(self.group0()[0]) * other.group2())
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + Simd32x3::from([
                    ((self.group3()[2] * other.group1()[1]) - (self.group3()[1] * other.group1()[2])),
                    (-(self.group3()[2] * other.group1()[0]) + (self.group3()[0] * other.group1()[2])),
                    ((self.group3()[1] * other.group1()[0]) - (self.group3()[0] * other.group1()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(other.group1(), 0, 1, 2, 2) * Simd32x4::from([self.group5()[3], self.group5()[3], self.group5()[3], self.group7()[2]]))
                + (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group5()[0], self.group5()[1], self.group5()[2], self[e1]]))
                - (swizzle!(other.group1(), 2, 0, 1, 1) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group7()[1]]))
                + Simd32x4::from([
                    ((self.group7()[2] * other.group0()[1]) - (self.group7()[1] * other.group0()[2]) - (self.group6()[2] * other.group2()[1])
                        + (self.group6()[1] * other.group2()[2])
                        - (self[e1] * other.group0()[0])
                        + (self.group1()[3] * other.group2()[0])
                        + (self.group1()[2] * other.group1()[1])),
                    (-(self.group7()[2] * other.group0()[0]) + (self.group7()[0] * other.group0()[2]) + (self.group6()[2] * other.group2()[0])
                        - (self.group6()[0] * other.group2()[2])
                        - (self[e1] * other.group0()[1])
                        + (self.group1()[3] * other.group2()[1])
                        + (self.group1()[0] * other.group1()[2])),
                    ((self.group7()[1] * other.group0()[0]) - (self.group7()[0] * other.group0()[1]) - (self.group6()[1] * other.group2()[0])
                        + (self.group6()[0] * other.group2()[1])
                        - (self[e1] * other.group0()[2])
                        + (self.group1()[3] * other.group2()[2])
                        + (self.group1()[1] * other.group1()[0])),
                    (-(self.group7()[0] * other.group1()[0])
                        - (self.group5()[2] * other.group2()[2])
                        - (self.group5()[1] * other.group2()[1])
                        - (self.group5()[0] * other.group2()[0])
                        - (self.group1()[2] * other.group2()[2])
                        - (self.group1()[0] * other.group2()[0])
                        - (self.group1()[1] * other.group2()[1])),
                ])),
            // e1234
            (-(self.group6()[2] * other.group1()[2])
                - (self.group6()[1] * other.group1()[1])
                - (self.group6()[0] * other.group1()[0])
                - (self.group5()[2] * other.group0()[2])
                - (self.group5()[1] * other.group0()[1])
                - (self.group5()[0] * other.group0()[0])
                - (self.group1()[3] * other.group1()[3])
                + (self.group1()[2] * other.group0()[2])
                + (self.group1()[0] * other.group0()[0])
                + (self.group1()[1] * other.group0()[1])),
            // e12, e31, e23
            (-(swizzle!(self.group7(), 1, 0, 2) * swizzle!(other.group0(), 0, 2, 1)) + (swizzle!(self.group7(), 0, 2, 1) * swizzle!(other.group0(), 1, 0, 2))
                - (swizzle!(self.group6(), 1, 0, 2) * swizzle!(other.group2(), 0, 2, 1))
                + (swizzle!(self.group6(), 0, 2, 1) * swizzle!(other.group2(), 1, 0, 2))
                + (Simd32x3::from(self[e1]) * swizzle!(other.group0(), 2, 1, 0))
                + (Simd32x3::from(self.group1()[3]) * swizzle!(other.group2(), 2, 1, 0))
                + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], other.group1()[1], other.group1()[0]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[2], self.group1()[1], self.group1()[0]]))
                + Simd32x3::from([
                    (-(self.group5()[1] * other.group1()[0]) + (self.group5()[0] * other.group1()[1])),
                    ((self.group5()[2] * other.group1()[0]) - (self.group5()[0] * other.group1()[2])),
                    (-(self.group5()[2] * other.group1()[1]) + (self.group5()[1] * other.group1()[2])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      526      578        0
    //    simd2       20       20        0
    //    simd3      166      174        0
    //    simd4       94       96        0
    // Totals...
    // yes simd      806      868        0
    //  no simd     1440     1524        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            (-(Simd32x2::from(other.group1()[3]) * Simd32x2::from([self.group5()[3], self.group3()[3]]))
                + (Simd32x2::from(other.group3()[2]) * Simd32x2::from([self.group1()[2], self.group8()[2]]))
                + (Simd32x2::from(other.group3()[0]) * Simd32x2::from([self.group1()[0], self.group8()[0]]))
                + (Simd32x2::from(other.group3()[1]) * Simd32x2::from([self.group1()[1], self.group8()[1]]))
                + Simd32x2::from([
                    (-(self.group7()[2] * other.group0()[2])
                        - (self.group7()[1] * other.group0()[1])
                        - (self.group7()[0] * other.group0()[0])
                        - (self.group6()[2] * other.group2()[2])
                        - (self.group6()[1] * other.group2()[1])
                        - (self.group6()[0] * other.group2()[0])
                        - (self.group5()[2] * other.group1()[2])
                        - (self.group5()[1] * other.group1()[1])
                        - (self.group5()[0] * other.group1()[0])
                        + (self[e1] * other.group2()[3])
                        + (self.group1()[3] * other.group3()[3])),
                    ((self.group10()[2] * other.group1()[0]) + (self.group10()[1] * other.group1()[1]) + (self.group10()[0] * other.group1()[2])
                        - (self[e35] * other.group3()[3])
                        - (self.group8()[3] * other.group2()[3])
                        + (self.group4()[2] * other.group2()[2])
                        + (self.group4()[1] * other.group2()[1])
                        + (self.group4()[0] * other.group2()[0])
                        + (self.group3()[2] * other.group0()[2])
                        + (self.group3()[0] * other.group0()[0])
                        + (self.group3()[1] * other.group0()[1])),
                ])),
            // e1, e2, e3, e4
            ((Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group10()[2], self.group10()[1], self.group10()[0], self[e35]]))
                - (swizzle!(other.group3(), 1, 2, 0, 2) * Simd32x4::from([self.group10()[0], self.group10()[2], self.group10()[1], self.group4()[2]]))
                + (swizzle!(self.group8(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]))
                - (swizzle!(other.group2(), 1, 2, 0, 3) * Simd32x4::from([self.group4()[2], self.group4()[0], self.group4()[1], self.group0()[0]]))
                + (swizzle!(other.group1(), 0, 1, 2, 2) * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group4()[2]]))
                - (swizzle!(self.group3(), 1, 2, 2, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group2()[3], other.group2()[3]]))
                + Simd32x4::from([
                    ((self.group10()[1] * other.group3()[2]) + (self[e35] * other.group2()[0]) - (self.group8()[3] * other.group0()[0]) - (self.group8()[2] * other.group1()[1])
                        + (self.group4()[1] * other.group2()[2])
                        + (self.group4()[0] * other.group3()[3])
                        + (self.group3()[2] * other.group0()[1])
                        + (self.group0()[0] * other.group3()[0])
                        - (self.group3()[0] * other.group2()[3])),
                    ((self.group10()[0] * other.group3()[0]) + (self[e35] * other.group2()[1]) - (self.group8()[3] * other.group0()[1]) - (self.group8()[0] * other.group1()[2])
                        + (self.group4()[2] * other.group2()[0])
                        + (self.group4()[1] * other.group3()[3])
                        - (self.group3()[1] * other.group2()[3])
                        + (self.group0()[0] * other.group3()[1])
                        + (self.group3()[0] * other.group0()[2])),
                    ((self.group10()[2] * other.group3()[1]) + (self[e35] * other.group2()[2]) - (self.group8()[3] * other.group0()[2]) - (self.group8()[1] * other.group1()[0])
                        + (self.group4()[2] * other.group3()[3])
                        + (self.group4()[0] * other.group2()[1])
                        + (self.group3()[1] * other.group0()[0])
                        + (self.group0()[0] * other.group3()[2])
                        - (self.group3()[0] * other.group0()[1])),
                    ((self.group10()[2] * other.group0()[0])
                        + (self.group10()[1] * other.group0()[1])
                        + (self.group10()[0] * other.group0()[2])
                        + (self.group8()[1] * other.group0()[1])
                        + (self.group8()[0] * other.group0()[0])
                        - (self.group4()[1] * other.group3()[1])
                        + (self.group4()[1] * other.group1()[1])
                        - (self.group4()[0] * other.group3()[0])
                        + (self.group4()[0] * other.group1()[0])),
                ])),
            // e5
            ((self.group10()[2] * other.group2()[0]) + (self.group10()[1] * other.group2()[1]) + (self.group10()[0] * other.group2()[2])
                - (self.group8()[3] * other.group1()[3])
                - (self.group8()[2] * other.group2()[2])
                - (self.group8()[1] * other.group2()[1])
                - (self.group8()[0] * other.group2()[0])
                + (self.group3()[3] * other.group3()[3])
                + (self.group3()[2] * other.group3()[2])
                + (self.group3()[2] * other.group1()[2])
                + (self.group3()[1] * other.group3()[1])
                + (self.group3()[1] * other.group1()[1])
                + (self.group3()[0] * other.group3()[0])
                - (self.group0()[0] * other.group3()[3])
                + (self.group3()[0] * other.group1()[0])),
            // e15, e25, e35, e45
            (-(swizzle!(other.group3(), 1, 2, 0, 2) * Simd32x4::from([self.group7()[2], self.group7()[0], self.group7()[1], self.group5()[2]]))
                + (swizzle!(other.group3(), 2, 0, 1, 3) * Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[0], self.group1()[3]]))
                + (swizzle!(other.group1(), 2, 0, 3, 2) * Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[2], self.group1()[2]]))
                + (swizzle!(other.group1(), 3, 3, 1, 1) * Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[0], self.group1()[1]]))
                - (swizzle!(other.group2(), 1, 2, 0, 2) * Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group6()[2]]))
                + (other.group1() * Simd32x4::from([self[e1], self[e1], self[e1], self.group0()[1]]))
                - (swizzle!(other.group2(), 1, 2, 0, 1) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group6()[1]]))
                + (swizzle!(self.group1(), 1, 2, 2, 0) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group3()[3], other.group1()[0]]))
                + Simd32x4::from([
                    (-(self.group7()[2] * other.group1()[1])
                        + (self.group5()[3] * other.group2()[0])
                        + (self.group5()[1] * other.group2()[2])
                        + (self.group5()[0] * other.group3()[3])
                        + (self[e1] * other.group3()[0])
                        + (self.group0()[1] * other.group2()[0])
                        + (self.group1()[0] * other.group3()[3])),
                    (-(self.group7()[0] * other.group1()[2])
                        + (self.group5()[3] * other.group2()[1])
                        + (self.group5()[2] * other.group2()[0])
                        + (self.group5()[1] * other.group3()[3])
                        + (self[e1] * other.group3()[1])
                        + (self.group1()[1] * other.group3()[3])
                        + (self.group0()[1] * other.group2()[1])),
                    (-(self.group7()[1] * other.group1()[0])
                        + (self.group5()[3] * other.group2()[2])
                        + (self.group5()[2] * other.group3()[3])
                        + (self.group5()[0] * other.group2()[1])
                        + (self[e1] * other.group3()[2])
                        + (self.group0()[1] * other.group2()[2])
                        + (self.group1()[0] * other.group2()[1])),
                    ((self.group7()[2] * other.group0()[2]) + (self.group7()[1] * other.group0()[1]) + (self.group7()[0] * other.group0()[0])
                        - (self.group6()[0] * other.group2()[0])
                        - (self.group5()[1] * other.group3()[1])
                        - (self.group5()[0] * other.group3()[0])
                        - (self[e1] * other.group2()[3])),
                ])),
            // e41, e42, e43
            ((swizzle!(self.group6(), 2, 2, 1) * Simd32x3::from([other.group3()[1], other.group1()[0], other.group3()[0]]))
                - (Simd32x3::from(self.group6()[2]) * Simd32x3::from([other.group1()[1], other.group3()[0], other.group1()[3]]))
                - (Simd32x3::from(self.group6()[1]) * Simd32x3::from([other.group3()[2], other.group1()[3], other.group1()[0]]))
                + (swizzle!(self.group6(), 1, 0, 0) * Simd32x3::from([other.group1()[2], other.group3()[2], other.group1()[1]]))
                - (Simd32x3::from(self.group6()[0]) * Simd32x3::from([other.group1()[3], other.group1()[2], other.group3()[1]]))
                - (Simd32x3::from(self.group5()[3]) * other.group0())
                - (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group5()[2], self.group5()[0], self.group5()[1]]))
                + (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group5()[1], self.group5()[2], self.group5()[0]]))
                + (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group5()[0], self.group5()[1], self.group5()[2]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (swizzle!(other.group0(), 1, 1, 0) * Simd32x3::from([self.group1()[2], self.group0()[1], self.group1()[1]]))
                - (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                + (swizzle!(other.group0(), 0, 2, 2) * Simd32x3::from([self.group0()[1], self.group1()[0], self.group0()[1]]))
                - (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))),
            // e415, e425, e435, e321
            (-(swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group10()[1], self.group10()[0], self.group10()[2], self.group8()[2]]))
                + (swizzle!(other.group1(), 1, 2, 0, 3) * Simd32x4::from([self.group10()[0], self.group10()[2], self.group10()[1], self.group0()[0]]))
                - (other.group2() * Simd32x4::from([self[e35], self[e35], self[e35], self.group8()[3]]))
                - (swizzle!(self.group8(), 3, 3, 3, 1) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]]))
                + (swizzle!(other.group3(), 1, 2, 0, 3) * Simd32x4::from([self.group8()[2], self.group8()[0], self.group8()[1], self[e35]]))
                - (swizzle!(self.group8(), 1, 2, 2, 0) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[3], other.group1()[0]]))
                - (swizzle!(other.group2(), 2, 0, 1, 2) * Simd32x4::from([self.group4()[1], self.group4()[2], self.group4()[0], self.group4()[2]]))
                - (swizzle!(other.group3(), 3, 3, 1, 0) * Simd32x4::from([self.group4()[0], self.group4()[1], self.group8()[0], self.group10()[2]]))
                - (swizzle!(other.group3(), 0, 1, 3, 1) * Simd32x4::from([self.group3()[3], self.group3()[3], self.group4()[2], self.group10()[1]]))
                + (swizzle!(self.group3(), 2, 0, 1, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[2]]))
                - (swizzle!(other.group2(), 3, 3, 3, 1) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group4()[1]]))
                + Simd32x4::from([
                    (-(self.group8()[0] * other.group1()[3]) + (self.group4()[2] * other.group2()[1])
                        - (self.group3()[1] * other.group0()[2])
                        - (self.group0()[0] * other.group1()[0])),
                    (-(self.group8()[1] * other.group1()[3]) + (self.group4()[0] * other.group2()[2])
                        - (self.group3()[2] * other.group0()[0])
                        - (self.group0()[0] * other.group1()[1])),
                    ((self.group4()[1] * other.group2()[0])
                        - (self.group3()[3] * other.group3()[2])
                        - (self.group0()[0] * other.group1()[2])
                        - (self.group3()[0] * other.group0()[1])),
                    (-(self.group10()[0] * other.group3()[2]) - (self.group4()[0] * other.group2()[0])
                        + (self.group3()[1] * other.group0()[1])
                        + (self.group3()[0] * other.group0()[0])),
                ])),
            // e423, e431, e412
            (-(swizzle!(self.group10(), 2, 1, 2) * Simd32x3::from([other.group2()[3], other.group2()[3], other.group0()[1]]))
                - (swizzle!(self.group10(), 1, 0, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group2()[3]]))
                + (swizzle!(self.group10(), 0, 2, 1) * swizzle!(other.group0(), 1, 2, 0))
                + (Simd32x3::from(self[e35]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                - (Simd32x3::from(self[e35]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group8()[2], self.group8()[0], self.group8()[1]]))
                - (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group8()[1], self.group8()[2], self.group8()[0]]))
                - (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group8()[0], self.group8()[1], self.group8()[2]]))
                - (swizzle!(self.group4(), 2, 2, 1) * Simd32x3::from([other.group3()[1], other.group1()[0], other.group3()[0]]))
                + (Simd32x3::from(self.group4()[2]) * Simd32x3::from([other.group1()[1], other.group3()[0], other.group1()[3]]))
                + (Simd32x3::from(self.group4()[1]) * Simd32x3::from([other.group3()[2], other.group1()[3], other.group1()[0]]))
                - (swizzle!(self.group4(), 1, 0, 0) * Simd32x3::from([other.group1()[2], other.group3()[2], other.group1()[1]]))
                + (Simd32x3::from(self.group4()[0]) * Simd32x3::from([other.group1()[3], other.group1()[2], other.group3()[1]]))
                - (Simd32x3::from(self.group0()[0]) * other.group0())
                - (Simd32x3::from(self.group3()[3]) * other.group0())),
            // e235, e315, e125
            (-(swizzle!(self.group10(), 2, 1, 2) * Simd32x3::from([other.group3()[3], other.group3()[3], other.group2()[1]]))
                - (swizzle!(self.group10(), 1, 0, 0) * Simd32x3::from([other.group2()[2], other.group2()[0], other.group3()[3]]))
                + (swizzle!(self.group10(), 0, 2, 1) * Simd32x3::from([other.group2()[1], other.group2()[2], other.group2()[0]]))
                - (Simd32x3::from(self.group8()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                - (Simd32x3::from(self.group8()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group8()[0], self.group8()[1], self.group8()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                - (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + Simd32x3::from([
                    (-(self.group8()[2] * other.group2()[1])
                        + (self.group8()[1] * other.group2()[2])
                        + (self.group3()[2] * other.group3()[1])
                        + (self.group3()[2] * other.group1()[1])
                        - (self.group3()[1] * other.group3()[2])
                        - (self.group3()[1] * other.group1()[2])),
                    ((self.group8()[2] * other.group2()[0])
                        - (self.group8()[0] * other.group2()[2])
                        - (self.group3()[2] * other.group3()[0])
                        - (self.group3()[2] * other.group1()[0])
                        + (self.group3()[0] * other.group3()[2])
                        + (self.group3()[0] * other.group1()[2])),
                    (-(self.group8()[1] * other.group2()[0])
                        + (self.group8()[0] * other.group2()[1])
                        + (self.group3()[1] * other.group3()[0])
                        + (self.group3()[1] * other.group1()[0])
                        - (self.group3()[0] * other.group3()[1])
                        - (self.group3()[0] * other.group1()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(other.group2(), 3, 3, 3, 2) * Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group5()[2]]))
                - (swizzle!(other.group2(), 1, 2, 0, 1) * Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group5()[1]]))
                + (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group6()[0], self.group6()[1], self.group6()[2], self.group5()[3]]))
                - (swizzle!(other.group1(), 0, 1, 2, 2) * Simd32x4::from([self.group5()[3], self.group5()[3], self.group5()[3], self.group7()[2]]))
                - (swizzle!(other.group3(), 1, 2, 0, 2) * Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group7()[2]]))
                + (swizzle!(other.group3(), 2, 0, 1, 3) * Simd32x4::from([self.group5()[1], self.group5()[2], self.group5()[0], self.group0()[1]]))
                + (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group5()[0], self.group5()[1], self.group5()[2], self[e1]]))
                - (swizzle!(other.group1(), 2, 0, 1, 1) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group7()[1]]))
                + Simd32x4::from([
                    ((self.group7()[2] * other.group0()[1]) - (self.group7()[1] * other.group0()[2]) + (self.group6()[1] * other.group2()[2]) - (self[e1] * other.group0()[0])
                        + (self.group1()[3] * other.group2()[0])
                        + (self.group1()[2] * other.group1()[1])
                        + (self.group0()[1] * other.group3()[0])),
                    (-(self.group7()[2] * other.group0()[0]) + (self.group7()[0] * other.group0()[2]) + (self.group6()[2] * other.group2()[0]) - (self[e1] * other.group0()[1])
                        + (self.group1()[3] * other.group2()[1])
                        + (self.group0()[1] * other.group3()[1])
                        + (self.group1()[0] * other.group1()[2])),
                    ((self.group7()[1] * other.group0()[0]) - (self.group7()[0] * other.group0()[1]) + (self.group6()[0] * other.group2()[1]) - (self[e1] * other.group0()[2])
                        + (self.group1()[3] * other.group2()[2])
                        + (self.group1()[1] * other.group1()[0])
                        + (self.group0()[1] * other.group3()[2])),
                    (-(self.group7()[1] * other.group3()[1])
                        - (self.group7()[0] * other.group3()[0])
                        - (self.group7()[0] * other.group1()[0])
                        - (self.group5()[0] * other.group2()[0])
                        - (self.group1()[2] * other.group2()[2])
                        - (self.group1()[1] * other.group2()[1])
                        - (self.group1()[0] * other.group2()[0])),
                ])),
            // e1234
            ((self.group6()[2] * other.group3()[2]) - (self.group6()[2] * other.group1()[2]) + (self.group6()[1] * other.group3()[1]) - (self.group6()[1] * other.group1()[1])
                + (self.group6()[0] * other.group3()[0])
                - (self.group6()[0] * other.group1()[0])
                - (self.group5()[3] * other.group2()[3])
                - (self.group5()[2] * other.group0()[2])
                - (self.group5()[1] * other.group0()[1])
                - (self.group5()[0] * other.group0()[0])
                - (self.group1()[3] * other.group1()[3])
                + (self.group1()[2] * other.group0()[2])
                + (self.group1()[1] * other.group0()[1])
                + (self.group0()[1] * other.group2()[3])
                + (self.group1()[0] * other.group0()[0])),
            // e12, e31, e23
            ((swizzle!(self.group7(), 2, 2, 1) * Simd32x3::from([other.group2()[3], other.group0()[0], other.group0()[2]]))
                - (swizzle!(self.group7(), 1, 0, 2) * swizzle!(other.group0(), 0, 2, 1))
                + (swizzle!(self.group7(), 0, 1, 0) * Simd32x3::from([other.group0()[1], other.group2()[3], other.group2()[3]]))
                + (swizzle!(self.group6(), 2, 2, 1) * Simd32x3::from([other.group3()[3], other.group2()[0], other.group2()[2]]))
                - (swizzle!(self.group6(), 1, 0, 2) * Simd32x3::from([other.group2()[0], other.group2()[2], other.group2()[1]]))
                + (swizzle!(self.group6(), 0, 1, 0) * Simd32x3::from([other.group2()[1], other.group3()[3], other.group3()[3]]))
                - (Simd32x3::from(self.group5()[3]) * Simd32x3::from([other.group3()[2], other.group3()[1], other.group3()[0]]))
                + (Simd32x3::from(self[e1]) * swizzle!(other.group0(), 2, 1, 0))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group2()[2], other.group2()[1], other.group2()[0]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[2], self.group1()[1], self.group1()[0]]))
                + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], other.group1()[1], other.group1()[0]]))
                + Simd32x3::from([
                    (-(self.group5()[1] * other.group1()[0]) + (self.group5()[0] * other.group1()[1]) + (self.group1()[1] * other.group3()[0])
                        - (self.group1()[0] * other.group3()[1])),
                    ((self.group5()[2] * other.group1()[0]) - (self.group5()[0] * other.group1()[2]) - (self.group1()[2] * other.group3()[0])
                        + (self.group1()[0] * other.group3()[2])),
                    (-(self.group5()[2] * other.group1()[1]) + (self.group5()[1] * other.group1()[2]) + (self.group1()[2] * other.group3()[1])
                        - (self.group1()[1] * other.group3()[2])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      367      407        0
    //    simd2       17       18        0
    //    simd3      121      131        0
    //    simd4       66       70        0
    // Totals...
    // yes simd      571      626        0
    //  no simd     1028     1116        0
    fn anti_sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            ((self.group0() * Simd32x2::from(other.group0()[1])) + (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self[e35], self.group1()[3]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[1]) - (self.group6()[0] * other.group0()[0])),
                ((self.group1()[1] * other.group0()[1]) - (self.group6()[1] * other.group0()[0])),
                ((self.group1()[2] * other.group0()[1]) - (self.group6()[2] * other.group0()[0])),
                (self.group1()[3] * other.group0()[1]),
            ]),
            // e5
            ((self.group5()[3] * other.group0()[0]) + (self.group0()[1] * other.group0()[0]) + (self[e1] * other.group0()[1])),
            // e15, e25, e35, e45
            ((Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group10()[2], self.group10()[1], self.group10()[0], self[e35]]))
                + (self.group3() * Simd32x4::from(other.group0()[1]))
                + Simd32x4::from([
                    ((self.group8()[0] * other.group0()[0]) * -1.0),
                    ((self.group8()[1] * other.group0()[0]) * -1.0),
                    ((self.group8()[2] * other.group0()[0]) * -1.0),
                    0.0,
                ])),
            // e41, e42, e43
            (self.group4() * Simd32x3::from(other.group0()[1])),
            // e415, e425, e435, e321
            ((self.group5() * Simd32x4::from(other.group0()[1]))
                + (Simd32x4::from([1.0, 1.0, 1.0, -1.0])
                    * Simd32x4::from(other.group0()[0])
                    * Simd32x4::from([self.group6()[0], self.group6()[1], self.group6()[2], self.group1()[3]]))),
            // e423, e431, e412
            (self.group6() * Simd32x3::from(other.group0()[1])),
            // e235, e315, e125
            ((self.group7() * Simd32x3::from(other.group0()[1]))
                + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group5()[0], self.group5()[1], self.group5()[2]]))),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group4()[0], self.group4()[1], self.group4()[2], self.group0()[0]]))
                + (self.group8() * Simd32x4::from(other.group0()[1]))
                + Simd32x4::from([0.0, 0.0, 0.0, ((self.group3()[3] * other.group0()[0]) * -1.0)])),
            // e1234
            (self[e35] * other.group0()[1]),
            // e12, e31, e23
            ((swizzle!(self.group4(), 2, 1, 0) * Simd32x3::from(other.group0()[0])) + (self.group10() * Simd32x3::from(other.group0()[1]))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      400      447        0
    //    simd2       17       17        0
    //    simd3      126      136        0
    //    simd4       69       72        0
    // Totals...
    // yes simd      612      672        0
    //  no simd     1088     1177        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            (-(Simd32x2::from(other.group0()[3]) * Simd32x2::from([self.group5()[3], self.group3()[3]]))
                + Simd32x2::from([
                    (-(self.group6()[2] * other.group0()[2]) - (self.group6()[1] * other.group0()[1]) - (self.group6()[0] * other.group0()[0])),
                    ((self.group4()[2] * other.group0()[2]) + (self.group4()[1] * other.group0()[1]) + (self.group4()[0] * other.group0()[0])),
                ])),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group10()[2] * other.group0()[3]) + (self[e35] * other.group0()[0]) + (self.group4()[1] * other.group0()[2]) - (self.group4()[2] * other.group0()[1])),
                ((self.group10()[1] * other.group0()[3]) + (self[e35] * other.group0()[1]) - (self.group4()[0] * other.group0()[2]) + (self.group4()[2] * other.group0()[0])),
                ((self.group10()[0] * other.group0()[3]) + (self[e35] * other.group0()[2]) + (self.group4()[0] * other.group0()[1]) - (self.group4()[1] * other.group0()[0])),
                (self[e35] * other.group0()[3]),
            ]),
            // e5
            ((self.group10()[2] * other.group0()[0]) + (self.group10()[1] * other.group0()[1]) + (self.group10()[0] * other.group0()[2])
                - (self.group8()[3] * other.group0()[3])
                - (self.group8()[2] * other.group0()[2])
                - (self.group8()[0] * other.group0()[0])
                - (self.group8()[1] * other.group0()[1])),
            // e15, e25, e35, e45
            ((Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group0()[1]]))
                - (swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group6()[2]]))
                - (swizzle!(other.group0(), 1, 2, 0, 1) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group6()[1]]))
                + Simd32x4::from([
                    ((self.group5()[3] * other.group0()[0])
                        + (self.group5()[1] * other.group0()[2])
                        + (self.group0()[1] * other.group0()[0])
                        + (self.group1()[1] * other.group0()[2])),
                    ((self.group5()[3] * other.group0()[1])
                        + (self.group5()[2] * other.group0()[0])
                        + (self.group1()[2] * other.group0()[0])
                        + (self.group0()[1] * other.group0()[1])),
                    ((self.group5()[3] * other.group0()[2])
                        + (self.group5()[0] * other.group0()[1])
                        + (self.group0()[1] * other.group0()[2])
                        + (self.group1()[0] * other.group0()[1])),
                    ((self.group6()[0] * other.group0()[0]) * -1.0),
                ])),
            // e41, e42, e43
            (self.group6() * Simd32x3::from(other.group0()[3]) * Simd32x3::from(-1.0)),
            // e415, e425, e435, e321
            (-(swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([self[e35], self[e35], self[e35], self.group4()[2]]))
                - (swizzle!(other.group0(), 3, 3, 3, 1) * Simd32x4::from([self.group8()[0], self.group8()[1], self.group8()[2], self.group4()[1]]))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * Simd32x4::from([self.group4()[1], self.group4()[2], self.group4()[0], self.group4()[0]]))
                + (swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group4()[2], self.group4()[0], self.group4()[1], self.group0()[0]]))),
            // e423, e431, e412
            (self.group4() * Simd32x3::from(other.group0()[3])),
            // e235, e315, e125
            (-(swizzle!(self.group10(), 1, 0, 2) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (swizzle!(self.group10(), 0, 2, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + Simd32x3::from([
                    (-(self.group8()[2] * other.group0()[1]) + (self.group8()[1] * other.group0()[2])),
                    ((self.group8()[2] * other.group0()[0]) - (self.group8()[0] * other.group0()[2])),
                    (-(self.group8()[1] * other.group0()[0]) + (self.group8()[0] * other.group0()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group5()[2]]))
                + (swizzle!(other.group0(), 2, 0, 1, 3) * Simd32x4::from([self.group6()[1], self.group6()[2], self.group6()[0], self[e1]]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group0()[0]) + (self.group5()[0] * other.group0()[3])),
                    ((self.group1()[3] * other.group0()[1]) + (self.group5()[1] * other.group0()[3])),
                    ((self.group1()[3] * other.group0()[2]) + (self.group5()[2] * other.group0()[3])),
                    (-(self.group5()[1] * other.group0()[1])
                        - (self.group5()[0] * other.group0()[0])
                        - (self.group1()[2] * other.group0()[2])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group1()[1] * other.group0()[1])),
                ])),
            // e1234
            (self.group1()[3] * other.group0()[3] * -1.0),
            // e12, e31, e23
            (-(swizzle!(self.group6(), 1, 0, 2) * Simd32x3::from([other.group0()[0], other.group0()[2], other.group0()[1]]))
                + (swizzle!(self.group6(), 0, 2, 1) * Simd32x3::from([other.group0()[1], other.group0()[0], other.group0()[2]]))
                - (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group1()[2], self.group1()[1], self.group1()[0]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[2], other.group0()[1], other.group0()[0]]))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      442      490        0
    //    simd2       20       20        0
    //    simd3      138      146        0
    //    simd4       80       83        0
    // Totals...
    // yes simd      680      739        0
    //  no simd     1216     1300        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            (-(Simd32x2::from(other.group0()[3]) * Simd32x2::from([self.group5()[3], self.group3()[3]]))
                + (Simd32x2::from(other.group1()[2]) * Simd32x2::from([self.group1()[2], self.group8()[2]]))
                + (Simd32x2::from(other.group1()[0]) * Simd32x2::from([self.group1()[0], self.group8()[0]]))
                + (Simd32x2::from(other.group1()[1]) * Simd32x2::from([self.group1()[1], self.group8()[1]]))
                + Simd32x2::from([
                    (-(self.group6()[2] * other.group0()[2]) - (self.group6()[1] * other.group0()[1]) - (self.group6()[0] * other.group0()[0])
                        + (self.group1()[3] * other.group1()[3])),
                    (-(self[e35] * other.group1()[3]) + (self.group4()[2] * other.group0()[2]) + (self.group4()[1] * other.group0()[1]) + (self.group4()[0] * other.group0()[0])),
                ])),
            // e1, e2, e3, e4
            ((Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group10()[2], self.group10()[1], self.group10()[0], self[e35]]))
                - (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group10()[0], self.group10()[2], self.group10()[1], self.group4()[2]]))
                + Simd32x4::from([
                    ((self.group10()[1] * other.group1()[2]) + (self[e35] * other.group0()[0]) - (self.group4()[2] * other.group0()[1])
                        + (self.group4()[1] * other.group0()[2])
                        + (self.group0()[0] * other.group1()[0])
                        + (self.group4()[0] * other.group1()[3])),
                    ((self.group10()[0] * other.group1()[0])
                        + (self[e35] * other.group0()[1])
                        + (self.group4()[2] * other.group0()[0])
                        + (self.group4()[1] * other.group1()[3])
                        + (self.group0()[0] * other.group1()[1])
                        - (self.group4()[0] * other.group0()[2])),
                    ((self.group10()[2] * other.group1()[1]) + (self[e35] * other.group0()[2]) + (self.group4()[2] * other.group1()[3]) - (self.group4()[1] * other.group0()[0])
                        + (self.group0()[0] * other.group1()[2])
                        + (self.group4()[0] * other.group0()[1])),
                    (-(self.group4()[0] * other.group1()[0]) - (self.group4()[1] * other.group1()[1])),
                ])),
            // e5
            ((self.group10()[2] * other.group0()[0]) + (self.group10()[1] * other.group0()[1]) + (self.group10()[0] * other.group0()[2])
                - (self.group8()[3] * other.group0()[3])
                - (self.group8()[2] * other.group0()[2])
                - (self.group8()[1] * other.group0()[1])
                - (self.group8()[0] * other.group0()[0])
                + (self.group3()[3] * other.group1()[3])
                + (self.group3()[2] * other.group1()[2])
                + (self.group3()[1] * other.group1()[1])
                - (self.group0()[0] * other.group1()[3])
                + (self.group3()[0] * other.group1()[0])),
            // e15, e25, e35, e45
            (-(swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group7()[2], self.group7()[0], self.group7()[1], self.group5()[2]]))
                + (swizzle!(other.group1(), 2, 0, 1, 3) * Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[0], self.group1()[3]]))
                + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group0()[1]]))
                - (swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group6()[2]]))
                - (swizzle!(other.group0(), 1, 2, 0, 1) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group6()[1]]))
                + Simd32x4::from([
                    ((self.group5()[3] * other.group0()[0])
                        + (self.group5()[1] * other.group0()[2])
                        + (self.group5()[0] * other.group1()[3])
                        + (self[e1] * other.group1()[0])
                        + (self.group1()[1] * other.group0()[2])
                        + (self.group0()[1] * other.group0()[0])
                        + (self.group1()[0] * other.group1()[3])),
                    ((self.group5()[3] * other.group0()[1])
                        + (self.group5()[2] * other.group0()[0])
                        + (self.group5()[1] * other.group1()[3])
                        + (self[e1] * other.group1()[1])
                        + (self.group1()[2] * other.group0()[0])
                        + (self.group1()[1] * other.group1()[3])
                        + (self.group0()[1] * other.group0()[1])),
                    ((self.group5()[3] * other.group0()[2])
                        + (self.group5()[2] * other.group1()[3])
                        + (self.group5()[0] * other.group0()[1])
                        + (self[e1] * other.group1()[2])
                        + (self.group1()[2] * other.group1()[3])
                        + (self.group0()[1] * other.group0()[2])
                        + (self.group1()[0] * other.group0()[1])),
                    (-(self.group6()[0] * other.group0()[0]) - (self.group5()[1] * other.group1()[1]) - (self.group5()[0] * other.group1()[0])),
                ])),
            // e41, e42, e43
            ((swizzle!(self.group6(), 2, 0, 1) * Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]))
                - (swizzle!(self.group6(), 1, 2, 2) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group0()[3]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (swizzle!(self.group6(), 0, 1, 0) * Simd32x3::from([other.group0()[3], other.group0()[3], other.group1()[1]]))),
            // e415, e425, e435, e321
            (-(swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([self[e35], self[e35], self[e35], self.group4()[2]]))
                + (swizzle!(other.group1(), 1, 2, 0, 3) * Simd32x4::from([self.group8()[2], self.group8()[0], self.group8()[1], self[e35]]))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * Simd32x4::from([self.group8()[1], self.group8()[2], self.group8()[0], self.group10()[2]]))
                - (swizzle!(other.group0(), 3, 3, 3, 1) * Simd32x4::from([self.group8()[0], self.group8()[1], self.group8()[2], self.group4()[1]]))
                + (swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group4()[2], self.group4()[0], self.group4()[1], self.group0()[0]]))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * Simd32x4::from([self.group4()[1], self.group4()[2], self.group4()[0], self.group4()[0]]))
                - (swizzle!(other.group1(), 0, 3, 3, 1) * Simd32x4::from([self.group3()[3], self.group4()[1], self.group4()[2], self.group10()[1]]))
                - (swizzle!(other.group1(), 3, 1, 2, 2) * Simd32x4::from([self.group4()[0], self.group3()[3], self.group3()[3], self.group10()[0]]))),
            // e423, e431, e412
            ((Simd32x3::from(self[e35]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (swizzle!(self.group4(), 2, 0, 1) * Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]))
                + (swizzle!(self.group4(), 0, 2, 2) * Simd32x3::from([other.group0()[3], other.group1()[0], other.group0()[3]]))
                + (swizzle!(self.group4(), 1, 1, 0) * Simd32x3::from([other.group1()[2], other.group0()[3], other.group1()[1]]))),
            // e235, e315, e125
            (-(swizzle!(self.group10(), 2, 1, 2) * Simd32x3::from([other.group1()[3], other.group1()[3], other.group0()[1]]))
                - (swizzle!(self.group10(), 1, 0, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group1()[3]]))
                + (swizzle!(self.group10(), 0, 2, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))
                - (Simd32x3::from(self.group8()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group8()[0], self.group8()[1], self.group8()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + Simd32x3::from([
                    (-(self.group8()[2] * other.group0()[1]) + (self.group8()[1] * other.group0()[2]) + (self.group3()[2] * other.group1()[1])
                        - (self.group3()[1] * other.group1()[2])),
                    ((self.group8()[2] * other.group0()[0]) - (self.group8()[0] * other.group0()[2]) - (self.group3()[2] * other.group1()[0])
                        + (self.group3()[0] * other.group1()[2])),
                    (-(self.group8()[1] * other.group0()[0]) + (self.group8()[0] * other.group0()[1]) + (self.group3()[1] * other.group1()[0])
                        - (self.group3()[0] * other.group1()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group5()[2]]))
                + (swizzle!(other.group0(), 2, 0, 1, 3) * Simd32x4::from([self.group6()[1], self.group6()[2], self.group6()[0], self[e1]]))
                + (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group6()[0], self.group6()[1], self.group6()[2], self.group5()[3]]))
                - (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group7()[2]]))
                + (swizzle!(other.group1(), 2, 0, 1, 3) * Simd32x4::from([self.group5()[1], self.group5()[2], self.group5()[0], self.group0()[1]]))
                + Simd32x4::from([
                    ((self.group5()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[0]) + (self.group1()[3] * other.group0()[0])),
                    ((self.group5()[1] * other.group0()[3]) + (self.group0()[1] * other.group1()[1]) + (self.group1()[3] * other.group0()[1])),
                    ((self.group5()[2] * other.group0()[3]) + (self.group0()[1] * other.group1()[2]) + (self.group1()[3] * other.group0()[2])),
                    (-(self.group7()[1] * other.group1()[1])
                        - (self.group7()[0] * other.group1()[0])
                        - (self.group5()[1] * other.group0()[1])
                        - (self.group5()[0] * other.group0()[0])
                        - (self.group1()[2] * other.group0()[2])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])),
                ])),
            // e1234
            ((self.group6()[2] * other.group1()[2]) + (self.group6()[1] * other.group1()[1]) - (self.group1()[3] * other.group0()[3]) + (self.group6()[0] * other.group1()[0])),
            // e12, e31, e23
            ((swizzle!(self.group6(), 2, 2, 1) * Simd32x3::from([other.group1()[3], other.group0()[0], other.group0()[2]]))
                - (swizzle!(self.group6(), 1, 0, 2) * Simd32x3::from([other.group0()[0], other.group0()[2], other.group0()[1]]))
                + (swizzle!(self.group6(), 0, 1, 0) * Simd32x3::from([other.group0()[1], other.group1()[3], other.group1()[3]]))
                - (Simd32x3::from(self.group5()[3]) * Simd32x3::from([other.group1()[2], other.group1()[1], other.group1()[0]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[2], other.group0()[1], other.group0()[0]]))
                - (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group1()[2], self.group1()[1], self.group1()[0]]))
                + Simd32x3::from([
                    (-(self.group1()[0] * other.group1()[1]) + (self.group1()[1] * other.group1()[0])),
                    (-(self.group1()[2] * other.group1()[0]) + (self.group1()[0] * other.group1()[2])),
                    ((self.group1()[2] * other.group1()[1]) - (self.group1()[1] * other.group1()[2])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      445      489        0
    //    simd2       21       22        0
    //    simd3      135      145        0
    //    simd4       65       67        0
    // Totals...
    // yes simd      666      723        0
    //  no simd     1152     1236        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            (-(Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group10()[2], self.group5()[0]]))
                - (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group10()[1], self.group5()[1]]))
                - (Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group10()[0], self.group5()[2]]))
                - (Simd32x2::from(other.group1()[2]) * Simd32x2::from([self.group4()[2], self.group6()[2]]))
                - (Simd32x2::from(other.group1()[0]) * Simd32x2::from([self.group4()[0], self.group6()[0]]))
                - (Simd32x2::from(other.group1()[1]) * Simd32x2::from([self.group4()[1], self.group6()[1]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group6()[2] * other.group1()[1]) - (self.group6()[1] * other.group1()[2]) + (self.group5()[3] * other.group0()[0]) - (self.group1()[3] * other.group1()[0])
                    + (self.group1()[1] * other.group0()[2])
                    - (self.group1()[2] * other.group0()[1])),
                (-(self.group6()[2] * other.group1()[0]) + (self.group6()[0] * other.group1()[2]) + (self.group5()[3] * other.group0()[1])
                    - (self.group1()[3] * other.group1()[1])
                    - (self.group1()[0] * other.group0()[2])
                    + (self.group1()[2] * other.group0()[0])),
                ((self.group6()[1] * other.group1()[0]) - (self.group6()[0] * other.group1()[1]) + (self.group5()[3] * other.group0()[2]) - (self.group1()[3] * other.group1()[2])
                    + (self.group1()[0] * other.group0()[1])
                    - (self.group1()[1] * other.group0()[0])),
                (-(self.group6()[2] * other.group0()[2]) - (self.group6()[0] * other.group0()[0]) - (self.group6()[1] * other.group0()[1])),
            ]),
            // e5
            (-(self.group7()[2] * other.group0()[2])
                - (self.group7()[1] * other.group0()[1])
                - (self.group7()[0] * other.group0()[0])
                - (self.group5()[2] * other.group1()[2])
                - (self.group5()[1] * other.group1()[1])
                - (self.group5()[0] * other.group1()[0])
                - (self.group1()[2] * other.group1()[2])
                - (self.group1()[0] * other.group1()[0])
                - (self.group1()[1] * other.group1()[1])),
            // e15, e25, e35, e45
            (-(Simd32x4::from(other.group1()[1]) * Simd32x4::from([self.group10()[0], self.group3()[3], self.group8()[0], self.group4()[1]]))
                - (Simd32x4::from(other.group1()[2]) * Simd32x4::from([self.group8()[1], self.group10()[2], self.group3()[3], self.group4()[2]]))
                - (Simd32x4::from(other.group1()[0]) * Simd32x4::from([self.group3()[3], self.group8()[2], self.group10()[1], self.group4()[0]]))
                + Simd32x4::from([
                    ((self.group10()[1] * other.group1()[2]) + (self.group8()[3] * other.group0()[0]) + (self.group8()[2] * other.group1()[1])
                        - (self.group3()[2] * other.group0()[1])
                        + (self.group0()[0] * other.group1()[0])
                        + (self.group3()[1] * other.group0()[2])),
                    ((self.group10()[0] * other.group1()[0])
                        + (self.group8()[3] * other.group0()[1])
                        + (self.group8()[0] * other.group1()[2])
                        + (self.group3()[2] * other.group0()[0])
                        + (self.group0()[0] * other.group1()[1])
                        - (self.group3()[0] * other.group0()[2])),
                    ((self.group10()[2] * other.group1()[1]) + (self.group8()[3] * other.group0()[2]) + (self.group8()[1] * other.group1()[0])
                        - (self.group3()[1] * other.group0()[0])
                        + (self.group0()[0] * other.group1()[2])
                        + (self.group3()[0] * other.group0()[1])),
                    (-(self.group8()[2] * other.group0()[2]) - (self.group8()[1] * other.group0()[1]) - (self.group8()[0] * other.group0()[0])),
                ])),
            // e41, e42, e43
            ((Simd32x3::from(self[e35]) * other.group0()) + (swizzle!(self.group4(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1))
                - (swizzle!(self.group4(), 2, 0, 1) * swizzle!(other.group0(), 1, 2, 0))),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group6()[2] * other.group1()[1]) + (self.group6()[1] * other.group1()[2]) - (self.group5()[2] * other.group0()[1])
                    + (self.group5()[1] * other.group0()[2])
                    + (self.group0()[1] * other.group0()[0])
                    + (self.group1()[3] * other.group1()[0])),
                ((self.group6()[2] * other.group1()[0]) - (self.group6()[0] * other.group1()[2]) + (self.group5()[2] * other.group0()[0]) - (self.group5()[0] * other.group0()[2])
                    + (self.group0()[1] * other.group0()[1])
                    + (self.group1()[3] * other.group1()[1])),
                (-(self.group6()[1] * other.group1()[0]) + (self.group6()[0] * other.group1()[1]) - (self.group5()[1] * other.group0()[0])
                    + (self.group5()[0] * other.group0()[1])
                    + (self.group0()[1] * other.group0()[2])
                    + (self.group1()[3] * other.group1()[2])),
                ((self.group6()[2] * other.group1()[2]) + (self.group6()[1] * other.group1()[1]) + (self.group6()[0] * other.group1()[0])
                    - (self.group1()[2] * other.group0()[2])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[1])),
            ]),
            // e423, e431, e412
            (-(swizzle!(self.group6(), 2, 0, 1) * swizzle!(other.group0(), 1, 2, 0))
                + (swizzle!(other.group0(), 0, 0, 2) * Simd32x3::from([self.group1()[3], self.group6()[2], self.group1()[3]]))
                + (swizzle!(other.group0(), 2, 1, 1) * Simd32x3::from([self.group6()[1], self.group1()[3], self.group6()[0]]))),
            // e235, e315, e125
            (-(swizzle!(self.group7(), 2, 0, 1) * swizzle!(other.group0(), 1, 2, 0))
                + (swizzle!(self.group7(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1))
                + (Simd32x3::from(self.group5()[3]) * other.group1())
                - (swizzle!(other.group1(), 1, 2, 0) * Simd32x3::from([self.group5()[2], self.group5()[0], self.group5()[1]]))
                + (swizzle!(other.group1(), 2, 0, 1) * Simd32x3::from([self.group5()[1], self.group5()[2], self.group5()[0]]))
                + (Simd32x3::from(self[e1]) * other.group0())
                - (swizzle!(other.group1(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))
                + (swizzle!(other.group1(), 0, 0, 2) * Simd32x3::from([self.group0()[1], self.group1()[2], self.group0()[1]]))
                + (swizzle!(other.group1(), 2, 1, 1) * Simd32x3::from([self.group1()[1], self.group0()[1], self.group1()[0]]))),
            // e4235, e4315, e4125, e3215
            ((swizzle!(self.group8(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self[e35] * other.group1()[0]) - (self.group8()[2] * other.group0()[1]) - (self.group4()[2] * other.group1()[1])
                        + (self.group3()[3] * other.group0()[0])
                        + (self.group4()[1] * other.group1()[2])),
                    ((self[e35] * other.group1()[1]) - (self.group8()[0] * other.group0()[2]) + (self.group4()[2] * other.group1()[0]) + (self.group3()[3] * other.group0()[1])
                        - (self.group4()[0] * other.group1()[2])),
                    ((self[e35] * other.group1()[2]) - (self.group8()[1] * other.group0()[0]) - (self.group4()[1] * other.group1()[0])
                        + (self.group3()[3] * other.group0()[2])
                        + (self.group4()[0] * other.group1()[1])),
                    (-(self.group10()[2] * other.group1()[0]) - (self.group10()[1] * other.group1()[1]) - (self.group10()[0] * other.group1()[2])
                        + (self.group8()[1] * other.group1()[1])
                        + (self.group8()[0] * other.group1()[0])
                        - (self.group3()[2] * other.group0()[2])
                        - (self.group3()[0] * other.group0()[0])
                        - (self.group3()[1] * other.group0()[1])),
                ])),
            // e1234
            (-(self.group4()[2] * other.group0()[2]) - (self.group4()[0] * other.group0()[0]) - (self.group4()[1] * other.group0()[1])),
            // e12, e31, e23
            ((swizzle!(self.group10(), 2, 0, 1) * swizzle!(other.group0(), 1, 0, 2)) - (swizzle!(self.group10(), 1, 2, 0) * swizzle!(other.group0(), 0, 2, 1))
                + (Simd32x3::from(self[e35]) * swizzle!(other.group1(), 2, 1, 0))
                - (swizzle!(self.group4(), 1, 0, 2) * swizzle!(other.group1(), 0, 2, 1))
                + (Simd32x3::from(self.group0()[0]) * swizzle!(other.group0(), 2, 1, 0))
                + (swizzle!(self.group4(), 0, 2, 1) * swizzle!(other.group1(), 1, 0, 2))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      421      469        0
    //    simd2       23       24        0
    //    simd3      139      148        0
    //    simd4       83       85        0
    // Totals...
    // yes simd      666      726        0
    //  no simd     1216     1301        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            (-(Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group10()[2], self.group5()[0]]))
                - (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group10()[1], self.group5()[1]]))
                - (Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group10()[0], self.group5()[2]]))
                + (Simd32x2::from(other.group1()[3]) * Simd32x2::from([self[e35], self.group1()[3]]))
                - (Simd32x2::from(other.group1()[2]) * Simd32x2::from([self.group4()[2], self.group6()[2]]))
                - (Simd32x2::from(other.group1()[1]) * Simd32x2::from([self.group4()[1], self.group6()[1]]))
                + (self.group0() * Simd32x2::from(other.group0()[3]))
                - (Simd32x2::from(other.group1()[0]) * Simd32x2::from([self.group4()[0], self.group6()[0]]))),
            // e1, e2, e3, e4
            ((other.group0() * Simd32x4::from([self.group5()[3], self.group5()[3], self.group5()[3], self.group1()[3]]))
                - (swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group6()[2]]))
                + Simd32x4::from([
                    ((self.group6()[2] * other.group1()[1])
                        - (self.group6()[1] * other.group1()[2])
                        - (self.group6()[0] * other.group1()[3])
                        - (self.group1()[3] * other.group1()[0])
                        + (self.group1()[0] * other.group0()[3])
                        + (self.group1()[1] * other.group0()[2])),
                    (-(self.group6()[2] * other.group1()[0]) - (self.group6()[1] * other.group1()[3]) + (self.group6()[0] * other.group1()[2])
                        - (self.group1()[3] * other.group1()[1])
                        + (self.group1()[2] * other.group0()[0])
                        + (self.group1()[1] * other.group0()[3])),
                    (-(self.group6()[2] * other.group1()[3]) + (self.group6()[1] * other.group1()[0])
                        - (self.group6()[0] * other.group1()[1])
                        - (self.group1()[3] * other.group1()[2])
                        + (self.group1()[2] * other.group0()[3])
                        + (self.group1()[0] * other.group0()[1])),
                    (-(self.group6()[1] * other.group0()[1]) - (self.group6()[0] * other.group0()[0])),
                ])),
            // e5
            (-(self.group7()[2] * other.group0()[2]) - (self.group7()[1] * other.group0()[1]) - (self.group7()[0] * other.group0()[0]) + (self.group5()[3] * other.group1()[3])
                - (self.group5()[2] * other.group1()[2])
                - (self.group5()[1] * other.group1()[1])
                - (self.group5()[0] * other.group1()[0])
                + (self[e1] * other.group0()[3])
                - (self.group1()[2] * other.group1()[2])
                - (self.group1()[1] * other.group1()[1])
                + (self.group0()[1] * other.group1()[3])
                - (self.group1()[0] * other.group1()[0])),
            // e15, e25, e35, e45
            ((swizzle!(other.group1(), 3, 3, 1, 3) * Simd32x4::from([self.group10()[2], self.group10()[1], self.group10()[2], self[e35]]))
                - (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group10()[0], self.group10()[2], self.group10()[1], self.group4()[2]]))
                + (other.group0() * Simd32x4::from([self.group8()[3], self.group8()[3], self.group8()[3], self.group3()[3]]))
                - (swizzle!(self.group8(), 1, 2, 2, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[3], other.group0()[2]]))
                - (swizzle!(self.group8(), 0, 1, 0, 1) * Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[1], other.group0()[1]]))
                - (swizzle!(other.group1(), 0, 1, 2, 1) * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group4()[1]]))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group8()[0]]))
                + Simd32x4::from([
                    ((self.group10()[1] * other.group1()[2])
                        + (self.group8()[2] * other.group1()[1])
                        + (self.group3()[1] * other.group0()[2])
                        + (self.group0()[0] * other.group1()[0])
                        + (self.group3()[0] * other.group0()[3])),
                    ((self.group10()[0] * other.group1()[0])
                        + (self.group8()[0] * other.group1()[2])
                        + (self.group3()[2] * other.group0()[0])
                        + (self.group3()[1] * other.group0()[3])
                        + (self.group0()[0] * other.group1()[1])),
                    ((self.group10()[0] * other.group1()[3])
                        + (self.group8()[1] * other.group1()[0])
                        + (self.group3()[2] * other.group0()[3])
                        + (self.group0()[0] * other.group1()[2])
                        + (self.group3()[0] * other.group0()[1])),
                    ((self.group4()[0] * other.group1()[0]) * -1.0),
                ])),
            // e41, e42, e43
            ((Simd32x3::from(self[e35]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (swizzle!(self.group4(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))
                + (swizzle!(self.group4(), 0, 2, 2) * Simd32x3::from([other.group0()[3], other.group0()[0], other.group0()[3]]))
                + (swizzle!(self.group4(), 1, 1, 0) * Simd32x3::from([other.group0()[2], other.group0()[3], other.group0()[1]]))),
            // e415, e425, e435, e321
            (-(swizzle!(other.group1(), 1, 2, 0, 3) * Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group1()[3]]))
                + (swizzle!(other.group1(), 2, 0, 3, 2) * Simd32x4::from([self.group6()[1], self.group6()[2], self.group6()[2], self.group6()[2]]))
                + (swizzle!(other.group1(), 3, 3, 1, 1) * Simd32x4::from([self.group6()[0], self.group6()[1], self.group6()[0], self.group6()[1]]))
                - (swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group1()[2]]))
                + (swizzle!(self.group5(), 1, 2, 2, 3) * swizzle!(other.group0(), 2, 0, 3, 3))
                + (swizzle!(other.group1(), 0, 1, 2, 0) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group6()[0]]))
                + Simd32x4::from([
                    ((self.group5()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[0])),
                    ((self.group5()[1] * other.group0()[3]) + (self.group0()[1] * other.group0()[1])),
                    ((self.group5()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[2])),
                    (-(self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                ])),
            // e423, e431, e412
            (-(swizzle!(self.group6(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))
                + (swizzle!(self.group6(), 1, 2, 2) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[3]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (swizzle!(self.group6(), 0, 1, 0) * Simd32x3::from([other.group0()[3], other.group0()[3], other.group0()[1]]))),
            // e235, e315, e125
            (-(swizzle!(self.group7(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))
                + (swizzle!(self.group7(), 1, 2, 2) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[3]]))
                + (swizzle!(self.group7(), 0, 1, 0) * Simd32x3::from([other.group0()[3], other.group0()[3], other.group0()[1]]))
                + (Simd32x3::from(self.group5()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group5()[0], self.group5()[1], self.group5()[2]]))
                + (Simd32x3::from(self[e1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + Simd32x3::from([
                    (-(self.group5()[2] * other.group1()[1]) + (self.group5()[1] * other.group1()[2]) - (self.group1()[2] * other.group1()[1])
                        + (self.group1()[1] * other.group1()[2])),
                    ((self.group5()[2] * other.group1()[0]) - (self.group5()[0] * other.group1()[2]) + (self.group1()[2] * other.group1()[0])
                        - (self.group1()[0] * other.group1()[2])),
                    (-(self.group5()[1] * other.group1()[0]) + (self.group5()[0] * other.group1()[1]) - (self.group1()[1] * other.group1()[0])
                        + (self.group1()[0] * other.group1()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group1(), 0, 1, 2, 2) * Simd32x4::from([self[e35], self[e35], self[e35], self.group8()[2]]))
                - (swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group8()[2], self.group8()[0], self.group8()[1], self.group3()[2]]))
                + (swizzle!(self.group8(), 1, 2, 2, 3) * swizzle!(other.group0(), 2, 0, 3, 3))
                + (swizzle!(self.group8(), 0, 1, 0, 1) * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[1], other.group1()[1]]))
                - (swizzle!(other.group1(), 1, 2, 0, 0) * Simd32x4::from([self.group4()[2], self.group4()[0], self.group4()[1], self.group10()[2]]))
                + (swizzle!(other.group1(), 2, 0, 3, 0) * Simd32x4::from([self.group4()[1], self.group4()[2], self.group4()[2], self.group8()[0]]))
                + (swizzle!(other.group1(), 3, 3, 1, 3) * Simd32x4::from([self.group4()[0], self.group4()[1], self.group4()[0], self.group0()[0]]))
                + Simd32x4::from([
                    (self.group3()[3] * other.group0()[0]),
                    (self.group3()[3] * other.group0()[1]),
                    (self.group3()[3] * other.group0()[2]),
                    (-(self.group10()[1] * other.group1()[1])
                        - (self.group10()[0] * other.group1()[2])
                        - (self.group3()[3] * other.group1()[3])
                        - (self.group3()[1] * other.group0()[1])
                        - (self.group3()[0] * other.group0()[0])),
                ])),
            // e1234
            ((self[e35] * other.group0()[3]) - (self.group4()[2] * other.group0()[2]) - (self.group4()[0] * other.group0()[0]) - (self.group4()[1] * other.group0()[1])),
            // e12, e31, e23
            ((swizzle!(self.group10(), 2, 1, 2) * Simd32x3::from([other.group0()[1], other.group0()[3], other.group0()[3]]))
                - (swizzle!(self.group10(), 1, 2, 0) * Simd32x3::from([other.group0()[0], other.group0()[2], other.group0()[1]]))
                + (swizzle!(self.group10(), 0, 0, 1) * Simd32x3::from([other.group0()[3], other.group0()[0], other.group0()[2]]))
                + (Simd32x3::from(self[e35]) * Simd32x3::from([other.group1()[2], other.group1()[1], other.group1()[0]]))
                + (swizzle!(self.group4(), 2, 2, 1) * Simd32x3::from([other.group1()[3], other.group1()[0], other.group1()[2]]))
                - (swizzle!(self.group4(), 1, 0, 2) * Simd32x3::from([other.group1()[0], other.group1()[2], other.group1()[1]]))
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[2], other.group0()[1], other.group0()[0]]))
                + (swizzle!(self.group4(), 0, 1, 0) * Simd32x3::from([other.group1()[1], other.group1()[3], other.group1()[3]]))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      724      776        0
    //    simd2       32       32        0
    //    simd3      236      244        0
    //    simd4      122      124        0
    // Totals...
    // yes simd     1114     1176        0
    //  no simd     1984     2068        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            (-(Simd32x2::from(other.group5()[0]) * Simd32x2::from([self.group10()[2], self.group5()[0]]))
                - (Simd32x2::from(other.group5()[1]) * Simd32x2::from([self.group10()[1], self.group5()[1]]))
                - (Simd32x2::from(other.group5()[2]) * Simd32x2::from([self.group10()[0], self.group5()[2]]))
                + (Simd32x2::from(other[e1]) * Simd32x2::from([self[e35], self.group1()[3]]))
                + (Simd32x2::from(other.group1()[3]) * Simd32x2::from([self.group8()[3], self[e1]]))
                + (Simd32x2::from(self.group8()[2]) * Simd32x2::from([other.group1()[2], other.group8()[2]]))
                + (Simd32x2::from(self.group8()[1]) * Simd32x2::from([other.group1()[1], other.group8()[1]]))
                + (Simd32x2::from(self.group8()[0]) * Simd32x2::from([other.group1()[0], other.group8()[0]]))
                - (Simd32x2::from(self.group7()[2]) * Simd32x2::from([other.group4()[2], other.group6()[2]]))
                - (Simd32x2::from(self.group7()[1]) * Simd32x2::from([other.group4()[1], other.group6()[1]]))
                - (Simd32x2::from(self.group7()[0]) * Simd32x2::from([other.group4()[0], other.group6()[0]]))
                - (Simd32x2::from(self.group6()[2]) * Simd32x2::from([other.group3()[2], other.group7()[2]]))
                - (Simd32x2::from(self.group6()[1]) * Simd32x2::from([other.group3()[1], other.group7()[1]]))
                - (Simd32x2::from(self.group6()[0]) * Simd32x2::from([other.group3()[0], other.group7()[0]]))
                - (Simd32x2::from(other.group3()[3]) * Simd32x2::from([self.group5()[3], self.group3()[3]]))
                + (self.group0() * Simd32x2::from(other.group0()[1]))
                + Simd32x2::from([
                    (-(self.group5()[2] * other.group10()[0])
                        - (self.group5()[1] * other.group10()[1])
                        - (self.group5()[0] * other.group10()[2])
                        - (self.group4()[2] * other.group7()[2])
                        - (self.group4()[1] * other.group7()[1])
                        - (self.group4()[0] * other.group7()[0])
                        - (self.group3()[3] * other.group5()[3])
                        - (self.group3()[2] * other.group6()[2])
                        - (self.group3()[1] * other.group6()[1])
                        - (self.group3()[0] * other.group6()[0])
                        + (self[e1] * other[e35])
                        + (self.group1()[3] * other.group8()[3])
                        + (self.group1()[2] * other.group8()[2])
                        + (self.group1()[1] * other.group8()[1])
                        + (self.group1()[0] * other.group8()[0])
                        + (self.group0()[1] * other.group0()[0])),
                    ((self.group10()[2] * other.group10()[2]) + (self.group10()[1] * other.group10()[1]) + (self.group10()[0] * other.group10()[0])
                        - (self[e35] * other.group8()[3])
                        - (self.group8()[3] * other[e35])
                        + (self.group5()[3] * other.group5()[3])
                        + (self.group4()[2] * other.group3()[2])
                        + (self.group4()[1] * other.group3()[1])
                        + (self.group4()[0] * other.group3()[0])
                        + (self.group3()[2] * other.group4()[2])
                        + (self.group3()[1] * other.group4()[1])
                        + (self.group3()[0] * other.group4()[0])
                        - (self.group1()[2] * other.group1()[2])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group0()[0])),
                ])),
            // e1, e2, e3, e4
            ((Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group10()[2], self.group10()[1], self.group10()[0], self[e35]]))
                - (swizzle!(other.group8(), 1, 2, 0, 2) * Simd32x4::from([self.group10()[0], self.group10()[2], self.group10()[1], self.group4()[2]]))
                + (swizzle!(self.group8(), 1, 2, 2, 2) * Simd32x4::from([other.group10()[0], other.group10()[2], other.group0()[0], other.group4()[2]]))
                + (swizzle!(self.group8(), 0, 1, 0, 1) * Simd32x4::from([other.group0()[0], other.group0()[0], other.group10()[1], other.group4()[1]]))
                + (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group0()[1]]))
                + (other.group5() * Simd32x4::from([self.group5()[3], self.group5()[3], self.group5()[3], self.group1()[3]]))
                - (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group6()[2]]))
                - (swizzle!(self.group3(), 1, 2, 2, 3) * Simd32x4::from([other.group4()[2], other.group4()[0], other[e35], other[e35]]))
                - (swizzle!(other.group5(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group6()[2]]))
                + (swizzle!(self.group1(), 1, 2, 2, 3) * Simd32x4::from([other.group5()[2], other.group5()[0], other.group0()[1], other.group0()[1]]))
                + (swizzle!(self.group1(), 0, 1, 0, 2) * Simd32x4::from([other.group0()[1], other.group0()[1], other.group5()[1], other.group6()[2]]))
                + Simd32x4::from([
                    ((self.group10()[1] * other.group8()[2]) + (self[e35] * other.group3()[0])
                        - (self.group8()[3] * other.group4()[0])
                        - (self.group8()[2] * other.group10()[1])
                        - (self.group7()[2] * other.group6()[1])
                        + (self.group7()[1] * other.group6()[2])
                        + (self.group6()[2] * other.group7()[1])
                        - (self.group6()[1] * other.group7()[2])
                        - (self.group6()[0] * other[e1])
                        + (self.group5()[1] * other.group1()[2])
                        + (self.group5()[0] * other.group5()[3])
                        - (self.group4()[2] * other.group3()[1])
                        + (self.group4()[1] * other.group3()[2])
                        + (self.group4()[0] * other.group8()[3])
                        + (self.group3()[3] * other.group10()[2])
                        + (self.group3()[2] * other.group4()[1])
                        - (self.group3()[0] * other[e35])
                        + (self[e1] * other.group6()[0])
                        - (self.group1()[3] * other.group7()[0])
                        + (self.group0()[0] * other.group8()[0])
                        + (self.group0()[1] * other.group1()[0])),
                    ((self.group10()[0] * other.group8()[0]) + (self[e35] * other.group3()[1]) - (self.group8()[3] * other.group4()[1]) - (self.group8()[0] * other.group10()[0])
                        + (self.group7()[2] * other.group6()[0])
                        - (self.group7()[0] * other.group6()[2])
                        - (self.group6()[2] * other.group7()[0])
                        - (self.group6()[1] * other[e1])
                        + (self.group6()[0] * other.group7()[2])
                        + (self.group5()[2] * other.group1()[0])
                        + (self.group5()[1] * other.group5()[3])
                        + (self.group4()[2] * other.group3()[0])
                        + (self.group4()[1] * other.group8()[3])
                        - (self.group4()[0] * other.group3()[2])
                        + (self.group3()[3] * other.group10()[1])
                        - (self.group3()[1] * other[e35])
                        + (self.group3()[0] * other.group4()[2])
                        + (self[e1] * other.group6()[1])
                        - (self.group1()[3] * other.group7()[1])
                        + (self.group0()[0] * other.group8()[1])
                        + (self.group0()[1] * other.group1()[1])),
                    ((self.group10()[2] * other.group8()[1]) + (self[e35] * other.group3()[2])
                        - (self.group8()[3] * other.group4()[2])
                        - (self.group8()[1] * other.group10()[2])
                        - (self.group7()[1] * other.group6()[0])
                        + (self.group7()[0] * other.group6()[1])
                        - (self.group6()[2] * other[e1])
                        + (self.group6()[1] * other.group7()[0])
                        - (self.group6()[0] * other.group7()[1])
                        + (self.group5()[2] * other.group5()[3])
                        + (self.group5()[0] * other.group1()[1])
                        + (self.group4()[2] * other.group8()[3])
                        - (self.group4()[1] * other.group3()[0])
                        + (self.group4()[0] * other.group3()[1])
                        + (self.group3()[3] * other.group10()[0])
                        + (self.group3()[1] * other.group4()[0])
                        - (self.group3()[0] * other.group4()[1])
                        + (self[e1] * other.group6()[2])
                        - (self.group1()[3] * other.group7()[2])
                        + (self.group0()[0] * other.group8()[2])
                        + (self.group0()[1] * other.group1()[2])),
                    ((self.group10()[2] * other.group4()[0]) + (self.group10()[1] * other.group4()[1]) + (self.group10()[0] * other.group4()[2]) - (self[e35] * other.group0()[0])
                        + (self.group8()[0] * other.group4()[0])
                        - (self.group6()[1] * other.group5()[1])
                        - (self.group6()[1] * other.group1()[1])
                        - (self.group6()[0] * other.group5()[0])
                        - (self.group6()[0] * other.group1()[0])
                        - (self.group5()[3] * other.group1()[3])
                        - (self.group5()[2] * other.group6()[2])
                        - (self.group5()[1] * other.group6()[1])
                        - (self.group5()[0] * other.group6()[0])
                        + (self.group4()[2] * other.group10()[0])
                        + (self.group4()[1] * other.group10()[1])
                        - (self.group4()[1] * other.group8()[1])
                        + (self.group4()[0] * other.group10()[2])
                        - (self.group4()[0] * other.group8()[0])
                        + (self.group1()[1] * other.group6()[1])
                        + (self.group1()[0] * other.group6()[0])
                        - (self.group0()[0] * other[e35])),
                ])),
            // e5
            ((self.group10()[2] * other.group3()[0]) + (self.group10()[1] * other.group3()[1]) + (self.group10()[0] * other.group3()[2])
                - (self.group8()[3] * other.group3()[3])
                - (self.group8()[3] * other.group0()[0])
                - (self.group8()[2] * other.group3()[2])
                - (self.group8()[1] * other.group3()[1])
                - (self.group8()[0] * other.group3()[0])
                - (self.group7()[2] * other.group5()[2])
                + (self.group7()[2] * other.group1()[2])
                - (self.group7()[1] * other.group5()[1])
                + (self.group7()[1] * other.group1()[1])
                - (self.group7()[0] * other.group5()[0])
                + (self.group7()[0] * other.group1()[0])
                + (self.group5()[3] * other[e1])
                - (self.group5()[2] * other.group7()[2])
                - (self.group5()[1] * other.group7()[1])
                - (self.group5()[0] * other.group7()[0])
                + (self.group3()[3] * other.group8()[3])
                + (self.group3()[2] * other.group10()[0])
                + (self.group3()[2] * other.group8()[2])
                + (self.group3()[1] * other.group10()[1])
                + (self.group3()[1] * other.group8()[1])
                + (self.group3()[0] * other.group10()[2])
                + (self.group3()[0] * other.group8()[0])
                - (self[e1] * other.group5()[3])
                + (self[e1] * other.group0()[1])
                - (self.group1()[2] * other.group7()[2])
                - (self.group1()[1] * other.group7()[1])
                - (self.group1()[0] * other.group7()[0])
                - (self.group0()[0] * other.group8()[3])
                + (self.group0()[1] * other[e1])),
            // e15, e25, e35, e45
            ((Simd32x4::from(other[e1]) * Simd32x4::from([self.group10()[2], self.group10()[1], self.group10()[0], self[e35]]))
                - (Simd32x4::from(other.group7()[1]) * Simd32x4::from([self.group10()[0], self.group3()[3], self.group8()[0], self.group4()[1]]))
                - (Simd32x4::from(self.group8()[3]) * other.group1())
                - (Simd32x4::from(other.group7()[2]) * Simd32x4::from([self.group8()[1], self.group10()[2], self.group3()[3], self.group4()[2]]))
                - (swizzle!(self.group8(), 0, 2, 2, 2) * Simd32x4::from([other[e1], other.group7()[0], other[e1], other.group5()[2]]))
                - (swizzle!(other.group8(), 1, 2, 0, 2) * Simd32x4::from([self.group7()[2], self.group7()[0], self.group7()[1], self.group5()[2]]))
                + (swizzle!(other.group8(), 2, 0, 1, 3) * Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[0], self.group1()[3]]))
                + (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group0()[1]]))
                - (swizzle!(other.group3(), 1, 2, 0, 2) * Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group6()[2]]))
                - (swizzle!(other.group5(), 1, 3, 3, 1) * Simd32x4::from([self.group3()[2], self.group3()[1], self.group3()[2], self.group8()[1]]))
                + (swizzle!(self.group3(), 2, 2, 2, 3) * Simd32x4::from([other.group1()[1], other.group5()[0], other.group0()[1], other.group0()[1]]))
                + (swizzle!(self.group3(), 1, 1, 1, 2) * Simd32x4::from([other.group5()[2], other.group0()[1], other.group1()[0], other.group6()[2]]))
                - (swizzle!(other.group5(), 3, 2, 0, 0) * Simd32x4::from([self.group3()[0], self.group3()[0], self.group3()[1], self.group8()[0]]))
                + (swizzle!(self.group3(), 0, 0, 0, 1) * Simd32x4::from([other.group0()[1], other.group1()[2], other.group5()[1], other.group6()[1]]))
                - (swizzle!(other.group3(), 1, 2, 0, 1) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group6()[1]]))
                + (swizzle!(self.group1(), 1, 2, 2, 2) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group8()[3], other.group10()[0]]))
                + (swizzle!(self.group1(), 0, 1, 0, 1) * Simd32x4::from([other.group8()[3], other.group8()[3], other.group3()[1], other.group10()[1]]))
                + Simd32x4::from([
                    ((self.group10()[1] * other.group7()[2]) + (self.group8()[3] * other.group5()[0]) + (self.group8()[2] * other.group7()[1])
                        - (self.group7()[2] * other.group10()[1])
                        + (self.group7()[1] * other.group10()[0])
                        + (self.group7()[0] * other.group0()[0])
                        + (self.group5()[3] * other.group3()[0])
                        + (self.group5()[1] * other.group3()[2])
                        + (self.group5()[0] * other.group8()[3])
                        - (self.group3()[3] * other.group7()[0])
                        - (self.group3()[1] * other.group1()[2])
                        + (self[e1] * other.group10()[2])
                        + (self[e1] * other.group8()[0])
                        + (self.group0()[0] * other.group7()[0])
                        + (self.group0()[1] * other.group3()[0])),
                    ((self.group10()[0] * other.group7()[0]) + (self.group8()[3] * other.group5()[1]) - (self.group8()[1] * other[e1])
                        + (self.group8()[0] * other.group7()[2])
                        + (self.group7()[2] * other.group10()[2])
                        + (self.group7()[1] * other.group0()[0])
                        - (self.group7()[0] * other.group10()[0])
                        + (self.group5()[3] * other.group3()[1])
                        + (self.group5()[2] * other.group3()[0])
                        + (self.group5()[1] * other.group8()[3])
                        - (self.group3()[2] * other.group1()[0])
                        + (self[e1] * other.group10()[1])
                        + (self[e1] * other.group8()[1])
                        + (self.group0()[0] * other.group7()[1])
                        + (self.group0()[1] * other.group3()[1])),
                    ((self.group10()[2] * other.group7()[1]) - (self.group10()[1] * other.group7()[0])
                        + (self.group8()[3] * other.group5()[2])
                        + (self.group8()[1] * other.group7()[0])
                        + (self.group7()[2] * other.group0()[0])
                        - (self.group7()[1] * other.group10()[2])
                        + (self.group7()[0] * other.group10()[1])
                        + (self.group5()[3] * other.group3()[2])
                        + (self.group5()[2] * other.group8()[3])
                        + (self.group5()[0] * other.group3()[1])
                        - (self.group3()[0] * other.group1()[1])
                        + (self[e1] * other.group10()[0])
                        + (self[e1] * other.group8()[2])
                        + (self.group0()[0] * other.group7()[2])
                        + (self.group0()[1] * other.group3()[2])),
                    ((self.group10()[2] * other.group1()[0])
                        + (self.group10()[1] * other.group1()[1])
                        + (self.group10()[0] * other.group1()[2])
                        + (self.group7()[2] * other.group4()[2])
                        + (self.group7()[1] * other.group4()[1])
                        + (self.group7()[0] * other.group4()[0])
                        - (self.group6()[0] * other.group3()[0])
                        - (self.group5()[3] * other.group0()[0])
                        - (self.group5()[1] * other.group8()[1])
                        - (self.group5()[0] * other.group8()[0])
                        - (self.group4()[0] * other.group7()[0])
                        + (self.group3()[0] * other.group6()[0])
                        - (self[e1] * other[e35])
                        + (self.group1()[0] * other.group10()[2])
                        - (self.group0()[0] * other.group5()[3])),
                ])),
            // e41, e42, e43
            ((swizzle!(self.group10(), 2, 1, 2) * Simd32x3::from([other.group1()[3], other.group1()[3], other.group6()[1]]))
                + (swizzle!(self.group10(), 1, 0, 0) * Simd32x3::from([other.group6()[2], other.group6()[0], other.group1()[3]]))
                - (swizzle!(self.group10(), 0, 2, 1) * swizzle!(other.group6(), 1, 2, 0))
                + (Simd32x3::from(self[e35]) * Simd32x3::from([other.group5()[0], other.group5()[1], other.group5()[2]]))
                + (Simd32x3::from(self[e35]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (swizzle!(other.group6(), 1, 2, 0) * Simd32x3::from([self.group8()[2], self.group8()[0], self.group8()[1]]))
                + (swizzle!(other.group6(), 2, 0, 1) * Simd32x3::from([self.group8()[1], self.group8()[2], self.group8()[0]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group8()[0], self.group8()[1], self.group8()[2]]))
                - (Simd32x3::from(self.group6()[2]) * Simd32x3::from([other.group10()[1], other.group8()[0], other.group3()[3]]))
                + (Simd32x3::from(self.group6()[2]) * Simd32x3::from([other.group8()[1], other.group10()[2], other.group0()[0]]))
                + (Simd32x3::from(self.group6()[1]) * Simd32x3::from([other.group10()[0], other.group0()[0], other.group8()[0]]))
                - (Simd32x3::from(self.group6()[1]) * Simd32x3::from([other.group8()[2], other.group3()[3], other.group10()[2]]))
                - (Simd32x3::from(self.group6()[0]) * Simd32x3::from([other.group3()[3], other.group10()[0], other.group8()[1]]))
                + (Simd32x3::from(self.group6()[0]) * Simd32x3::from([other.group0()[0], other.group8()[2], other.group10()[1]]))
                - (Simd32x3::from(self.group5()[3]) * other.group4())
                - (swizzle!(other.group4(), 1, 2, 0) * Simd32x3::from([self.group5()[2], self.group5()[0], self.group5()[1]]))
                + (swizzle!(other.group4(), 2, 0, 1) * Simd32x3::from([self.group5()[1], self.group5()[2], self.group5()[0]]))
                + (Simd32x3::from(other[e35]) * Simd32x3::from([self.group5()[0], self.group5()[1], self.group5()[2]]))
                - (swizzle!(self.group4(), 2, 0, 1) * Simd32x3::from([other.group5()[1], other.group5()[2], other.group5()[0]]))
                - (swizzle!(self.group4(), 2, 0, 1) * Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]))
                + (swizzle!(self.group4(), 1, 2, 2) * Simd32x3::from([other.group5()[2], other.group5()[0], other.group5()[3]]))
                + (swizzle!(self.group4(), 1, 2, 2) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group0()[1]]))
                + (swizzle!(self.group4(), 0, 1, 0) * Simd32x3::from([other.group5()[3], other.group5()[3], other.group5()[1]]))
                + (swizzle!(self.group4(), 0, 1, 0) * Simd32x3::from([other.group0()[1], other.group0()[1], other.group1()[1]]))
                + (Simd32x3::from(self.group3()[3]) * other.group6())
                + (Simd32x3::from(self.group1()[3]) * swizzle!(other.group10(), 2, 1, 0))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group8()[0], other.group8()[1], other.group8()[2]]))
                + (swizzle!(other.group4(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))
                - (swizzle!(other.group4(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                - (Simd32x3::from(other[e35]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(self.group0()[0]) * other.group6())
                + (Simd32x3::from(self.group0()[1]) * other.group4())),
            // e415, e425, e435, e321
            (-(swizzle!(other.group3(), 0, 1, 2, 2) * Simd32x4::from([self[e35], self[e35], self[e35], self.group4()[2]]))
                - (Simd32x4::from(self.group8()[3]) * Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[2], other[e35]]))
                + (swizzle!(other.group8(), 1, 2, 0, 3) * Simd32x4::from([self.group8()[2], self.group8()[0], self.group8()[1], self[e35]]))
                - (swizzle!(self.group8(), 1, 2, 2, 2) * Simd32x4::from([other.group8()[2], other.group8()[0], other.group3()[3], other.group10()[0]]))
                - (swizzle!(self.group8(), 0, 1, 0, 1) * Simd32x4::from([other.group3()[3], other.group3()[3], other.group8()[1], other.group10()[1]]))
                + (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self[e1]]))
                + (Simd32x4::from(self.group5()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[1]]))
                - (swizzle!(self.group5(), 2, 0, 1, 2) * Simd32x4::from([other.group5()[1], other.group5()[2], other.group5()[0], other.group1()[2]]))
                + (swizzle!(other.group5(), 2, 0, 1, 3) * Simd32x4::from([self.group5()[1], self.group5()[2], self.group5()[0], self.group0()[1]]))
                + (swizzle!(other.group3(), 1, 2, 0, 3) * Simd32x4::from([self.group4()[2], self.group4()[0], self.group4()[1], self.group0()[0]]))
                - (swizzle!(other.group3(), 2, 0, 1, 1) * Simd32x4::from([self.group4()[1], self.group4()[2], self.group4()[0], self.group4()[1]]))
                - (swizzle!(other.group8(), 3, 3, 3, 0) * Simd32x4::from([self.group4()[0], self.group4()[1], self.group4()[2], self.group10()[2]]))
                - (swizzle!(other.group8(), 0, 1, 2, 1) * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group10()[1]]))
                + (swizzle!(self.group3(), 2, 0, 1, 3) * Simd32x4::from([other.group4()[1], other.group4()[2], other.group4()[0], other.group0()[0]]))
                - (swizzle!(other.group1(), 1, 2, 0, 1) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group5()[1]]))
                + Simd32x4::from([
                    (-(self.group10()[2] * other.group0()[0]) - (self.group10()[1] * other.group10()[0]) + (self.group10()[0] * other.group10()[1])
                        - (self.group7()[2] * other.group6()[1])
                        + (self.group7()[1] * other.group6()[2])
                        - (self.group6()[2] * other.group7()[1])
                        + (self.group6()[1] * other.group7()[2])
                        + (self.group6()[0] * other[e1])
                        + (self.group5()[0] * other.group0()[1])
                        - (self.group3()[1] * other.group4()[2])
                        - (self.group3()[0] * other[e35])
                        + (self[e1] * other.group6()[0])
                        + (self.group1()[3] * other.group7()[0])
                        + (self.group1()[1] * other.group1()[2])
                        + (self.group1()[0] * other.group5()[3])
                        - (self.group0()[0] * other.group10()[2])
                        + (self.group0()[1] * other.group5()[0])),
                    ((self.group10()[2] * other.group10()[0]) - (self.group10()[1] * other.group0()[0]) - (self.group10()[0] * other.group10()[2])
                        + (self.group7()[2] * other.group6()[0])
                        - (self.group7()[0] * other.group6()[2])
                        + (self.group6()[2] * other.group7()[0])
                        + (self.group6()[1] * other[e1])
                        - (self.group6()[0] * other.group7()[2])
                        + (self.group5()[1] * other.group0()[1])
                        - (self.group3()[2] * other.group4()[0])
                        - (self.group3()[1] * other[e35])
                        + (self[e1] * other.group6()[1])
                        + (self.group1()[3] * other.group7()[1])
                        + (self.group1()[2] * other.group1()[0])
                        + (self.group1()[1] * other.group5()[3])
                        - (self.group0()[0] * other.group10()[1])
                        + (self.group0()[1] * other.group5()[1])),
                    (-(self.group10()[2] * other.group10()[1]) + (self.group10()[1] * other.group10()[2])
                        - (self.group10()[0] * other.group0()[0])
                        - (self.group7()[1] * other.group6()[0])
                        + (self.group7()[0] * other.group6()[1])
                        + (self.group6()[2] * other[e1])
                        - (self.group6()[1] * other.group7()[0])
                        + (self.group6()[0] * other.group7()[1])
                        + (self.group5()[2] * other.group0()[1])
                        - (self.group3()[2] * other[e35])
                        - (self.group3()[0] * other.group4()[1])
                        + (self[e1] * other.group6()[2])
                        + (self.group1()[3] * other.group7()[2])
                        + (self.group1()[2] * other.group5()[3])
                        + (self.group1()[0] * other.group1()[1])
                        - (self.group0()[0] * other.group10()[0])
                        + (self.group0()[1] * other.group5()[2])),
                    (-(self.group10()[0] * other.group8()[2])
                        - (self.group8()[0] * other.group10()[2])
                        - (self.group7()[2] * other.group6()[2])
                        - (self.group7()[1] * other.group6()[1])
                        - (self.group7()[0] * other.group6()[0])
                        + (self.group6()[2] * other.group7()[2])
                        + (self.group6()[1] * other.group7()[1])
                        + (self.group6()[0] * other.group7()[0])
                        - (self.group5()[0] * other.group1()[0])
                        - (self.group4()[0] * other.group3()[0])
                        + (self.group3()[2] * other.group4()[2])
                        + (self.group3()[1] * other.group4()[1])
                        + (self.group3()[0] * other.group4()[0])
                        - (self.group1()[3] * other[e1])
                        - (self.group1()[2] * other.group5()[2])
                        - (self.group1()[1] * other.group5()[1])
                        - (self.group1()[0] * other.group5()[0])),
                ])),
            // e423, e431, e412
            (-(swizzle!(self.group10(), 2, 1, 2) * Simd32x3::from([other[e35], other[e35], other.group4()[1]]))
                - (swizzle!(self.group10(), 1, 0, 0) * Simd32x3::from([other.group4()[2], other.group4()[0], other[e35]]))
                + (swizzle!(self.group10(), 0, 2, 1) * swizzle!(other.group4(), 1, 2, 0))
                - (Simd32x3::from(self[e35]) * swizzle!(other.group10(), 2, 1, 0))
                + (Simd32x3::from(self[e35]) * Simd32x3::from([other.group8()[0], other.group8()[1], other.group8()[2]]))
                + (swizzle!(other.group4(), 1, 2, 0) * Simd32x3::from([self.group8()[2], self.group8()[0], self.group8()[1]]))
                - (swizzle!(other.group4(), 2, 0, 1) * Simd32x3::from([self.group8()[1], self.group8()[2], self.group8()[0]]))
                - (Simd32x3::from(other[e35]) * Simd32x3::from([self.group8()[0], self.group8()[1], self.group8()[2]]))
                - (swizzle!(self.group6(), 2, 0, 1) * Simd32x3::from([other.group5()[1], other.group5()[2], other.group5()[0]]))
                - (swizzle!(self.group6(), 2, 0, 1) * Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]))
                + (swizzle!(self.group6(), 1, 2, 2) * Simd32x3::from([other.group5()[2], other.group5()[0], other.group5()[3]]))
                + (swizzle!(self.group6(), 1, 2, 2) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group0()[1]]))
                + (swizzle!(self.group6(), 0, 1, 0) * Simd32x3::from([other.group5()[3], other.group5()[3], other.group5()[1]]))
                + (swizzle!(self.group6(), 0, 1, 0) * Simd32x3::from([other.group0()[1], other.group0()[1], other.group1()[1]]))
                - (Simd32x3::from(self.group5()[3]) * other.group6())
                - (swizzle!(other.group6(), 1, 2, 0) * Simd32x3::from([self.group5()[2], self.group5()[0], self.group5()[1]]))
                + (swizzle!(other.group6(), 2, 0, 1) * Simd32x3::from([self.group5()[1], self.group5()[2], self.group5()[0]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group5()[0], self.group5()[1], self.group5()[2]]))
                + (Simd32x3::from(self.group4()[2]) * Simd32x3::from([other.group10()[1], other.group8()[0], other.group3()[3]]))
                - (Simd32x3::from(self.group4()[2]) * Simd32x3::from([other.group8()[1], other.group10()[2], other.group0()[0]]))
                - (Simd32x3::from(self.group4()[1]) * Simd32x3::from([other.group10()[0], other.group0()[0], other.group8()[0]]))
                + (Simd32x3::from(self.group4()[1]) * Simd32x3::from([other.group8()[2], other.group3()[3], other.group10()[2]]))
                + (Simd32x3::from(self.group4()[0]) * Simd32x3::from([other.group3()[3], other.group10()[0], other.group8()[1]]))
                - (Simd32x3::from(self.group4()[0]) * Simd32x3::from([other.group0()[0], other.group8()[2], other.group10()[1]]))
                - (Simd32x3::from(self.group3()[3]) * other.group4())
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group5()[0], other.group5()[1], other.group5()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (swizzle!(other.group6(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))
                - (swizzle!(other.group6(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(self.group0()[0]) * other.group4())
                + (Simd32x3::from(self.group0()[1]) * other.group6())),
            // e235, e315, e125
            (-(swizzle!(self.group10(), 2, 1, 2) * Simd32x3::from([other.group8()[3], other.group8()[3], other.group3()[1]]))
                - (swizzle!(self.group10(), 1, 0, 0) * Simd32x3::from([other.group3()[2], other.group3()[0], other.group8()[3]]))
                + (swizzle!(self.group10(), 0, 2, 1) * Simd32x3::from([other.group3()[1], other.group3()[2], other.group3()[0]]))
                - (Simd32x3::from(self.group8()[3]) * swizzle!(other.group10(), 2, 1, 0))
                - (Simd32x3::from(self.group8()[3]) * Simd32x3::from([other.group8()[0], other.group8()[1], other.group8()[2]]))
                + (Simd32x3::from(other.group8()[3]) * Simd32x3::from([self.group8()[0], self.group8()[1], self.group8()[2]]))
                - (Simd32x3::from(self.group7()[2]) * Simd32x3::from([other.group5()[1], other.group1()[0], other.group5()[3]]))
                + (Simd32x3::from(self.group7()[2]) * Simd32x3::from([other.group1()[1], other.group5()[0], other.group0()[1]]))
                + (Simd32x3::from(self.group7()[1]) * Simd32x3::from([other.group5()[2], other.group0()[1], other.group1()[0]]))
                - (Simd32x3::from(self.group7()[1]) * Simd32x3::from([other.group1()[2], other.group5()[3], other.group5()[0]]))
                - (Simd32x3::from(self.group7()[0]) * Simd32x3::from([other.group5()[3], other.group5()[2], other.group1()[1]]))
                + (Simd32x3::from(self.group7()[0]) * Simd32x3::from([other.group0()[1], other.group1()[2], other.group5()[1]]))
                + (Simd32x3::from(self.group5()[3]) * other.group7())
                - (swizzle!(other.group7(), 1, 2, 0) * Simd32x3::from([self.group5()[2], self.group5()[0], self.group5()[1]]))
                + (swizzle!(other.group7(), 2, 0, 1) * Simd32x3::from([self.group5()[1], self.group5()[2], self.group5()[0]]))
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group5()[0], self.group5()[1], self.group5()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (swizzle!(other.group10(), 1, 0, 2) * Simd32x3::from([self.group3()[2], self.group3()[0], self.group3()[1]]))
                - (swizzle!(other.group10(), 0, 2, 1) * Simd32x3::from([self.group3()[1], self.group3()[2], self.group3()[0]]))
                - (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                - (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(self[e1]) * Simd32x3::from([other.group5()[0], other.group5()[1], other.group5()[2]]))
                - (Simd32x3::from(self[e1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (swizzle!(other.group7(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))
                + (swizzle!(other.group7(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from(self.group0()[1]) * other.group7())
                + Simd32x3::from([
                    (-(self.group8()[2] * other.group3()[1]) + (self.group8()[1] * other.group3()[2]) + (self.group3()[2] * other.group8()[1])
                        - (self.group3()[1] * other.group8()[2])),
                    ((self.group8()[2] * other.group3()[0]) - (self.group8()[0] * other.group3()[2]) - (self.group3()[2] * other.group8()[0])
                        + (self.group3()[0] * other.group8()[2])),
                    (-(self.group8()[1] * other.group3()[0]) + (self.group8()[0] * other.group3()[1]) + (self.group3()[1] * other.group8()[0])
                        - (self.group3()[0] * other.group8()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(other.group5()[3]) * Simd32x4::from([self.group10()[2], self.group10()[1], self.group10()[0], self.group8()[3]]))
                + (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group10()[0], self.group10()[2], self.group10()[1], self.group3()[2]]))
                - (swizzle!(other.group5(), 1, 2, 0, 2) * Simd32x4::from([self.group8()[2], self.group8()[0], self.group8()[1], self.group3()[2]]))
                + (swizzle!(self.group8(), 1, 2, 2, 3) * Simd32x4::from([other.group5()[2], other.group5()[0], other.group0()[1], other.group0()[1]]))
                + (swizzle!(self.group8(), 0, 1, 0, 2) * Simd32x4::from([other.group0()[1], other.group0()[1], other.group5()[1], other.group7()[2]]))
                - (swizzle!(other.group3(), 1, 2, 0, 2) * Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group5()[2]]))
                + (swizzle!(other.group3(), 2, 0, 1, 3) * Simd32x4::from([self.group6()[1], self.group6()[2], self.group6()[0], self[e1]]))
                + (Simd32x4::from(other.group8()[3]) * Simd32x4::from([self.group6()[0], self.group6()[1], self.group6()[2], self.group5()[3]]))
                - (swizzle!(self.group5(), 3, 3, 3, 1) * Simd32x4::from([other.group10()[2], other.group10()[1], other.group10()[0], other.group3()[1]]))
                - (swizzle!(other.group8(), 1, 2, 0, 2) * Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group7()[2]]))
                + (swizzle!(other.group8(), 2, 0, 1, 3) * Simd32x4::from([self.group5()[1], self.group5()[2], self.group5()[0], self.group0()[1]]))
                + (Simd32x4::from(other[e1]) * Simd32x4::from([self.group4()[0], self.group4()[1], self.group4()[2], self.group0()[0]]))
                + (swizzle!(self.group3(), 3, 3, 3, 1) * Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other.group1()[1]]))
                + (swizzle!(self.group3(), 2, 0, 1, 0) * Simd32x4::from([other.group6()[1], other.group6()[2], other.group6()[0], other.group1()[0]]))
                - (swizzle!(self.group3(), 1, 2, 2, 3) * Simd32x4::from([other.group6()[2], other.group6()[0], other.group1()[3], other[e1]]))
                - (swizzle!(self.group3(), 0, 1, 0, 1) * Simd32x4::from([other.group1()[3], other.group1()[3], other.group6()[1], other.group5()[1]]))
                - (swizzle!(self.group1(), 1, 2, 2, 2) * Simd32x4::from([other.group10()[0], other.group10()[2], other.group0()[0], other.group3()[2]]))
                - (swizzle!(self.group1(), 0, 1, 0, 1) * Simd32x4::from([other.group0()[0], other.group0()[0], other.group10()[1], other.group3()[1]]))
                + Simd32x4::from([
                    (-(self.group10()[1] * other.group1()[2]) + (self[e35] * other.group7()[0]) - (self.group8()[3] * other.group6()[0]) + (self.group7()[2] * other.group4()[1])
                        - (self.group7()[1] * other.group4()[2])
                        - (self.group7()[0] * other[e35])
                        + (self.group5()[0] * other.group3()[3])
                        - (self.group4()[2] * other.group7()[1])
                        + (self.group4()[1] * other.group7()[2])
                        - (self[e1] * other.group4()[0])
                        + (self.group1()[3] * other.group3()[0])
                        + (self.group1()[2] * other.group10()[1])
                        - (self.group0()[0] * other.group1()[0])
                        + (self.group0()[1] * other.group8()[0])),
                    (-(self.group10()[0] * other.group1()[0]) + (self[e35] * other.group7()[1])
                        - (self.group8()[3] * other.group6()[1])
                        - (self.group7()[2] * other.group4()[0])
                        - (self.group7()[1] * other[e35])
                        + (self.group7()[0] * other.group4()[2])
                        + (self.group5()[1] * other.group3()[3])
                        + (self.group4()[2] * other.group7()[0])
                        - (self.group4()[0] * other.group7()[2])
                        - (self[e1] * other.group4()[1])
                        + (self.group1()[3] * other.group3()[1])
                        + (self.group1()[0] * other.group10()[0])
                        - (self.group0()[0] * other.group1()[1])
                        + (self.group0()[1] * other.group8()[1])),
                    (-(self.group10()[2] * other.group1()[1]) + (self[e35] * other.group7()[2]) - (self.group8()[3] * other.group6()[2]) - (self.group7()[2] * other[e35])
                        + (self.group7()[1] * other.group4()[0])
                        - (self.group7()[0] * other.group4()[1])
                        + (self.group5()[2] * other.group3()[3])
                        - (self.group4()[1] * other.group7()[0])
                        + (self.group4()[0] * other.group7()[1])
                        - (self[e1] * other.group4()[2])
                        + (self.group1()[3] * other.group3()[2])
                        + (self.group1()[1] * other.group10()[2])
                        - (self.group0()[0] * other.group1()[2])
                        + (self.group0()[1] * other.group8()[2])),
                    (-(self.group10()[2] * other.group7()[0]) - (self.group10()[1] * other.group7()[1]) - (self.group10()[0] * other.group7()[2])
                        + (self.group8()[1] * other.group7()[1])
                        + (self.group8()[0] * other.group7()[0])
                        - (self.group7()[2] * other.group10()[0])
                        - (self.group7()[1] * other.group10()[1])
                        - (self.group7()[1] * other.group8()[1])
                        - (self.group7()[0] * other.group10()[2])
                        - (self.group7()[0] * other.group8()[0])
                        - (self.group5()[0] * other.group3()[0])
                        - (self.group3()[0] * other.group5()[0])
                        + (self[e1] * other.group0()[0])
                        - (self.group1()[0] * other.group3()[0])),
                ])),
            // e1234
            (-(self.group10()[2] * other.group6()[0]) - (self.group10()[1] * other.group6()[1]) - (self.group10()[0] * other.group6()[2])
                + (self[e35] * other.group5()[3])
                + (self[e35] * other.group0()[1])
                - (self.group8()[2] * other.group6()[2])
                - (self.group8()[1] * other.group6()[1])
                - (self.group8()[0] * other.group6()[0])
                - (self.group6()[2] * other.group10()[0])
                + (self.group6()[2] * other.group8()[2])
                - (self.group6()[1] * other.group10()[1])
                + (self.group6()[1] * other.group8()[1])
                - (self.group6()[0] * other.group10()[2])
                + (self.group6()[0] * other.group8()[0])
                - (self.group5()[3] * other[e35])
                - (self.group5()[2] * other.group4()[2])
                - (self.group5()[1] * other.group4()[1])
                - (self.group5()[0] * other.group4()[0])
                - (self.group4()[2] * other.group5()[2])
                - (self.group4()[2] * other.group1()[2])
                - (self.group4()[1] * other.group5()[1])
                - (self.group4()[1] * other.group1()[1])
                - (self.group4()[0] * other.group5()[0])
                - (self.group4()[0] * other.group1()[0])
                + (self.group3()[3] * other.group1()[3])
                - (self.group1()[3] * other.group3()[3])
                + (self.group1()[3] * other.group0()[0])
                + (self.group1()[2] * other.group4()[2])
                + (self.group1()[1] * other.group4()[1])
                + (self.group1()[0] * other.group4()[0])
                + (self.group0()[0] * other.group1()[3])
                + (self.group0()[1] * other[e35])),
            // e12, e31, e23
            ((swizzle!(self.group10(), 2, 1, 2) * Simd32x3::from([other.group5()[1], other.group0()[1], other.group0()[1]]))
                - (swizzle!(self.group10(), 1, 2, 0) * Simd32x3::from([other.group5()[0], other.group5()[2], other.group5()[1]]))
                + (swizzle!(self.group10(), 0, 0, 1) * Simd32x3::from([other.group0()[1], other.group5()[0], other.group5()[2]]))
                + (Simd32x3::from(self[e35]) * swizzle!(other.group7(), 2, 1, 0))
                + (Simd32x3::from(self.group8()[3]) * swizzle!(other.group6(), 2, 1, 0))
                - (Simd32x3::from(other.group5()[3]) * Simd32x3::from([self.group8()[2], self.group8()[1], self.group8()[0]]))
                + (swizzle!(self.group7(), 2, 2, 1) * Simd32x3::from([other[e35], other.group4()[0], other.group4()[2]]))
                - (swizzle!(self.group7(), 1, 0, 2) * swizzle!(other.group4(), 0, 2, 1))
                + (swizzle!(self.group7(), 0, 1, 0) * Simd32x3::from([other.group4()[1], other[e35], other[e35]]))
                + (swizzle!(self.group6(), 2, 2, 1) * Simd32x3::from([other.group8()[3], other.group3()[0], other.group3()[2]]))
                - (swizzle!(self.group6(), 1, 0, 2) * Simd32x3::from([other.group3()[0], other.group3()[2], other.group3()[1]]))
                + (swizzle!(self.group6(), 0, 1, 0) * Simd32x3::from([other.group3()[1], other.group8()[3], other.group8()[3]]))
                - (Simd32x3::from(self.group5()[3]) * Simd32x3::from([other.group8()[2], other.group8()[1], other.group8()[0]]))
                + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group5()[2], self.group5()[1], self.group5()[0]]))
                - (swizzle!(other.group10(), 2, 0, 1) * Simd32x3::from([self.group5()[1], self.group5()[0], self.group5()[2]]))
                + (swizzle!(other.group10(), 1, 2, 0) * Simd32x3::from([self.group5()[0], self.group5()[2], self.group5()[1]]))
                + (swizzle!(self.group4(), 2, 2, 1) * Simd32x3::from([other[e1], other.group7()[0], other.group7()[2]]))
                - (swizzle!(self.group4(), 1, 0, 2) * swizzle!(other.group7(), 0, 2, 1))
                + (swizzle!(self.group4(), 0, 1, 0) * Simd32x3::from([other.group7()[1], other[e1], other[e1]]))
                - (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group1()[2], other.group1()[1], other.group1()[0]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group3()[2], self.group3()[1], self.group3()[0]]))
                - (swizzle!(other.group6(), 0, 2, 1) * Simd32x3::from([self.group3()[1], self.group3()[0], self.group3()[2]]))
                + (swizzle!(other.group6(), 1, 0, 2) * Simd32x3::from([self.group3()[0], self.group3()[2], self.group3()[1]]))
                + (Simd32x3::from(self[e1]) * swizzle!(other.group4(), 2, 1, 0))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group3()[2], other.group3()[1], other.group3()[0]]))
                - (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group1()[2], self.group1()[1], self.group1()[0]]))
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group5()[2], other.group5()[1], other.group5()[0]]))
                + (Simd32x3::from(self.group0()[1]) * other.group10())
                + Simd32x3::from([
                    ((self.group8()[1] * other.group1()[0]) - (self.group8()[0] * other.group1()[1]) + (self.group1()[1] * other.group8()[0])
                        - (self.group1()[0] * other.group8()[1])),
                    (-(self.group8()[2] * other.group1()[0]) + (self.group8()[0] * other.group1()[2]) - (self.group1()[2] * other.group8()[0])
                        + (self.group1()[0] * other.group8()[2])),
                    ((self.group8()[2] * other.group1()[1]) - (self.group8()[1] * other.group1()[2]) + (self.group1()[2] * other.group8()[1])
                        - (self.group1()[1] * other.group8()[2])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      389      435        0
    //    simd2       19       21        0
    //    simd3      127      135        0
    //    simd4       70       73        0
    // Totals...
    // yes simd      605      664        0
    //  no simd     1088     1174        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group1()[2], self.group8()[2]]))
                + (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group1()[0], self.group8()[0]]))
                + (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group1()[1], self.group8()[1]]))
                + (Simd32x2::from([1.0, -1.0]) * Simd32x2::from(other.group0()[3]) * Simd32x2::from([self.group1()[3], self[e35]]))),
            // e1, e2, e3, e4
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group10()[0], self.group10()[2], self.group10()[1], self.group4()[2]]))
                + Simd32x4::from([
                    ((self.group10()[1] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group4()[0] * other.group0()[3])),
                    ((self.group10()[0] * other.group0()[0]) + (self.group0()[0] * other.group0()[1]) + (self.group4()[1] * other.group0()[3])),
                    ((self.group10()[2] * other.group0()[1]) + (self.group0()[0] * other.group0()[2]) + (self.group4()[2] * other.group0()[3])),
                    (-(self.group4()[0] * other.group0()[0]) - (self.group4()[1] * other.group0()[1])),
                ])),
            // e5
            ((self.group3()[3] * other.group0()[3]) + (self.group3()[2] * other.group0()[2]) + (self.group3()[1] * other.group0()[1]) - (self.group0()[0] * other.group0()[3])
                + (self.group3()[0] * other.group0()[0])),
            // e15, e25, e35, e45
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group7()[2], self.group7()[0], self.group7()[1], self.group5()[2]]))
                + (swizzle!(other.group0(), 2, 0, 1, 3) * Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[0], self.group1()[3]]))
                + Simd32x4::from([
                    ((self.group5()[0] * other.group0()[3]) + (self.group1()[0] * other.group0()[3]) + (self[e1] * other.group0()[0])),
                    ((self.group5()[1] * other.group0()[3]) + (self.group1()[1] * other.group0()[3]) + (self[e1] * other.group0()[1])),
                    ((self.group5()[2] * other.group0()[3]) + (self.group1()[2] * other.group0()[3]) + (self[e1] * other.group0()[2])),
                    (-(self.group5()[1] * other.group0()[1]) - (self.group5()[0] * other.group0()[0])),
                ])),
            // e41, e42, e43
            ((swizzle!(self.group6(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (swizzle!(self.group6(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))),
            // e415, e425, e435, e321
            ((swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group8()[2], self.group8()[0], self.group8()[1], self[e35]]))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * Simd32x4::from([self.group8()[1], self.group8()[2], self.group8()[0], self.group10()[2]]))
                - (swizzle!(other.group0(), 0, 1, 2, 1) * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group10()[1]]))
                - (swizzle!(other.group0(), 3, 3, 3, 2) * Simd32x4::from([self.group4()[0], self.group4()[1], self.group4()[2], self.group10()[0]]))),
            // e423, e431, e412
            ((Simd32x3::from(self[e35]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (swizzle!(self.group4(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                - (swizzle!(self.group4(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
            // e235, e315, e125
            (-(swizzle!(self.group10(), 2, 1, 0) * Simd32x3::from(other.group0()[3]))
                - (Simd32x3::from(self.group8()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group8()[0], self.group8()[1], self.group8()[2]]))
                + Simd32x3::from([
                    (-(self.group3()[1] * other.group0()[2]) + (self.group3()[2] * other.group0()[1])),
                    ((self.group3()[0] * other.group0()[2]) - (self.group3()[2] * other.group0()[0])),
                    (-(self.group3()[0] * other.group0()[1]) + (self.group3()[1] * other.group0()[0])),
                ])),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group6()[0], self.group6()[1], self.group6()[2], self.group0()[1]]))
                - (swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group7()[2]]))
                + (swizzle!(other.group0(), 0, 0, 2, 3) * Simd32x4::from([self.group0()[1], self.group5()[2], self.group0()[1], self.group5()[3]]))
                + Simd32x4::from([
                    (self.group5()[1] * other.group0()[2]),
                    (self.group0()[1] * other.group0()[1]),
                    (self.group5()[0] * other.group0()[1]),
                    (-(self.group7()[1] * other.group0()[1]) - (self.group7()[0] * other.group0()[0])),
                ])),
            // e1234
            ((self.group6()[2] * other.group0()[2]) + (self.group6()[0] * other.group0()[0]) + (self.group6()[1] * other.group0()[1])),
            // e12, e31, e23
            ((swizzle!(self.group6(), 2, 1, 0) * Simd32x3::from(other.group0()[3]))
                - (Simd32x3::from(self.group5()[3]) * Simd32x3::from([other.group0()[2], other.group0()[1], other.group0()[0]]))
                + Simd32x3::from([
                    (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                    ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                    (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      401      450        0
    //    simd2       18       18        0
    //    simd3      133      142        0
    //    simd4       71       73        0
    // Totals...
    // yes simd      623      683        0
    //  no simd     1120     1204        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from(other[e2]) * Simd32x2::from([self[e35], self.group1()[3]]))
                + (Simd32x2::from(other.group0()[3]) * Simd32x2::from([self.group8()[3], self[e1]]))
                + Simd32x2::from([
                    ((self.group8()[2] * other.group0()[2]) + (self.group8()[0] * other.group0()[0]) + (self.group8()[1] * other.group0()[1])),
                    (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                ])),
            // e1, e2, e3, e4
            ((Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group0()[1]]))
                - (swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group6()[2]]))
                + Simd32x4::from([
                    (-(self.group6()[0] * other[e2]) + (self.group0()[1] * other.group0()[0]) + (self.group5()[1] * other.group0()[2])),
                    (-(self.group6()[1] * other[e2]) + (self.group5()[2] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                    (-(self.group6()[2] * other[e2]) + (self.group0()[1] * other.group0()[2]) + (self.group5()[0] * other.group0()[1])),
                    (-(self.group6()[1] * other.group0()[1]) - (self.group6()[0] * other.group0()[0]) - (self.group5()[3] * other.group0()[3])),
                ])),
            // e5
            ((self.group7()[2] * other.group0()[2])
                + (self.group7()[1] * other.group0()[1])
                + (self.group7()[0] * other.group0()[0])
                + (self.group0()[1] * other[e2])
                + (self.group5()[3] * other[e2])),
            // e15, e25, e35, e45
            ((Simd32x4::from(other[e2]) * Simd32x4::from([self.group10()[2], self.group10()[1], self.group10()[0], self[e35]]))
                - (Simd32x4::from(self.group8()[3]) * other.group0())
                + (swizzle!(other.group0(), 1, 2, 0, 0) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group10()[2]]))
                + Simd32x4::from([
                    (-(self.group8()[0] * other[e2]) - (self.group3()[1] * other.group0()[2])),
                    (-(self.group8()[1] * other[e2]) - (self.group3()[2] * other.group0()[0])),
                    (-(self.group8()[2] * other[e2]) - (self.group3()[0] * other.group0()[1])),
                    ((self.group10()[1] * other.group0()[1]) + (self.group10()[0] * other.group0()[2])),
                ])),
            // e41, e42, e43
            ((swizzle!(self.group10(), 2, 1, 0) * Simd32x3::from(other.group0()[3]))
                + (Simd32x3::from(self[e35]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group8()[0], self.group8()[1], self.group8()[2]]))
                + (swizzle!(self.group4(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                - (swizzle!(self.group4(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
            // e415, e425, e435, e321
            ((Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self[e1]]))
                - (swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group5()[2]]))
                + Simd32x4::from([
                    ((self.group6()[0] * other[e2]) + (self.group5()[3] * other.group0()[0]) + (self.group1()[1] * other.group0()[2])),
                    ((self.group6()[1] * other[e2]) + (self.group5()[3] * other.group0()[1]) + (self.group1()[2] * other.group0()[0])),
                    ((self.group6()[2] * other[e2]) + (self.group5()[3] * other.group0()[2]) + (self.group1()[0] * other.group0()[1])),
                    (-(self.group5()[1] * other.group0()[1]) - (self.group5()[0] * other.group0()[0]) - (self.group1()[3] * other[e2])),
                ])),
            // e423, e431, e412
            (-(swizzle!(self.group6(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))
                + (swizzle!(self.group6(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group5()[0], self.group5()[1], self.group5()[2]]))
                - (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))),
            // e235, e315, e125
            ((swizzle!(self.group7(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))
                - (swizzle!(self.group7(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (Simd32x3::from(other[e2]) * Simd32x3::from([self.group5()[0], self.group5()[1], self.group5()[2]]))
                + (Simd32x3::from(other[e2]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(self[e1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group10()[0], self.group10()[2], self.group10()[1], self.group3()[2]]))
                + (Simd32x4::from(other[e2]) * Simd32x4::from([self.group4()[0], self.group4()[1], self.group4()[2], self.group0()[0]]))
                - (self.group3() * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other[e2]]))
                + Simd32x4::from([
                    (-(self.group10()[1] * other.group0()[2]) - (self.group0()[0] * other.group0()[0])),
                    (-(self.group10()[0] * other.group0()[0]) - (self.group0()[0] * other.group0()[1])),
                    (-(self.group10()[2] * other.group0()[1]) - (self.group0()[0] * other.group0()[2])),
                    ((self.group3()[1] * other.group0()[1]) + (self.group3()[0] * other.group0()[0])),
                ])),
            // e1234
            (-(self.group4()[2] * other.group0()[2]) - (self.group4()[1] * other.group0()[1]) - (self.group4()[0] * other.group0()[0])
                + (self.group0()[0] * other.group0()[3])
                + (self.group3()[3] * other.group0()[3])),
            // e12, e31, e23
            ((swizzle!(self.group4(), 2, 1, 0) * Simd32x3::from(other[e2]))
                + (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group3()[2], self.group3()[1], self.group3()[0]]))
                - (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group0()[2], other.group0()[1], other.group0()[0]]))
                + Simd32x3::from([
                    ((self.group8()[1] * other.group0()[0]) - (self.group8()[0] * other.group0()[1])),
                    (-(self.group8()[2] * other.group0()[0]) + (self.group8()[0] * other.group0()[2])),
                    ((self.group8()[2] * other.group0()[1]) - (self.group8()[1] * other.group0()[2])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      362      391        0
    //    simd2       16       18        0
    //    simd3      118      130        0
    //    simd4       61       71        0
    // Totals...
    // yes simd      557      610        0
    //  no simd      992     1101        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            (swizzle!(self.group0(), 1, 0) * Simd32x2::from(other[scalar]) * Simd32x2::from([1.0, -1.0])),
            // e1, e2, e3, e4
            (Simd32x4::from(other[scalar]) * Simd32x4::from([self.group8()[0], self.group8()[1], self.group8()[2], self[e35]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e5
            (self.group8()[3] * other[scalar] * -1.0),
            // e15, e25, e35, e45
            (Simd32x4::from(other[scalar]) * Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group5()[3]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e41, e42, e43
            (self.group6() * Simd32x3::from(other[scalar])),
            // e415, e425, e435, e321
            (Simd32x4::from(other[scalar]) * Simd32x4::from([self.group10()[2], self.group10()[1], self.group10()[0], self.group3()[3]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e423, e431, e412
            (self.group4() * Simd32x3::from(other[scalar]) * Simd32x3::from(-1.0)),
            // e235, e315, e125
            (Simd32x3::from(other[scalar]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]) * Simd32x3::from(-1.0)),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other[scalar]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self[e1]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e1234
            (self.group1()[3] * other[scalar]),
            // e12, e31, e23
            (Simd32x3::from(other[scalar]) * Simd32x3::from([self.group5()[2], self.group5()[1], self.group5()[0]])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      398      446        0
    //    simd2       19       19        0
    //    simd3      132      140        0
    //    simd4       72       75        0
    // Totals...
    // yes simd      621      680        0
    //  no simd     1120     1204        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group1()[2], self.group8()[2]]))
                + (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group1()[0], self.group8()[0]]))
                + (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group1()[1], self.group8()[1]]))
                + Simd32x2::from([
                    ((self[e1] * other[e4315]) + (self.group1()[3] * other.group0()[3])),
                    (-(self[e35] * other.group0()[3]) - (self.group8()[3] * other[e4315])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group10()[0], self.group10()[2], self.group10()[1], self.group4()[2]]))
                - (Simd32x4::from(other[e4315]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[0]]))
                + Simd32x4::from([
                    ((self.group10()[1] * other.group0()[2]) + (self.group4()[0] * other.group0()[3]) + (self.group0()[0] * other.group0()[0])),
                    ((self.group10()[0] * other.group0()[0]) + (self.group4()[1] * other.group0()[3]) + (self.group0()[0] * other.group0()[1])),
                    ((self.group10()[2] * other.group0()[1]) + (self.group4()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[2])),
                    (-(self.group4()[1] * other.group0()[1]) - (self.group4()[0] * other.group0()[0]) - (self.group3()[3] * other[e4315])),
                ])),
            // e5
            ((self.group3()[3] * other.group0()[3]) + (self.group3()[2] * other.group0()[2]) + (self.group3()[1] * other.group0()[1]) - (self.group0()[0] * other.group0()[3])
                + (self.group3()[0] * other.group0()[0])),
            // e15, e25, e35, e45
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group7()[2], self.group7()[0], self.group7()[1], self.group5()[2]]))
                + (swizzle!(other.group0(), 2, 0, 1, 3) * Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[0], self.group1()[3]]))
                + Simd32x4::from([
                    ((self.group5()[0] * other.group0()[3]) + (self.group1()[0] * other.group0()[3]) + (self[e1] * other.group0()[0])),
                    ((self.group5()[1] * other.group0()[3]) + (self.group1()[1] * other.group0()[3]) + (self[e1] * other.group0()[1])),
                    ((self.group5()[2] * other.group0()[3]) + (self.group1()[2] * other.group0()[3]) + (self[e1] * other.group0()[2])),
                    (-(self.group5()[1] * other.group0()[1]) - (self.group5()[0] * other.group0()[0]) - (self[e1] * other[e4315])),
                ])),
            // e41, e42, e43
            ((swizzle!(self.group6(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))
                - (swizzle!(self.group6(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (Simd32x3::from(other[e4315]) * Simd32x3::from([self.group5()[0], self.group5()[1], self.group5()[2]]))
                - (Simd32x3::from(other[e4315]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))),
            // e415, e425, e435, e321
            ((swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group8()[2], self.group8()[0], self.group8()[1], self[e35]]))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * Simd32x4::from([self.group8()[1], self.group8()[2], self.group8()[0], self.group10()[2]]))
                - (swizzle!(other.group0(), 3, 3, 3, 1) * Simd32x4::from([self.group4()[0], self.group4()[1], self.group4()[2], self.group10()[1]]))
                - (Simd32x4::from(other[e4315]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group8()[3]]))
                - (swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group10()[0]]))),
            // e423, e431, e412
            (-(swizzle!(self.group10(), 2, 1, 0) * Simd32x3::from(other[e4315]))
                + (Simd32x3::from(self[e35]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from(other[e4315]) * Simd32x3::from([self.group8()[0], self.group8()[1], self.group8()[2]]))
                + (swizzle!(self.group4(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                - (swizzle!(self.group4(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))),
            // e235, e315, e125
            (-(swizzle!(self.group10(), 2, 1, 0) * Simd32x3::from(other.group0()[3]))
                - (Simd32x3::from(self.group8()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group8()[0], self.group8()[1], self.group8()[2]]))
                + Simd32x3::from([
                    (-(self.group3()[1] * other.group0()[2]) + (self.group3()[2] * other.group0()[1])),
                    ((self.group3()[0] * other.group0()[2]) - (self.group3()[2] * other.group0()[0])),
                    (-(self.group3()[0] * other.group0()[1]) + (self.group3()[1] * other.group0()[0])),
                ])),
            // e4235, e4315, e4125, e3215
            ((Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group6()[0], self.group6()[1], self.group6()[2], self.group0()[1]]))
                - (swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group7()[2]]))
                + (swizzle!(other.group0(), 0, 0, 2, 3) * Simd32x4::from([self.group0()[1], self.group5()[2], self.group0()[1], self.group5()[3]]))
                + Simd32x4::from([
                    (-(self.group7()[0] * other[e4315]) + (self.group5()[1] * other.group0()[2])),
                    (-(self.group7()[1] * other[e4315]) + (self.group0()[1] * other.group0()[1])),
                    (-(self.group7()[2] * other[e4315]) + (self.group5()[0] * other.group0()[1])),
                    (-(self.group7()[1] * other.group0()[1]) - (self.group7()[0] * other.group0()[0])),
                ])),
            // e1234
            ((self.group6()[2] * other.group0()[2]) + (self.group6()[1] * other.group0()[1]) + (self.group6()[0] * other.group0()[0]) + (self.group0()[1] * other[e4315])
                - (self.group5()[3] * other[e4315])),
            // e12, e31, e23
            ((swizzle!(self.group7(), 2, 1, 0) * Simd32x3::from(other[e4315])) + (swizzle!(self.group6(), 2, 1, 0) * Simd32x3::from(other.group0()[3]))
                - (Simd32x3::from(self.group5()[3]) * Simd32x3::from([other.group0()[2], other.group0()[1], other.group0()[0]]))
                + Simd32x3::from([
                    (-(self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])),
                    ((self.group1()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                    (-(self.group1()[1] * other.group0()[2]) + (self.group1()[2] * other.group0()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      490      548        0
    //    simd2       28       28        0
    //    simd3      170      176        0
    //    simd4      104      106        0
    // Totals...
    // yes simd      792      858        0
    //  no simd     1472     1556        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            (-(Simd32x2::from(other.group1()[0]) * Simd32x2::from([self.group10()[2], self.group5()[0]]))
                - (Simd32x2::from(other.group1()[1]) * Simd32x2::from([self.group10()[1], self.group5()[1]]))
                - (Simd32x2::from(other.group1()[2]) * Simd32x2::from([self.group10()[0], self.group5()[2]]))
                + (Simd32x2::from(other.group2()[3]) * Simd32x2::from([self[e35], self.group1()[3]]))
                + (Simd32x2::from(other.group3()[3]) * Simd32x2::from([self.group8()[3], self[e1]]))
                - (Simd32x2::from(other.group2()[2]) * Simd32x2::from([self.group4()[2], self.group6()[2]]))
                - (Simd32x2::from(other.group2()[1]) * Simd32x2::from([self.group4()[1], self.group6()[1]]))
                - (Simd32x2::from(other.group2()[0]) * Simd32x2::from([self.group4()[0], self.group6()[0]]))
                - (Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group3()[2], self.group7()[2]]))
                - (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group3()[1], self.group7()[1]]))
                + (self.group0() * Simd32x2::from(other.group0()[3]))
                - (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group3()[0], self.group7()[0]]))
                + Simd32x2::from([
                    ((self.group8()[2] * other.group3()[2]) + (self.group8()[1] * other.group3()[1]) + (self.group8()[0] * other.group3()[0])
                        - (self.group3()[3] * other.group1()[3])),
                    ((self.group5()[3] * other.group1()[3])
                        - (self.group1()[2] * other.group3()[2])
                        - (self.group1()[1] * other.group3()[1])
                        - (self.group1()[0] * other.group3()[0])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group7()[2], self.group7()[0], self.group7()[1], self.group5()[2]]))
                + (swizzle!(other.group0(), 2, 0, 1, 3) * Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[0], self.group1()[3]]))
                + (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group0()[1]]))
                + (other.group1() * Simd32x4::from([self.group5()[3], self.group5()[3], self.group5()[3], self.group1()[3]]))
                - (swizzle!(other.group3(), 1, 2, 0, 2) * Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group6()[2]]))
                + (swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([self[e1], self[e1], self[e1], self.group1()[2]]))
                - (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group6()[2]]))
                + (swizzle!(self.group1(), 1, 2, 2, 1) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group0()[1]]))
                + (swizzle!(self.group1(), 0, 1, 0, 0) * Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group0()[0]]))
                + Simd32x4::from([
                    ((self.group6()[2] * other.group2()[1]) - (self.group6()[1] * other.group2()[2]) - (self.group6()[0] * other.group2()[3])
                        + (self.group5()[1] * other.group3()[2])
                        + (self.group5()[0] * other.group1()[3])
                        - (self.group1()[3] * other.group2()[0])
                        + (self.group0()[1] * other.group3()[0])),
                    (-(self.group6()[2] * other.group2()[0]) - (self.group6()[1] * other.group2()[3])
                        + (self.group6()[0] * other.group2()[2])
                        + (self.group5()[2] * other.group3()[0])
                        + (self.group5()[1] * other.group1()[3])
                        - (self.group1()[3] * other.group2()[1])
                        + (self.group0()[1] * other.group3()[1])),
                    (-(self.group6()[2] * other.group2()[3]) + (self.group6()[1] * other.group2()[0]) - (self.group6()[0] * other.group2()[1])
                        + (self.group5()[2] * other.group1()[3])
                        + (self.group5()[0] * other.group3()[1])
                        - (self.group1()[3] * other.group2()[2])
                        + (self.group0()[1] * other.group3()[2])),
                    (-(self.group6()[1] * other.group3()[1])
                        - (self.group6()[1] * other.group1()[1])
                        - (self.group6()[0] * other.group3()[0])
                        - (self.group6()[0] * other.group1()[0])
                        - (self.group5()[3] * other.group3()[3])
                        - (self.group5()[1] * other.group0()[1])
                        - (self.group5()[0] * other.group0()[0])),
                ])),
            // e5
            ((self.group7()[2] * other.group3()[2]) - (self.group7()[2] * other.group1()[2]) + (self.group7()[1] * other.group3()[1]) - (self.group7()[1] * other.group1()[1])
                + (self.group7()[0] * other.group3()[0])
                - (self.group7()[0] * other.group1()[0])
                + (self.group5()[3] * other.group2()[3])
                - (self.group5()[2] * other.group2()[2])
                - (self.group5()[1] * other.group2()[1])
                - (self.group5()[0] * other.group2()[0])
                - (self[e1] * other.group1()[3])
                + (self[e1] * other.group0()[3])
                - (self.group1()[2] * other.group2()[2])
                - (self.group1()[1] * other.group2()[1])
                + (self.group0()[1] * other.group2()[3])
                - (self.group1()[0] * other.group2()[0])),
            // e15, e25, e35, e45
            ((swizzle!(other.group2(), 3, 3, 1, 3) * Simd32x4::from([self.group10()[2], self.group10()[1], self.group10()[2], self[e35]]))
                - (swizzle!(other.group2(), 1, 2, 0, 2) * Simd32x4::from([self.group10()[0], self.group10()[2], self.group10()[1], self.group4()[2]]))
                - (Simd32x4::from(self.group8()[3]) * other.group3())
                - (swizzle!(self.group8(), 1, 2, 2, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[3], other.group1()[2]]))
                - (swizzle!(self.group8(), 0, 1, 0, 1) * Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[1], other.group1()[1]]))
                - (swizzle!(other.group2(), 0, 1, 2, 1) * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group4()[1]]))
                + (swizzle!(self.group3(), 2, 2, 2, 3) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group0()[3], other.group0()[3]]))
                - (swizzle!(other.group1(), 1, 3, 3, 0) * Simd32x4::from([self.group3()[2], self.group3()[1], self.group3()[2], self.group8()[0]]))
                + (swizzle!(self.group3(), 1, 1, 1, 2) * Simd32x4::from([other.group1()[2], other.group0()[3], other.group3()[0], other.group0()[2]]))
                - (swizzle!(other.group1(), 3, 2, 0, 3) * Simd32x4::from([self.group3()[0], self.group3()[0], self.group3()[1], self.group0()[0]]))
                + (swizzle!(self.group3(), 0, 0, 0, 1) * Simd32x4::from([other.group0()[3], other.group3()[2], other.group1()[1], other.group0()[1]]))
                + Simd32x4::from([
                    ((self.group10()[1] * other.group2()[2]) + (self.group8()[3] * other.group1()[0]) + (self.group8()[2] * other.group2()[1])
                        - (self.group3()[1] * other.group3()[2])
                        + (self.group0()[0] * other.group2()[0])),
                    ((self.group10()[0] * other.group2()[0]) + (self.group8()[3] * other.group1()[1]) + (self.group8()[0] * other.group2()[2])
                        - (self.group3()[2] * other.group3()[0])
                        + (self.group0()[0] * other.group2()[1])),
                    ((self.group10()[0] * other.group2()[3]) + (self.group8()[3] * other.group1()[2]) + (self.group8()[1] * other.group2()[0])
                        - (self.group3()[0] * other.group3()[1])
                        + (self.group0()[0] * other.group2()[2])),
                    ((self.group10()[2] * other.group3()[0]) + (self.group10()[1] * other.group3()[1]) + (self.group10()[0] * other.group3()[2])
                        - (self.group4()[0] * other.group2()[0])
                        + (self.group3()[0] * other.group0()[0])),
                ])),
            // e41, e42, e43
            ((swizzle!(self.group10(), 2, 1, 2) * Simd32x3::from([other.group3()[3], other.group3()[3], other.group0()[1]]))
                + (swizzle!(self.group10(), 1, 0, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group3()[3]]))
                - (swizzle!(self.group10(), 0, 2, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))
                + (Simd32x3::from(self[e35]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from(self[e35]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group8()[0], self.group8()[1], self.group8()[2]]))
                - (swizzle!(self.group4(), 2, 0, 1) * Simd32x3::from([other.group3()[1], other.group3()[2], other.group3()[0]]))
                - (swizzle!(self.group4(), 2, 0, 1) * Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]))
                + (swizzle!(self.group4(), 1, 2, 2) * Simd32x3::from([other.group3()[2], other.group3()[0], other.group1()[3]]))
                + (swizzle!(self.group4(), 1, 2, 2) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group0()[3]]))
                + (swizzle!(self.group4(), 0, 1, 0) * Simd32x3::from([other.group1()[3], other.group1()[3], other.group3()[1]]))
                + (swizzle!(self.group4(), 0, 1, 0) * Simd32x3::from([other.group0()[3], other.group0()[3], other.group1()[1]]))
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + Simd32x3::from([
                    (-(self.group8()[2] * other.group0()[1]) + (self.group8()[1] * other.group0()[2])),
                    ((self.group8()[2] * other.group0()[0]) - (self.group8()[0] * other.group0()[2])),
                    (-(self.group8()[1] * other.group0()[0]) + (self.group8()[0] * other.group0()[1])),
                ])),
            // e415, e425, e435, e321
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group7()[2], self.group7()[0], self.group7()[1], self.group7()[2]]))
                + (swizzle!(other.group0(), 2, 0, 1, 3) * Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[0], self.group5()[3]]))
                + (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self[e1]]))
                - (swizzle!(other.group2(), 1, 2, 0, 3) * Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group1()[3]]))
                + (swizzle!(other.group2(), 2, 0, 3, 2) * Simd32x4::from([self.group6()[1], self.group6()[2], self.group6()[2], self.group6()[2]]))
                + (swizzle!(other.group2(), 3, 3, 1, 1) * Simd32x4::from([self.group6()[0], self.group6()[1], self.group6()[0], self.group6()[1]]))
                - (swizzle!(self.group5(), 2, 0, 1, 2) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[2]]))
                + (swizzle!(other.group1(), 2, 0, 1, 3) * Simd32x4::from([self.group5()[1], self.group5()[2], self.group5()[0], self.group0()[1]]))
                + (swizzle!(other.group2(), 0, 1, 2, 0) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group6()[0]]))
                - (swizzle!(other.group3(), 1, 2, 0, 1) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group5()[1]]))
                + Simd32x4::from([
                    ((self.group5()[3] * other.group3()[0])
                        + (self.group5()[0] * other.group0()[3])
                        + (self[e1] * other.group0()[0])
                        + (self.group1()[1] * other.group3()[2])
                        + (self.group0()[1] * other.group1()[0])
                        + (self.group1()[0] * other.group1()[3])),
                    ((self.group5()[3] * other.group3()[1])
                        + (self.group5()[1] * other.group0()[3])
                        + (self[e1] * other.group0()[1])
                        + (self.group1()[2] * other.group3()[0])
                        + (self.group1()[1] * other.group1()[3])
                        + (self.group0()[1] * other.group1()[1])),
                    ((self.group5()[3] * other.group3()[2])
                        + (self.group5()[2] * other.group0()[3])
                        + (self[e1] * other.group0()[2])
                        + (self.group1()[2] * other.group1()[3])
                        + (self.group0()[1] * other.group1()[2])
                        + (self.group1()[0] * other.group3()[1])),
                    (-(self.group7()[1] * other.group0()[1])
                        - (self.group7()[0] * other.group0()[0])
                        - (self.group5()[0] * other.group3()[0])
                        - (self.group1()[2] * other.group1()[2])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])),
                ])),
            // e423, e431, e412
            (-(swizzle!(self.group6(), 2, 0, 1) * Simd32x3::from([other.group3()[1], other.group3()[2], other.group3()[0]]))
                - (swizzle!(self.group6(), 2, 0, 1) * Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]))
                + (swizzle!(self.group6(), 1, 2, 2) * Simd32x3::from([other.group3()[2], other.group3()[0], other.group1()[3]]))
                + (swizzle!(self.group6(), 1, 2, 2) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group0()[3]]))
                + (swizzle!(self.group6(), 0, 1, 0) * Simd32x3::from([other.group1()[3], other.group1()[3], other.group3()[1]]))
                + (swizzle!(self.group6(), 0, 1, 0) * Simd32x3::from([other.group0()[3], other.group0()[3], other.group1()[1]]))
                - (Simd32x3::from(self.group5()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(other.group0()[2]) * Simd32x3::from([self.group5()[1], self.group1()[0], self.group0()[1]]))
                + (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group5()[0], self.group5()[1], self.group5()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group1()[2], self.group0()[1], self.group5()[0]]))
                + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[1], self.group5()[2], self.group1()[1]]))
                - (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + Simd32x3::from([
                    (-(self.group5()[2] * other.group0()[1]) - (self.group1()[1] * other.group0()[2])),
                    (-(self.group5()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                    (-(self.group5()[1] * other.group0()[0]) - (self.group1()[0] * other.group0()[1])),
                ])),
            // e235, e315, e125
            ((Simd32x3::from(self.group7()[2]) * Simd32x3::from([other.group3()[1], other.group1()[0], other.group0()[3]]))
                - (Simd32x3::from(self.group7()[2]) * Simd32x3::from([other.group1()[1], other.group3()[0], other.group1()[3]]))
                - (Simd32x3::from(self.group7()[1]) * Simd32x3::from([other.group3()[2], other.group1()[3], other.group1()[0]]))
                + (Simd32x3::from(self.group7()[1]) * Simd32x3::from([other.group1()[2], other.group0()[3], other.group3()[0]]))
                - (Simd32x3::from(self.group7()[0]) * Simd32x3::from([other.group1()[3], other.group1()[2], other.group3()[1]]))
                + (Simd32x3::from(self.group7()[0]) * Simd32x3::from([other.group0()[3], other.group3()[2], other.group1()[1]]))
                + (Simd32x3::from(self.group5()[3]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                + (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group5()[0], self.group5()[1], self.group5()[2]]))
                - (Simd32x3::from(self[e1]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from(self[e1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                + (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + Simd32x3::from([
                    (-(self.group5()[2] * other.group2()[1]) + (self.group5()[1] * other.group2()[2]) - (self.group1()[2] * other.group2()[1])
                        + (self.group1()[1] * other.group2()[2])),
                    ((self.group5()[2] * other.group2()[0]) - (self.group5()[0] * other.group2()[2]) + (self.group1()[2] * other.group2()[0])
                        - (self.group1()[0] * other.group2()[2])),
                    (-(self.group5()[1] * other.group2()[0]) + (self.group5()[0] * other.group2()[1]) - (self.group1()[1] * other.group2()[0])
                        + (self.group1()[0] * other.group2()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group10()[2], self.group10()[1], self.group10()[0], self.group8()[3]]))
                + (swizzle!(other.group3(), 1, 2, 0, 2) * Simd32x4::from([self.group10()[0], self.group10()[2], self.group10()[1], self.group3()[2]]))
                + (swizzle!(other.group2(), 0, 1, 2, 2) * Simd32x4::from([self[e35], self[e35], self[e35], self.group8()[2]]))
                - (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group8()[2], self.group8()[0], self.group8()[1], self.group3()[2]]))
                + (swizzle!(self.group8(), 1, 2, 2, 3) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group0()[3]]))
                + (swizzle!(self.group8(), 0, 1, 0, 1) * Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group2()[1]]))
                - (swizzle!(other.group2(), 1, 2, 0, 0) * Simd32x4::from([self.group4()[2], self.group4()[0], self.group4()[1], self.group10()[2]]))
                + (swizzle!(other.group2(), 2, 0, 3, 0) * Simd32x4::from([self.group4()[1], self.group4()[2], self.group4()[2], self.group8()[0]]))
                + (swizzle!(other.group2(), 3, 3, 1, 3) * Simd32x4::from([self.group4()[0], self.group4()[1], self.group4()[0], self.group0()[0]]))
                + (swizzle!(self.group3(), 3, 3, 3, 1) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[1]]))
                + (swizzle!(self.group3(), 2, 0, 1, 0) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]))
                - (swizzle!(self.group3(), 1, 2, 2, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group3()[3], other.group2()[3]]))
                - (swizzle!(self.group3(), 0, 1, 0, 1) * Simd32x4::from([other.group3()[3], other.group3()[3], other.group0()[1], other.group1()[1]]))
                + Simd32x4::from([
                    (-(self.group10()[1] * other.group3()[2]) - (self.group8()[3] * other.group0()[0]) - (self.group0()[0] * other.group3()[0])),
                    (-(self.group10()[0] * other.group3()[0]) - (self.group8()[3] * other.group0()[1]) - (self.group0()[0] * other.group3()[1])),
                    (-(self.group10()[2] * other.group3()[1]) - (self.group8()[3] * other.group0()[2]) - (self.group0()[0] * other.group3()[2])),
                    (-(self.group10()[1] * other.group2()[1]) - (self.group10()[0] * other.group2()[2]) - (self.group3()[0] * other.group1()[0])),
                ])),
            // e1234
            (-(self.group10()[2] * other.group0()[0]) - (self.group10()[1] * other.group0()[1]) - (self.group10()[0] * other.group0()[2])
                + (self[e35] * other.group1()[3])
                + (self[e35] * other.group0()[3])
                - (self.group8()[2] * other.group0()[2])
                - (self.group8()[1] * other.group0()[1])
                - (self.group8()[0] * other.group0()[0])
                - (self.group4()[2] * other.group3()[2])
                - (self.group4()[2] * other.group1()[2])
                - (self.group4()[1] * other.group3()[1])
                - (self.group4()[1] * other.group1()[1])
                - (self.group4()[0] * other.group3()[0])
                - (self.group4()[0] * other.group1()[0])
                + (self.group0()[0] * other.group3()[3])
                + (self.group3()[3] * other.group3()[3])),
            // e12, e31, e23
            ((swizzle!(self.group10(), 2, 1, 2) * Simd32x3::from([other.group1()[1], other.group0()[3], other.group0()[3]]))
                - (swizzle!(self.group10(), 1, 2, 0) * Simd32x3::from([other.group1()[0], other.group1()[2], other.group1()[1]]))
                + (swizzle!(self.group10(), 0, 0, 1) * Simd32x3::from([other.group0()[3], other.group1()[0], other.group1()[2]]))
                + (Simd32x3::from(self[e35]) * Simd32x3::from([other.group2()[2], other.group2()[1], other.group2()[0]]))
                + (Simd32x3::from(self.group8()[3]) * Simd32x3::from([other.group0()[2], other.group0()[1], other.group0()[0]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group8()[2], self.group8()[1], self.group8()[0]]))
                + (swizzle!(self.group4(), 2, 2, 1) * Simd32x3::from([other.group2()[3], other.group2()[0], other.group2()[2]]))
                - (swizzle!(self.group4(), 1, 0, 2) * Simd32x3::from([other.group2()[0], other.group2()[2], other.group2()[1]]))
                + (swizzle!(self.group4(), 0, 1, 0) * Simd32x3::from([other.group2()[1], other.group2()[3], other.group2()[3]]))
                - (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group3()[2], other.group3()[1], other.group3()[0]]))
                + (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group3()[2], self.group3()[1], self.group3()[0]]))
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[2], other.group1()[1], other.group1()[0]]))
                + Simd32x3::from([
                    ((self.group8()[1] * other.group3()[0]) - (self.group8()[0] * other.group3()[1]) - (self.group3()[1] * other.group0()[0])
                        + (self.group3()[0] * other.group0()[1])),
                    (-(self.group8()[2] * other.group3()[0]) + (self.group8()[0] * other.group3()[2]) + (self.group3()[2] * other.group0()[0])
                        - (self.group3()[0] * other.group0()[2])),
                    ((self.group8()[2] * other.group3()[1]) - (self.group8()[1] * other.group3()[2]) - (self.group3()[2] * other.group0()[1])
                        + (self.group3()[1] * other.group0()[2])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      528      586        0
    //    simd2       20       20        0
    //    simd3      168      174        0
    //    simd4      100      102        0
    // Totals...
    // yes simd      816      882        0
    //  no simd     1472     1556        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            (-(Simd32x2::from(other.group1()[3]) * Simd32x2::from([self.group5()[3], self.group3()[3]]))
                + (Simd32x2::from(other.group3()[2]) * Simd32x2::from([self.group1()[2], self.group8()[2]]))
                + (Simd32x2::from(other.group3()[1]) * Simd32x2::from([self.group1()[1], self.group8()[1]]))
                + (Simd32x2::from(other.group3()[0]) * Simd32x2::from([self.group1()[0], self.group8()[0]]))
                + Simd32x2::from([
                    (-(self.group7()[2] * other.group0()[2])
                        - (self.group7()[1] * other.group0()[1])
                        - (self.group7()[0] * other.group0()[0])
                        - (self.group6()[2] * other.group2()[2])
                        - (self.group6()[1] * other.group2()[1])
                        - (self.group6()[0] * other.group2()[0])
                        - (self.group5()[2] * other.group1()[2])
                        - (self.group5()[1] * other.group1()[1])
                        - (self.group5()[0] * other.group1()[0])
                        + (self[e1] * other.group2()[3])
                        + (self.group1()[3] * other.group3()[3])
                        + (self.group0()[1] * other.group0()[3])),
                    ((self.group10()[2] * other.group1()[0]) + (self.group10()[1] * other.group1()[1]) + (self.group10()[0] * other.group1()[2])
                        - (self[e35] * other.group3()[3])
                        - (self.group8()[3] * other.group2()[3])
                        + (self.group4()[2] * other.group2()[2])
                        + (self.group4()[1] * other.group2()[1])
                        + (self.group4()[0] * other.group2()[0])
                        + (self.group3()[2] * other.group0()[2])
                        + (self.group3()[1] * other.group0()[1])
                        - (self.group0()[0] * other.group0()[3])
                        + (self.group3()[0] * other.group0()[0])),
                ])),
            // e1, e2, e3, e4
            ((Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group10()[2], self.group10()[1], self.group10()[0], self[e35]]))
                - (swizzle!(other.group3(), 1, 2, 0, 2) * Simd32x4::from([self.group10()[0], self.group10()[2], self.group10()[1], self.group4()[2]]))
                - (other.group0() * Simd32x4::from([self.group8()[3], self.group8()[3], self.group8()[3], self[e35]]))
                + (swizzle!(self.group8(), 1, 2, 2, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group0()[2]]))
                + (swizzle!(self.group8(), 0, 1, 0, 1) * Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group0()[1]]))
                - (swizzle!(other.group2(), 1, 2, 0, 3) * Simd32x4::from([self.group4()[2], self.group4()[0], self.group4()[1], self.group0()[0]]))
                + (swizzle!(other.group1(), 0, 1, 2, 2) * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group4()[2]]))
                + (swizzle!(other.group0(), 1, 2, 0, 0) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group10()[2]]))
                - (swizzle!(self.group3(), 1, 2, 2, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group2()[3], other.group2()[3]]))
                + Simd32x4::from([
                    ((self.group10()[1] * other.group3()[2]) + (self[e35] * other.group2()[0]) - (self.group8()[2] * other.group1()[1])
                        + (self.group4()[1] * other.group2()[2])
                        + (self.group4()[0] * other.group3()[3])
                        + (self.group0()[0] * other.group3()[0])
                        - (self.group3()[0] * other.group2()[3])),
                    ((self.group10()[0] * other.group3()[0]) + (self[e35] * other.group2()[1]) - (self.group8()[0] * other.group1()[2])
                        + (self.group4()[2] * other.group2()[0])
                        + (self.group4()[1] * other.group3()[3])
                        - (self.group3()[1] * other.group2()[3])
                        + (self.group0()[0] * other.group3()[1])),
                    ((self.group10()[2] * other.group3()[1]) + (self[e35] * other.group2()[2]) - (self.group8()[1] * other.group1()[0])
                        + (self.group4()[2] * other.group3()[3])
                        + (self.group4()[0] * other.group2()[1])
                        + (self.group0()[0] * other.group3()[2])
                        - (self.group3()[0] * other.group0()[1])),
                    ((self.group10()[1] * other.group0()[1]) + (self.group10()[0] * other.group0()[2]) + (self.group8()[0] * other.group0()[0])
                        - (self.group4()[1] * other.group3()[1])
                        + (self.group4()[1] * other.group1()[1])
                        - (self.group4()[0] * other.group3()[0])
                        + (self.group4()[0] * other.group1()[0])),
                ])),
            // e5
            ((self.group10()[2] * other.group2()[0]) + (self.group10()[1] * other.group2()[1]) + (self.group10()[0] * other.group2()[2])
                - (self.group8()[3] * other.group1()[3])
                - (self.group8()[3] * other.group0()[3])
                - (self.group8()[2] * other.group2()[2])
                - (self.group8()[1] * other.group2()[1])
                - (self.group8()[0] * other.group2()[0])
                + (self.group3()[3] * other.group3()[3])
                + (self.group3()[2] * other.group3()[2])
                + (self.group3()[2] * other.group1()[2])
                + (self.group3()[1] * other.group3()[1])
                + (self.group3()[1] * other.group1()[1])
                + (self.group3()[0] * other.group3()[0])
                - (self.group0()[0] * other.group3()[3])
                + (self.group3()[0] * other.group1()[0])),
            // e15, e25, e35, e45
            (-(swizzle!(other.group3(), 1, 2, 0, 2) * Simd32x4::from([self.group7()[2], self.group7()[0], self.group7()[1], self.group5()[2]]))
                + (swizzle!(other.group3(), 2, 0, 1, 3) * Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[0], self.group1()[3]]))
                + (swizzle!(other.group1(), 2, 0, 3, 2) * Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[2], self.group1()[2]]))
                + (swizzle!(other.group1(), 3, 3, 1, 1) * Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[0], self.group1()[1]]))
                + (swizzle!(other.group0(), 3, 3, 3, 2) * Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group7()[2]]))
                - (swizzle!(other.group2(), 1, 2, 0, 2) * Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group6()[2]]))
                + (other.group1() * Simd32x4::from([self[e1], self[e1], self[e1], self.group0()[1]]))
                - (swizzle!(other.group2(), 1, 2, 0, 1) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group6()[1]]))
                + (swizzle!(self.group1(), 1, 2, 2, 0) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group3()[3], other.group1()[0]]))
                + Simd32x4::from([
                    (-(self.group7()[2] * other.group1()[1])
                        + (self.group5()[3] * other.group2()[0])
                        + (self.group5()[1] * other.group2()[2])
                        + (self.group5()[0] * other.group3()[3])
                        + (self[e1] * other.group3()[0])
                        + (self.group0()[1] * other.group2()[0])
                        + (self.group1()[0] * other.group3()[3])),
                    (-(self.group7()[0] * other.group1()[2])
                        + (self.group5()[3] * other.group2()[1])
                        + (self.group5()[2] * other.group2()[0])
                        + (self.group5()[1] * other.group3()[3])
                        + (self[e1] * other.group3()[1])
                        + (self.group1()[1] * other.group3()[3])
                        + (self.group0()[1] * other.group2()[1])),
                    (-(self.group7()[1] * other.group1()[0])
                        + (self.group5()[3] * other.group2()[2])
                        + (self.group5()[2] * other.group3()[3])
                        + (self.group5()[0] * other.group2()[1])
                        + (self[e1] * other.group3()[2])
                        + (self.group0()[1] * other.group2()[2])
                        + (self.group1()[0] * other.group2()[1])),
                    ((self.group7()[1] * other.group0()[1]) + (self.group7()[0] * other.group0()[0])
                        - (self.group6()[0] * other.group2()[0])
                        - (self.group5()[3] * other.group0()[3])
                        - (self.group5()[1] * other.group3()[1])
                        - (self.group5()[0] * other.group3()[0])
                        - (self[e1] * other.group2()[3])),
                ])),
            // e41, e42, e43
            ((Simd32x3::from(self.group6()[2]) * Simd32x3::from([other.group3()[1], other.group1()[0], other.group0()[3]]))
                - (Simd32x3::from(self.group6()[2]) * Simd32x3::from([other.group1()[1], other.group3()[0], other.group1()[3]]))
                - (Simd32x3::from(self.group6()[1]) * Simd32x3::from([other.group3()[2], other.group1()[3], other.group1()[0]]))
                + (Simd32x3::from(self.group6()[1]) * Simd32x3::from([other.group1()[2], other.group0()[3], other.group3()[0]]))
                - (Simd32x3::from(self.group6()[0]) * Simd32x3::from([other.group1()[3], other.group1()[2], other.group3()[1]]))
                + (Simd32x3::from(self.group6()[0]) * Simd32x3::from([other.group0()[3], other.group3()[2], other.group1()[1]]))
                - (Simd32x3::from(self.group5()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(other.group0()[2]) * Simd32x3::from([self.group5()[1], self.group1()[0], self.group0()[1]]))
                + (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group5()[0], self.group5()[1], self.group5()[2]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group1()[2], self.group0()[1], self.group5()[0]]))
                + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[1], self.group5()[2], self.group1()[1]]))
                - (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + Simd32x3::from([
                    (-(self.group5()[2] * other.group0()[1]) - (self.group1()[1] * other.group0()[2])),
                    (-(self.group5()[0] * other.group0()[2]) - (self.group1()[2] * other.group0()[0])),
                    (-(self.group5()[1] * other.group0()[0]) - (self.group1()[0] * other.group0()[1])),
                ])),
            // e415, e425, e435, e321
            (-(swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group10()[1], self.group10()[0], self.group10()[2], self.group8()[2]]))
                + (swizzle!(other.group1(), 1, 2, 0, 3) * Simd32x4::from([self.group10()[0], self.group10()[2], self.group10()[1], self.group0()[0]]))
                - (other.group2() * Simd32x4::from([self[e35], self[e35], self[e35], self.group8()[3]]))
                - (swizzle!(self.group8(), 3, 3, 3, 1) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]]))
                + (swizzle!(other.group3(), 1, 2, 0, 3) * Simd32x4::from([self.group8()[2], self.group8()[0], self.group8()[1], self[e35]]))
                - (swizzle!(self.group8(), 1, 2, 2, 0) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[3], other.group1()[0]]))
                - (swizzle!(other.group2(), 2, 0, 1, 2) * Simd32x4::from([self.group4()[1], self.group4()[2], self.group4()[0], self.group4()[2]]))
                - (swizzle!(other.group3(), 3, 3, 1, 0) * Simd32x4::from([self.group4()[0], self.group4()[1], self.group8()[0], self.group10()[2]]))
                - (swizzle!(other.group3(), 0, 1, 3, 1) * Simd32x4::from([self.group3()[3], self.group3()[3], self.group4()[2], self.group10()[1]]))
                + (swizzle!(self.group3(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))
                - (swizzle!(other.group2(), 3, 3, 3, 1) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group4()[1]]))
                + Simd32x4::from([
                    (-(self.group10()[2] * other.group0()[3]) - (self.group8()[0] * other.group1()[3]) + (self.group4()[2] * other.group2()[1])
                        - (self.group3()[1] * other.group0()[2])
                        - (self.group0()[0] * other.group1()[0])),
                    (-(self.group10()[1] * other.group0()[3]) - (self.group8()[1] * other.group1()[3]) + (self.group4()[0] * other.group2()[2])
                        - (self.group3()[2] * other.group0()[0])
                        - (self.group0()[0] * other.group1()[1])),
                    (-(self.group10()[0] * other.group0()[3]) + (self.group4()[1] * other.group2()[0])
                        - (self.group3()[3] * other.group3()[2])
                        - (self.group0()[0] * other.group1()[2])
                        - (self.group3()[0] * other.group0()[1])),
                    (-(self.group10()[0] * other.group3()[2]) - (self.group4()[0] * other.group2()[0])
                        + (self.group3()[2] * other.group0()[2])
                        + (self.group3()[1] * other.group0()[1])
                        + (self.group3()[0] * other.group0()[0])),
                ])),
            // e423, e431, e412
            (-(swizzle!(self.group10(), 2, 1, 2) * Simd32x3::from([other.group2()[3], other.group2()[3], other.group0()[1]]))
                - (swizzle!(self.group10(), 1, 0, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group2()[3]]))
                + (swizzle!(self.group10(), 0, 2, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]))
                + (Simd32x3::from(self[e35]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                - (Simd32x3::from(self[e35]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group8()[0], self.group8()[1], self.group8()[2]]))
                - (Simd32x3::from(self.group4()[2]) * Simd32x3::from([other.group3()[1], other.group1()[0], other.group0()[3]]))
                + (Simd32x3::from(self.group4()[2]) * Simd32x3::from([other.group1()[1], other.group3()[0], other.group1()[3]]))
                + (Simd32x3::from(self.group4()[1]) * Simd32x3::from([other.group3()[2], other.group1()[3], other.group1()[0]]))
                - (Simd32x3::from(self.group4()[1]) * Simd32x3::from([other.group1()[2], other.group0()[3], other.group3()[0]]))
                + (Simd32x3::from(self.group4()[0]) * Simd32x3::from([other.group1()[3], other.group1()[2], other.group3()[1]]))
                - (Simd32x3::from(self.group4()[0]) * Simd32x3::from([other.group0()[3], other.group3()[2], other.group1()[1]]))
                - (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                - (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + Simd32x3::from([
                    ((self.group8()[2] * other.group0()[1]) - (self.group8()[1] * other.group0()[2])),
                    (-(self.group8()[2] * other.group0()[0]) + (self.group8()[0] * other.group0()[2])),
                    ((self.group8()[1] * other.group0()[0]) - (self.group8()[0] * other.group0()[1])),
                ])),
            // e235, e315, e125
            (-(swizzle!(self.group10(), 2, 1, 2) * Simd32x3::from([other.group3()[3], other.group3()[3], other.group2()[1]]))
                - (swizzle!(self.group10(), 1, 0, 0) * Simd32x3::from([other.group2()[2], other.group2()[0], other.group3()[3]]))
                + (swizzle!(self.group10(), 0, 2, 1) * Simd32x3::from([other.group2()[1], other.group2()[2], other.group2()[0]]))
                - (Simd32x3::from(self.group8()[3]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]))
                - (Simd32x3::from(self.group8()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group8()[0], self.group8()[1], self.group8()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                - (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))
                - (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + Simd32x3::from([
                    (-(self.group8()[2] * other.group2()[1])
                        + (self.group8()[1] * other.group2()[2])
                        + (self.group3()[2] * other.group3()[1])
                        + (self.group3()[2] * other.group1()[1])
                        - (self.group3()[1] * other.group3()[2])
                        - (self.group3()[1] * other.group1()[2])),
                    ((self.group8()[2] * other.group2()[0])
                        - (self.group8()[0] * other.group2()[2])
                        - (self.group3()[2] * other.group3()[0])
                        - (self.group3()[2] * other.group1()[0])
                        + (self.group3()[0] * other.group3()[2])
                        + (self.group3()[0] * other.group1()[2])),
                    (-(self.group8()[1] * other.group2()[0])
                        + (self.group8()[0] * other.group2()[1])
                        + (self.group3()[1] * other.group3()[0])
                        + (self.group3()[1] * other.group1()[0])
                        - (self.group3()[0] * other.group3()[1])
                        - (self.group3()[0] * other.group1()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group7()[2], self.group7()[0], self.group7()[1], self[e1]]))
                - (swizzle!(other.group2(), 3, 3, 3, 2) * Simd32x4::from([self.group7()[0], self.group7()[1], self.group7()[2], self.group5()[2]]))
                - (swizzle!(other.group2(), 1, 2, 0, 1) * Simd32x4::from([self.group6()[2], self.group6()[0], self.group6()[1], self.group5()[1]]))
                + (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group6()[0], self.group6()[1], self.group6()[2], self.group5()[3]]))
                - (swizzle!(other.group1(), 0, 1, 2, 2) * Simd32x4::from([self.group5()[3], self.group5()[3], self.group5()[3], self.group7()[2]]))
                - (swizzle!(other.group3(), 1, 2, 0, 2) * Simd32x4::from([self.group5()[2], self.group5()[0], self.group5()[1], self.group7()[2]]))
                + (swizzle!(other.group3(), 2, 0, 1, 3) * Simd32x4::from([self.group5()[1], self.group5()[2], self.group5()[0], self.group0()[1]]))
                + (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group5()[0], self.group5()[1], self.group5()[2], self[e1]]))
                - (swizzle!(self.group1(), 1, 2, 2, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group2()[2]]))
                - (swizzle!(self.group1(), 0, 1, 0, 1) * Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group2()[1]]))
                + Simd32x4::from([
                    (-(self.group7()[1] * other.group0()[2]) + (self.group6()[1] * other.group2()[2]) - (self[e1] * other.group0()[0])
                        + (self.group1()[3] * other.group2()[0])
                        + (self.group1()[2] * other.group1()[1])
                        + (self.group0()[1] * other.group3()[0])),
                    (-(self.group7()[2] * other.group0()[0]) + (self.group6()[2] * other.group2()[0]) - (self[e1] * other.group0()[1])
                        + (self.group1()[3] * other.group2()[1])
                        + (self.group0()[1] * other.group3()[1])
                        + (self.group1()[0] * other.group1()[2])),
                    (-(self.group7()[0] * other.group0()[1]) + (self.group6()[0] * other.group2()[1]) - (self[e1] * other.group0()[2])
                        + (self.group1()[3] * other.group2()[2])
                        + (self.group1()[1] * other.group1()[0])
                        + (self.group0()[1] * other.group3()[2])),
                    (-(self.group7()[1] * other.group3()[1])
                        - (self.group7()[1] * other.group1()[1])
                        - (self.group7()[0] * other.group3()[0])
                        - (self.group7()[0] * other.group1()[0])
                        - (self.group5()[0] * other.group2()[0])
                        - (self.group1()[0] * other.group2()[0])),
                ])),
            // e1234
            ((self.group6()[2] * other.group3()[2]) - (self.group6()[2] * other.group1()[2]) + (self.group6()[1] * other.group3()[1]) - (self.group6()[1] * other.group1()[1])
                + (self.group6()[0] * other.group3()[0])
                - (self.group6()[0] * other.group1()[0])
                - (self.group5()[3] * other.group2()[3])
                - (self.group5()[2] * other.group0()[2])
                - (self.group5()[1] * other.group0()[1])
                - (self.group5()[0] * other.group0()[0])
                - (self.group1()[3] * other.group1()[3])
                + (self.group1()[3] * other.group0()[3])
                + (self.group1()[2] * other.group0()[2])
                + (self.group1()[1] * other.group0()[1])
                + (self.group0()[1] * other.group2()[3])
                + (self.group1()[0] * other.group0()[0])),
            // e12, e31, e23
            ((swizzle!(self.group7(), 2, 2, 1) * Simd32x3::from([other.group2()[3], other.group0()[0], other.group0()[2]]))
                - (swizzle!(self.group7(), 1, 0, 2) * Simd32x3::from([other.group0()[0], other.group0()[2], other.group0()[1]]))
                + (swizzle!(self.group7(), 0, 1, 0) * Simd32x3::from([other.group0()[1], other.group2()[3], other.group2()[3]]))
                + (swizzle!(self.group6(), 2, 2, 1) * Simd32x3::from([other.group3()[3], other.group2()[0], other.group2()[2]]))
                - (swizzle!(self.group6(), 1, 0, 2) * Simd32x3::from([other.group2()[0], other.group2()[2], other.group2()[1]]))
                + (swizzle!(self.group6(), 0, 1, 0) * Simd32x3::from([other.group2()[1], other.group3()[3], other.group3()[3]]))
                - (Simd32x3::from(self.group5()[3]) * Simd32x3::from([other.group3()[2], other.group3()[1], other.group3()[0]]))
                + (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group5()[2], self.group5()[1], self.group5()[0]]))
                + (Simd32x3::from(self[e1]) * Simd32x3::from([other.group0()[2], other.group0()[1], other.group0()[0]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group2()[2], other.group2()[1], other.group2()[0]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[2], self.group1()[1], self.group1()[0]]))
                + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[2], other.group1()[1], other.group1()[0]]))
                + Simd32x3::from([
                    (-(self.group5()[1] * other.group1()[0]) + (self.group5()[0] * other.group1()[1]) + (self.group1()[1] * other.group3()[0])
                        - (self.group1()[0] * other.group3()[1])),
                    ((self.group5()[2] * other.group1()[0]) - (self.group5()[0] * other.group1()[2]) - (self.group1()[2] * other.group3()[0])
                        + (self.group1()[0] * other.group3()[2])),
                    (-(self.group5()[2] * other.group1()[1]) + (self.group5()[1] * other.group1()[2]) + (self.group1()[2] * other.group3()[1])
                        - (self.group1()[1] * other.group3()[2])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl InfixAntiSandwich for Plane {}
impl AntiSandwich<AntiScalar> for Plane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       14        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        5       16        0
    //  no simd        8       22        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (self.group0() * Simd32x4::from(other[e12345])));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for Plane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       41        0
    //    simd3        1        2        0
    //    simd4       13       14        0
    // Totals...
    // yes simd       31       57        0
    //  no simd       72      103        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            ((swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                - (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
            // e23, e31, e12, e45
            (-(swizzle!(self.group0(), 0, 1, 2, 2) * swizzle!(other.group1(), 3, 3, 3, 2))
                + Simd32x4::from([
                    (self.group0()[3] * other.group0()[0]),
                    (self.group0()[3] * other.group0()[1]),
                    (self.group0()[3] * other.group0()[2]),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e15, e25, e35, e1234
            (-(swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group1()[0]) + (self.group0()[2] * other.group2()[1])),
                    ((self.group0()[3] * other.group1()[1]) + (self.group0()[0] * other.group2()[2])),
                    ((self.group0()[3] * other.group1()[2]) + (self.group0()[1] * other.group2()[0])),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[2]]))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group1()[1]) * -1.0),
                    ((self.group0()[0] * other.group1()[2]) * -1.0),
                    ((self.group0()[1] * other.group1()[0]) * -1.0),
                    ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group2()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for Plane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       41        0
    //    simd3        1        2        0
    //    simd4       14       15        0
    // Totals...
    // yes simd       32       58        0
    //  no simd       76      107        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            ((swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                - (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
            // e23, e31, e12, e45
            (-(swizzle!(self.group0(), 0, 1, 2, 2) * swizzle!(other.group1(), 3, 3, 3, 2))
                + Simd32x4::from([
                    (self.group0()[3] * other.group0()[0]),
                    (self.group0()[3] * other.group0()[1]),
                    (self.group0()[3] * other.group0()[2]),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e15, e25, e35, e1234
            (-(swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group1()[0]) + (self.group0()[2] * other.group2()[1])),
                    ((self.group0()[3] * other.group1()[1]) + (self.group0()[0] * other.group2()[2])),
                    ((self.group0()[3] * other.group1()[2]) + (self.group0()[1] * other.group2()[0])),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (swizzle!(self.group0(), 0, 2, 2, 3) * Simd32x4::from([other.group2()[3], other.group1()[0], other.group2()[3], other.group2()[3]]))
                + (swizzle!(self.group0(), 1, 1, 0, 2) * Simd32x4::from([other.group1()[2], other.group2()[3], other.group1()[1], other.group2()[2]]))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group1()[1]) * -1.0),
                    ((self.group0()[0] * other.group1()[2]) * -1.0),
                    ((self.group0()[1] * other.group1()[0]) * -1.0),
                    ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group2()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for Plane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       41        0
    //    simd4       15       17        0
    // Totals...
    // yes simd       32       58        0
    //  no simd       77      109        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
            // e415, e425, e435, e321
            (-(swizzle!(self.group0(), 0, 1, 2, 2) * swizzle!(other.group1(), 3, 3, 3, 2))
                - (swizzle!(self.group0(), 3, 3, 3, 0) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]))
                + Simd32x4::from([0.0, 0.0, 0.0, ((self.group0()[1] * other.group1()[1]) * -1.0)])),
            // e235, e315, e125, e5
            (-(Simd32x4::from(self.group0()[3]) * other.group1())
                - (swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group2()[2]]))
                + Simd32x4::from([
                    (self.group0()[1] * other.group2()[2]),
                    (self.group0()[2] * other.group2()[0]),
                    (self.group0()[0] * other.group2()[1]),
                    (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            ((swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group0()[3] * other.group0()[0]) - (self.group0()[2] * other.group1()[1])),
                    (-(self.group0()[3] * other.group0()[1]) - (self.group0()[0] * other.group1()[2])),
                    (-(self.group0()[3] * other.group0()[2]) - (self.group0()[1] * other.group1()[0])),
                    ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for Plane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       44        0
    //    simd4       19       23        0
    // Totals...
    // yes simd       36       67        0
    //  no simd       93      136        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[2]]))
                - (swizzle!(self.group0(), 0, 2, 2, 3) * Simd32x4::from([other.group2()[3], other.group0()[0], other.group2()[3], other.group2()[3]]))
                + Simd32x4::from([
                    ((self.group0()[1] * other.group0()[2]) * -1.0),
                    ((self.group0()[1] * other.group2()[3]) * -1.0),
                    ((self.group0()[0] * other.group0()[1]) * -1.0),
                    ((self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group3()[1])),
                ])),
            // e415, e425, e435, e321
            (-(Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (swizzle!(self.group0(), 0, 2, 2, 2) * Simd32x4::from([other.group1()[3], other.group3()[0], other.group1()[3], other.group1()[2]]))
                - (swizzle!(self.group0(), 1, 1, 0, 0) * Simd32x4::from([other.group3()[2], other.group1()[3], other.group3()[1], other.group1()[0]]))
                + (Simd32x4::from([1.0, 1.0, 1.0, -1.0])
                    * swizzle!(self.group0(), 2, 0, 1, 1)
                    * Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[1]]))),
            // e235, e315, e125, e5
            (-(Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))
                - (swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[2]]))
                - (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group2(), 1, 2, 0, 0))
                + Simd32x4::from([
                    ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group2()[2])),
                    ((self.group0()[2] * other.group2()[0]) + (self.group0()[1] * other.group3()[3])),
                    ((self.group0()[2] * other.group3()[3]) + (self.group0()[0] * other.group2()[1])),
                    ((self.group0()[1] * other.group2()[1]) * -1.0),
                ])),
            // e1, e2, e3, e4
            ((swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group0()[3] * other.group0()[0]) - (self.group0()[2] * other.group1()[1])),
                    (-(self.group0()[3] * other.group0()[1]) - (self.group0()[0] * other.group1()[2])),
                    (-(self.group0()[3] * other.group0()[2]) - (self.group0()[1] * other.group1()[0])),
                    ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum> for Plane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       22        0
    //    simd4        3        4        0
    // Totals...
    // yes simd       11       26        0
    //  no simd       20       38        0
    fn anti_sandwich(self, other: DualNum) -> Self::Output {
        let geometric_anti_product = Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0] * -1.0),
                (self.group0()[1] * other.group0()[0] * -1.0),
                (self.group0()[2] * other.group0()[0] * -1.0),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (self.group0() * Simd32x4::from(other.group0()[1])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for Plane {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       28        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       14       32        0
    //  no simd       26       44        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_anti_product = Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                0.0,
            ]),
            // e235, e315, e125, e5
            (-(swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))
                + Simd32x4::from([
                    (self.group0()[1] * other.group0()[2]),
                    (self.group0()[2] * other.group0()[0]),
                    (self.group0()[0] * other.group0()[1]),
                    (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for Plane {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       32        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       22       38        0
    //  no simd       40       56        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        let geometric_anti_product = Motor::from_groups(
            // e415, e425, e435, e12345
            ((swizzle!(self.group0(), 2, 0, 1, 2) * swizzle!(other.group1(), 1, 2, 0, 2))
                + Simd32x4::from([
                    (-(self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group1()[2])),
                    (-(self.group0()[2] * other.group1()[0]) - (self.group0()[1] * other.group0()[3])),
                    (-(self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group1()[1])),
                    ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
                ])),
            // e235, e315, e125, e5
            (-(Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                - (swizzle!(self.group0(), 2, 0, 1, 2) * swizzle!(other.group0(), 1, 2, 0, 2))
                + Simd32x4::from([
                    ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[2])),
                    ((self.group0()[2] * other.group0()[0]) + (self.group0()[1] * other.group1()[3])),
                    ((self.group0()[2] * other.group1()[3]) + (self.group0()[0] * other.group0()[1])),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for Plane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       32        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       18       37        0
    //  no simd       33       52        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        let geometric_anti_product = Flector::from_groups(
            // e15, e25, e35, e45
            (-(swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group0()[0]) + (self.group0()[2] * other.group1()[1])),
                    ((self.group0()[3] * other.group0()[1]) + (self.group0()[0] * other.group1()[2])),
                    ((self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group1()[0])),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group0()[1]) * -1.0),
                    ((self.group0()[0] * other.group0()[2]) * -1.0),
                    ((self.group0()[1] * other.group0()[0]) * -1.0),
                    ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for Plane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       32        0
    //    simd4        7        7        0
    // Totals...
    // yes simd       19       39        0
    //  no simd       40       60        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        let geometric_anti_product = Flector::from_groups(
            // e15, e25, e35, e45
            (-(swizzle!(self.group0(), 0, 2, 2, 2) * Simd32x4::from([other.group1()[3], other.group1()[0], other.group1()[3], other.group0()[2]]))
                - (swizzle!(self.group0(), 1, 1, 0, 0) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group1()[1], other.group0()[0]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group0()[0]) + (self.group0()[2] * other.group1()[1])),
                    ((self.group0()[3] * other.group0()[1]) + (self.group0()[0] * other.group1()[2])),
                    ((self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group1()[0])),
                    ((self.group0()[1] * other.group0()[1]) * -1.0),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(self.group0(), 0, 2, 2, 3) * swizzle!(other.group0(), 3, 0, 3, 3))
                + (swizzle!(self.group0(), 1, 1, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[3], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group0()[1]) * -1.0),
                    ((self.group0()[0] * other.group0()[2]) * -1.0),
                    ((self.group0()[1] * other.group0()[0]) * -1.0),
                    ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for Plane {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       46       90        0
    //    simd2        6       10        0
    //    simd3       18       22        0
    //    simd4       20       23        0
    // Totals...
    // yes simd       90      145        0
    //  no simd      192      268        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group1()[2], other.group8()[2]]))
                + (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group1()[0], other.group8()[0]]))
                + (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group1()[1], other.group8()[1]]))
                + (Simd32x2::from([1.0, -1.0]) * Simd32x2::from(self.group0()[3]) * Simd32x2::from([other.group1()[3], other[e35]]))),
            // e1, e2, e3, e4
            ((swizzle!(self.group0(), 0, 2, 2, 2) * Simd32x4::from([other.group0()[0], other.group10()[2], other.group0()[0], other.group4()[2]]))
                + (swizzle!(self.group0(), 1, 1, 0, 0) * Simd32x4::from([other.group10()[0], other.group0()[0], other.group10()[1], other.group4()[0]]))
                + Simd32x4::from([
                    (-(self.group0()[3] * other.group4()[0]) - (self.group0()[2] * other.group10()[1])),
                    (-(self.group0()[3] * other.group4()[1]) - (self.group0()[0] * other.group10()[0])),
                    (-(self.group0()[3] * other.group4()[2]) - (self.group0()[1] * other.group10()[2])),
                    (self.group0()[1] * other.group4()[1]),
                ])),
            // e5
            (-(self.group0()[3] * other.group3()[3])
                - (self.group0()[3] * other.group0()[0])
                - (self.group0()[2] * other.group3()[2])
                - (self.group0()[0] * other.group3()[0])
                - (self.group0()[1] * other.group3()[1])),
            // e15, e25, e35, e45
            (-(Simd32x4::from(self.group0()[3]) * other.group1())
                - (swizzle!(self.group0(), 0, 2, 2, 2) * Simd32x4::from([other[e1], other.group7()[0], other[e1], other.group5()[2]]))
                - (swizzle!(self.group0(), 1, 1, 0, 0) * Simd32x4::from([other.group7()[2], other[e1], other.group7()[1], other.group5()[0]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group5()[0]) + (self.group0()[2] * other.group7()[1])),
                    ((self.group0()[3] * other.group5()[1]) + (self.group0()[0] * other.group7()[2])),
                    ((self.group0()[3] * other.group5()[2]) + (self.group0()[1] * other.group7()[0])),
                    ((self.group0()[1] * other.group5()[1]) * -1.0),
                ])),
            // e41, e42, e43
            (-(swizzle!(other.group6(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (swizzle!(other.group6(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))),
            // e415, e425, e435, e321
            (-(Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[2], other[e35]]))
                - (swizzle!(self.group0(), 0, 2, 2, 2) * Simd32x4::from([other.group3()[3], other.group8()[0], other.group3()[3], other.group10()[0]]))
                - (swizzle!(self.group0(), 1, 1, 0, 0) * Simd32x4::from([other.group8()[2], other.group3()[3], other.group8()[1], other.group10()[2]]))
                + (Simd32x4::from([1.0, 1.0, 1.0, -1.0])
                    * swizzle!(self.group0(), 2, 0, 1, 1)
                    * Simd32x4::from([other.group8()[1], other.group8()[2], other.group8()[0], other.group10()[1]]))),
            // e423, e431, e412
            ((swizzle!(other.group4(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))
                - (Simd32x3::from(other[e35]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (swizzle!(other.group4(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))),
            // e235, e315, e125
            (-(Simd32x3::from(self.group0()[3]) * swizzle!(other.group10(), 2, 1, 0))
                - (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group8()[0], other.group8()[1], other.group8()[2]]))
                + (Simd32x3::from(other.group8()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + Simd32x3::from([
                    (-(self.group0()[2] * other.group3()[1]) + (self.group0()[1] * other.group3()[2])),
                    ((self.group0()[2] * other.group3()[0]) - (self.group0()[0] * other.group3()[2])),
                    ((self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group3()[0])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group6()[0], other.group6()[1], other.group6()[2], other.group5()[3]]))
                + (swizzle!(self.group0(), 0, 2, 2, 3) * Simd32x4::from([other.group0()[1], other.group5()[0], other.group0()[1], other.group0()[1]]))
                + (swizzle!(self.group0(), 1, 1, 0, 2) * Simd32x4::from([other.group5()[2], other.group0()[1], other.group5()[1], other.group7()[2]]))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group5()[1]) * -1.0),
                    ((self.group0()[0] * other.group5()[2]) * -1.0),
                    ((self.group0()[1] * other.group5()[0]) * -1.0),
                    ((self.group0()[0] * other.group7()[0]) + (self.group0()[1] * other.group7()[1])),
                ])),
            // e1234
            (-(self.group0()[2] * other.group6()[2]) - (self.group0()[0] * other.group6()[0]) - (self.group0()[1] * other.group6()[1])),
            // e12, e31, e23
            ((Simd32x3::from(self.group0()[3]) * swizzle!(other.group6(), 2, 1, 0))
                - (Simd32x3::from(other.group5()[3]) * Simd32x3::from([self.group0()[2], self.group0()[1], self.group0()[0]]))
                + Simd32x3::from([
                    (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
                    (-(self.group0()[2] * other.group1()[0]) + (self.group0()[0] * other.group1()[2])),
                    ((self.group0()[2] * other.group1()[1]) - (self.group0()[1] * other.group1()[2])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for Plane {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       30        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       16       34        0
    //  no simd       28       46        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        let geometric_anti_product = Motor::from_groups(
            // e415, e425, e435, e12345
            ((swizzle!(self.group0(), 2, 0, 1, 2) * swizzle!(other.group0(), 1, 2, 0, 2))
                + Simd32x4::from([
                    ((self.group0()[1] * other.group0()[2]) * -1.0),
                    ((self.group0()[2] * other.group0()[0]) * -1.0),
                    ((self.group0()[0] * other.group0()[1]) * -1.0),
                    ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) - (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) - (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) - (self.group0()[3] * other.group0()[2])),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for Plane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       41        0
    //    simd4       10       11        0
    // Totals...
    // yes simd       30       52        0
    //  no simd       60       85        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                ((self.group0()[3] * other.group0()[3]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other.group0()[3] * -1.0),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group0()[0] * other[e2]) - (self.group0()[3] * other.group0()[0])),
                (-(self.group0()[1] * other[e2]) - (self.group0()[3] * other.group0()[1])),
                (-(self.group0()[2] * other[e2]) - (self.group0()[3] * other.group0()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(0.0),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for Plane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        9       28        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = RoundPoint::from_groups(
            // e1, e2, e3, e4
            Simd32x4::from([(self.group0()[0] * other[scalar]), (self.group0()[1] * other[scalar]), (self.group0()[2] * other[scalar]), 0.0]),
            // e5
            (self.group0()[3] * other[scalar] * -1.0),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for Plane {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       20        0
    //    simd3        1        4        0
    //    simd4        8       10        0
    // Totals...
    // yes simd       15       34        0
    //  no simd       41       72        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = CircleRotor::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other[e4315]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(-1.0)),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other[e4315] * -1.0),
            ]),
            // e235, e315, e125, e12345
            ((swizzle!(self.group0(), 0, 1, 2, 2) * swizzle!(other.group0(), 3, 3, 3, 2))
                - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other[e4315]]))
                + Simd32x4::from([0.0, 0.0, 0.0, ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]))])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for Plane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       50        0
    //    simd4       20       21        0
    // Totals...
    // yes simd       40       71        0
    //  no simd      100      134        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((swizzle!(self.group0(), 0, 2, 2, 3) * Simd32x4::from([other.group3()[3], other.group0()[0], other.group3()[3], other.group3()[3]]))
                + (swizzle!(self.group0(), 1, 1, 0, 2) * Simd32x4::from([other.group0()[2], other.group3()[3], other.group0()[1], other.group3()[2]]))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group0()[1]) * -1.0),
                    ((self.group0()[0] * other.group0()[2]) * -1.0),
                    ((self.group0()[1] * other.group0()[0]) * -1.0),
                    ((self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group3()[1])),
                ])),
            // e23, e31, e12, e45
            (-(swizzle!(self.group0(), 0, 2, 2, 3) * Simd32x4::from([other.group1()[3], other.group3()[0], other.group1()[3], other.group3()[3]]))
                - (swizzle!(self.group0(), 1, 1, 0, 2) * Simd32x4::from([other.group3()[2], other.group1()[3], other.group3()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group0()[0]) + (self.group0()[2] * other.group3()[1])),
                    ((self.group0()[3] * other.group0()[1]) + (self.group0()[0] * other.group3()[2])),
                    ((self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group3()[0])),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e15, e25, e35, e1234
            (-(swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group0()[2]]))
                - (swizzle!(self.group0(), 0, 2, 2, 0) * Simd32x4::from([other.group2()[3], other.group2()[0], other.group2()[3], other.group0()[0]]))
                - (swizzle!(self.group0(), 1, 1, 0, 1) * Simd32x4::from([other.group2()[2], other.group2()[3], other.group2()[1], other.group0()[1]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group1()[0]) + (self.group0()[2] * other.group2()[1])),
                    ((self.group0()[3] * other.group1()[1]) + (self.group0()[0] * other.group2()[2])),
                    ((self.group0()[3] * other.group1()[2]) + (self.group0()[1] * other.group2()[0])),
                    0.0,
                ])),
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (swizzle!(self.group0(), 0, 2, 2, 3) * Simd32x4::from([other.group0()[3], other.group1()[0], other.group0()[3], other.group0()[3]]))
                + (swizzle!(self.group0(), 1, 1, 0, 2) * Simd32x4::from([other.group1()[2], other.group0()[3], other.group1()[1], other.group2()[2]]))
                + Simd32x4::from([
                    ((self.group0()[2] * other.group1()[1]) * -1.0),
                    ((self.group0()[0] * other.group1()[2]) * -1.0),
                    ((self.group0()[1] * other.group1()[0]) * -1.0),
                    ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group2()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for Plane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       43        0
    //    simd4       20       24        0
    // Totals...
    // yes simd       37       67        0
    //  no simd       97      139        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[2]]))
                - (swizzle!(self.group0(), 0, 2, 2, 3) * Simd32x4::from([other.group2()[3], other.group0()[0], other.group2()[3], other.group2()[3]]))
                + Simd32x4::from([
                    ((self.group0()[1] * other.group0()[2]) * -1.0),
                    ((self.group0()[1] * other.group2()[3]) * -1.0),
                    ((self.group0()[0] * other.group0()[1]) * -1.0),
                    ((self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group3()[1])),
                ])),
            // e415, e425, e435, e321
            (-(Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (swizzle!(self.group0(), 0, 2, 2, 2) * Simd32x4::from([other.group1()[3], other.group3()[0], other.group1()[3], other.group1()[2]]))
                - (swizzle!(self.group0(), 1, 1, 0, 0) * Simd32x4::from([other.group3()[2], other.group1()[3], other.group3()[1], other.group1()[0]]))
                + (Simd32x4::from([1.0, 1.0, 1.0, -1.0])
                    * swizzle!(self.group0(), 2, 0, 1, 1)
                    * Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[1]]))),
            // e235, e315, e125, e5
            (-(Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))
                - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                - (swizzle!(self.group0(), 2, 0, 1, 2) * swizzle!(other.group2(), 1, 2, 0, 2))
                + Simd32x4::from([
                    ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group2()[2])),
                    ((self.group0()[2] * other.group2()[0]) + (self.group0()[1] * other.group3()[3])),
                    ((self.group0()[2] * other.group3()[3]) + (self.group0()[0] * other.group2()[1])),
                    (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            ((swizzle!(self.group0(), 0, 2, 2, 2) * Simd32x4::from([other.group0()[3], other.group1()[0], other.group0()[3], other.group0()[2]]))
                + (swizzle!(self.group0(), 1, 1, 0, 0) * Simd32x4::from([other.group1()[2], other.group0()[3], other.group1()[1], other.group0()[0]]))
                + Simd32x4::from([
                    (-(self.group0()[3] * other.group0()[0]) - (self.group0()[2] * other.group1()[1])),
                    (-(self.group0()[3] * other.group0()[1]) - (self.group0()[0] * other.group1()[2])),
                    (-(self.group0()[3] * other.group0()[2]) - (self.group0()[1] * other.group1()[0])),
                    (self.group0()[1] * other.group0()[1]),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl InfixAntiSandwich for RoundPoint {}
impl AntiSandwich<AntiScalar> for RoundPoint {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        4        0
    //    simd3        1        2        0
    //    simd4        3        5        0
    // Totals...
    // yes simd        6       11        0
    //  no simd       17       30        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = RoundPoint::from_groups(/* e1, e2, e3, e4 */ (self.group0() * Simd32x4::from(other[e12345])), /* e5 */ (self[e2] * other[e12345]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       43       70        0
    //    simd4       14       16        0
    // Totals...
    // yes simd       57       86        0
    //  no simd       99      134        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[3] * other.group1()[0]) - (self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[3] * other.group1()[1]) + (self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                ((self.group0()[3] * other.group1()[2]) - (self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self[e2] * other.group0()[0]) + (self.group0()[0] * other.group1()[3]) + (self.group0()[3] * other.group2()[0])),
                ((self[e2] * other.group0()[1]) + (self.group0()[1] * other.group1()[3]) + (self.group0()[3] * other.group2()[1])),
                ((self[e2] * other.group0()[2]) + (self.group0()[2] * other.group1()[3]) + (self.group0()[3] * other.group2()[2])),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e235, e315, e125, e5
            (-(swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group2()[2]]))
                + Simd32x4::from([
                    ((self[e2] * other.group1()[0]) + (self.group0()[1] * other.group2()[2])),
                    ((self[e2] * other.group1()[1]) + (self.group0()[2] * other.group2()[0])),
                    ((self[e2] * other.group1()[2]) + (self.group0()[0] * other.group2()[1])),
                    (-(self[e2] * other.group1()[3]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            ((swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group1(), 2, 0, 1, 3))
                + Simd32x4::from([
                    ((self[e2] * other.group0()[0]) - (self.group0()[3] * other.group2()[0]) - (self.group0()[2] * other.group1()[1])),
                    ((self[e2] * other.group0()[1]) - (self.group0()[3] * other.group2()[1]) - (self.group0()[0] * other.group1()[2])),
                    ((self[e2] * other.group0()[2]) - (self.group0()[3] * other.group2()[2]) - (self.group0()[1] * other.group1()[0])),
                    ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       67        0
    //    simd4       16       18        0
    // Totals...
    // yes simd       56       85        0
    //  no simd      104      139        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                ((self.group0()[3] * other.group1()[0]) - (self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[3] * other.group1()[1]) + (self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                ((self.group0()[3] * other.group1()[2]) - (self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                ((self[e2] * other.group0()[0]) + (self.group0()[0] * other.group1()[3]) + (self.group0()[3] * other.group2()[0])),
                ((self[e2] * other.group0()[1]) + (self.group0()[1] * other.group1()[3]) + (self.group0()[3] * other.group2()[1])),
                ((self[e2] * other.group0()[2]) + (self.group0()[2] * other.group1()[3]) + (self.group0()[3] * other.group2()[2])),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e235, e315, e125, e5
            ((Simd32x4::from(self[e2]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                - (swizzle!(self.group0(), 2, 0, 1, 2) * swizzle!(other.group2(), 1, 2, 0, 2))
                + Simd32x4::from([
                    (self.group0()[1] * other.group2()[2]),
                    (self.group0()[2] * other.group2()[0]),
                    (self.group0()[0] * other.group2()[1]),
                    (-(self[e2] * other.group1()[3]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            ((swizzle!(self.group0(), 0, 2, 2, 3) * Simd32x4::from([other.group2()[3], other.group1()[0], other.group2()[3], other.group2()[3]]))
                + (swizzle!(self.group0(), 1, 1, 0, 3) * Simd32x4::from([other.group1()[2], other.group2()[3], other.group1()[1], other.group1()[3]]))
                + Simd32x4::from([
                    ((self[e2] * other.group0()[0]) - (self.group0()[3] * other.group2()[0]) - (self.group0()[2] * other.group1()[1])),
                    ((self[e2] * other.group0()[1]) - (self.group0()[3] * other.group2()[1]) - (self.group0()[0] * other.group1()[2])),
                    ((self[e2] * other.group0()[2]) - (self.group0()[3] * other.group2()[2]) - (self.group0()[1] * other.group1()[0])),
                    ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       49        0
    //    simd3        2        3        0
    //    simd4       17       18        0
    // Totals...
    // yes simd       39       70        0
    //  no simd       94      130        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                + (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
            // e23, e31, e12, e45
            ((swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[2]]))
                + Simd32x4::from([
                    ((self[e2] * other.group0()[0]) - (self.group0()[0] * other.group1()[3])),
                    ((self[e2] * other.group0()[1]) - (self.group0()[1] * other.group1()[3])),
                    ((self[e2] * other.group0()[2]) - (self.group0()[2] * other.group1()[3])),
                    ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
                ])),
            // e15, e25, e35, e1234
            ((swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[2]]))
                - (swizzle!(self.group0(), 2, 0, 1, 3) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]))
                + Simd32x4::from([
                    (self[e2] * other.group1()[0]),
                    (self[e2] * other.group1()[1]),
                    (self[e2] * other.group1()[2]),
                    ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[2]]))
                + (swizzle!(other.group1(), 1, 2, 0, 3) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self[e2]]))
                + Simd32x4::from([
                    (-(self[e2] * other.group0()[0]) + (self.group0()[3] * other.group2()[0])),
                    (-(self[e2] * other.group0()[1]) + (self.group0()[3] * other.group2()[1])),
                    (-(self[e2] * other.group0()[2]) + (self.group0()[3] * other.group2()[2])),
                    (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       35       67        0
    //    simd4       22       23        0
    // Totals...
    // yes simd       57       90        0
    //  no simd      123      159        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                + (swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[2]]))
                + Simd32x4::from([
                    (-(self.group0()[3] * other.group3()[0]) - (self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group0()[2])),
                    (-(self.group0()[3] * other.group3()[1]) - (self.group0()[2] * other.group0()[0]) - (self.group0()[1] * other.group2()[3])),
                    (-(self.group0()[3] * other.group3()[2]) - (self.group0()[2] * other.group2()[3]) - (self.group0()[0] * other.group0()[1])),
                    ((self[e2] * other.group2()[3]) + (self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group3()[1])),
                ])),
            // e23, e31, e12, e45
            ((Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                + (swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[2]]))
                + Simd32x4::from([
                    ((self[e2] * other.group0()[0]) - (self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group3()[2])),
                    ((self[e2] * other.group0()[1]) - (self.group0()[2] * other.group3()[0]) - (self.group0()[1] * other.group1()[3])),
                    ((self[e2] * other.group0()[2]) - (self.group0()[2] * other.group1()[3]) - (self.group0()[0] * other.group3()[1])),
                    (-(self[e2] * other.group2()[3]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
                ])),
            // e15, e25, e35, e1234
            (-(swizzle!(self.group0(), 2, 0, 1, 3) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]))
                + (swizzle!(self.group0(), 0, 2, 2, 2) * Simd32x4::from([other.group3()[3], other.group2()[0], other.group3()[3], other.group0()[2]]))
                + (swizzle!(self.group0(), 1, 1, 0, 0) * Simd32x4::from([other.group2()[2], other.group3()[3], other.group2()[1], other.group0()[0]]))
                + Simd32x4::from([
                    ((self[e2] * other.group3()[0]) + (self[e2] * other.group1()[0])),
                    ((self[e2] * other.group3()[1]) + (self[e2] * other.group1()[1])),
                    ((self[e2] * other.group3()[2]) + (self[e2] * other.group1()[2])),
                    (self.group0()[1] * other.group0()[1]),
                ])),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[2]]))
                + (swizzle!(other.group1(), 1, 2, 0, 3) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self[e2]]))
                + Simd32x4::from([
                    (-(self[e2] * other.group0()[0]) + (self.group0()[3] * other.group2()[0])),
                    (-(self[e2] * other.group0()[1]) + (self.group0()[3] * other.group2()[1])),
                    (-(self[e2] * other.group0()[2]) + (self.group0()[3] * other.group2()[2])),
                    (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       35        0
    //    simd4       12       15        0
    // Totals...
    // yes simd       28       50        0
    //  no simd       64       95        0
    fn anti_sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[0])]),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[0] * -1.0)]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[2] * other.group0()[0]),
                (self[e2] * other.group0()[1]),
            ]),
            // e1, e2, e3, e4
            (self.group0() * Simd32x4::from(other.group0()[1])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       49        0
    //    simd4       12       13        0
    // Totals...
    // yes simd       32       62        0
    //  no simd       68      101        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0])),
                (-(self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
                (-(self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
                0.0,
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other.group0()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                ((self[e2] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       72        0
    //    simd4       13       14        0
    // Totals...
    // yes simd       49       86        0
    //  no simd       88      128        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0] * -1.0),
                (self.group0()[3] * other.group1()[1] * -1.0),
                (self.group0()[3] * other.group1()[2] * -1.0),
                ((self.group0()[3] * other.group1()[3]) + (self.group0()[2] * other.group1()[2]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                ((self.group0()[3] * other.group0()[0]) + (self.group0()[2] * other.group1()[1]) - (self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group1()[2])),
                ((self.group0()[3] * other.group0()[1]) - (self.group0()[2] * other.group1()[0]) + (self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group0()[3])),
                ((self.group0()[3] * other.group0()[2]) - (self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
                (self.group0()[3] * other.group1()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self[e2] * other.group1()[0]) - (self.group0()[2] * other.group0()[1]) + (self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[2])),
                ((self[e2] * other.group1()[1]) + (self.group0()[2] * other.group0()[0]) - (self.group0()[0] * other.group0()[2]) + (self.group0()[1] * other.group1()[3])),
                ((self[e2] * other.group1()[2]) + (self.group0()[2] * other.group1()[3]) + (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other.group0()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                ((self[e2] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       54        0
    //    simd4       13       15        0
    // Totals...
    // yes simd       41       69        0
    //  no simd       80      114        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            (-(swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group1()[2]]))
                + Simd32x4::from([
                    ((self[e2] * other.group0()[0]) + (self.group0()[1] * other.group1()[2])),
                    ((self[e2] * other.group0()[1]) + (self.group0()[2] * other.group1()[0])),
                    ((self[e2] * other.group0()[2]) + (self.group0()[0] * other.group1()[1])),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[3] * other.group1()[0]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[3] * other.group1()[1]) - (self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[3] * other.group1()[2]) + (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       56        0
    //    simd4       14       17        0
    // Totals...
    // yes simd       46       73        0
    //  no simd       88      124        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                (-(self.group0()[3] * other.group1()[3])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            ((Simd32x4::from(self[e2]) * other.group0()) - (swizzle!(self.group0(), 2, 0, 1, 2) * swizzle!(other.group1(), 1, 2, 0, 2))
                + Simd32x4::from([
                    ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group1()[2])),
                    ((self.group0()[2] * other.group1()[0]) + (self.group0()[1] * other.group1()[3])),
                    ((self.group0()[2] * other.group1()[3]) + (self.group0()[0] * other.group1()[1])),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[3] * other.group1()[0]) - (self.group0()[2] * other.group0()[1])
                    + (self.group0()[0] * other.group0()[3])
                    + (self.group0()[1] * other.group0()[2])),
                (-(self.group0()[3] * other.group1()[1]) + (self.group0()[2] * other.group0()[0]) - (self.group0()[0] * other.group0()[2])
                    + (self.group0()[1] * other.group0()[3])),
                (-(self.group0()[3] * other.group1()[2]) + (self.group0()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1])
                    - (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other.group0()[3]),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for RoundPoint {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       78      124        0
    //    simd2        4        4        0
    //    simd3       30       36        0
    //    simd4       20       20        0
    // Totals...
    // yes simd      132      184        0
    //  no simd      256      320        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from(self[e2]) * Simd32x2::from([other[e35], other.group1()[3]]))
                + (Simd32x2::from(self.group0()[3]) * Simd32x2::from([other.group8()[3], other[e1]]))
                + Simd32x2::from([
                    ((self.group0()[2] * other.group8()[2]) + (self.group0()[0] * other.group8()[0]) + (self.group0()[1] * other.group8()[1])),
                    (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e1, e2, e3, e4
            ((swizzle!(self.group0(), 0, 2, 2, 3) * Simd32x4::from([other.group0()[1], other.group5()[0], other.group0()[1], other.group5()[3]]))
                + (swizzle!(self.group0(), 1, 1, 0, 3) * Simd32x4::from([other.group5()[2], other.group0()[1], other.group5()[1], other.group0()[1]]))
                + Simd32x4::from([
                    ((self[e2] * other.group6()[0]) - (self.group0()[3] * other.group7()[0]) - (self.group0()[2] * other.group5()[1])),
                    ((self[e2] * other.group6()[1]) - (self.group0()[3] * other.group7()[1]) - (self.group0()[0] * other.group5()[2])),
                    ((self[e2] * other.group6()[2]) - (self.group0()[3] * other.group7()[2]) - (self.group0()[1] * other.group5()[0])),
                    ((self.group0()[2] * other.group6()[2]) + (self.group0()[0] * other.group6()[0]) + (self.group0()[1] * other.group6()[1])),
                ])),
            // e5
            (-(self[e2] * other.group5()[3]) + (self[e2] * other.group0()[1])
                - (self.group0()[2] * other.group7()[2])
                - (self.group0()[0] * other.group7()[0])
                - (self.group0()[1] * other.group7()[1])),
            // e15, e25, e35, e45
            ((other.group8() * Simd32x4::from([self[e2], self[e2], self[e2], self.group0()[3]]))
                + (swizzle!(self.group0(), 0, 2, 2, 2) * Simd32x4::from([other.group8()[3], other.group3()[0], other.group8()[3], other.group10()[0]]))
                + (swizzle!(self.group0(), 1, 1, 0, 0) * Simd32x4::from([other.group3()[2], other.group8()[3], other.group3()[1], other.group10()[2]]))
                + Simd32x4::from([
                    ((self[e2] * other.group10()[2]) - (self.group0()[2] * other.group3()[1])),
                    ((self[e2] * other.group10()[1]) - (self.group0()[0] * other.group3()[2])),
                    ((self[e2] * other.group10()[0]) - (self.group0()[1] * other.group3()[0])),
                    (-(self[e2] * other[e35]) + (self.group0()[1] * other.group10()[1])),
                ])),
            // e41, e42, e43
            ((Simd32x3::from(self.group0()[3]) * swizzle!(other.group10(), 2, 1, 0))
                - (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group8()[0], other.group8()[1], other.group8()[2]]))
                + (swizzle!(other.group4(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))
                - (Simd32x3::from(other[e35]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (swizzle!(other.group4(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))),
            // e415, e425, e435, e321
            ((Simd32x4::from(self[e2]) * Simd32x4::from([other.group6()[0], other.group6()[1], other.group6()[2], other.group1()[3]]))
                - (swizzle!(self.group0(), 2, 0, 1, 3) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other[e1]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group7()[0]) + (self.group0()[0] * other.group5()[3]) + (self.group0()[1] * other.group1()[2])),
                    ((self.group0()[3] * other.group7()[1]) + (self.group0()[2] * other.group1()[0]) + (self.group0()[1] * other.group5()[3])),
                    ((self.group0()[3] * other.group7()[2]) + (self.group0()[2] * other.group5()[3]) + (self.group0()[0] * other.group1()[1])),
                    (-(self.group0()[2] * other.group5()[2]) - (self.group0()[0] * other.group5()[0]) - (self.group0()[1] * other.group5()[1])),
                ])),
            // e423, e431, e412
            ((Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group5()[0], other.group5()[1], other.group5()[2]]))
                + (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (swizzle!(other.group6(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (swizzle!(other.group6(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))),
            // e235, e315, e125
            ((Simd32x3::from(self[e2]) * Simd32x3::from([other.group5()[0], other.group5()[1], other.group5()[2]]))
                - (Simd32x3::from(self[e2]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (swizzle!(other.group7(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (swizzle!(other.group7(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))),
            // e4235, e4315, e4125, e3215
            ((other.group3() * Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self[e2]]))
                - (swizzle!(self.group0(), 0, 2, 2, 2) * Simd32x4::from([other.group0()[0], other.group10()[2], other.group0()[0], other.group3()[2]]))
                - (swizzle!(self.group0(), 1, 1, 0, 0) * Simd32x4::from([other.group10()[0], other.group0()[0], other.group10()[1], other.group3()[0]]))
                + Simd32x4::from([
                    (-(self[e2] * other.group4()[0]) + (self.group0()[2] * other.group10()[1])),
                    (-(self[e2] * other.group4()[1]) + (self.group0()[0] * other.group10()[0])),
                    (-(self[e2] * other.group4()[2]) + (self.group0()[1] * other.group10()[2])),
                    ((self[e2] * other.group0()[0]) - (self.group0()[1] * other.group3()[1])),
                ])),
            // e1234
            (-(self.group0()[3] * other.group3()[3])
                + (self.group0()[3] * other.group0()[0])
                + (self.group0()[2] * other.group4()[2])
                + (self.group0()[0] * other.group4()[0])
                + (self.group0()[1] * other.group4()[1])),
            // e12, e31, e23
            ((Simd32x3::from(self[e2]) * swizzle!(other.group4(), 2, 1, 0))
                + (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group3()[2], other.group3()[1], other.group3()[0]]))
                - (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group0()[2], self.group0()[1], self.group0()[0]]))
                + Simd32x3::from([
                    (-(self.group0()[0] * other.group8()[1]) + (self.group0()[1] * other.group8()[0])),
                    (-(self.group0()[2] * other.group8()[0]) + (self.group0()[0] * other.group8()[2])),
                    ((self.group0()[2] * other.group8()[1]) - (self.group0()[1] * other.group8()[2])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       21       51        0
    //    simd4       13       14        0
    // Totals...
    // yes simd       34       65        0
    //  no simd       73      107        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                ((self.group0()[3] * other.group0()[3]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self[e2] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self[e2] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self[e2] * other.group0()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(0.0),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       26       45        0
    //    simd3        1        2        0
    //    simd4        7        8        0
    // Totals...
    // yes simd       34       55        0
    //  no simd       57       83        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = CircleRotor::from_groups(
            // e423, e431, e412
            (-(Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))),
            // e415, e425, e435, e321
            ((swizzle!(other.group0(), 2, 0, 1, 3) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self[e2]]))
                - (swizzle!(self.group0(), 2, 0, 1, 3) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other[e2]]))),
            // e235, e315, e125, e12345
            ((self.group0() * Simd32x4::from(other[e2])) - (swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([self[e2], self[e2], self[e2], self.group0()[2]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    ((self[e2] * other.group0()[3]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       14        0
    //    simd4        3        5        0
    // Totals...
    // yes simd        8       19        0
    //  no simd       17       34        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other[scalar]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self[e2]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e1234
            (self.group0()[3] * other[scalar]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       22       49        0
    //    simd4       14       15        0
    // Totals...
    // yes simd       36       64        0
    //  no simd       78      109        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (-(self.group0()[0] * other[e4315]) - (self.group0()[3] * other.group0()[0])),
                (-(self.group0()[1] * other[e4315]) - (self.group0()[3] * other.group0()[1])),
                (-(self.group0()[2] * other[e4315]) - (self.group0()[3] * other.group0()[2])),
                ((self[e2] * other[e4315])
                    + (self.group0()[3] * other.group0()[3])
                    + (self.group0()[2] * other.group0()[2])
                    + (self.group0()[0] * other.group0()[0])
                    + (self.group0()[1] * other.group0()[1])),
            ]),
            // e23, e31, e12, e45
            ((swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))
                - Simd32x4::from([
                    (self.group0()[1] * other.group0()[2]),
                    (self.group0()[2] * other.group0()[0]),
                    (self.group0()[0] * other.group0()[1]),
                    (self[e2] * other[e4315]),
                ])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self[e2] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self[e2] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self[e2] * other.group0()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(0.0),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       56        0
    //    simd4       24       28        0
    // Totals...
    // yes simd       56       84        0
    //  no simd      128      168        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((other.group3() * Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self[e2]]))
                + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                - (swizzle!(self.group0(), 0, 2, 2, 2) * Simd32x4::from([other.group3()[3], other.group0()[0], other.group3()[3], other.group3()[2]]))
                - (swizzle!(self.group0(), 1, 1, 0, 0) * Simd32x4::from([other.group0()[2], other.group3()[3], other.group0()[1], other.group3()[0]]))
                + (Simd32x4::from([1.0, 1.0, 1.0, -1.0])
                    * swizzle!(self.group0(), 2, 0, 1, 1)
                    * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[1]]))),
            // e415, e425, e435, e321
            ((Simd32x4::from(self[e2]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group3()[3]]))
                - (swizzle!(self.group0(), 2, 0, 1, 3) * Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group2()[3]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group2()[0]) + (self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group3()[2])),
                    ((self.group0()[3] * other.group2()[1]) + (self.group0()[2] * other.group3()[0]) + (self.group0()[1] * other.group1()[3])),
                    ((self.group0()[3] * other.group2()[2]) + (self.group0()[2] * other.group1()[3]) + (self.group0()[0] * other.group3()[1])),
                    (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e235, e315, e125, e5
            (-(Simd32x4::from(self[e2]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))
                + (Simd32x4::from(self[e2]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                - (swizzle!(self.group0(), 2, 0, 1, 2) * swizzle!(other.group2(), 1, 2, 0, 2))
                + Simd32x4::from([
                    ((self.group0()[0] * other.group2()[3]) + (self.group0()[1] * other.group2()[2])),
                    ((self.group0()[2] * other.group2()[0]) + (self.group0()[1] * other.group2()[3])),
                    ((self.group0()[2] * other.group2()[3]) + (self.group0()[0] * other.group2()[1])),
                    (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            ((other.group0() * Simd32x4::from([self[e2], self[e2], self[e2], self.group0()[3]]))
                + (swizzle!(self.group0(), 0, 2, 2, 3) * Simd32x4::from([other.group0()[3], other.group1()[0], other.group0()[3], other.group1()[3]]))
                + (swizzle!(self.group0(), 1, 1, 0, 2) * Simd32x4::from([other.group1()[2], other.group0()[3], other.group1()[1], other.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group0()[3] * other.group2()[0]) - (self.group0()[2] * other.group1()[1])),
                    (-(self.group0()[3] * other.group2()[1]) - (self.group0()[0] * other.group1()[2])),
                    (-(self.group0()[3] * other.group2()[2]) - (self.group0()[1] * other.group1()[0])),
                    ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       68        0
    //    simd4       23       24        0
    // Totals...
    // yes simd       59       92        0
    //  no simd      128      164        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                + (swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[2]]))
                + Simd32x4::from([
                    (-(self.group0()[3] * other.group3()[0]) - (self.group0()[0] * other.group2()[3]) - (self.group0()[1] * other.group0()[2])),
                    (-(self.group0()[3] * other.group3()[1]) - (self.group0()[2] * other.group0()[0]) - (self.group0()[1] * other.group2()[3])),
                    (-(self.group0()[3] * other.group3()[2]) - (self.group0()[2] * other.group2()[3]) - (self.group0()[0] * other.group0()[1])),
                    ((self[e2] * other.group2()[3]) + (self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group3()[1])),
                ])),
            // e23, e31, e12, e45
            ((Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                + (swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[2]]))
                + Simd32x4::from([
                    ((self[e2] * other.group0()[0]) - (self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group3()[2])),
                    ((self[e2] * other.group0()[1]) - (self.group0()[2] * other.group3()[0]) - (self.group0()[1] * other.group1()[3])),
                    ((self[e2] * other.group0()[2]) - (self.group0()[2] * other.group1()[3]) - (self.group0()[0] * other.group3()[1])),
                    (-(self[e2] * other.group2()[3]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
                ])),
            // e15, e25, e35, e1234
            (-(swizzle!(self.group0(), 2, 0, 1, 3) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]))
                + (swizzle!(self.group0(), 0, 2, 2, 3) * Simd32x4::from([other.group3()[3], other.group2()[0], other.group3()[3], other.group0()[3]]))
                + (swizzle!(self.group0(), 1, 1, 0, 2) * Simd32x4::from([other.group2()[2], other.group3()[3], other.group2()[1], other.group0()[2]]))
                + Simd32x4::from([
                    ((self[e2] * other.group3()[0]) + (self[e2] * other.group1()[0])),
                    ((self[e2] * other.group3()[1]) + (self[e2] * other.group1()[1])),
                    ((self[e2] * other.group3()[2]) + (self[e2] * other.group1()[2])),
                    ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group1(), 1, 2, 0, 3) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self[e2]]))
                - (swizzle!(self.group0(), 0, 2, 2, 2) * Simd32x4::from([other.group0()[3], other.group1()[0], other.group0()[3], other.group2()[2]]))
                - (swizzle!(self.group0(), 1, 1, 0, 0) * Simd32x4::from([other.group1()[2], other.group0()[3], other.group1()[1], other.group2()[0]]))
                + Simd32x4::from([
                    (-(self[e2] * other.group0()[0]) + (self.group0()[3] * other.group2()[0])),
                    (-(self[e2] * other.group0()[1]) + (self.group0()[3] * other.group2()[1])),
                    (-(self[e2] * other.group0()[2]) + (self.group0()[3] * other.group2()[2])),
                    ((self[e2] * other.group0()[3]) - (self.group0()[1] * other.group2()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl InfixAntiSandwich for Scalar {}
impl AntiSandwich<AntiScalar> for Scalar {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        3        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = Scalar::from_groups(/* scalar */ (self[scalar] * other[e12345]));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for Scalar {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        6        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0       10        0
    //  no simd        0       34        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = Dipole::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[scalar]) * other.group0()),
            // e23, e31, e12, e45
            (Simd32x4::from(self[scalar]) * other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e15, e25, e35
            (Simd32x3::from(self[scalar]) * other.group2()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for Scalar {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd4        0       11        0
    // Totals...
    // yes simd        0       14        0
    //  no simd        0       47        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self[scalar]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]])),
            // e23, e31, e12, e45
            (Simd32x4::from(self[scalar]) * other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e15, e25, e35, e1234
            Simd32x4::from([(self[scalar] * other.group2()[0]), (self[scalar] * other.group2()[1]), (self[scalar] * other.group2()[2]), 0.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(0.0),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for Scalar {
    type Output = Dipole;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        6        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0       10        0
    //  no simd        0       34        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = Circle::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[scalar]) * other.group0() * Simd32x3::from(-1.0)),
            // e415, e425, e435, e321
            (Simd32x4::from(self[scalar]) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e235, e315, e125
            (Simd32x3::from(self[scalar]) * other.group2() * Simd32x3::from(-1.0)),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for Scalar {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        6        0
    //    simd4        0       12        0
    // Totals...
    // yes simd        0       18        0
    //  no simd        0       54        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[scalar] * other.group0()[0] * -1.0),
                (self[scalar] * other.group0()[1] * -1.0),
                (self[scalar] * other.group0()[2] * -1.0),
                0.0,
            ]),
            // e415, e425, e435, e321
            (Simd32x4::from(self[scalar]) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e235, e315, e125, e5
            (Simd32x4::from(self[scalar]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]) * Simd32x4::from(-1.0)),
            // e1, e2, e3, e4
            (Simd32x4::from(self[scalar]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[3]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum> for Scalar {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd4        0        8        0
    // Totals...
    // yes simd        0       10        0
    //  no simd        0       34        0
    fn anti_sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (self[scalar] * other.group0()[1])]),
            // e23, e31, e12, e45
            Simd32x4::from(0.0),
            // e15, e25, e35, e1234
            Simd32x4::from(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([0.0, 0.0, 0.0, (self[scalar] * other.group0()[0])]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for Scalar {
    type Output = Dipole;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd3        0        4        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        7        0
    //  no simd        0       21        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = Circle::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self[scalar] * other.group0()[3])]),
            // e235, e315, e125
            (Simd32x3::from(self[scalar]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]) * Simd32x3::from(-1.0)),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for Scalar {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        4        0
    //    simd4        0        8        0
    // Totals...
    // yes simd        0       12        0
    //  no simd        0       36        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([0.0, 0.0, 0.0, (self[scalar] * other.group0()[3])]),
            // e235, e315, e125, e5
            (Simd32x4::from(self[scalar]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]) * Simd32x4::from(-1.0)),
            // e1, e2, e3, e4
            Simd32x4::from([(self[scalar] * other.group1()[0]), (self[scalar] * other.group1()[1]), (self[scalar] * other.group1()[2]), 0.0]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for Scalar {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd3        0        5        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0       10        0
    //  no simd        0       26        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            Simd32x4::from([(self[scalar] * other.group0()[0]), (self[scalar] * other.group0()[1]), (self[scalar] * other.group0()[2]), 0.0]),
            // e15, e25, e35
            (Simd32x3::from(self[scalar]) * other.group1()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for Scalar {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        8        0
    //    simd4        0        8        0
    // Totals...
    // yes simd        0       16        0
    //  no simd        0       40        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (self[scalar] * other.group0()[3])]),
            // e23, e31, e12, e45
            Simd32x4::from([(self[scalar] * other.group0()[0]), (self[scalar] * other.group0()[1]), (self[scalar] * other.group0()[2]), 0.0]),
            // e15, e25, e35, e1234
            Simd32x4::from([(self[scalar] * other.group1()[0]), (self[scalar] * other.group1()[1]), (self[scalar] * other.group1()[2]), 0.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([0.0, 0.0, 0.0, (self[scalar] * other.group1()[3])]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for Scalar {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        6        0
    //    simd2        0        4        0
    //    simd3        0       12        0
    //    simd4        0       16        0
    // Totals...
    // yes simd        0       38        0
    //  no simd        0      114        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from(self[scalar]) * swizzle!(other.group0(), 1, 0) * Simd32x2::from([1.0, -1.0])),
            // e1, e2, e3, e4
            (Simd32x4::from(self[scalar]) * Simd32x4::from([other.group8()[0], other.group8()[1], other.group8()[2], other[e35]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e5
            (self[scalar] * other.group8()[3] * -1.0),
            // e15, e25, e35, e45
            (Simd32x4::from(self[scalar]) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group5()[3]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e41, e42, e43
            (Simd32x3::from(self[scalar]) * other.group6()),
            // e415, e425, e435, e321
            (Simd32x4::from(self[scalar])
                * Simd32x4::from([other.group10()[2], other.group10()[1], other.group10()[0], other.group3()[3]])
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e423, e431, e412
            (Simd32x3::from(self[scalar]) * other.group4() * Simd32x3::from(-1.0)),
            // e235, e315, e125
            (Simd32x3::from(self[scalar]) * Simd32x3::from([other.group3()[0], other.group3()[1], other.group3()[2]]) * Simd32x3::from(-1.0)),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[scalar]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other[e1]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e1234
            (self[scalar] * other.group1()[3]),
            // e12, e31, e23
            (Simd32x3::from(self[scalar]) * Simd32x3::from([other.group5()[2], other.group5()[1], other.group5()[0]])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for Scalar {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        6        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        8        0
    //  no simd        0       14        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = RoundPoint::from_groups(
            // e1, e2, e3, e4
            Simd32x4::from([(self[scalar] * other.group0()[0]), (self[scalar] * other.group0()[1]), (self[scalar] * other.group0()[2]), 0.0]),
            // e5
            (self[scalar] * other.group0()[3] * -1.0),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for Scalar {
    type Output = RoundPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0        7        0
    //  no simd        0       19        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[scalar]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other[e2]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e1234
            (self[scalar] * other.group0()[3]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for Scalar {
    type Output = Scalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        3        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = AntiScalar::from_groups(/* e12345 */ (self[scalar] * other[scalar] * -1.0));
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for Scalar {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0        7        0
    //  no simd        0       19        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = RoundPoint::from_groups(
            // e1, e2, e3, e4
            (Simd32x4::from(self[scalar]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other[e4315]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e5
            (self[scalar] * other.group0()[3] * -1.0),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for Scalar {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0       14        0
    // no simd        0       56        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self[scalar]) * other.group0()),
            // e23, e31, e12, e45
            (Simd32x4::from(self[scalar]) * other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e15, e25, e35, e1234
            (Simd32x4::from(self[scalar]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]])),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[scalar]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[3]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for Scalar {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0       14        0
    // no simd        0       56        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from(self[scalar]) * other.group0() * Simd32x4::from(-1.0)),
            // e415, e425, e435, e321
            (Simd32x4::from(self[scalar]) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e235, e315, e125, e5
            (Simd32x4::from(self[scalar]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]) * Simd32x4::from(-1.0)),
            // e1, e2, e3, e4
            (Simd32x4::from(self[scalar]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[3]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl InfixAntiSandwich for Sphere {}
impl AntiSandwich<AntiScalar> for Sphere {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        4        0
    //    simd3        1        2        0
    //    simd4        3        5        0
    // Totals...
    // yes simd        6       11        0
    //  no simd       17       30        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            (self.group0() * Simd32x4::from(other[e12345])),
            // e1234
            (self[e4315] * other[e12345]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       48        0
    //    simd3        2        3        0
    //    simd4       17       18        0
    // Totals...
    // yes simd       39       69        0
    //  no simd       94      129        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from(self[e4315]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                - (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
            // e23, e31, e12, e45
            (-(swizzle!(self.group0(), 0, 1, 2, 2) * swizzle!(other.group1(), 3, 3, 3, 2))
                + Simd32x4::from([
                    ((self[e4315] * other.group2()[0]) + (self.group0()[3] * other.group0()[0])),
                    ((self[e4315] * other.group2()[1]) + (self.group0()[3] * other.group0()[1])),
                    ((self[e4315] * other.group2()[2]) + (self.group0()[3] * other.group0()[2])),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e15, e25, e35, e1234
            ((other.group1() * Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self[e4315]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[2]]))
                + Simd32x4::from([
                    (self.group0()[2] * other.group2()[1]),
                    (self.group0()[0] * other.group2()[2]),
                    (self.group0()[1] * other.group2()[0]),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[2]]))
                + Simd32x4::from([
                    ((self[e4315] * other.group2()[0]) - (self.group0()[2] * other.group1()[1])),
                    ((self[e4315] * other.group2()[1]) - (self.group0()[0] * other.group1()[2])),
                    ((self[e4315] * other.group2()[2]) - (self.group0()[1] * other.group1()[0])),
                    ((self.group0()[0] * other.group2()[0]) + (self.group0()[1] * other.group2()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       37        0
    //    simd3        2        3        0
    //    simd4       20       23        0
    // Totals...
    // yes simd       38       63        0
    //  no simd      102      138        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            ((Simd32x3::from(self[e4315]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                - (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))),
            // e23, e31, e12, e45
            (-(swizzle!(self.group0(), 0, 1, 2, 2) * swizzle!(other.group1(), 3, 3, 3, 2))
                + Simd32x4::from([
                    ((self[e4315] * other.group2()[0]) + (self.group0()[3] * other.group0()[0])),
                    ((self[e4315] * other.group2()[1]) + (self.group0()[3] * other.group0()[1])),
                    ((self[e4315] * other.group2()[2]) + (self.group0()[3] * other.group0()[2])),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e15, e25, e35, e1234
            ((other.group1() * Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self[e4315]]))
                - (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[2]]))
                + (swizzle!(other.group2(), 1, 2, 0, 3) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self[e4315]]))
                + Simd32x4::from([0.0, 0.0, 0.0, (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1]))])),
            // e4235, e4315, e4125, e3215
            ((other.group2() * Simd32x4::from([self[e4315], self[e4315], self[e4315], self.group0()[3]]))
                - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (swizzle!(self.group0(), 0, 2, 2, 2) * Simd32x4::from([other.group2()[3], other.group1()[0], other.group2()[3], other.group2()[2]]))
                + (swizzle!(self.group0(), 1, 1, 0, 0) * Simd32x4::from([other.group1()[2], other.group2()[3], other.group1()[1], other.group2()[0]]))
                + (Simd32x4::from([-1.0, -1.0, -1.0, 1.0])
                    * swizzle!(self.group0(), 2, 0, 1, 1)
                    * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[1]]))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       27       54        0
    //    simd4       18       20        0
    // Totals...
    // yes simd       45       74        0
    //  no simd       99      134        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (-(self[e4315] * other.group1()[0]) - (self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                (-(self[e4315] * other.group1()[1]) + (self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self[e4315] * other.group1()[2]) - (self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                0.0,
            ]),
            // e415, e425, e435, e321
            (-(swizzle!(self.group0(), 0, 1, 2, 2) * swizzle!(other.group1(), 3, 3, 3, 2))
                - (swizzle!(self.group0(), 3, 3, 3, 0) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]))
                - Simd32x4::from([
                    (self[e4315] * other.group2()[0]),
                    (self[e4315] * other.group2()[1]),
                    (self[e4315] * other.group2()[2]),
                    (self.group0()[1] * other.group1()[1]),
                ])),
            // e235, e315, e125, e5
            (-(Simd32x4::from(self.group0()[3]) * other.group1())
                - (swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group2()[2]]))
                + Simd32x4::from([
                    (self.group0()[1] * other.group2()[2]),
                    (self.group0()[2] * other.group2()[0]),
                    (self.group0()[0] * other.group2()[1]),
                    (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            ((Simd32x4::from(self[e4315]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))
                + (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group0()[3] * other.group0()[0]) - (self.group0()[2] * other.group1()[1])),
                    (-(self.group0()[3] * other.group0()[1]) - (self.group0()[0] * other.group1()[2])),
                    (-(self.group0()[3] * other.group0()[2]) - (self.group0()[1] * other.group1()[0])),
                    ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       23       44        0
    //    simd4       25       30        0
    // Totals...
    // yes simd       48       74        0
    //  no simd      123      164        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((swizzle!(other.group3(), 0, 1, 2, 2) * Simd32x4::from([self[e4315], self[e4315], self[e4315], self.group0()[2]]))
                - (Simd32x4::from(self[e4315]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                + (swizzle!(self.group0(), 2, 0, 1, 0) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]))
                - (swizzle!(self.group0(), 0, 2, 2, 3) * Simd32x4::from([other.group2()[3], other.group0()[0], other.group2()[3], other.group2()[3]]))
                + (Simd32x4::from([-1.0, -1.0, -1.0, 1.0])
                    * swizzle!(self.group0(), 1, 1, 0, 1)
                    * Simd32x4::from([other.group0()[2], other.group2()[3], other.group0()[1], other.group3()[1]]))),
            // e415, e425, e435, e321
            (-(other.group2() * Simd32x4::from([self[e4315], self[e4315], self[e4315], self.group0()[3]]))
                - (swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]))
                + (swizzle!(other.group3(), 1, 2, 0, 3) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self[e4315]]))
                - (swizzle!(self.group0(), 0, 2, 2, 0) * Simd32x4::from([other.group1()[3], other.group3()[0], other.group1()[3], other.group1()[0]]))
                - (swizzle!(self.group0(), 1, 1, 0, 1) * Simd32x4::from([other.group3()[2], other.group1()[3], other.group3()[1], other.group1()[1]]))),
            // e235, e315, e125, e5
            (-(Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))
                - (swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[2]]))
                - (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group2(), 1, 2, 0, 0))
                + Simd32x4::from([
                    ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group2()[2])),
                    ((self.group0()[2] * other.group2()[0]) + (self.group0()[1] * other.group3()[3])),
                    ((self.group0()[2] * other.group3()[3]) + (self.group0()[0] * other.group2()[1])),
                    ((self.group0()[1] * other.group2()[1]) * -1.0),
                ])),
            // e1, e2, e3, e4
            ((Simd32x4::from(self[e4315]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))
                + (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group0()[3] * other.group0()[0]) - (self.group0()[2] * other.group1()[1])),
                    (-(self.group0()[3] * other.group0()[1]) - (self.group0()[0] * other.group1()[2])),
                    (-(self.group0()[3] * other.group0()[2]) - (self.group0()[1] * other.group1()[0])),
                    ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       34        0
    //    simd4       13       16        0
    // Totals...
    // yes simd       25       50        0
    //  no simd       64       98        0
    fn anti_sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([0.0, 0.0, 0.0, (self[e4315] * other.group0()[0])]),
            // e23, e31, e12, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self[e4315] * other.group0()[0])]),
            // e15, e25, e35, e1234
            (Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[2] * other.group0()[0]),
                (self[e4315] * other.group0()[1]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e4235, e4315, e4125, e3215
            (self.group0() * Simd32x4::from(other.group0()[1])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       21       40        0
    //    simd4       13       16        0
    // Totals...
    // yes simd       34       56        0
    //  no simd       73      104        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(0.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[3]) - (self[e4315] * other.group0()[0])),
                (-(self.group0()[1] * other.group0()[3]) - (self[e4315] * other.group0()[1])),
                (-(self.group0()[2] * other.group0()[3]) - (self[e4315] * other.group0()[2])),
                0.0,
            ]),
            // e235, e315, e125, e5
            (-(swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))
                + Simd32x4::from([
                    (self.group0()[1] * other.group0()[2]),
                    (self.group0()[2] * other.group0()[0]),
                    (self.group0()[0] * other.group0()[1]),
                    (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e1, e2, e3, e4
            (Simd32x4::from(self[e4315]) * other.group0()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       56        0
    //    simd4       14       17        0
    // Totals...
    // yes simd       46       73        0
    //  no simd       88      124        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e4315] * other.group1()[0]),
                (self[e4315] * other.group1()[1]),
                (self[e4315] * other.group1()[2]),
                (-(self[e4315] * other.group1()[3]) + (self.group0()[2] * other.group1()[2]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self[e4315] * other.group0()[0]) + (self.group0()[2] * other.group1()[1]) - (self.group0()[0] * other.group0()[3]) - (self.group0()[1] * other.group1()[2])),
                (-(self[e4315] * other.group0()[1]) - (self.group0()[2] * other.group1()[0]) + (self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group0()[3])),
                (-(self[e4315] * other.group0()[2]) - (self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
                (self[e4315] * other.group1()[3]),
            ]),
            // e235, e315, e125, e5
            (-(Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                - (swizzle!(self.group0(), 2, 0, 1, 2) * swizzle!(other.group0(), 1, 2, 0, 2))
                + Simd32x4::from([
                    ((self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[2])),
                    ((self.group0()[2] * other.group0()[0]) + (self.group0()[1] * other.group1()[3])),
                    ((self.group0()[2] * other.group1()[3]) + (self.group0()[0] * other.group0()[1])),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e1, e2, e3, e4
            (Simd32x4::from(self[e4315]) * other.group0()),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       23       50        0
    //    simd3        0        1        0
    //    simd4       13       14        0
    // Totals...
    // yes simd       36       65        0
    //  no simd       75      109        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[e4315]) * other.group0()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e4315] * other.group1()[0]),
                (self[e4315] * other.group1()[1]),
                (self[e4315] * other.group1()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[3] * other.group0()[0]) - (self.group0()[1] * other.group1()[2]) + (self.group0()[2] * other.group1()[1])),
                ((self.group0()[3] * other.group0()[1]) + (self.group0()[0] * other.group1()[2]) - (self.group0()[2] * other.group1()[0])),
                ((self.group0()[3] * other.group0()[2]) - (self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            ((swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self[e4315] * other.group1()[0]) - (self.group0()[2] * other.group0()[1])),
                    ((self[e4315] * other.group1()[1]) - (self.group0()[0] * other.group0()[2])),
                    ((self[e4315] * other.group1()[2]) - (self.group0()[1] * other.group0()[0])),
                    ((self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       48        0
    //    simd4       16       20        0
    // Totals...
    // yes simd       40       68        0
    //  no simd       88      128        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from(self[e4315]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e4315] * other.group1()[0]),
                (self[e4315] * other.group1()[1]),
                (self[e4315] * other.group1()[2]),
                ((self[e4315] * other.group1()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group0()[3] * other.group0()[0]) + (self.group0()[2] * other.group1()[1]) - (self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group1()[2])),
                ((self.group0()[3] * other.group0()[1]) - (self.group0()[2] * other.group1()[0]) + (self.group0()[0] * other.group1()[2]) - (self.group0()[1] * other.group1()[3])),
                ((self.group0()[3] * other.group0()[2]) - (self.group0()[2] * other.group1()[3]) - (self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
                (self[e4315] * other.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group1(), 0, 1, 2, 2) * Simd32x4::from([self[e4315], self[e4315], self[e4315], self.group0()[2]]))
                + (swizzle!(self.group0(), 0, 2, 2, 3) * swizzle!(other.group0(), 3, 0, 3, 3))
                + (swizzle!(self.group0(), 1, 1, 0, 0) * Simd32x4::from([other.group0()[2], other.group0()[3], other.group0()[1], other.group1()[0]]))
                + (Simd32x4::from([-1.0, -1.0, -1.0, 1.0])
                    * swizzle!(self.group0(), 2, 0, 1, 1)
                    * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[1]]))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for Sphere {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       64      112        0
    //    simd2        6        6        0
    //    simd3       28       32        0
    //    simd4       24       25        0
    // Totals...
    // yes simd      122      175        0
    //  no simd      256      320        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group1()[2], other.group8()[2]]))
                + (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group1()[0], other.group8()[0]]))
                + (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group1()[1], other.group8()[1]]))
                + Simd32x2::from([
                    ((self[e4315] * other[e1]) + (self.group0()[3] * other.group1()[3])),
                    (-(self[e4315] * other.group8()[3]) - (self.group0()[3] * other[e35])),
                ])),
            // e1, e2, e3, e4
            ((Simd32x4::from(self[e4315]) * other.group3())
                + (swizzle!(self.group0(), 0, 2, 2, 2) * Simd32x4::from([other.group0()[0], other.group10()[2], other.group0()[0], other.group4()[2]]))
                + (swizzle!(self.group0(), 1, 1, 0, 0) * Simd32x4::from([other.group10()[0], other.group0()[0], other.group10()[1], other.group4()[0]]))
                + Simd32x4::from([
                    (-(self.group0()[3] * other.group4()[0]) - (self.group0()[2] * other.group10()[1])),
                    (-(self.group0()[3] * other.group4()[1]) - (self.group0()[0] * other.group10()[0])),
                    (-(self.group0()[3] * other.group4()[2]) - (self.group0()[1] * other.group10()[2])),
                    (-(self[e4315] * other.group0()[0]) + (self.group0()[1] * other.group4()[1])),
                ])),
            // e5
            (-(self.group0()[3] * other.group3()[3])
                - (self.group0()[3] * other.group0()[0])
                - (self.group0()[2] * other.group3()[2])
                - (self.group0()[0] * other.group3()[0])
                - (self.group0()[1] * other.group3()[1])),
            // e15, e25, e35, e45
            (-(Simd32x4::from(self.group0()[3]) * other.group1())
                - (swizzle!(self.group0(), 0, 2, 2, 2) * Simd32x4::from([other[e1], other.group7()[0], other[e1], other.group5()[2]]))
                - (swizzle!(self.group0(), 1, 1, 0, 0) * Simd32x4::from([other.group7()[2], other[e1], other.group7()[1], other.group5()[0]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group5()[0]) + (self.group0()[2] * other.group7()[1])),
                    ((self.group0()[3] * other.group5()[1]) + (self.group0()[0] * other.group7()[2])),
                    ((self.group0()[3] * other.group5()[2]) + (self.group0()[1] * other.group7()[0])),
                    ((self[e4315] * other[e1]) - (self.group0()[1] * other.group5()[1])),
                ])),
            // e41, e42, e43
            ((Simd32x3::from(self[e4315]) * Simd32x3::from([other.group5()[0], other.group5()[1], other.group5()[2]]))
                + (Simd32x3::from(self[e4315]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (swizzle!(other.group6(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (swizzle!(other.group6(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))),
            // e415, e425, e435, e321
            (-(Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[2], other[e35]]))
                + (swizzle!(other.group8(), 1, 2, 0, 3) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self[e4315]]))
                - (swizzle!(self.group0(), 0, 2, 2, 2) * Simd32x4::from([other.group3()[3], other.group8()[0], other.group3()[3], other.group10()[0]]))
                - (swizzle!(self.group0(), 1, 1, 0, 0) * Simd32x4::from([other.group8()[2], other.group3()[3], other.group8()[1], other.group10()[2]]))
                - Simd32x4::from([
                    (self[e4315] * other.group3()[0]),
                    (self[e4315] * other.group3()[1]),
                    (self[e4315] * other.group3()[2]),
                    (self.group0()[1] * other.group10()[1]),
                ])),
            // e423, e431, e412
            (-(Simd32x3::from(self[e4315]) * swizzle!(other.group10(), 2, 1, 0))
                + (Simd32x3::from(self[e4315]) * Simd32x3::from([other.group8()[0], other.group8()[1], other.group8()[2]]))
                + (swizzle!(other.group4(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))
                - (Simd32x3::from(other[e35]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                - (swizzle!(other.group4(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))),
            // e235, e315, e125
            (-(Simd32x3::from(self.group0()[3]) * swizzle!(other.group10(), 2, 1, 0))
                - (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group8()[0], other.group8()[1], other.group8()[2]]))
                + (Simd32x3::from(other.group8()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + Simd32x3::from([
                    (-(self.group0()[2] * other.group3()[1]) + (self.group0()[1] * other.group3()[2])),
                    ((self.group0()[2] * other.group3()[0]) - (self.group0()[0] * other.group3()[2])),
                    ((self.group0()[0] * other.group3()[1]) - (self.group0()[1] * other.group3()[0])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group6()[0], other.group6()[1], other.group6()[2], other.group5()[3]]))
                + (swizzle!(self.group0(), 0, 2, 2, 3) * Simd32x4::from([other.group0()[1], other.group5()[0], other.group0()[1], other.group0()[1]]))
                + (swizzle!(self.group0(), 1, 1, 0, 2) * Simd32x4::from([other.group5()[2], other.group0()[1], other.group5()[1], other.group7()[2]]))
                + Simd32x4::from([
                    ((self[e4315] * other.group7()[0]) - (self.group0()[2] * other.group5()[1])),
                    ((self[e4315] * other.group7()[1]) - (self.group0()[0] * other.group5()[2])),
                    ((self[e4315] * other.group7()[2]) - (self.group0()[1] * other.group5()[0])),
                    ((self.group0()[0] * other.group7()[0]) + (self.group0()[1] * other.group7()[1])),
                ])),
            // e1234
            ((self[e4315] * other.group5()[3]) + (self[e4315] * other.group0()[1])
                - (self.group0()[2] * other.group6()[2])
                - (self.group0()[0] * other.group6()[0])
                - (self.group0()[1] * other.group6()[1])),
            // e12, e31, e23
            ((Simd32x3::from(self[e4315]) * swizzle!(other.group7(), 2, 1, 0)) + (Simd32x3::from(self.group0()[3]) * swizzle!(other.group6(), 2, 1, 0))
                - (Simd32x3::from(other.group5()[3]) * Simd32x3::from([self.group0()[2], self.group0()[1], self.group0()[0]]))
                + Simd32x3::from([
                    (-(self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])),
                    (-(self.group0()[2] * other.group1()[0]) + (self.group0()[0] * other.group1()[2])),
                    ((self.group0()[2] * other.group1()[1]) - (self.group0()[1] * other.group1()[2])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for Sphere {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       26        0
    //    simd3        2        4        0
    //    simd4        9       11        0
    // Totals...
    // yes simd       21       41        0
    //  no simd       52       82        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = CircleRotor::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[e4315]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (-(self.group0()[1] * other.group0()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group0()[2]) - (self.group0()[2] * other.group0()[0])),
                (-(self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (self[e4315] * other.group0()[3]),
            ]),
            // e235, e315, e125, e12345
            ((swizzle!(self.group0(), 0, 1, 2, 2) * swizzle!(other.group0(), 3, 3, 3, 2))
                - (other.group0() * Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self[e4315]]))
                + Simd32x4::from([0.0, 0.0, 0.0, ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1]))])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       41        0
    //    simd4       16       17        0
    // Totals...
    // yes simd       33       58        0
    //  no simd       81      109        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((self.group0() * Simd32x4::from(other.group0()[3]))
                + (Simd32x4::from(self[e4315]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other[e2]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
            // e23, e31, e12, e45
            (-(swizzle!(self.group0(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))
                + Simd32x4::from([
                    (self.group0()[2] * other.group0()[1]),
                    (self.group0()[0] * other.group0()[2]),
                    (self.group0()[1] * other.group0()[0]),
                    (self[e4315] * other[e2]),
                ])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group0()[0] * other[e2]) - (self.group0()[3] * other.group0()[0])),
                (-(self.group0()[1] * other[e2]) - (self.group0()[3] * other.group0()[1])),
                (-(self.group0()[2] * other[e2]) - (self.group0()[3] * other.group0()[2])),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(0.0),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       23        0
    //    simd4        1        3        0
    // Totals...
    // yes simd       11       26        0
    //  no simd       14       35        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = RoundPoint::from_groups(
            // e1, e2, e3, e4
            (Simd32x4::from(other[scalar]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self[e4315]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e5
            (self.group0()[3] * other[scalar] * -1.0),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for Sphere {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       20        0
    //    simd3        3        5        0
    //    simd4       10       13        0
    // Totals...
    // yes simd       21       38        0
    //  no simd       57       87        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = CircleRotor::from_groups(
            // e423, e431, e412
            (-(Simd32x3::from(other[e4315]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self[e4315]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))),
            // e415, e425, e435, e321
            (-(swizzle!(self.group0(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other[e4315]]))
                + (swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self[e4315]]))),
            // e235, e315, e125, e12345
            ((swizzle!(self.group0(), 0, 1, 2, 2) * swizzle!(other.group0(), 3, 3, 3, 2))
                - (other.group0() * Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self[e4315]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    (-(self.group0()[3] * other[e4315]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       48        0
    //    simd4       27       30        0
    // Totals...
    // yes simd       47       78        0
    //  no simd      128      168        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((Simd32x4::from(self[e4315]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[3]]))
                + (swizzle!(self.group0(), 0, 2, 2, 3) * Simd32x4::from([other.group3()[3], other.group0()[0], other.group3()[3], other.group3()[3]]))
                + (swizzle!(self.group0(), 1, 1, 0, 2) * Simd32x4::from([other.group0()[2], other.group3()[3], other.group0()[1], other.group3()[2]]))
                + Simd32x4::from([
                    ((self[e4315] * other.group1()[0]) - (self.group0()[2] * other.group0()[1])),
                    ((self[e4315] * other.group1()[1]) - (self.group0()[0] * other.group0()[2])),
                    ((self[e4315] * other.group1()[2]) - (self.group0()[1] * other.group0()[0])),
                    ((self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group3()[1])),
                ])),
            // e23, e31, e12, e45
            ((Simd32x4::from(self[e4315]) * other.group2())
                - (swizzle!(self.group0(), 0, 2, 2, 3) * Simd32x4::from([other.group1()[3], other.group3()[0], other.group1()[3], other.group3()[3]]))
                - (swizzle!(self.group0(), 1, 1, 0, 2) * Simd32x4::from([other.group3()[2], other.group1()[3], other.group3()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group0()[3] * other.group0()[0]) + (self.group0()[2] * other.group3()[1])),
                    ((self.group0()[3] * other.group0()[1]) + (self.group0()[0] * other.group3()[2])),
                    ((self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group3()[0])),
                    (-(self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ])),
            // e15, e25, e35, e1234
            (-(swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group0()[2]]))
                + (other.group1() * Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self[e4315]]))
                - (swizzle!(self.group0(), 0, 2, 2, 0) * Simd32x4::from([other.group2()[3], other.group2()[0], other.group2()[3], other.group0()[0]]))
                - (swizzle!(self.group0(), 1, 1, 0, 1) * Simd32x4::from([other.group2()[2], other.group2()[3], other.group2()[1], other.group0()[1]]))
                + Simd32x4::from([
                    (self.group0()[2] * other.group2()[1]),
                    (self.group0()[0] * other.group2()[2]),
                    (self.group0()[1] * other.group2()[0]),
                    (self[e4315] * other.group0()[3]),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group2(), 0, 1, 2, 2) * Simd32x4::from([self[e4315], self[e4315], self[e4315], self.group0()[2]]))
                - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (swizzle!(self.group0(), 0, 2, 2, 3) * Simd32x4::from([other.group0()[3], other.group1()[0], other.group0()[3], other.group0()[3]]))
                + (swizzle!(self.group0(), 1, 1, 0, 0) * Simd32x4::from([other.group1()[2], other.group0()[3], other.group1()[1], other.group2()[0]]))
                + (Simd32x4::from([-1.0, -1.0, -1.0, 1.0])
                    * swizzle!(self.group0(), 2, 0, 1, 1)
                    * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group2()[1]]))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       36        0
    //    simd4       27       34        0
    // Totals...
    // yes simd       47       70        0
    //  no simd      128      172        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((swizzle!(other.group3(), 0, 1, 2, 2) * Simd32x4::from([self[e4315], self[e4315], self[e4315], self.group0()[2]]))
                - (Simd32x4::from(self[e4315]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                + (swizzle!(self.group0(), 2, 0, 1, 0) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[0]]))
                - (swizzle!(self.group0(), 0, 2, 2, 3) * Simd32x4::from([other.group2()[3], other.group0()[0], other.group2()[3], other.group2()[3]]))
                + (Simd32x4::from([-1.0, -1.0, -1.0, 1.0])
                    * swizzle!(self.group0(), 1, 1, 0, 1)
                    * Simd32x4::from([other.group0()[2], other.group2()[3], other.group0()[1], other.group3()[1]]))),
            // e415, e425, e435, e321
            (-(other.group2() * Simd32x4::from([self[e4315], self[e4315], self[e4315], self.group0()[3]]))
                - (swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]))
                + (swizzle!(other.group3(), 1, 2, 0, 3) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self[e4315]]))
                - (swizzle!(self.group0(), 0, 2, 2, 0) * Simd32x4::from([other.group1()[3], other.group3()[0], other.group1()[3], other.group1()[0]]))
                - (swizzle!(self.group0(), 1, 1, 0, 1) * Simd32x4::from([other.group3()[2], other.group1()[3], other.group3()[1], other.group1()[1]]))),
            // e235, e315, e125, e5
            (-(Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))
                - (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                - (swizzle!(self.group0(), 2, 0, 1, 2) * swizzle!(other.group2(), 1, 2, 0, 2))
                + Simd32x4::from([
                    ((self.group0()[0] * other.group3()[3]) + (self.group0()[1] * other.group2()[2])),
                    ((self.group0()[2] * other.group2()[0]) + (self.group0()[1] * other.group3()[3])),
                    ((self.group0()[2] * other.group3()[3]) + (self.group0()[0] * other.group2()[1])),
                    (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            ((Simd32x4::from(self[e4315]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))
                - (other.group0() * Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self[e4315]]))
                + (swizzle!(self.group0(), 0, 2, 2, 2) * Simd32x4::from([other.group0()[3], other.group1()[0], other.group0()[3], other.group0()[2]]))
                + (swizzle!(self.group0(), 1, 1, 0, 0) * Simd32x4::from([other.group1()[2], other.group0()[3], other.group1()[1], other.group0()[0]]))
                + (Simd32x4::from([-1.0, -1.0, -1.0, 1.0])
                    * swizzle!(self.group0(), 2, 0, 1, 1)
                    * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[1]]))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl InfixAntiSandwich for VersorEven {}
impl AntiSandwich<AntiScalar> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       76       98        0
    //    simd4       41       46        0
    // Totals...
    // yes simd      117      144        0
    //  no simd      240      282        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (self.group0() * Simd32x4::from(other[e12345])),
            // e415, e425, e435, e321
            (self.group1() * Simd32x4::from(other[e12345])),
            // e235, e315, e125, e5
            (self.group2() * Simd32x4::from(other[e12345])),
            // e1, e2, e3, e4
            (self.group3() * Simd32x4::from(other[e12345])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      152      190        0
    //    simd4       58       59        0
    // Totals...
    // yes simd      210      249        0
    //  no simd      384      426        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((other.group1() * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group1()[3]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group1()[3], self.group2()[2]]))
                - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group3()[2], self.group1()[1], self.group2()[0]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group1()[2], self.group1()[3], self.group3()[0], self.group2()[1]]))
                - (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group3()[2] * other.group0()[1])
                        + (self.group1()[1] * other.group0()[2])
                        + (self.group0()[3] * other.group0()[0])
                        + (self.group0()[0] * other.group1()[3])
                        + (self.group0()[1] * other.group1()[2])),
                    ((self.group3()[0] * other.group0()[2])
                        + (self.group1()[2] * other.group0()[0])
                        + (self.group0()[3] * other.group0()[1])
                        + (self.group0()[2] * other.group1()[0])
                        + (self.group0()[1] * other.group1()[3])),
                    ((self.group3()[1] * other.group0()[0])
                        + (self.group1()[0] * other.group0()[1])
                        + (self.group0()[3] * other.group0()[2])
                        + (self.group0()[2] * other.group1()[3])
                        + (self.group0()[0] * other.group1()[1])),
                    (-(self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e321
            ((Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[3]]))
                - (swizzle!(self.group2(), 2, 0, 1, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[2]]))
                - (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[2]]))
                + (swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[2]]))
                + (swizzle!(self.group0(), 1, 2, 0, 0) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group2()[0]]))
                + Simd32x4::from([
                    ((self.group3()[3] * other.group2()[0])
                        + (self.group2()[3] * other.group0()[0])
                        + (self.group2()[1] * other.group0()[2])
                        + (self.group1()[1] * other.group1()[2])
                        - (self.group0()[2] * other.group2()[1])),
                    ((self.group3()[3] * other.group2()[1])
                        + (self.group2()[3] * other.group0()[1])
                        + (self.group2()[2] * other.group0()[0])
                        + (self.group1()[2] * other.group1()[0])
                        - (self.group0()[0] * other.group2()[2])),
                    ((self.group3()[3] * other.group2()[2])
                        + (self.group2()[3] * other.group0()[2])
                        + (self.group2()[0] * other.group0()[1])
                        + (self.group1()[0] * other.group1()[1])
                        - (self.group0()[1] * other.group2()[0])),
                    (-(self.group3()[1] * other.group1()[1])
                        - (self.group3()[0] * other.group1()[0])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        + (self.group0()[1] * other.group2()[1])),
                ])),
            // e235, e315, e125, e5
            (-(swizzle!(self.group3(), 2, 0, 1, 2) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group2()[2]]))
                - (swizzle!(self.group2(), 2, 1, 2, 3) * swizzle!(other.group1(), 1, 3, 3, 3))
                - (swizzle!(self.group2(), 0, 0, 1, 2) * swizzle!(other.group1(), 3, 2, 0, 2))
                - (swizzle!(self.group1(), 2, 0, 1, 2) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group2()[2]]))
                + Simd32x4::from([
                    ((self.group3()[1] * other.group2()[2])
                        + (self.group2()[3] * other.group1()[0])
                        + (self.group2()[1] * other.group1()[2])
                        + (self.group1()[3] * other.group2()[0])
                        + (self.group0()[3] * other.group2()[0])
                        + (self.group1()[1] * other.group2()[2])),
                    ((self.group3()[2] * other.group2()[0])
                        + (self.group2()[3] * other.group1()[1])
                        + (self.group2()[2] * other.group1()[0])
                        + (self.group1()[3] * other.group2()[1])
                        + (self.group1()[2] * other.group2()[0])
                        + (self.group0()[3] * other.group2()[1])),
                    ((self.group3()[0] * other.group2()[1])
                        + (self.group2()[3] * other.group1()[2])
                        + (self.group2()[0] * other.group1()[1])
                        + (self.group1()[3] * other.group2()[2])
                        + (self.group0()[3] * other.group2()[2])
                        + (self.group1()[0] * other.group2()[1])),
                    (-(self.group3()[1] * other.group2()[1])
                        - (self.group3()[0] * other.group2()[0])
                        - (self.group2()[1] * other.group1()[1])
                        - (self.group2()[0] * other.group1()[0])
                        - (self.group1()[0] * other.group2()[0])
                        - (self.group1()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group0()[2]]))
                + (swizzle!(self.group3(), 1, 2, 0, 3) * swizzle!(other.group1(), 2, 0, 1, 3))
                - (swizzle!(self.group0(), 1, 2, 0, 0) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[0]]))
                + Simd32x4::from([
                    (-(self.group3()[3] * other.group2()[0]) + (self.group2()[3] * other.group0()[0]) - (self.group2()[2] * other.group0()[1])
                        + (self.group2()[1] * other.group0()[2])
                        + (self.group1()[3] * other.group1()[0])
                        + (self.group1()[0] * other.group1()[3])
                        + (self.group0()[2] * other.group2()[1])),
                    (-(self.group3()[3] * other.group2()[1]) + (self.group2()[3] * other.group0()[1]) + (self.group2()[2] * other.group0()[0])
                        - (self.group2()[0] * other.group0()[2])
                        + (self.group1()[3] * other.group1()[1])
                        + (self.group1()[1] * other.group1()[3])
                        + (self.group0()[0] * other.group2()[2])),
                    (-(self.group3()[3] * other.group2()[2]) + (self.group2()[3] * other.group0()[2]) - (self.group2()[1] * other.group0()[0])
                        + (self.group2()[0] * other.group0()[1])
                        + (self.group1()[3] * other.group1()[2])
                        + (self.group1()[2] * other.group1()[3])
                        + (self.group0()[1] * other.group2()[0])),
                    ((self.group3()[2] * other.group0()[2]) + (self.group3()[1] * other.group0()[1]) + (self.group3()[0] * other.group0()[0])
                        - (self.group1()[2] * other.group0()[2])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      148      186        0
    //    simd4       63       64        0
    // Totals...
    // yes simd      211      250        0
    //  no simd      400      442        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((other.group1() * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group1()[3]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group1()[3], self.group2()[2]]))
                - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group3()[2], self.group1()[1], self.group2()[0]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group1()[2], self.group1()[3], self.group3()[0], self.group2()[1]]))
                + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group3()[2] * other.group0()[1])
                        + (self.group1()[1] * other.group0()[2])
                        + (self.group0()[1] * other.group1()[2])
                        + (self.group0()[0] * other.group1()[3])
                        + (self.group0()[0] * other.group2()[3])),
                    ((self.group3()[0] * other.group0()[2])
                        + (self.group1()[2] * other.group0()[0])
                        + (self.group0()[2] * other.group1()[0])
                        + (self.group0()[1] * other.group2()[3])
                        + (self.group0()[1] * other.group1()[3])),
                    ((self.group3()[1] * other.group0()[0])
                        + (self.group1()[0] * other.group0()[1])
                        + (self.group0()[2] * other.group2()[3])
                        + (self.group0()[2] * other.group1()[3])
                        + (self.group0()[0] * other.group1()[1])),
                    (-(self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e321
            ((other.group2() * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group1()[3]]))
                + (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[3]]))
                - (swizzle!(self.group2(), 2, 0, 1, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[2]]))
                - (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[2]]))
                + (swizzle!(other.group2(), 3, 3, 3, 2) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[2]]))
                + (swizzle!(self.group0(), 3, 3, 3, 0) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[0]]))
                + (swizzle!(self.group0(), 1, 2, 0, 1) * swizzle!(other.group2(), 2, 0, 1, 1))
                + Simd32x4::from([
                    ((self.group2()[3] * other.group0()[0]) + (self.group2()[1] * other.group0()[2]) + (self.group1()[1] * other.group1()[2])
                        - (self.group0()[2] * other.group2()[1])),
                    ((self.group2()[3] * other.group0()[1]) + (self.group2()[2] * other.group0()[0]) + (self.group1()[2] * other.group1()[0])
                        - (self.group0()[0] * other.group2()[2])),
                    ((self.group2()[3] * other.group0()[2]) + (self.group2()[0] * other.group0()[1]) + (self.group1()[0] * other.group1()[1])
                        - (self.group0()[1] * other.group2()[0])),
                    (-(self.group3()[1] * other.group1()[1])
                        - (self.group3()[0] * other.group1()[0])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])),
                ])),
            // e235, e315, e125, e5
            (-(swizzle!(self.group3(), 2, 0, 1, 2) * swizzle!(other.group2(), 1, 2, 0, 2))
                + (swizzle!(other.group2(), 2, 0, 1, 3) * Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[3]]))
                - (swizzle!(self.group2(), 2, 1, 2, 3) * swizzle!(other.group1(), 1, 3, 3, 3))
                - (swizzle!(self.group2(), 0, 0, 1, 2) * swizzle!(other.group1(), 3, 2, 0, 2))
                - (swizzle!(other.group2(), 1, 2, 0, 1) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[1]]))
                + Simd32x4::from([
                    ((self.group2()[3] * other.group1()[0])
                        + (self.group2()[1] * other.group1()[2])
                        + (self.group2()[0] * other.group2()[3])
                        + (self.group1()[3] * other.group2()[0])
                        + (self.group0()[3] * other.group2()[0])
                        + (self.group1()[1] * other.group2()[2])),
                    ((self.group2()[3] * other.group1()[1])
                        + (self.group2()[2] * other.group1()[0])
                        + (self.group2()[1] * other.group2()[3])
                        + (self.group1()[3] * other.group2()[1])
                        + (self.group1()[2] * other.group2()[0])
                        + (self.group0()[3] * other.group2()[1])),
                    ((self.group2()[3] * other.group1()[2])
                        + (self.group2()[2] * other.group2()[3])
                        + (self.group2()[0] * other.group1()[1])
                        + (self.group1()[3] * other.group2()[2])
                        + (self.group0()[3] * other.group2()[2])
                        + (self.group1()[0] * other.group2()[1])),
                    (-(self.group3()[0] * other.group2()[0])
                        - (self.group2()[1] * other.group1()[1])
                        - (self.group2()[0] * other.group1()[0])
                        - (self.group1()[2] * other.group2()[2])
                        - (self.group1()[0] * other.group2()[0])
                        - (self.group1()[1] * other.group2()[1])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group0()[2]]))
                + (swizzle!(self.group3(), 1, 2, 2, 3) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group2()[3], other.group2()[3]]))
                + (swizzle!(self.group3(), 0, 1, 0, 3) * Simd32x4::from([other.group2()[3], other.group2()[3], other.group1()[1], other.group1()[3]]))
                - (swizzle!(self.group0(), 1, 2, 0, 0) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[0]]))
                + Simd32x4::from([
                    (-(self.group3()[3] * other.group2()[0]) + (self.group2()[3] * other.group0()[0]) - (self.group2()[2] * other.group0()[1])
                        + (self.group2()[1] * other.group0()[2])
                        + (self.group1()[3] * other.group1()[0])
                        + (self.group1()[0] * other.group1()[3])
                        + (self.group0()[2] * other.group2()[1])),
                    (-(self.group3()[3] * other.group2()[1]) + (self.group2()[3] * other.group0()[1]) + (self.group2()[2] * other.group0()[0])
                        - (self.group2()[0] * other.group0()[2])
                        + (self.group1()[3] * other.group1()[1])
                        + (self.group1()[1] * other.group1()[3])
                        + (self.group0()[0] * other.group2()[2])),
                    (-(self.group3()[3] * other.group2()[2]) + (self.group2()[3] * other.group0()[2]) - (self.group2()[1] * other.group0()[0])
                        + (self.group2()[0] * other.group0()[1])
                        + (self.group1()[3] * other.group1()[2])
                        + (self.group1()[2] * other.group1()[3])
                        + (self.group0()[1] * other.group2()[0])),
                    ((self.group3()[2] * other.group0()[2]) + (self.group3()[1] * other.group0()[1]) + (self.group3()[0] * other.group0()[0])
                        - (self.group1()[2] * other.group0()[2])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      112      150        0
    //    simd4       68       69        0
    // Totals...
    // yes simd      180      219        0
    //  no simd      384      426        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group1()[3], self.group2()[2]]))
                - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group3()[2], self.group1()[1], self.group2()[0]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group1()[2], self.group1()[3], self.group3()[0], self.group2()[1]]))
                - (swizzle!(other.group1(), 1, 2, 3, 3) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[2], self.group1()[3]]))
                - (swizzle!(other.group1(), 3, 3, 0, 2) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group3()[3] * other.group1()[0])
                        + (self.group3()[2] * other.group0()[1])
                        + (self.group1()[1] * other.group0()[2])
                        + (self.group0()[3] * other.group0()[0])
                        + (self.group0()[1] * other.group1()[2])),
                    ((self.group3()[3] * other.group1()[1])
                        + (self.group3()[0] * other.group0()[2])
                        + (self.group1()[2] * other.group0()[0])
                        + (self.group0()[3] * other.group0()[1])
                        + (self.group0()[2] * other.group1()[0])),
                    ((self.group3()[3] * other.group1()[2])
                        + (self.group3()[1] * other.group0()[0])
                        + (self.group1()[0] * other.group0()[1])
                        + (self.group0()[3] * other.group0()[2])
                        + (self.group0()[0] * other.group1()[1])),
                    (-(self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e23, e31, e12, e45
            ((swizzle!(self.group3(), 3, 3, 3, 2) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[2]]))
                + (swizzle!(self.group2(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[2]]))
                + (swizzle!(self.group2(), 1, 2, 0, 1) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[1]]))
                + (swizzle!(other.group1(), 2, 0, 1, 1) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[1]]))
                + (swizzle!(other.group1(), 0, 1, 2, 0) * Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group3()[0]]))
                + (swizzle!(self.group0(), 1, 2, 0, 3) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[3]]))
                - (swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group2()[2]]))
                + Simd32x4::from([
                    (-(self.group3()[0] * other.group1()[3]) - (self.group2()[2] * other.group0()[1]) - (self.group1()[2] * other.group1()[1])),
                    (-(self.group3()[1] * other.group1()[3]) - (self.group2()[0] * other.group0()[2]) - (self.group1()[0] * other.group1()[2])),
                    (-(self.group3()[2] * other.group1()[3]) - (self.group2()[1] * other.group0()[0]) - (self.group1()[1] * other.group1()[0])),
                    ((self.group2()[0] * other.group0()[0]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
            // e15, e25, e35, e1234
            (-(swizzle!(self.group3(), 2, 0, 1, 3) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]))
                + (swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[2]]))
                - (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[2]]))
                - (swizzle!(self.group1(), 2, 0, 1, 2) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[2]]))
                + Simd32x4::from([
                    ((self.group2()[3] * other.group1()[0])
                        + (self.group2()[1] * other.group1()[2])
                        + (self.group2()[0] * other.group1()[3])
                        + (self.group1()[3] * other.group2()[0])
                        + (self.group0()[3] * other.group2()[0])
                        + (self.group1()[1] * other.group2()[2])),
                    ((self.group2()[3] * other.group1()[1])
                        + (self.group2()[2] * other.group1()[0])
                        + (self.group2()[1] * other.group1()[3])
                        + (self.group1()[3] * other.group2()[1])
                        + (self.group1()[2] * other.group2()[0])
                        + (self.group0()[3] * other.group2()[1])),
                    ((self.group2()[3] * other.group1()[2])
                        + (self.group2()[2] * other.group1()[3])
                        + (self.group2()[0] * other.group1()[1])
                        + (self.group1()[3] * other.group2()[2])
                        + (self.group0()[3] * other.group2()[2])
                        + (self.group1()[0] * other.group2()[1])),
                    ((self.group3()[1] * other.group0()[1]) + (self.group3()[0] * other.group0()[0])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group1(), 1, 2, 0, 3) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]))
                - (swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[2]]))
                - (swizzle!(self.group2(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]))
                - (swizzle!(self.group2(), 1, 2, 0, 1) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[1]]))
                - (swizzle!(other.group1(), 0, 1, 2, 0) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[0]]))
                + Simd32x4::from([
                    ((self.group3()[3] * other.group2()[0])
                        + (self.group2()[2] * other.group0()[1])
                        + (self.group1()[0] * other.group1()[3])
                        + (self.group0()[1] * other.group2()[2])
                        - (self.group0()[2] * other.group2()[1])),
                    ((self.group3()[3] * other.group2()[1]) + (self.group2()[0] * other.group0()[2]) + (self.group1()[1] * other.group1()[3])
                        - (self.group0()[0] * other.group2()[2])
                        + (self.group0()[2] * other.group2()[0])),
                    ((self.group3()[3] * other.group2()[2])
                        + (self.group2()[1] * other.group0()[0])
                        + (self.group1()[2] * other.group1()[3])
                        + (self.group0()[0] * other.group2()[1])
                        - (self.group0()[1] * other.group2()[0])),
                    (-(self.group3()[1] * other.group2()[1])
                        - (self.group3()[0] * other.group2()[0])
                        - (self.group1()[2] * other.group2()[2])
                        - (self.group1()[0] * other.group2()[0])
                        - (self.group1()[1] * other.group2()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      108      146        0
    //    simd4       89       90        0
    // Totals...
    // yes simd      197      236        0
    //  no simd      464      506        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                + (swizzle!(self.group3(), 2, 0, 1, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[2]]))
                - (Simd32x4::from(other.group0()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group1()[3], self.group2()[2]]))
                - (swizzle!(other.group2(), 3, 3, 3, 2) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[2]]))
                - (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group1()[3], self.group3()[2], self.group1()[1], self.group2()[0]]))
                - (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group1()[2], self.group1()[3], self.group3()[0], self.group2()[1]]))
                + (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))
                + (swizzle!(other.group3(), 1, 2, 0, 1) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[1]]))
                - (swizzle!(self.group0(), 2, 2, 2, 0) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[3], other.group2()[0]]))
                - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group3()[2], other.group1()[3], other.group1()[0], other.group2()[1]]))
                + Simd32x4::from([
                    (-(self.group3()[3] * other.group3()[0]) + (self.group1()[1] * other.group0()[2]) + (self.group0()[3] * other.group0()[0])
                        - (self.group0()[0] * other.group1()[3])
                        + (self.group0()[1] * other.group1()[2])),
                    (-(self.group3()[3] * other.group3()[1])
                        + (self.group1()[2] * other.group0()[0])
                        + (self.group0()[3] * other.group0()[1])
                        + (self.group0()[2] * other.group1()[0])
                        - (self.group0()[0] * other.group1()[2])),
                    (-(self.group3()[3] * other.group3()[2])
                        + (self.group1()[0] * other.group0()[1])
                        + (self.group0()[3] * other.group0()[2])
                        + (self.group0()[0] * other.group1()[1])
                        - (self.group0()[0] * other.group3()[1])),
                    ((self.group3()[0] * other.group3()[0])
                        - (self.group1()[3] * other.group1()[3])
                        - (self.group1()[2] * other.group1()[2])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])),
                ])),
            // e23, e31, e12, e45
            ((Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                + (swizzle!(self.group3(), 2, 0, 1, 2) * Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[2]]))
                - (swizzle!(other.group3(), 2, 0, 1, 2) * Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[2]]))
                + (swizzle!(self.group2(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group0()[2]]))
                - (swizzle!(self.group2(), 2, 0, 1, 3) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group2()[3]]))
                + (swizzle!(self.group2(), 1, 2, 2, 1) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group2()[3], other.group0()[1]]))
                + (swizzle!(self.group2(), 0, 1, 0, 0) * Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[1], other.group0()[0]]))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group3(), 0, 1, 2, 1))
                - (swizzle!(self.group1(), 2, 0, 1, 0) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[0]]))
                + (swizzle!(other.group1(), 2, 0, 1, 1) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[1]]))
                + (swizzle!(other.group1(), 0, 1, 2, 0) * Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group3()[0]]))
                - (swizzle!(self.group0(), 2, 0, 1, 2) * swizzle!(other.group2(), 1, 2, 0, 2))
                + (swizzle!(self.group0(), 0, 2, 2, 3) * Simd32x4::from([other.group3()[3], other.group2()[0], other.group3()[3], other.group1()[3]]))
                + Simd32x4::from([
                    (-(self.group3()[0] * other.group1()[3]) + (self.group0()[1] * other.group2()[2])),
                    (-(self.group3()[1] * other.group1()[3]) + (self.group0()[1] * other.group3()[3])),
                    (-(self.group3()[2] * other.group1()[3]) + (self.group0()[0] * other.group2()[1])),
                    (-(self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
            // e15, e25, e35, e1234
            (-(swizzle!(self.group3(), 2, 0, 1, 3) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]))
                + (swizzle!(self.group3(), 1, 2, 2, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group3()[3], other.group0()[2]]))
                + (swizzle!(self.group3(), 0, 1, 0, 1) * Simd32x4::from([other.group3()[3], other.group3()[3], other.group2()[1], other.group0()[1]]))
                + (swizzle!(other.group3(), 0, 1, 2, 2) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[2]]))
                - (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[2]]))
                + (swizzle!(other.group3(), 2, 0, 1, 1) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[1]]))
                + (other.group2() * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[3]]))
                - (swizzle!(self.group1(), 2, 0, 1, 3) * swizzle!(other.group2(), 1, 2, 0, 3))
                + (swizzle!(self.group0(), 3, 3, 3, 0) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[0]]))
                + Simd32x4::from([
                    ((self.group2()[3] * other.group1()[0]) - (self.group2()[2] * other.group3()[1])
                        + (self.group2()[1] * other.group1()[2])
                        + (self.group2()[0] * other.group1()[3])
                        + (self.group1()[1] * other.group2()[2])
                        + (self.group1()[0] * other.group3()[3])),
                    ((self.group2()[3] * other.group1()[1]) + (self.group2()[2] * other.group1()[0]) + (self.group2()[1] * other.group1()[3])
                        - (self.group2()[0] * other.group3()[2])
                        + (self.group1()[2] * other.group2()[0])
                        + (self.group1()[1] * other.group3()[3])),
                    ((self.group2()[3] * other.group1()[2]) + (self.group2()[2] * other.group1()[3]) - (self.group2()[1] * other.group3()[0])
                        + (self.group2()[0] * other.group1()[1])
                        + (self.group1()[2] * other.group3()[3])
                        + (self.group1()[0] * other.group2()[1])),
                    ((self.group3()[0] * other.group0()[0])
                        - (self.group1()[2] * other.group0()[2])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group1()[1])
                        - (self.group0()[0] * other.group1()[0])),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group1(), 1, 2, 0, 3) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]))
                - (swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[2]]))
                - (swizzle!(self.group2(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group3()[2]]))
                - (swizzle!(self.group2(), 1, 2, 2, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group2()[3], other.group1()[2]]))
                - (swizzle!(self.group2(), 0, 1, 0, 1) * Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[1], other.group3()[1]]))
                - (swizzle!(other.group1(), 0, 1, 2, 1) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[1]]))
                - (swizzle!(other.group3(), 1, 2, 0, 0) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]))
                + (swizzle!(self.group1(), 1, 2, 2, 3) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[3], other.group3()[3]]))
                + (swizzle!(other.group3(), 0, 1, 1, 3) * Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[0], self.group0()[3]]))
                - (swizzle!(other.group2(), 1, 2, 0, 1) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[1]]))
                + Simd32x4::from([
                    ((self.group3()[3] * other.group2()[0])
                        + (self.group2()[2] * other.group0()[1])
                        + (self.group1()[0] * other.group1()[3])
                        + (self.group0()[0] * other.group3()[3])
                        + (self.group0()[1] * other.group2()[2])),
                    ((self.group3()[3] * other.group2()[1])
                        + (self.group2()[0] * other.group0()[2])
                        + (self.group1()[1] * other.group1()[3])
                        + (self.group0()[2] * other.group2()[0])
                        + (self.group0()[1] * other.group3()[3])),
                    ((self.group3()[3] * other.group2()[2])
                        + (self.group2()[1] * other.group0()[0])
                        + (self.group0()[3] * other.group3()[2])
                        + (self.group0()[2] * other.group3()[3])
                        + (self.group0()[0] * other.group2()[1])),
                    (-(self.group3()[0] * other.group2()[0])
                        - (self.group2()[0] * other.group1()[0])
                        - (self.group1()[2] * other.group2()[2])
                        - (self.group1()[1] * other.group2()[1])
                        - (self.group1()[0] * other.group2()[0])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       80      110        0
    //    simd4       44       48        0
    // Totals...
    // yes simd      124      158        0
    //  no simd      256      302        0
    fn anti_sandwich(self, other: DualNum) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[2] * other.group0()[1]),
                ((self.group0()[3] * other.group0()[1]) + (self.group3()[3] * other.group0()[0])),
            ]),
            // e415, e425, e435, e321
            ((self.group1() * Simd32x4::from(other.group0()[1]))
                + (Simd32x4::from([1.0, 1.0, 1.0, -1.0])
                    * Simd32x4::from(other.group0()[0])
                    * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group3()[3]]))),
            // e235, e315, e125, e5
            ((Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[3]]))
                + (self.group1() * Simd32x4::from(other.group0()[0]))
                + (self.group2() * Simd32x4::from(other.group0()[1]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[0] * other.group0()[0]) + (self.group3()[0] * other.group0()[1])),
                (-(self.group0()[1] * other.group0()[0]) + (self.group3()[1] * other.group0()[1])),
                (-(self.group0()[2] * other.group0()[0]) + (self.group3()[2] * other.group0()[1])),
                (self.group3()[3] * other.group0()[1]),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       80      118        0
    //    simd4       52       55        0
    // Totals...
    // yes simd      132      173        0
    //  no simd      288      338        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                (-(self.group1()[3] * other.group0()[3])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])),
            ]),
            // e23, e31, e12, e45
            ((other.group0() * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group0()[3]]))
                - (swizzle!(other.group0(), 3, 3, 3, 2) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[2]]))
                - (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (Simd32x4::from([1.0, 1.0, 1.0, -1.0]) * swizzle!(self.group0(), 1, 2, 0, 1) * swizzle!(other.group0(), 2, 0, 1, 1))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group3()[2] * other.group0()[1])
                    + (self.group3()[1] * other.group0()[2])
                    + (self.group2()[0] * other.group0()[3])
                    + (self.group1()[3] * other.group0()[0])
                    - (self.group1()[2] * other.group0()[1])
                    + (self.group0()[3] * other.group0()[0])
                    + (self.group1()[1] * other.group0()[2])),
                ((self.group3()[2] * other.group0()[0]) - (self.group3()[0] * other.group0()[2])
                    + (self.group2()[1] * other.group0()[3])
                    + (self.group1()[3] * other.group0()[1])
                    + (self.group1()[2] * other.group0()[0])
                    + (self.group0()[3] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[2])),
                (-(self.group3()[1] * other.group0()[0])
                    + (self.group3()[0] * other.group0()[1])
                    + (self.group2()[2] * other.group0()[3])
                    + (self.group1()[3] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[0])
                    + (self.group0()[3] * other.group0()[2])
                    + (self.group1()[0] * other.group0()[1])),
                (self.group3()[3] * other.group0()[3] * -1.0),
            ]),
            // e4235, e4315, e4125, e3215
            ((other.group0() * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group2()[3]]))
                - (swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[2]]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2])),
                    ((self.group1()[1] * other.group0()[3]) + (self.group0()[2] * other.group0()[0])),
                    ((self.group1()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1])),
                    (-(self.group3()[1] * other.group0()[1])
                        - (self.group3()[0] * other.group0()[0])
                        - (self.group1()[2] * other.group0()[2])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group1()[1] * other.group0()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       93      133        0
    //    simd4       65       66        0
    // Totals...
    // yes simd      158      199        0
    //  no simd      353      397        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((swizzle!(other.group1(), 1, 2, 0, 3) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[3]]))
                - (swizzle!(self.group0(), 0, 2, 2, 2) * Simd32x4::from([other.group0()[3], other.group1()[0], other.group0()[3], other.group0()[2]]))
                - (swizzle!(self.group0(), 1, 1, 0, 0) * Simd32x4::from([other.group1()[2], other.group0()[3], other.group1()[1], other.group0()[0]]))
                + Simd32x4::from([
                    ((self.group3()[3] * other.group1()[0]) * -1.0),
                    ((self.group3()[3] * other.group1()[1]) * -1.0),
                    ((self.group3()[3] * other.group1()[2]) * -1.0),
                    ((self.group3()[2] * other.group1()[2]) + (self.group3()[1] * other.group1()[1]) + (self.group3()[0] * other.group1()[0])
                        - (self.group1()[3] * other.group0()[3])
                        - (self.group0()[1] * other.group0()[1])),
                ])),
            // e23, e31, e12, e45
            ((Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[2]]))
                - (swizzle!(other.group0(), 3, 3, 3, 2) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[2]]))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group1(), 0, 1, 2, 1))
                - (swizzle!(self.group0(), 2, 0, 1, 0) * swizzle!(other.group0(), 1, 2, 0, 0))
                + (swizzle!(self.group0(), 0, 2, 2, 3) * Simd32x4::from([other.group1()[3], other.group0()[0], other.group1()[3], other.group0()[3]]))
                + Simd32x4::from([
                    ((self.group3()[2] * other.group1()[1]) + (self.group0()[1] * other.group0()[2])),
                    ((self.group3()[0] * other.group1()[2]) + (self.group0()[1] * other.group1()[3])),
                    ((self.group3()[1] * other.group1()[0]) + (self.group0()[0] * other.group0()[1])),
                    (-(self.group1()[0] * other.group1()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e15, e25, e35, e1234
            (-(swizzle!(self.group3(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))
                + (swizzle!(other.group1(), 3, 3, 3, 2) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[2]]))
                + (swizzle!(other.group1(), 0, 1, 2, 0) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[0]]))
                + (swizzle!(other.group1(), 2, 0, 1, 1) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[1]]))
                + Simd32x4::from([
                    ((self.group3()[1] * other.group0()[2]) - (self.group2()[2] * other.group1()[1])
                        + (self.group2()[0] * other.group0()[3])
                        + (self.group1()[3] * other.group0()[0])
                        - (self.group1()[2] * other.group0()[1])
                        + (self.group1()[1] * other.group0()[2])
                        + (self.group0()[3] * other.group0()[0])
                        + (self.group1()[0] * other.group1()[3])),
                    ((self.group3()[2] * other.group0()[0]) + (self.group2()[1] * other.group0()[3]) - (self.group2()[0] * other.group1()[2])
                        + (self.group1()[3] * other.group0()[1])
                        + (self.group1()[2] * other.group0()[0])
                        + (self.group1()[1] * other.group1()[3])
                        + (self.group0()[3] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[2])),
                    ((self.group3()[0] * other.group0()[1]) + (self.group2()[2] * other.group0()[3]) - (self.group2()[1] * other.group1()[0])
                        + (self.group1()[3] * other.group0()[2])
                        + (self.group1()[2] * other.group1()[3])
                        - (self.group1()[1] * other.group0()[0])
                        + (self.group0()[3] * other.group0()[2])
                        + (self.group1()[0] * other.group0()[1])),
                    0.0,
                ])),
            // e4235, e4315, e4125, e3215
            ((other.group0() * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group2()[3]]))
                - (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]))
                + (swizzle!(self.group1(), 1, 2, 2, 3) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group1()[3]]))
                + (swizzle!(other.group1(), 0, 1, 1, 3) * Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[0], self.group0()[3]]))
                - (swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[2]]))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group0()[3]) + (self.group0()[0] * other.group1()[3]) + (self.group0()[1] * other.group0()[2])),
                    ((self.group1()[1] * other.group0()[3]) + (self.group0()[2] * other.group0()[0]) + (self.group0()[1] * other.group1()[3])),
                    ((self.group0()[3] * other.group1()[2]) + (self.group0()[2] * other.group1()[3]) + (self.group0()[0] * other.group0()[1])),
                    (-(self.group3()[1] * other.group0()[1])
                        - (self.group3()[0] * other.group0()[0])
                        - (self.group2()[1] * other.group1()[1])
                        - (self.group2()[0] * other.group1()[0])
                        - (self.group1()[2] * other.group0()[2])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      128      166        0
    //    simd4       48       49        0
    // Totals...
    // yes simd      176      215        0
    //  no simd      320      362        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (-(swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group3()[3] * other.group0()[0]) + (self.group0()[1] * other.group0()[2])),
                    ((self.group3()[3] * other.group0()[1]) + (self.group0()[2] * other.group0()[0])),
                    ((self.group3()[3] * other.group0()[2]) + (self.group0()[0] * other.group0()[1])),
                    (-(self.group1()[2] * other.group0()[2])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e415, e425, e435, e321
            ((swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]))
                + (swizzle!(self.group0(), 1, 2, 0, 0) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group1()[0]]))
                + Simd32x4::from([
                    ((self.group3()[3] * other.group1()[0]) - (self.group1()[2] * other.group0()[1]) + (self.group1()[1] * other.group0()[2])
                        - (self.group0()[2] * other.group1()[1])),
                    ((self.group3()[3] * other.group1()[1]) + (self.group1()[2] * other.group0()[0])
                        - (self.group1()[0] * other.group0()[2])
                        - (self.group0()[0] * other.group1()[2])),
                    ((self.group3()[3] * other.group1()[2]) - (self.group1()[1] * other.group0()[0]) + (self.group1()[0] * other.group0()[1])
                        - (self.group0()[1] * other.group1()[0])),
                    (-(self.group3()[2] * other.group0()[2]) - (self.group3()[1] * other.group0()[1]) - (self.group3()[0] * other.group0()[0])
                        + (self.group0()[1] * other.group1()[1])),
                ])),
            // e235, e315, e125, e5
            (-(swizzle!(self.group3(), 2, 0, 1, 2) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group1()[2]]))
                - (swizzle!(self.group2(), 2, 0, 1, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[2]]))
                - (swizzle!(self.group1(), 2, 0, 1, 2) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group3()[1] * other.group1()[2])
                        + (self.group2()[3] * other.group0()[0])
                        + (self.group2()[1] * other.group0()[2])
                        + (self.group1()[3] * other.group1()[0])
                        + (self.group0()[3] * other.group1()[0])
                        + (self.group1()[1] * other.group1()[2])),
                    ((self.group3()[2] * other.group1()[0])
                        + (self.group2()[3] * other.group0()[1])
                        + (self.group2()[2] * other.group0()[0])
                        + (self.group1()[3] * other.group1()[1])
                        + (self.group1()[2] * other.group1()[0])
                        + (self.group0()[3] * other.group1()[1])),
                    ((self.group3()[0] * other.group1()[1])
                        + (self.group2()[3] * other.group0()[2])
                        + (self.group2()[0] * other.group0()[1])
                        + (self.group1()[3] * other.group1()[2])
                        + (self.group0()[3] * other.group1()[2])
                        + (self.group1()[0] * other.group1()[1])),
                    (-(self.group3()[1] * other.group1()[1])
                        - (self.group3()[0] * other.group1()[0])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group1()[1] * other.group1()[1])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]))
                + Simd32x4::from([
                    (-(self.group3()[3] * other.group1()[0]) - (self.group3()[2] * other.group0()[1])
                        + (self.group3()[1] * other.group0()[2])
                        + (self.group1()[3] * other.group0()[0])
                        + (self.group0()[2] * other.group1()[1])),
                    (-(self.group3()[3] * other.group1()[1]) + (self.group3()[2] * other.group0()[0]) - (self.group3()[0] * other.group0()[2])
                        + (self.group1()[3] * other.group0()[1])
                        + (self.group0()[0] * other.group1()[2])),
                    (-(self.group3()[3] * other.group1()[2]) - (self.group3()[1] * other.group0()[0])
                        + (self.group3()[0] * other.group0()[1])
                        + (self.group1()[3] * other.group0()[2])
                        + (self.group0()[1] * other.group1()[0])),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      113      150        0
    //    simd4       60       61        0
    // Totals...
    // yes simd      173      211        0
    //  no simd      353      394        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + (swizzle!(self.group0(), 0, 2, 2, 3) * swizzle!(other.group0(), 3, 0, 3, 3))
                + Simd32x4::from([
                    (self.group0()[1] * other.group0()[2]),
                    (self.group0()[1] * other.group0()[3]),
                    (self.group0()[0] * other.group0()[1]),
                    (-(self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e415, e425, e435, e321
            ((swizzle!(other.group1(), 0, 1, 2, 2) * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group0()[2]]))
                - (swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[2]]))
                + (swizzle!(self.group1(), 1, 2, 2, 3) * swizzle!(other.group0(), 2, 0, 3, 3))
                + (swizzle!(self.group0(), 3, 3, 3, 0) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]))
                - (swizzle!(other.group1(), 1, 2, 0, 3) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[3]]))
                + (swizzle!(self.group0(), 0, 2, 2, 1) * swizzle!(other.group1(), 3, 0, 3, 1))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group0()[3]) + (self.group0()[1] * other.group1()[2])),
                    ((self.group1()[1] * other.group0()[3]) + (self.group0()[1] * other.group1()[3])),
                    ((self.group1()[0] * other.group0()[1]) + (self.group0()[0] * other.group1()[1])),
                    (-(self.group3()[1] * other.group0()[1]) - (self.group3()[0] * other.group0()[0])),
                ])),
            // e235, e315, e125, e5
            (-(swizzle!(self.group3(), 2, 0, 1, 2) * swizzle!(other.group1(), 1, 2, 0, 2))
                + (swizzle!(other.group1(), 2, 0, 3, 3) * Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[2], self.group1()[3]]))
                + (swizzle!(other.group1(), 3, 3, 1, 3) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[0], self.group0()[3]]))
                + (Simd32x4::from(self.group2()[3]) * other.group0())
                - (swizzle!(self.group2(), 2, 0, 1, 2) * swizzle!(other.group0(), 1, 2, 0, 2))
                - (swizzle!(other.group1(), 1, 2, 0, 1) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[1]]))
                + Simd32x4::from([
                    ((self.group2()[1] * other.group0()[2])
                        + (self.group2()[0] * other.group0()[3])
                        + (self.group1()[3] * other.group1()[0])
                        + (self.group1()[1] * other.group1()[2])
                        + (self.group0()[3] * other.group1()[0])
                        + (self.group1()[0] * other.group1()[3])),
                    ((self.group2()[2] * other.group0()[0])
                        + (self.group2()[1] * other.group0()[3])
                        + (self.group1()[3] * other.group1()[1])
                        + (self.group1()[2] * other.group1()[0])
                        + (self.group1()[1] * other.group1()[3])
                        + (self.group0()[3] * other.group1()[1])),
                    ((self.group2()[2] * other.group0()[3])
                        + (self.group2()[0] * other.group0()[1])
                        + (self.group1()[3] * other.group1()[2])
                        + (self.group1()[2] * other.group1()[3])
                        + (self.group0()[3] * other.group1()[2])
                        + (self.group1()[0] * other.group1()[1])),
                    (-(self.group3()[0] * other.group1()[0])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[2] * other.group1()[2])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group0()[2]]))
                + (swizzle!(self.group3(), 1, 2, 2, 3) * swizzle!(other.group0(), 2, 0, 3, 3))
                - (swizzle!(self.group0(), 0, 2, 2, 0) * Simd32x4::from([other.group1()[3], other.group1()[0], other.group1()[3], other.group0()[0]]))
                - (swizzle!(self.group0(), 1, 1, 0, 1) * Simd32x4::from([other.group1()[2], other.group1()[3], other.group1()[1], other.group0()[1]]))
                + Simd32x4::from([
                    (-(self.group3()[3] * other.group1()[0])
                        + (self.group3()[0] * other.group0()[3])
                        + (self.group1()[3] * other.group0()[0])
                        + (self.group0()[2] * other.group1()[1])),
                    (-(self.group3()[3] * other.group1()[1])
                        + (self.group3()[1] * other.group0()[3])
                        + (self.group1()[3] * other.group0()[1])
                        + (self.group0()[0] * other.group1()[2])),
                    (-(self.group3()[3] * other.group1()[2])
                        + (self.group3()[0] * other.group0()[1])
                        + (self.group1()[3] * other.group0()[2])
                        + (self.group0()[1] * other.group1()[0])),
                    0.0,
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for VersorEven {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      270      334        0
    //    simd2       24       24        0
    //    simd3      106      108        0
    //    simd4       81       82        0
    // Totals...
    // yes simd      481      548        0
    //  no simd      960     1034        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from(self.group3()[3]) * Simd32x2::from([other.group8()[3], other[e1]]))
                + (Simd32x2::from(self.group2()[3]) * Simd32x2::from([other[e35], other.group1()[3]]))
                - (Simd32x2::from(self.group2()[2]) * Simd32x2::from([other.group4()[2], other.group6()[2]]))
                - (Simd32x2::from(self.group2()[1]) * Simd32x2::from([other.group4()[1], other.group6()[1]]))
                - (Simd32x2::from(self.group2()[0]) * Simd32x2::from([other.group4()[0], other.group6()[0]]))
                - (Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group10()[0], other.group5()[2]]))
                - (Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group10()[1], other.group5()[1]]))
                - (Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group10()[2], other.group5()[0]]))
                + (Simd32x2::from(self.group0()[3]) * other.group0())
                - (Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group3()[2], other.group7()[2]]))
                - (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group3()[0], other.group7()[0]]))
                - (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group3()[1], other.group7()[1]]))
                + Simd32x2::from([
                    ((self.group3()[2] * other.group8()[2]) + (self.group3()[1] * other.group8()[1]) + (self.group3()[0] * other.group8()[0])
                        - (self.group1()[3] * other.group3()[3])),
                    (-(self.group3()[2] * other.group1()[2]) - (self.group3()[1] * other.group1()[1]) - (self.group3()[0] * other.group1()[0])
                        + (self.group1()[3] * other.group5()[3])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group5(), 1, 2, 0, 2) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group0()[2]]))
                + (swizzle!(self.group3(), 1, 2, 2, 3) * Simd32x4::from([other.group5()[2], other.group5()[0], other.group0()[1], other.group5()[3]]))
                + (swizzle!(self.group3(), 0, 1, 0, 3) * Simd32x4::from([other.group0()[1], other.group0()[1], other.group5()[1], other.group0()[1]]))
                + (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[3]]))
                - (swizzle!(self.group1(), 2, 0, 1, 3) * swizzle!(other.group1(), 1, 2, 0, 3))
                - (swizzle!(self.group0(), 0, 2, 2, 2) * Simd32x4::from([other[e1], other.group7()[0], other[e1], other.group1()[2]]))
                - (swizzle!(self.group0(), 1, 1, 0, 1) * Simd32x4::from([other.group7()[2], other[e1], other.group7()[1], other.group5()[1]]))
                + Simd32x4::from([
                    (-(self.group3()[3] * other.group7()[0]) + (self.group2()[3] * other.group6()[0]) - (self.group2()[2] * other.group6()[1])
                        + (self.group2()[1] * other.group6()[2])
                        + (self.group1()[3] * other.group5()[0])
                        + (self.group1()[1] * other.group1()[2])
                        + (self.group1()[0] * other.group5()[3])
                        + (self.group0()[3] * other.group1()[0])
                        + (self.group0()[2] * other.group7()[1])),
                    (-(self.group3()[3] * other.group7()[1]) + (self.group2()[3] * other.group6()[1]) + (self.group2()[2] * other.group6()[0])
                        - (self.group2()[0] * other.group6()[2])
                        + (self.group1()[3] * other.group5()[1])
                        + (self.group1()[2] * other.group1()[0])
                        + (self.group1()[1] * other.group5()[3])
                        + (self.group0()[3] * other.group1()[1])
                        + (self.group0()[0] * other.group7()[2])),
                    (-(self.group3()[3] * other.group7()[2]) + (self.group2()[3] * other.group6()[2]) - (self.group2()[1] * other.group6()[0])
                        + (self.group2()[0] * other.group6()[1])
                        + (self.group1()[3] * other.group5()[2])
                        + (self.group1()[2] * other.group5()[3])
                        + (self.group1()[0] * other.group1()[1])
                        + (self.group0()[3] * other.group1()[2])
                        + (self.group0()[1] * other.group7()[0])),
                    ((self.group3()[2] * other.group6()[2]) + (self.group3()[1] * other.group6()[1]) + (self.group3()[0] * other.group6()[0])
                        - (self.group1()[2] * other.group6()[2])
                        - (self.group1()[1] * other.group6()[1])
                        - (self.group1()[0] * other.group6()[0])
                        - (self.group0()[1] * other.group1()[1])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group5()[0])),
                ])),
            // e5
            (-(self.group3()[2] * other.group7()[2]) - (self.group3()[1] * other.group7()[1]) - (self.group3()[0] * other.group7()[0]) - (self.group2()[3] * other.group5()[3])
                + (self.group2()[3] * other.group0()[1])
                - (self.group2()[2] * other.group5()[2])
                + (self.group2()[2] * other.group1()[2])
                - (self.group2()[1] * other.group5()[1])
                + (self.group2()[1] * other.group1()[1])
                - (self.group2()[0] * other.group5()[0])
                + (self.group2()[0] * other.group1()[0])
                + (self.group1()[3] * other[e1])
                - (self.group1()[2] * other.group7()[2])
                - (self.group1()[1] * other.group7()[1])
                + (self.group0()[3] * other[e1])
                - (self.group1()[0] * other.group7()[0])),
            // e15, e25, e35, e45
            (-(swizzle!(other.group3(), 1, 2, 0, 2) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group0()[2]]))
                + (swizzle!(self.group3(), 1, 2, 2, 3) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group8()[3], other.group8()[3]]))
                + (swizzle!(self.group3(), 0, 1, 0, 2) * Simd32x4::from([other.group8()[3], other.group8()[3], other.group3()[1], other.group10()[0]]))
                + (swizzle!(self.group2(), 3, 3, 3, 2) * Simd32x4::from([other.group10()[2], other.group10()[1], other.group10()[0], other.group4()[2]]))
                + (swizzle!(self.group2(), 3, 3, 3, 1) * Simd32x4::from([other.group8()[0], other.group8()[1], other.group8()[2], other.group4()[1]]))
                - (swizzle!(self.group2(), 2, 0, 1, 3) * Simd32x4::from([other.group10()[1], other.group10()[0], other.group10()[2], other[e35]]))
                - (swizzle!(other.group8(), 1, 2, 0, 2) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[2]]))
                + (swizzle!(self.group2(), 1, 2, 2, 0) * Simd32x4::from([other.group10()[0], other.group10()[2], other.group3()[3], other.group4()[0]]))
                + (swizzle!(other.group3(), 3, 3, 2, 3) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group1()[3], self.group0()[3]]))
                - (swizzle!(self.group1(), 2, 0, 1, 3) * Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group0()[0]]))
                + Simd32x4::from([
                    ((self.group2()[1] * other.group8()[2])
                        + (self.group2()[0] * other.group0()[0])
                        + (self.group1()[3] * other.group3()[0])
                        + (self.group1()[1] * other.group3()[2])
                        + (self.group0()[3] * other.group3()[0])
                        + (self.group1()[0] * other.group8()[3])),
                    ((self.group2()[2] * other.group8()[0])
                        + (self.group2()[1] * other.group0()[0])
                        + (self.group1()[3] * other.group3()[1])
                        + (self.group1()[2] * other.group3()[0])
                        + (self.group1()[1] * other.group8()[3])
                        + (self.group0()[3] * other.group3()[1])),
                    ((self.group2()[2] * other.group0()[0])
                        + (self.group2()[0] * other.group10()[1])
                        + (self.group2()[0] * other.group8()[1])
                        + (self.group1()[2] * other.group8()[3])
                        + (self.group0()[3] * other.group3()[2])
                        + (self.group1()[0] * other.group3()[1])),
                    ((self.group3()[1] * other.group10()[1]) + (self.group3()[0] * other.group10()[2])
                        - (self.group1()[1] * other.group8()[1])
                        - (self.group1()[0] * other.group8()[0])
                        - (self.group0()[0] * other.group3()[0])
                        - (self.group0()[1] * other.group3()[1])),
                ])),
            // e41, e42, e43
            ((Simd32x3::from(self.group3()[3]) * swizzle!(other.group10(), 2, 1, 0))
                - (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group8()[0], other.group8()[1], other.group8()[2]]))
                + (swizzle!(other.group4(), 1, 2, 0) * Simd32x3::from([self.group3()[2], self.group3()[0], self.group3()[1]]))
                - (swizzle!(other.group4(), 2, 0, 1) * Simd32x3::from([self.group3()[1], self.group3()[2], self.group3()[0]]))
                - (Simd32x3::from(other[e35]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                - (Simd32x3::from(self.group1()[3]) * other.group4())
                - (swizzle!(other.group4(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))
                + (swizzle!(other.group4(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                + (Simd32x3::from(other[e35]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(self.group0()[3]) * other.group4())
                - (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group10()[1], other.group8()[0], other.group3()[3]]))
                + (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group8()[1], other.group10()[2], other.group0()[0]]))
                + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group10()[0], other.group0()[0], other.group8()[0]]))
                - (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group8()[2], other.group3()[3], other.group10()[2]]))
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group8()[2], other.group10()[1]]))
                - (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group3()[3], other.group10()[0], other.group8()[1]]))),
            // e415, e425, e435, e321
            (-(swizzle!(self.group3(), 2, 0, 1, 3) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other[e1]]))
                + (swizzle!(other.group1(), 2, 0, 1, 3) * Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[3]]))
                + (Simd32x4::from(other.group5()[3]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[3]]))
                - (swizzle!(self.group2(), 2, 0, 1, 2) * Simd32x4::from([other.group6()[1], other.group6()[2], other.group6()[0], other.group6()[2]]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[1]]))
                - (swizzle!(other.group5(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[2]]))
                + (swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group5()[0], other.group5()[1], other.group5()[2], other.group7()[2]]))
                + (swizzle!(self.group0(), 0, 2, 2, 0) * Simd32x4::from([other[e1], other.group7()[0], other[e1], other.group7()[0]]))
                + (swizzle!(self.group0(), 1, 1, 0, 1) * Simd32x4::from([other.group7()[2], other[e1], other.group7()[1], other.group7()[1]]))
                + Simd32x4::from([
                    ((self.group3()[3] * other.group7()[0])
                        + (self.group2()[3] * other.group6()[0])
                        + (self.group2()[1] * other.group6()[2])
                        + (self.group2()[0] * other.group1()[3])
                        + (self.group1()[1] * other.group5()[2])
                        + (self.group1()[0] * other.group0()[1])
                        - (self.group0()[2] * other.group7()[1])),
                    ((self.group3()[3] * other.group7()[1])
                        + (self.group2()[3] * other.group6()[1])
                        + (self.group2()[2] * other.group6()[0])
                        + (self.group2()[1] * other.group1()[3])
                        + (self.group1()[2] * other.group5()[0])
                        + (self.group1()[1] * other.group0()[1])
                        - (self.group0()[0] * other.group7()[2])),
                    ((self.group3()[3] * other.group7()[2])
                        + (self.group2()[3] * other.group6()[2])
                        + (self.group2()[2] * other.group1()[3])
                        + (self.group2()[0] * other.group6()[1])
                        + (self.group1()[2] * other.group0()[1])
                        + (self.group1()[0] * other.group5()[1])
                        - (self.group0()[1] * other.group7()[0])),
                    (-(self.group3()[1] * other.group5()[1])
                        - (self.group3()[0] * other.group5()[0])
                        - (self.group2()[1] * other.group6()[1])
                        - (self.group2()[0] * other.group6()[0])
                        - (self.group1()[2] * other.group1()[2])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])),
                ])),
            // e423, e431, e412
            ((Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group5()[0], other.group5()[1], other.group5()[2]]))
                + (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (swizzle!(other.group6(), 1, 2, 0) * Simd32x3::from([self.group3()[2], self.group3()[0], self.group3()[1]]))
                - (swizzle!(other.group6(), 2, 0, 1) * Simd32x3::from([self.group3()[1], self.group3()[2], self.group3()[0]]))
                - (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                - (Simd32x3::from(self.group1()[3]) * other.group6())
                - (swizzle!(other.group6(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))
                + (swizzle!(other.group6(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(self.group0()[3]) * other.group6())
                + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(other.group5()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + Simd32x3::from([
                    (-(self.group0()[2] * other.group5()[1]) - (self.group0()[2] * other.group1()[1])
                        + (self.group0()[1] * other.group5()[2])
                        + (self.group0()[1] * other.group1()[2])),
                    ((self.group0()[2] * other.group5()[0]) + (self.group0()[2] * other.group1()[0])
                        - (self.group0()[0] * other.group1()[2])
                        - (self.group0()[0] * other.group5()[2])),
                    (-(self.group0()[1] * other.group5()[0]) - (self.group0()[1] * other.group1()[0])
                        + (self.group0()[0] * other.group1()[1])
                        + (self.group0()[0] * other.group5()[1])),
                ])),
            // e235, e315, e125
            (-(swizzle!(other.group7(), 1, 2, 0) * Simd32x3::from([self.group3()[2], self.group3()[0], self.group3()[1]]))
                + (swizzle!(other.group7(), 2, 0, 1) * Simd32x3::from([self.group3()[1], self.group3()[2], self.group3()[0]]))
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group5()[0], other.group5()[1], other.group5()[2]]))
                - (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                - (Simd32x3::from(self.group2()[2]) * Simd32x3::from([other.group5()[1], other.group1()[0], other.group5()[3]]))
                + (Simd32x3::from(self.group2()[2]) * Simd32x3::from([other.group1()[1], other.group5()[0], other.group0()[1]]))
                + (Simd32x3::from(self.group2()[1]) * Simd32x3::from([other.group5()[2], other.group0()[1], other.group1()[0]]))
                - (Simd32x3::from(self.group2()[1]) * Simd32x3::from([other.group1()[2], other.group5()[3], other.group5()[0]]))
                - (Simd32x3::from(self.group2()[0]) * Simd32x3::from([other.group5()[3], other.group5()[2], other.group1()[1]]))
                + (Simd32x3::from(self.group2()[0]) * Simd32x3::from([other.group0()[1], other.group1()[2], other.group5()[1]]))
                + (Simd32x3::from(self.group1()[3]) * other.group7())
                - (swizzle!(other.group7(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))
                + (swizzle!(other.group7(), 2, 0, 2) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group0()[3]]))
                + (swizzle!(other.group7(), 0, 1, 1) * Simd32x3::from([self.group0()[3], self.group0()[3], self.group1()[0]]))
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))),
            // e4235, e4315, e4125, e3215
            ((other.group3() * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group2()[3]]))
                - (swizzle!(self.group3(), 1, 2, 2, 2) * Simd32x4::from([other.group10()[0], other.group10()[2], other.group0()[0], other.group3()[2]]))
                - (swizzle!(self.group3(), 0, 1, 0, 1) * Simd32x4::from([other.group0()[0], other.group0()[0], other.group10()[1], other.group3()[1]]))
                - (swizzle!(self.group2(), 3, 3, 3, 2) * Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[2], other.group10()[0]]))
                + (swizzle!(self.group2(), 2, 0, 1, 3) * Simd32x4::from([other.group4()[1], other.group4()[2], other.group4()[0], other.group0()[0]]))
                - (swizzle!(self.group2(), 1, 2, 2, 2) * Simd32x4::from([other.group4()[2], other.group4()[0], other[e35], other.group8()[2]]))
                - (swizzle!(self.group2(), 0, 1, 0, 1) * Simd32x4::from([other[e35], other[e35], other.group4()[1], other.group10()[1]]))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group10()[2], other.group10()[1], other.group10()[0], other.group3()[2]]))
                - (swizzle!(other.group8(), 1, 2, 0, 1) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[1]]))
                + (swizzle!(self.group1(), 1, 2, 2, 3) * Simd32x4::from([other.group8()[2], other.group8()[0], other.group3()[3], other.group8()[3]]))
                + (swizzle!(other.group8(), 0, 1, 1, 3) * Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[0], self.group0()[3]]))
                - (swizzle!(other.group3(), 1, 2, 0, 0) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[0]]))
                + Simd32x4::from([
                    ((self.group3()[2] * other.group10()[1])
                        + (self.group1()[0] * other.group3()[3])
                        + (self.group0()[0] * other.group8()[3])
                        + (self.group0()[1] * other.group3()[2])),
                    ((self.group3()[0] * other.group10()[0])
                        + (self.group1()[1] * other.group3()[3])
                        + (self.group0()[2] * other.group3()[0])
                        + (self.group0()[1] * other.group8()[3])),
                    ((self.group3()[1] * other.group10()[2])
                        + (self.group0()[3] * other.group8()[2])
                        + (self.group0()[2] * other.group8()[3])
                        + (self.group0()[0] * other.group3()[1])),
                    (-(self.group2()[0] * other.group10()[2])
                        - (self.group2()[0] * other.group8()[0])
                        - (self.group1()[1] * other.group3()[1])
                        - (self.group1()[0] * other.group3()[0])),
                ])),
            // e1234
            (-(self.group3()[3] * other.group3()[3])
                + (self.group3()[3] * other.group0()[0])
                + (self.group3()[2] * other.group4()[2])
                + (self.group3()[1] * other.group4()[1])
                + (self.group3()[0] * other.group4()[0])
                - (self.group1()[3] * other[e35])
                - (self.group1()[2] * other.group4()[2])
                - (self.group1()[1] * other.group4()[1])
                - (self.group1()[0] * other.group4()[0])
                + (self.group0()[3] * other[e35])
                - (self.group0()[2] * other.group10()[0])
                + (self.group0()[2] * other.group8()[2])
                - (self.group0()[1] * other.group10()[1])
                + (self.group0()[1] * other.group8()[1])
                + (self.group0()[0] * other.group8()[0])
                - (self.group0()[0] * other.group10()[2])),
            // e12, e31, e23
            ((Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group3()[2], other.group3()[1], other.group3()[0]]))
                - (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group3()[2], self.group3()[1], self.group3()[0]]))
                + (Simd32x3::from(self.group2()[3]) * swizzle!(other.group4(), 2, 1, 0))
                + (Simd32x3::from(other[e35]) * Simd32x3::from([self.group2()[2], self.group2()[1], self.group2()[0]]))
                - (swizzle!(other.group4(), 0, 2, 1) * Simd32x3::from([self.group2()[1], self.group2()[0], self.group2()[2]]))
                + (swizzle!(other.group4(), 1, 0, 2) * Simd32x3::from([self.group2()[0], self.group2()[2], self.group2()[1]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group8()[2], other.group8()[1], other.group8()[0]]))
                + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[2], self.group1()[1], self.group1()[0]]))
                - (swizzle!(other.group10(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[0], self.group1()[2]]))
                + (swizzle!(other.group10(), 1, 2, 0) * Simd32x3::from([self.group1()[0], self.group1()[2], self.group1()[1]]))
                + (Simd32x3::from(self.group0()[3]) * other.group10())
                + (Simd32x3::from(other.group8()[3]) * Simd32x3::from([self.group0()[2], self.group0()[1], self.group0()[0]]))
                + Simd32x3::from([
                    ((self.group3()[1] * other.group8()[0]) - (self.group3()[0] * other.group8()[1]) + (self.group0()[0] * other.group3()[1])
                        - (self.group0()[1] * other.group3()[0])),
                    (-(self.group3()[2] * other.group8()[0]) + (self.group3()[0] * other.group8()[2]) + (self.group0()[2] * other.group3()[0])
                        - (self.group0()[0] * other.group3()[2])),
                    ((self.group3()[2] * other.group8()[1]) - (self.group3()[1] * other.group8()[2]) - (self.group0()[2] * other.group3()[1])
                        + (self.group0()[1] * other.group3()[2])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       61       94        0
    //    simd4       57       60        0
    // Totals...
    // yes simd      118      154        0
    //  no simd      289      334        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[3]]))
                + Simd32x4::from([
                    (-(self.group3()[3] * other.group0()[0]) - (self.group0()[1] * other.group0()[2])),
                    (-(self.group3()[3] * other.group0()[1]) - (self.group0()[2] * other.group0()[0])),
                    (-(self.group3()[3] * other.group0()[2]) - (self.group0()[0] * other.group0()[1])),
                    ((self.group3()[2] * other.group0()[2]) + (self.group3()[0] * other.group0()[0]) + (self.group3()[1] * other.group0()[1])),
                ])),
            // e23, e31, e12, e45
            ((swizzle!(self.group3(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))
                - (swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[2]]))
                - (swizzle!(self.group1(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))
                + (Simd32x4::from([1.0, 1.0, 1.0, -1.0])
                    * swizzle!(other.group0(), 3, 3, 3, 1)
                    * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]))),
            // e15, e25, e35, e1234
            ((swizzle!(other.group0(), 3, 3, 3, 2) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[2]]))
                + (swizzle!(other.group0(), 0, 1, 2, 0) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[0]]))
                + (swizzle!(other.group0(), 3, 0, 3, 1) * Simd32x4::from([self.group1()[0], self.group2()[2], self.group1()[2], self.group0()[1]]))
                + Simd32x4::from([
                    (-(self.group2()[2] * other.group0()[1]) + (self.group2()[1] * other.group0()[2])),
                    ((self.group1()[1] * other.group0()[3]) - (self.group2()[0] * other.group0()[2])),
                    (-(self.group2()[1] * other.group0()[0]) + (self.group2()[0] * other.group0()[1])),
                    0.0,
                ])),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]))
                + (swizzle!(other.group0(), 2, 0, 1, 3) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[3]]))
                + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + Simd32x4::from([
                    (self.group0()[3] * other.group0()[0]),
                    (self.group0()[3] * other.group0()[1]),
                    (self.group0()[3] * other.group0()[2]),
                    (-(self.group2()[1] * other.group0()[1]) - (self.group2()[0] * other.group0()[0])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       92      126        0
    //    simd4       53       56        0
    // Totals...
    // yes simd      145      182        0
    //  no simd      304      350        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other[e2]]))
                - (swizzle!(self.group3(), 0, 1, 2, 2) * swizzle!(other.group0(), 3, 3, 3, 2))
                + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))
                - (swizzle!(other.group0(), 1, 2, 0, 1) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[1]]))
                + (Simd32x4::from([1.0, 1.0, 1.0, -1.0])
                    * swizzle!(other.group0(), 2, 0, 1, 0)
                    * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]))),
            // e415, e425, e435, e321
            (-(swizzle!(self.group3(), 2, 0, 1, 3) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other[e2]]))
                + (swizzle!(other.group0(), 2, 0, 1, 3) * Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[3]]))
                + Simd32x4::from([
                    ((self.group2()[0] * other.group0()[3]) + (self.group0()[0] * other[e2]) + (self.group1()[3] * other.group0()[0])),
                    ((self.group2()[1] * other.group0()[3]) + (self.group0()[1] * other[e2]) + (self.group1()[3] * other.group0()[1])),
                    ((self.group2()[2] * other.group0()[3]) + (self.group0()[2] * other[e2]) + (self.group1()[3] * other.group0()[2])),
                    (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                ])),
            // e235, e315, e125, e5
            ((Simd32x4::from(other[e2]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[3]]))
                + (swizzle!(self.group2(), 2, 0, 1, 2) * swizzle!(other.group0(), 1, 2, 0, 2))
                + (self.group1() * Simd32x4::from(other[e2]))
                + Simd32x4::from([
                    (-(self.group2()[3] * other.group0()[0]) - (self.group2()[1] * other.group0()[2])),
                    (-(self.group2()[3] * other.group0()[1]) - (self.group2()[2] * other.group0()[0])),
                    (-(self.group2()[3] * other.group0()[2]) - (self.group2()[0] * other.group0()[1])),
                    ((self.group2()[1] * other.group0()[1]) + (self.group2()[0] * other.group0()[0])),
                ])),
            // e1, e2, e3, e4
            ((Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[3]]))
                - (swizzle!(self.group1(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))
                - (swizzle!(self.group0(), 0, 1, 2, 2) * Simd32x4::from([other[e2], other[e2], other[e2], other.group0()[2]]))
                + Simd32x4::from([
                    ((self.group1()[1] * other.group0()[2]) + (self.group0()[3] * other.group0()[0])),
                    ((self.group1()[2] * other.group0()[0]) + (self.group0()[3] * other.group0()[1])),
                    ((self.group1()[0] * other.group0()[1]) + (self.group0()[3] * other.group0()[2])),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       52       74        0
    //    simd4       47       54        0
    // Totals...
    // yes simd       99      128        0
    //  no simd      240      290        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (self.group0() * Simd32x4::from(other[scalar])),
            // e23, e31, e12, e45
            (self.group1() * Simd32x4::from(other[scalar]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e15, e25, e35, e1234
            (Simd32x4::from(other[scalar]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]])),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other[scalar]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[3]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       68      102        0
    //    simd4       59       62        0
    // Totals...
    // yes simd      127      164        0
    //  no simd      304      350        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((Simd32x4::from(other[e4315]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))
                + (swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[3]]))
                + Simd32x4::from([
                    (-(self.group3()[3] * other.group0()[0]) - (self.group3()[0] * other[e4315]) - (self.group0()[1] * other.group0()[2])),
                    (-(self.group3()[3] * other.group0()[1]) - (self.group3()[1] * other[e4315]) - (self.group0()[2] * other.group0()[0])),
                    (-(self.group3()[3] * other.group0()[2]) - (self.group3()[2] * other[e4315]) - (self.group0()[0] * other.group0()[1])),
                    ((self.group3()[2] * other.group0()[2]) + (self.group3()[1] * other.group0()[1]) + (self.group3()[0] * other.group0()[0])),
                ])),
            // e23, e31, e12, e45
            ((swizzle!(self.group3(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))
                - (swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[2]]))
                - (swizzle!(self.group1(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))
                + Simd32x4::from([
                    ((self.group2()[0] * other[e4315]) + (self.group0()[0] * other.group0()[3])),
                    ((self.group2()[1] * other[e4315]) + (self.group0()[1] * other.group0()[3])),
                    ((self.group2()[2] * other[e4315]) + (self.group0()[2] * other.group0()[3])),
                    (-(self.group2()[3] * other[e4315]) - (self.group1()[1] * other.group0()[1])),
                ])),
            // e15, e25, e35, e1234
            ((swizzle!(other.group0(), 3, 3, 3, 2) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[2]]))
                + (swizzle!(other.group0(), 0, 1, 2, 0) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[0]]))
                + (swizzle!(other.group0(), 3, 0, 3, 1) * Simd32x4::from([self.group1()[0], self.group2()[2], self.group1()[2], self.group0()[1]]))
                + Simd32x4::from([
                    (-(self.group2()[2] * other.group0()[1]) + (self.group2()[1] * other.group0()[2])),
                    ((self.group1()[1] * other.group0()[3]) - (self.group2()[0] * other.group0()[2])),
                    (-(self.group2()[1] * other.group0()[0]) + (self.group2()[0] * other.group0()[1])),
                    (-(self.group1()[3] * other[e4315]) + (self.group0()[3] * other[e4315])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(self.group2(), 0, 1, 2, 2) * Simd32x4::from([other[e4315], other[e4315], other[e4315], other.group0()[2]]))
                - (swizzle!(other.group0(), 1, 2, 0, 1) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[1]]))
                + (swizzle!(other.group0(), 2, 0, 1, 3) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[3]]))
                + (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]]))
                + (Simd32x4::from([1.0, 1.0, 1.0, -1.0])
                    * swizzle!(other.group0(), 0, 1, 2, 0)
                    * Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group2()[0]]))),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      152      190        0
    //    simd4       82       83        0
    // Totals...
    // yes simd      234      273        0
    //  no simd      480      522        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group2()[3]]))
                + (other.group1() * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group1()[3]]))
                + (swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group0()[3]]))
                - (swizzle!(self.group3(), 1, 2, 2, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group3()[3], other.group3()[2]]))
                - (swizzle!(self.group3(), 0, 1, 0, 1) * Simd32x4::from([other.group3()[3], other.group3()[3], other.group0()[1], other.group3()[1]]))
                - (swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[2]]))
                - (swizzle!(other.group0(), 1, 2, 0, 1) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[1]]))
                + (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))
                - (swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group3()[1], other.group1()[2], other.group3()[0], other.group2()[2]]))
                - (swizzle!(self.group0(), 2, 0, 1, 0) * Simd32x4::from([other.group1()[1], other.group3()[2], other.group1()[0], other.group2()[0]]))
                + Simd32x4::from([
                    ((self.group1()[1] * other.group0()[2])
                        + (self.group0()[3] * other.group0()[0])
                        + (self.group0()[1] * other.group3()[2])
                        + (self.group0()[1] * other.group1()[2])
                        + (self.group0()[0] * other.group0()[3])
                        + (self.group0()[0] * other.group1()[3])),
                    ((self.group1()[2] * other.group0()[0])
                        + (self.group0()[3] * other.group0()[1])
                        + (self.group0()[2] * other.group3()[0])
                        + (self.group0()[2] * other.group1()[0])
                        + (self.group0()[1] * other.group1()[3])
                        + (self.group0()[1] * other.group0()[3])),
                    ((self.group1()[0] * other.group0()[1])
                        + (self.group0()[3] * other.group0()[2])
                        + (self.group0()[2] * other.group1()[3])
                        + (self.group0()[2] * other.group0()[3])
                        + (self.group0()[0] * other.group1()[1])
                        + (self.group0()[0] * other.group3()[1])),
                    (-(self.group3()[0] * other.group3()[0])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[2] * other.group1()[2])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e321
            ((swizzle!(other.group2(), 0, 1, 2, 2) * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group0()[2]]))
                - (swizzle!(self.group3(), 2, 0, 1, 3) * Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group2()[3]]))
                + (swizzle!(other.group3(), 2, 0, 1, 3) * Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[3]]))
                + (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[3]]))
                + (other.group0() * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group1()[3]]))
                - (swizzle!(self.group2(), 2, 0, 1, 2) * swizzle!(other.group0(), 1, 2, 0, 2))
                - (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[2]]))
                + (swizzle!(self.group0(), 3, 3, 3, 0) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[0]]))
                + (swizzle!(self.group0(), 0, 2, 2, 1) * swizzle!(other.group2(), 3, 0, 3, 1))
                + Simd32x4::from([
                    ((self.group2()[1] * other.group0()[2])
                        + (self.group2()[0] * other.group3()[3])
                        + (self.group1()[3] * other.group3()[0])
                        + (self.group1()[1] * other.group1()[2])
                        + (self.group1()[0] * other.group0()[3])
                        - (self.group0()[2] * other.group2()[1])
                        + (self.group0()[1] * other.group2()[2])),
                    ((self.group2()[2] * other.group0()[0])
                        + (self.group2()[1] * other.group3()[3])
                        + (self.group1()[3] * other.group3()[1])
                        + (self.group1()[2] * other.group1()[0])
                        + (self.group1()[1] * other.group0()[3])
                        - (self.group0()[0] * other.group2()[2])
                        + (self.group0()[1] * other.group2()[3])),
                    ((self.group2()[2] * other.group3()[3])
                        + (self.group2()[0] * other.group0()[1])
                        + (self.group1()[3] * other.group3()[2])
                        + (self.group1()[2] * other.group0()[3])
                        + (self.group1()[0] * other.group1()[1])
                        + (self.group0()[0] * other.group2()[1])
                        - (self.group0()[1] * other.group2()[0])),
                    (-(self.group3()[1] * other.group1()[1])
                        - (self.group3()[0] * other.group1()[0])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[2] * other.group3()[2])
                        - (self.group1()[1] * other.group3()[1])
                        - (self.group1()[0] * other.group3()[0])),
                ])),
            // e235, e315, e125, e5
            (-(swizzle!(self.group3(), 2, 0, 1, 2) * swizzle!(other.group2(), 1, 2, 0, 2))
                + (swizzle!(other.group2(), 2, 0, 3, 3) * Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[2], self.group1()[3]]))
                + (swizzle!(other.group2(), 3, 3, 1, 3) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[0], self.group0()[3]]))
                - (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))
                + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                + (Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group0()[3], other.group3()[2]]))
                - (Simd32x4::from(self.group2()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[3], other.group1()[2]]))
                - (Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group3()[2], other.group1()[3], other.group1()[0], other.group1()[1]]))
                + (Simd32x4::from(self.group2()[1]) * Simd32x4::from([other.group1()[2], other.group0()[3], other.group3()[0], other.group3()[1]]))
                - (Simd32x4::from(self.group2()[0]) * Simd32x4::from([other.group1()[3], other.group1()[2], other.group3()[1], other.group1()[0]]))
                + (Simd32x4::from(self.group2()[0]) * Simd32x4::from([other.group0()[3], other.group3()[2], other.group1()[1], other.group3()[0]]))
                - (swizzle!(other.group2(), 1, 2, 0, 1) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[1]]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group2()[0])
                        + (self.group1()[1] * other.group2()[2])
                        + (self.group0()[3] * other.group2()[0])
                        + (self.group1()[0] * other.group2()[3])),
                    ((self.group1()[3] * other.group2()[1])
                        + (self.group1()[2] * other.group2()[0])
                        + (self.group1()[1] * other.group2()[3])
                        + (self.group0()[3] * other.group2()[1])),
                    ((self.group1()[3] * other.group2()[2])
                        + (self.group1()[2] * other.group2()[3])
                        + (self.group0()[3] * other.group2()[2])
                        + (self.group1()[0] * other.group2()[1])),
                    (-(self.group3()[0] * other.group2()[0])
                        - (self.group1()[2] * other.group2()[2])
                        - (self.group1()[1] * other.group2()[1])
                        - (self.group1()[0] * other.group2()[0])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group0()[2]]))
                + (swizzle!(self.group3(), 1, 2, 2, 3) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group1()[3]]))
                + (swizzle!(self.group3(), 0, 1, 0, 3) * Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group0()[3]]))
                + (swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[2]]))
                - (swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[2]]))
                + (swizzle!(other.group0(), 2, 0, 1, 1) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group3()[1]]))
                + (Simd32x4::from(other.group3()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[3]]))
                - (swizzle!(self.group1(), 2, 0, 1, 3) * swizzle!(other.group3(), 1, 2, 0, 3))
                - (swizzle!(self.group0(), 0, 2, 2, 2) * Simd32x4::from([other.group2()[3], other.group2()[0], other.group2()[3], other.group3()[2]]))
                - (swizzle!(self.group0(), 1, 1, 0, 1) * Simd32x4::from([other.group2()[2], other.group2()[3], other.group2()[1], other.group3()[1]]))
                + Simd32x4::from([
                    (-(self.group3()[3] * other.group2()[0])
                        + (self.group1()[3] * other.group1()[0])
                        + (self.group1()[1] * other.group3()[2])
                        + (self.group1()[0] * other.group1()[3])
                        + (self.group0()[3] * other.group3()[0])
                        + (self.group0()[2] * other.group2()[1])),
                    (-(self.group3()[3] * other.group2()[1])
                        + (self.group1()[3] * other.group1()[1])
                        + (self.group1()[2] * other.group3()[0])
                        + (self.group1()[1] * other.group1()[3])
                        + (self.group0()[3] * other.group3()[1])
                        + (self.group0()[0] * other.group2()[2])),
                    (-(self.group3()[3] * other.group2()[2])
                        + (self.group1()[3] * other.group1()[2])
                        + (self.group1()[2] * other.group1()[3])
                        + (self.group1()[0] * other.group3()[1])
                        + (self.group0()[3] * other.group3()[2])
                        + (self.group0()[1] * other.group2()[0])),
                    ((self.group3()[0] * other.group0()[0])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group1()[1])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group3()[0])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      108      146        0
    //    simd4       93       94        0
    // Totals...
    // yes simd      201      240        0
    //  no simd      480      522        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                + (swizzle!(self.group3(), 2, 0, 1, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[2]]))
                - (swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group2()[2]]))
                - (swizzle!(other.group2(), 3, 3, 3, 2) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[2]]))
                - (swizzle!(other.group0(), 0, 1, 2, 1) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[1]]))
                - (swizzle!(other.group0(), 1, 2, 0, 0) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]))
                + (swizzle!(other.group0(), 2, 0, 1, 3) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[3]]))
                + (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[3]]))
                + (swizzle!(other.group3(), 1, 2, 0, 1) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[1]]))
                - (swizzle!(self.group0(), 2, 2, 2, 0) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[3], other.group2()[0]]))
                - (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group3()[2], other.group1()[3], other.group1()[0], other.group2()[1]]))
                + Simd32x4::from([
                    (-(self.group3()[3] * other.group3()[0])
                        + (self.group0()[3] * other.group0()[0])
                        + (self.group0()[1] * other.group1()[2])
                        + (self.group0()[0] * other.group0()[3])
                        - (self.group0()[0] * other.group1()[3])),
                    (-(self.group3()[3] * other.group3()[1])
                        + (self.group0()[3] * other.group0()[1])
                        + (self.group0()[2] * other.group1()[0])
                        + (self.group0()[1] * other.group0()[3])
                        - (self.group0()[0] * other.group1()[2])),
                    (-(self.group3()[3] * other.group3()[2])
                        + (self.group0()[3] * other.group0()[2])
                        + (self.group0()[2] * other.group0()[3])
                        + (self.group0()[0] * other.group1()[1])
                        - (self.group0()[0] * other.group3()[1])),
                    ((self.group3()[0] * other.group3()[0])
                        - (self.group1()[3] * other.group1()[3])
                        - (self.group1()[2] * other.group1()[2])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])),
                ])),
            // e23, e31, e12, e45
            ((Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                + (swizzle!(self.group3(), 2, 0, 1, 2) * Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[2]]))
                - (swizzle!(other.group3(), 2, 0, 1, 2) * Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[2]]))
                + (swizzle!(self.group2(), 3, 3, 3, 2) * swizzle!(other.group0(), 0, 1, 2, 2))
                - (swizzle!(self.group2(), 2, 0, 1, 3) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group2()[3]]))
                + (swizzle!(self.group2(), 1, 2, 2, 1) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group2()[3], other.group0()[1]]))
                + (swizzle!(self.group2(), 0, 1, 0, 0) * Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[1], other.group0()[0]]))
                - (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group0()[3]]))
                - (swizzle!(self.group1(), 2, 0, 1, 1) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[1]]))
                + (swizzle!(other.group1(), 2, 0, 1, 1) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[1]]))
                + (swizzle!(other.group1(), 0, 1, 2, 0) * Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group3()[0]]))
                - (swizzle!(self.group0(), 2, 0, 1, 2) * swizzle!(other.group2(), 1, 2, 0, 2))
                + (swizzle!(self.group0(), 0, 2, 2, 3) * Simd32x4::from([other.group3()[3], other.group2()[0], other.group3()[3], other.group1()[3]]))
                + Simd32x4::from([
                    (-(self.group3()[0] * other.group1()[3]) + (self.group1()[0] * other.group0()[3]) + (self.group0()[1] * other.group2()[2])),
                    (-(self.group3()[1] * other.group1()[3]) + (self.group1()[1] * other.group0()[3]) + (self.group0()[1] * other.group3()[3])),
                    (-(self.group3()[2] * other.group1()[3]) + (self.group1()[2] * other.group0()[3]) + (self.group0()[0] * other.group2()[1])),
                    (-(self.group1()[0] * other.group3()[0]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
            // e15, e25, e35, e1234
            (-(swizzle!(self.group3(), 2, 0, 1, 3) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]))
                + (swizzle!(self.group3(), 1, 2, 2, 3) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group3()[3], other.group0()[3]]))
                + (swizzle!(self.group3(), 0, 1, 0, 2) * Simd32x4::from([other.group3()[3], other.group3()[3], other.group2()[1], other.group0()[2]]))
                + (swizzle!(other.group3(), 0, 1, 2, 2) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[2]]))
                - (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[2]]))
                + (swizzle!(other.group3(), 2, 0, 1, 1) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[1]]))
                + (swizzle!(other.group0(), 3, 3, 3, 1) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[1]]))
                + (other.group2() * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[3]]))
                - (swizzle!(self.group1(), 2, 0, 1, 3) * swizzle!(other.group2(), 1, 2, 0, 3))
                + (swizzle!(self.group0(), 3, 3, 3, 0) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[0]]))
                + Simd32x4::from([
                    ((self.group2()[3] * other.group1()[0]) - (self.group2()[2] * other.group3()[1])
                        + (self.group2()[1] * other.group1()[2])
                        + (self.group2()[0] * other.group1()[3])
                        + (self.group1()[1] * other.group2()[2])
                        + (self.group1()[0] * other.group3()[3])),
                    ((self.group2()[3] * other.group1()[1]) + (self.group2()[2] * other.group1()[0]) + (self.group2()[1] * other.group1()[3])
                        - (self.group2()[0] * other.group3()[2])
                        + (self.group1()[2] * other.group2()[0])
                        + (self.group1()[1] * other.group3()[3])),
                    ((self.group2()[3] * other.group1()[2]) + (self.group2()[2] * other.group1()[3]) - (self.group2()[1] * other.group3()[0])
                        + (self.group2()[0] * other.group1()[1])
                        + (self.group1()[2] * other.group3()[3])
                        + (self.group1()[0] * other.group2()[1])),
                    ((self.group3()[0] * other.group0()[0])
                        - (self.group1()[2] * other.group0()[2])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group1()[1])
                        - (self.group0()[0] * other.group1()[0])),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group1(), 1, 2, 0, 3) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]))
                - (swizzle!(self.group3(), 1, 2, 2, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group2()[2]]))
                - (swizzle!(self.group3(), 0, 1, 0, 1) * Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group2()[1]]))
                - (swizzle!(self.group2(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group3()[2]]))
                + (swizzle!(self.group2(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))
                - (swizzle!(self.group2(), 1, 2, 2, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group2()[3], other.group1()[2]]))
                - (swizzle!(self.group2(), 0, 1, 0, 1) * Simd32x4::from([other.group2()[3], other.group2()[3], other.group0()[1], other.group3()[1]]))
                - (swizzle!(other.group1(), 0, 1, 2, 1) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group2()[1]]))
                - (swizzle!(other.group3(), 1, 2, 0, 0) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]))
                + (swizzle!(self.group1(), 1, 2, 2, 3) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[3], other.group3()[3]]))
                + (swizzle!(other.group3(), 0, 1, 1, 3) * Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[0], self.group0()[3]]))
                - (swizzle!(other.group2(), 1, 2, 0, 0) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group3()[0]]))
                + Simd32x4::from([
                    ((self.group3()[3] * other.group2()[0])
                        + (self.group1()[0] * other.group1()[3])
                        + (self.group0()[0] * other.group3()[3])
                        + (self.group0()[1] * other.group2()[2])),
                    ((self.group3()[3] * other.group2()[1])
                        + (self.group1()[1] * other.group1()[3])
                        + (self.group0()[2] * other.group2()[0])
                        + (self.group0()[1] * other.group3()[3])),
                    ((self.group3()[3] * other.group2()[2])
                        + (self.group0()[3] * other.group3()[2])
                        + (self.group0()[2] * other.group3()[3])
                        + (self.group0()[0] * other.group2()[1])),
                    (-(self.group2()[0] * other.group1()[0])
                        - (self.group1()[2] * other.group2()[2])
                        - (self.group1()[1] * other.group2()[1])
                        - (self.group1()[0] * other.group2()[0])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl InfixAntiSandwich for VersorOdd {}
impl AntiSandwich<AntiScalar> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       62        0
    //    simd4       50       55        0
    // Totals...
    // yes simd       90      117        0
    //  no simd      240      282        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (self.group0() * Simd32x4::from(other[e12345])),
            // e23, e31, e12, e45
            (self.group1() * Simd32x4::from(other[e12345])),
            // e15, e25, e35, e1234
            (self.group2() * Simd32x4::from(other[e12345])),
            // e4235, e4315, e4125, e3215
            (self.group3() * Simd32x4::from(other[e12345])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      112      150        0
    //    simd4       68       69        0
    // Totals...
    // yes simd      180      219        0
    //  no simd      384      426        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(swizzle!(self.group1(), 2, 0, 1, 3) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]))
                - (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    (-(self.group3()[2] * other.group0()[1])
                        + (self.group3()[1] * other.group0()[2])
                        + (self.group2()[3] * other.group1()[0])
                        + (self.group1()[3] * other.group0()[0])
                        + (self.group1()[1] * other.group0()[2])
                        + (self.group0()[3] * other.group0()[0])
                        + (self.group0()[0] * other.group1()[3])
                        + (self.group0()[1] * other.group1()[2])),
                    ((self.group3()[2] * other.group0()[0]) - (self.group3()[0] * other.group0()[2])
                        + (self.group2()[3] * other.group1()[1])
                        + (self.group1()[3] * other.group0()[1])
                        + (self.group1()[2] * other.group0()[0])
                        + (self.group0()[3] * other.group0()[1])
                        + (self.group0()[2] * other.group1()[0])
                        + (self.group0()[1] * other.group1()[3])),
                    (-(self.group3()[1] * other.group0()[0])
                        + (self.group3()[0] * other.group0()[1])
                        + (self.group2()[3] * other.group1()[2])
                        + (self.group1()[3] * other.group0()[2])
                        + (self.group1()[0] * other.group0()[1])
                        + (self.group0()[3] * other.group0()[2])
                        + (self.group0()[2] * other.group1()[3])
                        + (self.group0()[0] * other.group1()[1])),
                    (-(self.group2()[2] * other.group0()[2])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e23, e31, e12, e45
            (-(swizzle!(self.group3(), 0, 1, 2, 2) * swizzle!(other.group1(), 3, 3, 3, 2))
                + (swizzle!(self.group2(), 3, 3, 3, 2) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[2]]))
                + (swizzle!(self.group2(), 1, 2, 0, 1) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[1]]))
                - (swizzle!(other.group1(), 1, 2, 0, 1) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[1]]))
                - (swizzle!(self.group0(), 2, 0, 1, 3) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]))
                + Simd32x4::from([
                    ((self.group3()[3] * other.group0()[0]) - (self.group2()[2] * other.group0()[1])
                        + (self.group1()[1] * other.group1()[2])
                        + (self.group0()[3] * other.group1()[0])
                        + (self.group0()[1] * other.group2()[2])),
                    ((self.group3()[3] * other.group0()[1]) - (self.group2()[0] * other.group0()[2])
                        + (self.group1()[2] * other.group1()[0])
                        + (self.group0()[3] * other.group1()[1])
                        + (self.group0()[2] * other.group2()[0])),
                    ((self.group3()[3] * other.group0()[2]) - (self.group2()[1] * other.group0()[0])
                        + (self.group1()[0] * other.group1()[1])
                        + (self.group0()[3] * other.group1()[2])
                        + (self.group0()[0] * other.group2()[1])),
                    (-(self.group3()[0] * other.group1()[0]) + (self.group2()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e15, e25, e35, e1234
            ((other.group1() * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group2()[3]]))
                - (swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[2]]))
                - (swizzle!(other.group1(), 1, 3, 3, 2) * Simd32x4::from([self.group2()[2], self.group2()[1], self.group2()[2], self.group0()[2]]))
                - (swizzle!(other.group1(), 3, 2, 0, 0) * Simd32x4::from([self.group2()[0], self.group2()[0], self.group2()[1], self.group0()[0]]))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[2]]))
                - (swizzle!(self.group1(), 2, 0, 1, 1) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[1]]))
                + Simd32x4::from([
                    ((self.group3()[2] * other.group2()[1])
                        + (self.group2()[1] * other.group1()[2])
                        + (self.group0()[3] * other.group2()[0])
                        + (self.group1()[1] * other.group2()[2])),
                    ((self.group3()[0] * other.group2()[2])
                        + (self.group2()[2] * other.group1()[0])
                        + (self.group1()[2] * other.group2()[0])
                        + (self.group0()[3] * other.group2()[1])),
                    ((self.group3()[1] * other.group2()[0])
                        + (self.group2()[0] * other.group1()[1])
                        + (self.group0()[3] * other.group2()[2])
                        + (self.group1()[0] * other.group2()[1])),
                    (-(self.group3()[1] * other.group0()[1])
                        - (self.group3()[0] * other.group0()[0])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[2]]))
                + (swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[2]]))
                - (swizzle!(self.group2(), 1, 2, 0, 1) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[1]]))
                - (swizzle!(other.group1(), 3, 3, 3, 0) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[0]]))
                + Simd32x4::from([
                    ((self.group2()[3] * other.group2()[0])
                        + (self.group2()[2] * other.group0()[1])
                        + (self.group1()[3] * other.group1()[0])
                        + (self.group0()[1] * other.group2()[2])
                        - (self.group0()[2] * other.group2()[1])),
                    ((self.group2()[3] * other.group2()[1]) + (self.group2()[0] * other.group0()[2]) + (self.group1()[3] * other.group1()[1])
                        - (self.group0()[0] * other.group2()[2])
                        + (self.group0()[2] * other.group2()[0])),
                    ((self.group2()[3] * other.group2()[2])
                        + (self.group2()[1] * other.group0()[0])
                        + (self.group1()[3] * other.group1()[2])
                        + (self.group0()[0] * other.group2()[1])
                        - (self.group0()[1] * other.group2()[0])),
                    ((self.group3()[1] * other.group2()[1]) + (self.group3()[0] * other.group2()[0])
                        - (self.group1()[2] * other.group2()[2])
                        - (self.group1()[0] * other.group2()[0])
                        - (self.group1()[1] * other.group2()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      100      138        0
    //    simd4       75       76        0
    // Totals...
    // yes simd      175      214        0
    //  no simd      400      442        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(swizzle!(self.group1(), 2, 0, 1, 3) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[3]]))
                + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                - (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    (-(self.group3()[2] * other.group0()[1])
                        + (self.group3()[1] * other.group0()[2])
                        + (self.group2()[3] * other.group1()[0])
                        + (self.group1()[3] * other.group0()[0])
                        + (self.group1()[1] * other.group0()[2])
                        + (self.group0()[1] * other.group1()[2])
                        + (self.group0()[0] * other.group1()[3])
                        + (self.group0()[0] * other.group2()[3])),
                    ((self.group3()[2] * other.group0()[0]) - (self.group3()[0] * other.group0()[2])
                        + (self.group2()[3] * other.group1()[1])
                        + (self.group1()[3] * other.group0()[1])
                        + (self.group1()[2] * other.group0()[0])
                        + (self.group0()[2] * other.group1()[0])
                        + (self.group0()[1] * other.group2()[3])
                        + (self.group0()[1] * other.group1()[3])),
                    (-(self.group3()[1] * other.group0()[0])
                        + (self.group3()[0] * other.group0()[1])
                        + (self.group2()[3] * other.group1()[2])
                        + (self.group1()[3] * other.group0()[2])
                        + (self.group1()[0] * other.group0()[1])
                        + (self.group0()[2] * other.group2()[3])
                        + (self.group0()[2] * other.group1()[3])
                        + (self.group0()[0] * other.group1()[1])),
                    (-(self.group2()[2] * other.group0()[2])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e23, e31, e12, e45
            (-(swizzle!(self.group3(), 0, 1, 2, 2) * swizzle!(other.group1(), 3, 3, 3, 2))
                + (swizzle!(self.group2(), 3, 3, 3, 2) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[2]]))
                + (swizzle!(self.group2(), 1, 2, 0, 1) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group0()[1]]))
                - (swizzle!(other.group1(), 1, 2, 0, 1) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[1]]))
                + (swizzle!(self.group1(), 1, 2, 2, 3) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group2()[3], other.group2()[3]]))
                - (swizzle!(self.group0(), 2, 0, 1, 3) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]))
                + Simd32x4::from([
                    ((self.group3()[3] * other.group0()[0]) - (self.group2()[2] * other.group0()[1])
                        + (self.group1()[0] * other.group2()[3])
                        + (self.group0()[3] * other.group1()[0])
                        + (self.group0()[1] * other.group2()[2])),
                    ((self.group3()[3] * other.group0()[1]) - (self.group2()[0] * other.group0()[2])
                        + (self.group1()[1] * other.group2()[3])
                        + (self.group0()[3] * other.group1()[1])
                        + (self.group0()[2] * other.group2()[0])),
                    ((self.group3()[3] * other.group0()[2]) - (self.group2()[1] * other.group0()[0])
                        + (self.group1()[0] * other.group1()[1])
                        + (self.group0()[3] * other.group1()[2])
                        + (self.group0()[0] * other.group2()[1])),
                    (-(self.group3()[0] * other.group1()[0]) + (self.group2()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e15, e25, e35, e1234
            ((other.group1() * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group2()[3]]))
                + (swizzle!(other.group2(), 1, 2, 0, 3) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]))
                - (swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group0()[2]]))
                - (swizzle!(other.group1(), 1, 3, 3, 2) * Simd32x4::from([self.group2()[2], self.group2()[1], self.group2()[2], self.group0()[2]]))
                - (swizzle!(other.group1(), 3, 2, 0, 0) * Simd32x4::from([self.group2()[0], self.group2()[0], self.group2()[1], self.group0()[0]]))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[2]]))
                - (swizzle!(self.group1(), 2, 0, 1, 1) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[1]]))
                + Simd32x4::from([
                    ((self.group2()[1] * other.group1()[2])
                        + (self.group2()[0] * other.group2()[3])
                        + (self.group0()[3] * other.group2()[0])
                        + (self.group1()[1] * other.group2()[2])),
                    ((self.group2()[2] * other.group1()[0])
                        + (self.group2()[1] * other.group2()[3])
                        + (self.group1()[2] * other.group2()[0])
                        + (self.group0()[3] * other.group2()[1])),
                    ((self.group2()[2] * other.group2()[3])
                        + (self.group2()[0] * other.group1()[1])
                        + (self.group0()[3] * other.group2()[2])
                        + (self.group1()[0] * other.group2()[1])),
                    (-(self.group3()[1] * other.group0()[1])
                        - (self.group3()[0] * other.group0()[0])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[2]]))
                + (swizzle!(self.group3(), 1, 2, 2, 3) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group2()[3], other.group2()[3]]))
                + (swizzle!(self.group3(), 0, 1, 0, 2) * Simd32x4::from([other.group2()[3], other.group2()[3], other.group1()[1], other.group2()[2]]))
                + (swizzle!(other.group2(), 0, 1, 2, 1) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[1]]))
                - (swizzle!(self.group2(), 1, 2, 0, 1) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[1]]))
                - (swizzle!(other.group1(), 3, 3, 3, 0) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group2()[0]]))
                + (swizzle!(other.group2(), 2, 0, 1, 0) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]))
                - (swizzle!(other.group2(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + Simd32x4::from([
                    ((self.group2()[2] * other.group0()[1]) + (self.group1()[3] * other.group1()[0])),
                    ((self.group2()[0] * other.group0()[2]) + (self.group1()[3] * other.group1()[1])),
                    ((self.group2()[1] * other.group0()[0]) + (self.group1()[3] * other.group1()[2])),
                    (-(self.group1()[0] * other.group2()[0]) - (self.group1()[1] * other.group2()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      112      150        0
    //    simd4       68       69        0
    // Totals...
    // yes simd      180      219        0
    //  no simd      384      426        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (-(other.group1() * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group1()[3]]))
                + (swizzle!(self.group1(), 2, 0, 1, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[2]]))
                + (swizzle!(other.group1(), 1, 2, 3, 1) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[2], self.group1()[1]]))
                + (swizzle!(other.group1(), 3, 3, 0, 0) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[1], self.group1()[0]]))
                + Simd32x4::from([
                    ((self.group3()[2] * other.group0()[1])
                        - (self.group3()[1] * other.group0()[2])
                        - (self.group1()[3] * other.group0()[0])
                        - (self.group1()[1] * other.group0()[2])
                        - (self.group0()[3] * other.group0()[0])
                        - (self.group0()[1] * other.group1()[2])),
                    (-(self.group3()[2] * other.group0()[0]) + (self.group3()[0] * other.group0()[2])
                        - (self.group1()[3] * other.group0()[1])
                        - (self.group1()[2] * other.group0()[0])
                        - (self.group0()[3] * other.group0()[1])
                        - (self.group0()[2] * other.group1()[0])),
                    ((self.group3()[1] * other.group0()[0])
                        - (self.group3()[0] * other.group0()[1])
                        - (self.group1()[3] * other.group0()[2])
                        - (self.group1()[0] * other.group0()[1])
                        - (self.group0()[3] * other.group0()[2])
                        - (self.group0()[0] * other.group1()[1])),
                    ((self.group2()[2] * other.group0()[2])
                        + (self.group2()[1] * other.group0()[1])
                        + (self.group2()[0] * other.group0()[0])
                        + (self.group0()[2] * other.group2()[2])
                        + (self.group0()[0] * other.group2()[0])
                        + (self.group0()[1] * other.group2()[1])),
                ])),
            // e415, e425, e435, e321
            (-(swizzle!(self.group3(), 3, 3, 3, 2) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[2]]))
                - (swizzle!(self.group3(), 0, 1, 2, 1) * swizzle!(other.group1(), 3, 3, 3, 1))
                + (swizzle!(self.group2(), 2, 0, 1, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[2]]))
                + (swizzle!(other.group1(), 1, 2, 0, 3) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[3]]))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[0]]))
                - (swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[2]]))
                - (swizzle!(self.group0(), 1, 2, 0, 0) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group2()[0]]))
                + Simd32x4::from([
                    (-(self.group2()[3] * other.group2()[0]) - (self.group2()[1] * other.group0()[2]) + (self.group0()[2] * other.group2()[1])),
                    (-(self.group2()[3] * other.group2()[1]) - (self.group2()[2] * other.group0()[0]) + (self.group0()[0] * other.group2()[2])),
                    (-(self.group2()[3] * other.group2()[2]) - (self.group2()[0] * other.group0()[1]) + (self.group0()[1] * other.group2()[0])),
                    ((self.group2()[1] * other.group0()[1]) + (self.group2()[0] * other.group0()[0]) - (self.group0()[1] * other.group2()[1])),
                ])),
            // e235, e315, e125, e5
            (-(Simd32x4::from(self.group3()[3]) * other.group1())
                - (swizzle!(self.group3(), 2, 0, 1, 2) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group2()[2]]))
                + (Simd32x4::from(other.group2()[2]) * Simd32x4::from([self.group3()[1], self.group1()[0], self.group1()[3], self.group1()[2]]))
                + (swizzle!(self.group2(), 2, 0, 1, 2) * swizzle!(other.group1(), 1, 2, 0, 2))
                + (Simd32x4::from(other.group2()[0]) * Simd32x4::from([self.group1()[3], self.group3()[2], self.group1()[1], self.group1()[0]]))
                + (Simd32x4::from(other.group2()[1]) * Simd32x4::from([self.group1()[2], self.group1()[3], self.group3()[0], self.group1()[1]]))
                + Simd32x4::from([
                    (-(self.group2()[1] * other.group1()[2])
                        - (self.group2()[0] * other.group1()[3])
                        - (self.group0()[3] * other.group2()[0])
                        - (self.group1()[1] * other.group2()[2])),
                    (-(self.group2()[2] * other.group1()[0])
                        - (self.group2()[1] * other.group1()[3])
                        - (self.group1()[2] * other.group2()[0])
                        - (self.group0()[3] * other.group2()[1])),
                    (-(self.group2()[2] * other.group1()[3])
                        - (self.group2()[0] * other.group1()[1])
                        - (self.group0()[3] * other.group2()[2])
                        - (self.group1()[0] * other.group2()[1])),
                    (-(self.group3()[1] * other.group2()[1]) - (self.group3()[0] * other.group2()[0])
                        + (self.group2()[1] * other.group1()[1])
                        + (self.group2()[0] * other.group1()[0])),
                ])),
            // e1, e2, e3, e4
            ((swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]))
                + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))
                + (swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]))
                + (swizzle!(self.group1(), 0, 1, 2, 1) * Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other.group0()[1]]))
                + (swizzle!(self.group0(), 1, 2, 0, 2) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[1], other.group1()[2]]))
                + Simd32x4::from([
                    (-(self.group3()[3] * other.group0()[0]) - (self.group3()[2] * other.group1()[1]) + (self.group2()[2] * other.group0()[1])
                        - (self.group2()[1] * other.group0()[2])
                        - (self.group0()[2] * other.group2()[1])),
                    (-(self.group3()[3] * other.group0()[1]) - (self.group3()[0] * other.group1()[2]) - (self.group2()[2] * other.group0()[0])
                        + (self.group2()[0] * other.group0()[2])
                        - (self.group0()[0] * other.group2()[2])),
                    (-(self.group3()[3] * other.group0()[2]) - (self.group3()[1] * other.group1()[0]) + (self.group2()[1] * other.group0()[0])
                        - (self.group2()[0] * other.group0()[1])
                        - (self.group0()[1] * other.group2()[0])),
                    ((self.group3()[1] * other.group0()[1])
                        + (self.group3()[0] * other.group0()[0])
                        + (self.group1()[0] * other.group0()[0])
                        + (self.group0()[0] * other.group1()[0])
                        + (self.group0()[1] * other.group1()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      108      146        0
    //    simd4       89       90        0
    // Totals...
    // yes simd      197      236        0
    //  no simd      464      506        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((swizzle!(self.group3(), 2, 0, 1, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[2]]))
                - (swizzle!(self.group3(), 1, 2, 2, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group2()[3], other.group2()[3]]))
                + (swizzle!(other.group3(), 0, 1, 2, 1) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[1]]))
                - (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                - (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (swizzle!(self.group1(), 2, 0, 1, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[2]]))
                + (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[3], other.group2()[2]]))
                + (swizzle!(self.group0(), 1, 1, 1, 0) * Simd32x4::from([other.group3()[2], other.group1()[3], other.group1()[0], other.group2()[0]]))
                + (swizzle!(self.group0(), 0, 0, 0, 1) * Simd32x4::from([other.group1()[3], other.group1()[2], other.group3()[1], other.group2()[1]]))
                + Simd32x4::from([
                    (-(self.group3()[0] * other.group2()[3])
                        - (self.group1()[1] * other.group0()[2])
                        - (self.group1()[0] * other.group2()[3])
                        - (self.group0()[3] * other.group0()[0])
                        - (self.group0()[2] * other.group3()[1])
                        - (self.group0()[1] * other.group1()[2])),
                    (-(self.group3()[1] * other.group2()[3])
                        - (self.group1()[2] * other.group0()[0])
                        - (self.group1()[1] * other.group2()[3])
                        - (self.group0()[3] * other.group0()[1])
                        - (self.group0()[2] * other.group1()[0])
                        - (self.group0()[0] * other.group3()[2])),
                    (-(self.group3()[0] * other.group0()[1])
                        - (self.group1()[2] * other.group2()[3])
                        - (self.group1()[0] * other.group0()[1])
                        - (self.group0()[3] * other.group0()[2])
                        - (self.group0()[1] * other.group3()[0])
                        - (self.group0()[0] * other.group1()[1])),
                    ((self.group3()[0] * other.group3()[0])
                        + (self.group2()[2] * other.group0()[2])
                        + (self.group2()[1] * other.group0()[1])
                        + (self.group2()[0] * other.group0()[0])
                        + (self.group1()[1] * other.group1()[1])
                        + (self.group1()[0] * other.group1()[0])),
                ])),
            // e415, e425, e435, e321
            (-(Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                + (swizzle!(other.group3(), 1, 2, 0, 3) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]))
                - (swizzle!(self.group3(), 1, 2, 2, 2) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[3], other.group1()[2]]))
                - (swizzle!(self.group3(), 0, 1, 0, 1) * Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group1()[1]]))
                - (swizzle!(other.group2(), 0, 1, 2, 2) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[2]]))
                + (swizzle!(self.group2(), 2, 0, 1, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group0()[2]]))
                - (swizzle!(other.group2(), 3, 3, 3, 0) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[0]]))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group3(), 0, 1, 2, 2))
                + (swizzle!(other.group1(), 1, 2, 0, 3) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[3]]))
                - (swizzle!(other.group1(), 2, 0, 1, 0) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group3()[0]]))
                - (swizzle!(self.group0(), 3, 3, 3, 1) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[1]]))
                - (swizzle!(other.group3(), 3, 3, 3, 1) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]))
                + Simd32x4::from([
                    (-(self.group2()[1] * other.group0()[2]) + (self.group0()[2] * other.group2()[1]) - (self.group0()[1] * other.group2()[2])),
                    (-(self.group2()[2] * other.group0()[0]) - (self.group0()[2] * other.group2()[0]) + (self.group0()[0] * other.group2()[2])),
                    (-(self.group2()[0] * other.group0()[1]) - (self.group0()[0] * other.group2()[1]) + (self.group0()[1] * other.group2()[0])),
                    ((self.group2()[1] * other.group0()[1]) + (self.group2()[0] * other.group0()[0]) - (self.group1()[0] * other.group3()[0])),
                ])),
            // e235, e315, e125, e5
            (-(Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))
                - (swizzle!(self.group3(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[2]]))
                - (swizzle!(self.group3(), 2, 0, 1, 1) * swizzle!(other.group2(), 1, 2, 0, 1))
                + (swizzle!(other.group2(), 2, 0, 1, 2) * Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[2]]))
                + (swizzle!(other.group3(), 3, 3, 3, 2) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[2]]))
                + (swizzle!(self.group2(), 2, 0, 1, 2) * Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[2]]))
                + (swizzle!(self.group2(), 2, 0, 1, 1) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[1]]))
                - (swizzle!(other.group3(), 2, 0, 1, 3) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[3]]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                + (swizzle!(self.group1(), 2, 0, 1, 1) * swizzle!(other.group2(), 1, 2, 0, 1))
                - (swizzle!(other.group2(), 2, 0, 2, 0) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group0()[3], self.group3()[0]]))
                + Simd32x4::from([
                    (-(self.group2()[1] * other.group1()[2])
                        - (self.group2()[0] * other.group1()[3])
                        - (self.group0()[3] * other.group2()[0])
                        - (self.group1()[0] * other.group3()[3])),
                    (-(self.group2()[2] * other.group1()[0])
                        - (self.group2()[1] * other.group1()[3])
                        - (self.group1()[1] * other.group3()[3])
                        - (self.group0()[3] * other.group2()[1])),
                    (-(self.group2()[2] * other.group1()[3])
                        - (self.group2()[0] * other.group1()[1])
                        - (self.group1()[2] * other.group3()[3])
                        - (self.group1()[0] * other.group2()[1])),
                    ((self.group2()[1] * other.group1()[1])
                        + (self.group2()[0] * other.group3()[0])
                        + (self.group2()[0] * other.group1()[0])
                        + (self.group1()[0] * other.group2()[0])),
                ])),
            // e1, e2, e3, e4
            ((swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]))
                + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))
                - (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                + (swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]))
                - (swizzle!(other.group3(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[2]]))
                + (swizzle!(self.group1(), 1, 2, 2, 1) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[3], other.group0()[1]]))
                + (swizzle!(self.group1(), 0, 1, 0, 0) * Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group0()[0]]))
                + (swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[2]]))
                - (swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group2(), 1, 2, 0, 3))
                + (swizzle!(self.group0(), 0, 2, 2, 1) * Simd32x4::from([other.group3()[3], other.group2()[0], other.group3()[3], other.group1()[1]]))
                + (swizzle!(self.group0(), 1, 1, 0, 0) * Simd32x4::from([other.group2()[2], other.group3()[3], other.group2()[1], other.group1()[0]]))
                + Simd32x4::from([
                    (-(self.group3()[3] * other.group0()[0]) - (self.group3()[2] * other.group1()[1]) + (self.group2()[2] * other.group0()[1])
                        - (self.group2()[1] * other.group0()[2])),
                    (-(self.group3()[3] * other.group0()[1]) - (self.group3()[0] * other.group1()[2]) - (self.group2()[2] * other.group0()[0])
                        + (self.group2()[0] * other.group0()[2])),
                    (-(self.group3()[3] * other.group0()[2]) - (self.group3()[1] * other.group1()[0]) + (self.group2()[1] * other.group0()[0])
                        - (self.group2()[0] * other.group0()[1])),
                    ((self.group3()[1] * other.group0()[1]) + (self.group3()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group3()[1])
                        - (self.group0()[0] * other.group3()[0])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       47       79        0
    //    simd4       53       55        0
    // Totals...
    // yes simd      100      134        0
    //  no simd      259      299        0
    fn anti_sandwich(self, other: DualNum) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[2] * other.group0()[1]),
                ((self.group0()[3] * other.group0()[1]) + (self.group2()[3] * other.group0()[0])),
            ]),
            // e23, e31, e12, e45
            ((Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]]))
                + (self.group1() * Simd32x4::from(other.group0()[1]))),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (-(self.group3()[0] * other.group0()[0]) + (self.group1()[0] * other.group0()[0]) + (self.group2()[0] * other.group0()[1])),
                (-(self.group3()[1] * other.group0()[0]) + (self.group1()[1] * other.group0()[0]) + (self.group2()[1] * other.group0()[1])),
                (-(self.group3()[2] * other.group0()[0]) + (self.group1()[2] * other.group0()[0]) + (self.group2()[2] * other.group0()[1])),
                (self.group2()[3] * other.group0()[1]),
            ]),
            // e4235, e4315, e4125, e3215
            ((self.group0() * Simd32x4::from(other.group0()[0]))
                + (self.group3() * Simd32x4::from(other.group0()[1]))
                + Simd32x4::from([0.0, 0.0, 0.0, ((self.group1()[3] * other.group0()[0]) * -1.0)])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       68       98        0
    //    simd4       55       58        0
    // Totals...
    // yes simd      123      156        0
    //  no simd      288      330        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group1()[3] * other.group0()[3])
                    + (self.group0()[2] * other.group0()[2])
                    + (self.group0()[0] * other.group0()[0])
                    + (self.group0()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435, e321
            (-(swizzle!(other.group0(), 3, 3, 3, 2) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[2]]))
                - (swizzle!(other.group0(), 0, 1, 2, 0) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[0]]))
                - (swizzle!(self.group0(), 1, 2, 0, 1) * swizzle!(other.group0(), 2, 0, 1, 1))
                + (swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))),
            // e235, e315, e125, e5
            (-(swizzle!(self.group3(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))
                + (swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[2]]))
                - (swizzle!(other.group0(), 3, 3, 3, 2) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[2]]))
                + (swizzle!(self.group1(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))
                + (swizzle!(self.group1(), 2, 0, 1, 1) * swizzle!(other.group0(), 1, 2, 0, 1))
                - (swizzle!(other.group0(), 0, 0, 2, 1) * Simd32x4::from([self.group0()[3], self.group1()[2], self.group0()[3], self.group3()[1]]))
                - (swizzle!(other.group0(), 2, 1, 1, 0) * Simd32x4::from([self.group1()[1], self.group0()[3], self.group1()[0], self.group3()[0]]))),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group2()[3] * other.group0()[0]) + (self.group1()[0] * other.group0()[3]) + (self.group0()[1] * other.group0()[2]) - (self.group0()[2] * other.group0()[1])),
                ((self.group2()[3] * other.group0()[1]) + (self.group1()[1] * other.group0()[3]) - (self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
                ((self.group2()[3] * other.group0()[2]) + (self.group1()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[0])),
                (self.group2()[3] * other.group0()[3]),
            ]),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       75      111        0
    //    simd4       70       71        0
    // Totals...
    // yes simd      145      182        0
    //  no simd      355      395        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((swizzle!(other.group1(), 0, 1, 2, 2) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[2]]))
                - (swizzle!(other.group1(), 1, 2, 0, 3) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]))
                + (swizzle!(self.group0(), 0, 2, 2, 2) * Simd32x4::from([other.group0()[3], other.group1()[0], other.group0()[3], other.group0()[2]]))
                + (swizzle!(self.group0(), 1, 1, 0, 0) * Simd32x4::from([other.group1()[2], other.group0()[3], other.group1()[1], other.group0()[0]]))
                + Simd32x4::from([
                    0.0,
                    0.0,
                    0.0,
                    ((self.group3()[1] * other.group1()[1]) + (self.group3()[0] * other.group1()[0]) - (self.group1()[3] * other.group0()[3])
                        + (self.group0()[1] * other.group0()[1])),
                ])),
            // e415, e425, e435, e321
            ((swizzle!(other.group1(), 1, 2, 0, 3) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]))
                - (swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[2]]))
                - (swizzle!(other.group0(), 3, 3, 3, 2) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group0()[2]]))
                - (swizzle!(other.group0(), 0, 1, 2, 0) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[0]]))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group1(), 0, 1, 2, 1))
                + (swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group0(), 1, 2, 0, 3))
                - (swizzle!(self.group0(), 0, 2, 2, 1) * Simd32x4::from([other.group1()[3], other.group0()[0], other.group1()[3], other.group0()[1]]))
                - Simd32x4::from([
                    (self.group0()[1] * other.group0()[2]),
                    (self.group0()[1] * other.group1()[3]),
                    (self.group0()[0] * other.group0()[1]),
                    (self.group1()[0] * other.group1()[0]),
                ])),
            // e235, e315, e125, e5
            (-(Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                - (swizzle!(self.group3(), 2, 0, 1, 2) * swizzle!(other.group0(), 1, 2, 0, 2))
                + (swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[2]]))
                + (swizzle!(other.group1(), 3, 3, 3, 2) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[2]]))
                + (swizzle!(self.group2(), 2, 0, 1, 1) * swizzle!(other.group1(), 1, 2, 0, 1))
                - (swizzle!(other.group1(), 2, 0, 1, 3) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[3]]))
                - (swizzle!(other.group0(), 3, 3, 3, 1) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[1]]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                + (swizzle!(self.group1(), 2, 0, 1, 1) * swizzle!(other.group0(), 1, 2, 0, 1))
                - (swizzle!(other.group0(), 2, 0, 2, 0) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group0()[3], self.group3()[0]]))
                + Simd32x4::from([
                    (-(self.group0()[3] * other.group0()[0]) - (self.group1()[0] * other.group1()[3])),
                    (-(self.group1()[1] * other.group1()[3]) - (self.group0()[3] * other.group0()[1])),
                    (-(self.group1()[2] * other.group1()[3]) - (self.group1()[0] * other.group0()[1])),
                    ((self.group2()[0] * other.group1()[0]) + (self.group1()[0] * other.group0()[0])),
                ])),
            // e1, e2, e3, e4
            ((Simd32x4::from(self.group2()[3]) * other.group0())
                - (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[2]]))
                - (swizzle!(self.group0(), 2, 0, 1, 0) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[0]]))
                + Simd32x4::from([
                    ((self.group1()[1] * other.group1()[2])
                        + (self.group1()[0] * other.group0()[3])
                        + (self.group0()[3] * other.group1()[0])
                        + (self.group0()[0] * other.group1()[3])
                        + (self.group0()[1] * other.group0()[2])),
                    ((self.group1()[2] * other.group1()[0])
                        + (self.group1()[1] * other.group0()[3])
                        + (self.group0()[3] * other.group1()[1])
                        + (self.group0()[2] * other.group0()[0])
                        + (self.group0()[1] * other.group1()[3])),
                    ((self.group1()[2] * other.group0()[3])
                        + (self.group1()[0] * other.group1()[1])
                        + (self.group0()[3] * other.group1()[2])
                        + (self.group0()[2] * other.group1()[3])
                        + (self.group0()[0] * other.group0()[1])),
                    ((self.group0()[1] * other.group1()[1]) * -1.0),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      108      146        0
    //    simd4       53       54        0
    // Totals...
    // yes simd      161      200        0
    //  no simd      320      362        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group2()[3] * other.group0()[0]) + (self.group0()[1] * other.group0()[2])),
                    ((self.group2()[3] * other.group0()[1]) + (self.group0()[2] * other.group0()[0])),
                    ((self.group2()[3] * other.group0()[2]) + (self.group0()[0] * other.group0()[1])),
                    (-(self.group1()[2] * other.group0()[2])
                        - (self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e23, e31, e12, e45
            (-(swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group2()[3] * other.group1()[0]) - (self.group1()[2] * other.group0()[1])
                        + (self.group1()[1] * other.group0()[2])
                        + (self.group0()[3] * other.group0()[0])
                        + (self.group0()[1] * other.group1()[2])),
                    ((self.group2()[3] * other.group1()[1]) + (self.group1()[2] * other.group0()[0]) - (self.group1()[0] * other.group0()[2])
                        + (self.group0()[3] * other.group0()[1])
                        + (self.group0()[2] * other.group1()[0])),
                    ((self.group2()[3] * other.group1()[2]) - (self.group1()[1] * other.group0()[0])
                        + (self.group1()[0] * other.group0()[1])
                        + (self.group0()[3] * other.group0()[2])
                        + (self.group0()[0] * other.group1()[1])),
                    (-(self.group3()[2] * other.group0()[2])
                        - (self.group3()[1] * other.group0()[1])
                        - (self.group3()[0] * other.group0()[0])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                ((self.group3()[3] * other.group0()[0]) + (self.group3()[2] * other.group1()[1]) - (self.group3()[1] * other.group1()[2]) - (self.group2()[2] * other.group0()[1])
                    + (self.group2()[1] * other.group0()[2])
                    - (self.group1()[3] * other.group1()[0])
                    - (self.group1()[2] * other.group1()[1])
                    + (self.group0()[3] * other.group1()[0])
                    + (self.group1()[1] * other.group1()[2])),
                ((self.group3()[3] * other.group0()[1]) - (self.group3()[2] * other.group1()[0]) + (self.group3()[0] * other.group1()[2]) + (self.group2()[2] * other.group0()[0])
                    - (self.group2()[0] * other.group0()[2])
                    - (self.group1()[3] * other.group1()[1])
                    + (self.group1()[2] * other.group1()[0])
                    + (self.group0()[3] * other.group1()[1])
                    - (self.group1()[0] * other.group1()[2])),
                ((self.group3()[3] * other.group0()[2]) + (self.group3()[1] * other.group1()[0]) - (self.group3()[0] * other.group1()[1]) - (self.group2()[1] * other.group0()[0])
                    + (self.group2()[0] * other.group0()[1])
                    - (self.group1()[3] * other.group1()[2])
                    - (self.group1()[1] * other.group1()[0])
                    + (self.group0()[3] * other.group1()[2])
                    + (self.group1()[0] * other.group1()[1])),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            ((swizzle!(self.group3(), 1, 2, 0, 2) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[2]]))
                + Simd32x4::from([
                    (-(self.group3()[2] * other.group0()[1])
                        + (self.group2()[3] * other.group1()[0])
                        + (self.group1()[3] * other.group0()[0])
                        + (self.group0()[1] * other.group1()[2])
                        - (self.group0()[2] * other.group1()[1])),
                    (-(self.group3()[0] * other.group0()[2]) + (self.group2()[3] * other.group1()[1]) + (self.group1()[3] * other.group0()[1])
                        - (self.group0()[0] * other.group1()[2])
                        + (self.group0()[2] * other.group1()[0])),
                    (-(self.group3()[1] * other.group0()[0])
                        + (self.group2()[3] * other.group1()[2])
                        + (self.group1()[3] * other.group0()[2])
                        + (self.group0()[0] * other.group1()[1])
                        - (self.group0()[1] * other.group1()[0])),
                    ((self.group3()[1] * other.group1()[1]) + (self.group3()[0] * other.group1()[0])
                        - (self.group2()[2] * other.group0()[2])
                        - (self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[2] * other.group1()[2])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group1()[1] * other.group1()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       88      126        0
    //    simd4       66       67        0
    // Totals...
    // yes simd      154      193        0
    //  no simd      352      394        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[2]]))
                + (swizzle!(self.group0(), 0, 2, 2, 3) * swizzle!(other.group0(), 3, 0, 3, 3))
                + Simd32x4::from([
                    (self.group0()[1] * other.group0()[2]),
                    (self.group0()[1] * other.group0()[3]),
                    (self.group0()[0] * other.group0()[1]),
                    (-(self.group1()[1] * other.group0()[1])
                        - (self.group1()[0] * other.group0()[0])
                        - (self.group0()[2] * other.group1()[2])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e23, e31, e12, e45
            ((Simd32x4::from(self.group2()[3]) * other.group1())
                - (swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[2]]))
                + (swizzle!(self.group1(), 1, 2, 2, 3) * swizzle!(other.group0(), 2, 0, 3, 3))
                - (swizzle!(self.group0(), 2, 0, 1, 2) * swizzle!(other.group1(), 1, 2, 0, 2))
                + Simd32x4::from([
                    ((self.group1()[0] * other.group0()[3])
                        + (self.group0()[3] * other.group0()[0])
                        + (self.group0()[0] * other.group1()[3])
                        + (self.group0()[1] * other.group1()[2])),
                    ((self.group1()[1] * other.group0()[3])
                        + (self.group0()[3] * other.group0()[1])
                        + (self.group0()[2] * other.group1()[0])
                        + (self.group0()[1] * other.group1()[3])),
                    ((self.group1()[0] * other.group0()[1])
                        + (self.group0()[3] * other.group0()[2])
                        + (self.group0()[2] * other.group1()[3])
                        + (self.group0()[0] * other.group1()[1])),
                    (-(self.group3()[1] * other.group0()[1])
                        - (self.group3()[0] * other.group0()[0])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group1()[1])),
                ])),
            // e15, e25, e35, e1234
            ((other.group0() * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group2()[3]]))
                - (swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group3()[2] * other.group1()[1]) - (self.group3()[1] * other.group1()[2]) - (self.group3()[0] * other.group1()[3])
                        + (self.group2()[1] * other.group0()[2])
                        + (self.group2()[0] * other.group0()[3])
                        - (self.group1()[3] * other.group1()[0])
                        - (self.group1()[2] * other.group1()[1])
                        + (self.group1()[1] * other.group1()[2])
                        + (self.group0()[3] * other.group1()[0])
                        + (self.group1()[0] * other.group1()[3])),
                    (-(self.group3()[2] * other.group1()[0]) - (self.group3()[1] * other.group1()[3])
                        + (self.group3()[0] * other.group1()[2])
                        + (self.group2()[2] * other.group0()[0])
                        + (self.group2()[1] * other.group0()[3])
                        - (self.group1()[3] * other.group1()[1])
                        + (self.group1()[2] * other.group1()[0])
                        + (self.group1()[1] * other.group1()[3])
                        + (self.group0()[3] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[2])),
                    (-(self.group3()[2] * other.group1()[3]) + (self.group3()[1] * other.group1()[0]) - (self.group3()[0] * other.group1()[1])
                        + (self.group2()[2] * other.group0()[3])
                        + (self.group2()[0] * other.group0()[1])
                        - (self.group1()[3] * other.group1()[2])
                        + (self.group1()[2] * other.group1()[3])
                        - (self.group1()[1] * other.group1()[0])
                        + (self.group0()[3] * other.group1()[2])
                        + (self.group1()[0] * other.group1()[1])),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[2]]))
                + (swizzle!(self.group3(), 1, 2, 2, 3) * swizzle!(other.group0(), 2, 0, 3, 3))
                + (swizzle!(self.group3(), 0, 1, 0, 2) * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[1], other.group1()[2]]))
                + (swizzle!(other.group1(), 0, 1, 2, 1) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[1]]))
                - (swizzle!(other.group1(), 1, 2, 0, 3) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[3]]))
                + (swizzle!(other.group1(), 3, 0, 3, 0) * Simd32x4::from([self.group0()[0], self.group0()[2], self.group0()[2], self.group3()[0]]))
                + (swizzle!(self.group0(), 1, 1, 0, 3) * swizzle!(other.group1(), 2, 3, 1, 3))
                + Simd32x4::from([
                    (self.group1()[3] * other.group0()[0]),
                    (self.group1()[3] * other.group0()[1]),
                    (self.group1()[3] * other.group0()[2]),
                    (-(self.group2()[1] * other.group0()[1])
                        - (self.group2()[0] * other.group0()[0])
                        - (self.group1()[2] * other.group1()[2])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for VersorOdd {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      291      358        0
    //    simd2        8        8        0
    //    simd3      103      104        0
    //    simd4       86       87        0
    // Totals...
    // yes simd      488      557        0
    //  no simd      960     1034        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = MultiVector::from_groups(
            // scalar, e12345
            ((Simd32x2::from(self.group3()[2]) * Simd32x2::from([other.group1()[2], other.group8()[2]]))
                + (Simd32x2::from(self.group3()[1]) * Simd32x2::from([other.group1()[1], other.group8()[1]]))
                + (Simd32x2::from(self.group3()[0]) * Simd32x2::from([other.group1()[0], other.group8()[0]]))
                - (Simd32x2::from(self.group1()[3]) * Simd32x2::from([other.group5()[3], other.group3()[3]]))
                + Simd32x2::from([
                    ((self.group3()[3] * other.group1()[3]) + (self.group2()[3] * other[e1])
                        - (self.group2()[2] * other.group6()[2])
                        - (self.group2()[1] * other.group6()[1])
                        - (self.group2()[0] * other.group6()[0])
                        - (self.group1()[2] * other.group5()[2])
                        - (self.group1()[1] * other.group5()[1])
                        - (self.group1()[0] * other.group5()[0])
                        + (self.group0()[3] * other.group0()[1])
                        - (self.group0()[2] * other.group7()[2])
                        - (self.group0()[0] * other.group7()[0])
                        - (self.group0()[1] * other.group7()[1])),
                    (-(self.group3()[3] * other[e35]) - (self.group2()[3] * other.group8()[3])
                        + (self.group2()[2] * other.group4()[2])
                        + (self.group2()[1] * other.group4()[1])
                        + (self.group2()[0] * other.group4()[0])
                        + (self.group1()[2] * other.group10()[0])
                        + (self.group1()[1] * other.group10()[1])
                        + (self.group1()[0] * other.group10()[2])
                        - (self.group0()[3] * other.group0()[0])
                        + (self.group0()[2] * other.group3()[2])
                        + (self.group0()[0] * other.group3()[0])
                        + (self.group0()[1] * other.group3()[1])),
                ])),
            // e1, e2, e3, e4
            ((swizzle!(self.group3(), 1, 2, 2, 2) * Simd32x4::from([other.group10()[0], other.group10()[2], other.group0()[0], other.group4()[2]]))
                + (swizzle!(self.group3(), 0, 1, 0, 1) * Simd32x4::from([other.group0()[0], other.group0()[0], other.group10()[1], other.group4()[1]]))
                + (Simd32x4::from(self.group2()[3]) * other.group3())
                - (swizzle!(self.group2(), 1, 2, 2, 3) * Simd32x4::from([other.group4()[2], other.group4()[0], other[e35], other.group0()[0]]))
                + (swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group10()[2], other.group10()[1], other.group10()[0], other.group4()[2]]))
                - (swizzle!(self.group1(), 2, 0, 1, 3) * Simd32x4::from([other.group8()[1], other.group8()[2], other.group8()[0], other[e35]]))
                + (swizzle!(self.group1(), 1, 2, 2, 1) * Simd32x4::from([other.group8()[2], other.group8()[0], other.group3()[3], other.group4()[1]]))
                + (swizzle!(self.group1(), 0, 1, 0, 0) * Simd32x4::from([other.group3()[3], other.group3()[3], other.group8()[1], other.group4()[0]]))
                + (swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group8()[0], other.group8()[1], other.group8()[2], other.group10()[0]]))
                - (swizzle!(self.group0(), 2, 0, 1, 3) * Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other[e35]]))
                + (swizzle!(self.group0(), 0, 2, 2, 1) * Simd32x4::from([other.group8()[3], other.group3()[0], other.group8()[3], other.group10()[1]]))
                + (swizzle!(self.group0(), 1, 1, 0, 0) * Simd32x4::from([other.group3()[2], other.group8()[3], other.group3()[1], other.group10()[2]]))
                + Simd32x4::from([
                    (-(self.group3()[3] * other.group4()[0]) - (self.group3()[2] * other.group10()[1]) + (self.group2()[2] * other.group4()[1]) - (self.group2()[0] * other[e35])),
                    (-(self.group3()[3] * other.group4()[1]) - (self.group3()[0] * other.group10()[0]) - (self.group2()[1] * other[e35]) + (self.group2()[0] * other.group4()[2])),
                    (-(self.group3()[3] * other.group4()[2]) - (self.group3()[1] * other.group10()[2]) + (self.group2()[1] * other.group4()[0])
                        - (self.group2()[0] * other.group4()[1])),
                    ((self.group3()[0] * other.group4()[0])
                        - (self.group0()[2] * other.group8()[2])
                        - (self.group0()[1] * other.group8()[1])
                        - (self.group0()[0] * other.group8()[0])),
                ])),
            // e5
            (-(self.group3()[3] * other.group3()[3])
                - (self.group3()[3] * other.group0()[0])
                - (self.group3()[2] * other.group3()[2])
                - (self.group3()[1] * other.group3()[1])
                - (self.group3()[0] * other.group3()[0])
                + (self.group2()[2] * other.group10()[0])
                + (self.group2()[2] * other.group8()[2])
                + (self.group2()[1] * other.group10()[1])
                + (self.group2()[1] * other.group8()[1])
                + (self.group2()[0] * other.group10()[2])
                + (self.group2()[0] * other.group8()[0])
                + (self.group1()[3] * other.group8()[3])
                + (self.group1()[2] * other.group3()[2])
                + (self.group1()[1] * other.group3()[1])
                - (self.group0()[3] * other.group8()[3])
                + (self.group1()[0] * other.group3()[0])),
            // e15, e25, e35, e45
            (-(Simd32x4::from(self.group3()[3]) * other.group1())
                - (swizzle!(self.group3(), 1, 2, 2, 2) * Simd32x4::from([other.group7()[2], other.group7()[0], other[e1], other.group5()[2]]))
                - (swizzle!(self.group3(), 0, 1, 0, 1) * Simd32x4::from([other[e1], other[e1], other.group7()[1], other.group5()[1]]))
                - (swizzle!(other.group5(), 1, 3, 3, 0) * Simd32x4::from([self.group2()[2], self.group2()[1], self.group2()[2], self.group3()[0]]))
                + (swizzle!(self.group2(), 2, 2, 2, 3) * Simd32x4::from([other.group1()[1], other.group5()[0], other.group0()[1], other[e1]]))
                + (swizzle!(self.group2(), 1, 1, 1, 2) * Simd32x4::from([other.group5()[2], other.group0()[1], other.group1()[0], other.group6()[2]]))
                - (swizzle!(other.group5(), 3, 2, 0, 3) * Simd32x4::from([self.group2()[0], self.group2()[0], self.group2()[1], self.group0()[3]]))
                + (swizzle!(self.group2(), 0, 0, 0, 1) * Simd32x4::from([other.group0()[1], other.group1()[2], other.group5()[1], other.group6()[1]]))
                + (swizzle!(self.group1(), 1, 2, 2, 3) * Simd32x4::from([other.group7()[2], other.group7()[0], other[e1], other.group0()[1]]))
                + (swizzle!(self.group1(), 0, 1, 0, 2) * Simd32x4::from([other[e1], other[e1], other.group7()[1], other.group1()[2]]))
                + Simd32x4::from([
                    ((self.group3()[3] * other.group5()[0]) + (self.group3()[2] * other.group7()[1])
                        - (self.group2()[1] * other.group1()[2])
                        - (self.group1()[3] * other.group7()[0])
                        - (self.group1()[2] * other.group7()[1])
                        + (self.group0()[3] * other.group7()[0])),
                    ((self.group3()[3] * other.group5()[1]) + (self.group3()[0] * other.group7()[2])
                        - (self.group2()[2] * other.group1()[0])
                        - (self.group1()[3] * other.group7()[1])
                        + (self.group0()[3] * other.group7()[1])
                        - (self.group1()[0] * other.group7()[2])),
                    ((self.group3()[3] * other.group5()[2]) + (self.group3()[1] * other.group7()[0])
                        - (self.group2()[0] * other.group1()[1])
                        - (self.group1()[3] * other.group7()[2])
                        - (self.group1()[1] * other.group7()[0])
                        + (self.group0()[3] * other.group7()[2])),
                    ((self.group2()[0] * other.group6()[0]) + (self.group1()[1] * other.group1()[1]) + (self.group1()[0] * other.group1()[0])
                        - (self.group0()[2] * other.group7()[2])
                        - (self.group0()[0] * other.group7()[0])
                        - (self.group0()[1] * other.group7()[1])),
                ])),
            // e41, e42, e43
            (-(swizzle!(other.group6(), 1, 2, 0) * Simd32x3::from([self.group3()[2], self.group3()[0], self.group3()[1]]))
                + (swizzle!(other.group6(), 2, 0, 1) * Simd32x3::from([self.group3()[1], self.group3()[2], self.group3()[0]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group5()[0], other.group5()[1], other.group5()[2]]))
                + (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(self.group1()[3]) * other.group6())
                - (swizzle!(other.group6(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))
                + (swizzle!(other.group6(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(self.group0()[3]) * other.group6())
                + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(other.group5()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + Simd32x3::from([
                    (-(self.group0()[2] * other.group5()[1]) - (self.group0()[2] * other.group1()[1])
                        + (self.group0()[1] * other.group5()[2])
                        + (self.group0()[1] * other.group1()[2])),
                    ((self.group0()[2] * other.group5()[0]) + (self.group0()[2] * other.group1()[0])
                        - (self.group0()[0] * other.group1()[2])
                        - (self.group0()[0] * other.group5()[2])),
                    (-(self.group0()[1] * other.group5()[0]) - (self.group0()[1] * other.group1()[0])
                        + (self.group0()[0] * other.group1()[1])
                        + (self.group0()[0] * other.group5()[1])),
                ])),
            // e415, e425, e435, e321
            (-(Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[2], other[e35]]))
                + (swizzle!(other.group8(), 1, 2, 0, 3) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]))
                - (swizzle!(self.group3(), 1, 2, 2, 2) * Simd32x4::from([other.group8()[2], other.group8()[0], other.group3()[3], other.group10()[0]]))
                - (swizzle!(self.group3(), 0, 1, 0, 1) * Simd32x4::from([other.group3()[3], other.group3()[3], other.group8()[1], other.group10()[1]]))
                - (swizzle!(other.group3(), 0, 1, 2, 2) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[2]]))
                + (swizzle!(self.group2(), 2, 0, 1, 2) * Simd32x4::from([other.group4()[1], other.group4()[2], other.group4()[0], other.group4()[2]]))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group8(), 0, 1, 2, 2))
                + (swizzle!(self.group1(), 2, 0, 1, 3) * Simd32x4::from([other.group10()[1], other.group10()[0], other.group10()[2], other.group0()[0]]))
                - (swizzle!(self.group1(), 1, 2, 2, 1) * Simd32x4::from([other.group10()[0], other.group10()[2], other.group0()[0], other.group8()[1]]))
                - (swizzle!(self.group1(), 0, 1, 0, 0) * Simd32x4::from([other.group0()[0], other.group0()[0], other.group10()[1], other.group8()[0]]))
                - (swizzle!(self.group0(), 3, 3, 3, 0) * Simd32x4::from([other.group10()[2], other.group10()[1], other.group10()[0], other.group3()[0]]))
                + (swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group3(), 1, 2, 0, 3))
                - (swizzle!(self.group0(), 0, 2, 2, 1) * Simd32x4::from([other.group8()[3], other.group3()[0], other.group8()[3], other.group3()[1]]))
                + Simd32x4::from([
                    (-(self.group2()[1] * other.group4()[2]) - (self.group2()[0] * other[e35]) - (self.group0()[1] * other.group3()[2])),
                    (-(self.group2()[2] * other.group4()[0]) - (self.group2()[1] * other[e35]) - (self.group0()[1] * other.group8()[3])),
                    (-(self.group2()[2] * other[e35]) - (self.group2()[0] * other.group4()[1]) - (self.group0()[0] * other.group3()[1])),
                    (-(self.group3()[0] * other.group10()[2]) + (self.group2()[1] * other.group4()[1]) + (self.group2()[0] * other.group4()[0])),
                ])),
            // e423, e431, e412
            ((swizzle!(other.group4(), 1, 2, 0) * Simd32x3::from([self.group3()[2], self.group3()[0], self.group3()[1]]))
                - (swizzle!(other.group4(), 2, 0, 1) * Simd32x3::from([self.group3()[1], self.group3()[2], self.group3()[0]]))
                - (Simd32x3::from(other[e35]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                - (Simd32x3::from(self.group2()[3]) * swizzle!(other.group10(), 2, 1, 0))
                + (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group8()[0], other.group8()[1], other.group8()[2]]))
                - (Simd32x3::from(self.group1()[3]) * other.group4())
                + (swizzle!(other.group4(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))
                - (swizzle!(other.group4(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))
                - (Simd32x3::from(other[e35]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                - (Simd32x3::from(self.group0()[3]) * other.group4())
                + (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group10()[1], other.group8()[0], other.group3()[3]]))
                - (Simd32x3::from(self.group0()[2]) * Simd32x3::from([other.group8()[1], other.group10()[2], other.group0()[0]]))
                - (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group10()[0], other.group0()[0], other.group8()[0]]))
                + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group8()[2], other.group3()[3], other.group10()[2]]))
                - (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group8()[2], other.group10()[1]]))
                + (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group3()[3], other.group10()[0], other.group8()[1]]))),
            // e235, e315, e125
            (-(Simd32x3::from(self.group3()[3]) * swizzle!(other.group10(), 2, 1, 0))
                - (Simd32x3::from(self.group3()[3]) * Simd32x3::from([other.group8()[0], other.group8()[1], other.group8()[2]]))
                - (Simd32x3::from(other.group3()[1]) * Simd32x3::from([self.group3()[2], self.group0()[3], self.group1()[0]]))
                + (Simd32x3::from(other.group3()[2]) * Simd32x3::from([self.group3()[1], self.group1()[0], self.group1()[3]]))
                + (Simd32x3::from(other.group8()[3]) * Simd32x3::from([self.group3()[0], self.group3()[1], self.group3()[2]]))
                + (swizzle!(other.group10(), 1, 0, 2) * Simd32x3::from([self.group2()[2], self.group2()[0], self.group2()[1]]))
                - (swizzle!(other.group10(), 0, 2, 1) * Simd32x3::from([self.group2()[1], self.group2()[2], self.group2()[0]]))
                - (Simd32x3::from(other.group3()[3]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                - (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))
                + (Simd32x3::from(other.group3()[0]) * Simd32x3::from([self.group1()[3], self.group3()[2], self.group1()[1]]))
                + (Simd32x3::from(other.group3()[1]) * Simd32x3::from([self.group1()[2], self.group1()[3], self.group3()[0]]))
                - (Simd32x3::from(other.group3()[2]) * Simd32x3::from([self.group1()[1], self.group3()[0], self.group0()[3]]))
                - (Simd32x3::from(other.group3()[0]) * Simd32x3::from([self.group0()[3], self.group1()[2], self.group3()[1]]))
                - (Simd32x3::from(other.group8()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + Simd32x3::from([
                    ((self.group2()[2] * other.group8()[1]) - (self.group2()[1] * other.group8()[2])),
                    (-(self.group2()[2] * other.group8()[0]) + (self.group2()[0] * other.group8()[2])),
                    ((self.group2()[1] * other.group8()[0]) - (self.group2()[0] * other.group8()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group6()[0], other.group6()[1], other.group6()[2], other.group5()[3]]))
                - (swizzle!(other.group5(), 1, 2, 0, 2) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[2]]))
                + (swizzle!(self.group3(), 1, 2, 2, 3) * Simd32x4::from([other.group5()[2], other.group5()[0], other.group0()[1], other.group0()[1]]))
                + (swizzle!(self.group3(), 0, 1, 0, 2) * Simd32x4::from([other.group0()[1], other.group0()[1], other.group5()[1], other.group7()[2]]))
                + (swizzle!(self.group2(), 3, 3, 3, 2) * Simd32x4::from([other.group7()[0], other.group7()[1], other.group7()[2], other.group1()[2]]))
                + (swizzle!(self.group2(), 2, 0, 1, 1) * Simd32x4::from([other.group6()[1], other.group6()[2], other.group6()[0], other.group1()[1]]))
                - (swizzle!(self.group2(), 1, 2, 2, 1) * Simd32x4::from([other.group6()[2], other.group6()[0], other.group1()[3], other.group5()[1]]))
                - (swizzle!(self.group2(), 0, 1, 0, 0) * Simd32x4::from([other.group1()[3], other.group1()[3], other.group6()[1], other.group5()[0]]))
                + (swizzle!(other.group1(), 1, 2, 0, 0) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[0]]))
                - (swizzle!(self.group1(), 1, 2, 2, 3) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group5()[3], other[e1]]))
                - (swizzle!(self.group1(), 0, 1, 0, 2) * Simd32x4::from([other.group5()[3], other.group5()[3], other.group1()[1], other.group7()[2]]))
                + (swizzle!(self.group0(), 0, 2, 2, 3) * Simd32x4::from([other[e1], other.group7()[0], other[e1], other[e1]]))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group5()[0]) - (self.group0()[3] * other.group1()[0]) - (self.group0()[2] * other.group7()[1])
                        + (self.group0()[1] * other.group7()[2])),
                    ((self.group1()[3] * other.group5()[1]) - (self.group0()[3] * other.group1()[1]) - (self.group0()[0] * other.group7()[2]) + (self.group0()[1] * other[e1])),
                    ((self.group1()[3] * other.group5()[2]) - (self.group0()[3] * other.group1()[2]) + (self.group0()[0] * other.group7()[1])
                        - (self.group0()[1] * other.group7()[0])),
                    ((self.group3()[1] * other.group7()[1]) + (self.group3()[0] * other.group7()[0])
                        - (self.group1()[1] * other.group7()[1])
                        - (self.group1()[0] * other.group7()[0])),
                ])),
            // e1234
            (-(self.group3()[2] * other.group6()[2]) - (self.group3()[1] * other.group6()[1]) - (self.group3()[0] * other.group6()[0])
                + (self.group2()[3] * other.group5()[3])
                + (self.group2()[3] * other.group0()[1])
                + (self.group1()[3] * other.group1()[3])
                - (self.group1()[2] * other.group6()[2])
                - (self.group1()[1] * other.group6()[1])
                - (self.group1()[0] * other.group6()[0])
                + (self.group0()[3] * other.group1()[3])
                - (self.group0()[2] * other.group5()[2])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[1] * other.group5()[1])
                - (self.group0()[1] * other.group1()[1])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[0] * other.group5()[0])),
            // e12, e31, e23
            ((Simd32x3::from(self.group3()[3]) * swizzle!(other.group6(), 2, 1, 0))
                - (Simd32x3::from(other.group5()[3]) * Simd32x3::from([self.group3()[2], self.group3()[1], self.group3()[0]]))
                + (Simd32x3::from(self.group2()[3]) * swizzle!(other.group7(), 2, 1, 0))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group2()[2], self.group2()[1], self.group2()[0]]))
                - (swizzle!(other.group6(), 0, 2, 1) * Simd32x3::from([self.group2()[1], self.group2()[0], self.group2()[2]]))
                + (swizzle!(other.group6(), 1, 0, 2) * Simd32x3::from([self.group2()[0], self.group2()[2], self.group2()[1]]))
                - (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[2], other.group1()[1], other.group1()[0]]))
                + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group1()[2], self.group1()[1], self.group1()[0]]))
                + (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group5()[2], other.group5()[1], other.group5()[0]]))
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group0()[2], self.group0()[1], self.group0()[0]]))
                + (swizzle!(other.group7(), 1, 0, 2) * Simd32x3::from([self.group0()[0], self.group0()[2], self.group0()[1]]))
                - (swizzle!(other.group7(), 0, 2, 1) * Simd32x3::from([self.group0()[1], self.group0()[0], self.group0()[2]]))
                + Simd32x3::from([
                    ((self.group3()[1] * other.group1()[0]) - (self.group3()[0] * other.group1()[1]) - (self.group1()[1] * other.group5()[0])
                        + (self.group1()[0] * other.group5()[1])),
                    (-(self.group3()[2] * other.group1()[0]) + (self.group3()[0] * other.group1()[2]) + (self.group1()[2] * other.group5()[0])
                        - (self.group1()[0] * other.group5()[2])),
                    ((self.group3()[2] * other.group1()[1]) - (self.group3()[1] * other.group1()[2]) - (self.group1()[2] * other.group5()[1])
                        + (self.group1()[1] * other.group5()[2])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       67       98        0
    //    simd4       56       58        0
    // Totals...
    // yes simd      123      156        0
    //  no simd      291      330        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[2]]))
                + (swizzle!(other.group0(), 2, 0, 1, 1) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[1]]))
                - (swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]))
                + Simd32x4::from([0.0, 0.0, 0.0, (self.group3()[0] * other.group0()[0])])),
            // e415, e425, e435, e321
            ((swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]))
                - (swizzle!(other.group0(), 2, 0, 1, 2) * Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[2]]))
                - (swizzle!(other.group0(), 3, 3, 3, 0) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]]))
                - (swizzle!(self.group1(), 3, 3, 3, 1) * swizzle!(other.group0(), 0, 1, 2, 1))),
            // e235, e315, e125, e5
            (-(other.group0() * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group0()[3]]))
                + (swizzle!(other.group0(), 3, 3, 3, 2) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[2]]))
                + (swizzle!(self.group2(), 2, 0, 1, 1) * swizzle!(other.group0(), 1, 2, 0, 1))
                + Simd32x4::from([
                    (-(self.group1()[0] * other.group0()[3]) - (self.group2()[1] * other.group0()[2])),
                    (-(self.group2()[2] * other.group0()[0]) - (self.group1()[1] * other.group0()[3])),
                    (-(self.group1()[2] * other.group0()[3]) - (self.group2()[0] * other.group0()[1])),
                    ((self.group2()[0] * other.group0()[0]) + (self.group1()[3] * other.group0()[3])),
                ])),
            // e1, e2, e3, e4
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group1()[1] * other.group0()[2]) + (self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0])),
                    ((self.group1()[2] * other.group0()[0]) + (self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
                    ((self.group1()[0] * other.group0()[1]) + (self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
                    (-(self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       52       90        0
    //    simd4       63       65        0
    // Totals...
    // yes simd      115      155        0
    //  no simd      304      350        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            ((self.group3() * Simd32x4::from(other.group0()[3]))
                + (swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[2]]))
                + (swizzle!(other.group0(), 3, 3, 3, 1) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[1]]))
                + (swizzle!(other.group0(), 2, 0, 1, 0) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[0]]))
                + (Simd32x4::from([
                    (self.group0()[2] * other.group0()[1]),
                    (self.group0()[0] * other.group0()[2]),
                    (self.group0()[1] * other.group0()[0]),
                    (self.group2()[3] * other[e2]),
                ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))),
            // e23, e31, e12, e45
            ((swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[2]]))
                - (swizzle!(self.group3(), 1, 2, 0, 3) * swizzle!(other.group0(), 2, 0, 1, 3))
                + (self.group2() * Simd32x4::from([other.group0()[3], other.group0()[3], other.group0()[3], other[e2]]))
                + Simd32x4::from([
                    ((self.group0()[0] * other[e2]) - (self.group1()[3] * other.group0()[0])),
                    ((self.group0()[1] * other[e2]) - (self.group1()[3] * other.group0()[1])),
                    ((self.group0()[2] * other[e2]) - (self.group1()[3] * other.group0()[2])),
                    ((self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
                ])),
            // e15, e25, e35, e1234
            (-(swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group0()[2]]))
                + (swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group1()[3]]))
                - (swizzle!(other.group0(), 2, 0, 1, 0) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[0]]))
                + Simd32x4::from([
                    (-(self.group3()[0] * other[e2]) + (self.group1()[0] * other[e2])),
                    (-(self.group3()[1] * other[e2]) + (self.group1()[1] * other[e2])),
                    (-(self.group3()[2] * other[e2]) + (self.group1()[2] * other[e2])),
                    ((self.group0()[3] * other.group0()[3]) - (self.group0()[1] * other.group0()[1])),
                ])),
            // e4235, e4315, e4125, e3215
            ((swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]))
                - (swizzle!(self.group1(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other[e2]]))
                + (self.group0() * Simd32x4::from(other[e2]))
                + Simd32x4::from([
                    (-(self.group2()[0] * other.group0()[3]) - (self.group0()[3] * other.group0()[0])),
                    (-(self.group2()[1] * other.group0()[3]) - (self.group0()[3] * other.group0()[1])),
                    (-(self.group2()[2] * other.group0()[3]) - (self.group0()[3] * other.group0()[2])),
                    ((self.group2()[1] * other.group0()[1]) + (self.group2()[0] * other.group0()[0])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       78        0
    //    simd4       46       55        0
    // Totals...
    // yes simd      102      133        0
    //  no simd      240      298        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (self.group0() * Simd32x4::from(other[scalar]) * Simd32x4::from(-1.0)),
            // e415, e425, e435, e321
            (self.group1() * Simd32x4::from(other[scalar]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e235, e315, e125, e5
            (Simd32x4::from(other[scalar]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group3()[3]]) * Simd32x4::from(-1.0)),
            // e1, e2, e3, e4
            (Simd32x4::from(other[scalar]) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[3]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       68      106        0
    //    simd4       59       61        0
    // Totals...
    // yes simd      127      167        0
    //  no simd      304      350        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            (-(self.group3() * Simd32x4::from(other[e4315]))
                + (swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[2]]))
                + (swizzle!(other.group0(), 2, 0, 1, 1) * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group3()[1]]))
                - (swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group2()[3]]))
                + (Simd32x4::from([
                    (self.group1()[0] * other[e4315]),
                    (self.group1()[1] * other[e4315]),
                    (self.group1()[2] * other[e4315]),
                    (self.group3()[0] * other.group0()[0]),
                ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]))),
            // e415, e425, e435, e321
            ((swizzle!(other.group0(), 1, 2, 0, 3) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]))
                - (swizzle!(self.group3(), 1, 2, 0, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other[e4315]]))
                - (swizzle!(other.group0(), 3, 3, 3, 2) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[2]]))
                - (swizzle!(self.group1(), 3, 3, 3, 0) * swizzle!(other.group0(), 0, 1, 2, 0))
                - Simd32x4::from([
                    (self.group2()[0] * other[e4315]),
                    (self.group2()[1] * other[e4315]),
                    (self.group2()[2] * other[e4315]),
                    (self.group1()[1] * other.group0()[1]),
                ])),
            // e235, e315, e125, e5
            (-(other.group0() * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group0()[3]]))
                + (swizzle!(other.group0(), 3, 3, 3, 2) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[2]]))
                + (swizzle!(self.group2(), 2, 0, 1, 1) * swizzle!(other.group0(), 1, 2, 0, 1))
                + Simd32x4::from([
                    (-(self.group1()[0] * other.group0()[3]) - (self.group2()[1] * other.group0()[2])),
                    (-(self.group2()[2] * other.group0()[0]) - (self.group1()[1] * other.group0()[3])),
                    (-(self.group1()[2] * other.group0()[3]) - (self.group2()[0] * other.group0()[1])),
                    ((self.group2()[0] * other.group0()[0]) + (self.group1()[3] * other.group0()[3])),
                ])),
            // e1, e2, e3, e4
            (-(Simd32x4::from(other[e4315]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                - (swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[2]]))
                + Simd32x4::from([
                    ((self.group1()[1] * other.group0()[2]) + (self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0])),
                    ((self.group1()[2] * other.group0()[0]) + (self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
                    ((self.group1()[0] * other.group0()[1]) + (self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
                    (-(self.group0()[3] * other[e4315]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       92      130        0
    //    simd4       97       98        0
    // Totals...
    // yes simd      189      228        0
    //  no simd      480      522        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        let geometric_anti_product = VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (-(swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[2]]))
                + (swizzle!(self.group3(), 1, 2, 2, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group3()[3], other.group3()[3]]))
                + (swizzle!(self.group3(), 0, 1, 0, 2) * Simd32x4::from([other.group3()[3], other.group3()[3], other.group0()[1], other.group3()[2]]))
                + (swizzle!(other.group3(), 0, 1, 2, 1) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[1]]))
                + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group2()[3]]))
                + (other.group0() * Simd32x4::from([self.group1()[3], self.group1()[3], self.group1()[3], self.group0()[3]]))
                - (swizzle!(other.group0(), 1, 2, 0, 1) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[1]]))
                + (swizzle!(other.group3(), 3, 3, 3, 0) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group3()[0]]))
                - (swizzle!(self.group0(), 2, 0, 1, 2) * Simd32x4::from([other.group3()[1], other.group1()[2], other.group3()[0], other.group2()[2]]))
                - (swizzle!(self.group0(), 2, 0, 1, 0) * Simd32x4::from([other.group1()[1], other.group3()[2], other.group1()[0], other.group2()[0]]))
                + Simd32x4::from([
                    ((self.group1()[1] * other.group0()[2])
                        + (self.group0()[3] * other.group0()[0])
                        + (self.group0()[1] * other.group3()[2])
                        + (self.group0()[1] * other.group1()[2])
                        + (self.group0()[0] * other.group0()[3])
                        + (self.group0()[0] * other.group1()[3])),
                    ((self.group1()[2] * other.group0()[0])
                        + (self.group0()[3] * other.group0()[1])
                        + (self.group0()[2] * other.group3()[0])
                        + (self.group0()[2] * other.group1()[0])
                        + (self.group0()[1] * other.group1()[3])
                        + (self.group0()[1] * other.group0()[3])),
                    ((self.group1()[0] * other.group0()[1])
                        + (self.group0()[3] * other.group0()[2])
                        + (self.group0()[2] * other.group1()[3])
                        + (self.group0()[2] * other.group0()[3])
                        + (self.group0()[0] * other.group1()[1])
                        + (self.group0()[0] * other.group3()[1])),
                    (-(self.group2()[0] * other.group0()[0])
                        - (self.group1()[3] * other.group1()[3])
                        - (self.group1()[2] * other.group1()[2])
                        - (self.group1()[1] * other.group1()[1])
                        - (self.group1()[0] * other.group1()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e23, e31, e12, e45
            ((swizzle!(other.group0(), 0, 1, 2, 2) * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group2()[2]]))
                + (swizzle!(other.group3(), 1, 2, 0, 2) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group1()[2]]))
                - (swizzle!(self.group3(), 1, 2, 2, 3) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[3], other.group3()[3]]))
                - (swizzle!(self.group3(), 0, 1, 0, 2) * Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group1()[2]]))
                + (Simd32x4::from(self.group2()[3]) * other.group2())
                + (swizzle!(self.group2(), 1, 2, 2, 1) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group3()[3], other.group0()[1]]))
                + (swizzle!(self.group2(), 0, 1, 0, 0) * Simd32x4::from([other.group3()[3], other.group3()[3], other.group0()[1], other.group0()[0]]))
                - (swizzle!(other.group1(), 1, 2, 0, 1) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group3()[1]]))
                + (swizzle!(self.group1(), 1, 2, 2, 3) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group0()[3]]))
                + (swizzle!(self.group1(), 0, 1, 0, 1) * Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group3()[1]]))
                - (swizzle!(self.group0(), 2, 0, 1, 3) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]))
                + Simd32x4::from([
                    (-(self.group2()[2] * other.group0()[1]) - (self.group1()[3] * other.group3()[0])
                        + (self.group0()[3] * other.group1()[0])
                        + (self.group0()[0] * other.group2()[3])
                        + (self.group0()[1] * other.group2()[2])),
                    (-(self.group2()[0] * other.group0()[2]) - (self.group1()[3] * other.group3()[1])
                        + (self.group0()[3] * other.group1()[1])
                        + (self.group0()[2] * other.group2()[0])
                        + (self.group0()[1] * other.group2()[3])),
                    (-(self.group2()[1] * other.group0()[0]) - (self.group1()[3] * other.group3()[2])
                        + (self.group0()[3] * other.group1()[2])
                        + (self.group0()[2] * other.group2()[3])
                        + (self.group0()[0] * other.group2()[1])),
                    (-(self.group3()[0] * other.group1()[0]) + (self.group1()[0] * other.group3()[0])
                        - (self.group0()[2] * other.group2()[2])
                        - (self.group0()[0] * other.group2()[0])
                        - (self.group0()[1] * other.group2()[1])),
                ])),
            // e15, e25, e35, e1234
            (-(swizzle!(self.group3(), 3, 3, 3, 2) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group0()[2]]))
                + (other.group1() * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group2()[3]]))
                - (swizzle!(self.group3(), 1, 2, 2, 1) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[3], other.group0()[1]]))
                - (swizzle!(self.group3(), 0, 1, 0, 0) * Simd32x4::from([other.group2()[3], other.group2()[3], other.group2()[1], other.group0()[0]]))
                + (swizzle!(self.group2(), 2, 2, 2, 3) * Simd32x4::from([other.group3()[1], other.group1()[0], other.group0()[3], other.group0()[3]]))
                - (swizzle!(other.group1(), 1, 3, 3, 2) * Simd32x4::from([self.group2()[2], self.group2()[1], self.group2()[2], self.group0()[2]]))
                - (swizzle!(other.group3(), 2, 0, 1, 2) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[2]]))
                - (swizzle!(other.group1(), 3, 2, 0, 1) * Simd32x4::from([self.group2()[0], self.group2()[0], self.group2()[1], self.group0()[1]]))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[2]]))
                - (swizzle!(self.group1(), 2, 0, 1, 1) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group0()[1]]))
                + (swizzle!(self.group1(), 1, 2, 2, 3) * Simd32x4::from([other.group2()[2], other.group2()[0], other.group2()[3], other.group3()[3]]))
                + (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                + Simd32x4::from([
                    ((self.group3()[2] * other.group2()[1])
                        + (self.group2()[1] * other.group1()[2])
                        + (self.group2()[0] * other.group0()[3])
                        + (self.group1()[0] * other.group2()[3])),
                    ((self.group3()[0] * other.group2()[2])
                        + (self.group2()[1] * other.group0()[3])
                        + (self.group2()[0] * other.group3()[2])
                        + (self.group1()[1] * other.group2()[3])),
                    ((self.group3()[1] * other.group2()[0])
                        + (self.group2()[1] * other.group3()[0])
                        + (self.group2()[0] * other.group1()[1])
                        + (self.group1()[0] * other.group2()[1])),
                    (-(self.group1()[0] * other.group0()[0])
                        - (self.group0()[1] * other.group3()[1])
                        - (self.group0()[0] * other.group1()[0])
                        - (self.group0()[0] * other.group3()[0])),
                ])),
            // e4235, e4315, e4125, e3215
            (-(Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]))
                - (swizzle!(other.group1(), 1, 2, 0, 2) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[2]]))
                + (swizzle!(self.group3(), 1, 2, 2, 3) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group0()[3]]))
                + (swizzle!(self.group3(), 0, 1, 0, 2) * Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group2()[2]]))
                + (swizzle!(other.group2(), 0, 1, 2, 1) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[1]]))
                + (swizzle!(self.group2(), 2, 0, 1, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[2]]))
                - (swizzle!(self.group2(), 1, 2, 2, 1) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group3()[3], other.group1()[1]]))
                - (swizzle!(self.group2(), 0, 1, 0, 0) * Simd32x4::from([other.group3()[3], other.group3()[3], other.group0()[1], other.group1()[0]]))
                + (swizzle!(other.group3(), 1, 2, 0, 1) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[1]]))
                - (swizzle!(self.group1(), 1, 2, 2, 3) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[3], other.group2()[3]]))
                - (swizzle!(self.group1(), 0, 1, 0, 2) * Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group2()[2]]))
                - (swizzle!(other.group2(), 1, 2, 0, 1) * Simd32x4::from([self.group0()[2], self.group0()[0], self.group0()[1], self.group1()[1]]))
                + (swizzle!(other.group2(), 3, 0, 3, 0) * Simd32x4::from([self.group0()[0], self.group0()[2], self.group0()[2], self.group3()[0]]))
                + (swizzle!(self.group0(), 1, 1, 0, 3) * swizzle!(other.group2(), 2, 3, 1, 3))
                + Simd32x4::from([
                    ((self.group1()[3] * other.group1()[0]) - (self.group0()[3] * other.group3()[0])),
                    ((self.group1()[3] * other.group1()[1]) - (self.group0()[3] * other.group3()[1])),
                    ((self.group1()[3] * other.group1()[2]) - (self.group0()[3] * other.group3()[2])),
                    ((self.group2()[0] * other.group3()[0]) - (self.group1()[0] * other.group2()[0])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       96      134        0
    //    simd4       96       97        0
    // Totals...
    // yes simd      192      231        0
    //  no simd      480      522        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        let geometric_anti_product = VersorEven::from_groups(
            // e423, e431, e412, e12345
            ((swizzle!(self.group3(), 2, 0, 1, 2) * Simd32x4::from([other.group0()[1], other.group0()[2], other.group0()[0], other.group3()[2]]))
                - (swizzle!(self.group3(), 1, 2, 2, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group2()[3], other.group2()[3]]))
                + (swizzle!(other.group3(), 0, 1, 2, 1) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group3()[1]]))
                - (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group3()[3]]))
                - (swizzle!(other.group0(), 0, 1, 1, 3) * Simd32x4::from([self.group1()[3], self.group1()[3], self.group3()[0], self.group0()[3]]))
                + (swizzle!(other.group0(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group2()[2]]))
                - (swizzle!(self.group1(), 1, 2, 3, 3) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[2], other.group1()[3]]))
                + (Simd32x4::from(self.group0()[2]) * Simd32x4::from([other.group1()[1], other.group3()[0], other.group1()[3], other.group2()[2]]))
                + (swizzle!(self.group0(), 1, 1, 1, 0) * Simd32x4::from([other.group3()[2], other.group1()[3], other.group1()[0], other.group2()[0]]))
                + (swizzle!(self.group0(), 0, 0, 0, 1) * Simd32x4::from([other.group1()[3], other.group1()[2], other.group3()[1], other.group2()[1]]))
                + Simd32x4::from([
                    (-(self.group3()[0] * other.group2()[3])
                        - (self.group1()[0] * other.group2()[3])
                        - (self.group0()[3] * other.group0()[0])
                        - (self.group0()[2] * other.group3()[1])
                        - (self.group0()[1] * other.group1()[2])
                        - (self.group0()[0] * other.group0()[3])),
                    (-(self.group3()[1] * other.group2()[3])
                        - (self.group1()[1] * other.group2()[3])
                        - (self.group0()[3] * other.group0()[1])
                        - (self.group0()[2] * other.group1()[0])
                        - (self.group0()[1] * other.group0()[3])
                        - (self.group0()[0] * other.group3()[2])),
                    (-(self.group1()[2] * other.group2()[3])
                        - (self.group1()[0] * other.group0()[1])
                        - (self.group0()[3] * other.group0()[2])
                        - (self.group0()[2] * other.group0()[3])
                        - (self.group0()[1] * other.group3()[0])
                        - (self.group0()[0] * other.group1()[1])),
                    ((self.group3()[0] * other.group3()[0])
                        + (self.group2()[1] * other.group0()[1])
                        + (self.group2()[0] * other.group0()[0])
                        + (self.group1()[2] * other.group1()[2])
                        + (self.group1()[1] * other.group1()[1])
                        + (self.group1()[0] * other.group1()[0])),
                ])),
            // e415, e425, e435, e321
            (-(Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]))
                + (swizzle!(other.group3(), 1, 2, 0, 3) * Simd32x4::from([self.group3()[2], self.group3()[0], self.group3()[1], self.group2()[3]]))
                - (swizzle!(self.group3(), 1, 2, 2, 2) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[3], other.group1()[2]]))
                - (swizzle!(self.group3(), 0, 1, 0, 1) * Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group1()[1]]))
                - (swizzle!(other.group2(), 0, 1, 2, 2) * Simd32x4::from([self.group2()[3], self.group2()[3], self.group2()[3], self.group0()[2]]))
                + (swizzle!(self.group2(), 2, 0, 1, 2) * swizzle!(other.group0(), 1, 2, 0, 2))
                - (swizzle!(other.group2(), 3, 3, 3, 0) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[0]]))
                - (swizzle!(self.group1(), 3, 3, 3, 2) * swizzle!(other.group3(), 0, 1, 2, 2))
                + (swizzle!(self.group1(), 2, 0, 1, 3) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[3]]))
                - (swizzle!(self.group1(), 1, 2, 2, 1) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group3()[1]]))
                - (swizzle!(self.group1(), 0, 1, 0, 0) * Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group3()[0]]))
                - (swizzle!(other.group1(), 0, 1, 2, 0) * Simd32x4::from([self.group0()[3], self.group0()[3], self.group0()[3], self.group3()[0]]))
                + (swizzle!(self.group0(), 2, 0, 1, 3) * Simd32x4::from([other.group2()[1], other.group2()[2], other.group2()[0], other.group1()[3]]))
                - (swizzle!(self.group0(), 0, 2, 2, 1) * Simd32x4::from([other.group3()[3], other.group2()[0], other.group3()[3], other.group2()[1]]))
                + Simd32x4::from([
                    (-(self.group2()[1] * other.group0()[2]) - (self.group0()[1] * other.group2()[2])),
                    (-(self.group2()[2] * other.group0()[0]) - (self.group0()[1] * other.group3()[3])),
                    (-(self.group2()[0] * other.group0()[1]) - (self.group0()[0] * other.group2()[1])),
                    ((self.group2()[1] * other.group0()[1]) + (self.group2()[0] * other.group0()[0])),
                ])),
            // e235, e315, e125, e5
            (-(Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[3]]))
                - (Simd32x4::from(self.group3()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]))
                - (swizzle!(self.group3(), 2, 0, 1, 2) * swizzle!(other.group2(), 1, 2, 0, 2))
                + (swizzle!(other.group2(), 2, 0, 1, 2) * Simd32x4::from([self.group3()[1], self.group3()[2], self.group3()[0], self.group1()[2]]))
                + (swizzle!(other.group3(), 3, 3, 3, 2) * Simd32x4::from([self.group3()[0], self.group3()[1], self.group3()[2], self.group2()[2]]))
                + (swizzle!(self.group2(), 2, 0, 1, 2) * Simd32x4::from([other.group3()[1], other.group3()[2], other.group3()[0], other.group1()[2]]))
                + (swizzle!(self.group2(), 2, 0, 1, 1) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group3()[1]]))
                - (swizzle!(other.group3(), 2, 0, 1, 3) * Simd32x4::from([self.group2()[1], self.group2()[2], self.group2()[0], self.group0()[3]]))
                + (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group3()[3]]))
                + (swizzle!(self.group1(), 2, 0, 1, 1) * swizzle!(other.group2(), 1, 2, 0, 1))
                - (swizzle!(other.group2(), 2, 0, 2, 1) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group0()[3], self.group3()[1]]))
                - (swizzle!(other.group2(), 0, 1, 1, 0) * Simd32x4::from([self.group0()[3], self.group0()[3], self.group1()[0], self.group3()[0]]))
                + Simd32x4::from([
                    (-(self.group2()[1] * other.group1()[2])
                        - (self.group2()[0] * other.group1()[3])
                        - (self.group2()[0] * other.group0()[3])
                        - (self.group1()[0] * other.group3()[3])),
                    (-(self.group2()[2] * other.group1()[0])
                        - (self.group2()[1] * other.group1()[3])
                        - (self.group2()[1] * other.group0()[3])
                        - (self.group1()[1] * other.group3()[3])),
                    (-(self.group2()[2] * other.group1()[3])
                        - (self.group2()[2] * other.group0()[3])
                        - (self.group2()[0] * other.group1()[1])
                        - (self.group1()[2] * other.group3()[3])),
                    ((self.group2()[1] * other.group1()[1])
                        + (self.group2()[0] * other.group3()[0])
                        + (self.group2()[0] * other.group1()[0])
                        + (self.group1()[0] * other.group2()[0])),
                ])),
            // e1, e2, e3, e4
            (-(other.group0() * Simd32x4::from([self.group3()[3], self.group3()[3], self.group3()[3], self.group2()[3]]))
                + (swizzle!(self.group3(), 1, 2, 2, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group0()[3], other.group0()[2]]))
                + (swizzle!(self.group3(), 0, 1, 0, 1) * Simd32x4::from([other.group0()[3], other.group0()[3], other.group1()[1], other.group0()[1]]))
                + (Simd32x4::from(self.group2()[3]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group1()[3]]))
                + (swizzle!(other.group0(), 1, 2, 0, 0) * Simd32x4::from([self.group2()[2], self.group2()[0], self.group2()[1], self.group3()[0]]))
                - (Simd32x4::from(other.group2()[3]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group1()[3]]))
                + (swizzle!(self.group1(), 3, 3, 3, 2) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[2]]))
                - (swizzle!(other.group3(), 1, 2, 0, 2) * Simd32x4::from([self.group1()[2], self.group1()[0], self.group1()[1], self.group0()[2]]))
                + (swizzle!(self.group1(), 1, 2, 2, 1) * Simd32x4::from([other.group3()[2], other.group3()[0], other.group1()[3], other.group0()[1]]))
                + (swizzle!(self.group1(), 0, 1, 0, 0) * Simd32x4::from([other.group1()[3], other.group1()[3], other.group3()[1], other.group0()[0]]))
                + (swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group3()[0], other.group3()[1], other.group3()[2], other.group1()[2]]))
                - (swizzle!(self.group0(), 2, 0, 1, 3) * swizzle!(other.group2(), 1, 2, 0, 3))
                + (swizzle!(self.group0(), 0, 2, 2, 1) * Simd32x4::from([other.group3()[3], other.group2()[0], other.group3()[3], other.group1()[1]]))
                + (swizzle!(self.group0(), 1, 1, 0, 0) * Simd32x4::from([other.group2()[2], other.group3()[3], other.group2()[1], other.group1()[0]]))
                + Simd32x4::from([
                    (-(self.group3()[2] * other.group1()[1]) - (self.group2()[1] * other.group0()[2])),
                    (-(self.group3()[0] * other.group1()[2]) - (self.group2()[2] * other.group0()[0])),
                    (-(self.group3()[1] * other.group1()[0]) - (self.group2()[0] * other.group0()[1])),
                    (-(self.group0()[1] * other.group3()[1]) - (self.group0()[0] * other.group3()[0])),
                ])),
        );
        return geometric_anti_product.geometric_anti_product(self.anti_reverse());
    }
}
