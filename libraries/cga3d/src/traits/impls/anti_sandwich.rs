use crate::traits::AntiReverse;
use crate::traits::GeometricAntiProduct;
// Note on Operative Statistics:
// Operative Statistics are not a precise predictor of performance or performance comparisons.
// This is due to varying hardware capabilities and compiler optimizations.
// As always, where performance is a concern, there is no substitute for
// real measurements on real work-loads on real hardware.
// Disclaimer aside, enjoy the fun information =)
//
// Total Implementations: 625
//
// Yes SIMD:   add/sub     mul     div
//  Minimum:         0       2       0
//   Median:        42      73       0
//  Average:        78     112       0
//  Maximum:       784     906       0
//
//  No SIMD:   add/sub     mul     div
//  Minimum:         0       2       0
//   Median:        96     134       0
//  Average:       186     223       0
//  Maximum:      1984    2068       0
impl std::ops::Div<anti_sandwich> for AntiCircleRotor {
    type Output = anti_sandwich_partial<AntiCircleRotor>;
    fn div(self, _rhs: anti_sandwich) -> Self::Output {
        anti_sandwich_partial(self)
    }
}
impl AntiSandwich<AntiCircleRotor> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       69      118        0
    //    simd3        0       22        0
    //    simd4       49       31        0
    // Totals...
    // yes simd      118      171        0
    //  no simd      265      308        0
    fn anti_sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                -(other[e43] * self[e31]) - (other[e12] * self[e42]) - (other[scalar] * self[e41]),
                -(other[e42] * self[scalar]) - (other[e23] * self[e43]) - (other[scalar] * self[e42]),
                -(other[e43] * self[scalar]) - (other[e31] * self[e41]) - (other[scalar] * self[e43]),
                (other[e23] * self[e23]) + (other[e31] * self[e31]) + (other[e12] * self[e12]) + (other[e15] * self[e41]) + (other[e25] * self[e42]) + (other[e35] * self[e43]),
            ]) + (other.group0().yzx() * self.group1().zxy()).with_w(other[e41] * self[e15])
                + (self.group0().xxy() * other.group1().wzx()).with_w(other[e42] * self[e25])
                + (self.group0().zyz() * other.group1().yww()).with_w(other[e43] * self[e35])
                - (Simd32x4::from([self[scalar], self[e45], self[e45], self[scalar]]) * other.group0().with_w(other[scalar]))
                - (self.group1().wzxw() * other.group0().xxy().with_w(other[e45])),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(other[e12] * self[e31]) - (other[scalar] * self[e23]),
                -(other[e31] * self[scalar]) - (other[scalar] * self[e31]),
                -(other[e12] * self[scalar]) - (other[scalar] * self[e12]),
                (other[e45] * self[scalar]) + (other[scalar] * self[e45]),
            ]) + (self.group2().zxyx() * other.group0().yzx().with_w(other[e41]))
                + (self.group0().zxy() * other.group2().yzx()).with_w(other[e42] * self[e25])
                + (other.group1().yzx() * self.group1().zxy()).with_w(other[e43] * self[e35])
                - (Simd32x4::from([self[scalar], self[e12], self[e23], other[e35]]) * other.group1().xxy().with_w(self[e43]))
                - (other.group2().zxyy() * self.group0().yzx().with_w(self[e42]))
                - (other.group0().zxy() * self.group2().yzx()).with_w(other[e15] * self[e41]),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(other[e12] * self[e25]) - (other[e45] * self[e15]) - (other[e15] * self[scalar]) - (other[e35] * self[e31]) - (other[scalar] * self[e15]),
                -(other[e23] * self[e35]) - (other[e45] * self[e25]) - (other[e15] * self[e12]) - (other[e25] * self[scalar]) - (other[scalar] * self[e25]),
                -(other[e31] * self[e15]) - (other[e45] * self[e35]) - (other[e25] * self[e23]) - (other[e35] * self[scalar]) - (other[scalar] * self[e35]),
                (other[e15] * self[e23]) + (other[e25] * self[e31]) + (other[e35] * self[e12]),
            ]) + (other.group1().yzxx() * self.group2().zxyx())
                + (other.group2().xyx() * self.group1().wwy()).with_w(other[e31] * self[e25])
                + (other.group2().yzz() * self.group1().zxw()).with_w(other[e12] * self[e35]),
            // e1, e2, e3, e4
            Simd32x4::from([
                -(other[e43] * self[e25]) - (other[e25] * self[e43]),
                -(other[e41] * self[e35]) - (other[e35] * self[e41]),
                -(other[e42] * self[e15]) - (other[e15] * self[e42]),
                (other[e31] * self[e42]) + (other[e12] * self[e43]),
            ]) + (self.group1().wwwz() * other.group1().xyz().with_w(other[e43]))
                + (other.group0().yzx() * self.group2().zxy()).with_w(other[e41] * self[e23])
                + (self.group0().yzx() * other.group2().zxy()).with_w(other[e42] * self[e31])
                + (other.group1().www() * self.group1().xyz()).with_w(other[e23] * self[e41]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDipoleInversion> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       65      116        0
    //    simd3        0       23        0
    //    simd4       61       42        0
    // Totals...
    // yes simd      126      181        0
    //  no simd      309      353        0
    fn anti_sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e41] * other[e321])
                    + (self[e42] * other[e435])
                    + (self[e42] * other[e3])
                    + (self[e23] * other[e4])
                    + (self[e31] * other[e412])
                    + (self[e45] * other[e423])
                    + (self[scalar] * other[e423]),
                (self[e42] * other[e321])
                    + (self[e43] * other[e415])
                    + (self[e43] * other[e1])
                    + (self[e31] * other[e4])
                    + (self[e12] * other[e423])
                    + (self[e45] * other[e431])
                    + (self[scalar] * other[e431]),
                (self[e41] * other[e425])
                    + (self[e41] * other[e2])
                    + (self[e43] * other[e321])
                    + (self[e23] * other[e431])
                    + (self[e12] * other[e4])
                    + (self[e45] * other[e412])
                    + (self[scalar] * other[e412]),
                -(self[e23] * other[e415])
                    - (self[e31] * other[e425])
                    - (self[e12] * other[e435])
                    - (self[e45] * other[e321])
                    - (self[e15] * other[e423])
                    - (self[e25] * other[e431])
                    - (self[e35] * other[e412]),
            ]) - (self.group0().zxy() * other.group1().yzx()).with_w(self[e41] * other[e235])
                - (self.group0().zxy() * other.group3().yzx()).with_w(self[e42] * other[e315])
                - (other.group0().yzx() * self.group1().zxy()).with_w(self[e43] * other[e125]),
            // e23, e31, e12, e45
            (self.group1().yzxx() * other.group1().zxy().with_w(other[e1]))
                + (self.group2().yzxz() * other.group0().zxy().with_w(other[e412]))
                + (other.group2().zx().with_zw(other[e5], self[e25]) * self.group0().yzz().with_w(other[e431]))
                + (other.group3().ww().with_zw(other[e315], self[e15]) * self.group0().xyx().with_w(other[e423]))
                + (self.group2().www() * other.group1().xyz()).with_w(self[e12] * other[e3])
                + (other.group2().www() * self.group2().xyz()).with_w(self[e31] * other[e2])
                - (other.group2().yzxx() * self.group0().zxy().with_w(self[e41]))
                - (other.group0().yzx() * self.group2().zxy()).with_w(self[e42] * other[e315])
                - (self.group1().zxy() * other.group1().yzx()).with_w(self[e43] * other[e125])
                - (self.group1().www() * other.group3().xyz()).with_w(self[scalar] * other[e321]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e25] * other[e435]) + (self[e35] * other[e2]) + (self[scalar] * other[e235]),
                (self[e15] * other[e3]) + (self[e35] * other[e415]) + (self[scalar] * other[e315]),
                (self[e15] * other[e425]) + (self[e25] * other[e1]) + (self[scalar] * other[e125]),
                -(self[e43] * other[e3]) - (self[e23] * other[e423]) - (self[e31] * other[e431]) - (self[e12] * other[e412]),
            ]) + (self.group1().xyxw() * other.group3().ww().with_zw(other[e315], other[e4]))
                + (other.group2().zx().with_zw(other[e5], other[e4]) * self.group1().yzz().with_w(self[scalar]))
                - (Simd32x4::from([other[e425], other[e1], other[e321], other[e435]]) * self.group2().zzz().with_w(self[e43]))
                - (Simd32x4::from([other[e3], other[e321], other[e415], other[e2]]) * self.group2().yyy().with_w(self[e42]))
                - (other.group1().wz().with_zw(other[e2], other[e425]) * self.group2().xxx().with_w(self[e42]))
                - (self.group1().zxy() * other.group2().yzx()).with_w(self[e41] * other[e415])
                - (self.group1().www() * other.group2().xyz()).with_w(self[e41] * other[e1]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e45] * other[e415], self[e45] * other[e425], self[e45] * other[e435], self[e35] * other[e435] * -1.0])
                + (other.group3().yzxw() * self.group1().zxy().with_w(self[scalar]))
                + (other.group2().zx().with_zw(other[e5], other[e2]) * self.group0().yzz().with_w(self[e25]))
                + (other.group3().ww().with_zw(other[e315], other[e1]) * self.group0().xyx().with_w(self[e15]))
                + (other.group0().yzx() * self.group2().zxy()).with_w(self[e35] * other[e3])
                - (self.group1().xyxz() * other.group1().ww().with_zw(other[e2], other[e125]))
                - (self.group1().yzzw() * other.group3().zx().with_zw(other[e321], other[e5]))
                - (self.group2().xyzx() * other.group2().www().with_w(other[e415]))
                - (self.group2().wwwy() * other.group3().xyz().with_w(other[e425]))
                - (other.group2().yzxx() * self.group0().zxy().with_w(self[e23]))
                - (other.group0().zxy() * self.group2().yzx()).with_w(self[e31] * other[e315]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       66        0
    //    simd3        1       13        0
    //    simd4       32       30        0
    // Totals...
    // yes simd       69      109        0
    //  no simd      167      225        0
    fn anti_sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(other[scalar]) * self.group0().with_w(self[scalar]) * Simd32x4::from(-1.0),
            // e415, e425, e435, e321
            (-(Simd32x3::from(other[e3215]) * self.group0()) - (Simd32x3::from(other[scalar]) * self.group1().xyz())).with_w(self[e45] * other[scalar]),
            // e235, e315, e125, e5
            Simd32x4::from([
                self[e15] * other[scalar] * -1.0,
                self[e25] * other[scalar] * -1.0,
                self[e35] * other[scalar] * -1.0,
                self[e45] * other[e3215],
            ]) - (Simd32x4::from(other[e3215]) * self.group1().xyz().with_w(self[scalar])),
            // e1, e2, e3, e4
            other.group0().xx().with_zw(other[e3215], 0.0) * Simd32x3::from(1.0).with_w(0.0) * self.group0().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlatPoint> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       37       73        0
    //    simd3        0       16        0
    //    simd4       39       28        0
    // Totals...
    // yes simd       76      117        0
    //  no simd      193      233        0
    fn anti_sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([other[e321], other[e321], other[e321], 1.0])
                * self
                    .group0()
                    .with_w(-(self[e41] * other[e235]) - (self[e42] * other[e315]) - (self[e43] * other[e125]) - (self[e45] * other[e321])),
            // e23, e31, e12, e45
            Simd32x4::from([
                self[e42] * other[e125],
                self[e43] * other[e235],
                self[e41] * other[e315],
                -(self[e42] * other[e315]) - (self[e43] * other[e125]) - (self[scalar] * other[e321]),
            ]) - (other.group0().yzxx() * self.group0().zxy().with_w(self[e41])),
            // e15, e25, e35, e1234
            (Simd32x3::from(self[scalar]) * other.group0().xyz()).with_w(0.0) + (self.group1().yzx() * other.group0().zxy()).with_w(0.0)
                - (Simd32x3::from(self[e45]) * other.group0().xyz()).with_w(0.0)
                - (Simd32x3::from(other[e321]) * self.group2().xyz()).with_w(0.0)
                - (self.group1().zxy() * other.group0().yzx()).with_w(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e42] * other[e125], self[e43] * other[e235], self[e41] * other[e315], self[e12] * other[e125] * -1.0])
                - (self.group1().xyzy() * other.group0().wwwy())
                - (other.group0().yzxx() * self.group0().zxy().with_w(self[e23])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlector> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       51       90        0
    //    simd3        0       15        0
    //    simd4       47       35        0
    // Totals...
    // yes simd       98      140        0
    //  no simd      239      275        0
    fn anti_sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e41] * other[e321]) + (self[e42] * other[e3]),
                (self[e42] * other[e321]) + (self[e43] * other[e1]),
                (self[e41] * other[e2]) + (self[e43] * other[e321]),
                -(self[e42] * other[e315]) - (self[e43] * other[e125]) - (self[e45] * other[e321]),
            ]) - (self.group0().zxy() * other.group1().yzx()).with_w(self[e41] * other[e235]),
            // e23, e31, e12, e45
            (other.group0().zx().with_zw(other[e5], other[e2]) * self.group0().yzz().with_w(self[e31]))
                + (other.group1().ww().with_zw(other[e315], other[e1]) * self.group0().xyx().with_w(self[e23]))
                + Simd32x3::from(0.0).with_w((self[e12] * other[e3]) - (self[e43] * other[e125]) - (self[scalar] * other[e321]))
                - (other.group0().yzxx() * self.group0().zxy().with_w(self[e41]))
                - (self.group1().www() * other.group1().xyz()).with_w(self[e42] * other[e315]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * other[e5]) + (self[e31] * other[e125]) + (self[e35] * other[e2]) + (self[scalar] * other[e235]) - (self[e25] * other[e3]),
                (self[e31] * other[e5]) + (self[e12] * other[e235]) + (self[e15] * other[e3]) + (self[scalar] * other[e315]) - (self[e35] * other[e1]),
                (self[e23] * other[e315]) + (self[e12] * other[e5]) + (self[e25] * other[e1]) + (self[scalar] * other[e125]) - (self[e35] * other[e321]),
                0.0,
            ]) - (other.group0().ww().with_zw(other[e2], other[e3]) * self.group2().xyx().with_w(self[e43]))
                - (self.group1().zxy() * other.group0().yzx()).with_w(self[e41] * other[e1])
                - (self.group1().www() * other.group0().xyz()).with_w(self[e42] * other[e2]),
            // e4235, e4315, e4125, e3215
            (other.group1().yzxz() * self.group1().zxy().with_w(self[e35]))
                + (other.group0().zx().with_zw(other[e5], other[e2]) * self.group0().yzz().with_w(self[e25]))
                + (other.group1().ww().with_zw(other[e315], other[e1]) * self.group0().xyx().with_w(self[e15]))
                + Simd32x3::from(0.0).with_w(self[scalar] * other[e5])
                - (other.group1() * self.group2().www().with_w(self[e45]))
                - (self.group1().xyxy() * other.group0().ww().with_zw(other[e2], other[e315]))
                - (self.group1().yzzz() * other.group1().zx().with_zw(other[e321], other[e125]))
                - (other.group0().yzxx() * self.group0().zxy().with_w(self[e23])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiLine> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       51      100        0
    //    simd3        0       17        0
    //    simd4       40       27        0
    // Totals...
    // yes simd       91      144        0
    //  no simd      211      259        0
    fn anti_sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[e42] * other[e12] * -1.0,
                self[e43] * other[e23] * -1.0,
                self[e41] * other[e31] * -1.0,
                (self[e42] * other[e25]) + (self[e43] * other[e35]) + (self[e23] * other[e23]) + (self[e31] * other[e31]) + (self[e12] * other[e12]),
            ]) + (self.group0().zxy() * other.group0().yzx()).with_w(self[e41] * other[e15]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e43] * other[e25]) + (self[e12] * other[e31]),
                (self[e41] * other[e35]) + (self[e23] * other[e12]),
                (self[e42] * other[e15]) + (self[e31] * other[e23]),
                0.0,
            ]) - (Simd32x4::from([self[e31], self[scalar], self[scalar], other[e35]]) * other.group0().zyz().with_w(self[e43]))
                - (Simd32x4::from([self[scalar], self[e12], self[e23], other[e25]]) * other.group0().xxy().with_w(self[e42]))
                - (self.group0().yzx() * other.group1().zxy()).with_w(self[e41] * other[e15]),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e31] * other[e35]) - (self[e25] * other[e12]) - (self[scalar] * other[e15]),
                -(self[e12] * other[e15]) - (self[e35] * other[e23]) - (self[scalar] * other[e25]),
                -(self[e23] * other[e25]) - (self[e15] * other[e31]) - (self[scalar] * other[e35]),
                (self[e23] * other[e15]) + (self[e31] * other[e25]) + (self[e12] * other[e35]),
            ]) + (self.group2().zxyx() * other.group0().yzx().with_w(other[e23]))
                + (other.group1().xyx() * self.group1().wwy()).with_w(self[e25] * other[e31])
                + (other.group1().yzz() * self.group1().zxw()).with_w(self[e35] * other[e12]),
            // e1, e2, e3, e4
            Simd32x4::from([self[e43] * other[e25] * -1.0, self[e41] * other[e35] * -1.0, self[e42] * other[e15] * -1.0, self[e43] * other[e12]])
                + (other.group0() * self.group1().www()).with_w(self[e42] * other[e31])
                + (self.group0().yzx() * other.group1().zxy()).with_w(self[e41] * other[e23]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiMotor> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       58      106        0
    //    simd3        0       17        0
    //    simd4       44       31        0
    // Totals...
    // yes simd      102      154        0
    //  no simd      234      281        0
    fn anti_sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[e42] * other[e12] * -1.0,
                self[e43] * other[e23] * -1.0,
                self[e43] * other[scalar] * -1.0,
                (self[e42] * other[e25]) + (self[e43] * other[e35]) + (self[e23] * other[e23]) + (self[e31] * other[e31]) + (self[e12] * other[e12]),
            ]) + (self.group0().zxy() * other.group0().yzx()).with_w(self[e41] * other[e15])
                - (other.group0().wwyw() * self.group0().xyx().with_w(self[scalar])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e12] * other[e31]) - (self[e31] * other[e12]) - (self[scalar] * other[e23]),
                (self[e23] * other[e12]) - (self[e12] * other[e23]) - (self[scalar] * other[e31]),
                (self[e31] * other[e23]) - (self[e12] * other[scalar]) - (self[scalar] * other[e12]),
                0.0,
            ]) + (self.group0().zxy() * other.group1().yzx()).with_w(self[e45] * other[scalar])
                - (other.group1().zxwy() * self.group0().yzz().with_w(self[e42]))
                - (other.group1().wwyx() * self.group0().xyx().with_w(self[e41]))
                - (self.group1().xyx() * other.group0().wwy()).with_w(self[e43] * other[e35]),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e31] * other[e35]) - (self[e15] * other[scalar]) - (self[e25] * other[e12]) - (self[scalar] * other[e15]),
                -(self[e12] * other[e15]) - (self[e25] * other[scalar]) - (self[e35] * other[e23]) - (self[scalar] * other[e25]),
                -(self[e12] * other[e3215]) - (self[e15] * other[e31]) - (self[e35] * other[scalar]) - (self[scalar] * other[e35]),
                (self[e45] * other[e3215]) + (self[e15] * other[e23]) + (self[e25] * other[e31]) + (self[e35] * other[e12]),
            ]) + (self.group1().zxyx() * other.group1().yzxx())
                + (self.group1().wwwy() * other.group1().xyzy())
                + (self.group2().zxy() * other.group0().yzx()).with_w(self[e12] * other[e35])
                - (other.group1().wwyw() * self.group1().xyx().with_w(self[scalar])),
            // e1, e2, e3, e4
            Simd32x4::from([self[e43] * other[e25] * -1.0, self[e41] * other[e35] * -1.0, self[e42] * other[e15] * -1.0, 0.0])
                + (other.group0().xyzz() * self.group1().www().with_w(self[e43]))
                + (self.group0().xyx() * other.group1().wwy()).with_w(self[e41] * other[e23])
                + (self.group0().yzz() * other.group1().zxw()).with_w(self[e42] * other[e31]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiPlane> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       31       83        0
    //    simd3        1       15        0
    //    simd4       36       26        0
    // Totals...
    // yes simd       68      124        0
    //  no simd      178      232        0
    fn anti_sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (self.group0().yzx() * other.group0().zxy()) - (self.group0().zxy() * other.group0().yzx()),
            // e23, e31, e12, e45
            Simd32x4::from([
                self[e45] * other[e1] * -1.0,
                self[e45] * other[e2] * -1.0,
                self[e45] * other[e3] * -1.0,
                (self[e31] * other[e2]) + (self[e12] * other[e3]),
            ]) + (other.group0().wwwx() * self.group0().with_w(self[e23])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * other[e5]) + (self[e35] * other[e2]),
                (self[e31] * other[e5]) + (self[e15] * other[e3]),
                (self[e12] * other[e5]) + (self[e25] * other[e1]),
                -(self[e42] * other[e2]) - (self[e43] * other[e3]),
            ]) - (other.group0().zxyx() * self.group2().yzx().with_w(self[e41])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[scalar] * other[e1] * -1.0,
                self[scalar] * other[e2] * -1.0,
                self[scalar] * other[e3] * -1.0,
                (self[e35] * other[e3]) + (self[scalar] * other[e5]),
            ]) + (other.group0().yzxy() * self.group1().zxy().with_w(self[e25]))
                + (other.group0().wwwx() * self.group0().with_w(self[e15]))
                - (self.group1().yzxw() * other.group0().zxyw()),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiScalar> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       33       60        0
    //    simd3        0       13        0
    //    simd4       18       11        0
    // Totals...
    // yes simd       51       84        0
    //  no simd      105      143        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(other[e12345]) * self.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other[e12345]) * self.group1(),
            // e15, e25, e35, scalar
            Simd32x4::from(other[e12345]) * self.group2(),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       66      122        0
    //    simd3        0       24        0
    //    simd4       47       26        0
    // Totals...
    // yes simd      113      172        0
    //  no simd      254      298        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e41] * other[e321]) + (self[e42] * other[e435]) + (self[e31] * other[e412]) + (self[e45] * other[e423]) + (self[scalar] * other[e423]),
                (self[e42] * other[e321]) + (self[e43] * other[e415]) + (self[e12] * other[e423]) + (self[e45] * other[e431]) + (self[scalar] * other[e431]),
                (self[e41] * other[e425]) + (self[e43] * other[e321]) + (self[e23] * other[e431]) + (self[e45] * other[e412]) + (self[scalar] * other[e412]),
                -(self[e43] * other[e125])
                    - (self[e23] * other[e415])
                    - (self[e31] * other[e425])
                    - (self[e12] * other[e435])
                    - (self[e45] * other[e321])
                    - (self[e15] * other[e423])
                    - (self[e25] * other[e431])
                    - (self[e35] * other[e412]),
            ]) - (self.group0().zxy() * other.group1().yzx()).with_w(self[e41] * other[e235])
                - (other.group0().yzx() * self.group1().zxy()).with_w(self[e42] * other[e315]),
            // e23, e31, e12, e45
            Simd32x4::from([self[scalar] * other[e415], self[scalar] * other[e425], self[scalar] * other[e435], self[scalar] * other[e321] * -1.0])
                + (self.group2().yzxy() * other.group0().zxy().with_w(other[e431]))
                + (self.group0().yzx() * other.group2().zxy()).with_w(self[e15] * other[e423])
                + (self.group1().yzx() * other.group1().zxy()).with_w(self[e35] * other[e412])
                - (self.group0().zxy() * other.group2().yzx()).with_w(self[e41] * other[e235])
                - (other.group0().yzx() * self.group2().zxy()).with_w(self[e42] * other[e315])
                - (self.group1().zxy() * other.group1().yzx()).with_w(self[e43] * other[e125]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e31] * other[e125]) + (self[e25] * other[e435]) + (self[scalar] * other[e235]),
                (self[e12] * other[e235]) + (self[e35] * other[e415]) + (self[scalar] * other[e315]),
                (self[e23] * other[e315]) + (self[e15] * other[e425]) + (self[scalar] * other[e125]),
                -(self[e31] * other[e431]) - (self[e12] * other[e412]),
            ]) - (other.group1().wzxz() * self.group2().xxy().with_w(self[e43]))
                - (other.group2().xyx() * self.group1().wwy()).with_w(self[e41] * other[e415])
                - (other.group2().yzz() * self.group1().zxw()).with_w(self[e42] * other[e425])
                - (self.group2().zyz() * other.group1().yww()).with_w(self[e23] * other[e423]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e42] * other[e125]) + (self[e45] * other[e415]) + (self[e35] * other[e431]),
                (self[e43] * other[e235]) + (self[e45] * other[e425]) + (self[e15] * other[e412]),
                (self[e41] * other[e315]) + (self[e45] * other[e435]) + (self[e25] * other[e423]),
                -(self[e15] * other[e415]) - (self[e25] * other[e425]) - (self[e35] * other[e435]),
            ]) - (self.group0().zxy() * other.group2().yzx()).with_w(self[e23] * other[e235])
                - (other.group0().zxy() * self.group2().yzx()).with_w(self[e31] * other[e315])
                - (other.group1().www() * self.group1().xyz()).with_w(self[e12] * other[e125]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       69      122        0
    //    simd3        0       21        0
    //    simd4       49       31        0
    // Totals...
    // yes simd      118      174        0
    //  no simd      265      309        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e41] * other[e12345]) + (self[e42] * other[e435]) + (self[e31] * other[e412]) + (self[e45] * other[e423]) + (self[scalar] * other[e423]),
                (self[e42] * other[e12345]) + (self[e43] * other[e415]) + (self[e12] * other[e423]) + (self[e45] * other[e431]) + (self[scalar] * other[e431]),
                (self[e43] * other[e321]) + (self[e43] * other[e12345]) + (self[e23] * other[e431]) + (self[e45] * other[e412]) + (self[scalar] * other[e412]),
                -(self[e43] * other[e125])
                    - (self[e23] * other[e415])
                    - (self[e31] * other[e425])
                    - (self[e12] * other[e435])
                    - (self[e45] * other[e321])
                    - (self[e15] * other[e423])
                    - (self[e25] * other[e431])
                    - (self[e35] * other[e412]),
            ]) + (self.group0().xyx() * other.group1().wwy()).with_w(self[scalar] * other[e12345])
                - (self.group0().zxy() * other.group1().yzx()).with_w(self[e41] * other[e235])
                - (other.group0().yzx() * self.group1().zxy()).with_w(self[e42] * other[e315]),
            // e23, e31, e12, e45
            Simd32x4::from([self[scalar] * other[e415], self[scalar] * other[e425], self[scalar] * other[e435], self[scalar] * other[e321] * -1.0])
                + (self.group1().yzzw() * other.group1().zx().with_zw(other[e12345], other[e12345]))
                + (self.group2().yzxy() * other.group0().zxy().with_w(other[e431]))
                + (other.group2().ww().with_zw(other[e425], self[e35]) * self.group1().xyx().with_w(other[e412]))
                + (self.group0().yzx() * other.group2().zxy()).with_w(self[e15] * other[e423])
                - (other.group2().yzxx() * self.group0().zxy().with_w(self[e41]))
                - (other.group0().yzx() * self.group2().zxy()).with_w(self[e42] * other[e315])
                - (self.group1().zxy() * other.group1().yzx()).with_w(self[e43] * other[e125]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e31] * other[e125]) + (self[e15] * other[e12345]) + (self[e25] * other[e435]) + (self[scalar] * other[e235]),
                (self[e12] * other[e235]) + (self[e25] * other[e12345]) + (self[e35] * other[e415]) + (self[scalar] * other[e315]),
                (self[e23] * other[e315]) + (self[e15] * other[e425]) + (self[e35] * other[e12345]) + (self[scalar] * other[e125]),
                -(self[e31] * other[e431]) - (self[e12] * other[e412]),
            ]) - (other.group1().wzxz() * self.group2().xxy().with_w(self[e43]))
                - (self.group1().zxy() * other.group2().yzx()).with_w(self[e41] * other[e415])
                - (self.group1().www() * other.group2().xyz()).with_w(self[e42] * other[e425])
                - (self.group2().zyz() * other.group1().yww()).with_w(self[e23] * other[e423]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e42] * other[e125]) + (self[e45] * other[e415]) + (self[e35] * other[e431]),
                (self[e43] * other[e235]) + (self[e45] * other[e425]) + (self[e15] * other[e412]),
                (self[e41] * other[e315]) + (self[e45] * other[e435]) + (self[e25] * other[e423]),
                -(self[e15] * other[e415]) - (self[e25] * other[e425]) - (self[e35] * other[e435]),
            ]) - (self.group1().xyzz() * other.group1().www().with_w(other[e125]))
                - (other.group2().yzxx() * self.group0().zxy().with_w(self[e23]))
                - (other.group0().zxy() * self.group2().yzx()).with_w(self[e31] * other[e315]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       62      115        0
    //    simd3        0       23        0
    //    simd4       48       29        0
    // Totals...
    // yes simd      110      167        0
    //  no simd      254      300        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                -(self[e31] * other[e43]) - (self[e45] * other[e41]) - (self[scalar] * other[e41]),
                -(self[e12] * other[e41]) - (self[e45] * other[e42]) - (self[scalar] * other[e42]),
                -(self[e23] * other[e42]) - (self[e45] * other[e43]) - (self[scalar] * other[e43]),
                (self[e23] * other[e23]) + (self[e31] * other[e31]) + (self[e12] * other[e12]) + (self[e15] * other[e41]) + (self[e25] * other[e42]) + (self[e35] * other[e43]),
            ]) + (self.group0().xxy() * other.group1().wzx()).with_w(self[e41] * other[e15])
                + (self.group0().zyz() * other.group1().yww()).with_w(self[e42] * other[e25])
                + (other.group0().yzx() * self.group1().zxy()).with_w(self[e43] * other[e35])
                - (other.group1().zxyw() * self.group0().yzx().with_w(self[e45])),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[scalar] * other[e23] * -1.0,
                self[scalar] * other[e31] * -1.0,
                self[scalar] * other[e12] * -1.0,
                self[scalar] * other[e45],
            ]) + (self.group2().zxyy() * other.group0().yzx().with_w(other[e42]))
                + (self.group0().zxy() * other.group2().yzx()).with_w(self[e15] * other[e41])
                + (self.group1().zxy() * other.group1().yzx()).with_w(self[e35] * other[e43])
                - (self.group0().yzx() * other.group2().zxy()).with_w(self[e41] * other[e15])
                - (other.group0().zxy() * self.group2().yzx()).with_w(self[e42] * other[e25])
                - (self.group1().yzx() * other.group1().zxy()).with_w(self[e43] * other[e35]),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e31] * other[e35]) - (self[e15] * other[e45]) - (self[e25] * other[e12]) - (self[scalar] * other[e15]),
                -(self[e12] * other[e15]) - (self[e25] * other[e45]) - (self[e35] * other[e23]) - (self[scalar] * other[e25]),
                -(self[e23] * other[e25]) - (self[e15] * other[e31]) - (self[e35] * other[e45]) - (self[scalar] * other[e35]),
                (self[e15] * other[e23]) + (self[e25] * other[e31]) + (self[e35] * other[e12]),
            ]) + (self.group1().zxwy() * other.group2().yzz().with_w(other[e25]))
                + (self.group1().wwyx() * other.group2().xyx().with_w(other[e15]))
                + (self.group2().zxy() * other.group1().yzx()).with_w(self[e12] * other[e35]),
            // e1, e2, e3, e4
            Simd32x4::from([
                -(self[e43] * other[e25]) - (self[e25] * other[e43]),
                -(self[e41] * other[e35]) - (self[e35] * other[e41]),
                -(self[e42] * other[e15]) - (self[e15] * other[e42]),
                (self[e31] * other[e42]) + (self[e12] * other[e43]),
            ]) + (other.group1().wwwz() * self.group1().xyz().with_w(self[e43]))
                + (self.group0().yzx() * other.group2().zxy()).with_w(self[e41] * other[e23])
                + (other.group0().yzx() * self.group2().zxy()).with_w(self[e42] * other[e31])
                + (self.group1().www() * other.group1().xyz()).with_w(self[e23] * other[e41]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       69      121        0
    //    simd3        0       21        0
    //    simd4       60       43        0
    // Totals...
    // yes simd      129      185        0
    //  no simd      309      356        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                -(self[e43] * other[e4315]) - (self[e23] * other[e1234]) - (self[e31] * other[e43]) - (self[e45] * other[e41]) - (self[scalar] * other[e41]),
                -(self[e43] * other[e23]) - (self[e31] * other[e1234]) - (self[e12] * other[e41]) - (self[e45] * other[e42]) - (self[scalar] * other[e42]),
                -(self[e42] * other[e4235]) - (self[e23] * other[e42]) - (self[e12] * other[e1234]) - (self[e45] * other[e43]) - (self[scalar] * other[e43]),
                (self[e23] * other[e23]) + (self[e31] * other[e31]) + (self[e12] * other[e12]) + (self[e25] * other[e42]) + (self[e35] * other[e43]),
            ]) + (Simd32x4::from(self[e41]) * other.group1().wz().with_zw(other[e4315], other[e15]))
                + (Simd32x4::from(self[e42]) * Simd32x4::from([other[e4125], other[e45], other[e23], other[e25]]))
                + (Simd32x4::from(self[e43]) * Simd32x4::from([other[e31], other[e4235], other[e45], other[e35]]))
                + (other.group0().yzx() * self.group1().zxy()).with_w(self[e15] * other[e41])
                - (Simd32x4::from([other[e12], other[e4125], other[e31], other[e45]]) * self.group0().yxx().with_w(self[e45])),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[scalar] * other[e23] * -1.0,
                self[scalar] * other[e31] * -1.0,
                self[scalar] * other[e12] * -1.0,
                self[scalar] * other[e45],
            ]) + (self.group2().zxyy() * other.group0().yzx().with_w(other[e42]))
                + (self.group0().zxy() * other.group2().yzx()).with_w(self[e15] * other[e41])
                + (self.group1().zxy() * other.group1().yzx()).with_w(self[e35] * other[e43])
                - (self.group1().yzxx() * other.group1().zxy().with_w(other[e4235]))
                - (self.group1().wwwy() * other.group3().xyzy())
                - (other.group2().zx().with_zw(other[e3215], other[e25]) * self.group0().yzz().with_w(self[e42]))
                - (other.group3().ww().with_zw(other[e25], other[e15]) * self.group0().xyx().with_w(self[e41]))
                - (other.group0().zxy() * self.group2().yzx()).with_w(self[e43] * other[e35])
                - (other.group2().www() * self.group2().xyz()).with_w(self[e12] * other[e4125]),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e31] * other[e35]) - (self[e15] * other[e45]) - (self[e25] * other[e12]) - (self[e25] * other[e4125]) - (self[scalar] * other[e15]),
                -(self[e12] * other[e15]) - (self[e25] * other[e45]) - (self[e35] * other[e23]) - (self[e35] * other[e4235]) - (self[scalar] * other[e25]),
                -(self[e12] * other[e3215]) - (self[e15] * other[e31]) - (self[e15] * other[e4315]) - (self[e35] * other[e45]) - (self[scalar] * other[e35]),
                (self[e15] * other[e23])
                    + (self[e15] * other[e4235])
                    + (self[e25] * other[e31])
                    + (self[e25] * other[e4315])
                    + (self[e35] * other[e12])
                    + (self[e35] * other[e4125]),
            ]) + (self.group1().zxyx() * other.group2().yzxx())
                + (self.group1().wwwy() * other.group2().xyzy())
                + (other.group3().yzxw() * self.group2().zxy().with_w(self[e45]))
                + (self.group2().zxy() * other.group1().yzx()).with_w(self[e12] * other[e35])
                - (other.group3().ww().with_zw(other[e25], other[e3215]) * self.group1().xyx().with_w(self[scalar])),
            // e1, e2, e3, e4
            Simd32x4::from([
                self[scalar] * other[e4235],
                self[scalar] * other[e4315],
                self[scalar] * other[e4125],
                self[scalar] * other[e1234] * -1.0,
            ]) + (other.group1().ww().with_zw(other[e4315], self[e23]) * self.group1().xyx().with_w(other[e41]))
                + (other.group2().zx().with_zw(other[e3215], other[e31]) * self.group0().yzz().with_w(self[e42]))
                + (other.group3().zx().with_zw(other[e45], self[e31]) * self.group1().yzz().with_w(other[e42]))
                + (other.group3().ww().with_zw(other[e25], other[e23]) * self.group0().xyx().with_w(self[e41]))
                + (other.group0().yzx() * self.group2().zxy()).with_w(self[e43] * other[e12])
                + (self.group1().www() * other.group1().xyz()).with_w(self[e12] * other[e43])
                - (Simd32x4::from(other[e1234]) * self.group2().xyz().with_w(self[e45]))
                - (other.group3().yzxz() * self.group1().zxy().with_w(self[e43]))
                - (self.group0().zxy() * other.group2().yzx()).with_w(self[e41] * other[e4235])
                - (other.group0().zxy() * self.group2().yzx()).with_w(self[e42] * other[e4315]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       33       61        0
    //    simd3        2       15        0
    //    simd4       32       26        0
    // Totals...
    // yes simd       67      102        0
    //  no simd      167      210        0
    fn anti_sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(other[e12345]) * self.group0().with_w(self[scalar]),
            // e23, e31, e12, e45
            ((Simd32x3::from(other[e5]) * self.group0()) + (Simd32x3::from(other[e12345]) * self.group1().xyz())).with_w(self[e45] * other[e12345]),
            // e15, e25, e35, e1234
            ((Simd32x3::from(other[e5]) * self.group1().xyz()) + (Simd32x3::from(other[e12345]) * self.group2().xyz())).with_w(0.0),
            // e4235, e4315, e4125, e3215
            other.group0().xx().with_zw(other[e5], (self[scalar] * other[e5]) - (self[e45] * other[e5])) * self.group0().with_w(1.0),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       46       74        0
    //    simd3        0       14        0
    //    simd4       37       29        0
    // Totals...
    // yes simd       83      117        0
    //  no simd      194      232        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([other[e45], other[e45], other[e45], 1.0])
                * self
                    .group0()
                    .with_w((self[e41] * other[e15]) + (self[e42] * other[e25]) + (self[e43] * other[e35]) - (self[e45] * other[e45])),
            // e415, e425, e435, e321
            (other.group0().yzxw() * self.group0().zxy().with_w(self[scalar])) + Simd32x3::from(0.0).with_w(-(self[e42] * other[e25]) - (self[e43] * other[e35]))
                - (other.group0().zxyx() * self.group0().yzx().with_w(self[e41])),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e31] * other[e35]) - (self[e15] * other[e45]) - (self[scalar] * other[e15]),
                -(self[e12] * other[e15]) - (self[e25] * other[e45]) - (self[scalar] * other[e25]),
                -(self[e23] * other[e25]) - (self[e35] * other[e45]) - (self[scalar] * other[e35]),
                self[e12] * other[e35],
            ]) + (self.group1().zxyx() * other.group0().yzxx())
                + (self.group1().wwwy() * other.group0().xyzy()),
            // e1, e2, e3, e4
            (Simd32x3::from(other[e45]) * self.group1().xyz()).with_w(0.0) + (self.group0().yzx() * other.group0().zxy()).with_w(0.0)
                - (self.group0().zxy() * other.group0().yzx()).with_w(0.0),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       62       99        0
    //    simd3        0       15        0
    //    simd4       44       33        0
    // Totals...
    // yes simd      106      147        0
    //  no simd      238      276        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (other.group0().ww().with_zw(other[e4315], other[e15]) * self.group0().xyx().with_w(self[e41]))
                + (other.group1().zx().with_zw(other[e45], other[e25]) * self.group0().yzz().with_w(self[e42]))
                + Simd32x3::from(0.0).with_w(self[e43] * other[e35])
                - (self.group0().zxy() * other.group1().yzx()).with_w(self[e45] * other[e45]),
            // e415, e425, e435, e321
            (other.group0().yzxw() * self.group0().zxy().with_w(self[scalar]))
                + Simd32x3::from(0.0).with_w(-(self[e23] * other[e4235]) - (self[e31] * other[e4315]) - (self[e12] * other[e4125]))
                - (other.group0().zx().with_zw(other[e3215], other[e25]) * self.group0().yzz().with_w(self[e42]))
                - (other.group1().ww().with_zw(other[e25], other[e15]) * self.group0().xyx().with_w(self[e41]))
                - (self.group1().www() * other.group1().xyz()).with_w(self[e43] * other[e35]),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e31] * other[e35]) - (self[e15] * other[e45]) - (self[e25] * other[e4125]) - (self[scalar] * other[e15]),
                -(self[e12] * other[e15]) - (self[e25] * other[e45]) - (self[e35] * other[e4235]) - (self[scalar] * other[e25]),
                -(self[e12] * other[e3215]) - (self[e15] * other[e4315]) - (self[e35] * other[e45]) - (self[scalar] * other[e35]),
                (self[e45] * other[e3215]) + (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125]),
            ]) + (self.group1().zxyx() * other.group0().yzxx())
                + (self.group1().wwwy() * other.group0().xyzy())
                + (self.group2().zxy() * other.group1().yzx()).with_w(self[e12] * other[e35])
                - (other.group1().ww().with_zw(other[e25], other[e3215]) * self.group1().xyx().with_w(self[scalar])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e41] * other[e3215]) + (self[e42] * other[e35]) + (self[e23] * other[e45]) + (self[e31] * other[e4125]) + (self[scalar] * other[e4235]),
                (self[e42] * other[e3215]) + (self[e43] * other[e15]) + (self[e31] * other[e45]) + (self[e12] * other[e4235]) + (self[scalar] * other[e4315]),
                (self[e41] * other[e25]) + (self[e43] * other[e3215]) + (self[e23] * other[e4315]) + (self[e12] * other[e45]) + (self[scalar] * other[e4125]),
                self[e43] * other[e4125] * -1.0,
            ]) - (other.group1().yzxy() * self.group1().zxy().with_w(self[e42]))
                - (self.group0().zxy() * other.group0().yzx()).with_w(self[e41] * other[e4235]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       55      104        0
    //    simd3        0       18        0
    //    simd4       39       24        0
    // Totals...
    // yes simd       94      146        0
    //  no simd      211      254        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e42] * other[e435],
                self[e43] * other[e415],
                self[e41] * other[e425],
                -(self[e42] * other[e315]) - (self[e43] * other[e125]) - (self[e23] * other[e415]) - (self[e31] * other[e425]) - (self[e12] * other[e435]),
            ]) - (self.group0().zxy() * other.group0().yzx()).with_w(self[e41] * other[e235]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e42] * other[e125]) + (self[e31] * other[e435]) + (self[scalar] * other[e415]),
                (self[e43] * other[e235]) + (self[e12] * other[e415]) + (self[scalar] * other[e425]),
                (self[e41] * other[e315]) + (self[e23] * other[e425]) + (self[scalar] * other[e435]),
                self[e43] * other[e125] * -1.0,
            ]) - (self.group0().zxy() * other.group1().yzx()).with_w(self[e41] * other[e235])
                - (other.group0().yzx() * self.group1().zxy()).with_w(self[e42] * other[e315]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e31] * other[e125]) + (self[e25] * other[e435]) + (self[scalar] * other[e235]),
                (self[e12] * other[e235]) + (self[e35] * other[e415]) + (self[scalar] * other[e315]),
                (self[e23] * other[e315]) + (self[e15] * other[e425]) + (self[scalar] * other[e125]),
                0.0,
            ]) - (other.group0().yzx() * self.group2().zxy()).with_w(self[e41] * other[e415])
                - (other.group1().xyx() * self.group1().wwy()).with_w(self[e42] * other[e425])
                - (other.group1().yzz() * self.group1().zxw()).with_w(self[e43] * other[e435]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e42] * other[e125]) + (self[e45] * other[e415]),
                (self[e43] * other[e235]) + (self[e45] * other[e425]),
                (self[e41] * other[e315]) + (self[e45] * other[e435]),
                -(self[e23] * other[e235]) - (self[e31] * other[e315]) - (self[e12] * other[e125]) - (self[e25] * other[e425]) - (self[e35] * other[e435]),
            ]) - (self.group0().zxy() * other.group1().yzx()).with_w(self[e15] * other[e415]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       65      112        0
    //    simd3        0       16        0
    //    simd4       42       29        0
    // Totals...
    // yes simd      107      157        0
    //  no simd      233      276        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e42] * other[e435],
                self[e43] * other[e415],
                self[e43] * other[e12345],
                -(self[e42] * other[e315]) - (self[e43] * other[e125]) - (self[e23] * other[e415]) - (self[e31] * other[e425]) - (self[e12] * other[e435]),
            ]) + (other.group0().wwyw() * self.group0().xyx().with_w(self[scalar]))
                - (self.group0().zxy() * other.group0().yzx()).with_w(self[e41] * other[e235]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e42] * other[e125]) + (self[e23] * other[e12345]) + (self[e31] * other[e435]) + (self[scalar] * other[e415]),
                (self[e43] * other[e235]) + (self[e31] * other[e12345]) + (self[e12] * other[e415]) + (self[scalar] * other[e425]),
                (self[e43] * other[e5]) + (self[e23] * other[e425]) + (self[e12] * other[e12345]) + (self[scalar] * other[e435]),
                self[e43] * other[e125] * -1.0,
            ]) + (self.group0().xyx() * other.group1().wwy()).with_w(self[e45] * other[e12345])
                - (other.group1().yzxx() * self.group0().zxy().with_w(self[e41]))
                - (self.group1().zxy() * other.group0().yzx()).with_w(self[e42] * other[e315]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * other[e5]) + (self[e31] * other[e125]) + (self[e15] * other[e12345]) + (self[e25] * other[e435]) + (self[scalar] * other[e235]),
                (self[e31] * other[e5]) + (self[e12] * other[e235]) + (self[e25] * other[e12345]) + (self[e35] * other[e415]) + (self[scalar] * other[e315]),
                (self[e23] * other[e315]) + (self[e12] * other[e5]) + (self[e15] * other[e425]) + (self[e35] * other[e12345]) + (self[scalar] * other[e125]),
                0.0,
            ]) - (other.group0().yzxz() * self.group2().zxy().with_w(self[e43]))
                - (self.group1().zxy() * other.group1().yzx()).with_w(self[e41] * other[e415])
                - (self.group1().www() * other.group1().xyz()).with_w(self[e42] * other[e425]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e42] * other[e125]) + (self[e45] * other[e415]),
                (self[e43] * other[e235]) + (self[e45] * other[e425]),
                (self[e43] * other[e5]) + (self[e45] * other[e435]),
                -(self[e31] * other[e315])
                    - (self[e12] * other[e125])
                    - (self[e45] * other[e5])
                    - (self[e15] * other[e415])
                    - (self[e25] * other[e425])
                    - (self[e35] * other[e435]),
            ]) + (other.group1().wwyw() * self.group0().xyx().with_w(self[scalar]))
                - (other.group1().yzxx() * self.group0().zxy().with_w(self[e23])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for AntiCircleRotor {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       92      165        0
    //    simd2        6        6        0
    //    simd3       80      116        0
    //    simd4       74       49        0
    // Totals...
    // yes simd      252      336        0
    //  no simd      640      721        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                -(self[e41] * other[e235])
                    - (self[e42] * other[e315])
                    - (self[e43] * other[e125])
                    - (self[e31] * other[e425])
                    - (self[e12] * other[e435])
                    - (self[e45] * other[e321])
                    - (self[e25] * other[e431])
                    - (self[e35] * other[e412]),
                (self[e41] * other[e15])
                    + (self[e42] * other[e25])
                    + (self[e43] * other[e35])
                    + (self[e23] * other[e23])
                    + (self[e31] * other[e31])
                    + (self[e12] * other[e12])
                    + (self[e25] * other[e42])
                    + (self[e35] * other[e43]),
            ]) + (Simd32x2::from([other[e12345], other[e41]]) * self.group2().wx())
                - (Simd32x2::from([other[e415], other[e45]]) * self.group1().xw())
                - (Simd32x2::from([other[e423], other[scalar]]) * self.group2().xw()),
            // e1, e2, e3, e4
            Simd32x4::from([
                self[scalar] * other[e4235],
                self[scalar] * other[e4315],
                self[scalar] * other[e4125],
                self[scalar] * other[e1234] * -1.0,
            ]) + (self.group1().wwwx() * other.group5().with_w(other[e41]))
                + (other.group3().zx().with_zw(other[e3215], other[e31]) * self.group0().yzz().with_w(self[e42]))
                + (other.group3().ww().with_zw(other[e4315], self[e31]) * self.group1().xyx().with_w(other[e42]))
                + (other.group9().zx().with_zw(other[e45], self[e12]) * self.group1().yzz().with_w(other[e43]))
                + (other.group9().ww().with_zw(other[e25], other[e23]) * self.group0().xyx().with_w(self[e41]))
                + (other.group4().yzx() * self.group2().zxy()).with_w(self[e43] * other[e12])
                - (Simd32x4::from(other[e1234]) * self.group2().xyz().with_w(self[e45]))
                - (other.group9().yzxz() * self.group1().zxy().with_w(self[e43]))
                - (self.group0().zxy() * other.group3().yzx()).with_w(self[e41] * other[e4235])
                - (other.group4().zxy() * self.group2().yzx()).with_w(self[e42] * other[e4315]),
            // e5
            (self[e23] * other[e15])
                + (self[e31] * other[e25])
                + (self[e12] * other[e35])
                + (self[e45] * other[e3215])
                + (self[e15] * other[e23])
                + (self[e15] * other[e4235])
                + (self[e25] * other[e31])
                + (self[e25] * other[e4315])
                + (self[e35] * other[e12])
                + (self[e35] * other[e4125])
                - (self[scalar] * other[e3215]),
            // e15, e25, e35, e45
            Simd32x4::from([self[e35] * other[e425] * -1.0, self[e35] * other[e1] * -1.0, self[e35] * other[e321] * -1.0, self[e12] * other[e3]])
                + (Simd32x4::from(other[e12345]) * self.group2().xyz().with_w(self[e45]))
                + (Simd32x4::from([self[e31], self[scalar], self[scalar], self[e25]]) * other.group8().zyz().with_w(other[e431]))
                + (Simd32x4::from([self[scalar], self[e12], self[e23], self[e15]]) * other.group8().xxy().with_w(other[e423]))
                + (Simd32x4::from([other[e2], other[e415], other[e1], other[e2]]) * self.group2().zzy().with_w(self[e31]))
                + (Simd32x4::from([other[e5], other[e5], other[e5], self[e35]]) * self.group1().xyz().with_w(other[e412]))
                + (Simd32x4::from([other[e435], other[e3], other[e425], other[e1]]) * self.group2().yxx().with_w(self[e23]))
                - (Simd32x4::from([other[e3], other[e321], other[e415], other[e321]]) * self.group2().yyyw())
                - (other.group6().wz().with_zw(other[e2], other[e125]) * self.group2().xxx().with_w(self[e43]))
                - (other.group8().xyx() * self.group1().wwy()).with_w(self[e41] * other[e235])
                - (other.group8().yzz() * self.group1().zxw()).with_w(self[e42] * other[e315]),
            // e41, e42, e43
            (Simd32x3::from(other[e12345]) * self.group0())
                + (Simd32x3::from(other[e4]) * self.group1().xyz())
                + (Simd32x3::from([self[e31], self[scalar], self[scalar]]) * other.group7().zyz())
                + (Simd32x3::from([self[scalar], self[e45], self[e45]]) * other.group7())
                + (Simd32x3::from([other[e3], other[e1], other[e425]]) * self.group0().yzx())
                + (Simd32x3::from([other[e321], other[e321], other[e2]]) * self.group0().xyx())
                + (self.group0().yzz() * other.group6().zxw())
                + (other.group7().xxy() * self.group1().wzx())
                - (self.group0().zxy() * other.group1().yzx())
                - (self.group0().zxy() * other.group6().yzx())
                - (other.group7().yzx() * self.group1().zxy()),
            // e23, e31, e12
            (Simd32x3::from(self[scalar]) * other.group6().xyz())
                + (Simd32x3::from(other[e12345]) * self.group1().xyz())
                + (Simd32x3::from(other[e4]) * self.group2().xyz())
                + (Simd32x3::from([other[e5], other[e5], other[e315]]) * self.group0().xyx())
                + (self.group0().yzz() * other.group8().zx().with_z(other[e5]))
                + (other.group7().zxy() * self.group2().yzx())
                + (self.group1().yzx() * other.group6().zxy())
                - (Simd32x3::from(self[e45]) * other.group1().xyz())
                - (self.group0().zxy() * other.group8().yzx())
                - (other.group7().yzx() * self.group2().zxy())
                - (self.group1().zxy() * other.group6().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(self[e45] * other[e4235]) - (self[e15] * other[e1234]),
                -(self[e45] * other[e4315]) - (self[e25] * other[e1234]),
                -(self[e45] * other[e4125]) - (self[e35] * other[e1234]),
                (self[e35] * other[e43]) + (self[scalar] * other[e45]),
            ]) + (self.group2().zxyx() * other.group4().yzx().with_w(other[e41]))
                + (self.group0().zxy() * other.group3().yzx()).with_w(self[e45] * other[scalar])
                + (other.group5().yzx() * self.group1().zxy()).with_w(self[e25] * other[e42])
                - (Simd32x4::from([self[e31], self[scalar], self[scalar], other[e4125]]) * other.group5().zyz().with_w(self[e12]))
                - (Simd32x4::from([self[scalar], self[e12], self[e23], other[e4315]]) * other.group5().xxy().with_w(self[e31]))
                - (other.group0().xx().with_zw(other[scalar], self[e41]) * self.group1().xyz().with_w(other[e15]))
                - (other.group3().zx().with_zw(other[e3215], other[e35]) * self.group0().yzz().with_w(self[e43]))
                - (other.group9().ww().with_zw(other[e25], other[e25]) * self.group0().xyx().with_w(self[e42]))
                - (other.group4().zxy() * self.group2().yzx()).with_w(self[e23] * other[e4235]),
            // e423, e431, e412
            (Simd32x3::from(self[e41]) * Simd32x3::from([other[e45], other[e12], other[e4315]]))
                + (Simd32x3::from(self[e42]) * Simd32x3::from([other[e4125], other[e45], other[e23]]))
                + (Simd32x3::from(self[e43]) * Simd32x3::from([other[e31], other[e4235], other[e45]]))
                + (other.group4().yzx() * self.group1().zxy())
                - (Simd32x3::from(other[scalar]) * self.group0())
                - (Simd32x3::from(other[e1234]) * self.group1().xyz())
                - (Simd32x3::from([self[e31], self[scalar], self[scalar]]) * other.group4().zyz())
                - (Simd32x3::from([self[scalar], self[e45], self[e45]]) * other.group4())
                - (Simd32x3::from([other[e12], other[e4125], other[e31]]) * self.group0().yxx())
                - (Simd32x3::from([other[e4315], other[e23], other[e4235]]) * self.group0().zzy())
                - (other.group4().xxy() * self.group1().wzx()),
            // e235, e315, e125
            (Simd32x3::from(self[e45]) * other.group3().xyz())
                + (other.group5().yzx() * self.group2().zxy())
                + (self.group1().zxy() * other.group3().yzx())
                + (self.group2().zxy() * other.group9().yzx())
                - (Simd32x3::from(self[scalar]) * other.group3().xyz())
                - (Simd32x3::from(other[scalar]) * self.group2().xyz())
                - (Simd32x3::from([other[e35], other[e15], other[e3215]]) * self.group1().yzz())
                - (Simd32x3::from([other[e45], other[e45], other[e4315]]) * self.group2().xyx())
                - (Simd32x3::from([other[e4125], other[e4235], other[e45]]) * self.group2().yzz())
                - (Simd32x3::from([other[e3215], other[e3215], other[e25]]) * self.group1().xyx())
                - (other.group5().zxy() * self.group2().yzx()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e45] * other[e415], self[e45] * other[e425], self[e45] * other[e435], self[e35] * other[e435] * -1.0])
                + (Simd32x4::from([other[e5], other[e5], other[e315], other[e1]]) * self.group0().xyx().with_w(self[e15]))
                + (other.group8().zx().with_zw(other[e5], other[e2]) * self.group0().yzz().with_w(self[e25]))
                + (other.group7().yzx() * self.group2().zxy()).with_w(self[e35] * other[e3])
                + (self.group1().zxy() * other.group1().yzx()).with_w(self[scalar] * other[e5])
                - (self.group1().yzzw() * other.group1().zx().with_zw(other[e321], other[e5]))
                - (self.group2().xyzx() * other.group1().www().with_w(other[e415]))
                - (self.group2().wwwy() * other.group1().xyz().with_w(other[e425]))
                - (other.group6().ww().with_zw(other[e2], self[e12]) * self.group1().xyx().with_w(other[e125]))
                - (self.group0().zxy() * other.group8().yzx()).with_w(self[e23] * other[e235])
                - (other.group7().zxy() * self.group2().yzx()).with_w(self[e31] * other[e315]),
            // e1234
            (self[e45] * other[e4]) + (self[scalar] * other[e4])
                - (self[e41] * other[e1])
                - (self[e41] * other[e415])
                - (self[e42] * other[e2])
                - (self[e42] * other[e425])
                - (self[e43] * other[e3])
                - (self[e43] * other[e435])
                - (self[e23] * other[e423])
                - (self[e31] * other[e431])
                - (self[e12] * other[e412]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       33       67        0
    //    simd3        1       17        0
    //    simd4       37       26        0
    // Totals...
    // yes simd       71      110        0
    //  no simd      184      222        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (self.group0().yzx() * other.group0().zxy()) - (self.group0().zxy() * other.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x3::from(0.0).with_w(self[e12] * other[e4125] * -1.0)
                - (self.group1().wwwy() * other.group0().xyzy())
                - (other.group0().wwwx() * self.group0().with_w(self[e23])),
            // e235, e315, e125, e4
            Simd32x4::from([self[e35] * other[e4315], self[e15] * other[e4125], self[e25] * other[e4235], self[e43] * other[e4125] * -1.0])
                - (other.group0().zxyy() * self.group2().yzx().with_w(self[e42]))
                - (other.group0().wwwx() * self.group1().xyz().with_w(self[e41])),
            // e1, e2, e3, e5
            (Simd32x4::from(other[e3215]) * self.group0().with_w(self[e45]))
                + (self.group2().wwwy() * other.group0().xyzy())
                + (other.group0().zxyx() * self.group1().yzx().with_w(self[e15]))
                + Simd32x3::from(0.0).with_w(self[e35] * other[e4125])
                - (other.group0().yzxw() * self.group1().zxy().with_w(self[scalar])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       30       76        0
    //    simd3        2       16        0
    //    simd4       39       29        0
    // Totals...
    // yes simd       71      121        0
    //  no simd      192      240        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other[e4]) * self.group1().xyz()) + (self.group0().yzx() * other.group0().zxy()) - (self.group0().zxy() * other.group0().yzx()),
            // e23, e31, e12, e45
            Simd32x4::from([self[e45] * other[e1] * -1.0, self[e45] * other[e2] * -1.0, self[e45] * other[e3] * -1.0, self[e12] * other[e3]])
                + (Simd32x4::from([other[e5], other[e5], other[e5], other[e1]]) * self.group0().with_w(self[e23]))
                + (other.group0().wwwy() * self.group2().xyz().with_w(self[e31])),
            // e15, e25, e35, e1234
            (Simd32x4::from([other[e5], other[e5], other[e5], other[e4]]) * self.group1())
                + (self.group2().zxyw() * other.group0().yzxw())
                + Simd32x3::from(0.0).with_w(-(self[e42] * other[e2]) - (self[e43] * other[e3]))
                - (other.group0().zxyx() * self.group2().yzx().with_w(self[e41])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(self[e15] * other[e4]) - (self[scalar] * other[e1]),
                -(self[e25] * other[e4]) - (self[scalar] * other[e2]),
                -(self[e35] * other[e4]) - (self[scalar] * other[e3]),
                (self[e35] * other[e3]) + (self[scalar] * other[e5]),
            ]) + (Simd32x4::from([other[e5], other[e5], other[e5], other[e1]]) * self.group0().with_w(self[e15]))
                + (other.group0().yzxy() * self.group1().zxy().with_w(self[e25]))
                - (self.group1().yzxw() * other.group0().zxy().with_w(other[e5])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       37       63        0
    //    simd3        0       12        0
    //    simd4       17       14        0
    // Totals...
    // yes simd       54       89        0
    //  no simd      105      155        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[scalar]) * self.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            Simd32x4::from(other[scalar]) * self.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e12345
            Simd32x4::from(other[scalar]) * self.group2() * Simd32x4::from(-1.0),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       35       72        0
    //    simd3        2       18        0
    //    simd4       37       27        0
    // Totals...
    // yes simd       74      117        0
    //  no simd      189      234        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (self.group0().yzx() * other.group0().zxy()) - (Simd32x3::from(other[e1234]) * self.group1().xyz()) - (self.group0().zxy() * other.group0().yzx()),
            // e415, e425, e435, e321
            -(Simd32x4::from([other[e1234], other[e1234], other[e1234], other[e4125]]) * self.group2().xyz().with_w(self[e12]))
                - (self.group1().wwwy() * other.group0().xyzy())
                - (other.group0().wwwx() * self.group0().with_w(self[e23])),
            // e235, e315, e125, e4
            Simd32x4::from([
                self[e35] * other[e4315],
                self[e15] * other[e4125],
                self[e25] * other[e4235],
                -(self[e43] * other[e4125]) - (self[e45] * other[e1234]) - (self[scalar] * other[e1234]),
            ]) - (other.group0().zxyy() * self.group2().yzx().with_w(self[e42]))
                - (other.group0().wwwx() * self.group1().xyz().with_w(self[e41])),
            // e1, e2, e3, e5
            Simd32x4::from([
                self[e15] * other[e1234] * -1.0,
                self[e25] * other[e1234] * -1.0,
                self[e35] * other[e1234] * -1.0,
                self[e35] * other[e4125],
            ]) + (Simd32x4::from(other[e3215]) * self.group0().with_w(self[e45]))
                + (self.group2().wwwy() * other.group0().xyzy())
                + (other.group0().zxyx() * self.group1().yzx().with_w(self[e15]))
                - (other.group0().yzxw() * self.group1().zxy().with_w(self[scalar])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for AntiCircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       68      120        0
    //    simd3        0       24        0
    //    simd4       63       43        0
    // Totals...
    // yes simd      131      187        0
    //  no simd      320      364        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e41] * other[e321])
                    + (self[e42] * other[e435])
                    + (self[e42] * other[e3])
                    + (self[e23] * other[e4])
                    + (self[e31] * other[e412])
                    + (self[e45] * other[e423])
                    + (self[scalar] * other[e423]),
                (self[e42] * other[e321])
                    + (self[e43] * other[e415])
                    + (self[e43] * other[e1])
                    + (self[e31] * other[e4])
                    + (self[e12] * other[e423])
                    + (self[e45] * other[e431])
                    + (self[scalar] * other[e431]),
                (self[e41] * other[e2])
                    + (self[e43] * other[e12345])
                    + (self[e43] * other[e321])
                    + (self[e23] * other[e431])
                    + (self[e12] * other[e4])
                    + (self[e45] * other[e412])
                    + (self[scalar] * other[e412]),
                -(self[e23] * other[e415])
                    - (self[e31] * other[e425])
                    - (self[e12] * other[e435])
                    - (self[e45] * other[e321])
                    - (self[e15] * other[e423])
                    - (self[e25] * other[e431])
                    - (self[e35] * other[e412]),
            ]) + (other.group0().ww().with_zw(other[e425], other[e12345]) * self.group0().xyx().with_w(self[scalar]))
                - (self.group0().zxy() * other.group1().yzx()).with_w(self[e41] * other[e235])
                - (self.group0().zxy() * other.group3().yzx()).with_w(self[e42] * other[e315])
                - (self.group1().zxy() * other.group0().yzx()).with_w(self[e43] * other[e125]),
            // e23, e31, e12, e45
            (self.group1().xyxz() * other.group0().ww().with_zw(other[e425], other[e3]))
                + (self.group1().yzzw() * other.group1().zx().with_zw(other[e12345], other[e12345]))
                + (self.group2().xyxx() * other.group3().ww().with_zw(other[e431], other[e423]))
                + (self.group2().yzzy() * other.group0().zx().with_zw(other[e4], other[e431]))
                + (self.group2().wwwz() * other.group1().xyz().with_w(other[e412]))
                + (self.group0().xyx() * other.group2().wwy()).with_w(self[e23] * other[e1])
                + (self.group0().yzz() * other.group2().zxw()).with_w(self[e31] * other[e2])
                - (self.group2().zxyw() * other.group0().yzx().with_w(other[e321]))
                - (other.group2().yzxx() * self.group0().zxy().with_w(self[e41]))
                - (self.group1().zxy() * other.group1().yzx()).with_w(self[e42] * other[e315])
                - (self.group1().www() * other.group3().xyz()).with_w(self[e43] * other[e125]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e15] * other[e12345]) + (self[e25] * other[e435]) + (self[e35] * other[e2]) + (self[scalar] * other[e235]),
                (self[e15] * other[e3]) + (self[e25] * other[e12345]) + (self[e35] * other[e415]) + (self[scalar] * other[e315]),
                (self[e15] * other[e425]) + (self[e25] * other[e1]) + (self[e35] * other[e12345]) + (self[scalar] * other[e125]),
                -(self[e43] * other[e3]) - (self[e23] * other[e423]) - (self[e31] * other[e431]) - (self[e12] * other[e412]),
            ]) + (self.group1().xyxw() * other.group2().wwy().with_w(other[e4]))
                + (self.group1().yzz() * other.group2().zxw()).with_w(self[scalar] * other[e4])
                - (Simd32x4::from([other[e425], other[e1], other[e321], other[e435]]) * self.group2().zzz().with_w(self[e43]))
                - (Simd32x4::from([other[e3], other[e321], other[e415], other[e2]]) * self.group2().yyy().with_w(self[e42]))
                - (other.group1().wz().with_zw(other[e2], other[e425]) * self.group2().xxx().with_w(self[e42]))
                - (self.group1().zxy() * other.group2().yzx()).with_w(self[e41] * other[e415])
                - (self.group1().www() * other.group2().xyz()).with_w(self[e41] * other[e1]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e35] * other[e431], self[e15] * other[e412], self[e25] * other[e423], self[e35] * other[e435] * -1.0])
                + (other.group3().yzxz() * self.group1().zxy().with_w(self[e35]))
                + (self.group0().xyx() * other.group2().wwy()).with_w(self[e15] * other[e1])
                + (self.group0().yzz() * other.group2().zxw()).with_w(self[e25] * other[e2])
                + (self.group1().www() * other.group1().xyz()).with_w(self[scalar] * other[e5])
                - (self.group1().xyxy() * other.group1().ww().with_zw(other[e2], other[e315]))
                - (self.group1().yzzz() * other.group3().zx().with_zw(other[e321], other[e125]))
                - (self.group2().yzzx() * other.group0().zx().with_zw(other[e4], other[e415]))
                - (self.group2().wwwy() * other.group3().xyz().with_w(other[e425]))
                - (other.group2().yzxx() * self.group0().zxy().with_w(self[e23]))
                - (other.group3().ww().with_zw(other[e431], other[e5]) * self.group2().xyx().with_w(self[e45])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for AntiCircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       76      119        0
    //    simd3        0       15        0
    //    simd4       61       50        0
    // Totals...
    // yes simd      137      184        0
    //  no simd      320      364        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                -(self[e43] * other[e4315]) - (self[e23] * other[e1234]) - (self[e31] * other[e43]) - (self[e45] * other[e41]) - (self[scalar] * other[e41]),
                -(self[e43] * other[e23]) - (self[e31] * other[e1234]) - (self[e12] * other[e41]) - (self[e45] * other[e42]) - (self[scalar] * other[e42]),
                -(self[e43] * other[scalar]) - (self[e23] * other[e42]) - (self[e12] * other[e1234]) - (self[e45] * other[e43]) - (self[scalar] * other[e43]),
                (self[e31] * other[e31]) + (self[e12] * other[e12]) + (self[e15] * other[e41]) + (self[e25] * other[e42]) + (self[e35] * other[e43]),
            ]) + (Simd32x4::from(self[e41]) * other.group1().wz().with_zw(other[e4315], other[e15]))
                + (Simd32x4::from(self[e42]) * Simd32x4::from([other[e4125], other[e45], other[e23], other[e25]]))
                + (Simd32x4::from(self[e43]) * Simd32x4::from([other[e31], other[e4235], other[e45], other[e35]]))
                + (self.group1().zxyx() * other.group0().yzx().with_w(other[e23]))
                - (Simd32x4::from([other[scalar], other[e4125], other[e31], other[e45]]) * self.group0().xxx().with_w(self[e45]))
                - (Simd32x4::from([other[e12], other[scalar], other[e4235], other[scalar]]) * self.group0().yyy().with_w(self[scalar])),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(self[e25] * other[e43]) - (self[scalar] * other[e23]),
                -(self[e35] * other[e41]) - (self[scalar] * other[e31]),
                -(self[e35] * other[e1234]) - (self[scalar] * other[e12]),
                (self[e35] * other[e43]) + (self[scalar] * other[e45]),
            ]) + (self.group2().zxyy() * other.group0().yzxy())
                + (self.group0().zxy() * other.group2().yzx()).with_w(self[e45] * other[scalar])
                + (self.group1().zxy() * other.group1().yzx()).with_w(self[e15] * other[e41])
                - (self.group1().yzzx() * other.group1().zx().with_zw(other[scalar], other[e4235]))
                - (self.group1().wwwy() * other.group3().xyzy())
                - (other.group0().ww().with_zw(other[e31], other[e35]) * self.group1().xyx().with_w(self[e43]))
                - (other.group2().zx().with_zw(other[e3215], other[e25]) * self.group0().yzz().with_w(self[e42]))
                - (other.group2().ww().with_zw(other[e42], other[e4125]) * self.group2().xyx().with_w(self[e12]))
                - (other.group3().ww().with_zw(other[e25], other[e15]) * self.group0().xyx().with_w(self[e41])),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e31] * other[e35])
                    - (self[e15] * other[scalar])
                    - (self[e15] * other[e45])
                    - (self[e25] * other[e12])
                    - (self[e25] * other[e4125])
                    - (self[scalar] * other[e15]),
                -(self[e12] * other[e15])
                    - (self[e25] * other[scalar])
                    - (self[e25] * other[e45])
                    - (self[e35] * other[e23])
                    - (self[e35] * other[e4235])
                    - (self[scalar] * other[e25]),
                -(self[e12] * other[e3215])
                    - (self[e15] * other[e31])
                    - (self[e15] * other[e4315])
                    - (self[e35] * other[scalar])
                    - (self[e35] * other[e45])
                    - (self[scalar] * other[e35]),
                (self[e15] * other[e23])
                    + (self[e15] * other[e4235])
                    + (self[e25] * other[e31])
                    + (self[e25] * other[e4315])
                    + (self[e35] * other[e12])
                    + (self[e35] * other[e4125]),
            ]) + (self.group1().zxyx() * other.group2().yzxx())
                + (self.group1().wwwy() * other.group2().xyzy())
                + (other.group3().yzxw() * self.group2().zxy().with_w(self[e45]))
                + (self.group2().zxy() * other.group1().yzx()).with_w(self[e12] * other[e35])
                - (other.group3().ww().with_zw(other[e25], other[e3215]) * self.group1().xyx().with_w(self[scalar])),
            // e1, e2, e3, e4
            Simd32x4::from([
                self[scalar] * other[e4235],
                self[scalar] * other[e4315],
                self[scalar] * other[e4125],
                self[scalar] * other[e1234] * -1.0,
            ]) + (self.group1().yzzx() * other.group3().zx().with_zw(other[e45], other[e41]))
                + (self.group1().wwwy() * other.group1().xyz().with_w(other[e42]))
                + (other.group0().yzxz() * self.group2().zxy().with_w(self[e12]))
                + (other.group1().ww().with_zw(other[e4315], other[e12]) * self.group1().xyx().with_w(self[e43]))
                + (other.group2().zx().with_zw(other[e3215], other[e31]) * self.group0().yzz().with_w(self[e42]))
                + (other.group3().ww().with_zw(other[e25], other[e23]) * self.group0().xyx().with_w(self[e41]))
                - (other.group3().yzxy() * self.group1().zxy().with_w(self[e42]))
                - (other.group0().zx().with_zw(other[e1234], other[e1234]) * self.group2().yzz().with_w(self[e45]))
                - (other.group2().ww().with_zw(other[e42], other[e4125]) * self.group2().xyx().with_w(self[e43]))
                - (self.group0().zxy() * other.group2().yzx()).with_w(self[e41] * other[e4235]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl std::ops::Div<anti_sandwich> for AntiDipoleInversion {
    type Output = anti_sandwich_partial<AntiDipoleInversion>;
    fn div(self, _rhs: anti_sandwich) -> Self::Output {
        anti_sandwich_partial(self)
    }
}
impl AntiSandwich<AntiCircleRotor> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       69      116        0
    //    simd3        0       24        0
    //    simd4       76       57        0
    // Totals...
    // yes simd      145      197        0
    //  no simd      373      416        0
    fn anti_sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e42] * self[e3]) + (other[e43] * self[e425]) + (other[e23] * self[e4]) + (other[e12] * self[e431]) + (other[scalar] * self[e423]),
                (other[e41] * self[e435]) + (other[e43] * self[e1]) + (other[e23] * self[e412]) + (other[e31] * self[e4]) + (other[scalar] * self[e431]),
                (other[e41] * self[e2]) + (other[e42] * self[e415]) + (other[e31] * self[e423]) + (other[e12] * self[e4]) + (other[scalar] * self[e412]),
                -(other[e23] * self[e415]) - (other[e31] * self[e425]) - (other[e12] * self[e435]) - (other[e45] * self[e321]) - (other[e35] * self[e412]),
            ]) - (Simd32x4::from(other[e41]) * Simd32x4::from([self[e321], self[e3], self[e425], self[e235]]))
                - (Simd32x4::from(other[e42]) * self.group1().zw().with_zw(self[e1], self[e315]))
                - (Simd32x4::from(other[e43]) * Simd32x4::from([self[e2], self[e415], self[e321], self[e125]]))
                - (self.group0().xxy() * other.group1().wzx()).with_w(other[e15] * self[e423])
                - (self.group0().zyz() * other.group1().yww()).with_w(other[e25] * self[e431]),
            // e23, e31, e12, e45
            (Simd32x4::from([self[e315], self[e5], self[e5], self[e315]]) * other.group0().zyz().with_w(other[e42]))
                + (Simd32x4::from([self[e5], self[e125], self[e235], self[e235]]) * other.group0().xxy().with_w(other[e41]))
                + (other.group1().zxyx() * self.group1().yzx().with_w(self[e1]))
                + (self.group0().yzx() * other.group2().zxy()).with_w(other[e43] * self[e125])
                + (other.group2().www() * self.group1().xyz()).with_w(other[e12] * self[e3])
                + (self.group2().www() * other.group2().xyz()).with_w(other[e31] * self[e2])
                - (other.group2().yzxy() * self.group0().zxy().with_w(self[e431]))
                - (other.group0().yzx() * self.group2().zxy()).with_w(other[e15] * self[e423])
                - (other.group1().yzx() * self.group1().zxy()).with_w(other[e35] * self[e412])
                - (other.group1().www() * self.group3().xyz()).with_w(other[scalar] * self[e321]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e35] * self[e425]) + (other[e35] * self[e2]) + (other[scalar] * self[e235]),
                (other[e15] * self[e3]) + (other[e25] * self[e321]) + (other[scalar] * self[e315]),
                (other[e25] * self[e1]) + (other[e35] * self[e321]) + (other[scalar] * self[e125]),
                -(other[e23] * self[e423]) - (other[e31] * self[e431]) - (other[e12] * self[e412]) - (other[e45] * self[e4]),
            ]) + (Simd32x4::from([self[e315], self[e5], self[e5], self[e2]]) * other.group1().zyz().with_w(other[e42]))
                + (Simd32x4::from([self[e5], self[e125], self[e235], self[e1]]) * other.group1().xxy().with_w(other[e41]))
                + (other.group2().xxyw() * self.group1().wzx().with_w(self[e4]))
                + (other.group1().www() * self.group2().xyz()).with_w(other[e43] * self[e3])
                - (self.group1().zxyy() * other.group2().yzx().with_w(other[e42]))
                - (other.group1().yzx() * self.group2().zxy()).with_w(other[e41] * self[e415])
                - (other.group2().yzx() * self.group3().zxy()).with_w(other[e43] * self[e435]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e31] * self[e3]) + (other[e45] * self[e415]) + (other[e15] * self[e4]),
                (other[e12] * self[e1]) + (other[e45] * self[e425]) + (other[e25] * self[e4]),
                (other[e23] * self[e2]) + (other[e45] * self[e435]) + (other[e35] * self[e4]),
                -(other[e25] * self[e2]) - (other[e35] * self[e435]) - (other[e35] * self[e3]),
            ]) + (other.group0().yzx() * self.group2().zxy()).with_w(other[e45] * self[e5])
                + (self.group0().yzx() * other.group2().zxy()).with_w(other[scalar] * self[e5])
                - (Simd32x4::from([self[e321], self[e3], self[e1], self[e415]]) * other.group1().xxy().with_w(other[e15]))
                - (Simd32x4::from([self[e315], self[e5], self[e5], self[e315]]) * other.group0().zyz().with_w(other[e31]))
                - (Simd32x4::from([self[e2], self[e321], self[e321], self[e1]]) * other.group1().zyz().with_w(other[e15]))
                - (Simd32x4::from([self[e5], self[e125], self[e235], self[e235]]) * other.group0().xxy().with_w(other[e23]))
                - (other.group2().wwwy() * self.group3().xyz().with_w(self[e425]))
                - (self.group0().zxy() * other.group2().yzx()).with_w(other[e12] * self[e125]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDipoleInversion> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      125      187        0
    //    simd3        0       31        0
    //    simd4       77       49        0
    // Totals...
    // yes simd      202      267        0
    //  no simd      433      476        0
    fn anti_sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e415] * self[e4]) + (other[e435] * self[e431]) + (other[e4] * self[e415]) + (other[e1] * self[e4]) + (other[e3] * self[e431]),
                (other[e415] * self[e412]) + (other[e425] * self[e4]) + (other[e4] * self[e425]) + (other[e1] * self[e412]) + (other[e2] * self[e4]),
                (other[e435] * self[e4]) + (other[e321] * self[e412]) + (other[e4] * self[e435]) + (other[e2] * self[e423]) + (other[e3] * self[e4]),
                -(other[e415] * self[e415]) - (other[e425] * self[e425]) - (other[e435] * self[e435]) - (other[e1] * self[e1]) - (other[e2] * self[e2]) - (other[e3] * self[e3]),
            ]) + (Simd32x4::from([self[e425], self[e1], self[e415], self[e5]]) * other.group0().zzy().with_w(other[e4]))
                + (Simd32x4::from([self[e3], self[e435], self[e2], self[e321]]) * other.group0().yxx().with_w(other[e321]))
                + (self.group0().xyx() * other.group1().wwy()).with_w(other[e5] * self[e4])
                - (Simd32x4::from(other[e423]) * Simd32x4::from([self[e321], self[e3], self[e425], self[e235]]))
                - (Simd32x4::from(other[e431]) * self.group1().zw().with_zw(self[e1], self[e315]))
                - (Simd32x4::from(other[e412]) * Simd32x4::from([self[e2], self[e415], self[e321], self[e125]]))
                - (self.group0().zxy() * other.group1().yzx()).with_w(other[e235] * self[e423])
                - (self.group0().zxy() * other.group3().yzx()).with_w(other[e315] * self[e431])
                - (other.group2().www() * self.group3().xyz()).with_w(other[e125] * self[e412]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e435] * self[e425]) + (other[e321] * self[e1]) + (other[e235] * self[e4]) + (other[e4] * self[e235]) + (other[e1] * self[e321]) + (other[e3] * self[e2]),
                (other[e415] * self[e435]) + (other[e321] * self[e2]) + (other[e315] * self[e4]) + (other[e4] * self[e315]) + (other[e1] * self[e3]) + (other[e2] * self[e321]),
                (other[e425] * self[e415]) + (other[e321] * self[e3]) + (other[e125] * self[e4]) + (other[e4] * self[e125]) + (other[e2] * self[e1]) + (other[e3] * self[e321]),
                -(other[e425] * self[e2]) - (other[e435] * self[e3]) - (other[e1] * self[e415]) - (other[e2] * self[e425]) - (other[e3] * self[e435]) - (other[e5] * self[e4]),
            ]) + (Simd32x4::from([self[e315], self[e5], self[e5], other[e315]]) * other.group0().zyz().with_w(self[e431]))
                + (Simd32x4::from([self[e5], self[e125], self[e235], other[e235]]) * other.group0().xxy().with_w(self[e423]))
                + (other.group2().zx().with_zw(other[e5], self[e5]) * self.group0().yzz().with_w(other[e4]))
                + (other.group3().ww().with_zw(other[e315], other[e125]) * self.group0().xyx().with_w(self[e412]))
                - (self.group2().zxyx() * other.group0().yzx().with_w(other[e423]))
                - (self.group3().zxyx() * other.group3().yzx().with_w(other[e415]))
                - (self.group0().zxy() * other.group2().yzx()).with_w(other[e431] * self[e315])
                - (other.group1().yzx() * self.group1().zxy()).with_w(other[e412] * self[e125]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e125] * self[e2]) + (other[e2] * self[e125]) + (other[e5] * self[e415]) + (other[e5] * self[e1]),
                (other[e315] * self[e321]) + (other[e3] * self[e235]) + (other[e5] * self[e425]) + (other[e5] * self[e2]),
                (other[e125] * self[e321]) + (other[e1] * self[e315]) + (other[e5] * self[e435]) + (other[e5] * self[e3]),
                -(other[e315] * self[e425]) - (other[e315] * self[e2]) - (other[e125] * self[e435]) - (other[e125] * self[e3]),
            ]) + (Simd32x4::from([self[e425], self[e3], self[e1], self[e321]]) * other.group2().zxy().with_w(other[e5]))
                + (Simd32x4::from([self[e315], self[e5], self[e5], self[e315]]) * other.group1().zyz().with_w(other[e2]))
                + (Simd32x4::from([self[e5], self[e125], self[e235], self[e235]]) * other.group1().xxy().with_w(other[e1]))
                + (other.group2().xxy() * self.group1().wzx()).with_w(other[e3] * self[e125])
                - (Simd32x4::from([self[e315], self[e5], self[e5], self[e1]]) * other.group3().zyz().with_w(other[e235]))
                - (Simd32x4::from([self[e5], self[e125], self[e235], self[e415]]) * other.group3().xxy().with_w(other[e235]))
                - (other.group1().yzxx() * self.group2().zxyx())
                - (other.group1().wwwy() * self.group2().xyzy())
                - (self.group3().zxyw() * other.group2().yzx().with_w(other[e321]))
                - (other.group2().yzx() * self.group1().zxy()).with_w(other[e435] * self[e125]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e435] * self[e2]) + (other[e321] * self[e415]) + (other[e4] * self[e235]) + (other[e3] * self[e425]),
                (other[e425] * self[e321]) + (other[e321] * self[e425]) + (other[e4] * self[e315]) + (other[e1] * self[e435]),
                (other[e435] * self[e321]) + (other[e321] * self[e435]) + (other[e4] * self[e125]) + (other[e2] * self[e415]),
                -(other[e435] * self[e412]) - (other[e4] * self[e321]) - (other[e2] * self[e431]) - (other[e3] * self[e412]),
            ]) + (Simd32x4::from([self[e321], self[e3], self[e1], self[e4]]) * other.group1().xxyw())
                + (Simd32x4::from([self[e315], self[e5], self[e5], self[e2]]) * other.group0().zyz().with_w(other[e431]))
                + (Simd32x4::from([self[e5], self[e125], self[e235], self[e1]]) * other.group0().xxy().with_w(other[e423]))
                + (self.group0().zxy() * other.group2().yzx()).with_w(other[e412] * self[e3])
                - (other.group2().zx().with_zw(other[e5], self[e435]) * self.group0().yzz().with_w(other[e412]))
                - (other.group3().ww().with_zw(other[e315], self[e425]) * self.group0().xyx().with_w(other[e431]))
                - (other.group0().yzx() * self.group2().zxy()).with_w(other[e423] * self[e415])
                - (other.group1().yzx() * self.group3().zxy()).with_w(other[e415] * self[e423])
                - (other.group3().yzx() * self.group1().zxy()).with_w(other[e425] * self[e431])
                - (self.group2().www() * other.group2().xyz()).with_w(other[e1] * self[e423]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       70        0
    //    simd3        2       13        0
    //    simd4       49       44        0
    // Totals...
    // yes simd       87      127        0
    //  no simd      238      285        0
    fn anti_sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            other.group0().yy().with_zw(other[scalar], other[e3215]) * self.group0().with_w(self[e4]),
            // e23, e31, e12, e45
            Simd32x4::from([self[e415] * other[scalar], self[e425] * other[scalar], self[e435] * other[scalar], self[e321] * other[scalar] * -1.0])
                + (Simd32x4::from(other[e3215]) * self.group0().with_w(self[e4])),
            // e15, e25, e35, e1234
            ((Simd32x3::from(other[e3215]) * self.group1().xyz()) + (Simd32x3::from(other[e3215]) * self.group3().xyz()) + (Simd32x3::from(other[scalar]) * self.group2().xyz()))
                .with_w(self[e4] * other[scalar]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e1] * other[scalar] * -1.0,
                self[e2] * other[scalar] * -1.0,
                self[e3] * other[scalar] * -1.0,
                self[e5] * other[scalar],
            ]) + (Simd32x4::from(other[e3215]) * self.group0().with_w(self[e321])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlatPoint> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       76      121        0
    //    simd3        3       22        0
    //    simd4       46       32        0
    // Totals...
    // yes simd      125      175        0
    //  no simd      269      315        0
    fn anti_sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([other[e321], other[e321], other[e321], 1.0])
                * self
                    .group0()
                    .with_w((self[e321] * other[e321]) - (self[e423] * other[e235]) - (self[e431] * other[e315]) - (self[e412] * other[e125])),
            // e415, e425, e435, e321
            Simd32x4::from([self[e412] * other[e315] * -1.0, self[e423] * other[e125] * -1.0, self[e431] * other[e235] * -1.0, 0.0])
                + (other.group0().xyzy() * self.group2().www().with_w(self[e431]))
                + (other.group0().zxyx() * self.group0().yzx().with_w(self[e423]))
                + (other.group0().wwwz() * self.group3().xyz().with_w(self[e412])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e425] * other[e125]) + (self[e321] * other[e235]) + (self[e2] * other[e125]),
                (self[e435] * other[e235]) + (self[e321] * other[e315]) + (self[e3] * other[e235]),
                (self[e415] * other[e315]) + (self[e321] * other[e125]) + (self[e1] * other[e315]),
                -(self[e1] * other[e235]) - (self[e2] * other[e315]) - (self[e3] * other[e125]) - (self[e5] * other[e321]),
            ]) - (self.group1().zxyx() * other.group0().yzxx())
                - (other.group0().yzxz() * self.group3().zxy().with_w(self[e435]))
                - (other.group0().wwwy() * self.group2().xyz().with_w(self[e425])),
            // e1, e2, e3, e4
            ((Simd32x3::from(other[e321]) * self.group1().xyz()) + (self.group0().zxy() * other.group0().yzx())
                - (Simd32x3::from(self[e4]) * other.group0().xyz())
                - (self.group0().yzx() * other.group0().zxy()))
            .with_w(self[e4] * other[e321]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlector> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       85      137        0
    //    simd3        0       22        0
    //    simd4       61       42        0
    // Totals...
    // yes simd      146      201        0
    //  no simd      329      371        0
    fn anti_sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[e4] * other[e1],
                self[e4] * other[e2],
                self[e4] * other[e3],
                -(self[e431] * other[e315]) - (self[e412] * other[e125]) - (self[e1] * other[e1]) - (self[e2] * other[e2]) - (self[e3] * other[e3]),
            ]) + (other.group0().ww().with_zw(other[e2], other[e321]) * self.group0().xyx().with_w(self[e321]))
                + (other.group1().zx().with_zw(other[e321], other[e5]) * self.group0().yzz().with_w(self[e4]))
                - (self.group0().zxy() * other.group1().yzx()).with_w(self[e423] * other[e235]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e4] * other[e235]) + (self[e1] * other[e321]) + (self[e2] * other[e3]),
                (self[e4] * other[e315]) + (self[e2] * other[e321]) + (self[e3] * other[e1]),
                (self[e4] * other[e125]) + (self[e1] * other[e2]) + (self[e3] * other[e321]),
                -(self[e435] * other[e3]) - (self[e4] * other[e5]),
            ]) + (other.group0().zx().with_zw(other[e5], other[e315]) * self.group0().yzz().with_w(self[e431]))
                + (other.group1().ww().with_zw(other[e315], other[e235]) * self.group0().xyx().with_w(self[e423]))
                + (self.group1().www() * other.group1().xyz()).with_w(self[e412] * other[e125])
                - (other.group1().yzxy() * self.group3().zxy().with_w(self[e425]))
                - (self.group0().zxy() * other.group0().yzx()).with_w(self[e415] * other[e1]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e1] * other[e5]) + (self[e2] * other[e125]),
                (self[e2] * other[e5]) + (self[e3] * other[e235]),
                (self[e1] * other[e315]) + (self[e3] * other[e5]),
                -(self[e3] * other[e125]) - (self[e5] * other[e321]),
            ]) + (self.group1().xyxw() * other.group1().ww().with_zw(other[e315], other[e5]))
                + (self.group2().zxyz() * other.group1().yzxz())
                + (other.group0().zx().with_zw(other[e5], other[e1]) * self.group1().yzz().with_w(self[e235]))
                + (self.group1().www() * other.group0().xyz()).with_w(self[e315] * other[e2])
                - (self.group1().zxyx() * other.group0().yzxx())
                - (self.group3().zxyx() * other.group0().yzxx())
                - (self.group3().wwwy() * other.group1().xyz().with_w(other[e315]))
                - (other.group0().ww().with_zw(other[e2], other[e315]) * self.group2().xyx().with_w(self[e425]))
                - (other.group1().zx().with_zw(other[e321], other[e125]) * self.group2().yzz().with_w(self[e435])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e415] * other[e321]) + (self[e425] * other[e3]) - (self[e4] * other[e235]),
                (self[e425] * other[e321]) + (self[e435] * other[e1]) - (self[e4] * other[e315]),
                (self[e415] * other[e2]) + (self[e435] * other[e321]) - (self[e4] * other[e125]),
                0.0,
            ]) + (other.group0().yzxw() * self.group0().zxy().with_w(self[e4]))
                - (other.group1().yzxz() * self.group1().zxy().with_w(self[e412]))
                - (other.group0().zx().with_zw(other[e5], other[e2]) * self.group0().yzz().with_w(self[e431]))
                - (other.group1().ww().with_zw(other[e315], other[e1]) * self.group0().xyx().with_w(self[e423])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiLine> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       66      110        0
    //    simd3        0       20        0
    //    simd4       59       43        0
    // Totals...
    // yes simd      125      173        0
    //  no simd      302      342        0
    fn anti_sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e431] * other[e12]) + (self[e4] * other[e23]),
                (self[e412] * other[e23]) + (self[e4] * other[e31]),
                (self[e423] * other[e31]) + (self[e4] * other[e12]),
                -(self[e431] * other[e25]) - (self[e412] * other[e35]) - (self[e415] * other[e23]) - (self[e425] * other[e31]) - (self[e435] * other[e12]),
            ]) - (self.group0().zxy() * other.group0().yzx()).with_w(self[e423] * other[e15]),
            // e23, e31, e12, e45
            Simd32x3::from(0.0).with_w(self[e412] * other[e35] * -1.0)
                + (other.group1() * self.group2().www()).with_w(self[e3] * other[e12])
                + (self.group0().yzx() * other.group1().zxy()).with_w(self[e1] * other[e23])
                + (other.group0().zxy() * self.group1().yzx()).with_w(self[e2] * other[e31])
                - (self.group0().zxy() * other.group1().yzx()).with_w(self[e423] * other[e15])
                - (other.group0().yzx() * self.group1().zxy()).with_w(self[e431] * other[e25]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e425] * other[e35]) + (self[e321] * other[e15]) + (self[e315] * other[e12]) + (self[e2] * other[e35]) + (self[e5] * other[e23]),
                (self[e435] * other[e15]) + (self[e321] * other[e25]) + (self[e125] * other[e23]) + (self[e3] * other[e15]) + (self[e5] * other[e31]),
                (self[e415] * other[e25]) + (self[e321] * other[e35]) + (self[e235] * other[e31]) + (self[e1] * other[e25]) + (self[e5] * other[e12]),
                0.0,
            ]) - (other.group0().yzx() * self.group2().zxy()).with_w(self[e423] * other[e23])
                - (other.group1().yzx() * self.group1().zxy()).with_w(self[e431] * other[e31])
                - (other.group1().yzx() * self.group3().zxy()).with_w(self[e412] * other[e12]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e431] * other[e35]) + (self[e4] * other[e15]) + (self[e3] * other[e31]),
                (self[e412] * other[e15]) + (self[e4] * other[e25]) + (self[e1] * other[e12]),
                (self[e423] * other[e25]) + (self[e4] * other[e35]) + (self[e2] * other[e23]),
                -(self[e415] * other[e15]) - (self[e425] * other[e25]) - (self[e435] * other[e35]) - (self[e1] * other[e15]) - (self[e2] * other[e25]) - (self[e3] * other[e35]),
            ]) - (Simd32x4::from([self[e321], self[e3], self[e1], self[e315]]) * other.group0().xxy().with_w(other[e31]))
                - (Simd32x4::from([self[e2], self[e321], self[e321], self[e125]]) * other.group0().zyz().with_w(other[e12]))
                - (self.group0().zxy() * other.group1().yzx()).with_w(self[e235] * other[e23]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiMotor> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       69      114        0
    //    simd3        0       19        0
    //    simd4       65       50        0
    // Totals...
    // yes simd      134      183        0
    //  no simd      329      371        0
    fn anti_sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e431] * other[e12]) + (self[e4] * other[e23]),
                (self[e412] * other[e23]) + (self[e4] * other[e31]),
                (self[e412] * other[scalar]) + (self[e4] * other[e12]),
                -(self[e431] * other[e25]) - (self[e412] * other[e35]) - (self[e415] * other[e23]) - (self[e425] * other[e31]) - (self[e435] * other[e12]),
            ]) + (self.group0().xyx() * other.group0().wwy()).with_w(self[e4] * other[e3215])
                - (self.group0().zxy() * other.group0().yzx()).with_w(self[e423] * other[e15]),
            // e23, e31, e12, e45
            Simd32x4::from([
                self[e4] * other[e15],
                self[e4] * other[e25],
                self[e4] * other[e35],
                -(self[e412] * other[e35]) - (self[e321] * other[scalar]),
            ]) + (other.group0().zxwz() * self.group1().yzz().with_w(self[e3]))
                + (other.group0().wwyy() * self.group1().xyx().with_w(self[e2]))
                + (other.group1().wwyw() * self.group0().xyx().with_w(self[e4]))
                + (self.group0().yzz() * other.group1().zxw()).with_w(self[e1] * other[e23])
                - (other.group1().yzxx() * self.group0().zxy().with_w(self[e423]))
                - (self.group1().zxy() * other.group0().yzx()).with_w(self[e431] * other[e25]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e425] * other[e35])
                    + (self[e321] * other[e15])
                    + (self[e235] * other[scalar])
                    + (self[e315] * other[e12])
                    + (self[e1] * other[e3215])
                    + (self[e2] * other[e35])
                    + (self[e5] * other[e23]),
                (self[e435] * other[e15])
                    + (self[e321] * other[e25])
                    + (self[e315] * other[scalar])
                    + (self[e125] * other[e23])
                    + (self[e2] * other[e3215])
                    + (self[e3] * other[e15])
                    + (self[e5] * other[e31]),
                (self[e435] * other[e3215])
                    + (self[e321] * other[e35])
                    + (self[e235] * other[e31])
                    + (self[e125] * other[scalar])
                    + (self[e1] * other[e25])
                    + (self[e3] * other[e3215])
                    + (self[e5] * other[e12]),
                0.0,
            ]) + (self.group1().xyx() * other.group1().wwy()).with_w(self[e4] * other[scalar])
                - (other.group0().yzxy() * self.group2().zxy().with_w(self[e431]))
                - (self.group1().zxy() * other.group1().yzx()).with_w(self[e423] * other[e23])
                - (self.group3().zxy() * other.group1().yzx()).with_w(self[e412] * other[e12]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e4] * other[e15]) + (self[e3] * other[e31]),
                (self[e4] * other[e25]) + (self[e1] * other[e12]),
                (self[e4] * other[e35]) + (self[e2] * other[e23]),
                -(self[e315] * other[e31]) - (self[e125] * other[e12]) - (self[e1] * other[e15]) - (self[e2] * other[e25]) - (self[e3] * other[e35]),
            ]) + (other.group1().wwyw() * self.group0().xyx().with_w(self[e321]))
                + (self.group0().yzz() * other.group1().zxw()).with_w(self[e5] * other[scalar])
                - (self.group1().wwwy() * other.group0().xyz().with_w(other[e25]))
                - (other.group0().zxwx() * self.group3().yzz().with_w(self[e235]))
                - (other.group1().yzxx() * self.group0().zxy().with_w(self[e415]))
                - (self.group3().xyx() * other.group0().wwy()).with_w(self[e435] * other[e35]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiPlane> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       76      126        0
    //    simd3        0       18        0
    //    simd4       48       33        0
    // Totals...
    // yes simd      124      177        0
    //  no simd      268      312        0
    fn anti_sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([self[e4] * other[e1], self[e4] * other[e2], self[e4] * other[e3], -(self[e2] * other[e2]) - (self[e3] * other[e3])])
                + (other.group0().zxyw() * self.group0().yzx().with_w(self[e4]))
                - (other.group0().yzxx() * self.group0().zxy().with_w(self[e1])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e423] * other[e5]) + (self[e321] * other[e1]) + (self[e2] * other[e3]),
                (self[e431] * other[e5]) + (self[e321] * other[e2]) + (self[e3] * other[e1]),
                (self[e412] * other[e5]) + (self[e321] * other[e3]) + (self[e1] * other[e2]),
                -(self[e425] * other[e2]) - (self[e435] * other[e3]) - (self[e4] * other[e5]),
            ]) - (other.group0().yzxx() * self.group3().zxy().with_w(self[e415])),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e315] * other[e3]) - (self[e5] * other[e1]),
                -(self[e125] * other[e1]) - (self[e5] * other[e2]),
                -(self[e235] * other[e2]) - (self[e5] * other[e3]),
                self[e125] * other[e3],
            ]) + (Simd32x4::from(other[e5]) * self.group1())
                + (self.group2().zxyx() * other.group0().yzxx())
                + (other.group0().wwwy() * self.group3().xyz().with_w(self[e315])),
            // e1, e2, e3, e4
            Simd32x4::from([self[e425] * other[e3], self[e435] * other[e1], self[e415] * other[e2], self[e412] * other[e3] * -1.0])
                - (other.group0().yzxy() * self.group1().zxy().with_w(self[e431]))
                - (other.group0().wwwx() * self.group0().with_w(self[e423])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiScalar> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       61       90        0
    //    simd3        0       15        0
    //    simd4       37       29        0
    // Totals...
    // yes simd       98      134        0
    //  no simd      209      251        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[e12345]) * self.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other[e12345]) * self.group1(),
            // e235, e315, e125, e4
            Simd32x4::from(other[e12345]) * self.group2(),
            // e1, e2, e3, e5
            Simd32x4::from(other[e12345]) * self.group3(),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      106      166        0
    //    simd3        0       29        0
    //    simd4       63       37        0
    // Totals...
    // yes simd      169      232        0
    //  no simd      358      401        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e431] * other[e435]) + (self[e425] * other[e412]) + (self[e4] * other[e415]) + (self[e3] * other[e431]),
                (self[e412] * other[e415]) + (self[e435] * other[e423]) + (self[e4] * other[e425]) + (self[e1] * other[e412]),
                (self[e412] * other[e321]) + (self[e415] * other[e431]) + (self[e4] * other[e435]) + (self[e2] * other[e423]),
                -(self[e415] * other[e415]) - (self[e425] * other[e425]) - (self[e435] * other[e435]) - (self[e315] * other[e431]) - (self[e125] * other[e412]),
            ]) + (other.group1().wwyw() * self.group0().xyx().with_w(self[e321]))
                - (Simd32x4::from([self[e321], self[e3], self[e425], other[e315]]) * other.group0().xxx().with_w(self[e431]))
                - (Simd32x4::from([self[e2], self[e415], self[e321], self[e235]]) * other.group0().zzz().with_w(other[e423]))
                - (self.group1().zw().with_zw(self[e1], other[e125]) * other.group0().yyy().with_w(self[e412]))
                - (self.group0().zxy() * other.group1().yzx()).with_w(self[e423] * other[e235]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e425] * other[e435]) + (self[e4] * other[e235]) + (self[e1] * other[e321]),
                (self[e435] * other[e415]) + (self[e4] * other[e315]) + (self[e2] * other[e321]),
                (self[e415] * other[e425]) + (self[e4] * other[e125]) + (self[e3] * other[e321]),
                -(self[e1] * other[e415]) - (self[e2] * other[e425]) - (self[e3] * other[e435]),
            ]) + (Simd32x4::from([self[e315], self[e5], self[e5], other[e125]]) * other.group0().zyz().with_w(self[e412]))
                + (Simd32x4::from([self[e5], self[e125], self[e235], other[e315]]) * other.group0().xxy().with_w(self[e431]))
                + (self.group0().yzx() * other.group2().zxy()).with_w(self[e423] * other[e235])
                - (self.group2().zxyy() * other.group0().yzx().with_w(other[e431]))
                - (self.group0().zxy() * other.group2().yzx()).with_w(self[e235] * other[e423])
                - (self.group1().zxy() * other.group1().yzx()).with_w(self[e125] * other[e412]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e425] * other[e125]) + (self[e321] * other[e235]) + (self[e315] * other[e435]) + (self[e2] * other[e125]) + (self[e5] * other[e415]),
                (self[e435] * other[e235]) + (self[e321] * other[e315]) + (self[e125] * other[e415]) + (self[e3] * other[e235]) + (self[e5] * other[e425]),
                (self[e415] * other[e315]) + (self[e321] * other[e125]) + (self[e235] * other[e425]) + (self[e1] * other[e315]) + (self[e5] * other[e435]),
                -(self[e435] * other[e125])
                    - (self[e235] * other[e415])
                    - (self[e315] * other[e425])
                    - (self[e125] * other[e435])
                    - (self[e3] * other[e125])
                    - (self[e5] * other[e321]),
            ]) - (self.group1().zxyx() * other.group2().yzx().with_w(other[e235]))
                - (self.group3().zxyx() * other.group2().yzx().with_w(other[e235]))
                - (self.group2().xxy() * other.group1().wzx()).with_w(self[e425] * other[e315])
                - (self.group2().zyz() * other.group1().yww()).with_w(self[e2] * other[e315]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e321] * other[e415]) + (self[e2] * other[e435]),
                (self[e321] * other[e425]) + (self[e3] * other[e415]),
                (self[e321] * other[e435]) + (self[e1] * other[e425]),
                -(self[e425] * other[e431]) - (self[e435] * other[e412]),
            ]) + (Simd32x4::from(other[e321]) * self.group1().xyz().with_w(self[e4]))
                + (Simd32x4::from([self[e315], self[e5], self[e5], self[e3]]) * other.group0().zyz().with_w(other[e412]))
                + (Simd32x4::from([self[e5], self[e125], self[e235], self[e2]]) * other.group0().xxy().with_w(other[e431]))
                + (self.group0().zxy() * other.group2().yzx()).with_w(self[e1] * other[e423])
                - (other.group2() * self.group2().www()).with_w(self[e412] * other[e435])
                - (self.group0().yzx() * other.group2().zxy()).with_w(self[e423] * other[e415])
                - (other.group0().yzx() * self.group2().zxy()).with_w(self[e431] * other[e425])
                - (self.group3().zxy() * other.group1().yzx()).with_w(self[e415] * other[e423]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      109      170        0
    //    simd3        0       30        0
    //    simd4       66       39        0
    // Totals...
    // yes simd      175      239        0
    //  no simd      373      416        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e423] * other[e12345]) + (self[e431] * other[e435]) + (self[e425] * other[e412]) + (self[e4] * other[e415]) + (self[e3] * other[e431]),
                (self[e431] * other[e12345]) + (self[e412] * other[e415]) + (self[e435] * other[e423]) + (self[e4] * other[e425]) + (self[e1] * other[e412]),
                (self[e412] * other[e321]) + (self[e412] * other[e12345]) + (self[e415] * other[e431]) + (self[e4] * other[e435]) + (self[e2] * other[e423]),
                -(self[e415] * other[e415]) - (self[e425] * other[e425]) - (self[e435] * other[e435]) - (self[e315] * other[e431]) - (self[e125] * other[e412]),
            ]) + (other.group1().wwyw() * self.group0().xyx().with_w(self[e321]))
                - (Simd32x4::from([self[e321], self[e3], self[e425], other[e315]]) * other.group0().xxx().with_w(self[e431]))
                - (Simd32x4::from([self[e2], self[e415], self[e321], self[e235]]) * other.group0().zzz().with_w(other[e423]))
                - (self.group1().zw().with_zw(self[e1], other[e125]) * other.group0().yyy().with_w(self[e412]))
                - (self.group0().zxy() * other.group1().yzx()).with_w(self[e423] * other[e235]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e425] * other[e435]) + (self[e4] * other[e235]) + (self[e1] * other[e321]),
                (self[e435] * other[e415]) + (self[e4] * other[e315]) + (self[e2] * other[e321]),
                (self[e435] * other[e12345]) + (self[e4] * other[e125]) + (self[e3] * other[e321]),
                -(self[e1] * other[e415]) - (self[e2] * other[e425]) - (self[e3] * other[e435]),
            ]) + (Simd32x4::from([self[e315], self[e5], self[e5], other[e125]]) * other.group0().zyz().with_w(self[e412]))
                + (Simd32x4::from([self[e5], self[e125], self[e235], other[e315]]) * other.group0().xxy().with_w(self[e431]))
                + (self.group1().xyxw() * other.group2().ww().with_zw(other[e425], other[e12345]))
                + (other.group2().zxyx() * self.group0().yzx().with_w(self[e423]))
                - (self.group2().zxyy() * other.group0().yzx().with_w(other[e431]))
                - (self.group0().zxy() * other.group2().yzx()).with_w(self[e235] * other[e423])
                - (self.group1().zxy() * other.group1().yzx()).with_w(self[e125] * other[e412]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e321] * other[e235]) + (self[e235] * other[e12345]) + (self[e315] * other[e435]) + (self[e2] * other[e125]) + (self[e5] * other[e415]),
                (self[e321] * other[e315]) + (self[e315] * other[e12345]) + (self[e125] * other[e415]) + (self[e3] * other[e235]) + (self[e5] * other[e425]),
                (self[e321] * other[e125]) + (self[e235] * other[e425]) + (self[e125] * other[e12345]) + (self[e1] * other[e315]) + (self[e5] * other[e435]),
                -(self[e315] * other[e425])
                    - (self[e125] * other[e435])
                    - (self[e1] * other[e235])
                    - (self[e2] * other[e315])
                    - (self[e3] * other[e125])
                    - (self[e5] * other[e321]),
            ]) + (other.group2().zxyw() * self.group1().yzx().with_w(self[e5]))
                - (self.group1().zxyx() * other.group2().yzxx())
                - (self.group2().xxy() * other.group1().wzx()).with_w(self[e425] * other[e315])
                - (self.group2().zyz() * other.group1().yww()).with_w(self[e435] * other[e125])
                - (self.group3().zxy() * other.group2().yzx()).with_w(self[e235] * other[e415]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e1] * other[e12345]) + (self[e2] * other[e435]),
                (self[e2] * other[e12345]) + (self[e3] * other[e415]),
                (self[e1] * other[e425]) + (self[e3] * other[e12345]),
                -(self[e425] * other[e431]) - (self[e435] * other[e412]),
            ]) + (Simd32x4::from(other[e321]) * self.group1().xyz().with_w(self[e4]))
                + (Simd32x4::from([self[e315], self[e5], self[e5], self[e3]]) * other.group0().zyz().with_w(other[e412]))
                + (Simd32x4::from([self[e5], self[e125], self[e235], self[e2]]) * other.group0().xxy().with_w(other[e431]))
                + (self.group0().zxy() * other.group2().yzx()).with_w(self[e1] * other[e423])
                + (self.group1().www() * other.group1().xyz()).with_w(self[e4] * other[e12345])
                - (self.group0().yzx() * other.group2().zxy()).with_w(self[e423] * other[e415])
                - (other.group0().yzx() * self.group2().zxy()).with_w(self[e431] * other[e425])
                - (self.group2().www() * other.group2().xyz()).with_w(self[e412] * other[e435])
                - (self.group3().zxy() * other.group1().yzx()).with_w(self[e415] * other[e423]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       70      124        0
    //    simd3        0       24        0
    //    simd4       72       52        0
    // Totals...
    // yes simd      142      200        0
    //  no simd      358      404        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e431] * other[e12]) + (self[e425] * other[e43]) + (self[e4] * other[e23]) + (self[e3] * other[e42]),
                (self[e412] * other[e23]) + (self[e435] * other[e41]) + (self[e4] * other[e31]) + (self[e1] * other[e43]),
                (self[e423] * other[e31]) + (self[e415] * other[e42]) + (self[e4] * other[e12]) + (self[e2] * other[e41]),
                -(self[e415] * other[e23]) - (self[e425] * other[e31]) - (self[e435] * other[e12]) - (self[e321] * other[e45]) - (self[e125] * other[e43]),
            ]) - (Simd32x4::from([self[e321], self[e3], self[e425], other[e35]]) * other.group0().xxx().with_w(self[e412]))
                - (Simd32x4::from([self[e2], self[e415], self[e321], self[e315]]) * other.group0().zzz().with_w(other[e42]))
                - (self.group1().zw().with_zw(self[e1], self[e235]) * other.group0().yyy().with_w(other[e41]))
                - (self.group0().xxy() * other.group1().wzx()).with_w(self[e423] * other[e15])
                - (self.group0().zyz() * other.group1().yww()).with_w(self[e431] * other[e25]),
            // e23, e31, e12, e45
            Simd32x4::from([self[e1] * other[e45] * -1.0, self[e2] * other[e45] * -1.0, self[e3] * other[e45] * -1.0, self[e3] * other[e12]])
                + (Simd32x4::from([self[e315], self[e5], self[e5], self[e125]]) * other.group0().zyz().with_w(other[e43]))
                + (Simd32x4::from([self[e5], self[e125], self[e235], self[e315]]) * other.group0().xxy().with_w(other[e42]))
                + (other.group1().zxyy() * self.group1().yzx().with_w(self[e2]))
                + (other.group2() * self.group2().www()).with_w(self[e1] * other[e23])
                + (self.group0().yzx() * other.group2().zxy()).with_w(self[e235] * other[e41])
                - (self.group0().zxy() * other.group2().yzx()).with_w(self[e423] * other[e15])
                - (other.group0().yzx() * self.group2().zxy()).with_w(self[e431] * other[e25])
                - (self.group1().zxy() * other.group1().yzx()).with_w(self[e412] * other[e35]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e235] * other[e45]) + (self[e315] * other[e12]) + (self[e5] * other[e23]),
                (self[e315] * other[e45]) + (self[e125] * other[e23]) + (self[e5] * other[e31]),
                (self[e235] * other[e31]) + (self[e125] * other[e45]) + (self[e5] * other[e12]),
                -(self[e415] * other[e41]) - (self[e425] * other[e42]) - (self[e435] * other[e43]) - (self[e4] * other[e45]),
            ]) + (Simd32x4::from([self[e425], self[e3], self[e1], self[e2]]) * other.group2().zxy().with_w(other[e42]))
                + (Simd32x4::from([self[e2], self[e321], self[e321], self[e3]]) * other.group2().zyz().with_w(other[e43]))
                + (other.group2().xxy() * self.group1().wzx()).with_w(self[e1] * other[e41])
                - (other.group1().yzxz() * self.group2().zxy().with_w(self[e412]))
                - (other.group2().yzx() * self.group1().zxy()).with_w(self[e423] * other[e23])
                - (other.group2().yzx() * self.group3().zxy()).with_w(self[e431] * other[e31]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e415] * other[e45]) + (self[e125] * other[e42]) + (self[e4] * other[e15]) + (self[e3] * other[e31]),
                (self[e425] * other[e45]) + (self[e235] * other[e43]) + (self[e4] * other[e25]) + (self[e1] * other[e12]),
                (self[e435] * other[e45]) + (self[e315] * other[e41]) + (self[e4] * other[e35]) + (self[e2] * other[e23]),
                -(self[e235] * other[e23]) - (self[e315] * other[e31]) - (self[e125] * other[e12]) - (self[e3] * other[e35]),
            ]) + (self.group0().yzx() * other.group2().zxy()).with_w(self[e5] * other[e45])
                - (Simd32x4::from([self[e315], self[e5], self[e5], self[e425]]) * other.group0().zyz().with_w(other[e25]))
                - (Simd32x4::from([self[e5], self[e125], self[e235], self[e1]]) * other.group0().xxy().with_w(other[e15]))
                - (self.group0().zxy() * other.group2().yzx()).with_w(self[e415] * other[e15])
                - (self.group1().www() * other.group1().xyz()).with_w(self[e2] * other[e25])
                - (self.group3().yzx() * other.group1().zxy()).with_w(self[e435] * other[e35]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       65      117        0
    //    simd3        0       24        0
    //    simd4       92       72        0
    // Totals...
    // yes simd      157      213        0
    //  no simd      433      477        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e4] * other[e23],
                self[e4] * other[e31],
                self[e4] * other[e12],
                -(self[e435] * other[e12]) - (self[e321] * other[e45]),
            ]) + (Simd32x4::from(other[e1234]) * self.group1().xyz().with_w(self[e5]))
                + (Simd32x4::from([self[e425], self[e1], self[e415], other[e4125]]) * other.group0().zzy().with_w(self[e3]))
                + (Simd32x4::from([self[e3], self[e435], self[e2], other[e4315]]) * other.group0().yxx().with_w(self[e2]))
                + (Simd32x4::from([other[e12], other[e4125], other[e31], other[e3215]]) * self.group0().yxx().with_w(self[e4]))
                + (Simd32x4::from([other[e4315], other[e23], other[e4235], other[e4235]]) * self.group0().zzy().with_w(self[e1]))
                - (Simd32x4::from(self[e423]) * other.group1().wz().with_zw(other[e4315], other[e15]))
                - (Simd32x4::from(self[e431]) * Simd32x4::from([other[e4125], other[e45], other[e23], other[e25]]))
                - (Simd32x4::from(self[e412]) * Simd32x4::from([other[e31], other[e4235], other[e45], other[e35]]))
                - (Simd32x4::from(other[e41]) * Simd32x4::from([self[e321], self[e3], self[e425], self[e235]]))
                - (Simd32x4::from(other[e42]) * self.group1().zw().with_zw(self[e1], self[e315]))
                - (Simd32x4::from(other[e43]) * Simd32x4::from([self[e2], self[e415], self[e321], self[e125]]))
                - (self.group2().www() * other.group3().xyz()).with_w(self[e415] * other[e23])
                - (other.group2().www() * self.group3().xyz()).with_w(self[e425] * other[e31]),
            // e23, e31, e12, e45
            Simd32x4::from([self[e3] * other[e4315], self[e1] * other[e4125], self[e2] * other[e4235], self[e5] * other[e1234] * -1.0])
                + (Simd32x4::from([self[e315], self[e5], self[e5], other[e3215]]) * other.group0().zyz().with_w(self[e4]))
                + (Simd32x4::from([self[e5], self[e125], self[e235], self[e125]]) * other.group0().xxy().with_w(other[e43]))
                + (other.group1().zxyx() * self.group1().yzx().with_w(self[e1]))
                + (other.group2().zx().with_zw(other[e3215], self[e315]) * self.group0().yzz().with_w(other[e42]))
                + (other.group3().ww().with_zw(other[e25], self[e235]) * self.group0().xyx().with_w(other[e41]))
                + (self.group2().www() * other.group2().xyz()).with_w(self[e3] * other[e12])
                + (other.group2().www() * self.group2().xyz()).with_w(self[e2] * other[e31])
                - (self.group1().wwwx() * other.group3().xyzx())
                - (other.group2().yzxx() * self.group0().zxy().with_w(self[e423]))
                - (other.group1().ww().with_zw(other[e4315], other[e4315]) * self.group3().xyx().with_w(self[e425]))
                - (other.group3().zx().with_zw(other[e45], other[e4125]) * self.group3().yzz().with_w(self[e435]))
                - (other.group0().yzx() * self.group2().zxy()).with_w(self[e431] * other[e25])
                - (self.group1().zxy() * other.group1().yzx()).with_w(self[e412] * other[e35]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e1] * other[e3215]) + (self[e2] * other[e35]) + (self[e5] * other[e23]) + (self[e5] * other[e4235]),
                (self[e2] * other[e3215]) + (self[e3] * other[e15]) + (self[e5] * other[e31]) + (self[e5] * other[e4315]),
                (self[e1] * other[e25]) + (self[e3] * other[e3215]) + (self[e5] * other[e12]) + (self[e5] * other[e4125]),
                -(self[e425] * other[e42]) - (self[e435] * other[e43]) - (self[e321] * other[e1234]) - (self[e4] * other[e45]),
            ]) + (other.group1().zx().with_zw(other[e4315], self[e2]) * self.group2().yzx().with_w(other[e42]))
                + (other.group2().zx().with_zw(other[e3215], other[e4315]) * self.group1().yzz().with_w(self[e431]))
                + (other.group3().zx().with_zw(other[e45], self[e3]) * self.group2().yzz().with_w(other[e43]))
                + (other.group3().ww().with_zw(other[e25], other[e4235]) * self.group1().xyx().with_w(self[e423]))
                + (self.group1().www() * other.group2().xyz()).with_w(self[e412] * other[e4125])
                + (self.group2().xyx() * other.group1().wwy()).with_w(self[e1] * other[e41])
                - (other.group1().yzxy() * self.group2().zxy().with_w(self[e431]))
                - (self.group1().zxy() * other.group2().yzx()).with_w(self[e423] * other[e23])
                - (self.group2().zxy() * other.group3().yzx()).with_w(self[e412] * other[e12])
                - (self.group3().zxy() * other.group2().yzx()).with_w(self[e415] * other[e41]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e415] * other[e45]) + (self[e425] * other[e4125]) + (self[e125] * other[e42]) + (self[e4] * other[e15]) + (self[e3] * other[e31]),
                (self[e425] * other[e45]) + (self[e435] * other[e4235]) + (self[e235] * other[e43]) + (self[e4] * other[e25]) + (self[e1] * other[e12]),
                (self[e415] * other[e4315]) + (self[e435] * other[e45]) + (self[e315] * other[e41]) + (self[e4] * other[e35]) + (self[e2] * other[e23]),
                -(self[e125] * other[e12]) - (self[e125] * other[e4125]) - (self[e1] * other[e15]) - (self[e2] * other[e25]) - (self[e3] * other[e35]),
            ]) + (other.group2().zx().with_zw(other[e3215], other[e45]) * self.group0().yzz().with_w(self[e5]))
                + (other.group3().ww().with_zw(other[e25], other[e3215]) * self.group0().xyx().with_w(self[e321]))
                - (Simd32x4::from([self[e315], self[e5], self[e5], other[e35]]) * other.group0().zyz().with_w(self[e435]))
                - (Simd32x4::from([self[e5], self[e125], self[e235], other[e25]]) * other.group0().xxy().with_w(self[e425]))
                - (self.group2().xyzy() * other.group2().www().with_w(other[e31]))
                - (other.group2().yzxx() * self.group0().zxy().with_w(self[e415]))
                - (self.group1().zxy() * other.group3().yzx()).with_w(self[e235] * other[e23])
                - (self.group1().www() * other.group1().xyz()).with_w(self[e235] * other[e4235])
                - (self.group3().yzx() * other.group1().zxy()).with_w(self[e315] * other[e4315]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       64      106        0
    //    simd3        1       20        0
    //    simd4       43       29        0
    // Totals...
    // yes simd      108      155        0
    //  no simd      239      282        0
    fn anti_sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            other.group0().yy().with_zw(other[e12345], other[e5]) * self.group0().with_w(self[e4]),
            // e415, e425, e435, e321
            Simd32x4::from([self[e415] * other[e12345], self[e425] * other[e12345], self[e435] * other[e12345], self[e4] * other[e5] * -1.0])
                + (other.group0().xx().with_zw(other[e5], other[e12345]) * self.group0().with_w(self[e321])),
            // e235, e315, e125, e5
            Simd32x4::from([self[e235] * other[e12345], self[e315] * other[e12345], self[e125] * other[e12345], 0.0])
                + (Simd32x4::from(other[e5]) * self.group1())
                + (self.group3() * other.group0().xx().with_zw(other[e5], other[e12345])),
            // e1, e2, e3, e4
            ((Simd32x3::from(other[e12345]) * self.group3().xyz()) - (Simd32x3::from(other[e5]) * self.group0())).with_w(self[e4] * other[e12345]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       49       82        0
    //    simd3        5       16        0
    //    simd4       51       47        0
    // Totals...
    // yes simd      105      145        0
    //  no simd      268      318        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([other[e45], other[e45], other[e45], 1.0])
                * self
                    .group0()
                    .with_w(-(self[e423] * other[e15]) - (self[e431] * other[e25]) - (self[e412] * other[e35]) - (self[e321] * other[e45]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e431] * other[e35]) + (self[e4] * other[e15]),
                (self[e412] * other[e15]) + (self[e4] * other[e25]),
                (self[e423] * other[e25]) + (self[e4] * other[e35]),
                self[e412] * other[e35] * -1.0,
            ]) - (other.group0().yzxx() * self.group0().zxy().with_w(self[e423]))
                - (other.group0().wwwy() * self.group3().xyz().with_w(self[e431])),
            // e15, e25, e35, e1234
            ((Simd32x3::from(self[e321]) * other.group0().xyz())
                + (Simd32x3::from(other[e45]) * self.group2().xyz())
                + (self.group1().yzx() * other.group0().zxy())
                + (self.group3().yzx() * other.group0().zxy())
                - (self.group1().zxy() * other.group0().yzx())
                - (self.group3().zxy() * other.group0().yzx()))
            .with_w(self[e4] * other[e45] * -1.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e415] * other[e45]) + (self[e4] * other[e15]),
                (self[e425] * other[e45]) + (self[e4] * other[e25]),
                (self[e435] * other[e45]) + (self[e4] * other[e35]),
                -(self[e425] * other[e25]) - (self[e435] * other[e35]) - (self[e1] * other[e15]) - (self[e2] * other[e25]) - (self[e3] * other[e35]),
            ]) + (other.group0().zxyw() * self.group0().yzx().with_w(self[e5]))
                - (other.group0().yzxx() * self.group0().zxy().with_w(self[e415])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       76      112        0
    //    simd3        0       13        0
    //    simd4       64       55        0
    // Totals...
    // yes simd      140      180        0
    //  no simd      332      371        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (other.group1().yzxw() * self.group0().zxy().with_w(self[e4]))
                + Simd32x3::from(0.0).with_w((self[e1] * other[e4235]) + (self[e2] * other[e4315]) + (self[e3] * other[e4125]) - (self[e321] * other[e45]))
                - (other.group0().ww().with_zw(other[e4315], other[e15]) * self.group0().xyx().with_w(self[e423]))
                - (other.group1().zx().with_zw(other[e45], other[e25]) * self.group0().yzz().with_w(self[e431]))
                - (self.group2().www() * other.group1().xyz()).with_w(self[e412] * other[e35]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e431] * other[e35]) + (self[e4] * other[e15]) + (self[e3] * other[e4315]),
                (self[e412] * other[e15]) + (self[e4] * other[e25]) + (self[e1] * other[e4125]),
                (self[e412] * other[e3215]) + (self[e4] * other[e35]) + (self[e2] * other[e4235]),
                -(self[e425] * other[e4315]) - (self[e435] * other[e4125]),
            ]) + (other.group1().ww().with_zw(other[e25], other[e3215]) * self.group0().xyx().with_w(self[e4]))
                - (other.group0().yzxx() * self.group0().zxy().with_w(self[e423]))
                - (other.group0().ww().with_zw(other[e4315], other[e35]) * self.group3().xyx().with_w(self[e412]))
                - (other.group1().zx().with_zw(other[e45], other[e4235]) * self.group3().yzz().with_w(self[e415]))
                - (self.group1().www() * other.group1().xyz()).with_w(self[e431] * other[e25]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e235] * other[e45]) + (self[e315] * other[e4125]) + (self[e1] * other[e3215]) + (self[e2] * other[e35]) + (self[e5] * other[e4235])
                    - (self[e125] * other[e4315])
                    - (self[e3] * other[e25]),
                (self[e315] * other[e45]) + (self[e125] * other[e4235]) + (self[e2] * other[e3215]) + (self[e3] * other[e15]) + (self[e5] * other[e4315])
                    - (self[e235] * other[e4125])
                    - (self[e1] * other[e35]),
                (self[e235] * other[e4315]) + (self[e125] * other[e45]) + (self[e1] * other[e25]) + (self[e3] * other[e3215]) + (self[e5] * other[e4125])
                    - (self[e315] * other[e4235])
                    - (self[e2] * other[e15]),
                0.0,
            ]) + (other.group0().zx().with_zw(other[e3215], other[e4315]) * self.group1().yzz().with_w(self[e431]))
                + (other.group1().ww().with_zw(other[e25], other[e4235]) * self.group1().xyx().with_w(self[e423]))
                + (self.group1().www() * other.group0().xyz()).with_w(self[e412] * other[e4125])
                - (other.group0().yzxw() * self.group1().zxy().with_w(self[e4])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e415] * other[e45]) + (self[e425] * other[e4125]) + (self[e4] * other[e15]),
                (self[e425] * other[e45]) + (self[e435] * other[e4235]) + (self[e4] * other[e25]),
                (self[e415] * other[e4315]) + (self[e435] * other[e45]) + (self[e4] * other[e35]),
                -(self[e435] * other[e35])
                    - (self[e235] * other[e4235])
                    - (self[e315] * other[e4315])
                    - (self[e125] * other[e4125])
                    - (self[e1] * other[e15])
                    - (self[e2] * other[e25])
                    - (self[e3] * other[e35]),
            ]) + (other.group0().zx().with_zw(other[e3215], other[e45]) * self.group0().yzz().with_w(self[e5]))
                + (other.group1().ww().with_zw(other[e25], other[e3215]) * self.group0().xyx().with_w(self[e321]))
                - (self.group1().zxyy() * other.group1().yzx().with_w(other[e25]))
                - (other.group0().yzxx() * self.group0().zxy().with_w(self[e415])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       94      151        0
    //    simd3        0       29        0
    //    simd4       52       26        0
    // Totals...
    // yes simd      146      206        0
    //  no simd      302      342        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e431] * other[e435]) + (self[e4] * other[e415]),
                (self[e412] * other[e415]) + (self[e4] * other[e425]),
                (self[e423] * other[e425]) + (self[e4] * other[e435]),
                -(self[e431] * other[e315]) - (self[e412] * other[e125]) - (self[e415] * other[e415]) - (self[e425] * other[e425]) - (self[e435] * other[e435]),
            ]) - (self.group0().zxy() * other.group0().yzx()).with_w(self[e423] * other[e235]),
            // e415, e425, e435, e321
            Simd32x3::from(0.0).with_w(self[e3] * other[e435] * -1.0)
                + (other.group1() * self.group2().www()).with_w(self[e412] * other[e125])
                + (self.group0().yzx() * other.group1().zxy()).with_w(self[e423] * other[e235])
                + (other.group0().zxy() * self.group1().yzx()).with_w(self[e431] * other[e315])
                - (self.group0().zxy() * other.group1().yzx()).with_w(self[e1] * other[e415])
                - (other.group0().yzx() * self.group1().zxy()).with_w(self[e2] * other[e425]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e425] * other[e125]) + (self[e321] * other[e235]) + (self[e315] * other[e435]) + (self[e2] * other[e125]) + (self[e5] * other[e415]),
                (self[e435] * other[e235]) + (self[e321] * other[e315]) + (self[e125] * other[e415]) + (self[e3] * other[e235]) + (self[e5] * other[e425]),
                (self[e415] * other[e315]) + (self[e321] * other[e125]) + (self[e235] * other[e425]) + (self[e1] * other[e315]) + (self[e5] * other[e435]),
                -(self[e415] * other[e235])
                    - (self[e425] * other[e315])
                    - (self[e435] * other[e125])
                    - (self[e1] * other[e235])
                    - (self[e2] * other[e315])
                    - (self[e3] * other[e125]),
            ]) - (self.group2().zxyx() * other.group0().yzx().with_w(other[e415]))
                - (other.group1().yzx() * self.group1().zxy()).with_w(self[e315] * other[e425])
                - (other.group1().yzx() * self.group3().zxy()).with_w(self[e125] * other[e435]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e412] * other[e315]) + (self[e321] * other[e415]) + (self[e2] * other[e435]),
                (self[e423] * other[e125]) + (self[e321] * other[e425]) + (self[e3] * other[e415]),
                (self[e431] * other[e235]) + (self[e321] * other[e435]) + (self[e1] * other[e425]),
                0.0,
            ]) - (other.group1() * self.group2().www()).with_w(self[e412] * other[e435])
                - (self.group0().yzx() * other.group1().zxy()).with_w(self[e423] * other[e415])
                - (other.group0().yzx() * self.group3().zxy()).with_w(self[e431] * other[e425]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      101      158        0
    //    simd3        0       27        0
    //    simd4       57       33        0
    // Totals...
    // yes simd      158      218        0
    //  no simd      329      371        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e431] * other[e435]) + (self[e4] * other[e415]),
                (self[e412] * other[e415]) + (self[e4] * other[e425]),
                (self[e412] * other[e12345]) + (self[e4] * other[e435]),
                -(self[e431] * other[e315]) - (self[e412] * other[e125]) - (self[e415] * other[e415]) - (self[e425] * other[e425]) - (self[e435] * other[e435]),
            ]) + (self.group0().xyx() * other.group0().wwy()).with_w(self[e4] * other[e5])
                - (self.group0().zxy() * other.group0().yzx()).with_w(self[e423] * other[e235]),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e4] * other[e235],
                self[e4] * other[e315],
                self[e4] * other[e125],
                -(self[e2] * other[e425]) - (self[e3] * other[e435]),
            ]) + (self.group1().yzzw() * other.group0().zxww())
                + (other.group1().zxwy() * self.group0().yzz().with_w(self[e431]))
                + (other.group1().wwyx() * self.group0().xyx().with_w(self[e423]))
                + (self.group1().xyx() * other.group0().wwy()).with_w(self[e412] * other[e125])
                - (other.group0().yzxx() * self.group1().zxy().with_w(self[e1]))
                - (other.group1().yzxw() * self.group0().zxy().with_w(self[e4])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e321] * other[e235])
                    + (self[e235] * other[e12345])
                    + (self[e315] * other[e435])
                    + (self[e1] * other[e5])
                    + (self[e2] * other[e125])
                    + (self[e5] * other[e415]),
                (self[e321] * other[e315])
                    + (self[e315] * other[e12345])
                    + (self[e125] * other[e415])
                    + (self[e2] * other[e5])
                    + (self[e3] * other[e235])
                    + (self[e5] * other[e425]),
                (self[e321] * other[e125])
                    + (self[e235] * other[e425])
                    + (self[e125] * other[e12345])
                    + (self[e1] * other[e315])
                    + (self[e3] * other[e5])
                    + (self[e5] * other[e435]),
                -(self[e235] * other[e415])
                    - (self[e315] * other[e425])
                    - (self[e125] * other[e435])
                    - (self[e1] * other[e235])
                    - (self[e2] * other[e315])
                    - (self[e3] * other[e125]),
            ]) + (self.group1().xyxw() * other.group1().wwyw())
                + (self.group1().yzz() * other.group1().zxw()).with_w(self[e5] * other[e12345])
                - (self.group1().zxyx() * other.group1().yzxx())
                - (other.group1().yzxz() * self.group3().zxy().with_w(self[e435]))
                - (self.group2().zxy() * other.group0().yzx()).with_w(self[e425] * other[e315]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e321] * other[e415]) + (self[e1] * other[e12345]) + (self[e2] * other[e435]) - (self[e3] * other[e425]),
                (self[e321] * other[e425]) + (self[e2] * other[e12345]) + (self[e3] * other[e415]) - (self[e1] * other[e435]),
                (self[e321] * other[e435]) + (self[e1] * other[e425]) + (self[e3] * other[e12345]) - (self[e2] * other[e415]),
                0.0,
            ]) + (self.group0().zxy() * other.group1().yzx()).with_w(self[e4] * other[e12345])
                - (self.group0().xyx() * other.group1().wwy()).with_w(self[e423] * other[e415])
                - (self.group0().yzz() * other.group1().zxw()).with_w(self[e431] * other[e425])
                - (self.group2().www() * other.group1().xyz()).with_w(self[e412] * other[e435]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for AntiDipoleInversion {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      156      214        0
    //    simd2       22       22        0
    //    simd3      112      147        0
    //    simd4       90       68        0
    // Totals...
    // yes simd      380      451        0
    //  no simd      896      971        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[e2] * other[e4315]) + (self[e3] * other[e4125]) + (self[e5] * other[e1234]) - (self[e321] * other[e45]),
                (self[e321] * other[e321]) - (self[e1] * other[e1]) - (self[e2] * other[e2]) - (self[e3] * other[e3]),
            ]) + (Simd32x2::from(self[e4]) * Simd32x2::from([other[e3215], other[e5]]))
                + (Simd32x2::from([other[e4235], other[e4]]) * self.group3().xw())
                - (Simd32x2::from(self[e423]) * Simd32x2::from([other[e15], other[e235]]))
                - (Simd32x2::from(self[e431]) * Simd32x2::from([other[e25], other[e315]]))
                - (Simd32x2::from(self[e412]) * Simd32x2::from([other[e35], other[e125]]))
                - (Simd32x2::from(self[e415]) * Simd32x2::from([other[e23], other[e415]]))
                - (Simd32x2::from(self[e425]) * Simd32x2::from([other[e31], other[e425]]))
                - (Simd32x2::from(self[e435]) * Simd32x2::from([other[e12], other[e435]]))
                - (Simd32x2::from(self[e235]) * Simd32x2::from([other[e41], other[e423]]))
                - (Simd32x2::from(self[e315]) * Simd32x2::from([other[e42], other[e431]]))
                - (Simd32x2::from(self[e125]) * Simd32x2::from([other[e43], other[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e425] * other[e3]) + (self[e321] * other[e415]) + (self[e235] * other[e4]) + (self[e2] * other[e435]),
                (self[e435] * other[e1]) + (self[e321] * other[e425]) + (self[e315] * other[e4]) + (self[e3] * other[e415]),
                (self[e435] * other[e321]) + (self[e321] * other[e435]) + (self[e125] * other[e4]) + (self[e1] * other[e425]),
                -(self[e415] * other[e423]) - (self[e425] * other[e431]) - (self[e435] * other[e412]) - (self[e321] * other[e4]),
            ]) + (Simd32x4::from(other[e12345]) * self.group3().xyz().with_w(self[e4]))
                + (Simd32x4::from([self[e315], self[e5], self[e5], self[e3]]) * other.group7().zyz().with_w(other[e412]))
                + (Simd32x4::from([self[e5], self[e125], self[e235], self[e2]]) * other.group7().xxy().with_w(other[e431]))
                + (other.group6().ww().with_zw(other[e2], other[e321]) * self.group1().xyx().with_w(self[e4]))
                + (self.group0().zxy() * other.group8().yzx()).with_w(self[e1] * other[e423])
                - (Simd32x4::from([other[e5], other[e5], other[e315], other[e1]]) * self.group0().xyx().with_w(self[e423]))
                - (other.group1().yzxz() * self.group1().zxy().with_w(self[e412]))
                - (other.group6().yzxz() * self.group3().zxy().with_w(self[e412]))
                - (other.group8().zx().with_zw(other[e5], other[e415]) * self.group0().yzz().with_w(self[e423]))
                - (other.group8() * self.group2().www()).with_w(self[e431] * other[e425])
                - (other.group7().yzx() * self.group2().zxy()).with_w(self[e431] * other[e2]),
            // e5
            (self[e321] * other[e5]) + (self[e235] * other[e1]) + (self[e315] * other[e2]) + (self[e125] * other[e3]) + (self[e5] * other[e12345])
                - (self[e415] * other[e235])
                - (self[e425] * other[e315])
                - (self[e435] * other[e125])
                - (self[e235] * other[e415])
                - (self[e315] * other[e425])
                - (self[e125] * other[e435])
                - (self[e1] * other[e235])
                - (self[e2] * other[e315])
                - (self[e3] * other[e125])
                - (self[e5] * other[e321]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e315] * other[e4125]) + (self[e1] * other[e3215]) + (self[e2] * other[e35]) + (self[e5] * other[e4235]),
                (self[e125] * other[e4235]) + (self[e2] * other[e3215]) + (self[e3] * other[e15]) + (self[e5] * other[e4315]),
                (self[e125] * other[e45]) + (self[e1] * other[e25]) + (self[e3] * other[e3215]) + (self[e5] * other[e4125]),
                -(self[e415] * other[e4235]) - (self[e425] * other[e4315]) - (self[e435] * other[e4125]) - (self[e5] * other[e1234]),
            ]) + (Simd32x4::from([self[e315], self[e5], self[e5], self[e125]]) * other.group5().zyz().with_w(other[e43]))
                + (Simd32x4::from([self[e5], self[e125], self[e235], self[e315]]) * other.group5().xxy().with_w(other[e42]))
                + (self.group2().xyxw() * other.group3().ww().with_zw(other[e4315], other[e3215]))
                + (self.group2().xyzx() * other.group0().xx().with_zw(other[scalar], other[e41]))
                + (other.group3().zx().with_zw(other[e3215], self[e2]) * self.group1().yzz().with_w(other[e31]))
                + (other.group9().ww().with_zw(other[e25], self[e1]) * self.group1().xyx().with_w(other[e23]))
                + (self.group1().www() * other.group3().xyz()).with_w(self[e3] * other[e12])
                - (other.group3().yzxx() * self.group1().zxy().with_w(self[e423]))
                - (other.group3().yzxz() * self.group3().zxy().with_w(self[e412]))
                - (other.group5().yzx() * self.group2().zxy()).with_w(self[e321] * other[scalar])
                - (self.group2().zxy() * other.group9().yzx()).with_w(self[e431] * other[e25]),
            // e41, e42, e43
            (Simd32x3::from(self[e4]) * other.group5())
                + (Simd32x3::from(other[scalar]) * self.group0())
                + (Simd32x3::from(other[e1234]) * self.group1().xyz())
                + (Simd32x3::from([self[e425], self[e1], self[e415]]) * other.group4().zzy())
                + (Simd32x3::from([self[e3], self[e435], self[e2]]) * other.group4().yxx())
                + (Simd32x3::from([other[e12], other[e4125], other[e31]]) * self.group0().yxx())
                + (Simd32x3::from([other[e4315], other[e23], other[e4235]]) * self.group0().zzy())
                - (Simd32x3::from(self[e423]) * Simd32x3::from([other[e45], other[e12], other[e4315]]))
                - (Simd32x3::from(self[e431]) * Simd32x3::from([other[e4125], other[e45], other[e23]]))
                - (Simd32x3::from(self[e412]) * Simd32x3::from([other[e31], other[e4235], other[e45]]))
                - (Simd32x3::from(self[e4]) * other.group9().xyz())
                - (Simd32x3::from(other[e41]) * Simd32x3::from([self[e321], self[e3], self[e425]]))
                - (Simd32x3::from(other[e42]) * Simd32x3::from([self[e435], self[e321], self[e1]]))
                - (Simd32x3::from(other[e43]) * Simd32x3::from([self[e2], self[e415], self[e321]]))
                - (Simd32x3::from(other[e1234]) * self.group3().xyz()),
            // e23, e31, e12
            (Simd32x3::from(self[e4]) * other.group3().xyz())
                + (Simd32x3::from(other[scalar]) * self.group1().xyz())
                + (Simd32x3::from(other[e1234]) * self.group2().xyz())
                + (Simd32x3::from([self[e315], self[e5], self[e5]]) * other.group4().zyz())
                + (Simd32x3::from([self[e5], self[e125], self[e235]]) * other.group4().xxy())
                + (Simd32x3::from([other[e35], other[e15], other[e3215]]) * self.group0().yzz())
                + (Simd32x3::from([other[e3215], other[e3215], other[e25]]) * self.group0().xyx())
                + (other.group5().zxy() * self.group1().yzx())
                + (self.group3().zxy() * other.group9().yzx())
                - (Simd32x3::from(self[e321]) * other.group9().xyz())
                - (Simd32x3::from([other[e45], other[e45], other[e4315]]) * self.group3().xyx())
                - (Simd32x3::from([other[e4125], other[e4235], other[e45]]) * self.group3().yzz())
                - (self.group0().zxy() * other.group3().yzx())
                - (other.group4().yzx() * self.group2().zxy())
                - (other.group5().yzx() * self.group1().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e425] * other[e435]) + (self[e321] * other[e1]) + (self[e235] * other[e4]) + (self[e4] * other[e235]) + (self[e1] * other[e321]) + (self[e2] * other[e3]),
                (self[e435] * other[e415]) + (self[e321] * other[e2]) + (self[e315] * other[e4]) + (self[e4] * other[e315]) + (self[e2] * other[e321]) + (self[e3] * other[e1]),
                (self[e415] * other[e425]) + (self[e321] * other[e3]) + (self[e125] * other[e4]) + (self[e4] * other[e125]) + (self[e1] * other[e2]) + (self[e3] * other[e321]),
                -(self[e425] * other[e2]) - (self[e435] * other[e3]) - (self[e4] * other[e5]) - (self[e1] * other[e415]) - (self[e2] * other[e425]) - (self[e3] * other[e435]),
            ]) + (Simd32x4::from(other[e12345]) * self.group1())
                + (Simd32x4::from([self[e315], self[e5], self[e5], other[e4]]) * other.group7().zyz().with_w(self[e5]))
                + (Simd32x4::from([self[e5], self[e125], self[e235], other[e125]]) * other.group7().xxy().with_w(self[e412]))
                + (Simd32x4::from([other[e5], other[e5], other[e315], other[e235]]) * self.group0().xyx().with_w(self[e423]))
                + (other.group8().zx().with_zw(other[e5], other[e315]) * self.group0().yzz().with_w(self[e431]))
                - (self.group2().zxyy() * other.group7().yzx().with_w(other[e431]))
                - (other.group1().yzxx() * self.group3().zxy().with_w(self[e415]))
                - (self.group0().zxy() * other.group8().yzx()).with_w(self[e235] * other[e423])
                - (self.group1().zxy() * other.group6().yzx()).with_w(self[e125] * other[e412]),
            // e423, e431, e412
            (Simd32x3::from(self[e4]) * other.group1().xyz())
                + (Simd32x3::from(self[e4]) * other.group6().xyz())
                + (Simd32x3::from(other[e12345]) * self.group0())
                + (Simd32x3::from(other[e4]) * self.group1().xyz())
                + (Simd32x3::from([self[e425], self[e1], self[e415]]) * other.group7().zzy())
                + (Simd32x3::from([self[e3], self[e435], self[e2]]) * other.group7().yxx())
                + (Simd32x3::from([other[e3], other[e1], other[e425]]) * self.group0().yzx())
                + (Simd32x3::from([other[e321], other[e321], other[e2]]) * self.group0().xyx())
                + (self.group0().yzz() * other.group6().zxw())
                - (Simd32x3::from(other[e4]) * self.group3().xyz())
                - (Simd32x3::from(other[e423]) * Simd32x3::from([self[e321], self[e3], self[e425]]))
                - (Simd32x3::from(other[e431]) * Simd32x3::from([self[e435], self[e321], self[e1]]))
                - (Simd32x3::from(other[e412]) * Simd32x3::from([self[e2], self[e415], self[e321]]))
                - (self.group0().zxy() * other.group1().yzx())
                - (self.group0().zxy() * other.group6().yzx()),
            // e235, e315, e125
            (Simd32x3::from(self[e5]) * other.group6().xyz())
                + (Simd32x3::from(other[e12345]) * self.group2().xyz())
                + (Simd32x3::from(other[e5]) * self.group1().xyz())
                + (Simd32x3::from(other[e5]) * self.group3().xyz())
                + (Simd32x3::from([self[e425], self[e3], self[e1]]) * other.group8().zxy())
                + (Simd32x3::from([self[e2], self[e321], self[e321]]) * other.group8().zyz())
                + (Simd32x3::from([other[e2], other[e415], other[e1]]) * self.group2().zzy())
                + (Simd32x3::from([other[e435], other[e3], other[e425]]) * self.group2().yxx())
                + (other.group8().xxy() * self.group1().wzx())
                - (Simd32x3::from(self[e235]) * Simd32x3::from([other[e321], other[e435], other[e2]]))
                - (Simd32x3::from(self[e315]) * Simd32x3::from([other[e3], other[e321], other[e415]]))
                - (Simd32x3::from(self[e125]) * Simd32x3::from([other[e425], other[e1], other[e321]]))
                - (Simd32x3::from(self[e5]) * other.group1().xyz())
                - (other.group8().yzx() * self.group1().zxy())
                - (other.group8().yzx() * self.group3().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e415] * other[e45]) + (self[e425] * other[e4125]) + (self[e4] * other[e15]) + (self[e3] * other[e31]),
                (self[e425] * other[e45]) + (self[e435] * other[e4235]) + (self[e4] * other[e25]) + (self[e1] * other[e12]),
                (self[e415] * other[e4315]) + (self[e435] * other[e45]) + (self[e4] * other[e35]) + (self[e2] * other[e23]),
                -(self[e125] * other[e4125]) - (self[e1] * other[e15]) - (self[e2] * other[e25]) - (self[e3] * other[e35]),
            ]) + (other.group3().zx().with_zw(other[e3215], other[e3215]) * self.group0().yzz().with_w(self[e321]))
                + (other.group9().ww().with_zw(other[e25], self[e5]) * self.group0().xyx().with_w(other[scalar]))
                + (other.group4().yzx() * self.group2().zxy()).with_w(self[e5] * other[e45])
                - (Simd32x4::from([self[e321], self[e3], self[e1], other[e25]]) * other.group5().xxy().with_w(self[e425]))
                - (Simd32x4::from([self[e315], self[e5], self[e5], other[e15]]) * other.group4().zyz().with_w(self[e415]))
                - (Simd32x4::from([self[e2], self[e321], self[e321], other[e35]]) * other.group5().zyz().with_w(self[e435]))
                - (Simd32x4::from([self[e5], self[e125], self[e235], self[e125]]) * other.group4().xxy().with_w(other[e12]))
                - (Simd32x4::from([other[e1234], other[e1234], other[e1234], other[e4315]]) * self.group2().xyzy())
                - (other.group9().yzxx() * self.group1().zxy().with_w(self[e235]))
                - (other.group0().xx().with_zw(other[scalar], other[e23]) * self.group3().xyz().with_w(self[e235]))
                - (self.group0().zxy() * other.group3().yzx()).with_w(self[e315] * other[e31]),
            // e1234
            (self[e423] * other[e4235])
                + (self[e431] * other[e4315])
                + (self[e412] * other[e4125])
                + (self[e4] * other[scalar])
                + (self[e1] * other[e41])
                + (self[e2] * other[e42])
                + (self[e3] * other[e43])
                - (self[e423] * other[e23])
                - (self[e431] * other[e31])
                - (self[e412] * other[e12])
                - (self[e415] * other[e41])
                - (self[e425] * other[e42])
                - (self[e435] * other[e43])
                - (self[e321] * other[e1234])
                - (self[e4] * other[e45]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       45       82        0
    //    simd3        0       10        0
    //    simd4       56       50        0
    // Totals...
    // yes simd      101      142        0
    //  no simd      269      312        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(self[e431] * other[e4125]) - (self[e4] * other[e4235]),
                -(self[e412] * other[e4235]) - (self[e4] * other[e4315]),
                -(self[e423] * other[e4315]) - (self[e4] * other[e4125]),
                (self[e1] * other[e4235]) + (self[e2] * other[e4315]) + (self[e3] * other[e4125]),
            ]) + (other.group0().yzxw() * self.group0().zxy().with_w(self[e4])),
            // e23, e31, e12, e45
            Simd32x4::from([self[e3] * other[e4315], self[e1] * other[e4125], self[e2] * other[e4235], self[e435] * other[e4125] * -1.0])
                + (Simd32x4::from(other[e3215]) * self.group0().with_w(self[e4]))
                - (self.group1().wwwx() * other.group0().xyzx())
                - (other.group0().zxyy() * self.group3().yzx().with_w(self[e425])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e5] * other[e4235]) - (self[e125] * other[e4315]),
                (self[e5] * other[e4315]) - (self[e235] * other[e4125]),
                (self[e5] * other[e4125]) - (self[e315] * other[e4235]),
                0.0,
            ]) + (other.group0().zxyy() * self.group2().yzx().with_w(self[e431]))
                + (other.group0().wwwx() * self.group1().xyz().with_w(self[e423]))
                + (other.group0().wwwz() * self.group3().xyz().with_w(self[e412])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e425] * other[e4125],
                self[e435] * other[e4235],
                self[e415] * other[e4315],
                -(self[e315] * other[e4315]) - (self[e125] * other[e4125]),
            ]) + (Simd32x4::from(other[e3215]) * self.group0().with_w(self[e321]))
                - (other.group0().yzxx() * self.group1().zxy().with_w(self[e235])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       79      130        0
    //    simd3        0       19        0
    //    simd4       51       35        0
    // Totals...
    // yes simd      130      184        0
    //  no simd      283      327        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([self[e4] * other[e1], self[e4] * other[e2], self[e4] * other[e3], self[e3] * other[e3] * -1.0])
                + (Simd32x4::from(other[e4]) * self.group1().xyz().with_w(self[e5]))
                + (self.group0().yzx() * other.group0().zxy()).with_w(self[e4] * other[e5])
                - (self.group3().xyzy() * other.group0().wwwy())
                - (other.group0().yzxx() * self.group0().zxy().with_w(self[e1])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e321] * other[e1]) + (self[e235] * other[e4]) + (self[e2] * other[e3]),
                (self[e321] * other[e2]) + (self[e315] * other[e4]) + (self[e3] * other[e1]),
                (self[e321] * other[e3]) + (self[e125] * other[e4]) + (self[e1] * other[e2]),
                -(self[e425] * other[e2]) - (self[e435] * other[e3]) - (self[e4] * other[e5]),
            ]) + (Simd32x4::from([other[e5], other[e5], other[e5], other[e4]]) * self.group0().with_w(self[e5]))
                - (other.group0().yzxx() * self.group3().zxy().with_w(self[e415])),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e315] * other[e3]) - (self[e5] * other[e1]),
                -(self[e125] * other[e1]) - (self[e5] * other[e2]),
                -(self[e235] * other[e2]) - (self[e5] * other[e3]),
                self[e125] * other[e3],
            ]) + (Simd32x4::from(other[e5]) * self.group1())
                + (Simd32x4::from([other[e5], other[e5], other[e5], other[e2]]) * self.group3().xyz().with_w(self[e315]))
                + (self.group2().zxyx() * other.group0().yzxx()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e425] * other[e3]) + (self[e235] * other[e4]),
                (self[e435] * other[e1]) + (self[e315] * other[e4]),
                (self[e415] * other[e2]) + (self[e125] * other[e4]),
                -(self[e412] * other[e3]) - (self[e321] * other[e4]),
            ]) - (Simd32x4::from([other[e5], other[e5], other[e5], other[e1]]) * self.group0().with_w(self[e423]))
                - (other.group0().yzxy() * self.group1().zxy().with_w(self[e431])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       29       61        0
    //    simd3        0       16        0
    //    simd4       45       38        0
    // Totals...
    // yes simd       74      115        0
    //  no simd      209      261        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(other[scalar]) * self.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other[scalar]) * self.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e1234
            Simd32x4::from(other[scalar]) * self.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[scalar]) * self.group3() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       48       86        0
    //    simd3        0       11        0
    //    simd4       59       52        0
    // Totals...
    // yes simd      107      149        0
    //  no simd      284      327        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(self[e431] * other[e4125]) - (self[e4] * other[e4235]) - (self[e1] * other[e1234]),
                -(self[e412] * other[e4235]) - (self[e4] * other[e4315]) - (self[e2] * other[e1234]),
                -(self[e423] * other[e4315]) - (self[e4] * other[e4125]) - (self[e3] * other[e1234]),
                (self[e2] * other[e4315]) + (self[e3] * other[e4125]) + (self[e5] * other[e1234]),
            ]) + (Simd32x4::from([other[e1234], other[e1234], other[e1234], other[e4235]]) * self.group1().xyz().with_w(self[e1]))
                + (other.group0().yzxw() * self.group0().zxy().with_w(self[e4])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e235] * other[e1234]) + (self[e3] * other[e4315]),
                (self[e315] * other[e1234]) + (self[e1] * other[e4125]),
                (self[e125] * other[e1234]) + (self[e2] * other[e4235]),
                -(self[e435] * other[e4125]) - (self[e5] * other[e1234]),
            ]) + (Simd32x4::from(other[e3215]) * self.group0().with_w(self[e4]))
                - (self.group1().wwwx() * other.group0().xyzx())
                - (other.group0().zxyy() * self.group3().yzx().with_w(self[e425])),
            // e15, e25, e35, e1234
            Simd32x4::from([self[e5] * other[e4235], self[e5] * other[e4315], self[e5] * other[e4125], 0.0])
                + (other.group0().zxyy() * self.group2().yzx().with_w(self[e431]))
                + (other.group0().wwwx() * self.group1().xyz().with_w(self[e423]))
                + (other.group0().wwwz() * self.group3().xyz().with_w(self[e412]))
                - (self.group2().zxy() * other.group0().yzx()).with_w(self[e321] * other[e1234]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e425] * other[e4125], self[e435] * other[e4235], self[e415] * other[e4315], self[e125] * other[e4125] * -1.0])
                + (Simd32x4::from(other[e3215]) * self.group0().with_w(self[e321]))
                - (Simd32x4::from([other[e1234], other[e1234], other[e1234], other[e4315]]) * self.group2().xyzy())
                - (other.group0().yzxx() * self.group1().zxy().with_w(self[e235])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for AntiDipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      128      195        0
    //    simd3        0       36        0
    //    simd4       80       47        0
    // Totals...
    // yes simd      208      278        0
    //  no simd      448      491        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e431] * other[e3]) + (self[e415] * other[e4]) + (self[e425] * other[e412]) + (self[e4] * other[e415]) + (self[e4] * other[e1]) + (self[e3] * other[e431]),
                (self[e412] * other[e1]) + (self[e425] * other[e4]) + (self[e435] * other[e423]) + (self[e4] * other[e425]) + (self[e4] * other[e2]) + (self[e1] * other[e412]),
                (self[e412] * other[e321]) + (self[e415] * other[e431]) + (self[e435] * other[e4]) + (self[e4] * other[e435]) + (self[e4] * other[e3]) + (self[e2] * other[e423]),
                -(self[e235] * other[e423]) - (self[e315] * other[e431]) - (self[e125] * other[e412]) - (self[e1] * other[e1]) - (self[e2] * other[e2]) - (self[e3] * other[e3]),
            ]) + (other.group0().ww().with_zw(other[e425], other[e321]) * self.group0().xyx().with_w(self[e321]))
                + (other.group1().zx().with_zw(other[e12345], other[e4]) * self.group0().yzz().with_w(self[e5]))
                + (other.group1().ww().with_zw(other[e2], other[e5]) * self.group0().xyx().with_w(self[e4]))
                - (self.group1().wwwx() * other.group0().xyz().with_w(other[e415]))
                - (other.group0().zx().with_zw(other[e4], other[e435]) * self.group3().yzz().with_w(self[e435]))
                - (other.group3().ww().with_zw(other[e431], other[e425]) * self.group3().xyx().with_w(self[e425]))
                - (self.group0().zxy() * other.group1().yzx()).with_w(self[e423] * other[e235])
                - (self.group0().zxy() * other.group3().yzx()).with_w(self[e431] * other[e315])
                - (self.group1().zxy() * other.group0().yzx()).with_w(self[e412] * other[e125]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e235] * other[e4]) + (self[e315] * other[e412]) + (self[e4] * other[e235]) + (self[e1] * other[e321]) + (self[e2] * other[e3]) + (self[e5] * other[e423]),
                (self[e315] * other[e4]) + (self[e125] * other[e423]) + (self[e4] * other[e315]) + (self[e2] * other[e321]) + (self[e3] * other[e1]) + (self[e5] * other[e431]),
                (self[e235] * other[e431]) + (self[e125] * other[e4]) + (self[e4] * other[e125]) + (self[e1] * other[e2]) + (self[e3] * other[e321]) + (self[e5] * other[e412]),
                -(self[e315] * other[e431]) - (self[e125] * other[e412]) - (self[e4] * other[e5]) - (self[e1] * other[e415]) - (self[e2] * other[e425]) - (self[e3] * other[e435]),
            ]) + (other.group3() * self.group1().www().with_w(self[e5]))
                + (self.group1().yzzw() * other.group1().zx().with_zw(other[e12345], other[e12345]))
                + (other.group2().zxwy() * self.group0().yzz().with_w(self[e431]))
                + (other.group2().wwyx() * self.group0().xyx().with_w(self[e423]))
                + (other.group0().ww().with_zw(other[e425], other[e125]) * self.group1().xyx().with_w(self[e412]))
                - (self.group1().zxyy() * other.group1().yzx().with_w(other[e2]))
                - (self.group0().zxy() * other.group2().yzx()).with_w(self[e415] * other[e1])
                - (self.group2().zxy() * other.group0().yzx()).with_w(self[e435] * other[e3])
                - (self.group3().zxy() * other.group3().yzx()).with_w(self[e235] * other[e423]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e125] * other[e2]) + (self[e1] * other[e5]) + (self[e2] * other[e125]) + (self[e5] * other[e415]),
                (self[e125] * other[e415]) + (self[e2] * other[e5]) + (self[e3] * other[e235]) + (self[e5] * other[e425]),
                (self[e125] * other[e12345]) + (self[e1] * other[e315]) + (self[e3] * other[e5]) + (self[e5] * other[e435]),
                -(self[e1] * other[e235]) - (self[e2] * other[e315]) - (self[e3] * other[e125]) - (self[e5] * other[e321]),
            ]) + (Simd32x4::from([other[e12345], other[e3], other[e425], other[e3]]) * self.group2().xxxz())
                + (Simd32x4::from([other[e435], other[e12345], other[e1], other[e12345]]) * self.group2().yyy().with_w(self[e5]))
                + (self.group1().xyxw() * other.group2().wwyw())
                + (self.group1().yzz() * other.group2().zxw()).with_w(self[e235] * other[e1])
                + (self.group1().www() * other.group2().xyz()).with_w(self[e315] * other[e2])
                - (Simd32x4::from([other[e425], other[e1], other[e321], other[e415]]) * self.group2().zzzx())
                - (Simd32x4::from([other[e3], other[e321], other[e415], other[e125]]) * self.group2().yyy().with_w(self[e435]))
                - (self.group1().zxyx() * other.group2().yzxx())
                - (other.group1().wz().with_zw(other[e2], other[e315]) * self.group2().xxx().with_w(self[e425]))
                - (self.group3().zxy() * other.group2().yzx()).with_w(self[e315] * other[e425])
                - (self.group3().www() * other.group3().xyz()).with_w(self[e125] * other[e435]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e315] * other[e412]) + (self[e1] * other[e12345]) + (self[e2] * other[e435]) + (self[e5] * other[e423]),
                (self[e125] * other[e423]) + (self[e2] * other[e12345]) + (self[e3] * other[e415]) + (self[e5] * other[e431]),
                (self[e125] * other[e4]) + (self[e1] * other[e425]) + (self[e3] * other[e12345]) + (self[e5] * other[e412]),
                -(self[e415] * other[e423]) - (self[e425] * other[e431]) - (self[e435] * other[e412]) - (self[e321] * other[e4]),
            ]) + (other.group1().ww().with_zw(other[e2], other[e321]) * self.group1().xyx().with_w(self[e4]))
                + (other.group3().zx().with_zw(other[e321], other[e423]) * self.group1().yzz().with_w(self[e1]))
                + (other.group3().ww().with_zw(other[e431], other[e412]) * self.group2().xyx().with_w(self[e3]))
                + (self.group0().zxy() * other.group2().yzx()).with_w(self[e4] * other[e12345])
                + (self.group1().www() * other.group1().xyz()).with_w(self[e2] * other[e431])
                - (self.group0().xyx() * other.group2().wwy()).with_w(self[e423] * other[e415])
                - (self.group0().yzz() * other.group2().zxw()).with_w(self[e423] * other[e1])
                - (self.group1().zxy() * other.group3().yzx()).with_w(self[e431] * other[e425])
                - (self.group2().zxy() * other.group0().yzx()).with_w(self[e431] * other[e2])
                - (self.group2().www() * other.group2().xyz()).with_w(self[e412] * other[e435])
                - (self.group3().zxy() * other.group1().yzx()).with_w(self[e412] * other[e3]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for AntiDipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       68      115        0
    //    simd3        0       20        0
    //    simd4       95       79        0
    // Totals...
    // yes simd      163      214        0
    //  no simd      448      491        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e4] * other[e23]) + (self[e3] * other[e42]),
                (self[e4] * other[e31]) + (self[e1] * other[e43]),
                (self[e4] * other[e12]) + (self[e2] * other[e41]),
                -(self[e315] * other[e42]) - (self[e125] * other[e43]),
            ]) + (Simd32x4::from([other[scalar], other[e4125], other[e31], other[e3215]]) * self.group0().xxx().with_w(self[e4]))
                + (Simd32x4::from([other[e12], other[scalar], other[e4235], other[e4235]]) * self.group0().yyy().with_w(self[e1]))
                + (Simd32x4::from([other[e4315], other[e23], other[scalar], other[e4315]]) * self.group0().zzz().with_w(self[e2]))
                + (other.group0().zx().with_zw(other[e1234], other[e1234]) * self.group1().yzz().with_w(self[e5]))
                + (other.group2().ww().with_zw(other[e42], other[e4125]) * self.group1().xyx().with_w(self[e3]))
                - (Simd32x4::from(self[e423]) * other.group1().wz().with_zw(other[e4315], other[e15]))
                - (Simd32x4::from(self[e431]) * Simd32x4::from([other[e4125], other[e45], other[e23], other[e25]]))
                - (Simd32x4::from(self[e412]) * Simd32x4::from([other[e31], other[e4235], other[e45], other[e35]]))
                - (self.group1().zxyx() * other.group0().yzx().with_w(other[e23]))
                - (self.group1().wwwy() * other.group0().xyz().with_w(other[e31]))
                - (other.group0().zx().with_zw(other[e1234], other[e41]) * self.group3().yzz().with_w(self[e235]))
                - (other.group2().ww().with_zw(other[e42], other[e45]) * self.group3().xyx().with_w(self[e321]))
                - (self.group2().www() * other.group3().xyz()).with_w(self[e435] * other[e12]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e3] * other[e4315]) + (self[e5] * other[e41]),
                (self[e1] * other[e4125]) + (self[e5] * other[e42]),
                (self[e2] * other[e4235]) + (self[e5] * other[e43]),
                -(self[e321] * other[scalar]) - (self[e5] * other[e1234]),
            ]) + (other.group0().zx().with_zw(other[e1234], other[e31]) * self.group2().yzz().with_w(self[e2]))
                + (other.group0().ww().with_zw(other[e31], other[e43]) * self.group1().xyx().with_w(self[e125]))
                + (other.group1().zx().with_zw(other[scalar], other[e3215]) * self.group1().yzz().with_w(self[e4]))
                + (other.group2().zx().with_zw(other[e3215], other[e42]) * self.group0().yzz().with_w(self[e315]))
                + (other.group2().ww().with_zw(other[e42], other[e23]) * self.group2().xyx().with_w(self[e1]))
                + (other.group3().ww().with_zw(other[e25], other[e41]) * self.group0().xyx().with_w(self[e235]))
                + (self.group2().www() * other.group2().xyz()).with_w(self[e3] * other[e12])
                - (other.group2().yzxx() * self.group0().zxy().with_w(self[e423]))
                - (other.group1().ww().with_zw(other[e4315], other[e4315]) * self.group3().xyx().with_w(self[e425]))
                - (other.group3().zx().with_zw(other[e45], other[e4125]) * self.group3().yzz().with_w(self[e435]))
                - (self.group1().zxy() * other.group1().yzx()).with_w(self[e431] * other[e25])
                - (self.group1().www() * other.group3().xyz()).with_w(self[e412] * other[e35])
                - (self.group2().zxy() * other.group0().yzx()).with_w(self[e415] * other[e4235]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e1] * other[e3215]) + (self[e2] * other[e35]) + (self[e5] * other[e23]) + (self[e5] * other[e4235]),
                (self[e2] * other[e3215]) + (self[e3] * other[e15]) + (self[e5] * other[e31]) + (self[e5] * other[e4315]),
                (self[e1] * other[e25]) + (self[e3] * other[e3215]) + (self[e5] * other[e12]) + (self[e5] * other[e4125]),
                -(self[e425] * other[e42]) - (self[e435] * other[e43]) - (self[e321] * other[e1234]) - (self[e4] * other[e45]),
            ]) + (self.group2().xyxw() * other.group0().ww().with_zw(other[e31], other[scalar]))
                + (other.group1().zx().with_zw(other[scalar], other[e42]) * self.group2().yzz().with_w(self[e2]))
                + (other.group1().ww().with_zw(other[e4315], other[e41]) * self.group2().xyx().with_w(self[e1]))
                + (other.group2().zx().with_zw(other[e3215], other[e4315]) * self.group1().yzz().with_w(self[e431]))
                + (other.group3().zx().with_zw(other[e45], other[e43]) * self.group2().yzz().with_w(self[e3]))
                + (other.group3().ww().with_zw(other[e25], other[e4235]) * self.group1().xyx().with_w(self[e423]))
                + (self.group1().www() * other.group2().xyz()).with_w(self[e412] * other[e4125])
                - (other.group1().yzxy() * self.group2().zxy().with_w(self[e431]))
                - (self.group1().zxy() * other.group2().yzx()).with_w(self[e423] * other[e23])
                - (self.group2().zxy() * other.group3().yzx()).with_w(self[e412] * other[e12])
                - (self.group3().zxy() * other.group2().yzx()).with_w(self[e415] * other[e41]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e425] * other[e4125]) + (self[e125] * other[e42]) + (self[e4] * other[e15]) + (self[e3] * other[e31]),
                (self[e435] * other[e4235]) + (self[e235] * other[e43]) + (self[e4] * other[e25]) + (self[e1] * other[e12]),
                (self[e435] * other[e45]) + (self[e315] * other[e41]) + (self[e4] * other[e35]) + (self[e2] * other[e23]),
                -(self[e125] * other[e4125]) - (self[e1] * other[e15]) - (self[e2] * other[e25]) - (self[e3] * other[e35]),
            ]) + (other.group1().ww().with_zw(other[e4315], other[e45]) * self.group1().xyx().with_w(self[e5]))
                + (other.group2().zx().with_zw(other[e3215], other[scalar]) * self.group0().yzz().with_w(self[e5]))
                + (other.group3().ww().with_zw(other[e25], other[e3215]) * self.group0().xyx().with_w(self[e321]))
                - (self.group1().zxyy() * other.group3().yzx().with_w(other[e25]))
                - (self.group1().wwwz() * other.group1().xyz().with_w(other[e35]))
                - (self.group2().xyxx() * other.group2().ww().with_zw(other[e42], other[e23]))
                - (self.group2().yzzx() * other.group0().zx().with_zw(other[e1234], other[e4235]))
                - (other.group2().yzxx() * self.group0().zxy().with_w(self[e415]))
                - (other.group0().ww().with_zw(other[e31], other[e31]) * self.group3().xyx().with_w(self[e315]))
                - (other.group1().zx().with_zw(other[scalar], other[e4315]) * self.group3().yzz().with_w(self[e315]))
                - (self.group3().www() * other.group0().xyz()).with_w(self[e125] * other[e12]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl std::ops::Div<anti_sandwich> for AntiDualNum {
    type Output = anti_sandwich_partial<AntiDualNum>;
    fn div(self, _rhs: anti_sandwich) -> Self::Output {
        anti_sandwich_partial(self)
    }
}
impl AntiSandwich<AntiCircleRotor> for AntiDualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2       17        0
    //    simd3        3        5        0
    //    simd4        3       10        0
    // Totals...
    // yes simd        8       32        0
    //  no simd       23       72        0
    fn anti_sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(self[scalar]) * other.group0().with_w(other[scalar]) * Simd32x4::from(-1.0),
            // e415, e425, e435, e321
            (-(Simd32x3::from(self[e3215]) * other.group0()) - (Simd32x3::from(self[scalar]) * other.group1().xyz())).with_w(other[e45] * self[scalar]),
            // e235, e315, e125, e5
            -(Simd32x4::from(self[e3215]) * other.group1()) - (other.group2() * self.group0().yy().with_zw(self[scalar], self[e3215])),
            // e1, e2, e3, e4
            self.group0().xx().with_zw(self[e3215], 0.0) * Simd32x3::from(1.0).with_w(0.0) * other.group0().with_w(0.0) * Simd32x4::from([-1.0, -1.0, -1.0, 0.0]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDipoleInversion> for AntiDualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       28        0
    //    simd3        3        5        0
    //    simd4        3        7        0
    // Totals...
    // yes simd       15       40        0
    //  no simd       30       71        0
    fn anti_sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            self.group0().yy().with_zw(self[scalar], self[e3215]) * other.group0().with_w(other[e4]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e423] * self[e3215]) + (other[e415] * self[scalar]),
                (other[e431] * self[e3215]) + (other[e425] * self[scalar]),
                (other[e412] * self[e3215]) + (other[e435] * self[scalar]),
                -(other[e321] * self[scalar]) - (other[e4] * self[e3215]),
            ]),
            // e15, e25, e35, e1234
            ((Simd32x3::from(self[e3215]) * other.group1().xyz()) + (Simd32x3::from(self[scalar]) * other.group2().xyz()) - (Simd32x3::from(self[e3215]) * other.group3().xyz()))
                .with_w(other[e4] * self[scalar]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e1] * self[scalar] * -1.0,
                other[e2] * self[scalar] * -1.0,
                other[e3] * self[scalar] * -1.0,
                other[e5] * self[scalar],
            ]) - (Simd32x4::from(self[e3215]) * other.group0().with_w(other[e321])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum> for AntiDualNum {
    type Output = AntiDualNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd2        0        1        0
    // Totals...
    // yes simd        2        7        0
    //  no simd        2        8        0
    fn anti_sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return DualNum::from_groups(
            // e5, e12345
            Simd32x2::from([-(other[e3215] * self[scalar]) - (other[scalar] * self[e3215]), other[scalar] * self[scalar]]) * Simd32x2::from([1.0, -1.0]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlatPoint> for AntiDualNum {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd3        1        2        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        2       10        0
    //  no simd        4       23        0
    fn anti_sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(self[scalar]) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            Simd32x3::from(0.0).with_w(self[e3215] * other[e321] * -1.0),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlector> for AntiDualNum {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        7        0
    //    simd3        2        4        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        4       14        0
    //  no simd        8       31        0
    fn anti_sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            ((Simd32x3::from(self[scalar]) * other.group0().xyz()) - (Simd32x3::from(self[e3215]) * other.group1().xyz())).with_w(self[scalar] * other[e321] * -1.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([other[e1], other[e2], other[e3], 1.0])
                * self.group0().yy().with_zw(self[scalar], (self[scalar] * other[e5]) - (self[e3215] * other[e321]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiLine> for AntiDualNum {
    type Output = AntiLine;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        2        7        0
    // no simd        6       21        0
    fn anti_sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(self[scalar]) * other.group0() * Simd32x3::from(-1.0),
            // e235, e315, e125
            -(Simd32x3::from(self[e3215]) * other.group0()) - (Simd32x3::from(self[scalar]) * other.group1()),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiMotor> for AntiDualNum {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        2        7        0
    // no simd        8       28        0
    fn anti_sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(self[scalar]) * other.group0() * Simd32x4::from(-1.0),
            // e235, e315, e125, e5
            -(Simd32x4::from(self[e3215]) * other.group0()) - (Simd32x4::from(self[scalar]) * other.group1()),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiPlane> for AntiDualNum {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        3        0
    //    simd3        1        2        0
    //    simd4        0        6        0
    // Totals...
    // yes simd        2       11        0
    //  no simd        4       33        0
    fn anti_sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            self.group0().xx().with_zw(self[e3215], 0.0) * Simd32x3::from(1.0).with_w(0.0) * other.group0().xyz().with_w(0.0) * Simd32x4::from([-1.0, -1.0, -1.0, 0.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[scalar]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiScalar> for AntiDualNum {
    type Output = DualNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        3        0
    //    simd2        0        2        0
    // Totals...
    // yes simd        1        5        0
    //  no simd        1        7        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiDualNum::from_groups(/* e3215, scalar */ Simd32x2::from(other[e12345]) * self.group0()).geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for AntiDualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       18        0
    //    simd3        3        7        0
    //    simd4        2        6        0
    // Totals...
    // yes simd        9       31        0
    //  no simd       21       63        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[scalar]) * other.group0(),
            // e23, e31, e12, e45
            ((Simd32x3::from(self[e3215]) * other.group0()) + (Simd32x3::from(self[scalar]) * other.group1().xyz())).with_w(self[scalar] * other[e321] * -1.0),
            // e15, e25, e35, e1234
            ((Simd32x3::from(self[e3215]) * other.group1().xyz()) + (Simd32x3::from(self[scalar]) * other.group2())).with_w(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e3215]) * other.group0().with_w(other[e321]) * Simd32x4::from(-1.0),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for AntiDualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       16        0
    //    simd3        3        6        0
    //    simd4        2        8        0
    // Totals...
    // yes simd       11       30        0
    //  no simd       23       66        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(self[scalar]) * other.group0().with_w(other[e12345]),
            // e23, e31, e12, e45
            ((Simd32x3::from(self[e3215]) * other.group0()) + (Simd32x3::from(self[scalar]) * other.group1().xyz())).with_w(self[scalar] * other[e321] * -1.0),
            // e15, e25, e35, e1234
            ((Simd32x3::from(self[e3215]) * other.group1().xyz()) + (Simd32x3::from(self[scalar]) * other.group2().xyz())).with_w(0.0),
            // e4235, e4315, e4125, e3215
            self.group0().xx().with_zw(self[e3215], (self[e3215] * other[e12345]) - (self[e3215] * other[e321]))
                * other.group0().with_w(1.0)
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for AntiDualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0       14        0
    //    simd3        4        9        0
    //    simd4        2        5        0
    // Totals...
    // yes simd        6       28        0
    //  no simd       20       61        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[scalar]) * other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            (-(Simd32x3::from(self[e3215]) * other.group0()) - (Simd32x3::from(self[scalar]) * other.group1().xyz())).with_w(self[scalar] * other[e45]),
            // e235, e315, e125, e4
            (-(Simd32x3::from(self[e3215]) * other.group1().xyz()) - (Simd32x3::from(self[scalar]) * other.group2())).with_w(0.0),
            // e1, e2, e3, e5
            Simd32x4::from(self[e3215]) * other.group0().with_w(other[e45]) * Simd32x4::from(-1.0),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for AntiDualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2       31        0
    //    simd3        3        5        0
    //    simd4        5        8        0
    // Totals...
    // yes simd       10       44        0
    //  no simd       31       78        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            self.group0().yy().with_zw(self[scalar], self[e3215]) * other.group0().with_w(other[e1234]) * Simd32x4::from(-1.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[scalar] * other[e23] * -1.0,
                self[scalar] * other[e31] * -1.0,
                self[scalar] * other[e12] * -1.0,
                self[scalar] * other[e45],
            ]) - (Simd32x4::from(self[e3215]) * other.group0().with_w(other[e1234])),
            // e235, e315, e125, e5
            Simd32x4::from([self[scalar] * other[e15] * -1.0, self[scalar] * other[e25] * -1.0, self[scalar] * other[e35] * -1.0, 0.0])
                - (Simd32x4::from(self[e3215]) * other.group1())
                - (other.group3() * self.group0().xx().with_zw(self[e3215], self[scalar])),
            // e1, e2, e3, e4
            ((Simd32x3::from(self[scalar]) * other.group3().xyz()) - (Simd32x3::from(self[e3215]) * other.group0())).with_w(self[scalar] * other[e1234] * -1.0),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum> for AntiDualNum {
    type Output = DualNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd2        0        1        0
    // Totals...
    // yes simd        2        7        0
    //  no simd        2        8        0
    fn anti_sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return AntiDualNum::from_groups(
            // e3215, scalar
            Simd32x2::from([(self[e3215] * other[e12345]) + (self[scalar] * other[e5]), self[scalar] * other[e12345]]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for AntiDualNum {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        6        0
    //    simd3        1        2        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        2       12        0
    //  no simd        4       28        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(self[scalar]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            Simd32x3::from(0.0).with_w(self[e3215] * other[e45] * -1.0),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for AntiDualNum {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        7        0
    //    simd3        2        4        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        4       14        0
    //  no simd        8       31        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            (-(Simd32x3::from(self[e3215]) * other.group1().xyz()) - (Simd32x3::from(self[scalar]) * other.group0().xyz())).with_w(self[scalar] * other[e45]),
            // e1, e2, e3, e5
            Simd32x4::from([other[e4235], other[e4315], other[e4125], 1.0]) * self.group0().yy().with_zw(self[scalar], -(self[e3215] * other[e45]) - (self[scalar] * other[e3215])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for AntiDualNum {
    type Output = Line;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        2        7        0
    // no simd        6       21        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(self[scalar]) * other.group0(),
            // e15, e25, e35
            (Simd32x3::from(self[e3215]) * other.group0()) + (Simd32x3::from(self[scalar]) * other.group1()),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for AntiDualNum {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        2        7        0
    // no simd        8       28        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(self[scalar]) * other.group0(),
            // e15, e25, e35, e3215
            (Simd32x4::from(self[e3215]) * other.group0()) + (Simd32x4::from(self[scalar]) * other.group1()),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for AntiDualNum {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       67        0
    //    simd3        8       20        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       33       92        0
    //  no simd       64      147        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[e3215] * other[e4]) + (self[scalar] * other[e12345]),
                -(self[e3215] * other[e1234]) - (self[scalar] * other[scalar]),
            ]),
            // e1, e2, e3, e4
            ((Simd32x3::from(self[scalar]) * other.group9().xyz()) - (Simd32x3::from(self[e3215]) * other.group4())).with_w(self[scalar] * other[e1234] * -1.0),
            // e5
            -(self[e3215] * other[scalar]) - (self[e3215] * other[e45]) - (self[scalar] * other[e3215]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e3215] * other[e415]) + (self[scalar] * other[e235]),
                (self[e3215] * other[e425]) + (self[scalar] * other[e315]),
                (self[e3215] * other[e435]) + (self[scalar] * other[e125]),
                self[scalar] * other[e321] * -1.0,
            ]) - (Simd32x4::from(self[e3215]) * other.group1()),
            // e41, e42, e43
            Simd32x3::from(self[scalar]) * other.group7(),
            // e23, e31, e12
            (Simd32x3::from(self[e3215]) * other.group7()) + (Simd32x3::from(self[scalar]) * other.group6().xyz()),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[scalar] * other[e23] * -1.0,
                self[scalar] * other[e31] * -1.0,
                self[scalar] * other[e12] * -1.0,
                self[scalar] * other[e45],
            ]) - (Simd32x4::from(self[e3215]) * other.group4().with_w(other[e1234])),
            // e423, e431, e412
            Simd32x3::from(self[scalar]) * other.group4() * Simd32x3::from(-1.0),
            // e235, e315, e125
            -(Simd32x3::from(self[e3215]) * other.group5()) - (Simd32x3::from(self[e3215]) * other.group9().xyz()) - (Simd32x3::from(self[scalar]) * other.group3().xyz()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[scalar] * other[e1] * -1.0,
                self[scalar] * other[e2] * -1.0,
                self[scalar] * other[e3] * -1.0,
                (self[e3215] * other[e12345]) + (self[scalar] * other[e5]),
            ]) - (Simd32x4::from(self[e3215]) * other.group7().with_w(other[e321])),
            // e1234
            self[scalar] * other[e4],
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for AntiDualNum {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        4        0
    //    simd3        1        2        0
    //    simd4        0        7        0
    // Totals...
    // yes simd        2       13        0
    //  no simd        4       38        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            self.group0().xx().with_zw(self[e3215], 0.0) * Simd32x3::from(1.0).with_w(0.0) * other.group0().xyz().with_w(0.0) * Simd32x4::from([-1.0, -1.0, -1.0, 0.0]),
            // e1, e2, e3, e5
            Simd32x4::from(self[scalar]) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for AntiDualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       15        0
    //    simd3        1        2        0
    //    simd4        2        9        0
    // Totals...
    // yes simd        8       26        0
    //  no simd       16       57        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x3::from(0.0).with_w(self[e3215] * other[e4]),
            // e23, e31, e12, e45
            Simd32x3::from(0.0).with_w(self[e3215] * other[e4] * -1.0),
            // e15, e25, e35, e1234
            other.group0() * self.group0().xx().with_zw(self[e3215], self[scalar]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[scalar]) * other.group0().xyz().with_w(other[e5]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for AntiDualNum {
    type Output = AntiDualNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        3        0
    //    simd2        0        2        0
    // Totals...
    // yes simd        1        5        0
    //  no simd        1        7        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return DualNum::from_groups(/* e5, e12345 */ Simd32x2::from(other[scalar]) * self.group0() * Simd32x2::from(-1.0)).geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for AntiDualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2       20        0
    //    simd3        2        3        0
    //    simd4        2        7        0
    // Totals...
    // yes simd        6       30        0
    //  no simd       16       57        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x3::from(0.0).with_w(self[e3215] * other[e1234] * -1.0),
            // e415, e425, e435, e321
            Simd32x3::from(0.0).with_w(self[e3215] * other[e1234] * -1.0),
            // e235, e315, e125, e5
            other.group0() * self.group0().xx().with_zw(self[e3215], self[scalar]) * Simd32x4::from(-1.0),
            // e1, e2, e3, e4
            Simd32x4::from(self[scalar]) * other.group0().xyz().with_w(other[e1234]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for AntiDualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       31        0
    //    simd3        3        5        0
    //    simd4        3        7        0
    // Totals...
    // yes simd       17       43        0
    //  no simd       32       74        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([other[e423], other[e431], other[e412], 1.0]) * self.group0().yy().with_zw(self[scalar], (self[e3215] * other[e4]) + (self[scalar] * other[e12345])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e3215] * other[e423]) + (self[scalar] * other[e415]),
                (self[e3215] * other[e431]) + (self[scalar] * other[e425]),
                (self[e3215] * other[e412]) + (self[scalar] * other[e435]),
                -(self[e3215] * other[e4]) - (self[scalar] * other[e321]),
            ]),
            // e15, e25, e35, e1234
            ((Simd32x3::from(self[e3215]) * other.group1().xyz()) + (Simd32x3::from(self[scalar]) * other.group2().xyz()) - (Simd32x3::from(self[e3215]) * other.group3().xyz()))
                .with_w(self[scalar] * other[e4]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[scalar] * other[e1] * -1.0,
                self[scalar] * other[e2] * -1.0,
                self[scalar] * other[e3] * -1.0,
                (self[e3215] * other[e12345]) + (self[scalar] * other[e5]),
            ]) - (Simd32x4::from(self[e3215]) * other.group0().xyz().with_w(other[e321])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for AntiDualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       27        0
    //    simd3        3        5        0
    //    simd4        5        9        0
    // Totals...
    // yes simd       11       41        0
    //  no simd       32       78        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([other[e41], other[e42], other[e43], 1.0])
                * self.group0().yy().with_zw(self[scalar], -(self[e3215] * other[e1234]) - (self[scalar] * other[scalar]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[scalar] * other[e23] * -1.0,
                self[scalar] * other[e31] * -1.0,
                self[scalar] * other[e12] * -1.0,
                self[scalar] * other[e45],
            ]) - (Simd32x4::from(self[e3215]) * other.group0().xyz().with_w(other[e1234])),
            // e235, e315, e125, e5
            -(Simd32x4::from(self[e3215]) * other.group1().xyz().with_w(other[scalar]))
                - (Simd32x4::from(self[e3215]) * other.group3().xyz().with_w(other[e45]))
                - (Simd32x4::from(self[scalar]) * other.group2().xyz().with_w(other[e3215])),
            // e1, e2, e3, e4
            ((Simd32x3::from(self[scalar]) * other.group3().xyz()) - (Simd32x3::from(self[e3215]) * other.group0().xyz())).with_w(self[scalar] * other[e1234] * -1.0),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl std::ops::Div<anti_sandwich> for AntiFlatPoint {
    type Output = anti_sandwich_partial<AntiFlatPoint>;
    fn div(self, _rhs: anti_sandwich) -> Self::Output {
        anti_sandwich_partial(self)
    }
}
impl AntiSandwich<AntiCircleRotor> for AntiFlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       27        0
    //    simd3        6       12        0
    //    simd4       14       14        0
    // Totals...
    // yes simd       33       53        0
    //  no simd       87      119        0
    fn anti_sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([self[e321], self[e321], self[e321], 1.0])
                * other
                    .group0()
                    .with_w(-(other[e41] * self[e235]) - (other[e42] * self[e315]) - (other[e43] * self[e125]) - (other[e45] * self[e321]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            (self.group0().yzxx() * other.group0().zxy().with_w(other[e41])) + Simd32x3::from(0.0).with_w((other[e42] * self[e315]) + (other[e43] * self[e125]))
                - (self.group0().zxyw() * other.group0().yzx().with_w(other[scalar])),
            // e15, e25, e35, e1234
            (Simd32x3::from(other[e45]) * self.group0().xyz()).with_w(0.0)
                + (Simd32x3::from(other[scalar]) * self.group0().xyz()).with_w(0.0)
                + (Simd32x3::from(self[e321]) * other.group2().xyz()).with_w(0.0)
                + (other.group1().zxy() * self.group0().yzx()).with_w(0.0)
                - (other.group1().yzx() * self.group0().zxy()).with_w(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([other[e42] * self[e125], other[e43] * self[e235], other[e41] * self[e315], other[e12] * self[e125] * -1.0])
                - (other.group1().xyzy() * self.group0().wwwy())
                - (self.group0().yzxx() * other.group0().zxy().with_w(other[e23])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDipoleInversion> for AntiFlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       25       46        0
    //    simd3        6        8        0
    //    simd4       13       17        0
    // Totals...
    // yes simd       44       71        0
    //  no simd       95      138        0
    fn anti_sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([self[e321], self[e321], self[e321], 1.0])
                * other
                    .group0()
                    .with_w((other[e321] * self[e321]) - (other[e423] * self[e235]) - (other[e431] * self[e315]) - (other[e412] * self[e125]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e4] * self[e235]) + (other[e1] * self[e321]),
                (other[e423] * self[e125]) + (other[e4] * self[e315]) + (other[e2] * self[e321]),
                (other[e431] * self[e235]) + (other[e4] * self[e125]) + (other[e3] * self[e321]),
                -(other[e431] * self[e315]) - (other[e412] * self[e125]),
            ]) - (self.group0().zxyx() * other.group0().yzx().with_w(other[e423])),
            // e235, e315, e125, e5
            (other.group3().yzxz() * self.group0().zxyz())
                + (self.group0().yzxx() * other.group1().zxy().with_w(other[e1]))
                + (self.group0().wwwy() * other.group2().xyz().with_w(other[e2]))
                + Simd32x3::from(0.0).with_w(other[e5] * self[e321])
                - (other.group1().yzxx() * self.group0().zxyx())
                - (other.group1().wwwy() * self.group0().xyzy())
                - (self.group0().yzxz() * other.group3().zxy().with_w(other[e435])),
            // e1, e2, e3, e4
            ((Simd32x3::from(other[e4]) * self.group0().xyz()) + (Simd32x3::from(self[e321]) * other.group1().xyz()) + (other.group0().zxy() * self.group0().yzx())
                - (other.group0().yzx() * self.group0().zxy()))
            .with_w(other[e4] * self[e321] * -1.0),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum> for AntiFlatPoint {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        9        0
    //    simd4        2        7        0
    // Totals...
    // yes simd        6       16        0
    //  no simd       12       37        0
    fn anti_sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(other[scalar]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            Simd32x3::from(0.0).with_w(other[e3215] * self[e321]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlatPoint> for AntiFlatPoint {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        6        0
    //    simd3        4        6        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        7       14        0
    //  no simd       15       32        0
    fn anti_sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x3::from(0.0).with_w(other[e321] * self[e321]),
            // e235, e315, e125, e5
            ((Simd32x3::from(self[e321]) * other.group0().xyz()) - (Simd32x3::from(other[e321]) * self.group0().xyz())).with_w(0.0),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlector> for AntiFlatPoint {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       13        0
    //    simd3        3        4        0
    //    simd4        2        5        0
    // Totals...
    // yes simd       12       22        0
    //  no simd       24       45        0
    fn anti_sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(self[e321]) * other.group1().xyz().with_w(other[e321]),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e235] * other[e321]) - (self[e315] * other[e3]),
                -(self[e315] * other[e321]) - (self[e125] * other[e1]),
                -(self[e235] * other[e2]) - (self[e125] * other[e321]),
                (self[e125] * other[e3]) + (self[e321] * other[e5]),
            ]) + (self.group0().zxyx() * other.group1().yzxx())
                + (self.group0().wwwy() * other.group0().xyz().with_w(other[e2])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiLine> for AntiFlatPoint {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       11        0
    //    simd3        0        3        0
    //    simd4        4        7        0
    // Totals...
    // yes simd       10       21        0
    //  no simd       22       48        0
    fn anti_sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x3::from(self[e321]) * other.group1()).with_w(0.0) + (other.group0().zxy() * self.group0().yzx()).with_w(0.0)
                - (other.group0().yzx() * self.group0().zxy()).with_w(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e321], self[e321], self[e321], 1.0])
                * other.group0().with_w(-(self[e235] * other[e23]) - (self[e315] * other[e31]) - (self[e125] * other[e12]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiMotor> for AntiFlatPoint {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       14        0
    //    simd3        3        4        0
    //    simd4        2        7        0
    // Totals...
    // yes simd       12       25        0
    //  no simd       24       54        0
    fn anti_sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            ((Simd32x3::from(self[e321]) * other.group1().xyz()) + (self.group0().xyx() * other.group0().wwy()) + (self.group0().yzz() * other.group0().zxw())
                - (self.group0().zxy() * other.group0().yzx()))
            .with_w(self[e321] * other[scalar] * -1.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([other[e23], other[e31], other[e12], 1.0])
                * self
                    .group0()
                    .www()
                    .with_w((self[e321] * other[e3215]) - (self[e235] * other[e23]) - (self[e315] * other[e31]) - (self[e125] * other[e12]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiPlane> for AntiFlatPoint {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       14        0
    //    simd3        3        4        0
    //    simd4        1        6        0
    // Totals...
    // yes simd        9       24        0
    //  no simd       18       50        0
    fn anti_sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x3::from(1.0).with_w(0.0) * self.group0().www().with_w(0.0) * other.group0().xyz().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
            // e235, e315, e125, e5
            Simd32x4::from([
                self[e315] * other[e3] * -1.0,
                self[e125] * other[e1] * -1.0,
                self[e235] * other[e2] * -1.0,
                (self[e315] * other[e2]) + (self[e125] * other[e3]) + (self[e321] * other[e5]),
            ]) + (self.group0().zxyx() * other.group0().yzxx()),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiScalar> for AntiFlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        1        0
    //    simd3        1        2        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        1        5        0
    //  no simd        3       15        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiFlatPoint::from_groups(/* e235, e315, e125, e321 */ Simd32x4::from(other[e12345]) * self.group0()).geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for AntiFlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       22       45        0
    //    simd3        3        7        0
    //    simd4       11       13        0
    // Totals...
    // yes simd       36       65        0
    //  no simd       75      118        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([self[e321], self[e321], self[e321], 1.0])
                * other
                    .group0()
                    .with_w((self[e321] * other[e321]) - (self[e235] * other[e423]) - (self[e315] * other[e431]) - (self[e125] * other[e412]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e315] * other[e412],
                self[e125] * other[e423],
                self[e235] * other[e431],
                -(self[e315] * other[e431]) - (self[e125] * other[e412]),
            ]) - (self.group0().zxyx() * other.group0().yzx().with_w(other[e423])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e315] * other[e435]) + (self[e321] * other[e235]),
                (self[e125] * other[e415]) + (self[e321] * other[e315]),
                (self[e235] * other[e425]) + (self[e321] * other[e125]),
                self[e125] * other[e435] * -1.0,
            ]) - (self.group0().xxyx() * other.group1().wzxx())
                - (self.group0().zyzy() * other.group1().ywwy()),
            // e1, e2, e3, e4
            (Simd32x3::from(self[e321]) * other.group1().xyz()).with_w(0.0) + (other.group0().zxy() * self.group0().yzx()).with_w(0.0)
                - (other.group0().yzx() * self.group0().zxy()).with_w(0.0),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for AntiFlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       25       46        0
    //    simd3        3        8        0
    //    simd4       12       13        0
    // Totals...
    // yes simd       40       67        0
    //  no simd       82      122        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([self[e321], self[e321], self[e321], 1.0])
                * other
                    .group0()
                    .with_w((self[e321] * other[e321]) - (self[e235] * other[e423]) - (self[e315] * other[e431]) - (self[e125] * other[e412]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            Simd32x3::from(0.0).with_w(-(self[e315] * other[e431]) - (self[e125] * other[e412])) + (other.group0().zxy() * self.group0().yzx()).with_w(self[e321] * other[e12345])
                - (self.group0().zxyx() * other.group0().yzx().with_w(other[e423])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e235] * other[e12345]) + (self[e315] * other[e435]) + (self[e321] * other[e235]),
                (self[e315] * other[e12345]) + (self[e125] * other[e415]) + (self[e321] * other[e315]),
                (self[e235] * other[e425]) + (self[e125] * other[e12345]) + (self[e321] * other[e125]),
                self[e125] * other[e435] * -1.0,
            ]) - (self.group0().xxyx() * other.group1().wzxx())
                - (self.group0().zyzy() * other.group1().ywwy()),
            // e1, e2, e3, e4
            (Simd32x3::from(self[e321]) * other.group1().xyz()).with_w(0.0) + (other.group0().zxy() * self.group0().yzx()).with_w(0.0)
                - (other.group0().yzx() * self.group0().zxy()).with_w(0.0),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for AntiFlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       34        0
    //    simd3        6       12        0
    //    simd4       12       12        0
    // Totals...
    // yes simd       31       58        0
    //  no simd       79      118        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([self[e321], self[e321], self[e321], 1.0])
                * other
                    .group0()
                    .with_w(-(self[e235] * other[e41]) - (self[e315] * other[e42]) - (self[e125] * other[e43]) - (self[e321] * other[e45]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            Simd32x4::from([
                self[e125] * other[e42] * -1.0,
                self[e235] * other[e43] * -1.0,
                self[e315] * other[e41] * -1.0,
                (self[e315] * other[e42]) + (self[e125] * other[e43]),
            ]) + (self.group0().yzxx() * other.group0().zxy().with_w(other[e41])),
            // e15, e25, e35, e1234
            (Simd32x3::from(self[e321]) * other.group2()).with_w(0.0)
                + (self.group0().xyx() * other.group1().wwy()).with_w(0.0)
                + (self.group0().yzz() * other.group1().zxw()).with_w(0.0)
                - (self.group0().zxy() * other.group1().yzx()).with_w(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e125] * other[e42], self[e235] * other[e43], self[e315] * other[e41], self[e125] * other[e12] * -1.0])
                - (self.group0().wwwy() * other.group1().xyzy())
                - (other.group0().zxy() * self.group0().yzx()).with_w(self[e235] * other[e23]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for AntiFlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       35        0
    //    simd3       11       16        0
    //    simd4       12       13        0
    // Totals...
    // yes simd       40       64        0
    //  no simd       98      135        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([self[e321], self[e321], self[e321], 1.0])
                * other
                    .group0()
                    .with_w(-(self[e235] * other[e41]) - (self[e315] * other[e42]) - (self[e125] * other[e43]) - (self[e321] * other[e45]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(self[e125] * other[e42]) - (self[e321] * other[e4235]),
                -(self[e235] * other[e43]) - (self[e321] * other[e4315]),
                -(self[e315] * other[e41]) - (self[e321] * other[e4125]),
                self[e125] * other[e43],
            ]) + (self.group0().yzxx() * other.group0().zxy().with_w(other[e41]))
                + (other.group2().www() * self.group0().xyz()).with_w(self[e315] * other[e42]),
            // e15, e25, e35, e1234
            ((Simd32x3::from(self[e321]) * other.group2().xyz())
                + (Simd32x3::from([other[e12], other[e23], other[e4315]]) * self.group0().yzx())
                + (Simd32x3::from([other[e4125], other[e4235], other[e45]]) * self.group0().yzz())
                + (self.group0().xyx() * other.group1().wwy())
                - (self.group0().zxy() * other.group1().yzx())
                - (self.group0().zxy() * other.group3().yzx()))
            .with_w(self[e321] * other[e1234] * -1.0),
            // e4235, e4315, e4125, e3215
            Simd32x3::from(0.0).with_w(-(self[e315] * other[e4315]) - (self[e125] * other[e12]) - (self[e125] * other[e4125]))
                + (other.group0().yzx() * self.group0().zxy()).with_w(self[e321] * other[e3215])
                - (self.group0().xyzx() * other.group2().www().with_w(other[e4235]))
                - (self.group0().wwwy() * other.group1().xyzy())
                - (other.group0().zxy() * self.group0().yzx()).with_w(self[e235] * other[e23]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum> for AntiFlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        9        0
    //    simd4        2        5        0
    // Totals...
    // yes simd        6       14        0
    //  no simd       12       29        0
    fn anti_sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(other[e12345]) * self.group0(),
            // e1, e2, e3, e5
            Simd32x3::from(0.0).with_w(self[e321] * other[e5]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for AntiFlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        8        0
    //    simd3        4        6        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        7       17        0
    //  no simd       15       38        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x3::from(0.0).with_w(self[e321] * other[e45] * -1.0),
            // e15, e25, e35, e3215
            ((Simd32x3::from(self[e321]) * other.group0().xyz()) + (Simd32x3::from(other[e45]) * self.group0().xyz())).with_w(0.0),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for AntiFlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       14        0
    //    simd3        3        4        0
    //    simd4        2        7        0
    // Totals...
    // yes simd       12       25        0
    //  no simd       24       54        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(self[e321]) * other.group1().xyz().with_w(other[e45]) * Simd32x4::from(-1.0),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self[e315] * other[e4125]) + (self[e321] * other[e15]),
                (self[e125] * other[e4235]) + (self[e321] * other[e25]),
                (self[e125] * other[e45]) + (self[e321] * other[e35]),
                -(self[e315] * other[e4315]) - (self[e125] * other[e4125]),
            ]) + (self.group0().xyxw() * other.group0().ww().with_zw(other[e4315], other[e3215]))
                - (self.group0().zxyx() * other.group1().yzxx()),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for AntiFlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       11        0
    //    simd3        0        3        0
    //    simd4        4        5        0
    // Totals...
    // yes simd       10       19        0
    //  no simd       22       40        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x3::from(self[e321]) * other.group1()).with_w(0.0) + (other.group0().zxy() * self.group0().yzx()).with_w(0.0)
                - (other.group0().yzx() * self.group0().zxy()).with_w(0.0),
            // e1, e2, e3, e5
            Simd32x4::from([self[e321], self[e321], self[e321], 1.0])
                * other.group0().with_w(-(self[e235] * other[e415]) - (self[e315] * other[e425]) - (self[e125] * other[e435])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for AntiFlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       13        0
    //    simd3        3        4        0
    //    simd4        2        5        0
    // Totals...
    // yes simd       12       22        0
    //  no simd       24       45        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            ((Simd32x3::from(self[e321]) * other.group1().xyz()) + (self.group0().xyx() * other.group0().wwy()) + (self.group0().yzz() * other.group0().zxw())
                - (self.group0().zxy() * other.group0().yzx()))
            .with_w(self[e321] * other[e12345]),
            // e1, e2, e3, e5
            Simd32x4::from([other[e415], other[e425], other[e435], 1.0])
                * self
                    .group0()
                    .www()
                    .with_w((self[e321] * other[e5]) - (self[e235] * other[e415]) - (self[e315] * other[e425]) - (self[e125] * other[e435])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for AntiFlatPoint {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       70        0
    //    simd2        6        6        0
    //    simd3       24       41        0
    //    simd4       21       17        0
    // Totals...
    // yes simd       83      134        0
    //  no simd      200      273        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([self[e321] * other[e45] * -1.0, self[e321] * other[e321]])
                - (Simd32x2::from(self[e235]) * Simd32x2::from([other[e41], other[e423]]))
                - (Simd32x2::from(self[e315]) * Simd32x2::from([other[e42], other[e431]]))
                - (Simd32x2::from(self[e125]) * Simd32x2::from([other[e43], other[e412]])),
            // e1, e2, e3, e4
            ((Simd32x3::from(self[e321]) * other.group6().xyz()) + (Simd32x3::from(other[e4]) * self.group0().xyz()) + (other.group7().zxy() * self.group0().yzx())
                - (other.group7().yzx() * self.group0().zxy()))
            .with_w(self[e321] * other[e4] * -1.0),
            // e5
            (self[e235] * other[e1]) + (self[e315] * other[e2]) + (self[e125] * other[e3]) + (self[e321] * other[e5])
                - (self[e235] * other[e415])
                - (self[e315] * other[e425])
                - (self[e125] * other[e435]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e315] * other[e4125]) + (self[e321] * other[e15]) - (self[e125] * other[e4315]),
                (self[e125] * other[e4235]) + (self[e321] * other[e25]) - (self[e235] * other[e4125]),
                (self[e125] * other[e45]) + (self[e321] * other[e35]) - (self[e315] * other[e4235]),
                0.0,
            ]) + (self.group0().xyzx() * other.group0().xx().with_zw(other[scalar], other[e41]))
                + (self.group0().yzxy() * other.group5().zxy().with_w(other[e42]))
                + (other.group3().ww().with_zw(other[e4315], self[e125]) * self.group0().xyx().with_w(other[e43]))
                - (self.group0().zxyw() * other.group5().yzx().with_w(other[scalar])),
            // e41, e42, e43
            Simd32x3::from(self[e321]) * other.group4() * Simd32x3::from(-1.0),
            // e23, e31, e12
            (Simd32x3::from(other[e1234]) * self.group0().xyz()) + (other.group4().zxy() * self.group0().yzx())
                - (Simd32x3::from(self[e321]) * other.group9().xyz())
                - (other.group4().yzx() * self.group0().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e235] * other[e4]) + (self[e321] * other[e1]),
                (self[e315] * other[e4]) + (self[e321] * other[e2]),
                (self[e125] * other[e4]) + (self[e321] * other[e3]),
                -(self[e315] * other[e431]) - (self[e125] * other[e412]),
            ]) + (self.group0().yzxw() * other.group7().zxy().with_w(other[e12345]))
                - (self.group0().zxyx() * other.group7().yzx().with_w(other[e423])),
            // e423, e431, e412
            Simd32x3::from(self[e321]) * other.group7() * Simd32x3::from(-1.0),
            // e235, e315, e125
            (Simd32x3::from(self[e321]) * other.group8())
                + (Simd32x3::from(other[e12345]) * self.group0().xyz())
                + (Simd32x3::from([other[e2], other[e415], other[e1]]) * self.group0().zzy())
                + (Simd32x3::from([other[e435], other[e3], other[e425]]) * self.group0().yxx())
                - (Simd32x3::from(self[e235]) * Simd32x3::from([other[e321], other[e435], other[e2]]))
                - (Simd32x3::from(self[e315]) * Simd32x3::from([other[e3], other[e321], other[e415]]))
                - (Simd32x3::from(self[e125]) * Simd32x3::from([other[e425], other[e1], other[e321]])),
            // e4235, e4315, e4125, e3215
            Simd32x3::from(0.0).with_w(-(self[e235] * other[e4235]) - (self[e315] * other[e4315]) - (self[e125] * other[e4125]))
                + (other.group4().yzx() * self.group0().zxy()).with_w(self[e321] * other[e3215])
                - (Simd32x4::from([other[e1234], other[e1234], other[e1234], self[e125]]) * self.group0().xyz().with_w(other[e12]))
                - (self.group0().yzxx() * other.group4().zxy().with_w(other[e23]))
                - (self.group0().wwwy() * other.group5().with_w(other[e31])),
            // e1234
            self[e321] * other[e1234] * -1.0,
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for AntiFlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd3        3        4        0
    //    simd4        2        8        0
    // Totals...
    // yes simd        9       20        0
    //  no simd       21       52        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x3::from(1.0).with_w(0.0) * self.group0().www().with_w(0.0) * other.group0().xyz().with_w(0.0) * Simd32x4::from([-1.0, -1.0, -1.0, 0.0]),
            // e15, e25, e35, e3215
            (self.group0().yzxw() * other.group0().zxyw()) + Simd32x3::from(0.0).with_w(-(self[e315] * other[e4315]) - (self[e125] * other[e4125]))
                - (self.group0().zxyx() * other.group0().yzxx()),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for AntiFlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       30        0
    //    simd3        5        8        0
    //    simd4        6        9        0
    // Totals...
    // yes simd       26       47        0
    //  no simd       54       90        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            ((Simd32x3::from(self[e321]) * other.group0().xyz()) + (Simd32x3::from(other[e4]) * self.group0().xyz())).with_w(0.0),
            // e235, e315, e125, e4
            ((self.group0().zxy() * other.group0().yzx()) - (self.group0().yzx() * other.group0().zxy())).with_w(self[e321] * other[e4] * -1.0),
            // e1, e2, e3, e5
            Simd32x4::from([other[e4], other[e4], other[e4], 1.0])
                * self
                    .group0()
                    .xyz()
                    .with_w((self[e235] * other[e1]) + (self[e315] * other[e2]) + (self[e125] * other[e3]) + (self[e321] * other[e5])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for AntiFlatPoint {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd3        1        2        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        1        7        0
    //  no simd        3       20        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return FlatPoint::from_groups(/* e15, e25, e35, e45 */ Simd32x4::from(other[scalar]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
            .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for AntiFlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       25        0
    //    simd3        7       13        0
    //    simd4        6        7        0
    // Totals...
    // yes simd       24       45        0
    //  no simd       56       92        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            ((Simd32x3::from(other[e1234]) * self.group0().xyz()) - (Simd32x3::from(self[e321]) * other.group0().xyz())).with_w(0.0),
            // e15, e25, e35, e1234
            ((self.group0().yzx() * other.group0().zxy()) - (self.group0().zxy() * other.group0().yzx())).with_w(self[e321] * other[e1234] * -1.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([other[e1234], other[e1234], other[e1234], 1.0])
                * self
                    .group0()
                    .xyz()
                    .with_w((self[e321] * other[e3215]) - (self[e235] * other[e4235]) - (self[e315] * other[e4315]) - (self[e125] * other[e4125]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for AntiFlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       22       42        0
    //    simd3        6        8        0
    //    simd4       14       19        0
    // Totals...
    // yes simd       42       69        0
    //  no simd       96      142        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([other[e423], other[e431], other[e412], 1.0])
                * self
                    .group0()
                    .www()
                    .with_w((self[e321] * other[e321]) - (self[e235] * other[e423]) - (self[e315] * other[e431]) - (self[e125] * other[e412]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e315] * other[e412]) + (self[e321] * other[e1]),
                (self[e125] * other[e423]) + (self[e321] * other[e2]),
                (self[e125] * other[e4]) + (self[e321] * other[e3]),
                -(self[e315] * other[e431]) - (self[e125] * other[e412]),
            ]) + (self.group0().xyxw() * other.group3().ww().with_zw(other[e431], other[e12345]))
                - (self.group0().zxyx() * other.group0().yzxx()),
            // e235, e315, e125, e5
            (Simd32x4::from(self[e235]) * Simd32x4::from([other[e12345], other[e3], other[e425], other[e1]]))
                + (Simd32x4::from(self[e315]) * Simd32x4::from([other[e435], other[e12345], other[e1], other[e2]]))
                + (Simd32x4::from(self[e125]) * Simd32x4::from([other[e2], other[e415], other[e12345], other[e3]]))
                + (Simd32x4::from(self[e321]) * other.group2())
                - (Simd32x4::from(self[e235]) * other.group1().wz().with_zw(other[e2], other[e415]))
                - (Simd32x4::from(self[e315]) * Simd32x4::from([other[e3], other[e321], other[e415], other[e425]]))
                - (Simd32x4::from(self[e125]) * Simd32x4::from([other[e425], other[e1], other[e321], other[e435]])),
            // e1, e2, e3, e4
            ((Simd32x3::from(self[e321]) * other.group1().xyz())
                + (Simd32x3::from([other[e412], other[e423], other[e4]]) * self.group0().yzz())
                + (Simd32x3::from([other[e4], other[e4], other[e431]]) * self.group0().xyx())
                - (self.group0().zxy() * other.group0().yzx()))
            .with_w(self[e321] * other[e4] * -1.0),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for AntiFlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       32        0
    //    simd3       12       14        0
    //    simd4       13       17        0
    // Totals...
    // yes simd       39       63        0
    //  no simd      102      142        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([other[e41], other[e42], other[e43], 1.0])
                * self
                    .group0()
                    .www()
                    .with_w(-(self[e235] * other[e41]) - (self[e315] * other[e42]) - (self[e125] * other[e43]) - (self[e321] * other[e45]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            Simd32x4::from([
                self[e321] * other[e4235] * -1.0,
                self[e321] * other[e4315] * -1.0,
                self[e321] * other[e4125] * -1.0,
                self[e125] * other[e43],
            ]) + (self.group0().xyxx() * other.group2().ww().with_zw(other[e42], other[e41]))
                + (self.group0().yzzy() * other.group0().zx().with_zw(other[e1234], other[e42]))
                - (self.group0().zxyw() * other.group0().yzxw()),
            // e15, e25, e35, e1234
            ((Simd32x3::from(self[e321]) * other.group2().xyz())
                + (Simd32x3::from([other[scalar], other[scalar], other[e31]]) * self.group0().xyx())
                + (Simd32x3::from([other[e12], other[e23], other[scalar]]) * self.group0().yzz())
                + (Simd32x3::from([other[e45], other[e45], other[e4315]]) * self.group0().xyx())
                + (Simd32x3::from([other[e4125], other[e4235], other[e45]]) * self.group0().yzz())
                - (self.group0().zxy() * other.group1().yzx())
                - (self.group0().zxy() * other.group3().yzx()))
            .with_w(self[e321] * other[e1234] * -1.0),
            // e4235, e4315, e4125, e3215
            (self.group0().zxyw() * other.group0().yzx().with_w(other[e3215]))
                + Simd32x3::from(0.0).with_w(-(self[e315] * other[e4315]) - (self[e125] * other[e12]) - (self[e125] * other[e4125]))
                - (self.group0().xyxx() * other.group2().ww().with_zw(other[e42], other[e23]))
                - (self.group0().yzzx() * other.group0().zx().with_zw(other[e1234], other[e4235]))
                - (self.group0().wwwy() * other.group1().xyzy()),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl std::ops::Div<anti_sandwich> for AntiFlector {
    type Output = anti_sandwich_partial<AntiFlector>;
    fn div(self, _rhs: anti_sandwich) -> Self::Output {
        anti_sandwich_partial(self)
    }
}
impl AntiSandwich<AntiCircleRotor> for AntiFlector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       43       68        0
    //    simd3        0        4        0
    //    simd4       38       36        0
    // Totals...
    // yes simd       81      108        0
    //  no simd      195      224        0
    fn anti_sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                other[e42] * self[e3],
                other[e43] * self[e1],
                other[e41] * self[e2],
                -(other[e43] * self[e125]) - (other[e45] * self[e321]),
            ]) - (Simd32x4::from([self[e321], self[e3], self[e1], self[e235]]) * other.group0().xxy().with_w(other[e41]))
                - (Simd32x4::from([self[e2], self[e321], self[e321], self[e315]]) * other.group0().zyz().with_w(other[e42])),
            // e23, e31, e12, e45
            Simd32x4::from([
                other[e45] * self[e1] * -1.0,
                other[e45] * self[e2] * -1.0,
                other[e45] * self[e3] * -1.0,
                (other[e43] * self[e125]) + (other[e23] * self[e1]) + (other[e31] * self[e2]) + (other[e12] * self[e3]),
            ]) + (Simd32x4::from([self[e315], self[e5], self[e5], self[e315]]) * other.group0().zyz().with_w(other[e42]))
                + (Simd32x4::from([self[e5], self[e125], self[e235], self[e235]]) * other.group0().xxy().with_w(other[e41]))
                - (self.group0().zxyw() * other.group0().yzx().with_w(other[scalar])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e15] * self[e321]) + (other[e35] * self[e2]) + (other[scalar] * self[e235]) - (other[e31] * self[e125]) - (other[e25] * self[e3]),
                (other[e15] * self[e3]) + (other[e25] * self[e321]) + (other[scalar] * self[e315]) - (other[e12] * self[e235]) - (other[e35] * self[e1]),
                (other[e25] * self[e1]) + (other[e35] * self[e321]) + (other[scalar] * self[e125]) - (other[e23] * self[e315]) - (other[e15] * self[e2]),
                0.0,
            ]) + (Simd32x4::from([self[e315], self[e5], self[e5], self[e2]]) * other.group1().zyz().with_w(other[e42]))
                + (Simd32x4::from([self[e5], self[e125], self[e235], self[e1]]) * other.group1().xxy().with_w(other[e41]))
                + (other.group1().www() * self.group0().xyz()).with_w(other[e43] * self[e3]),
            // e4235, e4315, e4125, e3215
            (self.group1().zxyw() * other.group1().yzx().with_w(other[scalar]))
                + Simd32x3::from(0.0).with_w(other[e35] * self[e3] * -1.0)
                + (other.group0().yzx() * self.group0().zxy()).with_w(other[e45] * self[e5])
                - (Simd32x4::from([self[e315], self[e5], self[e5], self[e315]]) * other.group0().zyz().with_w(other[e31]))
                - (Simd32x4::from([self[e321], self[e3], self[e1], self[e125]]) * other.group1().xxyz())
                - (Simd32x4::from([self[e2], self[e321], self[e321], self[e1]]) * other.group1().zyz().with_w(other[e15]))
                - (Simd32x4::from([self[e5], self[e125], self[e235], self[e235]]) * other.group0().xxy().with_w(other[e23]))
                - (other.group2().wwwy() * self.group1().xyzy()),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDipoleInversion> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       49       83        0
    //    simd3        0        7        0
    //    simd4       43       37        0
    // Totals...
    // yes simd       92      127        0
    //  no simd      221      252        0
    fn anti_sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x3::from(0.0).with_w((other[e4] * self[e5]) - (other[e1] * self[e1]) - (other[e2] * self[e2]) - (other[e3] * self[e3]))
                + (other.group0().yzx() * self.group1().zxy()).with_w(other[e321] * self[e321])
                - (Simd32x4::from([self[e321], self[e3], self[e1], self[e235]]) * other.group0().xxy().with_w(other[e423]))
                - (Simd32x4::from([self[e2], self[e321], self[e321], self[e315]]) * other.group0().zyz().with_w(other[e431]))
                - (other.group2().www() * self.group1().xyz()).with_w(other[e412] * self[e125]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e321] * self[e1]) + (other[e4] * self[e235]) + (other[e1] * self[e321]) + (other[e3] * self[e2]),
                (other[e431] * self[e5]) + (other[e321] * self[e2]) + (other[e4] * self[e315]) + (other[e1] * self[e3]) + (other[e2] * self[e321]),
                (other[e412] * self[e5]) + (other[e321] * self[e3]) + (other[e4] * self[e125]) + (other[e2] * self[e1]) + (other[e3] * self[e321]),
                -(other[e412] * self[e125]) - (other[e415] * self[e1]) - (other[e425] * self[e2]) - (other[e435] * self[e3]),
            ]) + (Simd32x4::from([self[e5], self[e125], self[e235], self[e5]]) * other.group0().xxy().with_w(other[e4]))
                - (self.group0().zxyx() * other.group0().yzx().with_w(other[e423]))
                - (other.group3().yzx() * self.group1().zxy()).with_w(other[e431] * self[e315]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e2] * self[e125]) + (other[e5] * self[e1]),
                (other[e3] * self[e235]) + (other[e5] * self[e2]),
                (other[e1] * self[e315]) + (other[e5] * self[e3]),
                -(other[e315] * self[e2]) - (other[e125] * self[e3]),
            ]) + (Simd32x4::from([self[e315], self[e5], self[e5], self[e315]]) * other.group1().zyz().with_w(other[e2]))
                + (Simd32x4::from([self[e321], self[e3], self[e1], self[e125]]) * other.group2().xxy().with_w(other[e3]))
                + (Simd32x4::from([self[e2], self[e321], self[e321], self[e321]]) * other.group2().zyz().with_w(other[e5]))
                + (Simd32x4::from([self[e5], self[e125], self[e235], self[e235]]) * other.group1().xxy().with_w(other[e1]))
                - (Simd32x4::from([self[e315], self[e5], self[e5], self[e1]]) * other.group3().zyz().with_w(other[e235]))
                - (Simd32x4::from([self[e5], self[e125], self[e235], self[e5]]) * other.group3().xxy().with_w(other[e321]))
                - (other.group1().yzxx() * self.group0().zxyx())
                - (other.group1().wwwy() * self.group0().xyzy())
                - (other.group2().yzx() * self.group1().zxy()).with_w(other[e435] * self[e125]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e435] * self[e2]) + (other[e4] * self[e235]) - (other[e425] * self[e3]),
                (other[e425] * self[e321]) + (other[e4] * self[e315]) - (other[e435] * self[e1]),
                (other[e435] * self[e321]) + (other[e4] * self[e125]) - (other[e415] * self[e2]),
                0.0,
            ]) + (Simd32x4::from([self[e315], self[e5], self[e5], self[e2]]) * other.group0().zyz().with_w(other[e431]))
                + (Simd32x4::from([self[e321], self[e3], self[e1], self[e3]]) * other.group1().xxy().with_w(other[e412]))
                + (Simd32x4::from([self[e5], self[e125], self[e235], self[e1]]) * other.group0().xxy().with_w(other[e423]))
                - (self.group0().zxyw() * other.group0().yzx().with_w(other[e4])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum> for AntiFlector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       29        0
    //    simd3        1        3        0
    //    simd4        6        8        0
    // Totals...
    // yes simd       24       40        0
    //  no simd       44       70        0
    fn anti_sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            ((Simd32x3::from(other[e3215]) * self.group1().xyz()) + (Simd32x3::from(other[scalar]) * self.group0().xyz())).with_w(other[scalar] * self[e321] * -1.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e1], self[e2], self[e3], 1.0])
                * other.group0().yy().with_zw(other[scalar], (other[e3215] * self[e321]) + (other[scalar] * self[e5]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlatPoint> for AntiFlector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       26        0
    //    simd3        0        2        0
    //    simd4       10       10        0
    // Totals...
    // yes simd       26       38        0
    //  no simd       56       72        0
    fn anti_sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(other[e321]) * self.group1().xyz().with_w(self[e321]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e235] * self[e321]) + (other[e125] * self[e2]),
                (other[e235] * self[e3]) + (other[e315] * self[e321]),
                (other[e315] * self[e1]) + (other[e125] * self[e321]),
                -(other[e125] * self[e3]) - (other[e321] * self[e5]),
            ]) - (other.group0().yzxx() * self.group1().zxyx())
                - (other.group0().wwwy() * self.group0().xyz().with_w(self[e2])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlector> for AntiFlector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       26        0
    //    simd3        0        2        0
    //    simd4       17       17        0
    // Totals...
    // yes simd       33       45        0
    //  no simd       84      100        0
    fn anti_sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (other[e1] * self[e321]) + (other[e3] * self[e2]),
                (other[e1] * self[e3]) + (other[e2] * self[e321]),
                (other[e2] * self[e1]) + (other[e3] * self[e321]),
                -(other[e2] * self[e2]) - (other[e3] * self[e3]),
            ]) + (Simd32x4::from(other[e321]) * self.group1().xyz().with_w(self[e321]))
                - (other.group1().yzxx() * self.group1().zxyx()),
            // e235, e315, e125, e5
            (Simd32x4::from(other[e5]) * self.group1().xyz().with_w(self[e321]))
                + (Simd32x4::from([self[e321], self[e3], self[e1], self[e235]]) * other.group0().xxy().with_w(other[e1]))
                + (Simd32x4::from([self[e2], self[e321], self[e321], self[e315]]) * other.group0().zyz().with_w(other[e2]))
                + (other.group1().yzxz() * self.group0().zxyz())
                - (Simd32x4::from([self[e315], self[e5], self[e5], self[e5]]) * other.group1().zyz().with_w(other[e321]))
                - (Simd32x4::from([self[e5], self[e125], self[e235], self[e3]]) * other.group1().xxy().with_w(other[e125]))
                - (other.group0().yzxx() * self.group1().zxyx())
                - (other.group0().wwwy() * self.group0().xyz().with_w(self[e2])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiLine> for AntiFlector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       25       41        0
    //    simd3        0        1        0
    //    simd4       11       11        0
    // Totals...
    // yes simd       36       53        0
    //  no simd       69       88        0
    fn anti_sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e2] * other[e35]) - (self[e125] * other[e31]) - (self[e3] * other[e25]),
                (self[e321] * other[e25]) - (self[e235] * other[e12]) - (self[e1] * other[e35]),
                (self[e321] * other[e35]) - (self[e315] * other[e23]) - (self[e2] * other[e15]),
                0.0,
            ]) + (Simd32x4::from([self[e315], self[e5], self[e5], self[e2]]) * other.group0().zyz().with_w(other[e31]))
                + (Simd32x4::from([self[e321], self[e3], self[e1], self[e3]]) * other.group1().xxy().with_w(other[e12]))
                + (Simd32x4::from([self[e5], self[e125], self[e235], self[e1]]) * other.group0().xxy().with_w(other[e23])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e3] * other[e31],
                self[e1] * other[e12],
                self[e2] * other[e23],
                -(self[e125] * other[e12]) - (self[e1] * other[e15]) - (self[e2] * other[e25]) - (self[e3] * other[e35]),
            ]) - (Simd32x4::from([self[e321], self[e3], self[e1], self[e235]]) * other.group0().xxy().with_w(other[e23]))
                - (Simd32x4::from([self[e2], self[e321], self[e321], self[e315]]) * other.group0().zyz().with_w(other[e31])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiMotor> for AntiFlector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       43        0
    //    simd3        0        3        0
    //    simd4       14       12        0
    // Totals...
    // yes simd       42       58        0
    //  no simd       84      100        0
    fn anti_sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e1] * other[e3215]) + (self[e2] * other[e35]) + (self[e5] * other[e23]) - (self[e3] * other[e25]),
                (self[e2] * other[e3215]) + (self[e3] * other[e15]) + (self[e5] * other[e31]) - (self[e1] * other[e35]),
                (self[e1] * other[e25]) + (self[e3] * other[e3215]) + (self[e5] * other[e12]) - (self[e2] * other[e15]),
                0.0,
            ]) + (other.group0().zxwy() * self.group0().yzz().with_w(self[e2]))
                + (other.group0().wwyx() * self.group0().xyx().with_w(self[e1]))
                + (self.group0().www() * other.group1().xyz()).with_w(self[e3] * other[e12])
                - (self.group0().zxyw() * other.group0().yzxw()),
            // e4235, e4315, e4125, e3215
            Simd32x3::from(0.0).with_w((self[e5] * other[scalar]) - (self[e1] * other[e15]) - (self[e2] * other[e25]) - (self[e3] * other[e35]))
                + (self.group1().zxy() * other.group0().yzx()).with_w(self[e321] * other[e3215])
                - (self.group0().wwwx() * other.group0().xyzx())
                - (other.group0().zxwz() * self.group1().yzz().with_w(self[e125]))
                - (other.group0().wwyy() * self.group1().xyx().with_w(self[e315])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiPlane> for AntiFlector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       34        0
    //    simd3        0        2        0
    //    simd4       11       10        0
    // Totals...
    // yes simd       31       46        0
    //  no simd       64       80        0
    fn anti_sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self[e321] * other[e1]) + (self[e2] * other[e3]),
                (self[e321] * other[e2]) + (self[e3] * other[e1]),
                (self[e321] * other[e3]) + (self[e1] * other[e2]),
                -(self[e2] * other[e2]) - (self[e3] * other[e3]),
            ]) - (self.group1().zxyx() * other.group0().yzxx()),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e315] * other[e3]) - (self[e5] * other[e1]),
                -(self[e125] * other[e1]) - (self[e5] * other[e2]),
                -(self[e235] * other[e2]) - (self[e5] * other[e3]),
                (self[e125] * other[e3]) + (self[e321] * other[e5]),
            ]) + (self.group0().zxyx() * other.group0().yzxx())
                + (other.group0().wwwy() * self.group1().xyz().with_w(self[e315])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiScalar> for AntiFlector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        9       13        0
    // Totals...
    // yes simd       13       21        0
    //  no simd       40       60        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(other[e12345]) * self.group0(),
            // e1, e2, e3, e5
            Simd32x4::from(other[e12345]) * self.group1(),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       49       84        0
    //    simd3        0        7        0
    //    simd4       33       27        0
    // Totals...
    // yes simd       82      118        0
    //  no simd      181      213        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x3::from(0.0).with_w(self[e125] * other[e412] * -1.0) + (other.group0().yzx() * self.group1().zxy()).with_w(self[e321] * other[e321])
                - (Simd32x4::from([self[e321], self[e3], self[e1], self[e235]]) * other.group0().xxy().with_w(other[e423]))
                - (Simd32x4::from([self[e2], self[e321], self[e321], self[e315]]) * other.group0().zyz().with_w(other[e431])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e315] * other[e412]) + (self[e1] * other[e321]) + (self[e5] * other[e423]),
                (self[e125] * other[e423]) + (self[e2] * other[e321]) + (self[e5] * other[e431]),
                (self[e235] * other[e431]) + (self[e3] * other[e321]) + (self[e5] * other[e412]),
                -(self[e315] * other[e431]) - (self[e125] * other[e412]) - (self[e1] * other[e415]) - (self[e2] * other[e425]) - (self[e3] * other[e435]),
            ]) - (self.group0().zxyx() * other.group0().yzx().with_w(other[e423])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e315] * other[e435]) + (self[e321] * other[e235]) + (self[e2] * other[e125]) + (self[e5] * other[e415]),
                (self[e125] * other[e415]) + (self[e321] * other[e315]) + (self[e3] * other[e235]) + (self[e5] * other[e425]),
                (self[e235] * other[e425]) + (self[e321] * other[e125]) + (self[e1] * other[e315]) + (self[e5] * other[e435]),
                -(self[e235] * other[e415]) - (self[e315] * other[e425]) - (self[e125] * other[e435]) - (self[e5] * other[e321]),
            ]) - (self.group1().zxyx() * other.group2().yzx().with_w(other[e235]))
                - (self.group0().xxy() * other.group1().wzx()).with_w(self[e2] * other[e315])
                - (self.group0().zyz() * other.group1().yww()).with_w(self[e3] * other[e125]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e2] * other[e435]) - (self[e125] * other[e431]) - (self[e3] * other[e425]),
                (self[e3] * other[e415]) - (self[e235] * other[e412]) - (self[e1] * other[e435]),
                (self[e1] * other[e425]) - (self[e315] * other[e423]) - (self[e2] * other[e415]),
                0.0,
            ]) + (Simd32x4::from([self[e315], self[e5], self[e5], self[e2]]) * other.group0().zyz().with_w(other[e431]))
                + (Simd32x4::from([self[e5], self[e125], self[e235], self[e1]]) * other.group0().xxy().with_w(other[e423]))
                + (self.group0().www() * other.group1().xyz()).with_w(self[e3] * other[e412]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       49       83        0
    //    simd3        0        6        0
    //    simd4       35       30        0
    // Totals...
    // yes simd       84      119        0
    //  no simd      189      221        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x3::from(0.0).with_w(self[e125] * other[e412] * -1.0) + (other.group0().yzx() * self.group1().zxy()).with_w(self[e321] * other[e321])
                - (Simd32x4::from([self[e321], self[e3], self[e1], self[e235]]) * other.group0().xxy().with_w(other[e423]))
                - (Simd32x4::from([self[e2], self[e321], self[e321], self[e315]]) * other.group0().zyz().with_w(other[e431])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e315] * other[e412]) + (self[e1] * other[e321]),
                (self[e2] * other[e321]) + (self[e5] * other[e431]),
                (self[e3] * other[e321]) + (self[e5] * other[e412]),
                -(self[e315] * other[e431]) - (self[e125] * other[e412]) - (self[e1] * other[e415]) - (self[e2] * other[e425]) - (self[e3] * other[e435]),
            ]) + (Simd32x4::from([self[e5], self[e125], self[e235], other[e12345]]) * other.group0().xxy().with_w(self[e321]))
                - (self.group0().zxyx() * other.group0().yzx().with_w(other[e423])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e315] * other[e435]) + (self[e321] * other[e235]) + (self[e2] * other[e125]) + (self[e5] * other[e415]),
                (self[e125] * other[e415]) + (self[e321] * other[e315]) + (self[e3] * other[e235]) + (self[e5] * other[e425]),
                (self[e125] * other[e12345]) + (self[e321] * other[e125]) + (self[e1] * other[e315]) + (self[e5] * other[e435]),
                -(self[e1] * other[e235]) - (self[e2] * other[e315]) - (self[e3] * other[e125]) - (self[e5] * other[e321]),
            ]) + (other.group2().ww().with_zw(other[e425], other[e12345]) * self.group0().xyx().with_w(self[e5]))
                - (self.group0().xxyx() * other.group1().wzxx())
                - (self.group0().zyzy() * other.group1().ywwy())
                - (self.group1().zxy() * other.group2().yzx()).with_w(self[e125] * other[e435]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e1] * other[e12345]) + (self[e2] * other[e435]) - (self[e125] * other[e431]) - (self[e3] * other[e425]),
                (self[e2] * other[e12345]) + (self[e3] * other[e415]) - (self[e235] * other[e412]) - (self[e1] * other[e435]),
                (self[e1] * other[e425]) + (self[e3] * other[e12345]) - (self[e315] * other[e423]) - (self[e2] * other[e415]),
                0.0,
            ]) + (Simd32x4::from([self[e315], self[e5], self[e5], self[e2]]) * other.group0().zyz().with_w(other[e431]))
                + (Simd32x4::from([self[e5], self[e125], self[e235], self[e1]]) * other.group0().xxy().with_w(other[e423]))
                + (self.group0().www() * other.group1().xyz()).with_w(self[e3] * other[e412]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for AntiFlector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       44       69        0
    //    simd3        0        5        0
    //    simd4       35       32        0
    // Totals...
    // yes simd       79      106        0
    //  no simd      184      212        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e3] * other[e42],
                self[e1] * other[e43],
                self[e2] * other[e41],
                -(self[e125] * other[e43]) - (self[e321] * other[e45]),
            ]) - (Simd32x4::from([self[e321], self[e3], self[e1], self[e235]]) * other.group0().xxy().with_w(other[e41]))
                - (Simd32x4::from([self[e2], self[e321], self[e321], self[e315]]) * other.group0().zyz().with_w(other[e42])),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(self[e125] * other[e42]) - (self[e1] * other[e45]),
                -(self[e235] * other[e43]) - (self[e2] * other[e45]),
                -(self[e315] * other[e41]) - (self[e3] * other[e45]),
                (self[e125] * other[e43]) + (self[e1] * other[e23]) + (self[e2] * other[e31]) + (self[e3] * other[e12]),
            ]) + (Simd32x4::from([self[e315], self[e5], self[e5], self[e315]]) * other.group0().zyz().with_w(other[e42]))
                + (Simd32x4::from([self[e5], self[e125], self[e235], self[e235]]) * other.group0().xxy().with_w(other[e41])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e315] * other[e12]) + (self[e5] * other[e23]) - (self[e125] * other[e31]) - (self[e3] * other[e25]),
                (self[e125] * other[e23]) + (self[e5] * other[e31]) - (self[e235] * other[e12]) - (self[e1] * other[e35]),
                (self[e125] * other[e45]) + (self[e5] * other[e12]) - (self[e315] * other[e23]) - (self[e2] * other[e15]),
                0.0,
            ]) + (Simd32x4::from([self[e321], self[e3], self[e1], self[e1]]) * other.group2().xxy().with_w(other[e41]))
                + (Simd32x4::from([self[e2], self[e321], self[e321], self[e2]]) * other.group2().zyz().with_w(other[e42]))
                + (self.group0().xyx() * other.group1().wwy()).with_w(self[e3] * other[e43]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e3] * other[e31],
                self[e1] * other[e12],
                self[e2] * other[e23],
                -(self[e315] * other[e31]) - (self[e125] * other[e12]),
            ]) + (other.group0().yzx() * self.group0().zxy()).with_w(self[e5] * other[e45])
                - (Simd32x4::from([self[e315], self[e5], self[e5], self[e2]]) * other.group0().zyz().with_w(other[e25]))
                - (Simd32x4::from([self[e5], self[e125], self[e235], self[e1]]) * other.group0().xxy().with_w(other[e15]))
                - (other.group1().zxyx() * self.group1().yzx().with_w(self[e235]))
                - (self.group0().www() * other.group1().xyz()).with_w(self[e3] * other[e35]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for AntiFlector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       58       80        0
    //    simd3        0        8        0
    //    simd4       43       37        0
    // Totals...
    // yes simd      101      125        0
    //  no simd      230      252        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x3::from(0.0).with_w((self[e2] * other[e4315]) + (self[e3] * other[e4125]) + (self[e5] * other[e1234]) - (self[e321] * other[e45]))
                + (other.group0().yzx() * self.group1().zxy()).with_w(self[e1] * other[e4235])
                - (Simd32x4::from([self[e321], self[e3], self[e1], self[e235]]) * other.group0().xxy().with_w(other[e41]))
                - (Simd32x4::from([self[e2], self[e321], self[e321], self[e315]]) * other.group0().zyz().with_w(other[e42]))
                - (other.group2().www() * self.group1().xyz()).with_w(self[e125] * other[e43]),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(self[e321] * other[e4235]) - (self[e1] * other[e45]) - (self[e2] * other[e4125]),
                -(self[e321] * other[e4315]) - (self[e2] * other[e45]) - (self[e3] * other[e4235]),
                -(self[e321] * other[e4125]) - (self[e1] * other[e4315]) - (self[e3] * other[e45]),
                (self[e2] * other[e31]) + (self[e3] * other[e12]),
            ]) + (Simd32x4::from([self[e315], self[e5], self[e5], self[e315]]) * other.group0().zyz().with_w(other[e42]))
                + (Simd32x4::from([self[e5], self[e125], self[e235], self[e235]]) * other.group0().xxy().with_w(other[e41]))
                + (self.group1().zxyx() * other.group3().yzx().with_w(other[e23]))
                + (other.group2().www() * self.group0().xyz()).with_w(self[e125] * other[e43])
                - (other.group0().yzx() * self.group0().zxy()).with_w(self[e5] * other[e1234]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e321] * other[e15]) + (self[e1] * other[e3215]) + (self[e2] * other[e35]) + (self[e5] * other[e23]) + (self[e5] * other[e4235])
                    - (self[e125] * other[e4315])
                    - (self[e3] * other[e25]),
                (self[e321] * other[e25]) + (self[e2] * other[e3215]) + (self[e3] * other[e15]) + (self[e5] * other[e31]) + (self[e5] * other[e4315])
                    - (self[e235] * other[e4125])
                    - (self[e1] * other[e35]),
                (self[e321] * other[e35]) + (self[e1] * other[e25]) + (self[e3] * other[e3215]) + (self[e5] * other[e12]) + (self[e5] * other[e4125])
                    - (self[e315] * other[e4235])
                    - (self[e2] * other[e15]),
                0.0,
            ]) + (other.group1().zx().with_zw(other[e4315], self[e2]) * self.group0().yzx().with_w(other[e42]))
                + (other.group3().zx().with_zw(other[e45], self[e3]) * self.group0().yzz().with_w(other[e43]))
                + (self.group0().xyx() * other.group1().wwy()).with_w(self[e1] * other[e41])
                - (self.group0().zxyw() * other.group1().yzx().with_w(other[e1234])),
            // e4235, e4315, e4125, e3215
            (self.group1().zxyw() * other.group1().yzxw())
                + Simd32x3::from(0.0).with_w(-(self[e125] * other[e4125]) - (self[e1] * other[e15]) - (self[e2] * other[e25]) - (self[e3] * other[e35]))
                + (other.group0().yzx() * self.group0().zxy()).with_w(self[e321] * other[e3215])
                - (Simd32x4::from([self[e315], self[e5], self[e5], other[e4235]]) * other.group0().zyz().with_w(self[e235]))
                - (Simd32x4::from([self[e5], self[e125], self[e235], other[e23]]) * other.group0().xxy().with_w(self[e235]))
                - (self.group0().xyzy() * other.group2().www().with_w(other[e31]))
                - (self.group0().wwwy() * other.group1().xyz().with_w(other[e4315]))
                - (other.group1().zxyz() * self.group1().yzx().with_w(self[e125])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum> for AntiFlector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       11        0
    //    simd3        1        2        0
    //    simd4        9       12        0
    // Totals...
    // yes simd       15       25        0
    //  no simd       44       65        0
    fn anti_sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            ((Simd32x3::from(other[e5]) * self.group1().xyz()) + (Simd32x3::from(other[e12345]) * self.group0().xyz())).with_w(self[e321] * other[e12345]),
            // e1, e2, e3, e5
            Simd32x4::from([self[e1], self[e2], self[e3], 1.0]) * other.group0().yy().with_zw(other[e12345], (self[e321] * other[e5]) + (self[e5] * other[e12345])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for AntiFlector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       24        0
    //    simd4       10       13        0
    // Totals...
    // yes simd       26       37        0
    //  no simd       56       76        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(other[e45]) * self.group1().xyz().with_w(self[e321]) * Simd32x4::from(-1.0),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self[e321] * other[e15]) + (self[e2] * other[e35]),
                (self[e321] * other[e25]) + (self[e3] * other[e15]),
                (self[e321] * other[e35]) + (self[e1] * other[e25]),
                -(self[e2] * other[e25]) - (self[e3] * other[e35]),
            ]) + (Simd32x4::from(other[e45]) * self.group0().xyz().with_w(self[e5]))
                - (self.group1().zxyx() * other.group0().yzxx()),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for AntiFlector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       41        0
    //    simd3        0        1        0
    //    simd4       14       14        0
    // Totals...
    // yes simd       42       56        0
    //  no simd       84      100        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                -(self[e1] * other[e45]) - (self[e2] * other[e4125]),
                -(self[e2] * other[e45]) - (self[e3] * other[e4235]),
                -(self[e1] * other[e4315]) - (self[e3] * other[e45]),
                (self[e2] * other[e4315]) + (self[e3] * other[e4125]),
            ]) + (self.group1().zxyx() * other.group1().yzxx())
                - (Simd32x4::from(self[e321]) * other.group1().xyz().with_w(other[e45])),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self[e321] * other[e15]) + (self[e1] * other[e3215]) + (self[e2] * other[e35]) + (self[e5] * other[e4235]),
                (self[e321] * other[e25]) + (self[e2] * other[e3215]) + (self[e3] * other[e15]) + (self[e5] * other[e4315]),
                (self[e321] * other[e35]) + (self[e1] * other[e25]) + (self[e3] * other[e3215]) + (self[e5] * other[e4125]),
                -(self[e125] * other[e4125]) - (self[e1] * other[e15]) - (self[e2] * other[e25]) - (self[e3] * other[e35]),
            ]) + (self.group0().xyxw() * other.group0().ww().with_zw(other[e4315], other[e3215]))
                + (other.group1().zx().with_zw(other[e45], other[e45]) * self.group0().yzz().with_w(self[e5]))
                - (self.group0().zxyx() * other.group1().yzxx())
                - (self.group1().zxy() * other.group0().yzx()).with_w(self[e315] * other[e4315]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for AntiFlector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       35        0
    //    simd3        0        2        0
    //    simd4       12       12        0
    // Totals...
    // yes simd       32       49        0
    //  no simd       68       89        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (self[e315] * other[e435]) + (self[e321] * other[e235]) + (self[e2] * other[e125]) + (self[e5] * other[e415]),
                (self[e125] * other[e415]) + (self[e321] * other[e315]) + (self[e3] * other[e235]) + (self[e5] * other[e425]),
                (self[e235] * other[e425]) + (self[e321] * other[e125]) + (self[e1] * other[e315]) + (self[e5] * other[e435]),
                self[e3] * other[e435] * -1.0,
            ]) - (self.group1().zxyy() * other.group1().yzx().with_w(other[e425]))
                - (other.group0().yzx() * self.group0().zxy()).with_w(self[e1] * other[e415]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self[e321] * other[e415]) + (self[e2] * other[e435]),
                (self[e321] * other[e425]) + (self[e3] * other[e415]),
                (self[e321] * other[e435]) + (self[e1] * other[e425]),
                -(self[e315] * other[e425]) - (self[e125] * other[e435]) - (self[e1] * other[e235]) - (self[e2] * other[e315]) - (self[e3] * other[e125]),
            ]) - (other.group0().yzx() * self.group1().zxy()).with_w(self[e235] * other[e415]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for AntiFlector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       33        0
    //    simd4       15       17        0
    // Totals...
    // yes simd       35       50        0
    //  no simd       80      101        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (self[e315] * other[e435]) + (self[e321] * other[e235]) + (self[e1] * other[e5]) + (self[e2] * other[e125]) + (self[e5] * other[e415]),
                (self[e125] * other[e415]) + (self[e321] * other[e315]) + (self[e2] * other[e5]) + (self[e3] * other[e235]) + (self[e5] * other[e425]),
                (self[e125] * other[e12345]) + (self[e321] * other[e125]) + (self[e1] * other[e315]) + (self[e3] * other[e5]) + (self[e5] * other[e435]),
                self[e3] * other[e435] * -1.0,
            ]) + (self.group0().xyxw() * other.group0().wwyw())
                - (self.group1().zxyy() * other.group1().yzx().with_w(other[e425]))
                - (other.group0().yzxx() * self.group0().zxy().with_w(self[e1])),
            // e1, e2, e3, e5
            Simd32x4::from([
                self[e2] * other[e435],
                self[e3] * other[e415],
                self[e3] * other[e12345],
                -(self[e315] * other[e425]) - (self[e125] * other[e435]) - (self[e1] * other[e235]) - (self[e2] * other[e315]) - (self[e3] * other[e125]),
            ]) + (Simd32x4::from(self[e321]) * other.group0().xyz().with_w(other[e5]))
                + (self.group1().xyxw() * other.group0().wwyw())
                - (other.group0().yzxx() * self.group1().zxy().with_w(self[e235])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for AntiFlector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       98      141        0
    //    simd2        8        8        0
    //    simd3       48       69        0
    //    simd4       50       38        0
    // Totals...
    // yes simd      204      256        0
    //  no simd      458      516        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[e2] * other[e4315]) + (self[e3] * other[e4125]) + (self[e5] * other[e1234]) - (self[e321] * other[e45]),
                (self[e321] * other[e321]) - (self[e1] * other[e1]) - (self[e2] * other[e2]) - (self[e3] * other[e3]),
            ]) + (Simd32x2::from([other[e4235], other[e4]]) * self.group1().xw())
                - (Simd32x2::from(self[e235]) * Simd32x2::from([other[e41], other[e423]]))
                - (Simd32x2::from(self[e315]) * Simd32x2::from([other[e42], other[e431]]))
                - (Simd32x2::from(self[e125]) * Simd32x2::from([other[e43], other[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e235] * other[e4]) + (self[e321] * other[e415]) + (self[e2] * other[e435]) - (self[e3] * other[e425]),
                (self[e315] * other[e4]) + (self[e321] * other[e425]) + (self[e3] * other[e415]) - (self[e1] * other[e435]),
                (self[e125] * other[e4]) + (self[e321] * other[e435]) + (self[e1] * other[e425]) - (self[e2] * other[e415]),
                0.0,
            ]) + (Simd32x4::from([self[e315], self[e5], self[e5], self[e3]]) * other.group7().zyz().with_w(other[e412]))
                + (Simd32x4::from([self[e5], self[e125], self[e235], self[e2]]) * other.group7().xxy().with_w(other[e431]))
                + (self.group1().xyzx() * other.group0().yy().with_zw(other[e12345], other[e423]))
                - (other.group7().yzx() * self.group0().zxy()).with_w(self[e321] * other[e4]),
            // e5
            (self[e235] * other[e1]) + (self[e315] * other[e2]) + (self[e125] * other[e3]) + (self[e321] * other[e5]) + (self[e5] * other[e12345])
                - (self[e235] * other[e415])
                - (self[e315] * other[e425])
                - (self[e125] * other[e435])
                - (self[e1] * other[e235])
                - (self[e2] * other[e315])
                - (self[e3] * other[e125])
                - (self[e5] * other[e321]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e1] * other[e3215]) + (self[e2] * other[e35]) + (self[e5] * other[e4235]) - (self[e3] * other[e25]),
                (self[e2] * other[e3215]) + (self[e3] * other[e15]) + (self[e5] * other[e4315]) - (self[e1] * other[e35]),
                (self[e1] * other[e25]) + (self[e3] * other[e3215]) + (self[e5] * other[e4125]) - (self[e2] * other[e15]),
                0.0,
            ]) + (Simd32x4::from([self[e315], self[e5], self[e5], self[e125]]) * other.group5().zyz().with_w(other[e43]))
                + (Simd32x4::from([self[e5], self[e125], self[e235], self[e315]]) * other.group5().xxy().with_w(other[e42]))
                + (self.group0().xyzx() * other.group0().xx().with_zw(other[scalar], other[e41]))
                + (other.group3().ww().with_zw(other[e4315], self[e1]) * self.group0().xyx().with_w(other[e23]))
                + (other.group9().zx().with_zw(other[e45], self[e2]) * self.group0().yzz().with_w(other[e31]))
                + (self.group0().www() * other.group3().xyz()).with_w(self[e3] * other[e12])
                - (self.group0().zxyw() * other.group5().yzx().with_w(other[scalar]))
                - (self.group0().zxy() * other.group9().yzx()).with_w(self[e5] * other[e1234]),
            // e41, e42, e43
            (other.group4().yzx() * self.group1().zxy())
                - (Simd32x3::from(other[e1234]) * self.group1().xyz())
                - (Simd32x3::from([self[e321], self[e3], self[e1]]) * other.group4().xxy())
                - (Simd32x3::from([self[e2], self[e321], self[e321]]) * other.group4().zyz()),
            // e23, e31, e12
            (Simd32x3::from(other[e1234]) * self.group0().xyz())
                + (Simd32x3::from([self[e315], self[e5], self[e5]]) * other.group4().zyz())
                + (Simd32x3::from([self[e5], self[e125], self[e235]]) * other.group4().xxy())
                + (self.group1().zxy() * other.group9().yzx())
                - (Simd32x3::from(self[e321]) * other.group9().xyz())
                - (Simd32x3::from([other[e45], other[e45], other[e4315]]) * self.group1().xyx())
                - (Simd32x3::from([other[e4125], other[e4235], other[e45]]) * self.group1().yzz())
                - (other.group4().yzx() * self.group0().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e235] * other[e4]) + (self[e321] * other[e1]) + (self[e1] * other[e321]) + (self[e2] * other[e3]),
                (self[e315] * other[e4]) + (self[e321] * other[e2]) + (self[e2] * other[e321]) + (self[e3] * other[e1]),
                (self[e125] * other[e4]) + (self[e321] * other[e3]) + (self[e1] * other[e2]) + (self[e3] * other[e321]),
                -(self[e125] * other[e412]) - (self[e1] * other[e415]) - (self[e2] * other[e425]) - (self[e3] * other[e435]),
            ]) + (Simd32x4::from([self[e315], self[e5], self[e5], other[e4]]) * other.group7().zyz().with_w(self[e5]))
                + (Simd32x4::from([self[e5], self[e125], self[e235], self[e321]]) * other.group7().xxy().with_w(other[e12345]))
                - (self.group0().zxyx() * other.group7().yzx().with_w(other[e423]))
                - (self.group1().zxy() * other.group1().yzx()).with_w(self[e315] * other[e431]),
            // e423, e431, e412
            (other.group7().yzx() * self.group1().zxy())
                - (Simd32x3::from(other[e4]) * self.group1().xyz())
                - (Simd32x3::from([self[e321], self[e3], self[e1]]) * other.group7().xxy())
                - (Simd32x3::from([self[e2], self[e321], self[e321]]) * other.group7().zyz()),
            // e235, e315, e125
            (Simd32x3::from(self[e5]) * other.group6().xyz())
                + (Simd32x3::from(other[e12345]) * self.group0().xyz())
                + (Simd32x3::from(other[e5]) * self.group1().xyz())
                + (Simd32x3::from([self[e321], self[e3], self[e1]]) * other.group8().xxy())
                + (Simd32x3::from([self[e2], self[e321], self[e321]]) * other.group8().zyz())
                + (Simd32x3::from([other[e2], other[e415], other[e1]]) * self.group0().zzy())
                + (Simd32x3::from([other[e435], other[e3], other[e425]]) * self.group0().yxx())
                - (Simd32x3::from(self[e235]) * Simd32x3::from([other[e321], other[e435], other[e2]]))
                - (Simd32x3::from(self[e315]) * Simd32x3::from([other[e3], other[e321], other[e415]]))
                - (Simd32x3::from(self[e125]) * Simd32x3::from([other[e425], other[e1], other[e321]]))
                - (Simd32x3::from(self[e5]) * other.group1().xyz())
                - (other.group8().yzx() * self.group1().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x3::from(0.0).with_w((self[e5] * other[e45]) - (self[e1] * other[e15]) - (self[e2] * other[e25]) - (self[e3] * other[e35]))
                + (other.group4().yzx() * self.group0().zxy()).with_w(self[e5] * other[scalar])
                + (other.group5().yzx() * self.group1().zxy()).with_w(self[e321] * other[e3215])
                - (Simd32x4::from([self[e315], self[e5], self[e5], self[e125]]) * other.group4().zyz().with_w(other[e12]))
                - (Simd32x4::from([self[e321], self[e3], self[e1], other[e4235]]) * other.group5().xxy().with_w(self[e235]))
                - (Simd32x4::from([self[e2], self[e321], self[e321], other[e4315]]) * other.group5().zyz().with_w(self[e315]))
                - (Simd32x4::from([self[e5], self[e125], self[e235], self[e315]]) * other.group4().xxy().with_w(other[e31]))
                - (Simd32x4::from([other[e1234], other[e1234], other[e1234], other[e4125]]) * self.group0().xyzz())
                - (other.group0().xx().with_zw(other[scalar], other[e23]) * self.group1().xyz().with_w(self[e235])),
            // e1234
            (self[e1] * other[e41]) + (self[e2] * other[e42]) + (self[e3] * other[e43]) - (self[e321] * other[e1234]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for AntiFlector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       32        0
    //    simd4       11       12        0
    // Totals...
    // yes simd       31       44        0
    //  no simd       64       80        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                -(self[e321] * other[e4235]) - (self[e2] * other[e4125]),
                -(self[e321] * other[e4315]) - (self[e3] * other[e4235]),
                -(self[e321] * other[e4125]) - (self[e1] * other[e4315]),
                (self[e2] * other[e4315]) + (self[e3] * other[e4125]),
            ]) + (self.group1().zxyx() * other.group0().yzxx()),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self[e1] * other[e3215]) + (self[e5] * other[e4235]),
                (self[e2] * other[e3215]) + (self[e5] * other[e4315]),
                (self[e3] * other[e3215]) + (self[e5] * other[e4125]),
                -(self[e315] * other[e4315]) - (self[e125] * other[e4125]),
            ]) + (self.group0().yzxw() * other.group0().zxyw())
                - (self.group0().zxyx() * other.group0().yzxx()),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       52        0
    //    simd3        3        7        0
    //    simd4       25       27        0
    // Totals...
    // yes simd       56       86        0
    //  no simd      137      181        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([other[e4], other[e4], other[e4], 1.0])
                * self
                    .group1()
                    .xyz()
                    .with_w((self[e5] * other[e4]) - (self[e1] * other[e1]) - (self[e2] * other[e2]) - (self[e3] * other[e3]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            ((Simd32x3::from(self[e321]) * other.group0().xyz()) + (Simd32x3::from(other[e4]) * self.group0().xyz()) + (self.group1().yzx() * other.group0().zxy())
                - (self.group1().zxy() * other.group0().yzx()))
            .with_w(self[e5] * other[e4]),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e315] * other[e3]) - (self[e5] * other[e1]),
                -(self[e125] * other[e1]) - (self[e5] * other[e2]),
                -(self[e235] * other[e2]) - (self[e5] * other[e3]),
                (self[e125] * other[e3]) + (self[e321] * other[e5]),
            ]) + (Simd32x4::from([other[e5], other[e5], other[e5], other[e2]]) * self.group1().xyz().with_w(self[e315]))
                + (self.group0().zxyx() * other.group0().yzxx()),
            // e1, e2, e3, e4
            Simd32x4::from(other[e4]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for AntiFlector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       25        0
    //    simd3        0        1        0
    //    simd4        6       10        0
    // Totals...
    // yes simd       22       36        0
    //  no simd       40       68        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(other[scalar]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[scalar]) * self.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for AntiFlector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       33       46        0
    //    simd3        6       10        0
    //    simd4       23       27        0
    // Totals...
    // yes simd       62       83        0
    //  no simd      143      184        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([other[e1234], other[e1234], other[e1234], 1.0])
                * self
                    .group1()
                    .xyz()
                    .with_w((self[e1] * other[e4235]) + (self[e2] * other[e4315]) + (self[e3] * other[e4125]) + (self[e5] * other[e1234]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            ((Simd32x3::from(other[e1234]) * self.group0().xyz()) + (self.group1().zxy() * other.group0().yzx())
                - (Simd32x3::from(self[e321]) * other.group0().xyz())
                - (self.group1().yzx() * other.group0().zxy()))
            .with_w(self[e5] * other[e1234] * -1.0),
            // e15, e25, e35, e1234
            ((Simd32x3::from(self[e5]) * other.group0().xyz()) + (Simd32x3::from(other[e3215]) * self.group1().xyz()) + (self.group0().yzx() * other.group0().zxy())
                - (self.group0().zxy() * other.group0().yzx()))
            .with_w(self[e321] * other[e1234] * -1.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([other[e1234], other[e1234], other[e1234], 1.0])
                * self
                    .group0()
                    .xyz()
                    .with_w((self[e321] * other[e3215]) - (self[e235] * other[e4235]) - (self[e315] * other[e4315]) - (self[e125] * other[e4125]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for AntiFlector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       49       82        0
    //    simd3        0        6        0
    //    simd4       45       40        0
    // Totals...
    // yes simd       94      128        0
    //  no simd      229      260        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x3::from(0.0).with_w((self[e5] * other[e4]) - (self[e1] * other[e1]) - (self[e2] * other[e2]) - (self[e3] * other[e3]))
                + (self.group1().zxy() * other.group0().yzx()).with_w(self[e321] * other[e321])
                - (self.group0().wwwx() * other.group0().xyzx())
                - (other.group0().zx().with_zw(other[e4], other[e412]) * self.group1().yzz().with_w(self[e125]))
                - (other.group3().ww().with_zw(other[e431], other[e431]) * self.group1().xyx().with_w(self[e315])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e321] * other[e1]) + (self[e1] * other[e321]) + (self[e2] * other[e3]) + (self[e5] * other[e423]),
                (self[e321] * other[e2]) + (self[e2] * other[e321]) + (self[e3] * other[e1]) + (self[e5] * other[e431]),
                (self[e321] * other[e3]) + (self[e1] * other[e2]) + (self[e3] * other[e321]) + (self[e5] * other[e412]),
                -(self[e125] * other[e412]) - (self[e1] * other[e415]) - (self[e2] * other[e425]) - (self[e3] * other[e435]),
            ]) + (self.group0().xyxw() * other.group3().ww().with_zw(other[e431], other[e12345]))
                + (other.group0().zx().with_zw(other[e4], other[e4]) * self.group0().yzz().with_w(self[e5]))
                - (self.group0().zxyx() * other.group0().yzxx())
                - (self.group1().zxy() * other.group3().yzx()).with_w(self[e315] * other[e431]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e2] * other[e125]) + (self[e5] * other[e415]),
                (self[e3] * other[e235]) + (self[e5] * other[e425]),
                (self[e3] * other[e5]) + (self[e5] * other[e435]),
                -(self[e3] * other[e125]) - (self[e5] * other[e321]),
            ]) + (Simd32x4::from(self[e235]) * Simd32x4::from([other[e12345], other[e3], other[e425], other[e1]]))
                + (Simd32x4::from(self[e315]) * Simd32x4::from([other[e435], other[e12345], other[e1], other[e2]]))
                + (Simd32x4::from(self[e125]) * Simd32x4::from([other[e2], other[e415], other[e12345], other[e3]]))
                + (Simd32x4::from(self[e321]) * other.group2())
                + (self.group1().xyxw() * other.group2().wwy().with_w(other[e12345]))
                - (Simd32x4::from(self[e235]) * other.group1().wz().with_zw(other[e2], other[e415]))
                - (Simd32x4::from(self[e315]) * Simd32x4::from([other[e3], other[e321], other[e415], other[e425]]))
                - (Simd32x4::from(self[e125]) * Simd32x4::from([other[e425], other[e1], other[e321], other[e435]]))
                - (self.group1().zxyx() * other.group2().yzxx())
                - (self.group1().wwwy() * other.group3().xyz().with_w(other[e315])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e1] * other[e12345]) + (self[e2] * other[e435]) + (self[e5] * other[e423]) - (self[e3] * other[e425]),
                (self[e2] * other[e12345]) + (self[e3] * other[e415]) + (self[e5] * other[e431]) - (self[e1] * other[e435]),
                (self[e1] * other[e425]) + (self[e3] * other[e12345]) + (self[e5] * other[e412]) - (self[e2] * other[e415]),
                0.0,
            ]) + (other.group0().zx().with_zw(other[e4], other[e431]) * self.group0().yzz().with_w(self[e2]))
                + (other.group3().ww().with_zw(other[e431], other[e423]) * self.group0().xyx().with_w(self[e1]))
                + (self.group0().www() * other.group1().xyz()).with_w(self[e3] * other[e412])
                - (self.group0().zxyw() * other.group0().yzx().with_w(other[e4])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for AntiFlector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       58       77        0
    //    simd3        0        5        0
    //    simd4       45       42        0
    // Totals...
    // yes simd      103      124        0
    //  no simd      238      260        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (self.group1().zxyx() * other.group0().yzx().with_w(other[e4235]))
                + Simd32x3::from(0.0).with_w((self[e2] * other[e4315]) + (self[e3] * other[e4125]) + (self[e5] * other[e1234]) - (self[e321] * other[e45]))
                - (self.group0().wwwx() * other.group0().xyzx())
                - (other.group0().zx().with_zw(other[e1234], other[e43]) * self.group1().yzz().with_w(self[e125]))
                - (other.group2().ww().with_zw(other[e42], other[e42]) * self.group1().xyx().with_w(self[e315])),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(self[e1] * other[e45]) - (self[e2] * other[e4125]),
                -(self[e2] * other[e45]) - (self[e3] * other[e4235]),
                -(self[e1] * other[e4315]) - (self[e3] * other[e45]),
                (self[e2] * other[e31]) + (self[e3] * other[e12]),
            ]) + (self.group0().xyxx() * other.group2().ww().with_zw(other[e42], other[e41]))
                + (self.group0().yzzy() * other.group0().zx().with_zw(other[e1234], other[e42]))
                + (self.group1().wwwx() * other.group0().xyz().with_w(other[e23]))
                + (self.group1().zxy() * other.group3().yzx()).with_w(self[e125] * other[e43])
                - (self.group0().zxyw() * other.group0().yzxw())
                - (self.group0().www() * other.group3().xyz()).with_w(self[e5] * other[e1234]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e315] * other[e4125]) + (self[e321] * other[e15]) + (self[e1] * other[e3215]) + (self[e2] * other[e35]) + (self[e5] * other[e23]) + (self[e5] * other[e4235])
                    - (self[e125] * other[e4315])
                    - (self[e3] * other[e25]),
                (self[e125] * other[e4235]) + (self[e321] * other[e25]) + (self[e2] * other[e3215]) + (self[e3] * other[e15]) + (self[e5] * other[e31]) + (self[e5] * other[e4315])
                    - (self[e235] * other[e4125])
                    - (self[e1] * other[e35]),
                (self[e125] * other[e45]) + (self[e321] * other[e35]) + (self[e1] * other[e25]) + (self[e3] * other[e3215]) + (self[e5] * other[e12]) + (self[e5] * other[e4125])
                    - (self[e315] * other[e4235])
                    - (self[e2] * other[e15]),
                0.0,
            ]) + (other.group0().ww().with_zw(other[e31], other[e41]) * self.group0().xyx().with_w(self[e1]))
                + (other.group1().zx().with_zw(other[scalar], other[e43]) * self.group0().yzz().with_w(self[e3]))
                + (other.group1().ww().with_zw(other[e4315], other[e42]) * self.group0().xyx().with_w(self[e2]))
                - (self.group0().zxyw() * other.group1().yzx().with_w(other[e1234])),
            // e4235, e4315, e4125, e3215
            (self.group0().zxyw() * other.group0().yzx().with_w(other[e3215]))
                + (self.group1().zxyw() * other.group1().yzx().with_w(other[scalar]))
                + Simd32x3::from(0.0).with_w((self[e5] * other[e45]) - (self[e1] * other[e15]) - (self[e2] * other[e25]) - (self[e3] * other[e35]))
                - (self.group0().xyxx() * other.group2().ww().with_zw(other[e42], other[e23]))
                - (self.group0().yzzx() * other.group0().zx().with_zw(other[e1234], other[e4235]))
                - (self.group0().wwwy() * other.group1().xyzy())
                - (other.group0().ww().with_zw(other[e31], other[e4315]) * self.group1().xyx().with_w(self[e315]))
                - (other.group1().zx().with_zw(other[scalar], other[e12]) * self.group1().yzz().with_w(self[e125]))
                - (self.group1().www() * other.group0().xyz()).with_w(self[e125] * other[e4125]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl std::ops::Div<anti_sandwich> for AntiLine {
    type Output = anti_sandwich_partial<AntiLine>;
    fn div(self, _rhs: anti_sandwich) -> Self::Output {
        anti_sandwich_partial(self)
    }
}
impl AntiSandwich<AntiCircleRotor> for AntiLine {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       55      105        0
    //    simd3        0       14        0
    //    simd4       19        7        0
    // Totals...
    // yes simd       74      126        0
    //  no simd      131      175        0
    fn anti_sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                other[e43] * self[e31] * -1.0,
                other[e41] * self[e12] * -1.0,
                other[e42] * self[e23] * -1.0,
                (other[e42] * self[e25]) + (other[e43] * self[e35]) + (other[e23] * self[e23]) + (other[e31] * self[e31]) + (other[e12] * self[e12]),
            ]) + (other.group0().yzx() * self.group0().zxy()).with_w(other[e41] * self[e15]),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(other[e43] * self[e25]) - (other[e12] * self[e31]) - (other[scalar] * self[e23]),
                -(other[e41] * self[e35]) - (other[e23] * self[e12]) - (other[scalar] * self[e31]),
                -(other[e42] * self[e15]) - (other[e31] * self[e23]) - (other[scalar] * self[e12]),
                other[e43] * self[e35],
            ]) + (other.group0().yzx() * self.group1().zxy()).with_w(other[e41] * self[e15])
                + (self.group0().zxy() * other.group1().yzx()).with_w(other[e42] * self[e25]),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(other[e12] * self[e25]) - (other[e45] * self[e15]) - (other[e35] * self[e31]) - (other[scalar] * self[e15]),
                -(other[e23] * self[e35]) - (other[e45] * self[e25]) - (other[e15] * self[e12]) - (other[scalar] * self[e25]),
                -(other[e31] * self[e15]) - (other[e45] * self[e35]) - (other[e25] * self[e23]) - (other[scalar] * self[e35]),
                (other[e23] * self[e15]) + (other[e31] * self[e25]) + (other[e12] * self[e35]) + (other[e35] * self[e12]),
            ]) + (other.group2().yzxx() * self.group0().zxy().with_w(self[e23]))
                + (self.group1().zxy() * other.group1().yzx()).with_w(other[e25] * self[e31]),
            // e1, e2, e3, e4
            Simd32x4::from([other[e43] * self[e25] * -1.0, other[e41] * self[e35] * -1.0, other[e42] * self[e15] * -1.0, other[e43] * self[e12]])
                + (self.group0() * other.group1().www()).with_w(other[e42] * self[e31])
                + (other.group0().yzx() * self.group1().zxy()).with_w(other[e41] * self[e23]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDipoleInversion> for AntiLine {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       47       83        0
    //    simd3        0       11        0
    //    simd4       28       19        0
    // Totals...
    // yes simd       75      113        0
    //  no simd      159      192        0
    fn anti_sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e412] * self[e31]) + (other[e4] * self[e23]),
                (other[e423] * self[e12]) + (other[e4] * self[e31]),
                (other[e431] * self[e23]) + (other[e4] * self[e12]),
                -(other[e431] * self[e25]) - (other[e412] * self[e35]) - (other[e415] * self[e23]) - (other[e425] * self[e31]) - (other[e435] * self[e12]),
            ]) - (other.group0().yzx() * self.group0().zxy()).with_w(other[e423] * self[e15]),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(other[e431] * self[e35]) - (other[e425] * self[e12]),
                -(other[e412] * self[e15]) - (other[e435] * self[e23]),
                -(other[e423] * self[e25]) - (other[e415] * self[e31]),
                (other[e1] * self[e23]) + (other[e2] * self[e31]) + (other[e3] * self[e12]),
            ]) + (self.group1() * other.group2().www()).with_w(other[e412] * self[e35])
                + (other.group0().zxy() * self.group1().yzx()).with_w(other[e423] * self[e15])
                + (self.group0().yzx() * other.group1().zxy()).with_w(other[e431] * self[e25]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e435] * self[e25]) + (other[e125] * self[e31]) + (other[e2] * self[e35]) + (other[e5] * self[e23]) - (other[e425] * self[e35]),
                (other[e415] * self[e35]) + (other[e235] * self[e12]) + (other[e3] * self[e15]) + (other[e5] * self[e31]) - (other[e1] * self[e35]),
                (other[e425] * self[e15]) + (other[e315] * self[e23]) + (other[e1] * self[e25]) + (other[e5] * self[e12]) - (other[e321] * self[e35]),
                0.0,
            ]) - (Simd32x4::from([other[e3], other[e321], other[e415], self[e12]]) * self.group1().yyy().with_w(other[e412]))
                - (other.group1().wz().with_zw(other[e2], self[e31]) * self.group1().xxx().with_w(other[e431]))
                - (self.group0().zxy() * other.group2().yzx()).with_w(other[e423] * self[e23]),
            // e4235, e4315, e4125, e3215
            (other.group3().yzxy() * self.group0().zxy().with_w(self[e25]))
                + Simd32x3::from(0.0).with_w((other[e3] * self[e35]) - (other[e425] * self[e25]) - (other[e435] * self[e35]))
                + (other.group0().yzx() * self.group1().zxy()).with_w(other[e1] * self[e15])
                - (other.group1().ww().with_zw(other[e2], other[e315]) * self.group0().xyx().with_w(self[e31]))
                - (other.group3().zx().with_zw(other[e321], other[e125]) * self.group0().yzz().with_w(self[e12]))
                - (self.group1() * other.group2().www()).with_w(other[e415] * self[e15])
                - (other.group0().zxy() * self.group1().yzx()).with_w(other[e235] * self[e23]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum> for AntiLine {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       18        0
    //    simd3        1        9        0
    //    simd4        3        0        0
    // Totals...
    // yes simd       11       27        0
    //  no simd       22       45        0
    fn anti_sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(other[scalar]) * self.group0() * Simd32x3::from(-1.0),
            // e235, e315, e125
            -(Simd32x3::from(other[e3215]) * self.group0()) - (Simd32x3::from(other[scalar]) * self.group1()),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlatPoint> for AntiLine {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       15        0
    //    simd3        0        5        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       18       28        0
    //  no simd       42       62        0
    fn anti_sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            (self.group0().yzx() * other.group0().zxy()).with_w(0.0)
                - (Simd32x3::from(other[e321]) * self.group1()).with_w(0.0)
                - (self.group0().zxy() * other.group0().yzx()).with_w(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([other[e321], other[e321], other[e321], 1.0])
                * self.group0().with_w(-(other[e235] * self[e23]) - (other[e315] * self[e31]) - (other[e125] * self[e12]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlector> for AntiLine {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       24        0
    //    simd3        0        2        0
    //    simd4       12       12        0
    // Totals...
    // yes simd       28       38        0
    //  no simd       64       78        0
    fn anti_sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                -(other[e315] * self[e12]) - (other[e321] * self[e15]) - (other[e3] * self[e25]),
                -(other[e125] * self[e23]) - (other[e321] * self[e25]) - (other[e1] * self[e35]),
                -(other[e235] * self[e31]) - (other[e321] * self[e35]) - (other[e2] * self[e15]),
                0.0,
            ]) + (other.group1().yzxz() * self.group1().zxy().with_w(self[e12]))
                + (other.group0().zx().with_zw(other[e5], other[e2]) * self.group0().yzz().with_w(self[e31]))
                + (other.group1().ww().with_zw(other[e315], other[e1]) * self.group0().xyx().with_w(self[e23])),
            // e4235, e4315, e4125, e3215
            (other.group1().yzxx() * self.group0().zxy().with_w(self[e15]))
                + Simd32x3::from(0.0).with_w((other[e2] * self[e25]) + (other[e3] * self[e35]) - (other[e125] * self[e12]))
                - (other.group0().ww().with_zw(other[e2], other[e235]) * self.group0().xyx().with_w(self[e23]))
                - (other.group1().zx().with_zw(other[e321], other[e315]) * self.group0().yzz().with_w(self[e31])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiLine> for AntiLine {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       23       46        0
    //    simd3        0        6        0
    //    simd4        6        2        0
    // Totals...
    // yes simd       29       54        0
    //  no simd       47       72        0
    fn anti_sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                other[e12] * self[e31] * -1.0,
                other[e23] * self[e12] * -1.0,
                other[e31] * self[e23] * -1.0,
                (other[e31] * self[e31]) + (other[e12] * self[e12]),
            ]) + (other.group0().yzx() * self.group0().zxy()).with_w(other[e23] * self[e23]),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(other[e12] * self[e25]) - (other[e35] * self[e31]),
                -(other[e23] * self[e35]) - (other[e15] * self[e12]),
                -(other[e31] * self[e15]) - (other[e25] * self[e23]),
                (other[e12] * self[e35]) + (other[e15] * self[e23]) + (other[e25] * self[e31]) + (other[e35] * self[e12]),
            ]) + (other.group0().yzx() * self.group1().zxy()).with_w(other[e23] * self[e15])
                + (other.group1().yzx() * self.group0().zxy()).with_w(other[e31] * self[e25]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiMotor> for AntiLine {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       50        0
    //    simd3        0        4        0
    //    simd4        6        4        0
    // Totals...
    // yes simd       38       58        0
    //  no simd       56       78        0
    fn anti_sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                -(self[e23] * other[scalar]) - (self[e31] * other[e12]),
                -(self[e31] * other[scalar]) - (self[e12] * other[e23]),
                -(self[e23] * other[e31]) - (self[e12] * other[scalar]),
                (self[e31] * other[e31]) + (self[e12] * other[e12]),
            ]) + (other.group0().yzxx() * self.group0().zxy().with_w(self[e23])),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e23] * other[e3215]) - (self[e31] * other[e35]) - (self[e15] * other[scalar]) - (self[e25] * other[e12]),
                -(self[e31] * other[e3215]) - (self[e12] * other[e15]) - (self[e25] * other[scalar]) - (self[e35] * other[e23]),
                -(self[e23] * other[e25]) - (self[e12] * other[e3215]) - (self[e15] * other[e31]) - (self[e35] * other[scalar]),
                (self[e12] * other[e35]) + (self[e15] * other[e23]) + (self[e25] * other[e31]) + (self[e35] * other[e12]),
            ]) + (other.group1().yzxx() * self.group0().zxy().with_w(self[e23]))
                + (self.group1().zxy() * other.group0().yzx()).with_w(self[e31] * other[e25]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiPlane> for AntiLine {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       27        0
    //    simd3        0        2        0
    //    simd4        9        9        0
    // Totals...
    // yes simd       18       38        0
    //  no simd       45       69        0
    fn anti_sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([self[e25] * other[e3] * -1.0, self[e35] * other[e1] * -1.0, self[e15] * other[e2] * -1.0, self[e12] * other[e3]])
                + (other.group0().yzxy() * self.group1().zxy().with_w(self[e31]))
                + (other.group0().wwwx() * self.group0().with_w(self[e23])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e31] * other[e3] * -1.0,
                self[e12] * other[e1] * -1.0,
                self[e23] * other[e2] * -1.0,
                (self[e25] * other[e2]) + (self[e35] * other[e3]),
            ]) + (other.group0().yzxx() * self.group0().zxy().with_w(self[e15])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiScalar> for AntiLine {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       21        0
    //    simd3        0        7        0
    //    simd4        3        0        0
    // Totals...
    // yes simd       10       28        0
    //  no simd       19       42        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(other[e12345]) * self.group0(),
            // e15, e25, e35
            Simd32x3::from(other[e12345]) * self.group1(),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for AntiLine {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       34       73        0
    //    simd3        0       11        0
    //    simd4       23       14        0
    // Totals...
    // yes simd       57       98        0
    //  no simd      126      162        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e31] * other[e412],
                self[e12] * other[e423],
                self[e23] * other[e431],
                -(self[e31] * other[e425]) - (self[e12] * other[e435]) - (self[e15] * other[e423]) - (self[e25] * other[e431]) - (self[e35] * other[e412]),
            ]) - (self.group0().zxy() * other.group0().yzx()).with_w(self[e23] * other[e415]),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(self[e12] * other[e425]) - (self[e35] * other[e431]),
                -(self[e23] * other[e435]) - (self[e15] * other[e412]),
                -(self[e31] * other[e415]) - (self[e25] * other[e423]),
                self[e35] * other[e412],
            ]) + (self.group0().yzx() * other.group1().zxy()).with_w(self[e15] * other[e423])
                + (self.group1().yzx() * other.group0().zxy()).with_w(self[e25] * other[e431]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e31] * other[e125]) + (self[e25] * other[e435]),
                (self[e12] * other[e235]) + (self[e35] * other[e415]),
                (self[e23] * other[e315]) + (self[e15] * other[e425]),
                0.0,
            ]) - (self.group0().zxy() * other.group2().yzx()).with_w(self[e23] * other[e423])
                - (self.group1().xxy() * other.group1().wzx()).with_w(self[e31] * other[e431])
                - (self.group1().zyz() * other.group1().yww()).with_w(self[e12] * other[e412]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e35] * other[e431],
                self[e15] * other[e412],
                self[e25] * other[e423],
                -(self[e12] * other[e125]) - (self[e15] * other[e415]) - (self[e25] * other[e425]) - (self[e35] * other[e435]),
            ]) - (self.group0() * other.group1().www()).with_w(self[e23] * other[e235])
                - (self.group1().yzx() * other.group0().zxy()).with_w(self[e31] * other[e315]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for AntiLine {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       37       74        0
    //    simd3        0       10        0
    //    simd4       24       16        0
    // Totals...
    // yes simd       61      100        0
    //  no simd      133      168        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e31] * other[e412],
                self[e12] * other[e423],
                self[e23] * other[e431],
                -(self[e31] * other[e425]) - (self[e12] * other[e435]) - (self[e15] * other[e423]) - (self[e25] * other[e431]) - (self[e35] * other[e412]),
            ]) - (self.group0().zxy() * other.group0().yzx()).with_w(self[e23] * other[e415]),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(self[e12] * other[e425]) - (self[e35] * other[e431]),
                -(self[e23] * other[e435]) - (self[e15] * other[e412]),
                -(self[e31] * other[e415]) - (self[e25] * other[e423]),
                0.0,
            ]) + (other.group1().zx().with_zw(other[e12345], other[e431]) * self.group0().yzz().with_w(self[e25]))
                + (other.group2().ww().with_zw(other[e425], other[e423]) * self.group0().xyx().with_w(self[e15]))
                + (self.group1().yzx() * other.group0().zxy()).with_w(self[e35] * other[e412]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e31] * other[e125]) + (self[e15] * other[e12345]) + (self[e25] * other[e435]),
                (self[e12] * other[e235]) + (self[e25] * other[e12345]) + (self[e35] * other[e415]),
                (self[e23] * other[e315]) + (self[e15] * other[e425]) + (self[e35] * other[e12345]),
                0.0,
            ]) - (self.group0().zxy() * other.group2().yzx()).with_w(self[e23] * other[e423])
                - (self.group1().xxy() * other.group1().wzx()).with_w(self[e31] * other[e431])
                - (self.group1().zyz() * other.group1().yww()).with_w(self[e12] * other[e412]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e35] * other[e431],
                self[e15] * other[e412],
                self[e25] * other[e423],
                -(self[e12] * other[e125]) - (self[e15] * other[e415]) - (self[e25] * other[e425]) - (self[e35] * other[e435]),
            ]) - (self.group0() * other.group1().www()).with_w(self[e23] * other[e235])
                - (self.group1().yzx() * other.group0().zxy()).with_w(self[e31] * other[e315]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for AntiLine {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       49      100        0
    //    simd3        0       15        0
    //    simd4       19        6        0
    // Totals...
    // yes simd       68      121        0
    //  no simd      125      169        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[e31] * other[e43] * -1.0,
                self[e12] * other[e41] * -1.0,
                self[e23] * other[e42] * -1.0,
                (self[e31] * other[e31]) + (self[e12] * other[e12]) + (self[e15] * other[e41]) + (self[e25] * other[e42]) + (self[e35] * other[e43]),
            ]) + (self.group0().zxy() * other.group0().yzx()).with_w(self[e23] * other[e23]),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(self[e31] * other[e12]) - (self[e25] * other[e43]),
                -(self[e12] * other[e23]) - (self[e35] * other[e41]),
                -(self[e23] * other[e31]) - (self[e15] * other[e42]),
                self[e35] * other[e43],
            ]) + (self.group0().zxy() * other.group1().yzx()).with_w(self[e15] * other[e41])
                + (self.group1().zxy() * other.group0().yzx()).with_w(self[e25] * other[e42]),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e31] * other[e35]) - (self[e15] * other[e45]) - (self[e25] * other[e12]),
                -(self[e12] * other[e15]) - (self[e25] * other[e45]) - (self[e35] * other[e23]),
                -(self[e23] * other[e25]) - (self[e15] * other[e31]) - (self[e35] * other[e45]),
                (self[e12] * other[e35]) + (self[e15] * other[e23]) + (self[e25] * other[e31]) + (self[e35] * other[e12]),
            ]) + (self.group0().zxy() * other.group2().yzx()).with_w(self[e23] * other[e15])
                + (self.group1().zxy() * other.group1().yzx()).with_w(self[e31] * other[e25]),
            // e1, e2, e3, e4
            Simd32x4::from([self[e25] * other[e43] * -1.0, self[e35] * other[e41] * -1.0, self[e15] * other[e42] * -1.0, self[e12] * other[e43]])
                + (self.group0() * other.group1().www()).with_w(self[e23] * other[e41])
                + (self.group1().zxy() * other.group0().yzx()).with_w(self[e31] * other[e42]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for AntiLine {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       63      104        0
    //    simd3        0       15        0
    //    simd4       24       11        0
    // Totals...
    // yes simd       87      130        0
    //  no simd      159      193        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                -(self[e23] * other[e1234]) - (self[e31] * other[e43]),
                -(self[e31] * other[e1234]) - (self[e12] * other[e41]),
                -(self[e23] * other[e42]) - (self[e12] * other[e1234]),
                (self[e31] * other[e31]) + (self[e12] * other[e12]) + (self[e15] * other[e41]) + (self[e25] * other[e42]) + (self[e35] * other[e43]),
            ]) + (self.group0().zxy() * other.group0().yzx()).with_w(self[e23] * other[e23]),
            // e415, e425, e435, e321
            Simd32x3::from(0.0).with_w(self[e35] * other[e43])
                + (self.group0().zxy() * other.group1().yzx()).with_w(self[e15] * other[e41])
                + (self.group1().zxy() * other.group0().yzx()).with_w(self[e25] * other[e42])
                - (other.group0().zx().with_zw(other[e1234], other[e4125]) * self.group1().yzz().with_w(self[e12]))
                - (other.group2().ww().with_zw(other[e42], other[e4315]) * self.group1().xyx().with_w(self[e31]))
                - (self.group0().yzx() * other.group1().zxy()).with_w(self[e23] * other[e4235]),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e23] * other[e3215]) - (self[e31] * other[e35]) - (self[e15] * other[e45]) - (self[e25] * other[e12]) - (self[e25] * other[e4125]),
                -(self[e31] * other[e3215]) - (self[e12] * other[e15]) - (self[e25] * other[e45]) - (self[e35] * other[e23]) - (self[e35] * other[e4235]),
                -(self[e23] * other[e25]) - (self[e12] * other[e3215]) - (self[e15] * other[e31]) - (self[e15] * other[e4315]) - (self[e35] * other[e45]),
                (self[e15] * other[e23])
                    + (self[e15] * other[e4235])
                    + (self[e25] * other[e31])
                    + (self[e25] * other[e4315])
                    + (self[e35] * other[e12])
                    + (self[e35] * other[e4125]),
            ]) + (other.group2().yzxx() * self.group0().zxy().with_w(self[e23]))
                + (self.group1().zxy() * other.group1().yzx()).with_w(self[e31] * other[e25])
                + (self.group1().zxy() * other.group3().yzx()).with_w(self[e12] * other[e35]),
            // e1, e2, e3, e4
            Simd32x4::from([
                -(self[e12] * other[e4315]) - (self[e15] * other[e1234]) - (self[e25] * other[e43]),
                -(self[e23] * other[e4125]) - (self[e25] * other[e1234]) - (self[e35] * other[e41]),
                -(self[e31] * other[e4235]) - (self[e15] * other[e42]) - (self[e35] * other[e1234]),
                0.0,
            ]) + (other.group1().ww().with_zw(other[e4315], other[e41]) * self.group0().xyx().with_w(self[e23]))
                + (other.group3().zx().with_zw(other[e45], other[e42]) * self.group0().yzz().with_w(self[e31]))
                + (self.group1().zxy() * other.group0().yzx()).with_w(self[e12] * other[e43]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum> for AntiLine {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       21        0
    //    simd3        1        8        0
    //    simd4        3        0        0
    // Totals...
    // yes simd       11       29        0
    //  no simd       22       45        0
    fn anti_sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(other[e12345]) * self.group0(),
            // e15, e25, e35
            (Simd32x3::from(other[e5]) * self.group0()) + (Simd32x3::from(other[e12345]) * self.group1()),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for AntiLine {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       19        0
    //    simd3        0        5        0
    //    simd4        7        6        0
    // Totals...
    // yes simd       18       30        0
    //  no simd       39       58        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            (self.group0().zxy() * other.group0().yzx()).with_w(0.0)
                - (Simd32x3::from(other[e45]) * self.group1()).with_w(0.0)
                - (self.group0().yzx() * other.group0().zxy()).with_w(0.0),
            // e1, e2, e3, e5
            Simd32x4::from([other[e45], other[e45], other[e45], 1.0]) * self.group0().with_w((self[e23] * other[e15]) + (self[e31] * other[e25]) + (self[e12] * other[e35])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for AntiLine {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       35        0
    //    simd3        0        2        0
    //    simd4       10       10        0
    // Totals...
    // yes simd       28       47        0
    //  no simd       58       81        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (self[e12] * other[e25]) + (self[e35] * other[e4315]) - (self[e25] * other[e4125]),
                (self[e23] * other[e35]) + (self[e15] * other[e4125]) - (self[e35] * other[e4235]),
                (self[e31] * other[e15]) + (self[e25] * other[e4235]) - (self[e35] * other[e45]),
                0.0,
            ]) - (other.group0().zx().with_zw(other[e3215], other[e4315]) * self.group0().yzz().with_w(self[e31]))
                - (other.group0().ww().with_zw(other[e4315], other[e4125]) * self.group1().xyx().with_w(self[e12]))
                - (other.group1().ww().with_zw(other[e25], other[e4235]) * self.group0().xyx().with_w(self[e23])),
            // e1, e2, e3, e5
            Simd32x4::from([
                self[e12] * other[e4315] * -1.0,
                self[e23] * other[e4125] * -1.0,
                self[e31] * other[e4235] * -1.0,
                (self[e12] * other[e35]) + (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125]),
            ]) + (other.group0().ww().with_zw(other[e4315], other[e15]) * self.group0().xyx().with_w(self[e23]))
                + (other.group1().zx().with_zw(other[e45], other[e25]) * self.group0().yzz().with_w(self[e31])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for AntiLine {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       23       43        0
    //    simd3        0        6        0
    //    simd4        6        2        0
    // Totals...
    // yes simd       29       51        0
    //  no simd       47       69        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                self[e31] * other[e435],
                self[e12] * other[e415],
                self[e23] * other[e425],
                -(self[e31] * other[e425]) - (self[e12] * other[e435]),
            ]) - (self.group0().zxy() * other.group0().yzx()).with_w(self[e23] * other[e415]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self[e31] * other[e125]) + (self[e25] * other[e435]),
                (self[e12] * other[e235]) + (self[e35] * other[e415]),
                (self[e23] * other[e315]) + (self[e15] * other[e425]),
                -(self[e12] * other[e125]) - (self[e15] * other[e415]) - (self[e25] * other[e425]) - (self[e35] * other[e435]),
            ]) - (self.group0().zxy() * other.group1().yzx()).with_w(self[e23] * other[e235])
                - (self.group1().zxy() * other.group0().yzx()).with_w(self[e31] * other[e315]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for AntiLine {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       50        0
    //    simd3        0        4        0
    //    simd4        6        4        0
    // Totals...
    // yes simd       38       58        0
    //  no simd       56       78        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self[e23] * other[e12345]) + (self[e31] * other[e435]),
                (self[e31] * other[e12345]) + (self[e12] * other[e415]),
                (self[e23] * other[e425]) + (self[e12] * other[e12345]),
                -(self[e31] * other[e425]) - (self[e12] * other[e435]),
            ]) - (other.group0().yzxx() * self.group0().zxy().with_w(self[e23])),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self[e23] * other[e5]) + (self[e31] * other[e125]) + (self[e15] * other[e12345]) + (self[e25] * other[e435]),
                (self[e31] * other[e5]) + (self[e12] * other[e235]) + (self[e25] * other[e12345]) + (self[e35] * other[e415]),
                (self[e23] * other[e315]) + (self[e12] * other[e5]) + (self[e15] * other[e425]) + (self[e35] * other[e12345]),
                -(self[e12] * other[e125]) - (self[e15] * other[e415]) - (self[e25] * other[e425]) - (self[e35] * other[e435]),
            ]) - (other.group1().yzxx() * self.group0().zxy().with_w(self[e23]))
                - (self.group1().zxy() * other.group0().yzx()).with_w(self[e31] * other[e315]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for AntiLine {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       84      131        0
    //    simd3       34       54        0
    //    simd4       35       25        0
    // Totals...
    // yes simd      153      210        0
    //  no simd      326      393        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                -(self[e23] * other[e415])
                    - (self[e31] * other[e425])
                    - (self[e12] * other[e435])
                    - (self[e15] * other[e423])
                    - (self[e25] * other[e431])
                    - (self[e35] * other[e412]),
                (self[e23] * other[e23]) + (self[e31] * other[e31]) + (self[e12] * other[e12]) + (self[e15] * other[e41]) + (self[e25] * other[e42]) + (self[e35] * other[e43]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                -(self[e12] * other[e4315]) - (self[e15] * other[e1234]) - (self[e25] * other[e43]),
                -(self[e23] * other[e4125]) - (self[e25] * other[e1234]) - (self[e35] * other[e41]),
                -(self[e31] * other[e4235]) - (self[e15] * other[e42]) - (self[e35] * other[e1234]),
                0.0,
            ]) + (other.group3().ww().with_zw(other[e4315], other[e41]) * self.group0().xyx().with_w(self[e23]))
                + (other.group9().zx().with_zw(other[e45], other[e42]) * self.group0().yzz().with_w(self[e31]))
                + (self.group1().zxy() * other.group4().yzx()).with_w(self[e12] * other[e43]),
            // e5
            (self[e23] * other[e15])
                + (self[e31] * other[e25])
                + (self[e12] * other[e35])
                + (self[e15] * other[e23])
                + (self[e15] * other[e4235])
                + (self[e25] * other[e31])
                + (self[e25] * other[e4315])
                + (self[e35] * other[e12])
                + (self[e35] * other[e4125]),
            // e15, e25, e35, e45
            Simd32x4::from([
                -(self[e12] * other[e315]) - (self[e15] * other[e321]) - (self[e25] * other[e3]) - (self[e35] * other[e425]),
                -(self[e23] * other[e125]) - (self[e15] * other[e435]) - (self[e25] * other[e321]) - (self[e35] * other[e1]),
                -(self[e31] * other[e235]) - (self[e15] * other[e2]) - (self[e25] * other[e415]) - (self[e35] * other[e321]),
                self[e35] * other[e412],
            ]) + (Simd32x4::from([other[e2], other[e415], other[e1], other[e431]]) * self.group1().zzy().with_w(self[e25]))
                + (Simd32x4::from([other[e5], other[e5], other[e315], other[e2]]) * self.group0().xyx().with_w(self[e31]))
                + (Simd32x4::from([other[e435], other[e3], other[e425], other[e423]]) * self.group1().yxx().with_w(self[e15]))
                + (other.group0().yy().with_zw(other[e12345], self[e23]) * self.group1().with_w(other[e1]))
                + (other.group8().zx().with_zw(other[e5], other[e3]) * self.group0().yzz().with_w(self[e12])),
            // e41, e42, e43
            (Simd32x3::from([other[e4], other[e4], other[e431]]) * self.group0().xyx()) + (self.group0().yzz() * other.group7().zx().with_z(other[e4]))
                - (self.group0().zxy() * other.group7().yzx()),
            // e23, e31, e12
            (Simd32x3::from(other[e12345]) * self.group0())
                + (Simd32x3::from([other[e4], other[e4], other[e431]]) * self.group1().xyx())
                + (self.group0().yzx() * other.group6().zxy())
                + (self.group1().yzz() * other.group7().zx().with_z(other[e4]))
                - (self.group0().zxy() * other.group6().yzx())
                - (self.group1().zxy() * other.group7().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([self[e25] * other[e43] * -1.0, self[e35] * other[e41] * -1.0, self[e35] * other[e1234] * -1.0, self[e35] * other[e43]])
                + (self.group0().zxy() * other.group5().yzx()).with_w(self[e15] * other[e41])
                + (self.group1().zxy() * other.group4().yzx()).with_w(self[e25] * other[e42])
                - (Simd32x4::from([other[e1234], other[e1234], other[e42], other[e4125]]) * self.group1().xyx().with_w(self[e12]))
                - (other.group0().xx().with_zw(other[scalar], self[e23]) * self.group0().with_w(other[e4235]))
                - (self.group0().yzx() * other.group5().zxy()).with_w(self[e31] * other[e4315]),
            // e423, e431, e412
            (self.group0().zxy() * other.group4().yzx())
                - (Simd32x3::from([other[e1234], other[e1234], other[e42]]) * self.group0().xyx())
                - (self.group0().yzz() * other.group4().zx().with_z(other[e1234])),
            // e235, e315, e125
            (self.group0().zxy() * other.group3().yzx()) + (self.group1().zxy() * other.group5().yzx()) + (self.group1().zxy() * other.group9().yzx())
                - (Simd32x3::from(other[scalar]) * self.group1())
                - (Simd32x3::from([other[e35], other[e15], other[e3215]]) * self.group0().yzz())
                - (Simd32x3::from([other[e45], other[e45], other[e31]]) * self.group1().xyx())
                - (Simd32x3::from([other[e4125], other[e4235], other[e45]]) * self.group1().yzz())
                - (Simd32x3::from([other[e3215], other[e3215], other[e25]]) * self.group0().xyx())
                - (self.group1().yzx() * other.group5().zx().with_z(other[e4315])),
            // e4235, e4315, e4125, e3215
            (other.group1().yzxx() * self.group0().zxy().with_w(self[e15]))
                + Simd32x3::from(0.0).with_w((self[e35] * other[e3]) - (self[e25] * other[e425]) - (self[e35] * other[e435]))
                + (self.group1().zxy() * other.group7().yzx()).with_w(self[e25] * other[e2])
                - (other.group7().zx().with_zw(other[e4], other[e415]) * self.group1().yzz().with_w(self[e15]))
                - (other.group1().zx().with_zw(other[e321], other[e315]) * self.group0().yzz().with_w(self[e31]))
                - (other.group1().ww().with_zw(other[e431], other[e125]) * self.group1().xyx().with_w(self[e12]))
                - (other.group6().ww().with_zw(other[e2], other[e235]) * self.group0().xyx().with_w(self[e23])),
            // e1234
            -(self[e23] * other[e423]) - (self[e31] * other[e431]) - (self[e12] * other[e412]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for AntiLine {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       29        0
    //    simd3        0        2        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       18       39        0
    //  no simd       42       67        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([self[e35] * other[e4315], self[e15] * other[e4125], self[e25] * other[e4235], self[e12] * other[e4125] * -1.0])
                - (other.group0().zxyy() * self.group1().yzx().with_w(self[e31]))
                - (other.group0().wwwx() * self.group0().with_w(self[e23])),
            // e1, e2, e3, e5
            Simd32x4::from([
                self[e12] * other[e4315] * -1.0,
                self[e23] * other[e4125] * -1.0,
                self[e31] * other[e4235] * -1.0,
                (self[e25] * other[e4315]) + (self[e35] * other[e4125]),
            ]) + (other.group0().zxyx() * self.group0().yzx().with_w(self[e15])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for AntiLine {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       25       50        0
    //    simd3        0        8        0
    //    simd4       17       14        0
    // Totals...
    // yes simd       42       72        0
    //  no simd       93      130        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(other[e4]) * self.group0(),
            // e23, e31, e12, e45
            Simd32x4::from([other[e4], other[e4], other[e4], 1.0]) * self.group1().with_w((self[e23] * other[e1]) + (self[e31] * other[e2]) + (self[e12] * other[e3])),
            // e15, e25, e35, e1234
            (Simd32x3::from(other[e5]) * self.group0()).with_w(0.0) + (self.group1().zxy() * other.group0().yzx()).with_w(0.0)
                - (self.group1().yzx() * other.group0().zxy()).with_w(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(self[e31] * other[e3]) - (self[e15] * other[e4]),
                -(self[e12] * other[e1]) - (self[e25] * other[e4]),
                -(self[e23] * other[e2]) - (self[e35] * other[e4]),
                (self[e25] * other[e2]) + (self[e35] * other[e3]),
            ]) + (other.group0().yzxx() * self.group0().zxy().with_w(self[e15])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for AntiLine {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       18        0
    //    simd3        0        9        0
    //    simd4        3        0        0
    // Totals...
    // yes simd       10       27        0
    //  no simd       19       45        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(other[scalar]) * self.group0() * Simd32x3::from(-1.0),
            // e235, e315, e125
            Simd32x3::from(other[scalar]) * self.group1() * Simd32x3::from(-1.0),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for AntiLine {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       64        0
    //    simd3        0       17        0
    //    simd4       15        5        0
    // Totals...
    // yes simd       51       86        0
    //  no simd       96      135        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[e1234]) * self.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            Simd32x4::from([other[e1234], other[e1234], other[e1234], 1.0])
                * self.group1().with_w(-(self[e23] * other[e4235]) - (self[e31] * other[e4315]) - (self[e12] * other[e4125]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e4
            (self.group1().zxy() * other.group0().yzx()).with_w(0.0)
                - (Simd32x3::from(other[e3215]) * self.group0()).with_w(0.0)
                - (self.group1().yzx() * other.group0().zxy()).with_w(0.0),
            // e1, e2, e3, e5
            Simd32x4::from([
                -(self[e12] * other[e4315]) - (self[e15] * other[e1234]),
                -(self[e23] * other[e4125]) - (self[e25] * other[e1234]),
                -(self[e31] * other[e4235]) - (self[e35] * other[e1234]),
                (self[e25] * other[e4315]) + (self[e35] * other[e4125]),
            ]) + (other.group0().zxyx() * self.group0().yzx().with_w(self[e15])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for AntiLine {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       49       80        0
    //    simd3        0        6        0
    //    simd4       29       25        0
    // Totals...
    // yes simd       78      111        0
    //  no simd      165      198        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e23] * other[e4]) + (self[e31] * other[e412]),
                (self[e31] * other[e4]) + (self[e12] * other[e423]),
                (self[e23] * other[e431]) + (self[e12] * other[e4]),
                -(self[e31] * other[e425]) - (self[e12] * other[e435]) - (self[e15] * other[e423]) - (self[e25] * other[e431]) - (self[e35] * other[e412]),
            ]) - (self.group0().zxy() * other.group0().yzx()).with_w(self[e23] * other[e415]),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(self[e12] * other[e425]) - (self[e35] * other[e431]),
                -(self[e23] * other[e435]) - (self[e15] * other[e412]),
                -(self[e31] * other[e415]) - (self[e25] * other[e423]),
                (self[e25] * other[e431]) + (self[e35] * other[e412]),
            ]) + (other.group0().zx().with_zw(other[e4], other[e423]) * self.group1().yzz().with_w(self[e15]))
                + (other.group0().ww().with_zw(other[e425], other[e1]) * self.group0().xyx().with_w(self[e23]))
                + (other.group1().zx().with_zw(other[e12345], other[e2]) * self.group0().yzz().with_w(self[e31]))
                + (other.group3().ww().with_zw(other[e431], other[e3]) * self.group1().xyx().with_w(self[e12])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * other[e5]) + (self[e31] * other[e125]) + (self[e15] * other[e12345]) + (self[e25] * other[e435]) + (self[e35] * other[e2]) - (self[e35] * other[e425]),
                (self[e31] * other[e5]) + (self[e12] * other[e235]) + (self[e15] * other[e3]) + (self[e25] * other[e12345]) + (self[e35] * other[e415]) - (self[e35] * other[e1]),
                (self[e23] * other[e315]) + (self[e12] * other[e5]) + (self[e15] * other[e425]) + (self[e25] * other[e1]) + (self[e35] * other[e12345]) - (self[e35] * other[e321]),
                0.0,
            ]) - (Simd32x4::from([other[e3], other[e321], other[e415], other[e412]]) * self.group1().yyy().with_w(self[e12]))
                - (other.group1().wz().with_zw(other[e2], other[e431]) * self.group1().xxx().with_w(self[e31]))
                - (self.group0().zxy() * other.group2().yzx()).with_w(self[e23] * other[e423]),
            // e4235, e4315, e4125, e3215
            (other.group3().yzxx() * self.group0().zxy().with_w(self[e15]))
                + Simd32x3::from(0.0).with_w((self[e35] * other[e3]) - (self[e25] * other[e425]) - (self[e35] * other[e435]))
                + (self.group1().zxy() * other.group0().yzx()).with_w(self[e25] * other[e2])
                - (other.group0().zx().with_zw(other[e4], other[e415]) * self.group1().yzz().with_w(self[e15]))
                - (other.group1().ww().with_zw(other[e2], other[e235]) * self.group0().xyx().with_w(self[e23]))
                - (other.group3().zx().with_zw(other[e321], other[e315]) * self.group0().yzz().with_w(self[e31]))
                - (other.group3().ww().with_zw(other[e431], other[e125]) * self.group1().xyx().with_w(self[e12])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for AntiLine {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       66      110        0
    //    simd3        0       12        0
    //    simd4       24       14        0
    // Totals...
    // yes simd       90      136        0
    //  no simd      162      202        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                -(self[e23] * other[e1234]) - (self[e31] * other[e43]),
                -(self[e31] * other[e1234]) - (self[e12] * other[e41]),
                -(self[e23] * other[e42]) - (self[e12] * other[e1234]),
                (self[e31] * other[e31]) + (self[e12] * other[e12]) + (self[e15] * other[e41]) + (self[e25] * other[e42]) + (self[e35] * other[e43]),
            ]) + (self.group0().zxy() * other.group0().yzx()).with_w(self[e23] * other[e23]),
            // e415, e425, e435, e321
            Simd32x4::from([self[e25] * other[e43] * -1.0, self[e35] * other[e41] * -1.0, self[e35] * other[e1234] * -1.0, self[e35] * other[e43]])
                + (other.group0().yzxy() * self.group1().zxy().with_w(self[e25]))
                + (self.group0().zxy() * other.group1().yzx()).with_w(self[e15] * other[e41])
                - (other.group0().ww().with_zw(other[e31], other[e4235]) * self.group0().xyx().with_w(self[e23]))
                - (other.group1().zx().with_zw(other[scalar], other[e4315]) * self.group0().yzz().with_w(self[e31]))
                - (other.group2().ww().with_zw(other[e42], other[e4125]) * self.group1().xyx().with_w(self[e12])),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e23] * other[e3215])
                    - (self[e31] * other[e35])
                    - (self[e15] * other[scalar])
                    - (self[e15] * other[e45])
                    - (self[e25] * other[e12])
                    - (self[e25] * other[e4125]),
                -(self[e31] * other[e3215])
                    - (self[e12] * other[e15])
                    - (self[e25] * other[scalar])
                    - (self[e25] * other[e45])
                    - (self[e35] * other[e23])
                    - (self[e35] * other[e4235]),
                -(self[e23] * other[e25])
                    - (self[e12] * other[e3215])
                    - (self[e15] * other[e31])
                    - (self[e15] * other[e4315])
                    - (self[e35] * other[scalar])
                    - (self[e35] * other[e45]),
                (self[e15] * other[e23])
                    + (self[e15] * other[e4235])
                    + (self[e25] * other[e31])
                    + (self[e25] * other[e4315])
                    + (self[e35] * other[e12])
                    + (self[e35] * other[e4125]),
            ]) + (other.group2().yzxx() * self.group0().zxy().with_w(self[e23]))
                + (self.group1().zxy() * other.group1().yzx()).with_w(self[e31] * other[e25])
                + (self.group1().zxy() * other.group3().yzx()).with_w(self[e12] * other[e35]),
            // e1, e2, e3, e4
            Simd32x4::from([
                -(self[e12] * other[e4315]) - (self[e15] * other[e1234]) - (self[e25] * other[e43]),
                -(self[e23] * other[e4125]) - (self[e25] * other[e1234]) - (self[e35] * other[e41]),
                -(self[e31] * other[e4235]) - (self[e15] * other[e42]) - (self[e35] * other[e1234]),
                0.0,
            ]) + (other.group0().yzxz() * self.group1().zxy().with_w(self[e12]))
                + (other.group1().ww().with_zw(other[e4315], other[e41]) * self.group0().xyx().with_w(self[e23]))
                + (other.group3().zx().with_zw(other[e45], other[e42]) * self.group0().yzz().with_w(self[e31])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl std::ops::Div<anti_sandwich> for AntiMotor {
    type Output = anti_sandwich_partial<AntiMotor>;
    fn div(self, _rhs: anti_sandwich) -> Self::Output {
        anti_sandwich_partial(self)
    }
}
impl AntiSandwich<AntiCircleRotor> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       65      105        0
    //    simd3        0        6        0
    //    simd4       30       26        0
    // Totals...
    // yes simd       95      137        0
    //  no simd      185      227        0
    fn anti_sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                other[e43] * self[e31] * -1.0,
                other[e42] * self[scalar] * -1.0,
                other[e43] * self[scalar] * -1.0,
                (other[e42] * self[e25]) + (other[e43] * self[e35]) + (other[e23] * self[e23]) + (other[e31] * self[e31]) + (other[e12] * self[e12]),
            ]) + (other.group0().yzx() * self.group0().zxy()).with_w(other[e41] * self[e15])
                - (self.group0().wzxw() * other.group0().xxy().with_w(other[scalar])),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(other[e41] * self[e3215]) - (other[e43] * self[e25]) - (other[e23] * self[scalar]) - (other[e12] * self[e31]) - (other[scalar] * self[e23]),
                -(other[e41] * self[e35]) - (other[e42] * self[e3215]) - (other[e23] * self[e12]) - (other[e31] * self[scalar]) - (other[scalar] * self[e31]),
                -(other[e42] * self[e15]) - (other[e43] * self[e3215]) - (other[e31] * self[e23]) - (other[e12] * self[scalar]) - (other[scalar] * self[e12]),
                (other[e43] * self[e35]) + (other[e45] * self[scalar]),
            ]) + (self.group1().zxyx() * other.group0().yzx().with_w(other[e41]))
                + (other.group1().yzx() * self.group0().zxy()).with_w(other[e42] * self[e25]),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(other[e45] * self[e15]) - (other[e15] * self[scalar]) - (other[e35] * self[e31]) - (other[scalar] * self[e15]),
                -(other[e45] * self[e25]) - (other[e15] * self[e12]) - (other[e25] * self[scalar]) - (other[scalar] * self[e25]),
                -(other[e45] * self[e35]) - (other[e25] * self[e23]) - (other[e35] * self[scalar]) - (other[scalar] * self[e35]),
                (other[e12] * self[e35]) + (other[e15] * self[e23]) + (other[e25] * self[e31]) + (other[e35] * self[e12]),
            ]) + (other.group1().yzxx() * self.group1().zxyx())
                + (other.group2().yzx() * self.group0().zxy()).with_w(other[e31] * self[e25])
                - (other.group1().xxyw() * self.group1().wzxw())
                - (self.group1().ywww() * other.group1().zyz().with_w(other[scalar])),
            // e1, e2, e3, e4
            Simd32x4::from([
                -(other[e41] * self[e3215]) - (other[e43] * self[e25]),
                -(other[e41] * self[e35]) - (other[e42] * self[e3215]),
                -(other[e42] * self[e15]) - (other[e43] * self[e3215]),
                other[e43] * self[e12],
            ]) + (self.group0().xyzy() * other.group1().www().with_w(other[e42]))
                + (other.group0().yzx() * self.group1().zxy()).with_w(other[e41] * self[e23]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDipoleInversion> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       44       77        0
    //    simd3        0       10        0
    //    simd4       45       38        0
    // Totals...
    // yes simd       89      125        0
    //  no simd      224      259        0
    fn anti_sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e412] * self[e31]) + (other[e4] * self[e23]),
                (other[e431] * self[scalar]) + (other[e4] * self[e31]),
                (other[e412] * self[scalar]) + (other[e4] * self[e12]),
                -(other[e431] * self[e25]) - (other[e412] * self[e35]) - (other[e415] * self[e23]) - (other[e425] * self[e31]) - (other[e435] * self[e12]),
            ]) + (other.group0().xxy() * self.group0().wzx()).with_w(other[e4] * self[e3215])
                - (other.group0().yzx() * self.group0().zxy()).with_w(other[e423] * self[e15]),
            // e23, e31, e12, e45
            (self.group0().ywwx() * other.group1().zyz().with_w(other[e1]))
                + (self.group1().ywwy() * other.group0().zyz().with_w(other[e431]))
                + (self.group1().wzxx() * other.group0().xxy().with_w(other[e423]))
                + Simd32x3::from(0.0).with_w(other[e3] * self[e12])
                + (other.group1().xxy() * self.group0().wzx()).with_w(other[e412] * self[e35])
                + (other.group2().www() * self.group1().xyz()).with_w(other[e2] * self[e31])
                - (other.group0().yzx() * self.group1().zxy()).with_w(other[e321] * self[scalar])
                - (other.group1().yzx() * self.group0().zxy()).with_w(other[e4] * self[e3215]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e435] * self[e25]) + (other[e235] * self[scalar]) + (other[e125] * self[e31]) + (other[e2] * self[e35]) + (other[e5] * self[e23])
                    - (other[e1] * self[e3215])
                    - (other[e3] * self[e25]),
                (other[e425] * self[e3215]) + (other[e235] * self[e12]) + (other[e315] * self[scalar]) + (other[e3] * self[e15]) + (other[e5] * self[e31])
                    - (other[e1] * self[e35])
                    - (other[e2] * self[e3215]),
                (other[e435] * self[e3215]) + (other[e315] * self[e23]) + (other[e125] * self[scalar]) + (other[e1] * self[e25]) + (other[e5] * self[e12])
                    - (other[e2] * self[e15])
                    - (other[e3] * self[e3215]),
                0.0,
            ]) + (other.group1().xxy() * self.group1().wzx()).with_w(other[e4] * self[scalar])
                - (self.group0().zxyz() * other.group2().yzx().with_w(other[e412]))
                - (other.group1().yzx() * self.group1().zxy()).with_w(other[e423] * self[e23])
                - (other.group1().www() * self.group1().xyz()).with_w(other[e431] * self[e31]),
            // e4235, e4315, e4125, e3215
            (other.group3().yzxy() * self.group0().zxy().with_w(self[e25]))
                + (self.group1().zxyx() * other.group0().yzx().with_w(other[e1]))
                + Simd32x3::from(0.0).with_w((other[e3] * self[e35]) + (other[e5] * self[scalar]) - (other[e125] * self[e12]))
                - (self.group1() * other.group2().www().with_w(other[e321]))
                - (other.group1().wwwz() * self.group0().xyz().with_w(self[e35]))
                - (self.group0().ywwy() * other.group3().zyz().with_w(other[e315]))
                - (self.group0().wzxx() * other.group3().xxy().with_w(other[e235]))
                - (self.group1().ywwy() * other.group0().zyz().with_w(other[e425]))
                - (self.group1().wzxx() * other.group0().xxy().with_w(other[e415])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum> for AntiMotor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       26        0
    //    simd3        0        2        0
    //    simd4        7       10        0
    // Totals...
    // yes simd       23       38        0
    //  no simd       44       72        0
    fn anti_sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(other[scalar]) * self.group0() * Simd32x4::from(-1.0),
            // e235, e315, e125, e5
            -(Simd32x4::from(other[e3215]) * self.group0()) - (Simd32x4::from(other[scalar]) * self.group1()),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlatPoint> for AntiMotor {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       22        0
    //    simd3        3        4        0
    //    simd4        8       12        0
    // Totals...
    // yes simd       26       38        0
    //  no simd       56       82        0
    fn anti_sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            ((other.group0().xxy() * self.group0().wzx()) + (other.group0().zyz() * self.group0().yww())
                - (Simd32x3::from(other[e321]) * self.group1().xyz())
                - (other.group0().yzx() * self.group0().zxy()))
            .with_w(other[e321] * self[scalar] * -1.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e23], self[e31], self[e12], 1.0])
                * other
                    .group0()
                    .www()
                    .with_w(-(other[e235] * self[e23]) - (other[e315] * self[e31]) - (other[e125] * self[e12]) - (other[e321] * self[e3215]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlector> for AntiMotor {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       32        0
    //    simd4       16       18        0
    // Totals...
    // yes simd       40       50        0
    //  no simd       88      104        0
    fn anti_sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e5] * self[e23]) - (other[e321] * self[e15]) - (other[e1] * self[e3215]) - (other[e3] * self[e25]),
                (other[e5] * self[e31]) - (other[e321] * self[e25]) - (other[e1] * self[e35]) - (other[e2] * self[e3215]),
                (other[e5] * self[e12]) - (other[e321] * self[e35]) - (other[e2] * self[e15]) - (other[e3] * self[e3215]),
                0.0,
            ]) + (other.group1().yzxz() * self.group1().zxy().with_w(self[e12]))
                + (self.group0().ywwy() * other.group0().zyz().with_w(other[e2]))
                + (self.group0().wzxx() * other.group0().xxy().with_w(other[e1]))
                - (other.group0().yzxw() * self.group0().zxyw()),
            // e4235, e4315, e4125, e3215
            (other.group1().yzxx() * self.group0().zxy().with_w(self[e15]))
                + Simd32x3::from(0.0).with_w((other[e2] * self[e25]) + (other[e3] * self[e35]) + (other[e5] * self[scalar]) - (other[e321] * self[e3215]))
                - (other.group0().wwwx() * self.group0().xyzx())
                - (self.group0().ywwz() * other.group1().zyz().with_w(other[e125]))
                - (self.group0().wzxy() * other.group1().xxy().with_w(other[e315])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiLine> for AntiMotor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       51        0
    //    simd3        0        3        0
    //    simd4        9        8        0
    // Totals...
    // yes simd       41       62        0
    //  no simd       68       92        0
    fn anti_sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                -(other[e23] * self[scalar]) - (other[e12] * self[e31]),
                -(other[e23] * self[e12]) - (other[e31] * self[scalar]),
                -(other[e31] * self[e23]) - (other[e12] * self[scalar]),
                (other[e31] * self[e31]) + (other[e12] * self[e12]),
            ]) + (self.group0().zxyx() * other.group0().yzx().with_w(other[e23])),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(other[e23] * self[e3215]) - (other[e12] * self[e25]) - (other[e15] * self[scalar]) - (other[e35] * self[e31]),
                -(other[e23] * self[e35]) - (other[e31] * self[e3215]) - (other[e15] * self[e12]) - (other[e25] * self[scalar]),
                -(other[e31] * self[e15]) - (other[e12] * self[e3215]) - (other[e25] * self[e23]) - (other[e35] * self[scalar]),
                (other[e12] * self[e35]) + (other[e15] * self[e23]) + (other[e25] * self[e31]) + (other[e35] * self[e12]),
            ]) + (self.group1().zxyx() * other.group0().yzx().with_w(other[e23]))
                + (other.group1().yzx() * self.group0().zxy()).with_w(other[e31] * self[e25]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiMotor> for AntiMotor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       52        0
    //    simd3        0        4        0
    //    simd4       12       10        0
    // Totals...
    // yes simd       44       66        0
    //  no simd       80      104        0
    fn anti_sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                -(other[e12] * self[e31]) - (other[scalar] * self[e23]),
                -(other[e31] * self[scalar]) - (other[scalar] * self[e31]),
                -(other[e12] * self[scalar]) - (other[scalar] * self[e12]),
                (other[e31] * self[e31]) + (other[e12] * self[e12]),
            ]) + (other.group0().yzxx() * self.group0().zxyx())
                - (other.group0().xxyw() * self.group0().wzxw()),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(other[scalar] * self[e15]) - (other[e15] * self[scalar]) - (other[e35] * self[e31]) - (other[e3215] * self[e23]),
                -(other[scalar] * self[e25]) - (other[e15] * self[e12]) - (other[e25] * self[scalar]) - (other[e3215] * self[e31]),
                -(other[scalar] * self[e35]) - (other[e25] * self[e23]) - (other[e35] * self[scalar]) - (other[e3215] * self[e12]),
                (other[e12] * self[e35]) + (other[e15] * self[e23]) + (other[e25] * self[e31]) + (other[e35] * self[e12]),
            ]) + (other.group0().yzxx() * self.group1().zxyx())
                + (other.group1().yzx() * self.group0().zxy()).with_w(other[e31] * self[e25])
                - (other.group0().xxyw() * self.group1().wzxw())
                - (other.group0().zyz() * self.group1().yww()).with_w(other[e3215] * self[scalar]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiPlane> for AntiMotor {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       32        0
    //    simd4       11       13        0
    // Totals...
    // yes simd       31       45        0
    //  no simd       64       84        0
    fn anti_sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                -(self[e25] * other[e3]) - (self[e3215] * other[e1]),
                -(self[e35] * other[e1]) - (self[e3215] * other[e2]),
                -(self[e15] * other[e2]) - (self[e3215] * other[e3]),
                self[e12] * other[e3],
            ]) + (self.group0().xyzx() * other.group0().wwwx())
                + (other.group0().yzxy() * self.group1().zxy().with_w(self[e31])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(self[e31] * other[e3]) - (self[scalar] * other[e1]),
                -(self[e12] * other[e1]) - (self[scalar] * other[e2]),
                -(self[e23] * other[e2]) - (self[scalar] * other[e3]),
                (self[e15] * other[e1]) + (self[e25] * other[e2]) + (self[e35] * other[e3]),
            ]) + (self.group0().zxyw() * other.group0().yzxw()),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiScalar> for AntiMotor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       26        0
    //    simd3        0        2        0
    //    simd4        6        8        0
    // Totals...
    // yes simd       22       36        0
    //  no simd       40       64        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(other[e12345]) * self.group0(),
            // e15, e25, e35, e3215
            Simd32x4::from(other[e12345]) * self.group1(),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       39       76        0
    //    simd3        0        9        0
    //    simd4       35       29        0
    // Totals...
    // yes simd       74      114        0
    //  no simd      179      219        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e31] * other[e412]) + (self[scalar] * other[e423]),
                (self[e12] * other[e423]) + (self[scalar] * other[e431]),
                (self[e23] * other[e431]) + (self[scalar] * other[e412]),
                -(self[e23] * other[e415]) - (self[e31] * other[e425]) - (self[e12] * other[e435]) - (self[e25] * other[e431]) - (self[e35] * other[e412]),
            ]) - (other.group0().yzx() * self.group0().zxy()).with_w(self[e15] * other[e423]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[scalar] * other[e415]) - (self[e12] * other[e425]),
                (self[scalar] * other[e425]) - (self[e23] * other[e435]),
                (self[scalar] * other[e435]) - (self[e31] * other[e415]),
                0.0,
            ]) + (self.group1().ywwy() * other.group0().zyz().with_w(other[e431]))
                + (self.group1().wzxx() * other.group0().xxy().with_w(other[e423]))
                + (self.group0().yzx() * other.group1().zxy()).with_w(self[e35] * other[e412])
                - (other.group0().yzx() * self.group1().zxy()).with_w(self[scalar] * other[e321]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e31] * other[e125]) + (self[scalar] * other[e235]) + (self[e25] * other[e435]) + (self[e3215] * other[e415]),
                (self[e12] * other[e235]) + (self[scalar] * other[e315]) + (self[e35] * other[e415]) + (self[e3215] * other[e425]),
                (self[e23] * other[e315]) + (self[scalar] * other[e125]) + (self[e15] * other[e425]) + (self[e3215] * other[e435]),
                0.0,
            ]) - (self.group0().zxyx() * other.group2().yzx().with_w(other[e423]))
                - (self.group1().xxy() * other.group1().wzx()).with_w(self[e31] * other[e431])
                - (self.group1().zyz() * other.group1().yww()).with_w(self[e12] * other[e412]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e35] * other[e431],
                self[e15] * other[e412],
                self[e25] * other[e423],
                -(self[e15] * other[e415]) - (self[e25] * other[e425]) - (self[e35] * other[e435]) - (self[e3215] * other[e321]),
            ]) - (other.group0().xxy() * self.group1().wzx()).with_w(self[e23] * other[e235])
                - (other.group0().zyz() * self.group1().yww()).with_w(self[e31] * other[e315])
                - (other.group1().www() * self.group0().xyz()).with_w(self[e12] * other[e125]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       42       77        0
    //    simd3        0       10        0
    //    simd4       37       30        0
    // Totals...
    // yes simd       79      117        0
    //  no simd      190      227        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e31] * other[e412],
                self[scalar] * other[e431],
                self[scalar] * other[e412],
                -(self[e23] * other[e415]) - (self[e31] * other[e425]) - (self[e12] * other[e435]) - (self[e25] * other[e431]) - (self[e35] * other[e412]),
            ]) + (other.group0().xxy() * self.group0().wzx()).with_w(self[scalar] * other[e12345])
                - (other.group0().yzx() * self.group0().zxy()).with_w(self[e15] * other[e423]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e31] * other[e435]) + (self[scalar] * other[e415]) - (self[e12] * other[e425]),
                (self[e12] * other[e415]) + (self[scalar] * other[e425]) - (self[e23] * other[e435]),
                (self[e12] * other[e12345]) + (self[scalar] * other[e435]) - (self[e31] * other[e415]),
                0.0,
            ]) + (self.group1().ywwy() * other.group0().zyz().with_w(other[e431]))
                + (self.group1().wzxx() * other.group0().xxy().with_w(other[e423]))
                + (other.group2().ww().with_zw(other[e425], self[e35]) * self.group0().xyx().with_w(other[e412]))
                - (other.group0().yzx() * self.group1().zxy()).with_w(self[scalar] * other[e321]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e31] * other[e125]) + (self[scalar] * other[e235]) + (self[e15] * other[e12345]) + (self[e25] * other[e435]) + (self[e3215] * other[e415]),
                (self[e12] * other[e235]) + (self[scalar] * other[e315]) + (self[e25] * other[e12345]) + (self[e35] * other[e415]) + (self[e3215] * other[e425]),
                (self[e23] * other[e315]) + (self[scalar] * other[e125]) + (self[e15] * other[e425]) + (self[e35] * other[e12345]) + (self[e3215] * other[e435]),
                0.0,
            ]) - (self.group0().zxy() * other.group2().yzx()).with_w(self[e23] * other[e423])
                - (self.group1().xxy() * other.group1().wzx()).with_w(self[e31] * other[e431])
                - (self.group1().zyz() * other.group1().yww()).with_w(self[e12] * other[e412]),
            // e4235, e4315, e4125, e3215
            Simd32x3::from(0.0).with_w(-(self[e15] * other[e415]) - (self[e25] * other[e425]) - (self[e35] * other[e435]) - (self[e3215] * other[e321]))
                + (other.group0().yzx() * self.group1().zxy()).with_w(self[e3215] * other[e12345])
                - (self.group0().xyzz() * other.group1().www().with_w(other[e125]))
                - (other.group0().xxy() * self.group1().wzx()).with_w(self[e23] * other[e235])
                - (other.group0().zyz() * self.group1().yww()).with_w(self[e31] * other[e315]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       65      104        0
    //    simd3        0        8        0
    //    simd4       28       22        0
    // Totals...
    // yes simd       93      134        0
    //  no simd      177      216        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                -(self[e31] * other[e43]) - (self[scalar] * other[e41]),
                -(self[e12] * other[e41]) - (self[scalar] * other[e42]),
                -(self[e23] * other[e42]) - (self[scalar] * other[e43]),
                (self[e23] * other[e23]) + (self[e31] * other[e31]) + (self[e12] * other[e12]) + (self[e25] * other[e42]) + (self[e35] * other[e43]),
            ]) + (other.group0().yzx() * self.group0().zxy()).with_w(self[e15] * other[e41]),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(self[e31] * other[e12]) - (self[scalar] * other[e23]) - (self[e25] * other[e43]) - (self[e3215] * other[e41]),
                -(self[e12] * other[e23]) - (self[scalar] * other[e31]) - (self[e35] * other[e41]) - (self[e3215] * other[e42]),
                -(self[e23] * other[e31]) - (self[scalar] * other[e12]) - (self[e15] * other[e42]) - (self[e3215] * other[e43]),
                (self[scalar] * other[e45]) + (self[e35] * other[e43]),
            ]) + (self.group1().zxyx() * other.group0().yzx().with_w(other[e41]))
                + (self.group0().zxy() * other.group1().yzx()).with_w(self[e25] * other[e42]),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e31] * other[e35]) - (self[e15] * other[e45]) - (self[e25] * other[e12]) - (self[e3215] * other[e23]),
                -(self[scalar] * other[e25]) - (self[e25] * other[e45]) - (self[e35] * other[e23]) - (self[e3215] * other[e31]),
                -(self[scalar] * other[e35]) - (self[e15] * other[e31]) - (self[e35] * other[e45]) - (self[e3215] * other[e12]),
                (self[e12] * other[e35]) + (self[e15] * other[e23]) + (self[e25] * other[e31]) + (self[e35] * other[e12]),
            ]) + (self.group0().zxyx() * other.group2().yzx().with_w(other[e15]))
                + (self.group1().zxy() * other.group1().yzx()).with_w(self[e31] * other[e25])
                - (other.group2().xxy() * self.group0().wzx()).with_w(self[e3215] * other[e45]),
            // e1, e2, e3, e4
            Simd32x4::from([
                -(self[e25] * other[e43]) - (self[e3215] * other[e41]),
                -(self[e35] * other[e41]) - (self[e3215] * other[e42]),
                -(self[e15] * other[e42]) - (self[e3215] * other[e43]),
                self[e12] * other[e43],
            ]) + (other.group0().yzx() * self.group1().zxy()).with_w(self[e23] * other[e41])
                + (other.group1().www() * self.group0().xyz()).with_w(self[e31] * other[e42]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       70      115        0
    //    simd3        0       12        0
    //    simd4       37       27        0
    // Totals...
    // yes simd      107      154        0
    //  no simd      218      259        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                -(self[e23] * other[e1234]) - (self[e31] * other[e43]),
                -(self[e31] * other[e1234]) - (self[scalar] * other[e42]),
                -(self[e12] * other[e1234]) - (self[scalar] * other[e43]),
                (self[e23] * other[e23]) + (self[e31] * other[e31]) + (self[e12] * other[e12]) + (self[e25] * other[e42]) + (self[e35] * other[e43]),
            ]) + (other.group0().yzx() * self.group0().zxy()).with_w(self[e15] * other[e41])
                - (other.group0().xxy() * self.group0().wzx()).with_w(self[e3215] * other[e1234]),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e15] * other[e1234] * -1.0,
                self[e25] * other[e1234] * -1.0,
                self[e35] * other[e1234] * -1.0,
                (self[scalar] * other[e45]) + (self[e35] * other[e43]),
            ]) + (self.group1().zxyx() * other.group0().yzx().with_w(other[e41]))
                + (self.group0().zxy() * other.group1().yzx()).with_w(self[e25] * other[e42])
                - (self.group0().yzxz() * other.group1().zxy().with_w(other[e4125]))
                - (other.group0().xxy() * self.group1().wzx()).with_w(self[e23] * other[e4235])
                - (other.group0().zyz() * self.group1().yww()).with_w(self[e31] * other[e4315])
                - (self.group0().www() * other.group1().xyz()).with_w(self[e3215] * other[e1234]),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[scalar] * other[e15])
                    - (self[e15] * other[e45])
                    - (self[e25] * other[e12])
                    - (self[e25] * other[e4125])
                    - (self[e3215] * other[e23])
                    - (self[e3215] * other[e4235]),
                -(self[scalar] * other[e25])
                    - (self[e25] * other[e45])
                    - (self[e35] * other[e23])
                    - (self[e35] * other[e4235])
                    - (self[e3215] * other[e31])
                    - (self[e3215] * other[e4315]),
                -(self[scalar] * other[e35])
                    - (self[e15] * other[e31])
                    - (self[e15] * other[e4315])
                    - (self[e35] * other[e45])
                    - (self[e3215] * other[e12])
                    - (self[e3215] * other[e4125]),
                (self[e15] * other[e23])
                    + (self[e15] * other[e4235])
                    + (self[e25] * other[e31])
                    + (self[e25] * other[e4315])
                    + (self[e35] * other[e12])
                    + (self[e35] * other[e4125]),
            ]) + (self.group0().zxyx() * other.group2().yzxx())
                + (self.group1().zxy() * other.group1().yzx()).with_w(self[e31] * other[e25])
                + (self.group1().zxy() * other.group3().yzx()).with_w(self[e12] * other[e35])
                - (self.group0().xyxw() * other.group3().ww().with_zw(other[e25], other[e3215]))
                - (other.group2().zx().with_zw(other[e3215], other[e45]) * self.group0().yzz().with_w(self[e3215])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[scalar] * other[e4235]) - (self[e12] * other[e4315]) - (self[e15] * other[e1234]) - (self[e25] * other[e43]),
                (self[scalar] * other[e4315]) - (self[e23] * other[e4125]) - (self[e25] * other[e1234]) - (self[e3215] * other[e42]),
                (self[scalar] * other[e4125]) - (self[e31] * other[e4235]) - (self[e35] * other[e1234]) - (self[e3215] * other[e43]),
                0.0,
            ]) + (other.group1().ww().with_zw(other[e4315], self[e31]) * self.group0().xyx().with_w(other[e42]))
                + (other.group3().zx().with_zw(other[e45], self[e12]) * self.group0().yzz().with_w(other[e43]))
                + (other.group0().yzx() * self.group1().zxy()).with_w(self[e23] * other[e41])
                - (other.group0().xxy() * self.group1().wzx()).with_w(self[scalar] * other[e1234]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum> for AntiMotor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       26        0
    //    simd3        0        2        0
    //    simd4        7        9        0
    // Totals...
    // yes simd       23       37        0
    //  no simd       44       68        0
    fn anti_sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(other[e12345]) * self.group0(),
            // e15, e25, e35, e3215
            (Simd32x4::from(other[e5]) * self.group0()) + (Simd32x4::from(other[e12345]) * self.group1()),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for AntiMotor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       23        0
    //    simd3        3        6        0
    //    simd4        8        9        0
    // Totals...
    // yes simd       26       38        0
    //  no simd       56       77        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            ((self.group0().zxy() * other.group0().yzx())
                - (Simd32x3::from(self[scalar]) * other.group0().xyz())
                - (Simd32x3::from(other[e45]) * self.group1().xyz())
                - (self.group0().yzx() * other.group0().zxy()))
            .with_w(self[scalar] * other[e45]),
            // e1, e2, e3, e5
            Simd32x4::from([other[e45], other[e45], other[e45], 1.0])
                * self
                    .group0()
                    .xyz()
                    .with_w((self[e23] * other[e15]) + (self[e31] * other[e25]) + (self[e12] * other[e35]) - (self[e3215] * other[e45])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for AntiMotor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       34        0
    //    simd3        0        2        0
    //    simd4       16       16        0
    // Totals...
    // yes simd       40       52        0
    //  no simd       88      104        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (self[e35] * other[e4315]) - (self[e15] * other[e45]) - (self[e25] * other[e4125]) - (self[e3215] * other[e4235]),
                (self[e15] * other[e4125]) - (self[e25] * other[e45]) - (self[e35] * other[e4235]) - (self[e3215] * other[e4315]),
                (self[e25] * other[e4235]) - (self[e15] * other[e4315]) - (self[e35] * other[e45]) - (self[e3215] * other[e4125]),
                0.0,
            ]) + (self.group0().zxyw() * other.group0().yzxw())
                - (self.group0().xyxx() * other.group1().ww().with_zw(other[e25], other[e4235]))
                - (self.group0().yzzy() * other.group0().zx().with_zw(other[e3215], other[e4315]))
                - (self.group0().wwwz() * other.group0().xyz().with_w(other[e4125])),
            // e1, e2, e3, e5
            (self.group0().xyxx() * other.group0().ww().with_zw(other[e4315], other[e15]))
                + (self.group0().yzzy() * other.group1().zx().with_zw(other[e45], other[e25]))
                + (self.group0().wwwz() * other.group1().xyz().with_w(other[e35]))
                + Simd32x3::from(0.0).with_w((self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125]) - (self[e3215] * other[e45]))
                - (self.group0().zxyw() * other.group1().yzxw()),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for AntiMotor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       51        0
    //    simd3        0        3        0
    //    simd4        9        8        0
    // Totals...
    // yes simd       41       62        0
    //  no simd       68       92        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self[e31] * other[e435]) + (self[scalar] * other[e415]),
                (self[e12] * other[e415]) + (self[scalar] * other[e425]),
                (self[e23] * other[e425]) + (self[scalar] * other[e435]),
                -(self[e31] * other[e425]) - (self[e12] * other[e435]),
            ]) - (self.group0().zxyx() * other.group0().yzx().with_w(other[e415])),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self[e31] * other[e125]) + (self[scalar] * other[e235]) + (self[e25] * other[e435]) + (self[e3215] * other[e415]),
                (self[e12] * other[e235]) + (self[scalar] * other[e315]) + (self[e35] * other[e415]) + (self[e3215] * other[e425]),
                (self[e23] * other[e315]) + (self[scalar] * other[e125]) + (self[e15] * other[e425]) + (self[e3215] * other[e435]),
                -(self[e23] * other[e235]) - (self[e31] * other[e315]) - (self[e12] * other[e125]) - (self[e35] * other[e435]),
            ]) - (self.group1().zxyx() * other.group0().yzx().with_w(other[e415]))
                - (other.group1().yzx() * self.group0().zxy()).with_w(self[e25] * other[e425]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for AntiMotor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       52        0
    //    simd3        0        4        0
    //    simd4       12       10        0
    // Totals...
    // yes simd       44       66        0
    //  no simd       80      104        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self[e31] * other[e435]) + (self[scalar] * other[e415]),
                (self[e12] * other[e415]) + (self[scalar] * other[e425]),
                (self[e12] * other[e12345]) + (self[scalar] * other[e435]),
                -(self[e31] * other[e425]) - (self[e12] * other[e435]),
            ]) + (self.group0().xyxw() * other.group0().wwyw())
                - (self.group0().zxyx() * other.group0().yzxx()),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self[scalar] * other[e235]) + (self[e15] * other[e12345]) + (self[e25] * other[e435]) + (self[e3215] * other[e415]),
                (self[scalar] * other[e315]) + (self[e25] * other[e12345]) + (self[e35] * other[e415]) + (self[e3215] * other[e425]),
                (self[scalar] * other[e125]) + (self[e15] * other[e425]) + (self[e35] * other[e12345]) + (self[e3215] * other[e435]),
                -(self[e12] * other[e125]) - (self[e15] * other[e415]) - (self[e25] * other[e425]) - (self[e35] * other[e435]),
            ]) + (self.group0().xyxw() * other.group1().wwyw())
                + (self.group0().yzz() * other.group1().zxw()).with_w(self[e3215] * other[e12345])
                - (self.group0().zxyx() * other.group1().yzxx())
                - (self.group1().zxy() * other.group0().yzx()).with_w(self[e31] * other[e315]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for AntiMotor {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       90      148        0
    //    simd2        8        8        0
    //    simd3       48       83        0
    //    simd4       51       27        0
    // Totals...
    // yes simd      197      266        0
    //  no simd      454      521        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                -(self[e31] * other[e425]) - (self[e12] * other[e435]) - (self[e25] * other[e431]) - (self[e35] * other[e412]),
                (self[e31] * other[e31]) + (self[e12] * other[e12]) + (self[e25] * other[e42]) + (self[e35] * other[e43]),
            ]) + (Simd32x2::from([other[e12345], other[e23]]) * self.group0().wx())
                + (Simd32x2::from([other[e4], other[e41]]) * self.group1().wx())
                - (Simd32x2::from([other[e415], other[scalar]]) * self.group0().xw())
                - (Simd32x2::from([other[e423], other[e1234]]) * self.group1().xw()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[scalar] * other[e4235]) - (self[e12] * other[e4315]) - (self[e15] * other[e1234]) - (self[e25] * other[e43]),
                (self[scalar] * other[e4315]) - (self[e23] * other[e4125]) - (self[e25] * other[e1234]) - (self[e3215] * other[e42]),
                (self[scalar] * other[e4125]) - (self[e31] * other[e4235]) - (self[e35] * other[e1234]) - (self[e3215] * other[e43]),
                0.0,
            ]) + (other.group3().ww().with_zw(other[e4315], self[e31]) * self.group0().xyx().with_w(other[e42]))
                + (other.group9().zx().with_zw(other[e45], self[e12]) * self.group0().yzz().with_w(other[e43]))
                + (other.group4().yzx() * self.group1().zxy()).with_w(self[e23] * other[e41])
                - (other.group4().xxy() * self.group1().wzx()).with_w(self[scalar] * other[e1234]),
            // e5
            (self[e23] * other[e15])
                + (self[e31] * other[e25])
                + (self[e12] * other[e35])
                + (self[e15] * other[e23])
                + (self[e15] * other[e4235])
                + (self[e25] * other[e31])
                + (self[e25] * other[e4315])
                + (self[e35] * other[e12])
                + (self[e35] * other[e4125])
                - (self[scalar] * other[e3215])
                - (self[e3215] * other[scalar])
                - (self[e3215] * other[e45]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e3215] * other[e415]) - (self[e25] * other[e3]) - (self[e35] * other[e425]) - (self[e3215] * other[e1]),
                (self[e3215] * other[e425]) - (self[e25] * other[e321]) - (self[e35] * other[e1]) - (self[e3215] * other[e2]),
                (self[e3215] * other[e435]) - (self[e25] * other[e415]) - (self[e35] * other[e321]) - (self[e3215] * other[e3]),
                0.0,
            ]) + (Simd32x4::from([other[e2], other[e415], other[e1], other[e3]]) * self.group1().zzy().with_w(self[e12]))
                + (Simd32x4::from([other[e5], other[e5], other[e5], other[e1]]) * self.group0().xyzx())
                + (Simd32x4::from([other[e435], other[e3], other[e425], other[e2]]) * self.group1().yxx().with_w(self[e31]))
                + (self.group1().xyzx() * other.group0().yy().with_zw(other[e12345], other[e423]))
                + (other.group8().xxy() * self.group0().wzx()).with_w(self[e25] * other[e431])
                + (other.group8().zyz() * self.group0().yww()).with_w(self[e35] * other[e412])
                - (self.group1().xxxw() * other.group6().wz().with_zw(other[e2], other[e4]))
                - (other.group8().yzx() * self.group0().zxy()).with_w(self[scalar] * other[e321]),
            // e41, e42, e43
            (Simd32x3::from(other[e4]) * self.group0().xyz()) + (other.group7().xxy() * self.group0().wzx()) + (other.group7().zyz() * self.group0().yww())
                - (other.group7().yzx() * self.group0().zxy()),
            // e23, e31, e12
            (Simd32x3::from(self[scalar]) * other.group6().xyz())
                + (Simd32x3::from(other[e12345]) * self.group0().xyz())
                + (Simd32x3::from(other[e4]) * self.group1().xyz())
                + (other.group7().xxy() * self.group1().wzx())
                + (other.group7().zyz() * self.group1().yww())
                + (self.group0().yzx() * other.group6().zxy())
                - (other.group7().yzx() * self.group1().zxy())
                - (self.group0().zxy() * other.group6().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(self[e31] * other[e12]) - (self[e15] * other[e1234]),
                -(self[scalar] * other[e31]) - (self[e25] * other[e1234]),
                -(self[scalar] * other[e12]) - (self[e35] * other[e1234]),
                (self[scalar] * other[e45]) + (self[e35] * other[e43]),
            ]) + (self.group1().zxyx() * other.group4().yzx().with_w(other[e41]))
                + (other.group5().yzx() * self.group0().zxy()).with_w(self[e25] * other[e42])
                - (other.group0().xx().with_zw(other[scalar], self[e23]) * self.group0().xyz().with_w(other[e4235]))
                - (other.group4().xxy() * self.group1().wzx()).with_w(self[e31] * other[e4315])
                - (other.group4().zyz() * self.group1().yww()).with_w(self[e12] * other[e4125])
                - (other.group5().xxy() * self.group0().wzx()).with_w(self[e3215] * other[e1234]),
            // e423, e431, e412
            (other.group4().yzx() * self.group0().zxy())
                - (Simd32x3::from(other[e1234]) * self.group0().xyz())
                - (other.group4().xxy() * self.group0().wzx())
                - (other.group4().zyz() * self.group0().yww()),
            // e235, e315, e125
            (other.group5().yzx() * self.group1().zxy()) + (self.group0().zxy() * other.group3().yzx()) + (self.group1().zxy() * other.group9().yzx())
                - (Simd32x3::from(self[scalar]) * other.group3().xyz())
                - (Simd32x3::from(self[e3215]) * other.group9().xyz())
                - (Simd32x3::from(other[scalar]) * self.group1().xyz())
                - (Simd32x3::from([other[e35], other[e15], other[e3215]]) * self.group0().yzz())
                - (Simd32x3::from([other[e45], other[e45], other[e4315]]) * self.group1().xyx())
                - (Simd32x3::from([other[e4125], other[e4235], other[e45]]) * self.group1().yzz())
                - (Simd32x3::from([other[e3215], other[e3215], other[e25]]) * self.group0().xyx())
                - (other.group5().xxy() * self.group1().wzx())
                - (other.group5().zyz() * self.group1().yww()),
            // e4235, e4315, e4125, e3215
            (self.group0().zxyw() * other.group1().yzx().with_w(other[e5]))
                + (self.group1().zxyw() * other.group7().yzx().with_w(other[e12345]))
                + Simd32x3::from(0.0).with_w((self[e15] * other[e1]) + (self[e25] * other[e2]) + (self[e35] * other[e3]) - (self[e3215] * other[e321]))
                - (self.group1().xyzz() * other.group1().www().with_w(other[e435]))
                - (other.group1().zx().with_zw(other[e321], other[e415]) * self.group0().yzz().with_w(self[e15]))
                - (other.group6().ww().with_zw(other[e2], self[e12]) * self.group0().xyx().with_w(other[e125]))
                - (other.group7().xxy() * self.group1().wzx()).with_w(self[e23] * other[e235])
                - (other.group7().zyz() * self.group1().yww()).with_w(self[e31] * other[e315])
                - (self.group0().www() * other.group1().xyz()).with_w(self[e25] * other[e425]),
            // e1234
            (self[scalar] * other[e4]) - (self[e23] * other[e423]) - (self[e31] * other[e431]) - (self[e12] * other[e412]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for AntiMotor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       22        0
    //    simd3        0        2        0
    //    simd4       14       14        0
    // Totals...
    // yes simd       26       38        0
    //  no simd       68       84        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([self[e35] * other[e4315], self[e15] * other[e4125], self[e25] * other[e4235], 0.0])
                - (self.group0().xyzx() * other.group0().wwwx())
                - (other.group0().xyzz() * self.group1().www().with_w(self[e12]))
                - (other.group0().zxyy() * self.group1().yzx().with_w(self[e31])),
            // e1, e2, e3, e5
            (other.group0().xyzy() * self.group0().www().with_w(self[e25]))
                + (other.group0().zxyx() * self.group0().yzx().with_w(self[e15]))
                + Simd32x3::from(0.0).with_w(self[e35] * other[e4125])
                - (self.group0().zxyw() * other.group0().yzxw()),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       49        0
    //    simd3        3        5        0
    //    simd4       25       29        0
    // Totals...
    // yes simd       56       83        0
    //  no simd      137      180        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(other[e4]) * self.group0().xyz().with_w(self[e3215]),
            // e23, e31, e12, e45
            Simd32x4::from([other[e4], other[e4], other[e4], 1.0])
                * self
                    .group1()
                    .xyz()
                    .with_w((self[e23] * other[e1]) + (self[e31] * other[e2]) + (self[e12] * other[e3]) - (self[e3215] * other[e4])),
            // e15, e25, e35, e1234
            ((Simd32x3::from(other[e5]) * self.group0().xyz()) + (self.group1().zxy() * other.group0().yzx())
                - (Simd32x3::from(self[e3215]) * other.group0().xyz())
                - (self.group1().yzx() * other.group0().zxy()))
            .with_w(self[scalar] * other[e4]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(self[e31] * other[e3]) - (self[scalar] * other[e1]) - (self[e15] * other[e4]),
                -(self[e12] * other[e1]) - (self[scalar] * other[e2]) - (self[e25] * other[e4]),
                -(self[e23] * other[e2]) - (self[scalar] * other[e3]) - (self[e35] * other[e4]),
                (self[e15] * other[e1]) + (self[e25] * other[e2]) + (self[e35] * other[e3]),
            ]) + (self.group0().zxyw() * other.group0().yzx().with_w(other[e5])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for AntiMotor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       26        0
    //    simd3        0        2        0
    //    simd4        6       10        0
    // Totals...
    // yes simd       22       38        0
    //  no simd       40       72        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(other[scalar]) * self.group0() * Simd32x4::from(-1.0),
            // e235, e315, e125, e5
            Simd32x4::from(other[scalar]) * self.group1() * Simd32x4::from(-1.0),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       64        0
    //    simd3        3        6        0
    //    simd4       22       26        0
    // Totals...
    // yes simd       65       96        0
    //  no simd      137      186        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(other[e1234]) * self.group0().xyz().with_w(self[e3215]) * Simd32x4::from(-1.0),
            // e415, e425, e435, e321
            Simd32x4::from([other[e1234], other[e1234], other[e1234], 1.0])
                * self
                    .group1()
                    .xyz()
                    .with_w(-(self[e23] * other[e4235]) - (self[e31] * other[e4315]) - (self[e12] * other[e4125]) - (self[e3215] * other[e1234]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e25] * other[e4125]) - (self[e3215] * other[e4235]),
                -(self[e35] * other[e4235]) - (self[e3215] * other[e4315]),
                -(self[e15] * other[e4315]) - (self[e3215] * other[e4125]),
                (self[e25] * other[e4315]) + (self[e35] * other[e4125]),
            ]) + (self.group1().zxyx() * other.group0().yzxx())
                - (Simd32x4::from(other[e3215]) * self.group0()),
            // e1, e2, e3, e4
            ((Simd32x3::from(self[scalar]) * other.group0().xyz()) + (self.group0().yzx() * other.group0().zxy())
                - (Simd32x3::from(other[e1234]) * self.group1().xyz())
                - (self.group0().zxy() * other.group0().yzx()))
            .with_w(self[scalar] * other[e1234] * -1.0),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for AntiMotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       45       68        0
    //    simd3        0        1        0
    //    simd4       46       49        0
    // Totals...
    // yes simd       91      118        0
    //  no simd      229      267        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[scalar] * other[e423],
                self[scalar] * other[e431],
                self[scalar] * other[e412],
                -(self[e31] * other[e425]) - (self[e12] * other[e435]) - (self[e15] * other[e423]) - (self[e25] * other[e431]) - (self[e35] * other[e412]),
            ]) + (self.group0().xyxw() * other.group3().ww().with_zw(other[e431], other[e12345]))
                + (other.group0().zx().with_zw(other[e4], other[e4]) * self.group0().yzz().with_w(self[e3215]))
                - (self.group0().zxyx() * other.group0().yzx().with_w(other[e415])),
            // e23, e31, e12, e45
            (self.group0().xyxx() * other.group0().ww().with_zw(other[e425], other[e1]))
                + (self.group0().yzzy() * other.group1().zx().with_zw(other[e12345], other[e2]))
                + (self.group0().wwwz() * other.group1().xyz().with_w(other[e3]))
                + (self.group1().xyxx() * other.group3().ww().with_zw(other[e431], other[e423]))
                + (self.group1().yzzy() * other.group0().zx().with_zw(other[e4], other[e431]))
                + (self.group1().wwwz() * other.group0().xyzz())
                - (self.group0().zxyw() * other.group1().yzxw())
                - (self.group1().zxyw() * other.group0().yzx().with_w(other[e4])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e31] * other[e125])
                    + (self[scalar] * other[e235])
                    + (self[e15] * other[e12345])
                    + (self[e25] * other[e435])
                    + (self[e35] * other[e2])
                    + (self[e3215] * other[e415])
                    - (self[e35] * other[e425])
                    - (self[e3215] * other[e1]),
                (self[e12] * other[e235])
                    + (self[scalar] * other[e315])
                    + (self[e15] * other[e3])
                    + (self[e25] * other[e12345])
                    + (self[e35] * other[e415])
                    + (self[e3215] * other[e425])
                    - (self[e35] * other[e1])
                    - (self[e3215] * other[e2]),
                (self[e12] * other[e5])
                    + (self[scalar] * other[e125])
                    + (self[e15] * other[e425])
                    + (self[e25] * other[e1])
                    + (self[e35] * other[e12345])
                    + (self[e3215] * other[e435])
                    - (self[e35] * other[e321])
                    - (self[e3215] * other[e3]),
                0.0,
            ]) + (self.group0().xyxw() * other.group2().wwy().with_w(other[e4]))
                - (Simd32x4::from([other[e3], other[e321], other[e415], other[e412]]) * self.group1().yyy().with_w(self[e12]))
                - (self.group0().zxyx() * other.group2().yzx().with_w(other[e423]))
                - (other.group1().wz().with_zw(other[e2], other[e431]) * self.group1().xxx().with_w(self[e31])),
            // e4235, e4315, e4125, e3215
            (self.group0().zxyw() * other.group3().yzx().with_w(other[e5]))
                + (self.group1().zxyx() * other.group0().yzx().with_w(other[e1]))
                + Simd32x3::from(0.0).with_w((self[e25] * other[e2]) + (self[e35] * other[e3]) + (self[e3215] * other[e12345]) - (self[e3215] * other[e321]))
                - (self.group0().xyxx() * other.group1().ww().with_zw(other[e2], other[e235]))
                - (self.group0().yzzy() * other.group3().zx().with_zw(other[e321], other[e315]))
                - (self.group0().wwwz() * other.group3().xyz().with_w(other[e125]))
                - (self.group1().xyxx() * other.group3().ww().with_zw(other[e431], other[e415]))
                - (self.group1().yzzy() * other.group0().zx().with_zw(other[e4], other[e425]))
                - (self.group1().wwwz() * other.group0().xyz().with_w(other[e435])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for AntiMotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       70      108        0
    //    simd3        0        5        0
    //    simd4       39       36        0
    // Totals...
    // yes simd      109      149        0
    //  no simd      226      267        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[scalar] * other[e41] * -1.0,
                self[scalar] * other[e42] * -1.0,
                self[scalar] * other[e43] * -1.0,
                (self[e31] * other[e31]) + (self[e12] * other[e12]) + (self[e15] * other[e41]) + (self[e25] * other[e42]) + (self[e35] * other[e43]),
            ]) + (self.group0().zxyx() * other.group0().yzx().with_w(other[e23]))
                - (self.group0().xyxw() * other.group2().ww().with_zw(other[e42], other[scalar]))
                - (other.group0().zx().with_zw(other[e1234], other[e1234]) * self.group0().yzz().with_w(self[e3215])),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(self[e25] * other[e43]) - (self[e3215] * other[e41]),
                -(self[e35] * other[e41]) - (self[e3215] * other[e42]),
                -(self[e35] * other[e1234]) - (self[e3215] * other[e43]),
                (self[e25] * other[e42]) + (self[e35] * other[e43]),
            ]) + (self.group0().zxyw() * other.group1().yzxw())
                + (self.group1().zxyx() * other.group0().yzxx())
                - (self.group0().xyxx() * other.group0().ww().with_zw(other[e31], other[e4235]))
                - (self.group0().yzzy() * other.group1().zx().with_zw(other[scalar], other[e4315]))
                - (self.group0().wwwz() * other.group1().xyz().with_w(other[e4125]))
                - (self.group1().xyxw() * other.group2().ww().with_zw(other[e42], other[e1234])),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e15] * other[scalar])
                    - (self[e15] * other[e45])
                    - (self[e25] * other[e12])
                    - (self[e25] * other[e4125])
                    - (self[e3215] * other[e23])
                    - (self[e3215] * other[e4235]),
                -(self[e25] * other[scalar])
                    - (self[e25] * other[e45])
                    - (self[e35] * other[e23])
                    - (self[e35] * other[e4235])
                    - (self[e3215] * other[e31])
                    - (self[e3215] * other[e4315]),
                -(self[e15] * other[e31])
                    - (self[e15] * other[e4315])
                    - (self[e35] * other[scalar])
                    - (self[e35] * other[e45])
                    - (self[e3215] * other[e12])
                    - (self[e3215] * other[e4125]),
                (self[e15] * other[e23])
                    + (self[e15] * other[e4235])
                    + (self[e25] * other[e31])
                    + (self[e25] * other[e4315])
                    + (self[e35] * other[e12])
                    + (self[e35] * other[e4125]),
            ]) + (self.group0().zxyx() * other.group2().yzxx())
                + (self.group1().zxy() * other.group1().yzx()).with_w(self[e31] * other[e25])
                + (self.group1().zxy() * other.group3().yzx()).with_w(self[e12] * other[e35])
                - (self.group0().xyxw() * other.group3().ww().with_zw(other[e25], other[e3215]))
                - (other.group2().zx().with_zw(other[e3215], other[scalar]) * self.group0().yzz().with_w(self[e3215]))
                - (self.group0().www() * other.group2().xyz()).with_w(self[e3215] * other[e45]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e35] * other[e42]) - (self[e15] * other[e1234]) - (self[e25] * other[e43]) - (self[e3215] * other[e41]),
                (self[e15] * other[e43]) - (self[e25] * other[e1234]) - (self[e35] * other[e41]) - (self[e3215] * other[e42]),
                (self[e25] * other[e41]) - (self[e15] * other[e42]) - (self[e35] * other[e1234]) - (self[e3215] * other[e43]),
                0.0,
            ]) + (self.group0().xyxx() * other.group1().ww().with_zw(other[e4315], other[e41]))
                + (self.group0().yzzy() * other.group3().zx().with_zw(other[e45], other[e42]))
                + (self.group0().wwwz() * other.group3().xyz().with_w(other[e43]))
                - (self.group0().zxyw() * other.group3().yzx().with_w(other[e1234])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl std::ops::Div<anti_sandwich> for AntiPlane {
    type Output = anti_sandwich_partial<AntiPlane>;
    fn div(self, _rhs: anti_sandwich) -> Self::Output {
        anti_sandwich_partial(self)
    }
}
impl AntiSandwich<AntiCircleRotor> for AntiPlane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       43        0
    //    simd3        1        6        0
    //    simd4       17       13        0
    // Totals...
    // yes simd       27       62        0
    //  no simd       80      113        0
    fn anti_sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (other.group0().yzx() * self.group0().zxy()) - (other.group0().zxy() * self.group0().yzx()),
            // e23, e31, e12, e45
            Simd32x4::from([
                other[e45] * self[e1] * -1.0,
                other[e45] * self[e2] * -1.0,
                other[e45] * self[e3] * -1.0,
                (other[e31] * self[e2]) + (other[e12] * self[e3]),
            ]) + (self.group0().wwwx() * other.group0().with_w(other[e23])),
            // e15, e25, e35, e1234
            Simd32x4::from([other[e25] * self[e3] * -1.0, other[e35] * self[e1] * -1.0, other[e15] * self[e2] * -1.0, other[e43] * self[e3]])
                + (self.group0().yzxy() * other.group2().zxy().with_w(other[e42]))
                + (self.group0().wwwx() * other.group1().xyz().with_w(other[e41])),
            // e4235, e4315, e4125, e3215
            (other.group1().yzxw() * self.group0().zxyw()) + Simd32x3::from(0.0).with_w(other[scalar] * self[e5])
                - (other.group2().wwwz() * self.group0().xyzz())
                - (self.group0().yzxy() * other.group1().zxy().with_w(other[e25]))
                - (self.group0().wwwx() * other.group0().with_w(other[e15])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDipoleInversion> for AntiPlane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       27       61        0
    //    simd4       17       17        0
    // Totals...
    // yes simd       44       78        0
    //  no simd       95      129        0
    fn anti_sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (self.group0().zxyw() * other.group0().yzx().with_w(other[e4])) + Simd32x3::from(0.0).with_w(other[e3] * self[e3] * -1.0)
                - (self.group0().xyzy() * other.group2().www().with_w(other[e2]))
                - (self.group0().yzxx() * other.group0().zxy().with_w(other[e1])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e321] * self[e1]) + (other[e3] * self[e2]),
                (other[e321] * self[e2]) + (other[e1] * self[e3]),
                (other[e321] * self[e3]) + (other[e2] * self[e1]),
                -(other[e425] * self[e2]) - (other[e435] * self[e3]),
            ]) + (Simd32x4::from(self[e5]) * other.group0().with_w(other[e4]))
                - (self.group0().zxyx() * other.group3().yzx().with_w(other[e415])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e415] * self[e5]) + (other[e125] * self[e2]) + (other[e5] * self[e1]),
                (other[e425] * self[e5]) + (other[e235] * self[e3]) + (other[e5] * self[e2]),
                (other[e435] * self[e5]) + (other[e315] * self[e1]) + (other[e5] * self[e3]),
                -(other[e315] * self[e2]) - (other[e125] * self[e3]),
            ]) - (self.group0().zxyw() * other.group2().yzx().with_w(other[e321]))
                - (self.group0().wwwx() * other.group3().xyz().with_w(other[e235])),
            // e1, e2, e3, e4
            Simd32x4::from([other[e425] * self[e3] * -1.0, other[e435] * self[e1] * -1.0, other[e415] * self[e2] * -1.0, other[e412] * self[e3]])
                + (self.group0().yzxy() * other.group1().zxy().with_w(other[e431]))
                + (self.group0().wwwx() * other.group0().with_w(other[e423])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum> for AntiPlane {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       16        0
    //    simd4        3        8        0
    // Totals...
    // yes simd       11       24        0
    //  no simd       20       48        0
    fn anti_sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            other.group0().xx().with_zw(other[e3215], 0.0) * Simd32x3::from(1.0).with_w(0.0) * self.group0().xyz().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[scalar]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlatPoint> for AntiPlane {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       22        0
    //    simd4        5        8        0
    // Totals...
    // yes simd       11       30        0
    //  no simd       26       54        0
    fn anti_sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x3::from(1.0).with_w(0.0) * other.group0().www().with_w(0.0) * self.group0().xyz().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
            // e235, e315, e125, e5
            Simd32x4::from([
                other[e125] * self[e2],
                other[e235] * self[e3],
                other[e315] * self[e1],
                -(other[e315] * self[e2]) - (other[e125] * self[e3]) - (other[e321] * self[e5]),
            ]) - (other.group0().yzxx() * self.group0().zxyx()),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlector> for AntiPlane {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       32        0
    //    simd4        7        7        0
    // Totals...
    // yes simd       19       39        0
    //  no simd       40       60        0
    fn anti_sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (other[e321] * self[e1]) + (other[e3] * self[e2]),
                (other[e321] * self[e2]) + (other[e1] * self[e3]),
                (other[e321] * self[e3]) + (other[e2] * self[e1]),
                -(other[e2] * self[e2]) - (other[e3] * self[e3]),
            ]) - (other.group1().yzxx() * self.group0().zxyx()),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e125] * self[e2]) + (other[e5] * self[e1]),
                (other[e235] * self[e3]) + (other[e5] * self[e2]),
                (other[e315] * self[e1]) + (other[e5] * self[e3]),
                -(other[e125] * self[e3]) - (other[e321] * self[e5]),
            ]) - (other.group0().yzxx() * self.group0().zxyx())
                - (self.group0().wwwy() * other.group1().xyz().with_w(other[e315])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiLine> for AntiPlane {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       28        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       15       34        0
    //  no simd       33       52        0
    fn anti_sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([other[e25] * self[e3] * -1.0, other[e35] * self[e1] * -1.0, other[e15] * self[e2] * -1.0, other[e12] * self[e3]])
                + (self.group0().yzxy() * other.group1().zxy().with_w(other[e31]))
                + (self.group0().wwwx() * other.group0().with_w(other[e23])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([other[e31] * self[e3], other[e12] * self[e1], other[e23] * self[e2], -(other[e25] * self[e2]) - (other[e35] * self[e3])])
                - (self.group0().yzxx() * other.group0().zxy().with_w(other[e15])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiMotor> for AntiPlane {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       24        0
    //    simd4        9        9        0
    // Totals...
    // yes simd       17       33        0
    //  no simd       44       60        0
    fn anti_sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([other[e25] * self[e3] * -1.0, other[e35] * self[e1] * -1.0, other[e15] * self[e2] * -1.0, 0.0])
                + (other.group0().xyzx() * self.group0().wwwx())
                + (self.group0().xyzz() * other.group1().www().with_w(other[e12]))
                + (self.group0().yzxy() * other.group1().zxy().with_w(other[e31])),
            // e4235, e4315, e4125, e3215
            (other.group0().yzxw() * self.group0().zxyw()) + Simd32x3::from(0.0).with_w(other[e35] * self[e3] * -1.0)
                - (self.group0().xyzy() * other.group0().www().with_w(other[e25]))
                - (self.group0().yzxx() * other.group0().zxy().with_w(other[e15])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiPlane> for AntiPlane {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       21        0
    //    simd3        1        2        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       11       28        0
    //  no simd       28       47        0
    fn anti_sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([other[e3] * self[e2], other[e1] * self[e3], other[e2] * self[e1], -(other[e2] * self[e2]) - (other[e3] * self[e3])])
                - (other.group0().yzxx() * self.group0().zxyx()),
            // e235, e315, e125, e5
            ((Simd32x3::from(other[e5]) * self.group0().xyz()) - (Simd32x3::from(self[e5]) * other.group0().xyz())).with_w(0.0),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiScalar> for AntiPlane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd3        1        2        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        3        9        0
    //  no simd        8       19        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from(other[e12345]) * self.group0()).geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for AntiPlane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       22       56        0
    //    simd3        1        4        0
    //    simd4       11        9        0
    // Totals...
    // yes simd       34       69        0
    //  no simd       69      104        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (other.group0().yzx() * self.group0().zxy()) - (other.group0().zxy() * self.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e1] * other[e321]) + (self[e5] * other[e423]),
                (self[e2] * other[e321]) + (self[e5] * other[e431]),
                (self[e3] * other[e321]) + (self[e5] * other[e412]),
                -(self[e1] * other[e415]) - (self[e2] * other[e425]) - (self[e3] * other[e435]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([self[e3] * other[e315] * -1.0, self[e1] * other[e125] * -1.0, self[e2] * other[e235] * -1.0, self[e3] * other[e412]])
                + (self.group0().yzxx() * other.group2().zxy().with_w(other[e423]))
                + (self.group0().www() * other.group1().xyz()).with_w(self[e2] * other[e431]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self[e2] * other[e435]) + (self[e5] * other[e423]),
                (self[e3] * other[e415]) + (self[e5] * other[e431]),
                (self[e1] * other[e425]) + (self[e5] * other[e412]),
                -(self[e2] * other[e315]) - (self[e3] * other[e125]) - (self[e5] * other[e321]),
            ]) - (self.group0().zxy() * other.group1().yzx()).with_w(self[e1] * other[e235]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for AntiPlane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       22       57        0
    //    simd3        1        5        0
    //    simd4       12        9        0
    // Totals...
    // yes simd       35       71        0
    //  no simd       73      108        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (other.group0().yzx() * self.group0().zxy()) - (other.group0().zxy() * self.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e1] * other[e321]) + (self[e5] * other[e423]),
                (self[e2] * other[e321]) + (self[e5] * other[e431]),
                (self[e3] * other[e321]) + (self[e5] * other[e412]),
                -(self[e1] * other[e415]) - (self[e2] * other[e425]) - (self[e3] * other[e435]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([self[e3] * other[e315] * -1.0, self[e1] * other[e125] * -1.0, self[e2] * other[e235] * -1.0, self[e3] * other[e412]])
                + (self.group0().yzx() * other.group2().zxy()).with_w(self[e1] * other[e423])
                + (self.group0().www() * other.group1().xyz()).with_w(self[e2] * other[e431]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self[e1] * other[e12345]) + (self[e2] * other[e435]),
                (self[e2] * other[e12345]) + (self[e3] * other[e415]),
                (self[e1] * other[e425]) + (self[e3] * other[e12345]),
                -(self[e2] * other[e315]) - (self[e3] * other[e125]) - (self[e5] * other[e321]),
            ]) + (other.group0() * self.group0().www()).with_w(self[e5] * other[e12345])
                - (self.group0().zxyx() * other.group1().yzx().with_w(other[e235])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for AntiPlane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       47        0
    //    simd3        1        9        0
    //    simd4       16        9        0
    // Totals...
    // yes simd       26       65        0
    //  no simd       76      110        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (other.group0().yzx() * self.group0().zxy()) - (other.group0().zxy() * self.group0().yzx()),
            // e23, e31, e12, e45
            Simd32x4::from([
                self[e1] * other[e45] * -1.0,
                self[e2] * other[e45] * -1.0,
                self[e3] * other[e45] * -1.0,
                (self[e2] * other[e31]) + (self[e3] * other[e12]),
            ]) + (other.group0() * self.group0().www()).with_w(self[e1] * other[e23]),
            // e15, e25, e35, e1234
            Simd32x4::from([self[e3] * other[e25] * -1.0, self[e1] * other[e35] * -1.0, self[e2] * other[e15] * -1.0, self[e3] * other[e43]])
                + (self.group0().yzxx() * other.group2().zxy().with_w(other[e41]))
                + (self.group0().www() * other.group1().xyz()).with_w(self[e2] * other[e42]),
            // e4235, e4315, e4125, e3215
            (self.group0().zxyw() * other.group1().yzxw()) + Simd32x3::from(0.0).with_w(self[e3] * other[e35] * -1.0)
                - (self.group0().wwwx() * other.group0().with_w(other[e15]))
                - (self.group0().yzx() * other.group1().zxy()).with_w(self[e2] * other[e25]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for AntiPlane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       58        0
    //    simd3        0        4        0
    //    simd4       20       16        0
    // Totals...
    // yes simd       37       78        0
    //  no simd       97      134        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(self[e1] * other[e1234]) - (self[e2] * other[e43]),
                -(self[e2] * other[e1234]) - (self[e3] * other[e41]),
                -(self[e1] * other[e42]) - (self[e3] * other[e1234]),
                (self[e2] * other[e4315]) + (self[e3] * other[e4125]) + (self[e5] * other[e1234]),
            ]) + (other.group0().yzx() * self.group0().zxy()).with_w(self[e1] * other[e4235]),
            // e23, e31, e12, e45
            Simd32x4::from([self[e2] * other[e4125] * -1.0, self[e3] * other[e4235] * -1.0, self[e3] * other[e45] * -1.0, self[e3] * other[e12]])
                + (self.group0().zxyy() * other.group3().yzx().with_w(other[e31]))
                + (other.group0() * self.group0().www()).with_w(self[e1] * other[e23])
                - (self.group0().xyxw() * other.group1().ww().with_zw(other[e4315], other[e1234])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e5] * other[e4235]) - (self[e3] * other[e25]),
                (self[e5] * other[e4315]) - (self[e1] * other[e35]),
                (self[e5] * other[e4125]) - (self[e2] * other[e15]),
                0.0,
            ]) + (other.group2().zx().with_zw(other[e3215], self[e2]) * self.group0().yzz().with_w(other[e42]))
                + (other.group3().ww().with_zw(other[e25], self[e1]) * self.group0().xyx().with_w(other[e41]))
                + (self.group0().www() * other.group1().xyz()).with_w(self[e3] * other[e43]),
            // e4235, e4315, e4125, e3215
            (self.group0().zxyw() * other.group1().yzxw()) + Simd32x3::from(0.0).with_w(self[e3] * other[e35] * -1.0)
                - (self.group0().yzxy() * other.group1().zxy().with_w(other[e25]))
                - (other.group0() * self.group0().www()).with_w(self[e1] * other[e15]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum> for AntiPlane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       16        0
    //    simd4        3        7        0
    // Totals...
    // yes simd       11       23        0
    //  no simd       20       44        0
    fn anti_sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            other.group0().xx().with_zw(other[e5], 0.0) * Simd32x3::from(1.0).with_w(0.0) * self.group0().xyz().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
            // e1, e2, e3, e5
            Simd32x4::from(other[e12345]) * self.group0(),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for AntiPlane {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       18        0
    //    simd4        5        8        0
    // Totals...
    // yes simd       14       26        0
    //  no simd       29       50        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x3::from(1.0).with_w(0.0) * other.group0().www().with_w(0.0) * self.group0().xyz().with_w(0.0) * Simd32x4::from([-1.0, -1.0, -1.0, 0.0]),
            // e15, e25, e35, e3215
            (self.group0().yzxw() * other.group0().zxyw()) + Simd32x3::from(0.0).with_w(-(self[e2] * other[e25]) - (self[e3] * other[e35]))
                - (self.group0().zxyx() * other.group0().yzxx()),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for AntiPlane {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       32        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       22       38        0
    //  no simd       40       56        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                -(self[e1] * other[e45]) - (self[e2] * other[e4125]),
                -(self[e2] * other[e45]) - (self[e3] * other[e4235]),
                -(self[e1] * other[e4315]) - (self[e3] * other[e45]),
                (self[e2] * other[e4315]) + (self[e3] * other[e4125]),
            ]) + (self.group0().zxyx() * other.group1().yzxx()),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self[e2] * other[e35]) + (self[e5] * other[e4235]),
                (self[e3] * other[e15]) + (self[e5] * other[e4315]),
                (self[e3] * other[e3215]) + (self[e5] * other[e4125]),
                -(self[e2] * other[e25]) - (self[e3] * other[e35]),
            ]) + (self.group0().xyxw() * other.group1().ww().with_zw(other[e25], other[e45]))
                - (self.group0().zxyx() * other.group0().yzxx()),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for AntiPlane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       29        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       18       34        0
    //  no simd       33       49        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (self[e2] * other[e125]) + (self[e5] * other[e415]),
                (self[e3] * other[e235]) + (self[e5] * other[e425]),
                (self[e1] * other[e315]) + (self[e5] * other[e435]),
                -(self[e2] * other[e425]) - (self[e3] * other[e435]),
            ]) - (self.group0().zxyx() * other.group1().yzx().with_w(other[e415])),
            // e1, e2, e3, e5
            Simd32x4::from([
                self[e2] * other[e435],
                self[e3] * other[e415],
                self[e1] * other[e425],
                -(self[e2] * other[e315]) - (self[e3] * other[e125]),
            ]) - (self.group0().zxyx() * other.group0().yzx().with_w(other[e235])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for AntiPlane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       32        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       22       38        0
    //  no simd       40       56        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (self[e1] * other[e5]) + (self[e2] * other[e125]) + (self[e5] * other[e415]),
                (self[e2] * other[e5]) + (self[e3] * other[e235]) + (self[e5] * other[e425]),
                (self[e1] * other[e315]) + (self[e3] * other[e5]) + (self[e5] * other[e435]),
                -(self[e2] * other[e425]) - (self[e3] * other[e435]),
            ]) - (self.group0().zxyx() * other.group1().yzx().with_w(other[e415])),
            // e1, e2, e3, e5
            Simd32x4::from([
                self[e2] * other[e435],
                self[e3] * other[e415],
                self[e3] * other[e12345],
                -(self[e2] * other[e315]) - (self[e3] * other[e125]),
            ]) + (self.group0().xyxw() * other.group0().wwyw())
                - (self.group0().zxyx() * other.group0().yzx().with_w(other[e235])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for AntiPlane {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       43       92        0
    //    simd2        2        2        0
    //    simd3       22       37        0
    //    simd4       21       14        0
    // Totals...
    // yes simd       88      145        0
    //  no simd      197      263        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[e2] * other[e4315]) + (self[e3] * other[e4125]) + (self[e5] * other[e1234]),
                -(self[e1] * other[e1]) - (self[e2] * other[e2]) - (self[e3] * other[e3]),
            ]) + (Simd32x2::from([other[e4235], other[e4]]) * self.group0().xw()),
            // e1, e2, e3, e4
            Simd32x4::from([self[e3] * other[e425] * -1.0, self[e1] * other[e435] * -1.0, self[e2] * other[e415] * -1.0, 0.0])
                + (self.group0().xyzx() * other.group0().yy().with_zw(other[e12345], other[e423]))
                + (self.group0().wwwy() * other.group7().with_w(other[e431]))
                + (self.group0().yzx() * other.group6().zxy()).with_w(self[e3] * other[e412]),
            // e5
            (self[e5] * other[e12345]) - (self[e1] * other[e235]) - (self[e2] * other[e315]) - (self[e3] * other[e125]) - (self[e5] * other[e321]),
            // e15, e25, e35, e45
            Simd32x4::from([self[e5] * other[e4235], self[e5] * other[e4315], self[e5] * other[e4125], 0.0])
                + (self.group0().wwwx() * other.group5().with_w(other[e23]))
                + (other.group3().zx().with_zw(other[e3215], self[e3]) * self.group0().yzz().with_w(other[e12]))
                + (other.group9().ww().with_zw(other[e25], self[e2]) * self.group0().xyx().with_w(other[e31]))
                - (self.group0().zxyw() * other.group3().yzx().with_w(other[e1234])),
            // e41, e42, e43
            (other.group4().yzx() * self.group0().zxy()) - (Simd32x3::from(other[e1234]) * self.group0().xyz()) - (other.group4().zxy() * self.group0().yzx()),
            // e23, e31, e12
            (Simd32x3::from(self[e5]) * other.group4()) + (self.group0().zxy() * other.group9().yzx())
                - (Simd32x3::from([other[e45], other[e45], other[e4315]]) * self.group0().xyx())
                - (Simd32x3::from([other[e4125], other[e4235], other[e45]]) * self.group0().yzz()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e1] * other[e321]) + (self[e2] * other[e3]),
                (self[e2] * other[e321]) + (self[e3] * other[e1]),
                (self[e1] * other[e2]) + (self[e3] * other[e321]),
                -(self[e2] * other[e425]) - (self[e3] * other[e435]),
            ]) + (other.group7() * self.group0().www()).with_w(self[e5] * other[e4])
                - (self.group0().zxyx() * other.group1().yzx().with_w(other[e415])),
            // e423, e431, e412
            (other.group7().yzx() * self.group0().zxy()) - (Simd32x3::from(other[e4]) * self.group0().xyz()) - (other.group7().zxy() * self.group0().yzx()),
            // e235, e315, e125
            (Simd32x3::from(self[e5]) * other.group6().xyz()) + (Simd32x3::from(other[e5]) * self.group0().xyz()) + (other.group8().zxy() * self.group0().yzx())
                - (Simd32x3::from(self[e5]) * other.group1().xyz())
                - (other.group8().yzx() * self.group0().zxy()),
            // e4235, e4315, e4125, e3215
            (self.group0().zxyw() * other.group5().yzx().with_w(other[scalar])) + Simd32x3::from(0.0).with_w(self[e5] * other[e45])
                - (other.group0().xx().with_zw(other[scalar], self[e1]) * self.group0().xyz().with_w(other[e15]))
                - (other.group4() * self.group0().www()).with_w(self[e2] * other[e25])
                - (other.group5().zxy() * self.group0().yzx()).with_w(self[e3] * other[e35]),
            // e1234
            (self[e1] * other[e41]) + (self[e2] * other[e42]) + (self[e3] * other[e43]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for AntiPlane {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       24        0
    //    simd3        1        2        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       14       30        0
    //  no simd       28       46        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                self[e2] * other[e4125] * -1.0,
                self[e3] * other[e4235] * -1.0,
                self[e1] * other[e4315] * -1.0,
                (self[e2] * other[e4315]) + (self[e3] * other[e4125]),
            ]) + (self.group0().zxyx() * other.group0().yzxx()),
            // e15, e25, e35, e3215
            ((Simd32x3::from(self[e5]) * other.group0().xyz()) + (Simd32x3::from(other[e3215]) * self.group0().xyz())).with_w(0.0),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for AntiPlane {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       30        0
    //    simd3        2        7        0
    //    simd4        5        4        0
    // Totals...
    // yes simd       22       41        0
    //  no simd       41       67        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[e4]) * self.group0().xyz() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            ((self.group0().yzx() * other.group0().zxy()) - (self.group0().zxy() * other.group0().yzx())).with_w(self[e5] * other[e4]),
            // e235, e315, e125, e12345
            (Simd32x4::from([other[e5], other[e5], other[e5], other[e4]]) * self.group0()) + Simd32x3::from(0.0).with_w(-(self[e2] * other[e2]) - (self[e3] * other[e3]))
                - (self.group0().wwwx() * other.group0().xyzx()),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for AntiPlane {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        8        0
    //    simd3        1        2        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        3       13        0
    //  no simd        8       26        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[scalar]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for AntiPlane {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       28        0
    //    simd3        2        6        0
    //    simd4        7        7        0
    // Totals...
    // yes simd       16       41        0
    //  no simd       41       74        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(other[e1234]) * self.group0().xyz() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            ((self.group0().zxy() * other.group0().yzx()) - (self.group0().yzx() * other.group0().zxy())).with_w(self[e5] * other[e1234] * -1.0),
            // e15, e25, e35, scalar
            (self.group0().xyzx() * other.group0().wwwx())
                + (self.group0().wwwy() * other.group0().xyzy())
                + Simd32x3::from(0.0).with_w((self[e3] * other[e4125]) + (self[e5] * other[e1234])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for AntiPlane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       57        0
    //    simd4       19       19        0
    // Totals...
    // yes simd       43       76        0
    //  no simd      100      133        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (self.group0().zxyw() * other.group0().yzx().with_w(other[e4])) + Simd32x3::from(0.0).with_w(self[e3] * other[e3] * -1.0)
                - (self.group0().xyxx() * other.group3().ww().with_zw(other[e431], other[e1]))
                - (self.group0().yzzy() * other.group0().zx().with_zw(other[e4], other[e2])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e2] * other[e3]) + (self[e5] * other[e423]),
                (self[e3] * other[e1]) + (self[e5] * other[e431]),
                (self[e3] * other[e321]) + (self[e5] * other[e412]),
                -(self[e2] * other[e425]) - (self[e3] * other[e435]),
            ]) + (self.group0().xyxw() * other.group1().ww().with_zw(other[e2], other[e4]))
                - (self.group0().zxyx() * other.group3().yzx().with_w(other[e415])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e2] * other[e125]) + (self[e5] * other[e415]),
                (self[e3] * other[e235]) + (self[e5] * other[e425]),
                (self[e3] * other[e5]) + (self[e5] * other[e435]),
                -(self[e3] * other[e125]) - (self[e5] * other[e321]),
            ]) + (self.group0().xyxw() * other.group2().wwy().with_w(other[e12345]))
                - (self.group0().zxyx() * other.group2().yzxx())
                - (self.group0().wwwy() * other.group3().xyz().with_w(other[e315])),
            // e1, e2, e3, e4
            Simd32x4::from([self[e3] * other[e425] * -1.0, self[e1] * other[e435] * -1.0, self[e2] * other[e415] * -1.0, 0.0])
                + (self.group0().xyxx() * other.group0().ww().with_zw(other[e425], other[e423]))
                + (self.group0().yzzy() * other.group1().zx().with_zw(other[e12345], other[e431]))
                + (self.group0().wwwz() * other.group0().xyzz()),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for AntiPlane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       53        0
    //    simd4       21       21        0
    // Totals...
    // yes simd       38       74        0
    //  no simd      101      137        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(self[e1] * other[e1234]) - (self[e2] * other[e43]),
                -(self[e2] * other[e1234]) - (self[e3] * other[e41]),
                -(self[e1] * other[e42]) - (self[e3] * other[e1234]),
                (self[e2] * other[e4315]) + (self[e3] * other[e4125]) + (self[e5] * other[e1234]),
            ]) + (self.group0().zxyx() * other.group0().yzx().with_w(other[e4235])),
            // e23, e31, e12, e45
            Simd32x4::from([self[e2] * other[e4125] * -1.0, self[e3] * other[e4235] * -1.0, self[e3] * other[e45] * -1.0, self[e3] * other[e12]])
                + (self.group0().zxyx() * other.group3().yzx().with_w(other[e23]))
                + (self.group0().wwwy() * other.group0().xyz().with_w(other[e31]))
                - (self.group0().xyxw() * other.group1().ww().with_zw(other[e4315], other[e1234])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e5] * other[e4235]) - (self[e3] * other[e25]),
                (self[e5] * other[e4315]) - (self[e1] * other[e35]),
                (self[e5] * other[e4125]) - (self[e2] * other[e15]),
                0.0,
            ]) + (self.group0().xyxx() * other.group3().ww().with_zw(other[e25], other[e41]))
                + (self.group0().yzzy() * other.group2().zx().with_zw(other[e3215], other[e42]))
                + (self.group0().wwwz() * other.group1().xyz().with_w(other[e43])),
            // e4235, e4315, e4125, e3215
            (self.group0().zxyw() * other.group1().yzx().with_w(other[scalar])) + Simd32x3::from(0.0).with_w(self[e5] * other[e45])
                - (self.group0().xyxx() * other.group0().ww().with_zw(other[e31], other[e15]))
                - (self.group0().yzzy() * other.group1().zx().with_zw(other[scalar], other[e25]))
                - (self.group0().wwwz() * other.group0().xyz().with_w(other[e35])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl std::ops::Div<anti_sandwich> for AntiScalar {
    type Output = anti_sandwich_partial<AntiScalar>;
    fn div(self, _rhs: anti_sandwich) -> Self::Output {
        anti_sandwich_partial(self)
    }
}
impl AntiSandwich<AntiCircleRotor> for AntiScalar {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        2        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0       22        0
    fn anti_sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[e12345]) * other.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(self[e12345]) * other.group1(),
            // e15, e25, e35, scalar
            Simd32x4::from(self[e12345]) * other.group2(),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDipoleInversion> for AntiScalar {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        2        0
    //    simd4        0        6        0
    // Totals...
    // yes simd        0        8        0
    //  no simd        0       30        0
    fn anti_sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[e12345]) * other.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(self[e12345]) * other.group1(),
            // e235, e315, e125, e4
            Simd32x4::from(self[e12345]) * other.group2(),
            // e1, e2, e3, e5
            Simd32x4::from(self[e12345]) * other.group3(),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum> for AntiScalar {
    type Output = AntiDualNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        2        0
    // no simd        0        4        0
    fn anti_sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return AntiDualNum::from_groups(/* e3215, scalar */ Simd32x2::from(self[e12345]) * other.group0()).geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlatPoint> for AntiScalar {
    type Output = AntiFlatPoint;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn anti_sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiFlatPoint::from_groups(/* e235, e315, e125, e321 */ Simd32x4::from(self[e12345]) * other.group0()).geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlector> for AntiScalar {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn anti_sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(self[e12345]) * other.group0(),
            // e1, e2, e3, e5
            Simd32x4::from(self[e12345]) * other.group1(),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiLine> for AntiScalar {
    type Output = AntiLine;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        4        0
    // no simd        0       12        0
    fn anti_sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(self[e12345]) * other.group0(),
            // e15, e25, e35
            Simd32x3::from(self[e12345]) * other.group1(),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiMotor> for AntiScalar {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn anti_sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(self[e12345]) * other.group0(),
            // e15, e25, e35, e3215
            Simd32x4::from(self[e12345]) * other.group1(),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiPlane> for AntiScalar {
    type Output = AntiPlane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn anti_sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from(self[e12345]) * other.group0()).geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiScalar> for AntiScalar {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ other[e12345] * self[e12345]).geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for AntiScalar {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        4        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0       20        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return Circle::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[e12345]) * other.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(self[e12345]) * other.group1(),
            // e235, e315, e125
            Simd32x3::from(self[e12345]) * other.group2(),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for AntiScalar {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        2        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0       22        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[e12345]) * other.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(self[e12345]) * other.group1(),
            // e235, e315, e125, e12345
            Simd32x4::from(self[e12345]) * other.group2(),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for AntiScalar {
    type Output = Dipole;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        4        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        6        0
    //  no simd        0       20        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[e12345]) * other.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(self[e12345]) * other.group1(),
            // e15, e25, e35
            Simd32x3::from(self[e12345]) * other.group2(),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for AntiScalar {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        2        0
    //    simd4        0        6        0
    // Totals...
    // yes simd        0        8        0
    //  no simd        0       30        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[e12345]) * other.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(self[e12345]) * other.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(self[e12345]) * other.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e12345]) * other.group3(),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum> for AntiScalar {
    type Output = DualNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        2        0
    // no simd        0        4        0
    fn anti_sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return DualNum::from_groups(/* e5, e12345 */ Simd32x2::from(self[e12345]) * other.group0()).geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for AntiScalar {
    type Output = FlatPoint;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return FlatPoint::from_groups(/* e15, e25, e35, e45 */ Simd32x4::from(self[e12345]) * other.group0()).geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for AntiScalar {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(self[e12345]) * other.group0(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e12345]) * other.group1(),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for AntiScalar {
    type Output = Line;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        4        0
    // no simd        0       12        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(self[e12345]) * other.group0(),
            // e235, e315, e125
            Simd32x3::from(self[e12345]) * other.group1(),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for AntiScalar {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(self[e12345]) * other.group0(),
            // e235, e315, e125, e5
            Simd32x4::from(self[e12345]) * other.group1(),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for AntiScalar {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        4        0
    //    simd2        0        2        0
    //    simd3        0        8        0
    //    simd4        0        8        0
    // Totals...
    // yes simd        0       22        0
    //  no simd        0       64        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(self[e12345]) * other.group0(),
            // e1, e2, e3, e4
            Simd32x4::from(self[e12345]) * other.group1(),
            // e5
            self[e12345] * other[e5],
            // e15, e25, e35, e45
            Simd32x4::from(self[e12345]) * other.group3(),
            // e41, e42, e43
            Simd32x3::from(self[e12345]) * other.group4(),
            // e23, e31, e12
            Simd32x3::from(self[e12345]) * other.group5(),
            // e415, e425, e435, e321
            Simd32x4::from(self[e12345]) * other.group6(),
            // e423, e431, e412
            Simd32x3::from(self[e12345]) * other.group7(),
            // e235, e315, e125
            Simd32x3::from(self[e12345]) * other.group8(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e12345]) * other.group9(),
            // e1234
            self[e12345] * other[e1234],
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for AntiScalar {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        2        0
    // no simd        0        8        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from(self[e12345]) * other.group0()).geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for AntiScalar {
    type Output = RoundPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0       10        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return RoundPoint::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from(self[e12345]) * other.group0(), /* e5 */ self[e12345] * other[e5])
            .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for AntiScalar {
    type Output = Scalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        2        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ self[e12345] * other[scalar]).geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for AntiScalar {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        0        4        0
    //  no simd        0       10        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e12345]) * other.group0(),
            // e1234
            self[e12345] * other[e1234],
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for AntiScalar {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        8        0
    // no simd        0       32        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(self[e12345]) * other.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(self[e12345]) * other.group1(),
            // e235, e315, e125, e5
            Simd32x4::from(self[e12345]) * other.group2(),
            // e1, e2, e3, e4
            Simd32x4::from(self[e12345]) * other.group3(),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for AntiScalar {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        8        0
    // no simd        0       32        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(self[e12345]) * other.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(self[e12345]) * other.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(self[e12345]) * other.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e12345]) * other.group3(),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl std::ops::Div<anti_sandwich> for Circle {
    type Output = anti_sandwich_partial<Circle>;
    fn div(self, _rhs: anti_sandwich) -> Self::Output {
        anti_sandwich_partial(self)
    }
}
impl AntiSandwich<AntiCircleRotor> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       82      137        0
    //    simd3        0       24        0
    //    simd4       39       18        0
    // Totals...
    // yes simd      121      179        0
    //  no simd      238      281        0
    fn anti_sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e43] * self[e425]) + (other[e12] * self[e431]) + (other[scalar] * self[e423]),
                (other[e41] * self[e435]) + (other[e23] * self[e412]) + (other[scalar] * self[e431]),
                (other[e42] * self[e415]) + (other[e31] * self[e423]) + (other[scalar] * self[e412]),
                -(other[e23] * self[e415])
                    - (other[e31] * self[e425])
                    - (other[e12] * self[e435])
                    - (other[e45] * self[e321])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412]),
            ]) - (other.group0().xyx() * self.group1().wwy()).with_w(other[e41] * self[e235])
                - (other.group0().yzz() * self.group1().zxw()).with_w(other[e42] * self[e315])
                - (self.group0().xxy() * other.group1().wzx()).with_w(other[e43] * self[e125])
                - (self.group0().zyz() * other.group1().yww()).with_w(other[e15] * self[e423]),
            // e23, e31, e12, e45
            Simd32x4::from([other[scalar] * self[e415], other[scalar] * self[e425], other[scalar] * self[e435], other[scalar] * self[e321] * -1.0])
                + (other.group0().zxy() * self.group2().yzx()).with_w(other[e41] * self[e235])
                + (self.group0().yzx() * other.group2().zxy()).with_w(other[e42] * self[e315])
                + (other.group1().zxy() * self.group1().yzx()).with_w(other[e43] * self[e125])
                - (other.group2().yzxy() * self.group0().zxy().with_w(self[e431]))
                - (other.group0().yzx() * self.group2().zxy()).with_w(other[e15] * self[e423])
                - (other.group1().yzx() * self.group1().zxy()).with_w(other[e35] * self[e412]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e12] * self[e315]) + (other[e45] * self[e235]) + (other[e15] * self[e321]) + (other[e35] * self[e425]) + (other[scalar] * self[e235]),
                (other[e23] * self[e125]) + (other[e45] * self[e315]) + (other[e15] * self[e435]) + (other[e25] * self[e321]) + (other[scalar] * self[e315]),
                (other[e31] * self[e235]) + (other[e45] * self[e125]) + (other[e25] * self[e415]) + (other[e35] * self[e321]) + (other[scalar] * self[e125]),
                -(other[e43] * self[e435]) - (other[e23] * self[e423]) - (other[e31] * self[e431]) - (other[e12] * self[e412]),
            ]) - (self.group1().zxyy() * other.group2().yzx().with_w(other[e42]))
                - (self.group2().zxy() * other.group1().yzx()).with_w(other[e41] * self[e415]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e42] * self[e125]) + (other[e45] * self[e415]) + (other[e35] * self[e431]),
                (other[e43] * self[e235]) + (other[e45] * self[e425]) + (other[e15] * self[e412]),
                (other[e41] * self[e315]) + (other[e45] * self[e435]) + (other[e25] * self[e423]),
                -(other[e15] * self[e415]) - (other[e25] * self[e425]) - (other[e35] * self[e435]),
            ]) - (other.group0().zxy() * self.group2().yzx()).with_w(other[e23] * self[e235])
                - (self.group0().zxy() * other.group2().yzx()).with_w(other[e31] * self[e315])
                - (self.group1().www() * other.group1().xyz()).with_w(other[e12] * self[e125]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDipoleInversion> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       90      143        0
    //    simd3        0       23        0
    //    simd4       47       27        0
    // Totals...
    // yes simd      137      193        0
    //  no simd      278      320        0
    fn anti_sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e435] * self[e431]) + (other[e321] * self[e423]) + (other[e4] * self[e415]) + (other[e3] * self[e431]),
                (other[e415] * self[e412]) + (other[e321] * self[e431]) + (other[e4] * self[e425]) + (other[e1] * self[e412]),
                (other[e425] * self[e423]) + (other[e321] * self[e412]) + (other[e4] * self[e435]) + (other[e2] * self[e423]),
                -(other[e415] * self[e415]) - (other[e425] * self[e425]) - (other[e435] * self[e435]) - (other[e315] * self[e431]) - (other[e125] * self[e412]),
            ]) + (self.group1().yzxw() * other.group0().zxy().with_w(other[e321]))
                - (other.group0().xyx() * self.group1().wwy()).with_w(other[e423] * self[e235])
                - (other.group0().yzz() * self.group1().zxw()).with_w(other[e431] * self[e315])
                - (self.group0().zxy() * other.group1().yzx()).with_w(other[e412] * self[e125])
                - (self.group0().zxy() * other.group3().yzx()).with_w(other[e235] * self[e423]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e435] * self[e425]) + (other[e4] * self[e235]) + (other[e1] * self[e321]),
                (other[e415] * self[e435]) + (other[e4] * self[e315]) + (other[e2] * self[e321]),
                (other[e425] * self[e415]) + (other[e4] * self[e125]) + (other[e3] * self[e321]),
                -(other[e1] * self[e415]) - (other[e2] * self[e425]) - (other[e3] * self[e435]),
            ]) + (other.group2().zx().with_zw(other[e5], other[e125]) * self.group0().yzz().with_w(self[e412]))
                + (other.group3().ww().with_zw(other[e315], other[e315]) * self.group0().xyx().with_w(self[e431]))
                + (other.group0().zxy() * self.group2().yzx()).with_w(other[e235] * self[e423])
                - (other.group0().yzx() * self.group2().zxy()).with_w(other[e423] * self[e235])
                - (self.group0().zxy() * other.group2().yzx()).with_w(other[e431] * self[e315])
                - (other.group1().yzx() * self.group1().zxy()).with_w(other[e412] * self[e125]),
            // e235, e315, e125, e5
            Simd32x4::from([
                other[e5] * self[e415],
                other[e5] * self[e425],
                other[e5] * self[e435],
                -(other[e315] * self[e425]) - (other[e125] * self[e435]),
            ]) + (Simd32x4::from([other[e435], other[e3], other[e425], other[e1]]) * self.group2().yxx().with_w(self[e235]))
                + (Simd32x4::from([other[e2], other[e415], other[e1], other[e2]]) * self.group2().zzy().with_w(self[e315]))
                + (self.group1().ywww() * other.group2().zyz().with_w(other[e5]))
                + (other.group2().xxy() * self.group1().wzx()).with_w(other[e3] * self[e125])
                - (Simd32x4::from(self[e235]) * other.group1().wz().with_zw(other[e2], other[e415]))
                - (Simd32x4::from(self[e315]) * Simd32x4::from([other[e3], other[e321], other[e415], other[e425]]))
                - (Simd32x4::from(self[e125]) * Simd32x4::from([other[e425], other[e1], other[e321], other[e435]]))
                - (other.group2().yzxx() * self.group1().zxyx()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e412] * self[e315])
                    + (other[e415] * self[e321])
                    + (other[e321] * self[e415])
                    + (other[e315] * self[e412])
                    + (other[e4] * self[e235])
                    + (other[e3] * self[e425]),
                (other[e423] * self[e125])
                    + (other[e425] * self[e321])
                    + (other[e321] * self[e425])
                    + (other[e125] * self[e423])
                    + (other[e4] * self[e315])
                    + (other[e1] * self[e435]),
                (other[e431] * self[e235])
                    + (other[e435] * self[e321])
                    + (other[e321] * self[e435])
                    + (other[e235] * self[e431])
                    + (other[e4] * self[e125])
                    + (other[e2] * self[e415]),
                -(other[e425] * self[e431])
                    - (other[e435] * self[e412])
                    - (other[e4] * self[e321])
                    - (other[e1] * self[e423])
                    - (other[e2] * self[e431])
                    - (other[e3] * self[e412]),
            ]) - (other.group2().zx().with_zw(other[e5], self[e435]) * self.group0().yzz().with_w(other[e412]))
                - (other.group3().ww().with_zw(other[e315], self[e425]) * self.group0().xyx().with_w(other[e431]))
                - (other.group0().yzx() * self.group2().zxy()).with_w(other[e423] * self[e415])
                - (other.group3().yzx() * self.group1().zxy()).with_w(other[e415] * self[e423]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       38       66        0
    //    simd3        2       17        0
    //    simd4       24       16        0
    // Totals...
    // yes simd       64       99        0
    //  no simd      140      181        0
    fn anti_sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(other[scalar]) * self.group0(),
            // e23, e31, e12, e45
            ((Simd32x3::from(other[e3215]) * self.group0()) + (Simd32x3::from(other[scalar]) * self.group1().xyz())).with_w(other[scalar] * self[e321] * -1.0),
            // e15, e25, e35, e1234
            ((Simd32x3::from(other[e3215]) * self.group1().xyz()) + (Simd32x3::from(other[scalar]) * self.group2())).with_w(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e3215]) * self.group0().with_w(self[e321]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlatPoint> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       55       95        0
    //    simd3        0       16        0
    //    simd4       29       18        0
    // Totals...
    // yes simd       84      129        0
    //  no simd      171      215        0
    fn anti_sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([other[e321], other[e321], other[e321], 1.0])
                * self
                    .group0()
                    .with_w((other[e321] * self[e321]) - (other[e235] * self[e423]) - (other[e315] * self[e431]) - (other[e125] * self[e412])),
            // e415, e425, e435, e321
            Simd32x4::from([
                other[e315] * self[e412] * -1.0,
                other[e125] * self[e423] * -1.0,
                other[e235] * self[e431] * -1.0,
                (other[e315] * self[e431]) + (other[e125] * self[e412]),
            ]) + (other.group0().zxyx() * self.group0().yzx().with_w(self[e423])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e235] * self[e321]) + (other[e125] * self[e425]),
                (other[e235] * self[e435]) + (other[e315] * self[e321]),
                (other[e315] * self[e415]) + (other[e125] * self[e321]),
                other[e125] * self[e435] * -1.0,
            ]) - (other.group0().yzxy() * self.group1().zxyy())
                - (self.group2() * other.group0().www()).with_w(other[e235] * self[e415]),
            // e1, e2, e3, e4
            (Simd32x3::from(other[e321]) * self.group1().xyz()).with_w(0.0) + (self.group0().zxy() * other.group0().yzx()).with_w(0.0)
                - (self.group0().yzx() * other.group0().zxy()).with_w(0.0),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlector> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       96        0
    //    simd3        0       18        0
    //    simd4       39       25        0
    // Totals...
    // yes simd       95      139        0
    //  no simd      212      250        0
    fn anti_sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                other[e3] * self[e431],
                other[e1] * self[e412],
                other[e321] * self[e412],
                -(other[e315] * self[e431]) - (other[e125] * self[e412]),
            ]) + (other.group0().ww().with_zw(other[e2], self[e321]) * self.group0().xyx().with_w(other[e321]))
                - (self.group0().zxy() * other.group1().yzx()).with_w(other[e235] * self[e423]),
            // e415, e425, e435, e321
            (other.group0().zx().with_zw(other[e5], other[e315]) * self.group0().yzz().with_w(self[e431]))
                + (other.group1().ww().with_zw(other[e315], other[e235]) * self.group0().xyx().with_w(self[e423]))
                + Simd32x3::from(0.0).with_w(-(other[e2] * self[e425]) - (other[e3] * self[e435]))
                + (self.group1().www() * other.group1().xyz()).with_w(other[e125] * self[e412])
                - (self.group0().zxy() * other.group0().yzx()).with_w(other[e1] * self[e415]),
            // e235, e315, e125, e5
            (Simd32x4::from(other[e5]) * self.group1())
                + (other.group1().yzxx() * self.group2().zxy().with_w(self[e235]))
                + (other.group0().xxy() * self.group1().wzx()).with_w(other[e2] * self[e315])
                + (other.group0().zyz() * self.group1().yww()).with_w(other[e3] * self[e125])
                - (other.group0().yzxz() * self.group1().zxyz())
                - (other.group0().ww().with_zw(other[e2], self[e415]) * self.group2().xyx().with_w(other[e235]))
                - (other.group1().zx().with_zw(other[e321], self[e425]) * self.group2().yzz().with_w(other[e315])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e315] * self[e412]) + (other[e321] * self[e415]) + (other[e3] * self[e425]),
                (other[e125] * self[e423]) + (other[e321] * self[e425]) + (other[e1] * self[e435]),
                (other[e235] * self[e431]) + (other[e321] * self[e435]) + (other[e2] * self[e415]),
                0.0,
            ]) - (other.group0().zx().with_zw(other[e5], other[e2]) * self.group0().yzz().with_w(self[e431]))
                - (other.group1().ww().with_zw(other[e315], other[e1]) * self.group0().xyx().with_w(self[e423]))
                - (other.group1().yzx() * self.group1().zxy()).with_w(other[e3] * self[e412]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiLine> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       64      114        0
    //    simd3        0       18        0
    //    simd4       31       16        0
    // Totals...
    // yes simd       95      148        0
    //  no simd      188      232        0
    fn anti_sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                other[e12] * self[e431],
                other[e23] * self[e412],
                other[e31] * self[e423],
                -(other[e31] * self[e425]) - (other[e12] * self[e435]) - (other[e15] * self[e423]) - (other[e25] * self[e431]) - (other[e35] * self[e412]),
            ]) - (other.group0().yzx() * self.group0().zxy()).with_w(other[e23] * self[e415]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e12] * self[e425]) + (other[e35] * self[e431]),
                (other[e23] * self[e435]) + (other[e15] * self[e412]),
                (other[e31] * self[e415]) + (other[e25] * self[e423]),
                other[e35] * self[e412] * -1.0,
            ]) - (other.group0().yzx() * self.group1().zxy()).with_w(other[e15] * self[e423])
                - (other.group1().yzx() * self.group0().zxy()).with_w(other[e25] * self[e431]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e12] * self[e315]) + (other[e15] * self[e321]) + (other[e35] * self[e425]),
                (other[e23] * self[e125]) + (other[e15] * self[e435]) + (other[e25] * self[e321]),
                (other[e31] * self[e235]) + (other[e25] * self[e415]) + (other[e35] * self[e321]),
                other[e12] * self[e412] * -1.0,
            ]) - (other.group0().yzx() * self.group2().zxy()).with_w(other[e23] * self[e423])
                - (other.group1().yzx() * self.group1().zxy()).with_w(other[e31] * self[e431]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e35] * self[e431],
                other[e15] * self[e412],
                other[e25] * self[e423],
                -(other[e12] * self[e125]) - (other[e15] * self[e415]) - (other[e25] * self[e425]) - (other[e35] * self[e435]),
            ]) - (other.group0() * self.group1().www()).with_w(other[e23] * self[e235])
                - (other.group1().yzx() * self.group0().zxy()).with_w(other[e31] * self[e315]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiMotor> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       80      128        0
    //    simd3        0       17        0
    //    simd4       32       18        0
    // Totals...
    // yes simd      112      163        0
    //  no simd      208      251        0
    fn anti_sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e12] * self[e431]) + (other[scalar] * self[e423]),
                (other[e23] * self[e412]) + (other[scalar] * self[e431]),
                (other[e31] * self[e423]) + (other[scalar] * self[e412]),
                -(other[e23] * self[e415]) - (other[e31] * self[e425]) - (other[e12] * self[e435]) - (other[e25] * self[e431]) - (other[e35] * self[e412]),
            ]) - (self.group0().zxy() * other.group0().yzx()).with_w(other[e15] * self[e423]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e12] * self[e425]) + (other[scalar] * self[e415]) + (other[e35] * self[e431]) + (other[e3215] * self[e423]),
                (other[e23] * self[e435]) + (other[scalar] * self[e425]) + (other[e15] * self[e412]) + (other[e3215] * self[e431]),
                (other[e31] * self[e415]) + (other[scalar] * self[e435]) + (other[e25] * self[e423]) + (other[e3215] * self[e412]),
                -(other[scalar] * self[e321]) - (other[e35] * self[e412]),
            ]) - (other.group1().yzxx() * self.group0().zxy().with_w(self[e423]))
                - (other.group0().yzx() * self.group1().zxy()).with_w(other[e25] * self[e431]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e12] * self[e315]) + (other[scalar] * self[e235]) + (other[e15] * self[e321]) + (other[e35] * self[e425]) + (other[e3215] * self[e415]),
                (other[e23] * self[e125]) + (other[scalar] * self[e315]) + (other[e15] * self[e435]) + (other[e25] * self[e321]) + (other[e3215] * self[e425]),
                (other[e31] * self[e235]) + (other[scalar] * self[e125]) + (other[e25] * self[e415]) + (other[e35] * self[e321]) + (other[e3215] * self[e435]),
                other[e12] * self[e412] * -1.0,
            ]) - (other.group0().yzxx() * self.group2().zxy().with_w(self[e423]))
                - (other.group1().yzx() * self.group1().zxy()).with_w(other[e31] * self[e431]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e35] * self[e431],
                other[e15] * self[e412],
                other[e3215] * self[e412],
                -(other[e12] * self[e125]) - (other[e15] * self[e415]) - (other[e25] * self[e425]) - (other[e35] * self[e435]),
            ]) + (self.group0().xyx() * other.group1().wwy()).with_w(other[e3215] * self[e321])
                - (self.group0().zxy() * other.group1().yzx()).with_w(other[e23] * self[e235])
                - (self.group1().www() * other.group0().xyz()).with_w(other[e31] * self[e315]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiPlane> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       96        0
    //    simd3        1       16        0
    //    simd4       25       14        0
    // Totals...
    // yes simd       82      126        0
    //  no simd      159      200        0
    fn anti_sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (self.group0().yzx() * other.group0().zxy()) - (self.group0().zxy() * other.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e1] * self[e321]) + (other[e5] * self[e423]),
                (other[e2] * self[e321]) + (other[e5] * self[e431]),
                (other[e3] * self[e321]) + (other[e5] * self[e412]),
                -(other[e1] * self[e415]) - (other[e2] * self[e425]) - (other[e3] * self[e435]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (other[e2] * self[e125]) + (other[e5] * self[e415]),
                (other[e3] * self[e235]) + (other[e5] * self[e425]),
                (other[e1] * self[e315]) + (other[e5] * self[e435]),
                -(other[e2] * self[e431]) - (other[e3] * self[e412]),
            ]) - (other.group0().zxyx() * self.group2().yzx().with_w(self[e423])),
            // e1, e2, e3, e5
            Simd32x4::from([
                -(other[e2] * self[e435]) - (other[e5] * self[e423]),
                -(other[e3] * self[e415]) - (other[e5] * self[e431]),
                -(other[e1] * self[e425]) - (other[e5] * self[e412]),
                (other[e2] * self[e315]) + (other[e3] * self[e125]) + (other[e5] * self[e321]),
            ]) + (other.group0().zxy() * self.group1().yzx()).with_w(other[e1] * self[e235]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiScalar> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       53        0
    //    simd3        0       17        0
    //    simd4       14        4        0
    // Totals...
    // yes simd       42       74        0
    //  no simd       84      120        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return Circle::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[e12345]) * self.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other[e12345]) * self.group1(),
            // e235, e315, e125
            Simd32x3::from(other[e12345]) * self.group2(),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       76      127        0
    //    simd3        0       25        0
    //    simd4       38       17        0
    // Totals...
    // yes simd      114      169        0
    //  no simd      228      270        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e435] * self[e431]) + (other[e321] * self[e423]),
                (other[e415] * self[e412]) + (other[e321] * self[e431]),
                (other[e425] * self[e423]) + (other[e321] * self[e412]),
                -(other[e415] * self[e415])
                    - (other[e425] * self[e425])
                    - (other[e435] * self[e435])
                    - (other[e235] * self[e423])
                    - (other[e315] * self[e431])
                    - (other[e125] * self[e412]),
            ]) + (self.group1().yzxw() * other.group0().zxy().with_w(other[e321]))
                - (other.group0().xyx() * self.group1().wwy()).with_w(other[e423] * self[e235])
                - (other.group0().yzz() * self.group1().zxw()).with_w(other[e431] * self[e315])
                - (self.group0().zxy() * other.group1().yzx()).with_w(other[e412] * self[e125]),
            // e415, e425, e435, e321
            (other.group0().zxy() * self.group2().yzx()).with_w(other[e235] * self[e423])
                + (other.group2().zxy() * self.group0().yzx()).with_w(other[e315] * self[e431])
                + (other.group1().zxy() * self.group1().yzx()).with_w(other[e125] * self[e412])
                - (other.group0().yzx() * self.group2().zxy()).with_w(other[e423] * self[e235])
                - (other.group2().yzx() * self.group0().zxy()).with_w(other[e431] * self[e315])
                - (other.group1().yzx() * self.group1().zxy()).with_w(other[e412] * self[e125]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e435] * self[e315]) + (other[e235] * self[e321]) + (other[e125] * self[e425]),
                (other[e415] * self[e125]) + (other[e235] * self[e435]) + (other[e315] * self[e321]),
                (other[e425] * self[e235]) + (other[e315] * self[e415]) + (other[e125] * self[e321]),
                -(other[e415] * self[e235]) - (other[e425] * self[e315]) - (other[e435] * self[e125]),
            ]) - (self.group1().zxyx() * other.group2().yzx().with_w(other[e235]))
                - (self.group2().xxy() * other.group1().wzx()).with_w(other[e315] * self[e425])
                - (self.group2().zyz() * other.group1().yww()).with_w(other[e125] * self[e435]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e415] * self[e321]) + (other[e321] * self[e415]) + (other[e315] * self[e412]),
                (other[e423] * self[e125]) + (other[e425] * self[e321]) + (other[e321] * self[e425]) + (other[e125] * self[e423]),
                (other[e431] * self[e235]) + (other[e435] * self[e321]) + (other[e321] * self[e435]) + (other[e235] * self[e431]),
                -(other[e412] * self[e435]) - (other[e415] * self[e423]) - (other[e425] * self[e431]) - (other[e435] * self[e412]),
            ]) - (other.group0().yzx() * self.group2().zxy()).with_w(other[e423] * self[e415])
                - (other.group2().zxy() * self.group0().yzx()).with_w(other[e431] * self[e425]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       82      130        0
    //    simd3        0       22        0
    //    simd4       39       21        0
    // Totals...
    // yes simd      121      173        0
    //  no simd      238      280        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e423] * other[e12345]) + (self[e431] * other[e435]) + (self[e425] * other[e412]),
                (self[e431] * other[e12345]) + (self[e412] * other[e415]) + (self[e435] * other[e423]),
                (self[e412] * other[e321]) + (self[e412] * other[e12345]) + (self[e415] * other[e431]),
                -(self[e415] * other[e415])
                    - (self[e425] * other[e425])
                    - (self[e435] * other[e435])
                    - (self[e235] * other[e423])
                    - (self[e315] * other[e431])
                    - (self[e125] * other[e412]),
            ]) + (other.group1().wwyw() * self.group0().xyx().with_w(self[e321]))
                - (self.group0().zxy() * other.group1().yzx()).with_w(self[e423] * other[e235])
                - (other.group0().xyx() * self.group1().wwy()).with_w(self[e431] * other[e315])
                - (other.group0().yzz() * self.group1().zxw()).with_w(self[e412] * other[e125]),
            // e415, e425, e435, e321
            (self.group1().yzzw() * other.group1().zx().with_zw(other[e12345], other[e12345]))
                + (other.group2().zxyx() * self.group0().yzx().with_w(self[e423]))
                + (other.group2().ww().with_zw(other[e425], other[e125]) * self.group1().xyx().with_w(self[e412]))
                + (self.group2().yzx() * other.group0().zxy()).with_w(self[e431] * other[e315])
                - (self.group0().zxy() * other.group2().yzx()).with_w(self[e235] * other[e423])
                - (self.group2().zxy() * other.group0().yzx()).with_w(self[e315] * other[e431])
                - (self.group1().zxy() * other.group1().yzx()).with_w(self[e125] * other[e412]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e425] * other[e125]) + (self[e321] * other[e235]) + (self[e235] * other[e12345]) + (self[e315] * other[e435]),
                (self[e435] * other[e235]) + (self[e321] * other[e315]) + (self[e315] * other[e12345]) + (self[e125] * other[e415]),
                (self[e415] * other[e315]) + (self[e321] * other[e125]) + (self[e235] * other[e425]) + (self[e125] * other[e12345]),
                -(self[e415] * other[e235]) - (self[e425] * other[e315]) - (self[e435] * other[e125]),
            ]) - (other.group1().ywwy() * self.group2().zyz().with_w(self[e315]))
                - (other.group1().wzxx() * self.group2().xxy().with_w(self[e235]))
                - (self.group1().zxy() * other.group2().yzx()).with_w(self[e125] * other[e435]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e412] * other[e315]) + (self[e415] * other[e321]) + (self[e321] * other[e415]) + (self[e315] * other[e412]),
                (self[e423] * other[e125]) + (self[e425] * other[e321]) + (self[e321] * other[e425]) + (self[e125] * other[e423]),
                (self[e431] * other[e235]) + (self[e435] * other[e321]) + (self[e321] * other[e435]) + (self[e235] * other[e431]),
                -(self[e412] * other[e435]) - (self[e415] * other[e423]) - (self[e425] * other[e431]) - (self[e435] * other[e412]),
            ]) - (self.group0().yzx() * other.group2().zxy()).with_w(self[e423] * other[e415])
                - (self.group2().zxy() * other.group0().yzx()).with_w(self[e431] * other[e425]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       76      126        0
    //    simd3        0       24        0
    //    simd4       38       18        0
    // Totals...
    // yes simd      114      168        0
    //  no simd      228      270        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e431] * other[e12]) + (self[e425] * other[e43]),
                (self[e412] * other[e23]) + (self[e435] * other[e41]),
                (self[e423] * other[e31]) + (self[e415] * other[e42]),
                -(self[e415] * other[e23])
                    - (self[e425] * other[e31])
                    - (self[e435] * other[e12])
                    - (self[e321] * other[e45])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43]),
            ]) - (self.group0().xxy() * other.group1().wzx()).with_w(self[e423] * other[e15])
                - (self.group0().zyz() * other.group1().yww()).with_w(self[e431] * other[e25])
                - (other.group0().xyx() * self.group1().wwy()).with_w(self[e412] * other[e35])
                - (other.group0().yzz() * self.group1().zxw()).with_w(self[e235] * other[e41]),
            // e23, e31, e12, e45
            (self.group0().yzx() * other.group2().zxy()).with_w(self[e235] * other[e41])
                + (self.group2().yzx() * other.group0().zxy()).with_w(self[e315] * other[e42])
                + (self.group1().yzx() * other.group1().zxy()).with_w(self[e125] * other[e43])
                - (self.group0().zxy() * other.group2().yzx()).with_w(self[e423] * other[e15])
                - (self.group2().zxy() * other.group0().yzx()).with_w(self[e431] * other[e25])
                - (self.group1().zxy() * other.group1().yzx()).with_w(self[e412] * other[e35]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e425] * other[e35]) + (self[e321] * other[e15]) + (self[e235] * other[e45]) + (self[e315] * other[e12]),
                (self[e435] * other[e15]) + (self[e321] * other[e25]) + (self[e315] * other[e45]) + (self[e125] * other[e23]),
                (self[e415] * other[e25]) + (self[e321] * other[e35]) + (self[e235] * other[e31]) + (self[e125] * other[e45]),
                -(self[e412] * other[e12]) - (self[e415] * other[e41]) - (self[e425] * other[e42]) - (self[e435] * other[e43]),
            ]) - (other.group1().yzxx() * self.group2().zxy().with_w(self[e423]))
                - (other.group2().yzx() * self.group1().zxy()).with_w(self[e431] * other[e31]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e431] * other[e35]) + (self[e415] * other[e45]) + (self[e125] * other[e42]),
                (self[e412] * other[e15]) + (self[e425] * other[e45]) + (self[e235] * other[e43]),
                (self[e423] * other[e25]) + (self[e435] * other[e45]) + (self[e315] * other[e41]),
                -(self[e415] * other[e15]) - (self[e425] * other[e25]) - (self[e435] * other[e35]),
            ]) - (other.group1().xyzz() * self.group1().www().with_w(self[e125]))
                - (self.group0().zxy() * other.group2().yzx()).with_w(self[e235] * other[e23])
                - (self.group2().yzx() * other.group0().zxy()).with_w(self[e315] * other[e31]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       86      135        0
    //    simd3        0       19        0
    //    simd4       48       32        0
    // Totals...
    // yes simd      134      186        0
    //  no simd      278      320        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e431] * other[e12]) + (self[e412] * other[e4315]) + (self[e415] * other[e1234]) + (self[e425] * other[e43]),
                (self[e423] * other[e4125]) + (self[e412] * other[e23]) + (self[e425] * other[e1234]) + (self[e435] * other[e41]),
                (self[e423] * other[e31]) + (self[e431] * other[e4235]) + (self[e415] * other[e42]) + (self[e435] * other[e1234]),
                -(self[e415] * other[e23]) - (self[e425] * other[e31]) - (self[e435] * other[e12]) - (self[e321] * other[e45]) - (self[e125] * other[e43]),
            ]) - (Simd32x4::from(self[e423]) * other.group1().wz().with_zw(other[e4315], other[e15]))
                - (Simd32x4::from(self[e431]) * Simd32x4::from([other[e4125], other[e45], other[e23], other[e25]]))
                - (Simd32x4::from(self[e412]) * Simd32x4::from([other[e31], other[e4235], other[e45], other[e35]]))
                - (other.group0().xyx() * self.group1().wwy()).with_w(self[e235] * other[e41])
                - (other.group0().yzz() * self.group1().zxw()).with_w(self[e315] * other[e42]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e425] * other[e12]) + (self[e315] * other[e43]),
                (self[e435] * other[e23]) + (self[e125] * other[e41]),
                (self[e415] * other[e31]) + (self[e125] * other[e1234]),
                -(self[e425] * other[e4315]) - (self[e435] * other[e4125]),
            ]) + (other.group2().zx().with_zw(other[e3215], other[e42]) * self.group0().yzz().with_w(self[e315]))
                + (other.group2().ww().with_zw(other[e42], other[e43]) * self.group2().xyx().with_w(self[e125]))
                + (other.group3().ww().with_zw(other[e25], other[e41]) * self.group0().xyx().with_w(self[e235]))
                - (self.group1().wwwx() * other.group3().xyzx())
                - (other.group2().yzxx() * self.group0().zxy().with_w(self[e423]))
                - (self.group2().zxy() * other.group0().yzx()).with_w(self[e431] * other[e25])
                - (self.group1().zxy() * other.group1().yzx()).with_w(self[e412] * other[e35]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e415] * other[e3215]) + (self[e425] * other[e35]) + (self[e321] * other[e15]),
                (self[e425] * other[e3215]) + (self[e435] * other[e15]) + (self[e321] * other[e25]),
                (self[e415] * other[e25]) + (self[e435] * other[e3215]) + (self[e321] * other[e35]),
                -(self[e415] * other[e41]) - (self[e425] * other[e42]) - (self[e435] * other[e43]) - (self[e321] * other[e1234]),
            ]) + (other.group1().zx().with_zw(other[e4315], other[e4315]) * self.group2().yzx().with_w(self[e431]))
                + (other.group3().zx().with_zw(other[e45], other[e4125]) * self.group2().yzz().with_w(self[e412]))
                + (self.group2().xyx() * other.group1().wwy()).with_w(self[e423] * other[e4235])
                - (other.group1().yzxx() * self.group2().zxy().with_w(self[e423]))
                - (self.group2().zxy() * other.group3().yzx()).with_w(self[e431] * other[e31])
                - (self.group1().zxy() * other.group2().yzx()).with_w(self[e412] * other[e12]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e431] * other[e35]) + (self[e415] * other[e45]) + (self[e425] * other[e4125]) + (self[e125] * other[e42]),
                (self[e412] * other[e15]) + (self[e425] * other[e45]) + (self[e435] * other[e4235]) + (self[e235] * other[e43]),
                (self[e412] * other[e3215]) + (self[e415] * other[e4315]) + (self[e435] * other[e45]) + (self[e315] * other[e41]),
                -(self[e415] * other[e15]) - (self[e425] * other[e25]) - (self[e435] * other[e35]) - (self[e125] * other[e4125]),
            ]) + (other.group3().ww().with_zw(other[e25], other[e3215]) * self.group0().xyx().with_w(self[e321]))
                - (other.group1().xyzz() * self.group1().www().with_w(self[e125]))
                - (other.group3().yzxy() * self.group1().zxy().with_w(self[e315]))
                - (other.group0().zx().with_zw(other[e1234], other[e31]) * self.group2().yzz().with_w(self[e315]))
                - (other.group2().ww().with_zw(other[e42], other[e4235]) * self.group2().xyx().with_w(self[e235]))
                - (self.group0().zxy() * other.group2().yzx()).with_w(self[e235] * other[e23]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       42       70        0
    //    simd3        2       18        0
    //    simd4       23       15        0
    // Totals...
    // yes simd       67      103        0
    //  no simd      140      184        0
    fn anti_sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[e12345]) * self.group0(),
            // e415, e425, e435, e321
            ((Simd32x3::from(other[e5]) * self.group0()) + (Simd32x3::from(other[e12345]) * self.group1().xyz())).with_w(self[e321] * other[e12345]),
            // e235, e315, e125, e4
            ((Simd32x3::from(other[e5]) * self.group1().xyz()) + (Simd32x3::from(other[e12345]) * self.group2())).with_w(0.0),
            // e1, e2, e3, e5
            Simd32x4::from(other[e5]) * self.group0().with_w(self[e321]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       90        0
    //    simd3        0       15        0
    //    simd4       29       20        0
    // Totals...
    // yes simd       85      125        0
    //  no simd      172      215        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([other[e45], other[e45], other[e45], 1.0])
                * self
                    .group0()
                    .with_w(-(self[e423] * other[e15]) - (self[e431] * other[e25]) - (self[e412] * other[e35]) - (self[e321] * other[e45]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            Simd32x4::from([
                self[e431] * other[e35],
                self[e412] * other[e15],
                self[e423] * other[e25],
                -(self[e431] * other[e25]) - (self[e412] * other[e35]),
            ]) - (other.group0().yzxx() * self.group0().zxy().with_w(self[e423])),
            // e15, e25, e35, e1234
            (Simd32x3::from(self[e321]) * other.group0().xyz()).with_w(0.0)
                + (Simd32x3::from(other[e45]) * self.group2()).with_w(0.0)
                + (self.group1().yzx() * other.group0().zxy()).with_w(0.0)
                - (self.group1().zxy() * other.group0().yzx()).with_w(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e431] * other[e35]) + (self[e415] * other[e45]),
                (self[e412] * other[e15]) + (self[e425] * other[e45]),
                (self[e423] * other[e25]) + (self[e435] * other[e45]),
                -(self[e425] * other[e25]) - (self[e435] * other[e35]),
            ]) - (other.group0().yzxx() * self.group0().zxy().with_w(self[e415])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       73      115        0
    //    simd3        0       13        0
    //    simd4       34       24        0
    // Totals...
    // yes simd      107      152        0
    //  no simd      209      250        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e412] * other[e4315],
                self[e423] * other[e4125],
                self[e431] * other[e4235],
                -(self[e412] * other[e35]) - (self[e321] * other[e45]),
            ]) - (other.group0().ww().with_zw(other[e4315], other[e15]) * self.group0().xyx().with_w(self[e423]))
                - (other.group1().zx().with_zw(other[e45], other[e25]) * self.group0().yzz().with_w(self[e431])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e423] * other[e3215]) + (self[e431] * other[e35]),
                (self[e431] * other[e3215]) + (self[e412] * other[e15]),
                (self[e423] * other[e25]) + (self[e412] * other[e3215]),
                -(self[e412] * other[e35]) - (self[e415] * other[e4235]) - (self[e425] * other[e4315]) - (self[e435] * other[e4125]),
            ]) - (other.group0().yzxx() * self.group0().zxy().with_w(self[e423]))
                - (self.group1().www() * other.group1().xyz()).with_w(self[e431] * other[e25]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e425] * other[e35]) + (self[e321] * other[e15]) - (self[e435] * other[e25]) - (self[e125] * other[e4315]),
                (self[e435] * other[e15]) + (self[e321] * other[e25]) - (self[e415] * other[e35]) - (self[e235] * other[e4125]),
                (self[e435] * other[e3215]) + (self[e321] * other[e35]) - (self[e425] * other[e15]) - (self[e315] * other[e4235]),
                0.0,
            ]) + (other.group0().ww().with_zw(other[e4315], other[e4235]) * self.group2().xyx().with_w(self[e423]))
                + (other.group1().zx().with_zw(other[e45], other[e4315]) * self.group2().yzz().with_w(self[e431]))
                + (other.group1().ww().with_zw(other[e25], other[e4125]) * self.group1().xyx().with_w(self[e412])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e431] * other[e35]) + (self[e415] * other[e45]) + (self[e425] * other[e4125]),
                (self[e412] * other[e15]) + (self[e425] * other[e45]) + (self[e435] * other[e4235]),
                (self[e412] * other[e3215]) + (self[e415] * other[e4315]) + (self[e435] * other[e45]),
                -(self[e415] * other[e15]) - (self[e425] * other[e25]) - (self[e435] * other[e35]) - (self[e125] * other[e4125]),
            ]) + (other.group1().ww().with_zw(other[e25], other[e3215]) * self.group0().xyx().with_w(self[e321]))
                - (other.group1().yzxy() * self.group1().zxy().with_w(self[e315]))
                - (self.group0().zxy() * other.group0().yzx()).with_w(self[e235] * other[e4235]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       68      116        0
    //    simd3        0       18        0
    //    simd4       30       15        0
    // Totals...
    // yes simd       98      149        0
    //  no simd      188      230        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[e431] * other[e435],
                self[e412] * other[e415],
                self[e423] * other[e425],
                -(self[e431] * other[e315]) - (self[e412] * other[e125]) - (self[e415] * other[e415]) - (self[e425] * other[e425]) - (self[e435] * other[e435]),
            ]) - (self.group0().zxy() * other.group0().yzx()).with_w(self[e423] * other[e235]),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(self[e412] * other[e315]) - (self[e435] * other[e425]),
                -(self[e423] * other[e125]) - (self[e415] * other[e435]),
                -(self[e431] * other[e235]) - (self[e425] * other[e415]),
                self[e412] * other[e125],
            ]) + (self.group0().yzx() * other.group1().zxy()).with_w(self[e423] * other[e235])
                + (other.group0().zxy() * self.group1().yzx()).with_w(self[e431] * other[e315]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e425] * other[e125]) + (self[e321] * other[e235]) + (self[e315] * other[e435]),
                (self[e435] * other[e235]) + (self[e321] * other[e315]) + (self[e125] * other[e415]),
                (self[e415] * other[e315]) + (self[e321] * other[e125]) + (self[e235] * other[e425]),
                -(self[e415] * other[e235]) - (self[e425] * other[e315]) - (self[e435] * other[e125]) - (self[e125] * other[e435]),
            ]) - (self.group2().zxy() * other.group0().yzx()).with_w(self[e235] * other[e415])
                - (other.group1().yzx() * self.group1().zxy()).with_w(self[e315] * other[e425]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e412] * other[e315]) + (self[e321] * other[e415]),
                (self[e423] * other[e125]) + (self[e321] * other[e425]),
                (self[e431] * other[e235]) + (self[e321] * other[e435]),
                -(self[e431] * other[e425]) - (self[e412] * other[e435]),
            ]) - (self.group0().yzx() * other.group1().zxy()).with_w(self[e423] * other[e415]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       73      121        0
    //    simd3        0       18        0
    //    simd4       34       19        0
    // Totals...
    // yes simd      107      158        0
    //  no simd      209      251        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e423] * other[e12345]) + (self[e431] * other[e435]),
                (self[e431] * other[e12345]) + (self[e412] * other[e415]),
                (self[e423] * other[e425]) + (self[e412] * other[e12345]),
                -(self[e431] * other[e315]) - (self[e412] * other[e125]) - (self[e415] * other[e415]) - (self[e425] * other[e425]) - (self[e435] * other[e435]),
            ]) - (self.group0().zxy() * other.group0().yzx()).with_w(self[e423] * other[e235]),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(self[e412] * other[e315]) - (self[e435] * other[e425]),
                -(self[e423] * other[e125]) - (self[e415] * other[e435]),
                -(self[e431] * other[e235]) - (self[e425] * other[e415]),
                0.0,
            ]) + (self.group1().yzzw() * other.group0().zxww())
                + (other.group1().zxwy() * self.group0().yzz().with_w(self[e431]))
                + (other.group1().wwyx() * self.group0().xyx().with_w(self[e423]))
                + (self.group1().xyx() * other.group0().wwy()).with_w(self[e412] * other[e125]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e415] * other[e5]) + (self[e425] * other[e125]) + (self[e321] * other[e235]) + (self[e315] * other[e435]),
                (self[e425] * other[e5]) + (self[e435] * other[e235]) + (self[e321] * other[e315]) + (self[e125] * other[e415]),
                (self[e415] * other[e315]) + (self[e435] * other[e5]) + (self[e321] * other[e125]) + (self[e125] * other[e12345]),
                -(self[e415] * other[e235]) - (self[e425] * other[e315]) - (self[e435] * other[e125]) - (self[e125] * other[e435]),
            ]) + (self.group2().xyx() * other.group0().wwy()).with_w(self[e321] * other[e5])
                - (other.group0().yzxx() * self.group2().zxy().with_w(self[e235]))
                - (self.group1().zxy() * other.group1().yzx()).with_w(self[e315] * other[e425]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e412] * other[e315]) + (self[e321] * other[e415]),
                (self[e423] * other[e125]) + (self[e321] * other[e425]),
                (self[e431] * other[e235]) + (self[e321] * other[e435]),
                self[e412] * other[e435] * -1.0,
            ]) - (self.group0().xyx() * other.group1().wwy()).with_w(self[e423] * other[e415])
                - (self.group0().yzz() * other.group1().zxw()).with_w(self[e431] * other[e425]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for Circle {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      108      170        0
    //    simd2       18       18        0
    //    simd3       72      102        0
    //    simd4       54       35        0
    // Totals...
    // yes simd      252      325        0
    //  no simd      576      652        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([self[e321] * other[e45] * -1.0, self[e321] * other[e321]])
                - (Simd32x2::from(self[e423]) * Simd32x2::from([other[e15], other[e235]]))
                - (Simd32x2::from(self[e431]) * Simd32x2::from([other[e25], other[e315]]))
                - (Simd32x2::from(self[e412]) * Simd32x2::from([other[e35], other[e125]]))
                - (Simd32x2::from(self[e415]) * Simd32x2::from([other[e23], other[e415]]))
                - (Simd32x2::from(self[e425]) * Simd32x2::from([other[e31], other[e425]]))
                - (Simd32x2::from(self[e435]) * Simd32x2::from([other[e12], other[e435]]))
                - (Simd32x2::from(self[e235]) * Simd32x2::from([other[e41], other[e423]]))
                - (Simd32x2::from(self[e315]) * Simd32x2::from([other[e42], other[e431]]))
                - (Simd32x2::from(self[e125]) * Simd32x2::from([other[e43], other[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e412] * other[e315])
                    + (self[e415] * other[e321])
                    + (self[e425] * other[e3])
                    + (self[e321] * other[e415])
                    + (self[e235] * other[e4])
                    + (self[e315] * other[e412]),
                (self[e423] * other[e125])
                    + (self[e425] * other[e321])
                    + (self[e435] * other[e1])
                    + (self[e321] * other[e425])
                    + (self[e315] * other[e4])
                    + (self[e125] * other[e423]),
                (self[e431] * other[e235])
                    + (self[e415] * other[e2])
                    + (self[e435] * other[e321])
                    + (self[e321] * other[e435])
                    + (self[e235] * other[e431])
                    + (self[e125] * other[e4]),
                -(self[e412] * other[e3])
                    - (self[e412] * other[e435])
                    - (self[e415] * other[e423])
                    - (self[e425] * other[e431])
                    - (self[e435] * other[e412])
                    - (self[e321] * other[e4]),
            ]) - (Simd32x4::from([other[e5], other[e5], other[e315], other[e1]]) * self.group0().xyx().with_w(self[e423]))
                - (other.group8().zx().with_zw(other[e5], other[e415]) * self.group0().yzz().with_w(self[e423]))
                - (self.group2().zxy() * other.group7().yzx()).with_w(self[e431] * other[e2])
                - (self.group1().zxy() * other.group1().yzx()).with_w(self[e431] * other[e425]),
            // e5
            (self[e321] * other[e5]) + (self[e235] * other[e1]) + (self[e315] * other[e2]) + (self[e125] * other[e3])
                - (self[e415] * other[e235])
                - (self[e425] * other[e315])
                - (self[e435] * other[e125])
                - (self[e235] * other[e415])
                - (self[e315] * other[e425])
                - (self[e125] * other[e435]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e415] * other[e3215]) + (self[e425] * other[e35]) + (self[e321] * other[e15]) + (self[e315] * other[e4125]),
                (self[e425] * other[e3215]) + (self[e435] * other[e15]) + (self[e321] * other[e25]) + (self[e125] * other[e4235]),
                (self[e415] * other[e25]) + (self[e435] * other[e3215]) + (self[e321] * other[e35]) + (self[e125] * other[e45]),
                -(self[e412] * other[e35]) - (self[e415] * other[e4235]) - (self[e425] * other[e4315]) - (self[e435] * other[e4125]),
            ]) + (other.group0().xx().with_zw(other[scalar], self[e235]) * self.group2().with_w(other[e41]))
                + (other.group5().zx().with_zw(other[e4315], other[e43]) * self.group2().yzx().with_w(self[e125]))
                + (other.group3().ww().with_zw(other[e31], other[e42]) * self.group2().xyx().with_w(self[e315]))
                - (other.group3().yzxy() * self.group1().zxy().with_w(self[e431]))
                - (self.group2().zxy() * other.group5().yzx()).with_w(self[e321] * other[scalar])
                - (self.group2().zxy() * other.group9().yzx()).with_w(self[e423] * other[e15]),
            // e41, e42, e43
            (Simd32x3::from(other[scalar]) * self.group0())
                + (Simd32x3::from(other[e1234]) * self.group1().xyz())
                + (Simd32x3::from([other[e12], other[e4125], other[e31]]) * self.group0().yxx())
                + (Simd32x3::from([other[e4315], other[e23], other[e4235]]) * self.group0().zzy())
                + (other.group4().zxy() * self.group1().yzx())
                - (Simd32x3::from(self[e423]) * Simd32x3::from([other[e45], other[e12], other[e4315]]))
                - (Simd32x3::from(self[e431]) * Simd32x3::from([other[e4125], other[e45], other[e23]]))
                - (Simd32x3::from(self[e412]) * Simd32x3::from([other[e31], other[e4235], other[e45]]))
                - (other.group4().xyx() * self.group1().wwy())
                - (other.group4().yzz() * self.group1().zxw()),
            // e23, e31, e12
            (Simd32x3::from(other[scalar]) * self.group1().xyz())
                + (Simd32x3::from([other[e35], other[e15], other[e3215]]) * self.group0().yzz())
                + (Simd32x3::from([other[e3215], other[e3215], other[e25]]) * self.group0().xyx())
                + (Simd32x3::from([other[e1234], other[e1234], other[e42]]) * self.group2().xyx())
                + (self.group2().yzz() * other.group4().zx().with_z(other[e1234]))
                + (other.group5().zxy() * self.group1().yzx())
                - (Simd32x3::from(self[e321]) * other.group9().xyz())
                - (self.group0().zxy() * other.group3().yzx())
                - (self.group2().zxy() * other.group4().yzx())
                - (other.group5().yzx() * self.group1().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e425] * other[e435]) + (self[e321] * other[e1]) + (self[e315] * other[e412]),
                (self[e435] * other[e415]) + (self[e321] * other[e2]) + (self[e125] * other[e423]),
                (self[e415] * other[e425]) + (self[e321] * other[e3]) + (self[e125] * other[e4]),
                -(self[e415] * other[e1]) - (self[e425] * other[e2]) - (self[e435] * other[e3]),
            ]) + (Simd32x4::from(other[e12345]) * self.group1())
                + (Simd32x4::from([other[e5], other[e5], other[e315], other[e235]]) * self.group0().xyx().with_w(self[e423]))
                + (other.group8().zx().with_zw(other[e5], other[e315]) * self.group0().yzz().with_w(self[e431]))
                + (other.group1().ww().with_zw(other[e431], other[e125]) * self.group2().xyx().with_w(self[e412]))
                - (self.group0().zxy() * other.group8().yzx()).with_w(self[e235] * other[e423])
                - (self.group2().zxy() * other.group7().yzx()).with_w(self[e315] * other[e431])
                - (self.group1().zxy() * other.group6().yzx()).with_w(self[e125] * other[e412]),
            // e423, e431, e412
            (Simd32x3::from(other[e12345]) * self.group0())
                + (Simd32x3::from(other[e4]) * self.group1().xyz())
                + (Simd32x3::from([other[e3], other[e1], other[e425]]) * self.group0().yzx())
                + (Simd32x3::from([other[e321], other[e321], other[e2]]) * self.group0().xyx())
                + (self.group0().yzz() * other.group6().zxw())
                + (other.group7().zxy() * self.group1().yzx())
                - (self.group0().zxy() * other.group1().yzx())
                - (self.group0().zxy() * other.group6().yzx())
                - (other.group7().xyx() * self.group1().wwy())
                - (other.group7().yzz() * self.group1().zxw()),
            // e235, e315, e125
            (Simd32x3::from(other[e12345]) * self.group2())
                + (Simd32x3::from(other[e5]) * self.group1().xyz())
                + (Simd32x3::from([other[e2], other[e415], other[e1]]) * self.group2().zzy())
                + (Simd32x3::from([other[e435], other[e3], other[e425]]) * self.group2().yxx())
                + (other.group8().xxy() * self.group1().wzx())
                + (other.group8().zyz() * self.group1().yww())
                - (Simd32x3::from(self[e235]) * Simd32x3::from([other[e321], other[e435], other[e2]]))
                - (Simd32x3::from(self[e315]) * Simd32x3::from([other[e3], other[e321], other[e415]]))
                - (Simd32x3::from(self[e125]) * Simd32x3::from([other[e425], other[e1], other[e321]]))
                - (other.group8().yzx() * self.group1().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e431] * other[e35]) + (self[e415] * other[e45]) + (self[e425] * other[e4125]) + (self[e125] * other[e42]),
                (self[e412] * other[e15]) + (self[e425] * other[e45]) + (self[e435] * other[e4235]) + (self[e235] * other[e43]),
                (self[e412] * other[e3215]) + (self[e415] * other[e4315]) + (self[e435] * other[e45]) + (self[e315] * other[e41]),
                -(self[e415] * other[e15]) - (self[e425] * other[e25]) - (self[e435] * other[e35]) - (self[e125] * other[e4125]),
            ]) + (other.group9().ww().with_zw(other[e25], other[e3215]) * self.group0().xyx().with_w(self[e321]))
                - (Simd32x4::from([other[e1234], other[e1234], other[e42], other[e4235]]) * self.group2().xyx().with_w(self[e235]))
                - (other.group4().zx().with_zw(other[e1234], other[e31]) * self.group2().yzz().with_w(self[e315]))
                - (other.group5() * self.group1().www()).with_w(self[e315] * other[e4315])
                - (self.group0().zxy() * other.group3().yzx()).with_w(self[e235] * other[e23])
                - (self.group1().zxy() * other.group9().yzx()).with_w(self[e125] * other[e12]),
            // e1234
            (self[e423] * other[e4235]) + (self[e431] * other[e4315]) + (self[e412] * other[e4125])
                - (self[e423] * other[e23])
                - (self[e431] * other[e31])
                - (self[e412] * other[e12])
                - (self[e415] * other[e41])
                - (self[e425] * other[e42])
                - (self[e435] * other[e43])
                - (self[e321] * other[e1234]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       81        0
    //    simd3        1       14        0
    //    simd4       29       20        0
    // Totals...
    // yes simd       70      115        0
    //  no simd      159      203        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (self.group0().zxy() * other.group0().yzx()) - (self.group0().yzx() * other.group0().zxy()),
            // e23, e31, e12, e45
            Simd32x4::from([
                self[e423] * other[e3215],
                self[e431] * other[e3215],
                self[e412] * other[e3215],
                -(self[e425] * other[e4315]) - (self[e435] * other[e4125]),
            ]) - (self.group1().wwwx() * other.group0().xyzx()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                self[e125] * other[e4315] * -1.0,
                self[e235] * other[e4125] * -1.0,
                self[e315] * other[e4235] * -1.0,
                self[e412] * other[e4125],
            ]) + (other.group0().zxyx() * self.group2().yzx().with_w(self[e423]))
                + (other.group0().wwwy() * self.group1().xyz().with_w(self[e431])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e425] * other[e4125],
                self[e435] * other[e4235],
                self[e415] * other[e4315],
                -(self[e315] * other[e4315]) - (self[e125] * other[e4125]),
            ]) + (Simd32x4::from(other[e3215]) * self.group0().with_w(self[e321]))
                - (other.group0().yzxx() * self.group1().zxy().with_w(self[e235])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       59       98        0
    //    simd3        2       16        0
    //    simd4       26       16        0
    // Totals...
    // yes simd       87      130        0
    //  no simd      169      210        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other[e4]) * self.group1().xyz()) + (self.group0().yzx() * other.group0().zxy()) - (self.group0().zxy() * other.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e423] * other[e5]) + (self[e321] * other[e1]) + (self[e235] * other[e4]),
                (self[e431] * other[e5]) + (self[e321] * other[e2]) + (self[e315] * other[e4]),
                (self[e412] * other[e5]) + (self[e321] * other[e3]) + (self[e125] * other[e4]),
                -(self[e415] * other[e1]) - (self[e425] * other[e2]) - (self[e435] * other[e3]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (self[e415] * other[e5]) + (self[e125] * other[e2]),
                (self[e425] * other[e5]) + (self[e235] * other[e3]),
                (self[e435] * other[e5]) + (self[e315] * other[e1]),
                -(self[e431] * other[e2]) - (self[e412] * other[e3]) - (self[e321] * other[e4]),
            ]) - (other.group0().zxyx() * self.group2().yzx().with_w(self[e423])),
            // e1, e2, e3, e5
            Simd32x4::from([
                -(self[e423] * other[e5]) - (self[e435] * other[e2]),
                -(self[e431] * other[e5]) - (self[e415] * other[e3]),
                -(self[e412] * other[e5]) - (self[e425] * other[e1]),
                (self[e321] * other[e5]) + (self[e125] * other[e3]),
            ]) + (other.group0().zxyy() * self.group1().yzx().with_w(self[e315]))
                + (other.group0().wwwx() * self.group2().with_w(self[e235])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       51        0
    //    simd3        0       15        0
    //    simd4       14        7        0
    // Totals...
    // yes simd       42       73        0
    //  no simd       84      124        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from(other[scalar]) * self.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other[scalar]) * self.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35
            Simd32x3::from(other[scalar]) * self.group2(),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       42       79        0
    //    simd3        2       16        0
    //    simd4       31       21        0
    // Totals...
    // yes simd       75      116        0
    //  no simd      172      211        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other[e1234]) * self.group1().xyz()) + (self.group0().zxy() * other.group0().yzx()) - (self.group0().yzx() * other.group0().zxy()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e423] * other[e3215]) + (self[e235] * other[e1234]),
                (self[e431] * other[e3215]) + (self[e315] * other[e1234]),
                (self[e412] * other[e3215]) + (self[e125] * other[e1234]),
                -(self[e425] * other[e4315]) - (self[e435] * other[e4125]),
            ]) - (self.group1().wwwx() * other.group0().xyzx()),
            // e15, e25, e35, e1234
            (other.group0().zxyx() * self.group2().yzx().with_w(self[e423]))
                + (other.group0().wwwy() * self.group1().xyz().with_w(self[e431]))
                + Simd32x3::from(0.0).with_w(self[e412] * other[e4125])
                - (self.group2().zxy() * other.group0().yzx()).with_w(self[e321] * other[e1234]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e425] * other[e4125], self[e435] * other[e4235], self[e415] * other[e4315], self[e125] * other[e4125] * -1.0])
                + (Simd32x4::from(other[e3215]) * self.group0().with_w(self[e321]))
                - (Simd32x4::from([other[e1234], other[e1234], other[e1234], other[e4235]]) * self.group2().with_w(self[e235]))
                - (other.group0().yzxy() * self.group1().zxy().with_w(self[e315])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for Circle {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       96      146        0
    //    simd3        0       20        0
    //    simd4       48       31        0
    // Totals...
    // yes simd      144      197        0
    //  no simd      288      330        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e423] * other[e321]) + (self[e431] * other[e435]) + (self[e431] * other[e3]) + (self[e415] * other[e4]) + (self[e425] * other[e412]),
                (self[e431] * other[e321]) + (self[e412] * other[e415]) + (self[e412] * other[e1]) + (self[e425] * other[e4]) + (self[e435] * other[e423]),
                (self[e423] * other[e2]) + (self[e412] * other[e12345]) + (self[e412] * other[e321]) + (self[e415] * other[e431]) + (self[e435] * other[e4]),
                -(self[e415] * other[e415]) - (self[e425] * other[e425]) - (self[e435] * other[e435]) - (self[e315] * other[e431]) - (self[e125] * other[e412]),
            ]) + (other.group0().ww().with_zw(other[e425], other[e321]) * self.group0().xyx().with_w(self[e321]))
                - (other.group0().xyzx() * self.group1().www().with_w(self[e235]))
                - (self.group0().zxy() * other.group1().yzx()).with_w(self[e423] * other[e235])
                - (self.group0().zxy() * other.group3().yzx()).with_w(self[e431] * other[e315])
                - (self.group1().zxy() * other.group0().yzx()).with_w(self[e412] * other[e125]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e415] * other[e12345]) + (self[e425] * other[e435]) + (self[e321] * other[e1]),
                (self[e425] * other[e12345]) + (self[e435] * other[e415]) + (self[e321] * other[e2]),
                (self[e415] * other[e425]) + (self[e435] * other[e12345]) + (self[e321] * other[e3]),
                -(self[e415] * other[e1]) - (self[e425] * other[e2]) - (self[e435] * other[e3]),
            ]) + (other.group2().zxwy() * self.group0().yzz().with_w(self[e431]))
                + (other.group2().wwyx() * self.group0().xyx().with_w(self[e423]))
                + (other.group0().zx().with_zw(other[e4], other[e12345]) * self.group2().yzz().with_w(self[e321]))
                + (other.group3().ww().with_zw(other[e431], other[e125]) * self.group2().xyx().with_w(self[e412]))
                - (other.group0().yzxy() * self.group2().zxy().with_w(self[e315]))
                - (self.group0().zxy() * other.group2().yzx()).with_w(self[e235] * other[e423])
                - (self.group1().zxy() * other.group1().yzx()).with_w(self[e125] * other[e412]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e425] * other[e125]) + (self[e321] * other[e235]),
                (self[e435] * other[e235]) + (self[e321] * other[e315]),
                (self[e435] * other[e5]) + (self[e321] * other[e125]),
                -(self[e425] * other[e315]) - (self[e435] * other[e125]),
            ]) + (Simd32x4::from(self[e235]) * Simd32x4::from([other[e12345], other[e3], other[e425], other[e1]]))
                + (Simd32x4::from(self[e315]) * Simd32x4::from([other[e435], other[e12345], other[e1], other[e2]]))
                + (Simd32x4::from(self[e125]) * Simd32x4::from([other[e2], other[e415], other[e12345], other[e3]]))
                + (self.group1().xyxw() * other.group2().wwyw())
                - (Simd32x4::from(self[e235]) * other.group1().wz().with_zw(other[e2], other[e415]))
                - (Simd32x4::from(self[e315]) * Simd32x4::from([other[e3], other[e321], other[e415], other[e425]]))
                - (Simd32x4::from(self[e125]) * Simd32x4::from([other[e425], other[e1], other[e321], other[e435]]))
                - (self.group1().zxyx() * other.group2().yzxx()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e412] * other[e315])
                    + (self[e415] * other[e321])
                    + (self[e425] * other[e3])
                    + (self[e321] * other[e415])
                    + (self[e235] * other[e4])
                    + (self[e315] * other[e412]),
                (self[e423] * other[e125])
                    + (self[e425] * other[e321])
                    + (self[e435] * other[e1])
                    + (self[e321] * other[e425])
                    + (self[e315] * other[e4])
                    + (self[e125] * other[e423]),
                (self[e431] * other[e235])
                    + (self[e415] * other[e2])
                    + (self[e435] * other[e321])
                    + (self[e321] * other[e435])
                    + (self[e235] * other[e431])
                    + (self[e125] * other[e4]),
                -(self[e412] * other[e435])
                    - (self[e412] * other[e3])
                    - (self[e415] * other[e423])
                    - (self[e425] * other[e431])
                    - (self[e435] * other[e412])
                    - (self[e321] * other[e4]),
            ]) - (other.group3().yzxy() * self.group1().zxy().with_w(self[e431]))
                - (self.group0().xyx() * other.group2().wwy()).with_w(self[e423] * other[e415])
                - (self.group0().yzz() * other.group2().zxw()).with_w(self[e423] * other[e1])
                - (self.group2().zxy() * other.group0().yzx()).with_w(self[e431] * other[e425]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for Circle {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       96      142        0
    //    simd3        0       16        0
    //    simd4       48       35        0
    // Totals...
    // yes simd      144      193        0
    //  no simd      288      330        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e423] * other[scalar]) + (self[e431] * other[e12]) + (self[e412] * other[e4315]) + (self[e415] * other[e1234]) + (self[e425] * other[e43]),
                (self[e423] * other[e4125]) + (self[e431] * other[scalar]) + (self[e412] * other[e23]) + (self[e425] * other[e1234]) + (self[e435] * other[e41]),
                (self[e423] * other[e31]) + (self[e431] * other[e4235]) + (self[e412] * other[scalar]) + (self[e415] * other[e42]) + (self[e435] * other[e1234]),
                -(self[e415] * other[e23]) - (self[e425] * other[e31]) - (self[e435] * other[e12]) - (self[e321] * other[e45]) - (self[e125] * other[e43]),
            ]) - (Simd32x4::from(self[e423]) * other.group1().wz().with_zw(other[e4315], other[e15]))
                - (Simd32x4::from(self[e431]) * Simd32x4::from([other[e4125], other[e45], other[e23], other[e25]]))
                - (Simd32x4::from(self[e412]) * Simd32x4::from([other[e31], other[e4235], other[e45], other[e35]]))
                - (other.group0().xyzy() * self.group1().www().with_w(self[e315]))
                - (other.group0().yzxx() * self.group1().zxy().with_w(self[e235])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e415] * other[scalar]) + (self[e425] * other[e12]) + (self[e315] * other[e43]),
                (self[e425] * other[scalar]) + (self[e435] * other[e23]) + (self[e125] * other[e41]),
                (self[e415] * other[e31]) + (self[e435] * other[scalar]) + (self[e125] * other[e1234]),
                -(self[e425] * other[e4315]) - (self[e435] * other[e4125]) - (self[e321] * other[scalar]),
            ]) + (other.group2().zx().with_zw(other[e3215], other[e42]) * self.group0().yzz().with_w(self[e315]))
                + (other.group2().ww().with_zw(other[e42], other[e43]) * self.group2().xyx().with_w(self[e125]))
                + (other.group3().ww().with_zw(other[e25], other[e41]) * self.group0().xyx().with_w(self[e235]))
                - (self.group1().wwwx() * other.group3().xyzx())
                - (other.group2().yzxx() * self.group0().zxy().with_w(self[e423]))
                - (self.group2().zxy() * other.group0().yzx()).with_w(self[e431] * other[e25])
                - (self.group1().zxy() * other.group1().yzx()).with_w(self[e412] * other[e35]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e415] * other[e3215]) + (self[e425] * other[e35]) + (self[e321] * other[e15]) + (self[e315] * other[e4125]),
                (self[e425] * other[e3215]) + (self[e435] * other[e15]) + (self[e321] * other[e25]) + (self[e125] * other[e4235]),
                (self[e415] * other[e25]) + (self[e435] * other[e3215]) + (self[e321] * other[e35]) + (self[e125] * other[e45]),
                -(self[e415] * other[e41]) - (self[e425] * other[e42]) - (self[e435] * other[e43]) - (self[e321] * other[e1234]),
            ]) + (other.group0().ww().with_zw(other[e31], other[e4235]) * self.group2().xyx().with_w(self[e423]))
                + (other.group1().zx().with_zw(other[scalar], other[e4125]) * self.group2().yzz().with_w(self[e412]))
                + (other.group1().ww().with_zw(other[e4315], other[e4315]) * self.group2().xyx().with_w(self[e431]))
                - (other.group1().yzxx() * self.group2().zxy().with_w(self[e423]))
                - (self.group2().zxy() * other.group3().yzx()).with_w(self[e431] * other[e31])
                - (self.group1().zxy() * other.group2().yzx()).with_w(self[e412] * other[e12]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e431] * other[e35]) + (self[e415] * other[e45]) + (self[e425] * other[e4125]) + (self[e125] * other[e42]),
                (self[e412] * other[e15]) + (self[e425] * other[e45]) + (self[e435] * other[e4235]) + (self[e235] * other[e43]),
                (self[e412] * other[e3215]) + (self[e415] * other[e4315]) + (self[e435] * other[e45]) + (self[e315] * other[e41]),
                -(self[e415] * other[e15]) - (self[e425] * other[e25]) - (self[e435] * other[e35]) - (self[e125] * other[e4125]),
            ]) + (other.group3().ww().with_zw(other[e25], other[e3215]) * self.group0().xyx().with_w(self[e321]))
                - (other.group1().xyzz() * self.group1().www().with_w(self[e125]))
                - (other.group3().yzxy() * self.group1().zxy().with_w(self[e315]))
                - (other.group0().zx().with_zw(other[e1234], other[e31]) * self.group2().yzz().with_w(self[e315]))
                - (other.group2().ww().with_zw(other[e42], other[e4235]) * self.group2().xyx().with_w(self[e235]))
                - (self.group0().zxy() * other.group2().yzx()).with_w(self[e235] * other[e23]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl std::ops::Div<anti_sandwich> for CircleRotor {
    type Output = anti_sandwich_partial<CircleRotor>;
    fn div(self, _rhs: anti_sandwich) -> Self::Output {
        anti_sandwich_partial(self)
    }
}
impl AntiSandwich<AntiCircleRotor> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       85      134        0
    //    simd3        0       17        0
    //    simd4       45       31        0
    // Totals...
    // yes simd      130      182        0
    //  no simd      265      309        0
    fn anti_sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e43] * self[e425]) + (other[e12] * self[e431]) + (other[scalar] * self[e423]),
                (other[e42] * self[e12345]) + (other[e23] * self[e412]) + (other[scalar] * self[e431]),
                (other[e43] * self[e12345]) + (other[e31] * self[e423]) + (other[scalar] * self[e412]),
                -(other[e23] * self[e415])
                    - (other[e31] * self[e425])
                    - (other[e12] * self[e435])
                    - (other[e45] * self[e321])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412]),
            ]) + (Simd32x4::from([self[e12345], self[e435], self[e415], self[e12345]]) * other.group0().xxy().with_w(other[scalar]))
                - (other.group0().xyx() * self.group1().wwy()).with_w(other[e41] * self[e235])
                - (other.group0().yzz() * self.group1().zxw()).with_w(other[e42] * self[e315])
                - (self.group0().xxy() * other.group1().wzx()).with_w(other[e43] * self[e125])
                - (self.group0().zyz() * other.group1().yww()).with_w(other[e15] * self[e423]),
            // e23, e31, e12, e45
            Simd32x4::from([other[scalar] * self[e415], other[scalar] * self[e425], other[scalar] * self[e435], other[scalar] * self[e321] * -1.0])
                + (Simd32x4::from([self[e425], self[e12345], self[e12345], self[e12345]]) * other.group1().zyzw())
                + (Simd32x4::from([self[e12345], self[e435], self[e415], self[e125]]) * other.group1().xxy().with_w(other[e43]))
                + (self.group2().yzxx() * other.group0().zxy().with_w(other[e41]))
                + (self.group0().yzx() * other.group2().zxy()).with_w(other[e42] * self[e315])
                - (other.group2().yzxy() * self.group0().zxy().with_w(self[e431]))
                - (other.group0().yzx() * self.group2().zxy()).with_w(other[e15] * self[e423])
                - (other.group1().yzx() * self.group1().zxy()).with_w(other[e35] * self[e412]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e12] * self[e315])
                    + (other[e45] * self[e235])
                    + (other[e15] * self[e321])
                    + (other[e15] * self[e12345])
                    + (other[e35] * self[e425])
                    + (other[scalar] * self[e235]),
                (other[e23] * self[e125])
                    + (other[e45] * self[e315])
                    + (other[e15] * self[e435])
                    + (other[e25] * self[e321])
                    + (other[e25] * self[e12345])
                    + (other[scalar] * self[e315]),
                (other[e31] * self[e235])
                    + (other[e45] * self[e125])
                    + (other[e25] * self[e415])
                    + (other[e35] * self[e321])
                    + (other[e35] * self[e12345])
                    + (other[scalar] * self[e125]),
                -(other[e43] * self[e435]) - (other[e23] * self[e423]) - (other[e31] * self[e431]) - (other[e12] * self[e412]),
            ]) - (self.group1().zxyy() * other.group2().yzx().with_w(other[e42]))
                - (other.group1().yzx() * self.group2().zxy()).with_w(other[e41] * self[e415]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e42] * self[e125]) + (other[e45] * self[e415]) + (other[e35] * self[e431]),
                (other[e43] * self[e235]) + (other[e45] * self[e425]) + (other[e15] * self[e412]),
                (other[e41] * self[e315]) + (other[e45] * self[e435]) + (other[e25] * self[e423]),
                -(other[e15] * self[e415]) - (other[e25] * self[e425]) - (other[e35] * self[e435]),
            ]) - (other.group1().xyzz() * self.group1().www().with_w(self[e125]))
                - (self.group2().yzxx() * other.group0().zxy().with_w(other[e23]))
                - (self.group0().zxy() * other.group2().yzx()).with_w(other[e31] * self[e315]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDipoleInversion> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       93      149        0
    //    simd3        0       25        0
    //    simd4       54       32        0
    // Totals...
    // yes simd      147      206        0
    //  no simd      309      352        0
    fn anti_sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e412] * self[e425]) + (other[e435] * self[e431]) + (other[e321] * self[e423]) + (other[e4] * self[e415]) + (other[e3] * self[e431]),
                (other[e431] * self[e12345]) + (other[e415] * self[e412]) + (other[e321] * self[e431]) + (other[e4] * self[e425]) + (other[e1] * self[e412]),
                (other[e412] * self[e12345]) + (other[e425] * self[e423]) + (other[e321] * self[e412]) + (other[e4] * self[e435]) + (other[e2] * self[e423]),
                -(other[e415] * self[e415]) - (other[e425] * self[e425]) - (other[e435] * self[e435]) - (other[e315] * self[e431]) - (other[e125] * self[e412]),
            ]) + (Simd32x4::from([self[e12345], self[e435], self[e415], self[e321]]) * other.group0().xxy().with_w(other[e321]))
                - (other.group0().xyx() * self.group1().wwy()).with_w(other[e423] * self[e235])
                - (other.group0().yzz() * self.group1().zxw()).with_w(other[e431] * self[e315])
                - (self.group0().zxy() * other.group1().yzx()).with_w(other[e412] * self[e125])
                - (self.group0().zxy() * other.group3().yzx()).with_w(other[e235] * self[e423]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e435] * self[e425]) + (other[e4] * self[e235]) + (other[e1] * self[e321]),
                (other[e425] * self[e12345]) + (other[e4] * self[e315]) + (other[e2] * self[e321]),
                (other[e435] * self[e12345]) + (other[e4] * self[e125]) + (other[e3] * self[e321]),
                -(other[e1] * self[e415]) - (other[e2] * self[e425]) - (other[e3] * self[e435]),
            ]) + (Simd32x4::from([self[e12345], self[e435], self[e415], self[e12345]]) * other.group1().xxyw())
                + (other.group2().zx().with_zw(other[e5], other[e125]) * self.group0().yzz().with_w(self[e412]))
                + (other.group3().ww().with_zw(other[e315], other[e315]) * self.group0().xyx().with_w(self[e431]))
                + (other.group0().zxy() * self.group2().yzx()).with_w(other[e235] * self[e423])
                - (self.group2().zxyx() * other.group0().yzx().with_w(other[e423]))
                - (self.group0().zxy() * other.group2().yzx()).with_w(other[e431] * self[e315])
                - (other.group1().yzx() * self.group1().zxy()).with_w(other[e412] * self[e125]),
            // e235, e315, e125, e5
            Simd32x4::from([
                other[e5] * self[e415],
                other[e5] * self[e425],
                other[e5] * self[e435],
                -(other[e315] * self[e425]) - (other[e125] * self[e435]),
            ]) + (Simd32x4::from([self[e425], self[e12345], self[e12345], self[e321]]) * other.group2().zyz().with_w(other[e5]))
                + (Simd32x4::from([self[e12345], self[e321], self[e321], self[e125]]) * other.group2().xyz().with_w(other[e3]))
                + (other.group3().yzxw() * self.group2().zxyw())
                + (self.group2().yzxx() * other.group1().zxy().with_w(other[e1]))
                + (other.group2().xxy() * self.group1().wzx()).with_w(other[e2] * self[e315])
                - (other.group1().yzxx() * self.group2().zxyx())
                - (other.group1().wwwy() * self.group2().xyzy())
                - (other.group2().yzx() * self.group1().zxy()).with_w(other[e435] * self[e125])
                - (other.group3().zxy() * self.group2().yzx()).with_w(other[e235] * self[e415]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e415] * self[e321])
                    + (other[e321] * self[e415])
                    + (other[e315] * self[e412])
                    + (other[e4] * self[e235])
                    + (other[e1] * self[e12345])
                    + (other[e3] * self[e425]),
                (other[e425] * self[e321])
                    + (other[e321] * self[e425])
                    + (other[e125] * self[e423])
                    + (other[e4] * self[e315])
                    + (other[e1] * self[e435])
                    + (other[e2] * self[e12345]),
                (other[e435] * self[e321])
                    + (other[e321] * self[e435])
                    + (other[e235] * self[e431])
                    + (other[e4] * self[e125])
                    + (other[e2] * self[e415])
                    + (other[e3] * self[e12345]),
                -(other[e425] * self[e431])
                    - (other[e435] * self[e412])
                    - (other[e4] * self[e321])
                    - (other[e1] * self[e423])
                    - (other[e2] * self[e431])
                    - (other[e3] * self[e412]),
            ]) + (self.group2().yzxw() * other.group0().zxy().with_w(other[e4]))
                - (other.group2().zx().with_zw(other[e5], self[e435]) * self.group0().yzz().with_w(other[e412]))
                - (other.group3().ww().with_zw(other[e315], self[e425]) * self.group0().xyx().with_w(other[e431]))
                - (other.group0().yzx() * self.group2().zxy()).with_w(other[e423] * self[e415])
                - (other.group3().yzx() * self.group1().zxy()).with_w(other[e415] * self[e423]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       49       75        0
    //    simd3        2       12        0
    //    simd4       28       25        0
    // Totals...
    // yes simd       79      112        0
    //  no simd      167      211        0
    fn anti_sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(other[scalar]) * self.group0().with_w(self[e12345]),
            // e23, e31, e12, e45
            ((Simd32x3::from(other[e3215]) * self.group0()) + (Simd32x3::from(other[scalar]) * self.group1().xyz())).with_w(other[scalar] * self[e321] * -1.0),
            // e15, e25, e35, e1234
            ((Simd32x3::from(other[e3215]) * self.group1().xyz()) + (Simd32x3::from(other[scalar]) * self.group2().xyz())).with_w(0.0),
            // e4235, e4315, e4125, e3215
            other.group0().xx().with_zw(other[e3215], (other[e3215] * self[e321]) + (other[e3215] * self[e12345])) * self.group0().with_w(1.0),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlatPoint> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       59      100        0
    //    simd3        0       16        0
    //    simd4       33       22        0
    // Totals...
    // yes simd       92      138        0
    //  no simd      191      236        0
    fn anti_sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([other[e321], other[e321], other[e321], 1.0])
                * self
                    .group0()
                    .with_w((other[e321] * self[e321]) - (other[e235] * self[e423]) - (other[e315] * self[e431]) - (other[e125] * self[e412])),
            // e415, e425, e435, e321
            Simd32x4::from([
                other[e315] * self[e412] * -1.0,
                other[e125] * self[e423] * -1.0,
                other[e235] * self[e431] * -1.0,
                (other[e315] * self[e431]) + (other[e125] * self[e412]) + (other[e321] * self[e12345]),
            ]) + (other.group0().zxyx() * self.group0().yzx().with_w(self[e423])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e235] * self[e321]) + (other[e235] * self[e12345]) + (other[e125] * self[e425]),
                (other[e235] * self[e435]) + (other[e315] * self[e321]) + (other[e315] * self[e12345]),
                (other[e315] * self[e415]) + (other[e125] * self[e321]) + (other[e125] * self[e12345]),
                other[e125] * self[e435] * -1.0,
            ]) - (other.group0().yzxx() * self.group1().zxyx())
                - (other.group0().wwwy() * self.group2().xyz().with_w(self[e425])),
            // e1, e2, e3, e4
            (Simd32x3::from(other[e321]) * self.group1().xyz()).with_w(0.0) + (self.group0().zxy() * other.group0().yzx()).with_w(0.0)
                - (self.group0().yzx() * other.group0().zxy()).with_w(0.0),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlector> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       60      102        0
    //    simd3        0       19        0
    //    simd4       44       29        0
    // Totals...
    // yes simd      104      150        0
    //  no simd      236      275        0
    fn anti_sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                other[e3] * self[e431],
                other[e1] * self[e412],
                other[e321] * self[e412],
                -(other[e315] * self[e431]) - (other[e125] * self[e412]),
            ]) + (other.group0().ww().with_zw(other[e2], self[e321]) * self.group0().xyx().with_w(other[e321]))
                - (self.group0().zxy() * other.group1().yzx()).with_w(other[e235] * self[e423]),
            // e415, e425, e435, e321
            (other.group0().zx().with_zw(other[e5], other[e315]) * self.group0().yzz().with_w(self[e431]))
                + (other.group1().ww().with_zw(other[e315], other[e235]) * self.group0().xyx().with_w(self[e423]))
                + Simd32x3::from(0.0).with_w((other[e321] * self[e12345]) - (other[e2] * self[e425]) - (other[e3] * self[e435]))
                + (self.group1().www() * other.group1().xyz()).with_w(other[e125] * self[e412])
                - (self.group0().zxy() * other.group0().yzx()).with_w(other[e1] * self[e415]),
            // e235, e315, e125, e5
            (Simd32x4::from(other[e5]) * self.group1().xyz().with_w(self[e12345]))
                + (Simd32x4::from([self[e425], self[e12345], self[e12345], self[e125]]) * other.group0().zyz().with_w(other[e3]))
                + (Simd32x4::from([self[e12345], self[e321], self[e321], self[e315]]) * other.group0().xyz().with_w(other[e2]))
                + (other.group1().yzxw() * self.group2().zxy().with_w(self[e321]))
                + (other.group0().xxy() * self.group1().wzx()).with_w(other[e1] * self[e235])
                - (other.group0().yzxx() * self.group1().zxyx())
                - (other.group0().wwwy() * self.group2().xyz().with_w(self[e425]))
                - (other.group1().zxy() * self.group2().yzx()).with_w(other[e125] * self[e435]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e315] * self[e412]) + (other[e321] * self[e415]) + (other[e1] * self[e12345]) + (other[e3] * self[e425]),
                (other[e125] * self[e423]) + (other[e321] * self[e425]) + (other[e1] * self[e435]) + (other[e2] * self[e12345]),
                (other[e235] * self[e431]) + (other[e321] * self[e435]) + (other[e2] * self[e415]) + (other[e3] * self[e12345]),
                0.0,
            ]) - (other.group0().zx().with_zw(other[e5], other[e2]) * self.group0().yzz().with_w(self[e431]))
                - (other.group1().ww().with_zw(other[e315], other[e1]) * self.group0().xyx().with_w(self[e423]))
                - (other.group1().yzx() * self.group1().zxy()).with_w(other[e3] * self[e412]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiLine> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       70      118        0
    //    simd3        0       15        0
    //    simd4       35       23        0
    // Totals...
    // yes simd      105      156        0
    //  no simd      210      255        0
    fn anti_sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                other[e12] * self[e431],
                other[e23] * self[e412],
                other[e31] * self[e423],
                -(other[e31] * self[e425]) - (other[e12] * self[e435]) - (other[e15] * self[e423]) - (other[e25] * self[e431]) - (other[e35] * self[e412]),
            ]) - (other.group0().yzx() * self.group0().zxy()).with_w(other[e23] * self[e415]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e23] * self[e12345]) + (other[e12] * self[e425]) + (other[e35] * self[e431]),
                (other[e23] * self[e435]) + (other[e31] * self[e12345]) + (other[e15] * self[e412]),
                (other[e31] * self[e415]) + (other[e12] * self[e12345]) + (other[e25] * self[e423]),
                other[e35] * self[e412] * -1.0,
            ]) - (other.group0().yzx() * self.group1().zxy()).with_w(other[e15] * self[e423])
                - (other.group1().yzx() * self.group0().zxy()).with_w(other[e25] * self[e431]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e12] * self[e315]) + (other[e15] * self[e321]) + (other[e15] * self[e12345]) + (other[e35] * self[e425]),
                (other[e23] * self[e125]) + (other[e15] * self[e435]) + (other[e25] * self[e321]) + (other[e25] * self[e12345]),
                (other[e31] * self[e235]) + (other[e25] * self[e415]) + (other[e35] * self[e321]) + (other[e35] * self[e12345]),
                other[e12] * self[e412] * -1.0,
            ]) - (other.group0().yzx() * self.group2().zxy()).with_w(other[e23] * self[e423])
                - (other.group1().yzx() * self.group1().zxy()).with_w(other[e31] * self[e431]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e35] * self[e431],
                other[e15] * self[e412],
                other[e25] * self[e423],
                -(other[e12] * self[e125]) - (other[e15] * self[e415]) - (other[e25] * self[e425]) - (other[e35] * self[e435]),
            ]) - (other.group0() * self.group1().www()).with_w(other[e23] * self[e235])
                - (other.group1().yzx() * self.group0().zxy()).with_w(other[e31] * self[e315]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiMotor> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       83      128        0
    //    simd3        0       16        0
    //    simd4       38       25        0
    // Totals...
    // yes simd      121      169        0
    //  no simd      235      276        0
    fn anti_sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                other[e12] * self[e431],
                other[e23] * self[e412],
                other[scalar] * self[e412],
                -(other[e23] * self[e415]) - (other[e31] * self[e425]) - (other[e12] * self[e435]) - (other[e25] * self[e431]) - (other[e35] * self[e412]),
            ]) + (self.group0().xyx() * other.group0().wwy()).with_w(other[scalar] * self[e12345])
                - (self.group0().zxy() * other.group0().yzx()).with_w(other[e15] * self[e423]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e23] * self[e12345]) + (other[e12] * self[e425]) + (other[scalar] * self[e415]) + (other[e35] * self[e431]) + (other[e3215] * self[e423]),
                (other[e23] * self[e435]) + (other[e31] * self[e12345]) + (other[scalar] * self[e425]) + (other[e15] * self[e412]) + (other[e3215] * self[e431]),
                (other[e31] * self[e415]) + (other[e12] * self[e12345]) + (other[scalar] * self[e435]) + (other[e25] * self[e423]) + (other[e3215] * self[e412]),
                -(other[scalar] * self[e321]) - (other[e35] * self[e412]),
            ]) - (other.group1().yzxx() * self.group0().zxy().with_w(self[e423]))
                - (other.group0().yzx() * self.group1().zxy()).with_w(other[e25] * self[e431]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e12] * self[e315])
                    + (other[scalar] * self[e235])
                    + (other[e15] * self[e321])
                    + (other[e15] * self[e12345])
                    + (other[e35] * self[e425])
                    + (other[e3215] * self[e415]),
                (other[e23] * self[e125])
                    + (other[scalar] * self[e315])
                    + (other[e15] * self[e435])
                    + (other[e25] * self[e321])
                    + (other[e25] * self[e12345])
                    + (other[e3215] * self[e425]),
                (other[e31] * self[e235])
                    + (other[scalar] * self[e125])
                    + (other[e25] * self[e415])
                    + (other[e35] * self[e321])
                    + (other[e35] * self[e12345])
                    + (other[e3215] * self[e435]),
                other[e12] * self[e412] * -1.0,
            ]) - (other.group0().yzx() * self.group2().zxy()).with_w(other[e23] * self[e423])
                - (other.group1().yzx() * self.group1().zxy()).with_w(other[e31] * self[e431]),
            // e4235, e4315, e4125, e3215
            Simd32x3::from(0.0).with_w(-(other[e12] * self[e125]) - (other[e15] * self[e415]) - (other[e25] * self[e425]) - (other[e35] * self[e435]))
                + (self.group0().xyx() * other.group1().wwy()).with_w(other[e3215] * self[e321])
                + (self.group0().yzz() * other.group1().zxw()).with_w(other[e3215] * self[e12345])
                - (other.group0().xyzy() * self.group1().www().with_w(self[e315]))
                - (self.group0().zxy() * other.group1().yzx()).with_w(other[e23] * self[e235]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiPlane> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       59      100        0
    //    simd3        1       16        0
    //    simd4       29       18        0
    // Totals...
    // yes simd       89      134        0
    //  no simd      178      220        0
    fn anti_sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (self.group0().yzx() * other.group0().zxy()) - (self.group0().zxy() * other.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e1] * self[e321]) + (other[e5] * self[e423]),
                (other[e2] * self[e321]) + (other[e5] * self[e431]),
                (other[e3] * self[e321]) + (other[e5] * self[e412]),
                -(other[e1] * self[e415]) - (other[e2] * self[e425]) - (other[e3] * self[e435]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                (other[e2] * self[e125]) + (other[e5] * self[e415]),
                (other[e3] * self[e235]) + (other[e5] * self[e425]),
                (other[e1] * self[e315]) + (other[e5] * self[e435]),
                -(other[e2] * self[e431]) - (other[e3] * self[e412]),
            ]) - (other.group0().zxy() * self.group2().yzx()).with_w(other[e1] * self[e423]),
            // e1, e2, e3, e5
            Simd32x4::from([
                -(other[e2] * self[e435]) - (other[e5] * self[e423]),
                -(other[e3] * self[e415]) - (other[e5] * self[e431]),
                -(other[e1] * self[e425]) - (other[e5] * self[e412]),
                (other[e3] * self[e125]) + (other[e5] * self[e321]) + (other[e5] * self[e12345]),
            ]) + (Simd32x4::from([self[e425], self[e12345], self[e12345], self[e315]]) * other.group0().zyzy())
                + (Simd32x4::from([self[e12345], self[e435], self[e415], self[e235]]) * other.group0().xxyx()),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiScalar> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       37       58        0
    //    simd3        0       11        0
    //    simd4       17       13        0
    // Totals...
    // yes simd       54       82        0
    //  no simd      105      143        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[e12345]) * self.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other[e12345]) * self.group1(),
            // e235, e315, e125, e12345
            Simd32x4::from(other[e12345]) * self.group2(),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       82      133        0
    //    simd3        0       24        0
    //    simd4       43       23        0
    // Totals...
    // yes simd      125      180        0
    //  no simd      254      297        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e412] * self[e425]) + (other[e435] * self[e431]) + (other[e321] * self[e423]),
                (other[e431] * self[e12345]) + (other[e415] * self[e412]) + (other[e321] * self[e431]),
                (other[e412] * self[e12345]) + (other[e425] * self[e423]) + (other[e321] * self[e412]),
                -(other[e415] * self[e415])
                    - (other[e425] * self[e425])
                    - (other[e435] * self[e435])
                    - (other[e235] * self[e423])
                    - (other[e315] * self[e431])
                    - (other[e125] * self[e412]),
            ]) + (Simd32x4::from([self[e12345], self[e435], self[e415], self[e321]]) * other.group0().xxy().with_w(other[e321]))
                - (other.group0().xyx() * self.group1().wwy()).with_w(other[e423] * self[e235])
                - (other.group0().yzz() * self.group1().zxw()).with_w(other[e431] * self[e315])
                - (self.group0().zxy() * other.group1().yzx()).with_w(other[e412] * self[e125]),
            // e415, e425, e435, e321
            (Simd32x4::from([self[e425], self[e12345], self[e12345], self[e12345]]) * other.group1().zyzw())
                + (Simd32x4::from([self[e12345], self[e435], self[e415], self[e412]]) * other.group1().xxy().with_w(other[e125]))
                + (other.group0().zxy() * self.group2().yzx()).with_w(other[e235] * self[e423])
                + (other.group2().zxy() * self.group0().yzx()).with_w(other[e315] * self[e431])
                - (self.group2().zxyx() * other.group0().yzx().with_w(other[e423]))
                - (other.group2().yzx() * self.group0().zxy()).with_w(other[e431] * self[e315])
                - (other.group1().yzx() * self.group1().zxy()).with_w(other[e412] * self[e125]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e435] * self[e315]) + (other[e235] * self[e321]) + (other[e235] * self[e12345]) + (other[e125] * self[e425]),
                (other[e415] * self[e125]) + (other[e235] * self[e435]) + (other[e315] * self[e321]) + (other[e315] * self[e12345]),
                (other[e425] * self[e235]) + (other[e315] * self[e415]) + (other[e125] * self[e321]) + (other[e125] * self[e12345]),
                -(other[e415] * self[e235]) - (other[e425] * self[e315]) - (other[e435] * self[e125]),
            ]) - (self.group1().zxyx() * other.group2().yzx().with_w(other[e235]))
                - (other.group1().yzx() * self.group2().zxy()).with_w(other[e315] * self[e425])
                - (other.group1().www() * self.group2().xyz()).with_w(other[e125] * self[e435]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e415] * self[e321]) + (other[e321] * self[e415]) + (other[e315] * self[e412]),
                (other[e423] * self[e125]) + (other[e425] * self[e321]) + (other[e321] * self[e425]) + (other[e125] * self[e423]),
                (other[e431] * self[e235]) + (other[e435] * self[e321]) + (other[e321] * self[e435]) + (other[e235] * self[e431]),
                -(other[e412] * self[e435]) - (other[e415] * self[e423]) - (other[e425] * self[e431]) - (other[e435] * self[e412]),
            ]) - (other.group0().yzx() * self.group2().zxy()).with_w(other[e423] * self[e415])
                - (other.group2().zxy() * self.group0().yzx()).with_w(other[e431] * self[e425]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       85      134        0
    //    simd3        0       22        0
    //    simd4       45       27        0
    // Totals...
    // yes simd      130      183        0
    //  no simd      265      308        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e435] * self[e431]) + (other[e321] * self[e423]) + (other[e12345] * self[e423]),
                (other[e415] * self[e412]) + (other[e321] * self[e431]) + (other[e12345] * self[e431]),
                (other[e425] * self[e423]) + (other[e321] * self[e412]) + (other[e12345] * self[e412]),
                -(other[e415] * self[e415])
                    - (other[e425] * self[e425])
                    - (other[e435] * self[e435])
                    - (other[e235] * self[e423])
                    - (other[e315] * self[e431])
                    - (other[e125] * self[e412]),
            ]) + (Simd32x4::from([self[e425], self[e12345], self[e12345], self[e12345]]) * other.group0().zyz().with_w(other[e12345]))
                + (Simd32x4::from([self[e12345], self[e435], self[e415], self[e321]]) * other.group0().xxy().with_w(other[e321]))
                - (other.group0().xyx() * self.group1().wwy()).with_w(other[e423] * self[e235])
                - (other.group0().yzz() * self.group1().zxw()).with_w(other[e431] * self[e315])
                - (self.group0().zxy() * other.group1().yzx()).with_w(other[e412] * self[e125]),
            // e415, e425, e435, e321
            (Simd32x4::from(other[e12345]) * self.group1())
                + (Simd32x4::from([self[e425], self[e12345], self[e12345], self[e12345]]) * other.group1().zyzw())
                + (Simd32x4::from([self[e12345], self[e435], self[e415], other[e125]]) * other.group1().xxy().with_w(self[e412]))
                + (other.group2().zxyy() * self.group0().yzx().with_w(self[e431]))
                + (other.group0().zxy() * self.group2().yzx()).with_w(other[e235] * self[e423])
                - (self.group2().zxyx() * other.group0().yzx().with_w(other[e423]))
                - (self.group0().zxy() * other.group2().yzx()).with_w(other[e431] * self[e315])
                - (other.group1().yzx() * self.group1().zxy()).with_w(other[e412] * self[e125]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e435] * self[e315]) + (other[e235] * self[e321]) + (other[e235] * self[e12345]) + (other[e125] * self[e425]) + (other[e12345] * self[e235]),
                (other[e415] * self[e125]) + (other[e235] * self[e435]) + (other[e315] * self[e321]) + (other[e315] * self[e12345]) + (other[e12345] * self[e315]),
                (other[e425] * self[e235]) + (other[e315] * self[e415]) + (other[e125] * self[e321]) + (other[e125] * self[e12345]) + (other[e12345] * self[e125]),
                -(other[e235] * self[e415]) - (other[e315] * self[e425]) - (other[e125] * self[e435]),
            ]) - (other.group1().yzxx() * self.group2().zxyx())
                - (other.group1().wwwy() * self.group2().xyzy())
                - (other.group2().yzx() * self.group1().zxy()).with_w(other[e435] * self[e125]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e415] * self[e321]) + (other[e321] * self[e415]) + (other[e315] * self[e412]),
                (other[e423] * self[e125]) + (other[e425] * self[e321]) + (other[e321] * self[e425]) + (other[e125] * self[e423]),
                (other[e431] * self[e235]) + (other[e435] * self[e321]) + (other[e321] * self[e435]) + (other[e235] * self[e431]),
                -(other[e412] * self[e435]) - (other[e415] * self[e423]) - (other[e425] * self[e431]) - (other[e435] * self[e412]),
            ]) - (other.group0().yzx() * self.group2().zxy()).with_w(other[e423] * self[e415])
                - (self.group0().yzx() * other.group2().zxy()).with_w(other[e431] * self[e425]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       82      130        0
    //    simd3        0       21        0
    //    simd4       43       26        0
    // Totals...
    // yes simd      125      177        0
    //  no simd      254      297        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e431] * other[e12]) + (self[e425] * other[e43]) + (self[e12345] * other[e41]),
                (self[e412] * other[e23]) + (self[e435] * other[e41]) + (self[e12345] * other[e42]),
                (self[e423] * other[e31]) + (self[e415] * other[e42]) + (self[e12345] * other[e43]),
                -(self[e415] * other[e23])
                    - (self[e425] * other[e31])
                    - (self[e435] * other[e12])
                    - (self[e321] * other[e45])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43]),
            ]) - (self.group0().xxy() * other.group1().wzx()).with_w(self[e423] * other[e15])
                - (self.group0().zyz() * other.group1().yww()).with_w(self[e431] * other[e25])
                - (other.group0().xyx() * self.group1().wwy()).with_w(self[e412] * other[e35])
                - (other.group0().yzz() * self.group1().zxw()).with_w(self[e235] * other[e41]),
            // e23, e31, e12, e45
            (Simd32x4::from(self[e12345]) * other.group1())
                + (self.group2().yzxy() * other.group0().zxy().with_w(other[e42]))
                + (self.group0().yzx() * other.group2().zxy()).with_w(self[e235] * other[e41])
                + (self.group1().yzx() * other.group1().zxy()).with_w(self[e125] * other[e43])
                - (self.group0().zxy() * other.group2().yzx()).with_w(self[e423] * other[e15])
                - (other.group0().yzx() * self.group2().zxy()).with_w(self[e431] * other[e25])
                - (self.group1().zxy() * other.group1().yzx()).with_w(self[e412] * other[e35]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e425] * other[e35]) + (self[e321] * other[e15]) + (self[e235] * other[e45]) + (self[e315] * other[e12]) + (self[e12345] * other[e15]),
                (self[e435] * other[e15]) + (self[e321] * other[e25]) + (self[e315] * other[e45]) + (self[e125] * other[e23]) + (self[e12345] * other[e25]),
                (self[e415] * other[e25]) + (self[e321] * other[e35]) + (self[e235] * other[e31]) + (self[e125] * other[e45]) + (self[e12345] * other[e35]),
                -(self[e412] * other[e12]) - (self[e415] * other[e41]) - (self[e425] * other[e42]) - (self[e435] * other[e43]),
            ]) - (other.group1().yzxy() * self.group2().zxy().with_w(self[e431]))
                - (other.group2().yzx() * self.group1().zxy()).with_w(self[e423] * other[e23]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e431] * other[e35]) + (self[e415] * other[e45]) + (self[e125] * other[e42]),
                (self[e412] * other[e15]) + (self[e425] * other[e45]) + (self[e235] * other[e43]),
                (self[e423] * other[e25]) + (self[e435] * other[e45]) + (self[e315] * other[e41]),
                -(self[e235] * other[e23]) - (self[e315] * other[e31]) - (self[e125] * other[e12]),
            ]) - (self.group0().zxy() * other.group2().yzx()).with_w(self[e415] * other[e15])
                - (other.group0().zxy() * self.group2().yzx()).with_w(self[e425] * other[e25])
                - (self.group1().www() * other.group1().xyz()).with_w(self[e435] * other[e35]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       89      136        0
    //    simd3        0       16        0
    //    simd4       55       42        0
    // Totals...
    // yes simd      144      194        0
    //  no simd      309      352        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e431] * other[e12]) + (self[e412] * other[e4315]) + (self[e415] * other[e1234]) + (self[e425] * other[e43]) + (self[e12345] * other[e41]),
                (self[e423] * other[e4125]) + (self[e412] * other[e23]) + (self[e425] * other[e1234]) + (self[e435] * other[e41]) + (self[e12345] * other[e42]),
                (self[e423] * other[e31]) + (self[e431] * other[e4235]) + (self[e415] * other[e42]) + (self[e435] * other[e1234]) + (self[e12345] * other[e43]),
                -(self[e415] * other[e23]) - (self[e425] * other[e31]) - (self[e435] * other[e12]) - (self[e321] * other[e45]) - (self[e125] * other[e43]),
            ]) - (Simd32x4::from(self[e423]) * other.group1().wz().with_zw(other[e4315], other[e15]))
                - (Simd32x4::from(self[e431]) * Simd32x4::from([other[e4125], other[e45], other[e23], other[e25]]))
                - (Simd32x4::from(self[e412]) * Simd32x4::from([other[e31], other[e4235], other[e45], other[e35]]))
                - (other.group0().xyx() * self.group1().wwy()).with_w(self[e235] * other[e41])
                - (other.group0().yzz() * self.group1().zxw()).with_w(self[e315] * other[e42]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e235] * other[e1234]) + (self[e12345] * other[e23]),
                (self[e315] * other[e1234]) + (self[e12345] * other[e31]),
                (self[e125] * other[e1234]) + (self[e12345] * other[e12]),
                -(self[e425] * other[e4315]) - (self[e435] * other[e4125]),
            ]) + (self.group2().yzxz() * other.group0().zxy().with_w(other[e43]))
                + (other.group1().zxyw() * self.group1().yzx().with_w(self[e12345]))
                + (other.group2().zx().with_zw(other[e3215], self[e315]) * self.group0().yzz().with_w(other[e42]))
                + (other.group3().ww().with_zw(other[e25], self[e235]) * self.group0().xyx().with_w(other[e41]))
                - (self.group1().wwwx() * other.group3().xyzx())
                - (other.group2().yzxx() * self.group0().zxy().with_w(self[e423]))
                - (other.group0().yzx() * self.group2().zxy()).with_w(self[e431] * other[e25])
                - (self.group1().zxy() * other.group1().yzx()).with_w(self[e412] * other[e35]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e315] * other[e12]) + (self[e315] * other[e4125]) + (self[e12345] * other[e15]),
                (self[e125] * other[e23]) + (self[e125] * other[e4235]) + (self[e12345] * other[e25]),
                (self[e235] * other[e4315]) + (self[e125] * other[e45]) + (self[e12345] * other[e35]),
                -(self[e415] * other[e41]) - (self[e425] * other[e42]) - (self[e435] * other[e43]) - (self[e321] * other[e1234]),
            ]) + (self.group2().xyxw() * other.group1().wwy().with_w(other[e1234]))
                + (other.group2().zx().with_zw(other[e3215], other[e4315]) * self.group1().yzz().with_w(self[e431]))
                + (other.group3().ww().with_zw(other[e25], other[e4235]) * self.group1().xyx().with_w(self[e423]))
                + (self.group1().www() * other.group2().xyz()).with_w(self[e412] * other[e4125])
                - (other.group1().yzxy() * self.group2().zxy().with_w(self[e431]))
                - (self.group1().zxy() * other.group2().yzx()).with_w(self[e423] * other[e23])
                - (self.group2().zxy() * other.group3().yzx()).with_w(self[e412] * other[e12]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e415] * other[e45]) + (self[e425] * other[e4125]) + (self[e125] * other[e42]) + (self[e12345] * other[e4235]),
                (self[e425] * other[e45]) + (self[e435] * other[e4235]) + (self[e235] * other[e43]) + (self[e12345] * other[e4315]),
                (self[e415] * other[e4315]) + (self[e435] * other[e45]) + (self[e315] * other[e41]) + (self[e12345] * other[e4125]),
                -(self[e315] * other[e31]) - (self[e315] * other[e4315]) - (self[e125] * other[e12]) - (self[e125] * other[e4125]),
            ]) + (other.group2().zx().with_zw(other[e3215], other[e3215]) * self.group0().yzz().with_w(self[e12345]))
                + (other.group3().ww().with_zw(other[e25], other[e3215]) * self.group0().xyx().with_w(self[e321]))
                - (self.group1().zxyz() * other.group3().yzx().with_w(other[e35]))
                - (self.group2().xyzx() * other.group2().www().with_w(other[e4235]))
                - (other.group1().xyzx() * self.group1().www().with_w(self[e235]))
                - (other.group2().yzxx() * self.group0().zxy().with_w(self[e415]))
                - (other.group0().zxy() * self.group2().yzx()).with_w(self[e425] * other[e25]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       48       77        0
    //    simd3        1       15        0
    //    simd4       29       24        0
    // Totals...
    // yes simd       78      116        0
    //  no simd      167      218        0
    fn anti_sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(other[e12345]) * self.group0().with_w(self[e12345]),
            // e415, e425, e435, e321
            ((Simd32x3::from(other[e5]) * self.group0()) + (Simd32x3::from(other[e12345]) * self.group1().xyz())).with_w(self[e321] * other[e12345]),
            // e235, e315, e125, e5
            (Simd32x4::from(other[e5]) * self.group1()) + (self.group2() * other.group0().yy().with_zw(other[e12345], other[e5])),
            // e1, e2, e3, e4
            other.group0().xx().with_zw(other[e5], 0.0) * Simd32x3::from(1.0).with_w(0.0) * self.group0().with_w(0.0) * Simd32x4::from([-1.0, -1.0, -1.0, 0.0]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       85        0
    //    simd3        0       13        0
    //    simd4       35       28        0
    // Totals...
    // yes simd       91      126        0
    //  no simd      196      236        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([other[e45], other[e45], other[e45], 1.0])
                * self
                    .group0()
                    .with_w(-(self[e423] * other[e15]) - (self[e431] * other[e25]) - (self[e412] * other[e35]) - (self[e321] * other[e45]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            (other.group0().zxyw() * self.group0().yzx().with_w(self[e12345])) + Simd32x3::from(0.0).with_w(-(self[e431] * other[e25]) - (self[e412] * other[e35]))
                - (other.group0().yzxx() * self.group0().zxy().with_w(self[e423])),
            // e15, e25, e35, e1234
            (Simd32x3::from(self[e321]) * other.group0().xyz()).with_w(0.0)
                + (Simd32x3::from(self[e12345]) * other.group0().xyz()).with_w(0.0)
                + (Simd32x3::from(other[e45]) * self.group2().xyz()).with_w(0.0)
                + (self.group1().yzx() * other.group0().zxy()).with_w(0.0)
                - (self.group1().zxy() * other.group0().yzx()).with_w(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e431] * other[e35]) + (self[e415] * other[e45]),
                (self[e412] * other[e15]) + (self[e425] * other[e45]),
                (self[e423] * other[e25]) + (self[e435] * other[e45]),
                -(self[e425] * other[e25]) - (self[e435] * other[e35]),
            ]) - (other.group0().yzxx() * self.group0().zxy().with_w(self[e415])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       73      113        0
    //    simd3        0       10        0
    //    simd4       40       33        0
    // Totals...
    // yes simd      113      156        0
    //  no simd      233      275        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e412] * other[e4315],
                self[e423] * other[e4125],
                self[e431] * other[e4235],
                -(self[e412] * other[e35]) - (self[e321] * other[e45]),
            ]) - (other.group0().ww().with_zw(other[e4315], other[e15]) * self.group0().xyx().with_w(self[e423]))
                - (other.group1().zx().with_zw(other[e45], other[e25]) * self.group0().yzz().with_w(self[e431])),
            // e23, e31, e12, e45
            Simd32x4::from([
                self[e431] * other[e35],
                self[e412] * other[e15],
                self[e412] * other[e3215],
                -(self[e412] * other[e35]) - (self[e415] * other[e4235]) - (self[e425] * other[e4315]) - (self[e435] * other[e4125]),
            ]) + (other.group1().ww().with_zw(other[e25], other[e45]) * self.group0().xyx().with_w(self[e12345]))
                - (other.group0().yzxx() * self.group0().zxy().with_w(self[e423]))
                - (self.group1().www() * other.group1().xyz()).with_w(self[e431] * other[e25]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e235] * other[e45]) + (self[e315] * other[e4125]) + (self[e12345] * other[e15]) - (self[e435] * other[e25]) - (self[e125] * other[e4315]),
                (self[e315] * other[e45]) + (self[e125] * other[e4235]) + (self[e12345] * other[e25]) - (self[e415] * other[e35]) - (self[e235] * other[e4125]),
                (self[e235] * other[e4315]) + (self[e125] * other[e45]) + (self[e12345] * other[e35]) - (self[e425] * other[e15]) - (self[e315] * other[e4235]),
                0.0,
            ]) + (other.group0().zx().with_zw(other[e3215], other[e4315]) * self.group1().yzz().with_w(self[e431]))
                + (other.group1().ww().with_zw(other[e25], other[e4235]) * self.group1().xyx().with_w(self[e423]))
                + (self.group1().www() * other.group0().xyz()).with_w(self[e412] * other[e4125]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e415] * other[e45]) + (self[e425] * other[e4125]) + (self[e12345] * other[e4235]),
                (self[e425] * other[e45]) + (self[e435] * other[e4235]) + (self[e12345] * other[e4315]),
                (self[e415] * other[e4315]) + (self[e435] * other[e45]) + (self[e12345] * other[e4125]),
                -(self[e435] * other[e35]) - (self[e235] * other[e4235]) - (self[e315] * other[e4315]) - (self[e125] * other[e4125]),
            ]) + (other.group0().zx().with_zw(other[e3215], other[e3215]) * self.group0().yzz().with_w(self[e12345]))
                + (other.group1().ww().with_zw(other[e25], other[e3215]) * self.group0().xyx().with_w(self[e321]))
                - (self.group1().zxyy() * other.group1().yzx().with_w(other[e25]))
                - (other.group0().yzxx() * self.group0().zxy().with_w(self[e415])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       71      118        0
    //    simd3        0       17        0
    //    simd4       35       21        0
    // Totals...
    // yes simd      106      156        0
    //  no simd      211      253        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[e431] * other[e435],
                self[e412] * other[e415],
                self[e423] * other[e425],
                -(self[e431] * other[e315]) - (self[e412] * other[e125]) - (self[e415] * other[e415]) - (self[e425] * other[e425]) - (self[e435] * other[e435]),
            ]) - (self.group0().zxy() * other.group0().yzx()).with_w(self[e423] * other[e235]),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(self[e412] * other[e315]) - (self[e435] * other[e425]),
                -(self[e423] * other[e125]) - (self[e415] * other[e435]),
                -(self[e431] * other[e235]) - (self[e425] * other[e415]),
                0.0,
            ]) + (Simd32x4::from([self[e425], self[e12345], self[e12345], other[e125]]) * other.group0().zyz().with_w(self[e412]))
                + (Simd32x4::from([self[e12345], self[e435], self[e415], other[e315]]) * other.group0().xxy().with_w(self[e431]))
                + (self.group0().yzx() * other.group1().zxy()).with_w(self[e423] * other[e235]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e425] * other[e125]) + (self[e321] * other[e235]) + (self[e315] * other[e435]) + (self[e12345] * other[e235]),
                (self[e435] * other[e235]) + (self[e321] * other[e315]) + (self[e125] * other[e415]) + (self[e12345] * other[e315]),
                (self[e415] * other[e315]) + (self[e321] * other[e125]) + (self[e235] * other[e425]) + (self[e12345] * other[e125]),
                -(self[e415] * other[e235]) - (self[e425] * other[e315]) - (self[e435] * other[e125]) - (self[e125] * other[e435]),
            ]) - (self.group2().zxyx() * other.group0().yzx().with_w(other[e415]))
                - (other.group1().yzx() * self.group1().zxy()).with_w(self[e315] * other[e425]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e412] * other[e315]) + (self[e321] * other[e415]),
                (self[e423] * other[e125]) + (self[e321] * other[e425]),
                (self[e431] * other[e235]) + (self[e321] * other[e435]),
                -(self[e431] * other[e425]) - (self[e412] * other[e435]),
            ]) - (self.group0().yzx() * other.group1().zxy()).with_w(self[e423] * other[e415]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       73      122        0
    //    simd3        0       18        0
    //    simd4       40       25        0
    // Totals...
    // yes simd      113      165        0
    //  no simd      233      276        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[e431] * other[e435],
                self[e412] * other[e415],
                self[e412] * other[e12345],
                -(self[e431] * other[e315]) - (self[e412] * other[e125]) - (self[e415] * other[e415]) - (self[e425] * other[e425]) - (self[e435] * other[e435]),
            ]) + (other.group0().wwyw() * self.group0().xyx().with_w(self[e12345]))
                - (self.group0().zxy() * other.group0().yzx()).with_w(self[e423] * other[e235]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e12345] * other[e415]) - (self[e412] * other[e315]) - (self[e435] * other[e425]),
                (self[e12345] * other[e425]) - (self[e423] * other[e125]) - (self[e415] * other[e435]),
                (self[e12345] * other[e435]) - (self[e431] * other[e235]) - (self[e425] * other[e415]),
                0.0,
            ]) + (self.group1().yzzw() * other.group0().zxww())
                + (other.group1().zxwy() * self.group0().yzz().with_w(self[e431]))
                + (other.group1().wwyx() * self.group0().xyx().with_w(self[e423]))
                + (self.group1().xyx() * other.group0().wwy()).with_w(self[e412] * other[e125]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e321] * other[e235]) + (self[e235] * other[e12345]) + (self[e315] * other[e435]) + (self[e12345] * other[e235]),
                (self[e321] * other[e315]) + (self[e315] * other[e12345]) + (self[e125] * other[e415]) + (self[e12345] * other[e315]),
                (self[e321] * other[e125]) + (self[e235] * other[e425]) + (self[e125] * other[e12345]) + (self[e12345] * other[e125]),
                -(self[e435] * other[e125]) - (self[e235] * other[e415]) - (self[e315] * other[e425]) - (self[e125] * other[e435]),
            ]) + (self.group1().xyxw() * other.group1().wwyw())
                + (other.group1().zxww() * self.group1().yzz().with_w(self[e12345]))
                - (self.group1().zxyx() * other.group1().yzxx())
                - (self.group2().zxy() * other.group0().yzx()).with_w(self[e425] * other[e315]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e412] * other[e315]) + (self[e321] * other[e415]),
                (self[e423] * other[e125]) + (self[e321] * other[e425]),
                (self[e431] * other[e235]) + (self[e321] * other[e435]),
                self[e412] * other[e435] * -1.0,
            ]) - (self.group0().xyx() * other.group1().wwy()).with_w(self[e423] * other[e415])
                - (self.group0().yzz() * other.group1().zxw()).with_w(self[e431] * other[e425]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for CircleRotor {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      112      179        0
    //    simd2       20       20        0
    //    simd3       80      114        0
    //    simd4       62       39        0
    // Totals...
    // yes simd      274      352        0
    //  no simd      640      717        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([self[e321] * other[e45] * -1.0, self[e321] * other[e321]]) + (Simd32x2::from(self[e12345]) * other.group0())
                - (Simd32x2::from(self[e423]) * Simd32x2::from([other[e15], other[e235]]))
                - (Simd32x2::from(self[e431]) * Simd32x2::from([other[e25], other[e315]]))
                - (Simd32x2::from(self[e412]) * Simd32x2::from([other[e35], other[e125]]))
                - (Simd32x2::from(self[e415]) * Simd32x2::from([other[e23], other[e415]]))
                - (Simd32x2::from(self[e425]) * Simd32x2::from([other[e31], other[e425]]))
                - (Simd32x2::from(self[e435]) * Simd32x2::from([other[e12], other[e435]]))
                - (Simd32x2::from(self[e235]) * Simd32x2::from([other[e41], other[e423]]))
                - (Simd32x2::from(self[e315]) * Simd32x2::from([other[e42], other[e431]]))
                - (Simd32x2::from(self[e125]) * Simd32x2::from([other[e43], other[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e415] * other[e321])
                    + (self[e425] * other[e3])
                    + (self[e321] * other[e415])
                    + (self[e235] * other[e4])
                    + (self[e315] * other[e412])
                    + (self[e12345] * other[e1]),
                (self[e425] * other[e321])
                    + (self[e435] * other[e1])
                    + (self[e321] * other[e425])
                    + (self[e315] * other[e4])
                    + (self[e125] * other[e423])
                    + (self[e12345] * other[e2]),
                (self[e415] * other[e2])
                    + (self[e435] * other[e321])
                    + (self[e321] * other[e435])
                    + (self[e235] * other[e431])
                    + (self[e125] * other[e4])
                    + (self[e12345] * other[e3]),
                -(self[e412] * other[e3])
                    - (self[e412] * other[e435])
                    - (self[e415] * other[e423])
                    - (self[e425] * other[e431])
                    - (self[e435] * other[e412])
                    - (self[e321] * other[e4]),
            ]) + (self.group0().zxy() * other.group8().yzx()).with_w(self[e12345] * other[e4])
                - (Simd32x4::from([other[e5], other[e5], other[e315], other[e1]]) * self.group0().xyx().with_w(self[e423]))
                - (other.group8().zx().with_zw(other[e5], other[e415]) * self.group0().yzz().with_w(self[e423]))
                - (other.group7().yzx() * self.group2().zxy()).with_w(self[e431] * other[e2])
                - (self.group1().zxy() * other.group1().yzx()).with_w(self[e431] * other[e425]),
            // e5
            (self[e321] * other[e5]) + (self[e235] * other[e1]) + (self[e315] * other[e2]) + (self[e125] * other[e3]) + (self[e12345] * other[e5])
                - (self[e415] * other[e235])
                - (self[e425] * other[e315])
                - (self[e435] * other[e125])
                - (self[e235] * other[e415])
                - (self[e315] * other[e425])
                - (self[e125] * other[e435]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e321] * other[e15]) + (self[e235] * other[e45]) + (self[e315] * other[e4125]) + (self[e12345] * other[e15]),
                (self[e321] * other[e25]) + (self[e315] * other[e45]) + (self[e125] * other[e4235]) + (self[e12345] * other[e25]),
                (self[e321] * other[e35]) + (self[e235] * other[e4315]) + (self[e125] * other[e45]) + (self[e12345] * other[e35]),
                -(self[e412] * other[e35]) - (self[e415] * other[e4235]) - (self[e425] * other[e4315]) - (self[e435] * other[e4125]),
            ]) + (self.group2().xyzx() * other.group0().xx().with_zw(other[scalar], other[e41]))
                + (self.group2().yzxy() * other.group5().zxy().with_w(other[e42]))
                + (other.group3().zx().with_zw(other[e3215], other[e45]) * self.group1().yzz().with_w(self[e12345]))
                + (other.group9().ww().with_zw(other[e25], self[e125]) * self.group1().xyx().with_w(other[e43]))
                - (other.group3().yzxx() * self.group1().zxy().with_w(self[e423]))
                - (other.group5().yzx() * self.group2().zxy()).with_w(self[e321] * other[scalar])
                - (self.group2().zxy() * other.group9().yzx()).with_w(self[e431] * other[e25]),
            // e41, e42, e43
            (Simd32x3::from(other[scalar]) * self.group0())
                + (Simd32x3::from(other[e1234]) * self.group1().xyz())
                + (Simd32x3::from([self[e425], self[e12345], self[e12345]]) * other.group4().zyz())
                + (Simd32x3::from([self[e12345], self[e435], self[e415]]) * other.group4().xxy())
                + (Simd32x3::from([other[e12], other[e4125], other[e31]]) * self.group0().yxx())
                + (Simd32x3::from([other[e4315], other[e23], other[e4235]]) * self.group0().zzy())
                - (Simd32x3::from(self[e423]) * Simd32x3::from([other[e45], other[e12], other[e4315]]))
                - (Simd32x3::from(self[e431]) * Simd32x3::from([other[e4125], other[e45], other[e23]]))
                - (Simd32x3::from(self[e412]) * Simd32x3::from([other[e31], other[e4235], other[e45]]))
                - (other.group4().xyx() * self.group1().wwy())
                - (other.group4().yzz() * self.group1().zxw()),
            // e23, e31, e12
            (Simd32x3::from(other[scalar]) * self.group1().xyz())
                + (Simd32x3::from(other[e1234]) * self.group2().xyz())
                + (Simd32x3::from([self[e425], self[e12345], self[e12345]]) * other.group5().zyz())
                + (Simd32x3::from([self[e12345], self[e435], self[e415]]) * other.group5().xxy())
                + (Simd32x3::from([other[e35], other[e15], other[e3215]]) * self.group0().yzz())
                + (Simd32x3::from([other[e3215], other[e3215], other[e25]]) * self.group0().xyx())
                + (other.group4().zxy() * self.group2().yzx())
                - (Simd32x3::from(self[e321]) * other.group9().xyz())
                - (self.group0().zxy() * other.group3().yzx())
                - (other.group4().yzx() * self.group2().zxy())
                - (other.group5().yzx() * self.group1().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e321] * other[e1]) + (self[e235] * other[e4]) + (self[e12345] * other[e415]),
                (self[e321] * other[e2]) + (self[e315] * other[e4]) + (self[e12345] * other[e425]),
                (self[e321] * other[e3]) + (self[e125] * other[e4]) + (self[e12345] * other[e435]),
                -(self[e415] * other[e1]) - (self[e425] * other[e2]) - (self[e435] * other[e3]),
            ]) + (Simd32x4::from(other[e12345]) * self.group1())
                + (Simd32x4::from([other[e5], other[e5], other[e315], other[e235]]) * self.group0().xyx().with_w(self[e423]))
                + (other.group6().zxyw() * self.group1().yzx().with_w(self[e12345]))
                + (other.group8().zx().with_zw(other[e5], other[e315]) * self.group0().yzz().with_w(self[e431]))
                + (other.group7().zxy() * self.group2().yzx()).with_w(self[e412] * other[e125])
                - (self.group2().zxyy() * other.group7().yzx().with_w(other[e431]))
                - (self.group0().zxy() * other.group8().yzx()).with_w(self[e235] * other[e423])
                - (self.group1().zxy() * other.group6().yzx()).with_w(self[e125] * other[e412]),
            // e423, e431, e412
            (Simd32x3::from(other[e12345]) * self.group0())
                + (Simd32x3::from(other[e4]) * self.group1().xyz())
                + (Simd32x3::from([self[e425], self[e12345], self[e12345]]) * other.group7().zyz())
                + (Simd32x3::from([self[e12345], self[e435], self[e415]]) * other.group7().xxy())
                + (Simd32x3::from([other[e3], other[e1], other[e425]]) * self.group0().yzx())
                + (Simd32x3::from([other[e321], other[e321], other[e2]]) * self.group0().xyx())
                + (self.group0().yzz() * other.group6().zxw())
                - (self.group0().zxy() * other.group1().yzx())
                - (self.group0().zxy() * other.group6().yzx())
                - (other.group7().xyx() * self.group1().wwy())
                - (other.group7().yzz() * self.group1().zxw()),
            // e235, e315, e125
            (Simd32x3::from(other[e12345]) * self.group2().xyz())
                + (Simd32x3::from(other[e5]) * self.group1().xyz())
                + (Simd32x3::from([self[e425], self[e12345], self[e12345]]) * other.group8().zyz())
                + (Simd32x3::from([self[e12345], self[e321], self[e321]]) * other.group8())
                + (Simd32x3::from([other[e2], other[e415], other[e1]]) * self.group2().zzy())
                + (Simd32x3::from([other[e435], other[e3], other[e425]]) * self.group2().yxx())
                + (other.group8().xxy() * self.group1().wzx())
                - (Simd32x3::from(self[e235]) * Simd32x3::from([other[e321], other[e435], other[e2]]))
                - (Simd32x3::from(self[e315]) * Simd32x3::from([other[e3], other[e321], other[e415]]))
                - (Simd32x3::from(self[e125]) * Simd32x3::from([other[e425], other[e1], other[e321]]))
                - (other.group8().yzx() * self.group1().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e415] * other[e45]) + (self[e425] * other[e4125]) + (self[e125] * other[e42]) + (self[e12345] * other[e4235]),
                (self[e425] * other[e45]) + (self[e435] * other[e4235]) + (self[e235] * other[e43]) + (self[e12345] * other[e4315]),
                (self[e415] * other[e4315]) + (self[e435] * other[e45]) + (self[e315] * other[e41]) + (self[e12345] * other[e4125]),
                -(self[e435] * other[e35]) - (self[e235] * other[e4235]) - (self[e315] * other[e4315]) - (self[e125] * other[e4125]),
            ]) + (other.group3().zx().with_zw(other[e3215], other[e3215]) * self.group0().yzz().with_w(self[e12345]))
                + (other.group9().ww().with_zw(other[e25], other[e3215]) * self.group0().xyx().with_w(self[e321]))
                - (Simd32x4::from([other[e1234], other[e1234], other[e1234], other[e25]]) * self.group2().xyz().with_w(self[e425]))
                - (self.group1().zxyx() * other.group9().yzx().with_w(other[e15]))
                - (self.group2().yzxy() * other.group4().zxy().with_w(other[e31]))
                - (other.group5() * self.group1().www()).with_w(self[e125] * other[e12])
                - (self.group0().zxy() * other.group3().yzx()).with_w(self[e235] * other[e23]),
            // e1234
            (self[e423] * other[e4235]) + (self[e431] * other[e4315]) + (self[e412] * other[e4125]) + (self[e12345] * other[e1234])
                - (self[e423] * other[e23])
                - (self[e431] * other[e31])
                - (self[e412] * other[e12])
                - (self[e415] * other[e41])
                - (self[e425] * other[e42])
                - (self[e435] * other[e43])
                - (self[e321] * other[e1234]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       43       85        0
    //    simd3        1       14        0
    //    simd4       33       24        0
    // Totals...
    // yes simd       77      123        0
    //  no simd      178      223        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (self.group0().zxy() * other.group0().yzx()) - (self.group0().yzx() * other.group0().zxy()),
            // e23, e31, e12, e45
            Simd32x4::from([
                self[e423] * other[e3215],
                self[e431] * other[e3215],
                self[e412] * other[e3215],
                -(self[e425] * other[e4315]) - (self[e435] * other[e4125]),
            ]) - (self.group1().wwwx() * other.group0().xyzx()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                self[e125] * other[e4315] * -1.0,
                self[e235] * other[e4125] * -1.0,
                self[e315] * other[e4235] * -1.0,
                self[e412] * other[e4125],
            ]) + (other.group0().zxyy() * self.group2().yzx().with_w(self[e431]))
                + (other.group0().wwwx() * self.group1().xyz().with_w(self[e423])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e12345] * other[e4235],
                self[e12345] * other[e4315],
                self[e12345] * other[e4125],
                -(self[e315] * other[e4315]) - (self[e125] * other[e4125]),
            ]) + (Simd32x4::from(other[e3215]) * self.group0().with_w(self[e321]))
                + (other.group0().zxyw() * self.group1().yzx().with_w(self[e12345]))
                - (other.group0().yzxx() * self.group1().zxy().with_w(self[e235])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       59       99        0
    //    simd3        2       16        0
    //    simd4       31       21        0
    // Totals...
    // yes simd       92      136        0
    //  no simd      189      231        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other[e4]) * self.group1().xyz()) + (self.group0().yzx() * other.group0().zxy()) - (self.group0().zxy() * other.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e423] * other[e5]) + (self[e321] * other[e1]) + (self[e235] * other[e4]),
                (self[e431] * other[e5]) + (self[e321] * other[e2]) + (self[e315] * other[e4]),
                (self[e412] * other[e5]) + (self[e321] * other[e3]) + (self[e125] * other[e4]),
                -(self[e415] * other[e1]) - (self[e425] * other[e2]) - (self[e435] * other[e3]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                self[e125] * other[e2],
                self[e235] * other[e3],
                self[e315] * other[e1],
                -(self[e431] * other[e2]) - (self[e412] * other[e3]) - (self[e321] * other[e4]),
            ]) + (Simd32x4::from([other[e5], other[e5], other[e5], other[e4]]) * self.group1().xyz().with_w(self[e12345]))
                - (other.group0().zxyx() * self.group2().yzx().with_w(self[e423])),
            // e1, e2, e3, e5
            Simd32x4::from([
                -(self[e423] * other[e5]) - (self[e435] * other[e2]),
                -(self[e431] * other[e5]) - (self[e415] * other[e3]),
                -(self[e412] * other[e5]) - (self[e425] * other[e1]),
                (self[e125] * other[e3]) + (self[e12345] * other[e5]),
            ]) + (self.group1().yzxw() * other.group0().zxy().with_w(other[e5]))
                + (self.group2().xyzx() * other.group0().wwwx())
                + (self.group2().wwwy() * other.group0().xyzy()),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       37       64        0
    //    simd3        0       12        0
    //    simd4       17       12        0
    // Totals...
    // yes simd       54       88        0
    //  no simd      105      148        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(other[scalar]) * self.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other[scalar]) * self.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, scalar
            Simd32x4::from(other[scalar]) * self.group2(),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       46       84        0
    //    simd3        2       16        0
    //    simd4       35       25        0
    // Totals...
    // yes simd       83      125        0
    //  no simd      192      232        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other[e1234]) * self.group1().xyz()) + (self.group0().zxy() * other.group0().yzx()) - (self.group0().yzx() * other.group0().zxy()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e423] * other[e3215]) + (self[e235] * other[e1234]),
                (self[e431] * other[e3215]) + (self[e315] * other[e1234]),
                (self[e412] * other[e3215]) + (self[e125] * other[e1234]),
                -(self[e425] * other[e4315]) - (self[e435] * other[e4125]),
            ]) - (self.group1().wwwx() * other.group0().xyzx()),
            // e15, e25, e35, e1234
            (other.group0().zxyy() * self.group2().yzx().with_w(self[e431]))
                + (other.group0().wwwx() * self.group1().xyz().with_w(self[e423]))
                + Simd32x3::from(0.0).with_w((self[e412] * other[e4125]) + (self[e12345] * other[e1234]))
                - (self.group2().zxy() * other.group0().yzx()).with_w(self[e321] * other[e1234]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e12345] * other[e4235], self[e12345] * other[e4315], self[e12345] * other[e4125], self[e125] * other[e4125] * -1.0])
                + (Simd32x4::from(other[e3215]) * self.group0().with_w(self[e321]))
                + (other.group0().zxyw() * self.group1().yzx().with_w(self[e12345]))
                - (Simd32x4::from([other[e1234], other[e1234], other[e1234], other[e4315]]) * self.group2().xyzy())
                - (other.group0().yzxx() * self.group1().zxy().with_w(self[e235])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for CircleRotor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       96      153        0
    //    simd3        0       26        0
    //    simd4       56       33        0
    // Totals...
    // yes simd      152      212        0
    //  no simd      320      363        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e431] * other[e435]) + (self[e431] * other[e3]) + (self[e415] * other[e4]) + (self[e425] * other[e412]) + (self[e12345] * other[e423]),
                (self[e412] * other[e415]) + (self[e412] * other[e1]) + (self[e425] * other[e4]) + (self[e435] * other[e423]) + (self[e12345] * other[e431]),
                (self[e412] * other[e12345]) + (self[e412] * other[e321]) + (self[e415] * other[e431]) + (self[e435] * other[e4]) + (self[e12345] * other[e412]),
                -(self[e425] * other[e425]) - (self[e435] * other[e435]) - (self[e235] * other[e423]) - (self[e315] * other[e431]) - (self[e125] * other[e412]),
            ]) + (other.group0().ww().with_zw(other[e425], other[e321]) * self.group0().xyx().with_w(self[e321]))
                + (other.group1().ww().with_zw(other[e2], other[e12345]) * self.group0().xyx().with_w(self[e12345]))
                - (self.group1().wwwx() * other.group0().xyz().with_w(other[e415]))
                - (self.group0().zxy() * other.group1().yzx()).with_w(self[e423] * other[e235])
                - (self.group0().zxy() * other.group3().yzx()).with_w(self[e431] * other[e315])
                - (self.group1().zxy() * other.group0().yzx()).with_w(self[e412] * other[e125]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e235] * other[e4]) + (self[e315] * other[e412]) + (self[e12345] * other[e415]),
                (self[e315] * other[e4]) + (self[e125] * other[e423]) + (self[e12345] * other[e425]),
                (self[e235] * other[e431]) + (self[e125] * other[e4]) + (self[e12345] * other[e435]),
                -(self[e235] * other[e423]) - (self[e315] * other[e431]) - (self[e125] * other[e412]),
            ]) + (self.group1().yzzw() * other.group1().zx().with_zw(other[e12345], other[e12345]))
                + (other.group2().zxwy() * self.group0().yzz().with_w(self[e431]))
                + (other.group2().wwyx() * self.group0().xyx().with_w(self[e423]))
                + (other.group0().ww().with_zw(other[e425], other[e125]) * self.group1().xyx().with_w(self[e412]))
                + (self.group1().www() * other.group3().xyz()).with_w(self[e12345] * other[e321])
                - (self.group1().zxyy() * other.group1().yzx().with_w(other[e2]))
                - (self.group0().zxy() * other.group2().yzx()).with_w(self[e415] * other[e1])
                - (self.group2().zxy() * other.group0().yzx()).with_w(self[e435] * other[e3]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e125] * other[e2]) + (self[e12345] * other[e235]),
                (self[e125] * other[e415]) + (self[e12345] * other[e315]),
                (self[e125] * other[e12345]) + (self[e12345] * other[e125]),
                -(self[e315] * other[e425]) - (self[e125] * other[e435]),
            ]) + (Simd32x4::from([other[e12345], other[e3], other[e425], other[e3]]) * self.group2().xxxz())
                + (Simd32x4::from([other[e435], other[e12345], other[e1], other[e5]]) * self.group2().yyyw())
                + (self.group1().xyxw() * other.group2().wwyw())
                + (self.group1().yzz() * other.group2().zxw()).with_w(self[e235] * other[e1])
                + (self.group1().www() * other.group2().xyz()).with_w(self[e315] * other[e2])
                - (Simd32x4::from([other[e425], other[e1], other[e321], other[e415]]) * self.group2().zzzx())
                - (Simd32x4::from([other[e3], other[e321], other[e415], other[e125]]) * self.group2().yyy().with_w(self[e435]))
                - (self.group1().zxyx() * other.group2().yzxx())
                - (other.group1().wz().with_zw(other[e2], other[e315]) * self.group2().xxx().with_w(self[e425])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e415] * other[e321])
                    + (self[e425] * other[e3])
                    + (self[e321] * other[e415])
                    + (self[e235] * other[e4])
                    + (self[e315] * other[e412])
                    + (self[e12345] * other[e1]),
                (self[e425] * other[e321])
                    + (self[e435] * other[e1])
                    + (self[e321] * other[e425])
                    + (self[e315] * other[e4])
                    + (self[e125] * other[e423])
                    + (self[e12345] * other[e2]),
                (self[e415] * other[e2])
                    + (self[e435] * other[e321])
                    + (self[e321] * other[e435])
                    + (self[e235] * other[e431])
                    + (self[e125] * other[e4])
                    + (self[e12345] * other[e3]),
                -(self[e412] * other[e435])
                    - (self[e412] * other[e3])
                    - (self[e415] * other[e423])
                    - (self[e425] * other[e431])
                    - (self[e435] * other[e412])
                    - (self[e321] * other[e4]),
            ]) + (self.group0().zxy() * other.group2().yzx()).with_w(self[e12345] * other[e4])
                - (self.group0().xyx() * other.group2().wwy()).with_w(self[e423] * other[e415])
                - (self.group0().yzz() * other.group2().zxw()).with_w(self[e423] * other[e1])
                - (self.group1().zxy() * other.group3().yzx()).with_w(self[e431] * other[e425])
                - (self.group2().zxy() * other.group0().yzx()).with_w(self[e431] * other[e2]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for CircleRotor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       96      141        0
    //    simd3        0       14        0
    //    simd4       56       45        0
    // Totals...
    // yes simd      152      200        0
    //  no simd      320      363        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e431] * other[e12]) + (self[e412] * other[e4315]) + (self[e415] * other[e1234]) + (self[e425] * other[e43]) + (self[e12345] * other[e41]),
                (self[e431] * other[scalar]) + (self[e412] * other[e23]) + (self[e425] * other[e1234]) + (self[e435] * other[e41]) + (self[e12345] * other[e42]),
                (self[e431] * other[e4235]) + (self[e412] * other[scalar]) + (self[e415] * other[e42]) + (self[e435] * other[e1234]) + (self[e12345] * other[e43]),
                -(self[e435] * other[e12]) - (self[e321] * other[e45]) - (self[e235] * other[e41]) - (self[e315] * other[e42]) - (self[e125] * other[e43]),
            ]) + (Simd32x4::from([other[scalar], other[e4125], other[e31], other[scalar]]) * self.group0().xxx().with_w(self[e12345]))
                - (Simd32x4::from(self[e423]) * other.group1().wz().with_zw(other[e4315], other[e15]))
                - (Simd32x4::from(self[e431]) * Simd32x4::from([other[e4125], other[e45], other[e23], other[e25]]))
                - (Simd32x4::from(self[e412]) * Simd32x4::from([other[e31], other[e4235], other[e45], other[e35]]))
                - (self.group1().zxyx() * other.group0().yzx().with_w(other[e23]))
                - (self.group1().wwwy() * other.group0().xyz().with_w(other[e31])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e235] * other[e1234]) + (self[e315] * other[e43]) + (self[e12345] * other[e23]),
                (self[e315] * other[e1234]) + (self[e125] * other[e41]) + (self[e12345] * other[e31]),
                (self[e235] * other[e42]) + (self[e125] * other[e1234]) + (self[e12345] * other[e12]),
                -(self[e425] * other[e4315]) - (self[e435] * other[e4125]) - (self[e321] * other[scalar]),
            ]) + (other.group0().ww().with_zw(other[e31], other[e43]) * self.group1().xyx().with_w(self[e125]))
                + (other.group1().zx().with_zw(other[scalar], other[e45]) * self.group1().yzz().with_w(self[e12345]))
                + (other.group2().zx().with_zw(other[e3215], other[e42]) * self.group0().yzz().with_w(self[e315]))
                + (other.group3().ww().with_zw(other[e25], other[e41]) * self.group0().xyx().with_w(self[e235]))
                - (other.group2().yzxx() * self.group0().zxy().with_w(self[e423]))
                - (self.group1().zxy() * other.group1().yzx()).with_w(self[e431] * other[e25])
                - (self.group1().www() * other.group3().xyz()).with_w(self[e412] * other[e35])
                - (self.group2().zxy() * other.group0().yzx()).with_w(self[e415] * other[e4235]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e235] * other[e45]) + (self[e315] * other[e12]) + (self[e315] * other[e4125]) + (self[e12345] * other[e15]),
                (self[e315] * other[e45]) + (self[e125] * other[e23]) + (self[e125] * other[e4235]) + (self[e12345] * other[e25]),
                (self[e235] * other[e4315]) + (self[e125] * other[scalar]) + (self[e125] * other[e45]) + (self[e12345] * other[e35]),
                -(self[e415] * other[e41]) - (self[e425] * other[e42]) - (self[e435] * other[e43]) - (self[e321] * other[e1234]),
            ]) + (self.group2().xyxw() * other.group0().ww().with_zw(other[e31], other[e1234]))
                + (other.group2().zx().with_zw(other[e3215], other[e4315]) * self.group1().yzz().with_w(self[e431]))
                + (other.group3().ww().with_zw(other[e25], other[e4235]) * self.group1().xyx().with_w(self[e423]))
                + (self.group1().www() * other.group2().xyz()).with_w(self[e412] * other[e4125])
                - (other.group1().yzxy() * self.group2().zxy().with_w(self[e431]))
                - (self.group1().zxy() * other.group2().yzx()).with_w(self[e423] * other[e23])
                - (self.group2().zxy() * other.group3().yzx()).with_w(self[e412] * other[e12]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e415] * other[e45]) + (self[e425] * other[e4125]) + (self[e125] * other[e42]) + (self[e12345] * other[e4235]),
                (self[e425] * other[e45]) + (self[e435] * other[e4235]) + (self[e235] * other[e43]) + (self[e12345] * other[e4315]),
                (self[e415] * other[e4315]) + (self[e435] * other[e45]) + (self[e315] * other[e41]) + (self[e12345] * other[e4125]),
                -(self[e315] * other[e31]) - (self[e315] * other[e4315]) - (self[e125] * other[e12]) - (self[e125] * other[e4125]),
            ]) + (other.group2().zx().with_zw(other[e3215], other[e3215]) * self.group0().yzz().with_w(self[e12345]))
                + (other.group3().ww().with_zw(other[e25], other[e3215]) * self.group0().xyx().with_w(self[e321]))
                - (self.group1().zxyy() * other.group3().yzx().with_w(other[e25]))
                - (self.group1().wwwz() * other.group1().xyz().with_w(other[e35]))
                - (self.group2().xyxx() * other.group2().ww().with_zw(other[e42], other[e23]))
                - (self.group2().yzzx() * other.group0().zx().with_zw(other[e1234], other[e4235]))
                - (other.group2().yzxx() * self.group0().zxy().with_w(self[e415])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl std::ops::Div<anti_sandwich> for Dipole {
    type Output = anti_sandwich_partial<Dipole>;
    fn div(self, _rhs: anti_sandwich) -> Self::Output {
        anti_sandwich_partial(self)
    }
}
impl AntiSandwich<AntiCircleRotor> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       66      124        0
    //    simd3        0       22        0
    //    simd4       43       24        0
    // Totals...
    // yes simd      109      170        0
    //  no simd      238      286        0
    fn anti_sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                -(other[e43] * self[e31]) - (other[e12] * self[e42]) - (other[scalar] * self[e41]),
                -(other[e42] * self[e45]) - (other[e23] * self[e43]) - (other[scalar] * self[e42]),
                -(other[e43] * self[e45]) - (other[e31] * self[e41]) - (other[scalar] * self[e43]),
                (other[e23] * self[e23]) + (other[e31] * self[e31]) + (other[e12] * self[e12]) + (other[e15] * self[e41]) + (other[e25] * self[e42]) + (other[e35] * self[e43]),
            ]) + (other.group0().yzx() * self.group1().zxy()).with_w(other[e41] * self[e15])
                + (self.group0().xxy() * other.group1().wzx()).with_w(other[e42] * self[e25])
                + (self.group0().zyz() * other.group1().yww()).with_w(other[e43] * self[e35])
                - (self.group1().wzxw() * other.group0().xxy().with_w(other[e45])),
            // e415, e425, e435, e321
            Simd32x4::from([
                other[scalar] * self[e23] * -1.0,
                other[scalar] * self[e31] * -1.0,
                other[scalar] * self[e12] * -1.0,
                other[scalar] * self[e45],
            ]) + (other.group0().yzx() * self.group2().zxy()).with_w(other[e41] * self[e15])
                + (self.group0().zxy() * other.group2().yzx()).with_w(other[e42] * self[e25])
                + (other.group1().yzx() * self.group1().zxy()).with_w(other[e43] * self[e35])
                - (other.group2().zxyy() * self.group0().yzx().with_w(self[e42]))
                - (other.group0().zxy() * self.group2().yzx()).with_w(other[e15] * self[e41])
                - (other.group1().zxy() * self.group1().yzx()).with_w(other[e35] * self[e43]),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(other[e12] * self[e25]) - (other[e45] * self[e15]) - (other[e35] * self[e31]) - (other[scalar] * self[e15]),
                -(other[e23] * self[e35]) - (other[e45] * self[e25]) - (other[e15] * self[e12]) - (other[scalar] * self[e25]),
                -(other[e31] * self[e15]) - (other[e45] * self[e35]) - (other[e25] * self[e23]) - (other[scalar] * self[e35]),
                (other[e15] * self[e23]) + (other[e25] * self[e31]) + (other[e35] * self[e12]),
            ]) + (other.group1().yzxx() * self.group2().zxy().with_w(self[e15]))
                + (other.group2().xyx() * self.group1().wwy()).with_w(other[e31] * self[e25])
                + (other.group2().yzz() * self.group1().zxw()).with_w(other[e12] * self[e35]),
            // e1, e2, e3, e4
            Simd32x4::from([
                -(other[e43] * self[e25]) - (other[e25] * self[e43]),
                -(other[e41] * self[e35]) - (other[e35] * self[e41]),
                -(other[e42] * self[e15]) - (other[e15] * self[e42]),
                (other[e31] * self[e42]) + (other[e12] * self[e43]),
            ]) + (self.group1().wwwz() * other.group1().xyz().with_w(other[e43]))
                + (other.group0().yzx() * self.group2().zxy()).with_w(other[e41] * self[e23])
                + (self.group0().yzx() * other.group2().zxy()).with_w(other[e42] * self[e31])
                + (other.group1().www() * self.group1().xyz()).with_w(other[e23] * self[e41]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDipoleInversion> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       66      124        0
    //    simd3        0       22        0
    //    simd4       53       34        0
    // Totals...
    // yes simd      119      180        0
    //  no simd      278      326        0
    fn anti_sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e423] * self[e45]) + (other[e412] * self[e31]) + (other[e435] * self[e42]) + (other[e321] * self[e41]) + (other[e4] * self[e23]) + (other[e3] * self[e42]),
                (other[e423] * self[e12]) + (other[e431] * self[e45]) + (other[e415] * self[e43]) + (other[e321] * self[e42]) + (other[e4] * self[e31]) + (other[e1] * self[e43]),
                (other[e431] * self[e23]) + (other[e412] * self[e45]) + (other[e425] * self[e41]) + (other[e321] * self[e43]) + (other[e4] * self[e12]) + (other[e2] * self[e41]),
                -(other[e415] * self[e23])
                    - (other[e425] * self[e31])
                    - (other[e435] * self[e12])
                    - (other[e321] * self[e45])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]) - (other.group0().yzx() * self.group1().zxy()).with_w(other[e423] * self[e15])
                - (self.group0().zxy() * other.group1().yzx()).with_w(other[e431] * self[e25])
                - (self.group0().zxy() * other.group3().yzx()).with_w(other[e412] * self[e35]),
            // e23, e31, e12, e45
            Simd32x4::from([other[e1] * self[e45] * -1.0, other[e2] * self[e45] * -1.0, other[e3] * self[e45] * -1.0, other[e3] * self[e12]])
                + (self.group1().yzxy() * other.group1().zxy().with_w(other[e2]))
                + (other.group2().zx().with_zw(other[e5], self[e35]) * self.group0().yzz().with_w(other[e412]))
                + (other.group3().ww().with_zw(other[e315], self[e25]) * self.group0().xyx().with_w(other[e431]))
                + (self.group2() * other.group2().www()).with_w(other[e1] * self[e23])
                + (other.group0().zxy() * self.group2().yzx()).with_w(other[e423] * self[e15])
                - (other.group2().yzxy() * self.group0().zxy().with_w(self[e42]))
                - (other.group0().yzx() * self.group2().zxy()).with_w(other[e235] * self[e41])
                - (other.group1().yzx() * self.group1().zxy()).with_w(other[e125] * self[e43]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e125] * self[e31]) + (other[e2] * self[e35]) + (other[e5] * self[e23]),
                (other[e415] * self[e35]) + (other[e235] * self[e12]) + (other[e5] * self[e31]),
                (other[e315] * self[e23]) + (other[e1] * self[e25]) + (other[e5] * self[e12]),
                -(other[e425] * self[e42]) - (other[e435] * self[e43]) - (other[e2] * self[e42]) - (other[e3] * self[e43]),
            ]) + (Simd32x4::from([other[e435], other[e3], other[e425], self[e45]]) * self.group2().yxx().with_w(other[e4]))
                - (Simd32x4::from([other[e425], other[e1], other[e321], self[e12]]) * self.group2().zzz().with_w(other[e412]))
                - (Simd32x4::from([other[e3], other[e321], other[e415], self[e31]]) * self.group2().yyy().with_w(other[e431]))
                - (other.group1().wz().with_zw(other[e2], self[e23]) * self.group2().xxx().with_w(other[e423]))
                - (other.group2().xyx() * self.group1().wwy()).with_w(other[e415] * self[e41])
                - (other.group2().yzz() * self.group1().zxw()).with_w(other[e1] * self[e41]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e415] * self[e45]) + (other[e2] * self[e12]),
                (other[e425] * self[e45]) + (other[e3] * self[e23]),
                (other[e435] * self[e45]) + (other[e1] * self[e31]),
                -(other[e125] * self[e12]) - (other[e5] * self[e45]),
            ]) + (other.group2().zx().with_zw(other[e5], other[e3]) * self.group0().yzz().with_w(self[e35]))
                + (other.group3().ww().with_zw(other[e315], other[e2]) * self.group0().xyx().with_w(self[e25]))
                + (other.group0().yzx() * self.group2().zxy()).with_w(other[e1] * self[e15])
                - (self.group1().xyzx() * other.group1().www().with_w(other[e235]))
                - (self.group1().yzxy() * other.group3().zxy().with_w(other[e315]))
                - (self.group2() * other.group2().www()).with_w(other[e435] * self[e35])
                - (other.group0().zxy() * self.group2().yzx()).with_w(other[e415] * self[e15])
                - (self.group0().zxy() * other.group2().yzx()).with_w(other[e425] * self[e25]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       34       68        0
    //    simd3        2       22        0
    //    simd4       25       13        0
    // Totals...
    // yes simd       61      103        0
    //  no simd      140      186        0
    fn anti_sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[scalar]) * self.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            (-(Simd32x3::from(other[e3215]) * self.group0()) - (Simd32x3::from(other[scalar]) * self.group1().xyz())).with_w(other[scalar] * self[e45]),
            // e235, e315, e125, e4
            (-(Simd32x3::from(other[e3215]) * self.group1().xyz()) - (Simd32x3::from(other[scalar]) * self.group2())).with_w(0.0),
            // e1, e2, e3, e5
            Simd32x4::from(other[e3215]) * self.group0().with_w(self[e45]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlatPoint> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       73        0
    //    simd3        0       14        0
    //    simd4       34       25        0
    // Totals...
    // yes simd       70      112        0
    //  no simd      172      215        0
    fn anti_sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([other[e321], other[e321], other[e321], 1.0])
                * self
                    .group0()
                    .with_w(-(other[e235] * self[e41]) - (other[e315] * self[e42]) - (other[e125] * self[e43]) - (other[e321] * self[e45])),
            // e23, e31, e12, e45
            Simd32x4::from([
                other[e125] * self[e42],
                other[e235] * self[e43],
                other[e315] * self[e41],
                -(other[e315] * self[e42]) - (other[e125] * self[e43]),
            ]) - (other.group0().yzxx() * self.group0().zxy().with_w(self[e41])),
            // e15, e25, e35, e1234
            (other.group0().zxy() * self.group1().yzx()).with_w(0.0)
                - (Simd32x3::from(other[e321]) * self.group2()).with_w(0.0)
                - (other.group0().xyx() * self.group1().wwy()).with_w(0.0)
                - (other.group0().yzz() * self.group1().zxw()).with_w(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([other[e125] * self[e42], other[e235] * self[e43], other[e315] * self[e41], other[e125] * self[e12] * -1.0])
                - (other.group0().wwwy() * self.group1().xyzy())
                - (self.group0().zxy() * other.group0().yzx()).with_w(other[e235] * self[e23]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlector> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       47       88        0
    //    simd3        0       14        0
    //    simd4       42       31        0
    // Totals...
    // yes simd       89      133        0
    //  no simd      215      254        0
    fn anti_sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e321] * self[e41]) + (other[e3] * self[e42]),
                (other[e321] * self[e42]) + (other[e1] * self[e43]),
                (other[e321] * self[e43]) + (other[e2] * self[e41]),
                -(other[e315] * self[e42]) - (other[e125] * self[e43]) - (other[e321] * self[e45]),
            ]) - (self.group0().zxy() * other.group1().yzx()).with_w(other[e235] * self[e41]),
            // e23, e31, e12, e45
            (other.group0().zx().with_zw(other[e5], self[e31]) * self.group0().yzz().with_w(other[e2]))
                + (other.group1().ww().with_zw(other[e315], self[e23]) * self.group0().xyx().with_w(other[e1]))
                + Simd32x3::from(0.0).with_w((other[e3] * self[e12]) - (other[e125] * self[e43]))
                - (other.group0().yzxx() * self.group0().zxy().with_w(self[e41]))
                - (self.group1().www() * other.group1().xyz()).with_w(other[e315] * self[e42]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e125] * self[e31]) + (other[e2] * self[e35]) + (other[e5] * self[e23]) - (other[e315] * self[e12]),
                (other[e235] * self[e12]) + (other[e3] * self[e15]) + (other[e5] * self[e31]) - (other[e125] * self[e23]),
                (other[e315] * self[e23]) + (other[e1] * self[e25]) + (other[e5] * self[e12]) - (other[e125] * self[e45]),
                0.0,
            ]) - (other.group0().ww().with_zw(other[e2], other[e1]) * self.group2().xyx().with_w(self[e41]))
                - (other.group1().zx().with_zw(other[e321], other[e2]) * self.group2().yzz().with_w(self[e42]))
                - (other.group0().xyx() * self.group1().wwy()).with_w(other[e3] * self[e43]),
            // e4235, e4315, e4125, e3215
            (other.group0().zx().with_zw(other[e5], other[e2]) * self.group0().yzz().with_w(self[e25]))
                + (other.group1().ww().with_zw(other[e315], other[e1]) * self.group0().xyx().with_w(self[e15]))
                + Simd32x3::from(0.0).with_w(other[e5] * self[e45] * -1.0)
                + (other.group1().yzx() * self.group1().zxy()).with_w(other[e3] * self[e35])
                - (other.group0().wwwy() * self.group1().xyzy())
                - (self.group1().yzxz() * other.group1().zxy().with_w(other[e125]))
                - (self.group0().zxy() * other.group0().yzx()).with_w(other[e235] * self[e23]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiLine> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       52      109        0
    //    simd3        0       17        0
    //    simd4       34       20        0
    // Totals...
    // yes simd       86      146        0
    //  no simd      188      240        0
    fn anti_sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                other[e12] * self[e42] * -1.0,
                other[e23] * self[e43] * -1.0,
                other[e31] * self[e41] * -1.0,
                (other[e31] * self[e31]) + (other[e12] * self[e12]) + (other[e15] * self[e41]) + (other[e25] * self[e42]) + (other[e35] * self[e43]),
            ]) + (other.group0().yzx() * self.group0().zxy()).with_w(other[e23] * self[e23]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e31] * self[e12]) + (other[e25] * self[e43]),
                (other[e12] * self[e23]) + (other[e35] * self[e41]),
                (other[e23] * self[e31]) + (other[e15] * self[e42]),
                other[e35] * self[e43] * -1.0,
            ]) - (other.group0().zxy() * self.group1().yzx()).with_w(other[e15] * self[e41])
                - (other.group1().zxy() * self.group0().yzx()).with_w(other[e25] * self[e42]),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(other[e12] * self[e25]) - (other[e35] * self[e31]),
                -(other[e23] * self[e35]) - (other[e15] * self[e12]),
                -(other[e31] * self[e15]) - (other[e25] * self[e23]),
                (other[e15] * self[e23]) + (other[e25] * self[e31]) + (other[e35] * self[e12]),
            ]) + (other.group0().yzx() * self.group2().zxy()).with_w(other[e23] * self[e15])
                + (other.group1().xyx() * self.group1().wwy()).with_w(other[e31] * self[e25])
                + (other.group1().yzz() * self.group1().zxw()).with_w(other[e12] * self[e35]),
            // e1, e2, e3, e4
            Simd32x4::from([other[e25] * self[e43] * -1.0, other[e35] * self[e41] * -1.0, other[e15] * self[e42] * -1.0, other[e12] * self[e43]])
                + (other.group0() * self.group1().www()).with_w(other[e23] * self[e41])
                + (other.group1().zxy() * self.group0().yzx()).with_w(other[e31] * self[e42]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiMotor> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       62      113        0
    //    simd3        0       17        0
    //    simd4       37       23        0
    // Totals...
    // yes simd       99      153        0
    //  no simd      210      256        0
    fn anti_sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                -(other[e12] * self[e42]) - (other[scalar] * self[e41]),
                -(other[e23] * self[e43]) - (other[scalar] * self[e42]),
                -(other[e31] * self[e41]) - (other[scalar] * self[e43]),
                (other[e23] * self[e23]) + (other[e31] * self[e31]) + (other[e12] * self[e12]) + (other[e25] * self[e42]) + (other[e35] * self[e43]),
            ]) + (self.group0().zxy() * other.group0().yzx()).with_w(other[e15] * self[e41]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e31] * self[e12]) - (other[scalar] * self[e23]),
                (other[e12] * self[e23]) - (other[scalar] * self[e31]),
                (other[e23] * self[e31]) - (other[scalar] * self[e12]),
                0.0,
            ]) + (self.group0().zxy() * other.group1().yzx()).with_w(other[scalar] * self[e45])
                - (other.group1().zxwy() * self.group0().yzz().with_w(self[e42]))
                - (other.group1().wwyx() * self.group0().xyx().with_w(self[e41]))
                - (other.group0().zxy() * self.group1().yzx()).with_w(other[e35] * self[e43]),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(other[e12] * self[e25]) - (other[scalar] * self[e15]) - (other[e35] * self[e31]) - (other[e3215] * self[e23]),
                -(other[e23] * self[e35]) - (other[scalar] * self[e25]) - (other[e15] * self[e12]) - (other[e3215] * self[e31]),
                -(other[e31] * self[e15]) - (other[scalar] * self[e35]) - (other[e25] * self[e23]) - (other[e3215] * self[e12]),
                (other[e15] * self[e23]) + (other[e25] * self[e31]) + (other[e35] * self[e12]) + (other[e3215] * self[e45]),
            ]) + (other.group0().yzxx() * self.group2().zxy().with_w(self[e15]))
                + (other.group1().xyx() * self.group1().wwy()).with_w(other[e31] * self[e25])
                + (other.group1().yzz() * self.group1().zxw()).with_w(other[e12] * self[e35]),
            // e1, e2, e3, e4
            Simd32x4::from([other[e25] * self[e43] * -1.0, other[e35] * self[e41] * -1.0, other[e15] * self[e42] * -1.0, 0.0])
                + (self.group0().xyx() * other.group1().wwy()).with_w(other[e23] * self[e41])
                + (self.group0().yzz() * other.group1().zxw()).with_w(other[e31] * self[e42])
                + (self.group1().www() * other.group0().xyz()).with_w(other[e12] * self[e43]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiPlane> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       31       68        0
    //    simd3        1       14        0
    //    simd4       32       24        0
    // Totals...
    // yes simd       64      106        0
    //  no simd      162      206        0
    fn anti_sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (self.group0().yzx() * other.group0().zxy()) - (self.group0().zxy() * other.group0().yzx()),
            // e23, e31, e12, e45
            Simd32x4::from([
                other[e1] * self[e45] * -1.0,
                other[e2] * self[e45] * -1.0,
                other[e3] * self[e45] * -1.0,
                (other[e2] * self[e31]) + (other[e3] * self[e12]),
            ]) + (self.group0() * other.group0().www()).with_w(other[e1] * self[e23]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e2] * self[e35]) + (other[e5] * self[e23]),
                (other[e3] * self[e15]) + (other[e5] * self[e31]),
                (other[e1] * self[e25]) + (other[e5] * self[e12]),
                -(other[e2] * self[e42]) - (other[e3] * self[e43]),
            ]) - (other.group0().zxyx() * self.group2().yzx().with_w(self[e41])),
            // e4235, e4315, e4125, e3215
            (other.group0().wwwx() * self.group0().with_w(self[e15]))
                + Simd32x3::from(0.0).with_w(other[e3] * self[e35])
                + (other.group0().yzx() * self.group1().zxy()).with_w(other[e2] * self[e25])
                - (other.group0().zxyw() * self.group1().yzxw()),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiScalar> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       45        0
    //    simd3        0       17        0
    //    simd4       16        6        0
    // Totals...
    // yes simd       36       68        0
    //  no simd       84      120        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from(other[e12345]) * self.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other[e12345]) * self.group1(),
            // e15, e25, e35
            Simd32x3::from(other[e12345]) * self.group2(),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       60      109        0
    //    simd3        0       20        0
    //    simd4       42       26        0
    // Totals...
    // yes simd      102      155        0
    //  no simd      228      273        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e423] * self[e45]) + (other[e412] * self[e31]) + (other[e435] * self[e42]) + (other[e321] * self[e41]),
                (other[e423] * self[e12]) + (other[e431] * self[e45]) + (other[e415] * self[e43]) + (other[e321] * self[e42]),
                (other[e431] * self[e23]) + (other[e412] * self[e45]) + (other[e425] * self[e41]) + (other[e321] * self[e43]),
                -(other[e412] * self[e35])
                    - (other[e415] * self[e23])
                    - (other[e425] * self[e31])
                    - (other[e435] * self[e12])
                    - (other[e321] * self[e45])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]) - (other.group0().yzx() * self.group1().zxy()).with_w(other[e423] * self[e15])
                - (self.group0().zxy() * other.group1().yzx()).with_w(other[e431] * self[e25]),
            // e23, e31, e12, e45
            (other.group0().zxy() * self.group2().yzx()).with_w(other[e423] * self[e15])
                + (other.group2().zxy() * self.group0().yzx()).with_w(other[e431] * self[e25])
                + (other.group1().zxy() * self.group1().yzx()).with_w(other[e412] * self[e35])
                - (other.group0().yzx() * self.group2().zxy()).with_w(other[e235] * self[e41])
                - (other.group2().yzx() * self.group0().zxy()).with_w(other[e315] * self[e42])
                - (other.group1().yzx() * self.group1().zxy()).with_w(other[e125] * self[e43]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e435] * self[e25]) + (other[e125] * self[e31]),
                (other[e415] * self[e35]) + (other[e235] * self[e12]),
                (other[e425] * self[e15]) + (other[e315] * self[e23]),
                -(other[e425] * self[e42]) - (other[e435] * self[e43]),
            ]) - (other.group1().ywwx() * self.group2().zyz().with_w(self[e41]))
                - (self.group1().zxwy() * other.group2().yzz().with_w(other[e431]))
                - (self.group1().wwyx() * other.group2().xyx().with_w(other[e423]))
                - (self.group2().xxy() * other.group1().wzx()).with_w(other[e412] * self[e12]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e431] * self[e35]) + (other[e415] * self[e45]) + (other[e125] * self[e42]),
                (other[e412] * self[e15]) + (other[e425] * self[e45]) + (other[e235] * self[e43]),
                (other[e423] * self[e25]) + (other[e435] * self[e45]) + (other[e315] * self[e41]),
                -(other[e415] * self[e15]) - (other[e425] * self[e25]) - (other[e435] * self[e35]),
            ]) - (self.group1().xyzz() * other.group1().www().with_w(other[e125]))
                - (other.group0().zxy() * self.group2().yzx()).with_w(other[e235] * self[e23])
                - (other.group2().yzx() * self.group0().zxy()).with_w(other[e315] * self[e31]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       66      117        0
    //    simd3        0       22        0
    //    simd4       43       25        0
    // Totals...
    // yes simd      109      164        0
    //  no simd      238      283        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e423] * self[e45]) + (other[e412] * self[e31]) + (other[e435] * self[e42]) + (other[e321] * self[e41]) + (other[e12345] * self[e41]),
                (other[e423] * self[e12]) + (other[e431] * self[e45]) + (other[e415] * self[e43]) + (other[e321] * self[e42]) + (other[e12345] * self[e42]),
                (other[e431] * self[e23]) + (other[e412] * self[e45]) + (other[e425] * self[e41]) + (other[e321] * self[e43]) + (other[e12345] * self[e43]),
                -(other[e412] * self[e35])
                    - (other[e415] * self[e23])
                    - (other[e425] * self[e31])
                    - (other[e435] * self[e12])
                    - (other[e321] * self[e45])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]) - (other.group0().yzx() * self.group1().zxy()).with_w(other[e423] * self[e15])
                - (self.group0().zxy() * other.group1().yzx()).with_w(other[e431] * self[e25]),
            // e23, e31, e12, e45
            (Simd32x4::from(other[e12345]) * self.group1())
                + (other.group0().zxy() * self.group2().yzx()).with_w(other[e423] * self[e15])
                + (self.group0().yzx() * other.group2().zxy()).with_w(other[e431] * self[e25])
                + (other.group1().zxy() * self.group1().yzx()).with_w(other[e412] * self[e35])
                - (other.group2().yzxy() * self.group0().zxy().with_w(self[e42]))
                - (other.group0().yzx() * self.group2().zxy()).with_w(other[e235] * self[e41])
                - (other.group1().yzx() * self.group1().zxy()).with_w(other[e125] * self[e43]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e435] * self[e25]) + (other[e125] * self[e31]) + (other[e12345] * self[e15]),
                (other[e415] * self[e35]) + (other[e235] * self[e12]) + (other[e12345] * self[e25]),
                (other[e425] * self[e15]) + (other[e315] * self[e23]) + (other[e12345] * self[e35]),
                -(other[e425] * self[e42]) - (other[e435] * self[e43]),
            ]) - (self.group1().wwyz() * other.group2().xyx().with_w(other[e412]))
                - (self.group2().xxy() * other.group1().wzx()).with_w(other[e423] * self[e23])
                - (self.group2().zyz() * other.group1().yww()).with_w(other[e431] * self[e31])
                - (other.group2().yzz() * self.group1().zxw()).with_w(other[e415] * self[e41]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e431] * self[e35]) + (other[e415] * self[e45]) + (other[e125] * self[e42]),
                (other[e412] * self[e15]) + (other[e425] * self[e45]) + (other[e235] * self[e43]),
                (other[e423] * self[e25]) + (other[e435] * self[e45]) + (other[e315] * self[e41]),
                -(other[e235] * self[e23]) - (other[e315] * self[e31]) - (other[e125] * self[e12]),
            ]) - (other.group0().zxy() * self.group2().yzx()).with_w(other[e415] * self[e15])
                - (self.group0().zxy() * other.group2().yzx()).with_w(other[e425] * self[e25])
                - (other.group1().www() * self.group1().xyz()).with_w(other[e435] * self[e35]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       60      111        0
    //    simd3        0       22        0
    //    simd4       42       24        0
    // Totals...
    // yes simd      102      157        0
    //  no simd      228      273        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                -(other[e43] * self[e31]) - (other[e12] * self[e42]),
                -(other[e42] * self[e45]) - (other[e23] * self[e43]),
                -(other[e43] * self[e45]) - (other[e31] * self[e41]),
                (other[e23] * self[e23]) + (other[e31] * self[e31]) + (other[e12] * self[e12]) + (other[e15] * self[e41]) + (other[e25] * self[e42]) + (other[e35] * self[e43]),
            ]) + (other.group0().yzx() * self.group1().zxy()).with_w(other[e41] * self[e15])
                + (self.group0().xxy() * other.group1().wzx()).with_w(other[e42] * self[e25])
                + (self.group0().zyz() * other.group1().yww()).with_w(other[e43] * self[e35])
                - (self.group1().wzxw() * other.group0().xxy().with_w(other[e45])),
            // e415, e425, e435, e321
            (other.group0().yzx() * self.group2().zxy()).with_w(other[e41] * self[e15])
                + (other.group2().yzx() * self.group0().zxy()).with_w(other[e42] * self[e25])
                + (other.group1().yzx() * self.group1().zxy()).with_w(other[e43] * self[e35])
                - (other.group0().zxy() * self.group2().yzx()).with_w(other[e15] * self[e41])
                - (other.group2().zxy() * self.group0().yzx()).with_w(other[e25] * self[e42])
                - (other.group1().zxy() * self.group1().yzx()).with_w(other[e35] * self[e43]),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(other[e12] * self[e25]) - (other[e45] * self[e15]) - (other[e35] * self[e31]),
                -(other[e23] * self[e35]) - (other[e45] * self[e25]) - (other[e15] * self[e12]),
                -(other[e31] * self[e15]) - (other[e45] * self[e35]) - (other[e25] * self[e23]),
                (other[e23] * self[e15]) + (other[e31] * self[e25]) + (other[e12] * self[e35]),
            ]) + (self.group1().zxwy() * other.group2().yzz().with_w(other[e25]))
                + (self.group1().wwyx() * other.group2().xyx().with_w(other[e15]))
                + (self.group2().zxy() * other.group1().yzx()).with_w(other[e35] * self[e12]),
            // e1, e2, e3, e4
            Simd32x4::from([
                -(other[e43] * self[e25]) - (other[e25] * self[e43]),
                -(other[e41] * self[e35]) - (other[e35] * self[e41]),
                -(other[e42] * self[e15]) - (other[e15] * self[e42]),
                (other[e31] * self[e42]) + (other[e12] * self[e43]),
            ]) + (self.group1().wwwz() * other.group1().xyz().with_w(other[e43]))
                + (other.group0().yzx() * self.group2().zxy()).with_w(other[e41] * self[e23])
                + (other.group2().zxy() * self.group0().yzx()).with_w(other[e42] * self[e31])
                + (other.group1().www() * self.group1().xyz()).with_w(other[e23] * self[e41]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       70      113        0
    //    simd3        0       18        0
    //    simd4       52       39        0
    // Totals...
    // yes simd      122      170        0
    //  no simd      278      323        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                -(self[e43] * other[e4315]) - (self[e23] * other[e1234]) - (self[e31] * other[e43]) - (self[e45] * other[e41]),
                -(self[e43] * other[e23]) - (self[e31] * other[e1234]) - (self[e12] * other[e41]) - (self[e45] * other[e42]),
                -(self[e42] * other[e4235]) - (self[e23] * other[e42]) - (self[e12] * other[e1234]) - (self[e45] * other[e43]),
                (self[e23] * other[e23]) + (self[e31] * other[e31]) + (self[e12] * other[e12]) + (self[e25] * other[e42]) + (self[e35] * other[e43]),
            ]) + (Simd32x4::from(self[e41]) * other.group1().wz().with_zw(other[e4315], other[e15]))
                + (Simd32x4::from(self[e42]) * Simd32x4::from([other[e4125], other[e45], other[e23], other[e25]]))
                + (Simd32x4::from(self[e43]) * Simd32x4::from([other[e31], other[e4235], other[e45], other[e35]]))
                + (other.group0().yzx() * self.group1().zxy()).with_w(self[e15] * other[e41])
                - (Simd32x4::from([other[e12], other[e4125], other[e31], other[e45]]) * self.group0().yxx().with_w(self[e45])),
            // e415, e425, e435, e321
            (self.group0().zxy() * other.group2().yzx()).with_w(self[e15] * other[e41])
                + (self.group2().zxy() * other.group0().yzx()).with_w(self[e25] * other[e42])
                + (self.group1().zxy() * other.group1().yzx()).with_w(self[e35] * other[e43])
                - (self.group1().yzxy() * other.group1().zxy().with_w(other[e4315]))
                - (self.group1().wwwz() * other.group3().xyzz())
                - (other.group0().zx().with_zw(other[e1234], other[e4235]) * self.group2().yzz().with_w(self[e23]))
                - (other.group2().zx().with_zw(other[e3215], other[e25]) * self.group0().yzz().with_w(self[e42]))
                - (other.group2().ww().with_zw(other[e42], other[e35]) * self.group2().xyx().with_w(self[e43]))
                - (other.group3().ww().with_zw(other[e25], other[e15]) * self.group0().xyx().with_w(self[e41])),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e23] * other[e3215]) - (self[e31] * other[e35]) - (self[e15] * other[e45]) - (self[e25] * other[e12]) - (self[e25] * other[e4125]),
                -(self[e31] * other[e3215]) - (self[e12] * other[e15]) - (self[e25] * other[e45]) - (self[e35] * other[e23]) - (self[e35] * other[e4235]),
                -(self[e23] * other[e25]) - (self[e12] * other[e3215]) - (self[e15] * other[e31]) - (self[e15] * other[e4315]) - (self[e35] * other[e45]),
                (self[e23] * other[e15]) + (self[e31] * other[e25]) + (self[e12] * other[e35]) + (self[e45] * other[e3215]) + (self[e35] * other[e12]) + (self[e35] * other[e4125]),
            ]) + (other.group1().yzxx() * self.group2().zxy().with_w(self[e15]))
                + (other.group3().yzxx() * self.group2().zxy().with_w(self[e15]))
                + (self.group1().zxy() * other.group2().yzx()).with_w(self[e25] * other[e31])
                + (self.group1().www() * other.group2().xyz()).with_w(self[e25] * other[e4315]),
            // e1, e2, e3, e4
            (other.group1().ww().with_zw(other[e4315], self[e23]) * self.group1().xyx().with_w(other[e41]))
                + (other.group2().zx().with_zw(other[e3215], other[e31]) * self.group0().yzz().with_w(self[e42]))
                + (other.group3().zx().with_zw(other[e45], self[e31]) * self.group1().yzz().with_w(other[e42]))
                + (other.group3().ww().with_zw(other[e25], other[e23]) * self.group0().xyx().with_w(self[e41]))
                + (self.group2().zxy() * other.group0().yzx()).with_w(self[e43] * other[e12])
                + (self.group1().www() * other.group1().xyz()).with_w(self[e12] * other[e43])
                - (self.group1().zxyw() * other.group3().yzx().with_w(other[e1234]))
                - (other.group0().zx().with_zw(other[e1234], other[e4125]) * self.group2().yzz().with_w(self[e43]))
                - (other.group2().ww().with_zw(other[e42], other[e4315]) * self.group2().xyx().with_w(self[e42]))
                - (self.group0().zxy() * other.group2().yzx()).with_w(self[e41] * other[e4235]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       26       50        0
    //    simd3        2       15        0
    //    simd4       27       23        0
    // Totals...
    // yes simd       55       88        0
    //  no simd      140      187        0
    fn anti_sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(other[e12345]) * self.group0(),
            // e23, e31, e12, e45
            ((Simd32x3::from(other[e5]) * self.group0()) + (Simd32x3::from(other[e12345]) * self.group1().xyz())).with_w(self[e45] * other[e12345]),
            // e15, e25, e35, e1234
            ((Simd32x3::from(other[e5]) * self.group1().xyz()) + (Simd32x3::from(other[e12345]) * self.group2())).with_w(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e5]) * self.group0().with_w(self[e45]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       47       82        0
    //    simd3        0       12        0
    //    simd4       31       24        0
    // Totals...
    // yes simd       78      118        0
    //  no simd      171      214        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([other[e45], other[e45], other[e45], 1.0])
                * self
                    .group0()
                    .with_w((self[e41] * other[e15]) + (self[e42] * other[e25]) + (self[e43] * other[e35]) - (self[e45] * other[e45])),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e43] * other[e25],
                self[e41] * other[e35],
                self[e42] * other[e15],
                -(self[e42] * other[e25]) - (self[e43] * other[e35]),
            ]) - (other.group0().zxyx() * self.group0().yzx().with_w(self[e41])),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e31] * other[e35]) - (self[e15] * other[e45]),
                -(self[e12] * other[e15]) - (self[e25] * other[e45]),
                -(self[e23] * other[e25]) - (self[e35] * other[e45]),
                self[e12] * other[e35],
            ]) + (self.group1().zxyx() * other.group0().yzxx())
                + (self.group1().wwwy() * other.group0().xyzy()),
            // e1, e2, e3, e4
            (Simd32x3::from(other[e45]) * self.group1().xyz()).with_w(0.0) + (self.group0().yzx() * other.group0().zxy()).with_w(0.0)
                - (self.group0().zxy() * other.group0().yzx()).with_w(0.0),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       63      108        0
    //    simd3        0       14        0
    //    simd4       37       26        0
    // Totals...
    // yes simd      100      148        0
    //  no simd      211      254        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (other.group0().ww().with_zw(other[e4315], other[e15]) * self.group0().xyx().with_w(self[e41]))
                + (other.group1().zx().with_zw(other[e45], other[e25]) * self.group0().yzz().with_w(self[e42]))
                + Simd32x3::from(0.0).with_w(self[e43] * other[e35])
                - (self.group0().zxy() * other.group1().yzx()).with_w(self[e45] * other[e45]),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e43] * other[e25],
                self[e41] * other[e35],
                self[e42] * other[e15],
                -(self[e23] * other[e4235]) - (self[e31] * other[e4315]) - (self[e12] * other[e4125]),
            ]) - (other.group0().zx().with_zw(other[e3215], other[e25]) * self.group0().yzz().with_w(self[e42]))
                - (other.group1().ww().with_zw(other[e25], other[e15]) * self.group0().xyx().with_w(self[e41]))
                - (self.group1().www() * other.group1().xyz()).with_w(self[e43] * other[e35]),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e23] * other[e3215]) - (self[e31] * other[e35]) - (self[e15] * other[e45]) - (self[e25] * other[e4125]),
                -(self[e31] * other[e3215]) - (self[e12] * other[e15]) - (self[e25] * other[e45]) - (self[e35] * other[e4235]),
                -(self[e23] * other[e25]) - (self[e12] * other[e3215]) - (self[e15] * other[e4315]) - (self[e35] * other[e45]),
                (self[e23] * other[e15]) + (self[e31] * other[e25]) + (self[e12] * other[e35]) + (self[e45] * other[e3215]),
            ]) + (other.group1().yzxx() * self.group2().zxy().with_w(self[e15]))
                + (self.group1().zxy() * other.group0().yzx()).with_w(self[e25] * other[e4315])
                + (self.group1().www() * other.group0().xyz()).with_w(self[e35] * other[e4125]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e41] * other[e3215]) + (self[e42] * other[e35]) + (self[e23] * other[e45]) + (self[e31] * other[e4125]),
                (self[e42] * other[e3215]) + (self[e43] * other[e15]) + (self[e31] * other[e45]) + (self[e12] * other[e4235]),
                (self[e41] * other[e25]) + (self[e43] * other[e3215]) + (self[e23] * other[e4315]) + (self[e12] * other[e45]),
                self[e43] * other[e4125] * -1.0,
            ]) - (other.group1().yzxy() * self.group1().zxy().with_w(self[e42]))
                - (self.group0().zxy() * other.group0().yzx()).with_w(self[e41] * other[e4235]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       49       98        0
    //    simd3        0       16        0
    //    simd4       35       22        0
    // Totals...
    // yes simd       84      136        0
    //  no simd      189      234        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e42] * other[e435],
                self[e43] * other[e415],
                self[e41] * other[e425],
                -(self[e42] * other[e315]) - (self[e43] * other[e125]) - (self[e23] * other[e415]) - (self[e31] * other[e425]) - (self[e12] * other[e435]),
            ]) - (self.group0().zxy() * other.group0().yzx()).with_w(self[e41] * other[e235]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e42] * other[e125]) + (self[e31] * other[e435]),
                (self[e43] * other[e235]) + (self[e12] * other[e415]),
                (self[e41] * other[e315]) + (self[e23] * other[e425]),
                self[e43] * other[e125] * -1.0,
            ]) - (self.group0().zxy() * other.group1().yzx()).with_w(self[e41] * other[e235])
                - (other.group0().yzx() * self.group1().zxy()).with_w(self[e42] * other[e315]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e31] * other[e125]) + (self[e25] * other[e435]),
                (self[e12] * other[e235]) + (self[e35] * other[e415]),
                (self[e23] * other[e315]) + (self[e15] * other[e425]),
                0.0,
            ]) - (self.group2().zxy() * other.group0().yzx()).with_w(self[e41] * other[e415])
                - (other.group1().xyx() * self.group1().wwy()).with_w(self[e42] * other[e425])
                - (other.group1().yzz() * self.group1().zxw()).with_w(self[e43] * other[e435]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e42] * other[e125]) + (self[e45] * other[e415]),
                (self[e43] * other[e235]) + (self[e45] * other[e425]),
                (self[e41] * other[e315]) + (self[e45] * other[e435]),
                -(self[e23] * other[e235]) - (self[e31] * other[e315]) - (self[e12] * other[e125]) - (self[e25] * other[e425]) - (self[e35] * other[e435]),
            ]) - (self.group0().zxy() * other.group1().yzx()).with_w(self[e15] * other[e415]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       65      113        0
    //    simd3        0       15        0
    //    simd4       36       24        0
    // Totals...
    // yes simd      101      152        0
    //  no simd      209      254        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e41] * other[e12345]) + (self[e42] * other[e435]),
                (self[e42] * other[e12345]) + (self[e43] * other[e415]),
                (self[e41] * other[e425]) + (self[e43] * other[e12345]),
                -(self[e42] * other[e315]) - (self[e43] * other[e125]) - (self[e23] * other[e415]) - (self[e31] * other[e425]) - (self[e12] * other[e435]),
            ]) - (self.group0().zxy() * other.group0().yzx()).with_w(self[e41] * other[e235]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e42] * other[e125]) + (self[e23] * other[e12345]) + (self[e31] * other[e435]),
                (self[e43] * other[e235]) + (self[e31] * other[e12345]) + (self[e12] * other[e415]),
                (self[e43] * other[e5]) + (self[e23] * other[e425]) + (self[e12] * other[e12345]),
                self[e43] * other[e125] * -1.0,
            ]) + (self.group0().xyx() * other.group1().wwy()).with_w(self[e45] * other[e12345])
                - (other.group1().yzxx() * self.group0().zxy().with_w(self[e41]))
                - (self.group1().zxy() * other.group0().yzx()).with_w(self[e42] * other[e315]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * other[e5]) + (self[e31] * other[e125]) + (self[e15] * other[e12345]) + (self[e25] * other[e435]),
                (self[e31] * other[e5]) + (self[e12] * other[e235]) + (self[e25] * other[e12345]) + (self[e35] * other[e415]),
                (self[e23] * other[e315]) + (self[e12] * other[e5]) + (self[e15] * other[e425]) + (self[e35] * other[e12345]),
                0.0,
            ]) - (other.group0().yzxx() * self.group2().zxy().with_w(self[e41]))
                - (self.group1().zxy() * other.group1().yzx()).with_w(self[e42] * other[e425])
                - (self.group1().www() * other.group1().xyz()).with_w(self[e43] * other[e435]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e41] * other[e5]) + (self[e42] * other[e125]) + (self[e45] * other[e415]),
                (self[e42] * other[e5]) + (self[e43] * other[e235]) + (self[e45] * other[e425]),
                (self[e41] * other[e315]) + (self[e43] * other[e5]) + (self[e45] * other[e435]),
                -(self[e23] * other[e235])
                    - (self[e31] * other[e315])
                    - (self[e12] * other[e125])
                    - (self[e45] * other[e5])
                    - (self[e25] * other[e425])
                    - (self[e35] * other[e435]),
            ]) - (self.group0().zxy() * other.group1().yzx()).with_w(self[e15] * other[e415]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for Dipole {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      100      161        0
    //    simd2        2        2        0
    //    simd3       72      105        0
    //    simd4       64       44        0
    // Totals...
    // yes simd      238      312        0
    //  no simd      576      656        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                -(self[e41] * other[e235])
                    - (self[e42] * other[e315])
                    - (self[e43] * other[e125])
                    - (self[e31] * other[e425])
                    - (self[e12] * other[e435])
                    - (self[e45] * other[e321])
                    - (self[e15] * other[e423])
                    - (self[e25] * other[e431])
                    - (self[e35] * other[e412]),
                (self[e41] * other[e15])
                    + (self[e42] * other[e25])
                    + (self[e43] * other[e35])
                    + (self[e23] * other[e23])
                    + (self[e31] * other[e31])
                    + (self[e12] * other[e12])
                    + (self[e15] * other[e41])
                    + (self[e25] * other[e42])
                    + (self[e35] * other[e43]),
            ]) - (Simd32x2::from([other[e415], other[e45]]) * self.group1().xw()),
            // e1, e2, e3, e4
            (self.group1().wwwx() * other.group5().with_w(other[e41]))
                + (other.group3().zx().with_zw(other[e3215], other[e31]) * self.group0().yzz().with_w(self[e42]))
                + (other.group3().ww().with_zw(other[e4315], self[e31]) * self.group1().xyx().with_w(other[e42]))
                + (other.group9().zx().with_zw(other[e45], self[e12]) * self.group1().yzz().with_w(other[e43]))
                + (other.group9().ww().with_zw(other[e25], other[e23]) * self.group0().xyx().with_w(self[e41]))
                + (self.group2().zxy() * other.group4().yzx()).with_w(self[e43] * other[e12])
                - (Simd32x4::from([other[e1234], other[e1234], other[e42], other[e4315]]) * self.group2().xyx().with_w(self[e42]))
                - (self.group1().zxyw() * other.group9().yzx().with_w(other[e1234]))
                - (other.group4().zx().with_zw(other[e1234], other[e4125]) * self.group2().yzz().with_w(self[e43]))
                - (self.group0().zxy() * other.group3().yzx()).with_w(self[e41] * other[e4235]),
            // e5
            (self[e23] * other[e15])
                + (self[e31] * other[e25])
                + (self[e12] * other[e35])
                + (self[e45] * other[e3215])
                + (self[e15] * other[e23])
                + (self[e15] * other[e4235])
                + (self[e25] * other[e31])
                + (self[e25] * other[e4315])
                + (self[e35] * other[e12])
                + (self[e35] * other[e4125]),
            // e15, e25, e35, e45
            Simd32x4::from([
                -(self[e12] * other[e315]) - (self[e45] * other[e235]),
                -(self[e23] * other[e125]) - (self[e45] * other[e315]),
                -(self[e31] * other[e235]) - (self[e45] * other[e125]),
                (self[e31] * other[e2]) + (self[e12] * other[e3]),
            ]) + (Simd32x4::from(other[e12345]) * self.group2().with_w(self[e45]))
                + (Simd32x4::from([other[e2], other[e415], other[e1], other[e431]]) * self.group2().zzy().with_w(self[e25]))
                + (Simd32x4::from([other[e5], other[e5], other[e5], other[e1]]) * self.group1().xyzx())
                + (Simd32x4::from([other[e435], other[e3], other[e425], other[e423]]) * self.group2().yxx().with_w(self[e15]))
                + (other.group8().zxy() * self.group1().yzx()).with_w(self[e35] * other[e412])
                - (Simd32x4::from([other[e3], other[e321], other[e415], other[e315]]) * self.group2().yyy().with_w(self[e42]))
                - (Simd32x4::from([other[e425], other[e1], other[e321], other[e125]]) * self.group2().zzz().with_w(self[e43]))
                - (other.group6().wz().with_zw(other[e2], other[e235]) * self.group2().xxx().with_w(self[e41])),
            // e41, e42, e43
            (Simd32x3::from(other[e12345]) * self.group0())
                + (Simd32x3::from(other[e4]) * self.group1().xyz())
                + (Simd32x3::from([other[e3], other[e1], other[e425]]) * self.group0().yzx())
                + (Simd32x3::from([other[e321], other[e321], other[e2]]) * self.group0().xyx())
                + (self.group0().yzz() * other.group6().zxw())
                + (other.group7().xxy() * self.group1().wzx())
                + (other.group7().zyz() * self.group1().yww())
                - (self.group0().zxy() * other.group1().yzx())
                - (self.group0().zxy() * other.group6().yzx())
                - (other.group7().yzx() * self.group1().zxy()),
            // e23, e31, e12
            (Simd32x3::from(other[e12345]) * self.group1().xyz())
                + (Simd32x3::from([other[e4], other[e4], other[e431]]) * self.group2().xyx())
                + (Simd32x3::from([other[e5], other[e5], other[e315]]) * self.group0().xyx())
                + (self.group0().yzz() * other.group8().zx().with_z(other[e5]))
                + (self.group2().yzz() * other.group7().zx().with_z(other[e4]))
                + (self.group1().yzx() * other.group6().zxy())
                - (Simd32x3::from(self[e45]) * other.group1().xyz())
                - (self.group0().zxy() * other.group8().yzx())
                - (self.group2().zxy() * other.group7().yzx())
                - (self.group1().zxy() * other.group6().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e45] * other[e4235] * -1.0,
                self[e45] * other[e4315] * -1.0,
                self[e45] * other[e4125] * -1.0,
                self[e35] * other[e43],
            ]) + (self.group0().zxy() * other.group3().yzx()).with_w(self[e45] * other[scalar])
                + (self.group2().zxy() * other.group4().yzx()).with_w(self[e15] * other[e41])
                + (other.group5().yzx() * self.group1().zxy()).with_w(self[e25] * other[e42])
                - (Simd32x4::from([other[e1234], other[e1234], other[e42], other[e4235]]) * self.group2().xyx().with_w(self[e23]))
                - (other.group0().xx().with_zw(other[scalar], self[e41]) * self.group1().xyz().with_w(other[e15]))
                - (other.group4().zx().with_zw(other[e1234], other[e4315]) * self.group2().yzz().with_w(self[e31]))
                - (other.group3().zx().with_zw(other[e3215], other[e35]) * self.group0().yzz().with_w(self[e43]))
                - (other.group9().ww().with_zw(other[e25], other[e25]) * self.group0().xyx().with_w(self[e42]))
                - (other.group5().zxy() * self.group1().yzx()).with_w(self[e12] * other[e4125]),
            // e423, e431, e412
            (Simd32x3::from(self[e41]) * Simd32x3::from([other[e45], other[e12], other[e4315]]))
                + (Simd32x3::from(self[e42]) * Simd32x3::from([other[e4125], other[e45], other[e23]]))
                + (Simd32x3::from(self[e43]) * Simd32x3::from([other[e31], other[e4235], other[e45]]))
                + (other.group4().yzx() * self.group1().zxy())
                - (Simd32x3::from(other[scalar]) * self.group0())
                - (Simd32x3::from(other[e1234]) * self.group1().xyz())
                - (Simd32x3::from([other[e12], other[e4125], other[e31]]) * self.group0().yxx())
                - (Simd32x3::from([other[e4315], other[e23], other[e4235]]) * self.group0().zzy())
                - (other.group4().xxy() * self.group1().wzx())
                - (other.group4().zyz() * self.group1().yww()),
            // e235, e315, e125
            (Simd32x3::from(self[e45]) * other.group3().xyz())
                + (self.group2().zxy() * other.group5().yzx())
                + (self.group2().zxy() * other.group9().yzx())
                + (self.group1().zxy() * other.group3().yzx())
                - (Simd32x3::from(other[scalar]) * self.group2())
                - (Simd32x3::from([other[e35], other[e15], other[e3215]]) * self.group1().yzz())
                - (Simd32x3::from([other[e45], other[e45], other[e31]]) * self.group2().xyx())
                - (Simd32x3::from([other[e4125], other[e4235], other[e45]]) * self.group2().yzz())
                - (Simd32x3::from([other[e3215], other[e3215], other[e25]]) * self.group1().xyx())
                - (self.group2().yzx() * other.group5().zx().with_z(other[e4315])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e12] * other[e2]) + (self[e45] * other[e415]),
                (self[e23] * other[e3]) + (self[e45] * other[e425]),
                (self[e31] * other[e1]) + (self[e45] * other[e435]),
                -(self[e12] * other[e125]) - (self[e45] * other[e5]),
            ]) + (Simd32x4::from([other[e5], other[e5], other[e315], other[e1]]) * self.group0().xyx().with_w(self[e15]))
                + (other.group8().zx().with_zw(other[e5], other[e2]) * self.group0().yzz().with_w(self[e25]))
                + (self.group2().zxy() * other.group7().yzx()).with_w(self[e35] * other[e3])
                - (other.group7().zx().with_zw(other[e4], other[e435]) * self.group2().yzz().with_w(self[e35]))
                - (other.group1().zx().with_zw(other[e321], self[e31]) * self.group1().yzz().with_w(other[e315]))
                - (other.group1().ww().with_zw(other[e431], other[e425]) * self.group2().xyx().with_w(self[e25]))
                - (other.group6().ww().with_zw(other[e2], self[e23]) * self.group1().xyx().with_w(other[e235]))
                - (self.group0().zxy() * other.group8().yzx()).with_w(self[e15] * other[e415]),
            // e1234
            (self[e45] * other[e4])
                - (self[e41] * other[e1])
                - (self[e41] * other[e415])
                - (self[e42] * other[e2])
                - (self[e42] * other[e425])
                - (self[e43] * other[e3])
                - (self[e43] * other[e435])
                - (self[e23] * other[e423])
                - (self[e31] * other[e431])
                - (self[e12] * other[e412]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       35       82        0
    //    simd3        1       18        0
    //    simd4       31       18        0
    // Totals...
    // yes simd       67      118        0
    //  no simd      162      208        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (self.group0().yzx() * other.group0().zxy()) - (self.group0().zxy() * other.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x3::from(0.0).with_w(self[e12] * other[e4125] * -1.0)
                - (self.group1().wwwy() * other.group0().xyzy())
                - (other.group0().wwwx() * self.group0().with_w(self[e23])),
            // e235, e315, e125, e4
            Simd32x4::from([self[e35] * other[e4315], self[e15] * other[e4125], self[e25] * other[e4235], self[e43] * other[e4125] * -1.0])
                - (other.group0().zxyx() * self.group2().yzx().with_w(self[e41]))
                - (other.group0().wwwy() * self.group1().xyz().with_w(self[e42])),
            // e1, e2, e3, e5
            Simd32x4::from([
                self[e12] * other[e4315] * -1.0,
                self[e23] * other[e4125] * -1.0,
                self[e31] * other[e4235] * -1.0,
                (self[e45] * other[e3215]) + (self[e35] * other[e4125]),
            ]) + (other.group0().zxyy() * self.group1().yzx().with_w(self[e25]))
                + (other.group0().wwwx() * self.group0().with_w(self[e15])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       27       69        0
    //    simd3        2       14        0
    //    simd4       34       27        0
    // Totals...
    // yes simd       63      110        0
    //  no simd      169      219        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other[e4]) * self.group1().xyz()) + (self.group0().yzx() * other.group0().zxy()) - (self.group0().zxy() * other.group0().yzx()),
            // e23, e31, e12, e45
            Simd32x4::from([self[e45] * other[e1] * -1.0, self[e45] * other[e2] * -1.0, self[e45] * other[e3] * -1.0, self[e12] * other[e3]])
                + (Simd32x4::from([other[e5], other[e5], other[e5], other[e1]]) * self.group0().with_w(self[e23]))
                + (other.group0().wwwy() * self.group2().with_w(self[e31])),
            // e15, e25, e35, e1234
            Simd32x4::from([self[e23] * other[e5], self[e31] * other[e5], self[e12] * other[e5], -(self[e42] * other[e2]) - (self[e43] * other[e3])])
                + (other.group0().yzxw() * self.group2().zxy().with_w(self[e45]))
                - (other.group0().zxyx() * self.group2().yzx().with_w(self[e41])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e31] * other[e3] * -1.0, self[e12] * other[e1] * -1.0, self[e23] * other[e2] * -1.0, self[e35] * other[e3]])
                + (Simd32x4::from([other[e5], other[e5], other[e5], other[e1]]) * self.group0().with_w(self[e15]))
                + (other.group0().yzxy() * self.group1().zxy().with_w(self[e25]))
                - (self.group2() * other.group0().www()).with_w(self[e45] * other[e5]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       53        0
    //    simd3        0       19        0
    //    simd4       14        5        0
    // Totals...
    // yes simd       42       77        0
    //  no simd       84      130        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Circle::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[scalar]) * self.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            Simd32x4::from(other[scalar]) * self.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125
            Simd32x3::from(other[scalar]) * self.group2() * Simd32x3::from(-1.0),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       39       80        0
    //    simd3        2       19        0
    //    simd4       31       19        0
    // Totals...
    // yes simd       72      118        0
    //  no simd      169      213        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (self.group0().yzx() * other.group0().zxy()) - (Simd32x3::from(other[e1234]) * self.group1().xyz()) - (self.group0().zxy() * other.group0().yzx()),
            // e415, e425, e435, e321
            -(Simd32x4::from([other[e1234], other[e1234], other[e1234], other[e4315]]) * self.group2().with_w(self[e31]))
                - (self.group1().wwwz() * other.group0().xyzz())
                - (other.group0().wwwx() * self.group0().with_w(self[e23])),
            // e235, e315, e125, e4
            Simd32x4::from([
                self[e35] * other[e4315],
                self[e15] * other[e4125],
                self[e25] * other[e4235],
                -(self[e43] * other[e4125]) - (self[e45] * other[e1234]),
            ]) - (other.group0().zxyx() * self.group2().yzx().with_w(self[e41]))
                - (other.group0().wwwy() * self.group1().xyz().with_w(self[e42])),
            // e1, e2, e3, e5
            Simd32x4::from([
                -(self[e12] * other[e4315]) - (self[e15] * other[e1234]),
                -(self[e23] * other[e4125]) - (self[e25] * other[e1234]),
                -(self[e31] * other[e4235]) - (self[e35] * other[e1234]),
                (self[e45] * other[e3215]) + (self[e35] * other[e4125]),
            ]) + (other.group0().zxyy() * self.group1().yzx().with_w(self[e25]))
                + (other.group0().wwwx() * self.group0().with_w(self[e15])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for Dipole {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       72      130        0
    //    simd3        0       22        0
    //    simd4       54       35        0
    // Totals...
    // yes simd      126      187        0
    //  no simd      288      336        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e41] * other[e12345])
                    + (self[e41] * other[e321])
                    + (self[e42] * other[e435])
                    + (self[e42] * other[e3])
                    + (self[e23] * other[e4])
                    + (self[e31] * other[e412])
                    + (self[e45] * other[e423]),
                (self[e42] * other[e12345])
                    + (self[e42] * other[e321])
                    + (self[e43] * other[e415])
                    + (self[e43] * other[e1])
                    + (self[e31] * other[e4])
                    + (self[e12] * other[e423])
                    + (self[e45] * other[e431]),
                (self[e41] * other[e425])
                    + (self[e41] * other[e2])
                    + (self[e43] * other[e12345])
                    + (self[e43] * other[e321])
                    + (self[e23] * other[e431])
                    + (self[e12] * other[e4])
                    + (self[e45] * other[e412]),
                -(self[e23] * other[e415])
                    - (self[e31] * other[e425])
                    - (self[e12] * other[e435])
                    - (self[e45] * other[e321])
                    - (self[e15] * other[e423])
                    - (self[e25] * other[e431])
                    - (self[e35] * other[e412]),
            ]) - (self.group0().zxy() * other.group1().yzx()).with_w(self[e41] * other[e235])
                - (self.group0().zxy() * other.group3().yzx()).with_w(self[e42] * other[e315])
                - (self.group1().zxy() * other.group0().yzx()).with_w(self[e43] * other[e125]),
            // e23, e31, e12, e45
            Simd32x4::from([self[e45] * other[e1] * -1.0, self[e45] * other[e2] * -1.0, self[e45] * other[e3] * -1.0, self[e45] * other[e12345]])
                + (self.group1().xyxy() * other.group0().ww().with_zw(other[e425], other[e2]))
                + (self.group1().yzzz() * other.group1().zx().with_zw(other[e12345], other[e3]))
                + (other.group0().zx().with_zw(other[e4], other[e1]) * self.group2().yzz().with_w(self[e23]))
                + (other.group3().ww().with_zw(other[e431], other[e412]) * self.group2().xyx().with_w(self[e35]))
                + (self.group0().xyx() * other.group2().wwy()).with_w(self[e15] * other[e423])
                + (self.group0().yzz() * other.group2().zxw()).with_w(self[e25] * other[e431])
                - (other.group2().yzxx() * self.group0().zxy().with_w(self[e41]))
                - (self.group2().zxy() * other.group0().yzx()).with_w(self[e42] * other[e315])
                - (self.group1().zxy() * other.group1().yzx()).with_w(self[e43] * other[e125]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e23] * other[e5]) + (self[e31] * other[e125]) + (self[e25] * other[e435]) + (self[e35] * other[e2]),
                (self[e31] * other[e5]) + (self[e12] * other[e235]) + (self[e25] * other[e12345]) + (self[e35] * other[e415]),
                (self[e23] * other[e315]) + (self[e12] * other[e5]) + (self[e25] * other[e1]) + (self[e35] * other[e12345]),
                -(self[e43] * other[e3]) - (self[e23] * other[e423]) - (self[e31] * other[e431]) - (self[e12] * other[e412]),
            ]) + (Simd32x4::from([other[e12345], other[e3], other[e425], other[e4]]) * self.group2().xxx().with_w(self[e45]))
                - (Simd32x4::from([other[e425], other[e1], other[e321], other[e425]]) * self.group2().zzz().with_w(self[e42]))
                - (Simd32x4::from([other[e3], other[e321], other[e415], other[e1]]) * self.group2().yyy().with_w(self[e41]))
                - (other.group1().wz().with_zw(other[e2], other[e415]) * self.group2().xxx().with_w(self[e41]))
                - (self.group1().zxy() * other.group2().yzx()).with_w(self[e42] * other[e2])
                - (self.group1().www() * other.group2().xyz()).with_w(self[e43] * other[e435]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e12] * other[e2]) + (self[e45] * other[e415]),
                (self[e23] * other[e3]) + (self[e45] * other[e425]),
                (self[e31] * other[e1]) + (self[e45] * other[e435]),
                -(self[e12] * other[e125]) - (self[e45] * other[e5]),
            ]) + (self.group0().xyx() * other.group2().wwy()).with_w(self[e15] * other[e1])
                + (self.group0().yzz() * other.group2().zxw()).with_w(self[e25] * other[e2])
                + (self.group2().zxy() * other.group0().yzx()).with_w(self[e35] * other[e3])
                - (self.group1().xyxx() * other.group1().ww().with_zw(other[e2], other[e235]))
                - (self.group1().yzzy() * other.group3().zx().with_zw(other[e321], other[e315]))
                - (other.group0().zx().with_zw(other[e4], other[e435]) * self.group2().yzz().with_w(self[e35]))
                - (other.group3().ww().with_zw(other[e431], other[e425]) * self.group2().xyx().with_w(self[e25]))
                - (self.group0().zxy() * other.group2().yzx()).with_w(self[e15] * other[e415]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for Dipole {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       76      123        0
    //    simd3        0       15        0
    //    simd4       53       42        0
    // Totals...
    // yes simd      129      180        0
    //  no simd      288      336        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                -(self[e42] * other[e12]) - (self[e43] * other[e4315]) - (self[e23] * other[e1234]) - (self[e31] * other[e43]) - (self[e45] * other[e41]),
                -(self[e42] * other[scalar]) - (self[e43] * other[e23]) - (self[e31] * other[e1234]) - (self[e12] * other[e41]) - (self[e45] * other[e42]),
                -(self[e42] * other[e4235]) - (self[e43] * other[scalar]) - (self[e23] * other[e42]) - (self[e12] * other[e1234]) - (self[e45] * other[e43]),
                (self[e23] * other[e23]) + (self[e31] * other[e31]) + (self[e12] * other[e12]) + (self[e25] * other[e42]) + (self[e35] * other[e43]),
            ]) + (Simd32x4::from(self[e41]) * other.group1().wz().with_zw(other[e4315], other[e15]))
                + (Simd32x4::from(self[e42]) * Simd32x4::from([other[e4125], other[e45], other[e23], other[e25]]))
                + (Simd32x4::from(self[e43]) * Simd32x4::from([other[e31], other[e4235], other[e45], other[e35]]))
                + (other.group0().yzxx() * self.group1().zxy().with_w(self[e15]))
                - (Simd32x4::from([other[scalar], other[e4125], other[e31], other[e45]]) * self.group0().xxx().with_w(self[e45])),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e45] * other[e4235] * -1.0,
                self[e45] * other[e4315] * -1.0,
                self[e45] * other[e4125] * -1.0,
                self[e45] * other[scalar],
            ]) + (other.group0().yzxy() * self.group2().zxy().with_w(self[e25]))
                + (self.group0().zxy() * other.group2().yzx()).with_w(self[e15] * other[e41])
                + (self.group1().zxy() * other.group1().yzx()).with_w(self[e35] * other[e43])
                - (self.group1().xyxy() * other.group0().ww().with_zw(other[e31], other[e4315]))
                - (self.group1().yzzz() * other.group1().zx().with_zw(other[scalar], other[e4125]))
                - (other.group0().zx().with_zw(other[e1234], other[e4235]) * self.group2().yzz().with_w(self[e23]))
                - (other.group2().zx().with_zw(other[e3215], other[e25]) * self.group0().yzz().with_w(self[e42]))
                - (other.group2().ww().with_zw(other[e42], other[e35]) * self.group2().xyx().with_w(self[e43]))
                - (other.group3().ww().with_zw(other[e25], other[e15]) * self.group0().xyx().with_w(self[e41])),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e23] * other[e3215])
                    - (self[e31] * other[e35])
                    - (self[e15] * other[scalar])
                    - (self[e15] * other[e45])
                    - (self[e25] * other[e12])
                    - (self[e25] * other[e4125]),
                -(self[e31] * other[e3215])
                    - (self[e12] * other[e15])
                    - (self[e25] * other[scalar])
                    - (self[e25] * other[e45])
                    - (self[e35] * other[e23])
                    - (self[e35] * other[e4235]),
                -(self[e23] * other[e25])
                    - (self[e12] * other[e3215])
                    - (self[e15] * other[e31])
                    - (self[e15] * other[e4315])
                    - (self[e35] * other[scalar])
                    - (self[e35] * other[e45]),
                (self[e23] * other[e15]) + (self[e31] * other[e25]) + (self[e12] * other[e35]) + (self[e45] * other[e3215]) + (self[e35] * other[e12]) + (self[e35] * other[e4125]),
            ]) + (other.group1().yzxx() * self.group2().zxy().with_w(self[e15]))
                + (other.group3().yzxx() * self.group2().zxy().with_w(self[e15]))
                + (self.group1().zxy() * other.group2().yzx()).with_w(self[e25] * other[e31])
                + (self.group1().www() * other.group2().xyz()).with_w(self[e25] * other[e4315]),
            // e1, e2, e3, e4
            (self.group1().xyxx() * other.group1().ww().with_zw(other[e4315], other[e41]))
                + (self.group1().yzzy() * other.group3().zx().with_zw(other[e45], other[e42]))
                + (self.group1().wwwz() * other.group1().xyz().with_w(other[e43]))
                + (other.group2().zx().with_zw(other[e3215], other[e31]) * self.group0().yzz().with_w(self[e42]))
                + (other.group3().ww().with_zw(other[e25], other[e23]) * self.group0().xyx().with_w(self[e41]))
                + (self.group2().zxy() * other.group0().yzx()).with_w(self[e43] * other[e12])
                - (self.group1().zxyw() * other.group3().yzx().with_w(other[e1234]))
                - (other.group0().zx().with_zw(other[e1234], other[e4125]) * self.group2().yzz().with_w(self[e43]))
                - (other.group2().ww().with_zw(other[e42], other[e4315]) * self.group2().xyx().with_w(self[e42]))
                - (self.group0().zxy() * other.group2().yzx()).with_w(self[e41] * other[e4235]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl std::ops::Div<anti_sandwich> for DipoleInversion {
    type Output = anti_sandwich_partial<DipoleInversion>;
    fn div(self, _rhs: anti_sandwich) -> Self::Output {
        anti_sandwich_partial(self)
    }
}
impl AntiSandwich<AntiCircleRotor> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       57      121        0
    //    simd3        0       26        0
    //    simd4       79       56        0
    // Totals...
    // yes simd      136      203        0
    //  no simd      373      423        0
    fn anti_sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                -(other[e43] * self[e31]) - (other[e43] * self[e4315]) - (other[e23] * self[e1234]) - (other[e12] * self[e42]) - (other[scalar] * self[e41]),
                -(other[e41] * self[e4125]) - (other[e42] * self[e45]) - (other[e23] * self[e43]) - (other[e31] * self[e1234]) - (other[scalar] * self[e42]),
                -(other[e42] * self[e4235]) - (other[e43] * self[e45]) - (other[e31] * self[e41]) - (other[e12] * self[e1234]) - (other[scalar] * self[e43]),
                (other[e23] * self[e23]) + (other[e31] * self[e31]) + (other[e12] * self[e12]) + (other[e25] * self[e42]) + (other[e35] * self[e43]),
            ]) + (other.group0().yzx() * self.group1().zxy()).with_w(other[e41] * self[e15])
                + (other.group0().yzx() * self.group3().zxy()).with_w(other[e42] * self[e25])
                + (self.group0().xxy() * other.group1().wzx()).with_w(other[e43] * self[e35])
                + (self.group0().zyz() * other.group1().yww()).with_w(other[e15] * self[e41])
                - (self.group1().wzxw() * other.group0().xxy().with_w(other[e45])),
            // e415, e425, e435, e321
            Simd32x4::from([
                other[scalar] * self[e23] * -1.0,
                other[scalar] * self[e31] * -1.0,
                other[scalar] * self[e12] * -1.0,
                other[scalar] * self[e45],
            ]) + (self.group2().zxyx() * other.group0().yzx().with_w(other[e41]))
                + (self.group0().zxy() * other.group2().yzx()).with_w(other[e42] * self[e25])
                + (other.group1().yzx() * self.group1().zxy()).with_w(other[e43] * self[e35])
                - (Simd32x4::from([self[e25], self[e3215], self[e3215], other[e25]]) * other.group0().zyz().with_w(self[e42]))
                - (Simd32x4::from([self[e3215], self[e35], self[e15], other[e15]]) * other.group0().xxy().with_w(self[e41]))
                - (other.group1().zxyx() * self.group1().yzx().with_w(self[e4235]))
                - (other.group1().wwwy() * self.group3().xyzy())
                - (other.group2().zxyz() * self.group0().yzx().with_w(self[e43]))
                - (self.group2().www() * other.group2().xyz()).with_w(other[e12] * self[e4125]),
            // e235, e315, e125, e5
            Simd32x4::from([
                other[scalar] * self[e15] * -1.0,
                other[scalar] * self[e25] * -1.0,
                other[scalar] * self[e35] * -1.0,
                (other[e25] * self[e31]) + (other[e35] * self[e12]),
            ]) + (Simd32x4::from([self[e45], self[e4125], self[e31], self[e25]]) * other.group2().xxx().with_w(other[e31]))
                + (Simd32x4::from([self[e4315], self[e23], self[e45], self[e23]]) * other.group2().zzzx())
                + (other.group1().yzxx() * self.group2().zxyx())
                + (self.group1().zw().with_zw(self[e4235], self[e35]) * other.group2().yyy().with_w(other[e12]))
                - (Simd32x4::from([self[e31], self[e4235], self[e23], self[e3215]]) * other.group2().zzyw())
                - (Simd32x4::from([self[e25], self[e3215], self[e3215], self[e4235]]) * other.group1().zyz().with_w(other[e15]))
                - (Simd32x4::from([self[e4125], self[e12], self[e4315], self[e4125]]) * other.group2().yxxz())
                - (Simd32x4::from([self[e3215], self[e35], self[e15], self[e3215]]) * other.group1().xxyw())
                - (other.group1().www() * self.group2().xyz()).with_w(other[e25] * self[e4315]),
            // e1, e2, e3, e4
            Simd32x4::from([
                -(other[e43] * self[e25]) - (other[e31] * self[e4125]) - (other[e25] * self[e43]),
                -(other[e42] * self[e3215]) - (other[e12] * self[e4235]) - (other[e35] * self[e41]),
                -(other[e43] * self[e3215]) - (other[e23] * self[e4315]) - (other[e15] * self[e42]),
                (other[e31] * self[e42]) + (other[e12] * self[e43]) + (other[e45] * self[e1234]),
            ]) + (Simd32x4::from([self[e45], self[e4125], self[e4235], self[e31]]) * other.group1().xxy().with_w(other[e42]))
                + (Simd32x4::from([self[e4315], self[e45], self[e45], self[e4315]]) * other.group1().zyz().with_w(other[e42]))
                + (self.group1().xyzz() * other.group1().www().with_w(other[e43]))
                + (other.group0().yzx() * self.group2().zxy()).with_w(other[e41] * self[e23])
                + (self.group0().yzx() * other.group2().zxy()).with_w(other[e41] * self[e4235])
                + (other.group2().www() * self.group3().xyz()).with_w(other[e23] * self[e41])
                + (self.group2().www() * other.group2().xyz()).with_w(other[e43] * self[e4125])
                - (Simd32x4::from([self[e3215], self[e35], self[e15], self[e1234]]) * other.group0().xxy().with_w(other[scalar])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDipoleInversion> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       61      130        0
    //    simd3        0       30        0
    //    simd4       93       66        0
    // Totals...
    // yes simd      154      226        0
    //  no simd      433      484        0
    fn anti_sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e415] * self[e1234]) + (other[e4] * self[e23]) + (other[e4] * self[e4235]) + (other[e1] * self[e1234]) + (other[e3] * self[e42]),
                (other[e425] * self[e1234]) + (other[e4] * self[e31]) + (other[e4] * self[e4315]) + (other[e1] * self[e43]) + (other[e2] * self[e1234]),
                (other[e435] * self[e1234]) + (other[e321] * self[e43]) + (other[e4] * self[e12]) + (other[e4] * self[e4125]) + (other[e3] * self[e1234]),
                -(other[e415] * self[e23])
                    - (other[e425] * self[e31])
                    - (other[e435] * self[e12])
                    - (other[e321] * self[e45])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]) + (Simd32x4::from([self[e31], self[e4125], self[e4235], self[e4235]]) * other.group0().zxy().with_w(other[e1]))
                + (Simd32x4::from([self[e4315], self[e45], self[e45], self[e4315]]) * other.group0().zyz().with_w(other[e2]))
                + (other.group1().zx().with_zw(other[e2], self[e1234]) * self.group0().yzx().with_w(other[e5]))
                + (other.group0().xxy() * self.group1().wzx()).with_w(other[e4] * self[e3215])
                + (self.group0().xyx() * other.group1().wwy()).with_w(other[e3] * self[e4125])
                - (other.group0().yzx() * self.group1().zxy()).with_w(other[e423] * self[e15])
                - (other.group0().yzx() * self.group3().zxy()).with_w(other[e431] * self[e25])
                - (self.group0().zxy() * other.group1().yzx()).with_w(other[e412] * self[e35])
                - (self.group0().zxy() * other.group3().yzx()).with_w(other[e235] * self[e41]),
            // e23, e31, e12, e45
            Simd32x4::from([other[e2] * self[e4125], other[e3] * self[e4235], other[e1] * self[e4315], other[e4] * self[e3215] * -1.0])
                + (Simd32x4::from([self[e25], self[e3215], self[e3215], self[e25]]) * other.group0().zyz().with_w(other[e431]))
                + (Simd32x4::from([self[e3215], self[e35], self[e15], self[e15]]) * other.group0().xxy().with_w(other[e423]))
                + (self.group2() * other.group2().www().with_w(other[e5]))
                + (self.group1().yzxy() * other.group1().zxy().with_w(other[e2]))
                + (other.group2().zx().with_zw(other[e5], self[e23]) * self.group0().yzz().with_w(other[e1]))
                + (other.group3().ww().with_zw(other[e315], self[e35]) * self.group0().xyx().with_w(other[e412]))
                + (self.group2().www() * other.group2().xyz()).with_w(other[e3] * self[e12])
                - (Simd32x4::from([self[e45], self[e4125], self[e4235], self[e4315]]) * other.group3().xxy().with_w(other[e425]))
                - (Simd32x4::from([self[e4315], self[e45], self[e45], self[e4125]]) * other.group3().zyz().with_w(other[e435]))
                - (other.group1().wwwx() * self.group3().xyzx())
                - (other.group2().yzxy() * self.group0().zxy().with_w(self[e42]))
                - (other.group0().yzx() * self.group2().zxy()).with_w(other[e235] * self[e41])
                - (other.group1().yzx() * self.group1().zxy()).with_w(other[e125] * self[e43]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e315] * self[e4125]) + (other[e125] * self[e31]) + (other[e2] * self[e35]) + (other[e5] * self[e23]),
                (other[e235] * self[e12]) + (other[e125] * self[e4235]) + (other[e3] * self[e15]) + (other[e5] * self[e31]),
                (other[e235] * self[e4315]) + (other[e315] * self[e23]) + (other[e1] * self[e25]) + (other[e5] * self[e12]),
                -(other[e425] * self[e42]) - (other[e435] * self[e43]) - (other[e2] * self[e42]) - (other[e3] * self[e43]),
            ]) + (Simd32x4::from([self[e25], self[e3215], self[e3215], self[e45]]) * other.group1().zyz().with_w(other[e4]))
                + (Simd32x4::from([self[e3215], self[e35], self[e15], self[e1234]]) * other.group1().xxyw())
                - (Simd32x4::from([self[e45], self[e4125], self[e31], self[e31]]) * other.group2().xxx().with_w(other[e431]))
                - (Simd32x4::from([self[e25], self[e3215], self[e3215], other[e415]]) * other.group3().zyz().with_w(self[e41]))
                - (Simd32x4::from([self[e4315], self[e23], self[e45], self[e12]]) * other.group2().zzz().with_w(other[e412]))
                - (Simd32x4::from([self[e3215], self[e35], self[e15], self[e4125]]) * other.group3().xxy().with_w(other[e412]))
                - (self.group1().zw().with_zw(self[e4235], self[e4315]) * other.group2().yyy().with_w(other[e431]))
                - (other.group1().yzx() * self.group2().zxy()).with_w(other[e423] * self[e23])
                - (other.group1().www() * self.group2().xyz()).with_w(other[e423] * self[e4235])
                - (other.group3().www() * self.group3().xyz()).with_w(other[e1] * self[e41]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([other[e2] * self[e12], other[e3] * self[e23], other[e1] * self[e31], other[e5] * self[e45] * -1.0])
                + (Simd32x4::from([self[e45], self[e4125], self[e4235], self[e15]]) * other.group1().xxy().with_w(other[e1]))
                + (Simd32x4::from([self[e4315], self[e45], self[e45], self[e25]]) * other.group1().zyz().with_w(other[e2]))
                + (self.group2().wwwz() * other.group2().xyz().with_w(other[e3]))
                + (other.group2().zx().with_zw(other[e5], self[e4125]) * self.group0().yzz().with_w(other[e125]))
                + (other.group3().ww().with_zw(other[e315], self[e4315]) * self.group0().xyx().with_w(other[e315]))
                + (other.group0().yzx() * self.group2().zxy()).with_w(other[e235] * self[e4235])
                - (Simd32x4::from([self[e25], self[e3215], self[e3215], self[e25]]) * other.group0().zyz().with_w(other[e425]))
                - (Simd32x4::from([self[e3215], self[e35], self[e15], self[e15]]) * other.group0().xxy().with_w(other[e415]))
                - (other.group1().yzxw() * self.group3().zxyw())
                - (other.group2().wwwy() * self.group2().xyz().with_w(self[e31]))
                - (self.group1().xyzx() * other.group1().www().with_w(other[e235]))
                - (self.group1().yzxz() * other.group3().zxy().with_w(other[e125]))
                - (self.group0().zxy() * other.group2().yzx()).with_w(other[e435] * self[e35]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       78        0
    //    simd3        1       16        0
    //    simd4       50       41        0
    // Totals...
    // yes simd       87      135        0
    //  no simd      239      290        0
    fn anti_sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            other.group0().yy().with_zw(other[scalar], other[e3215]) * self.group0().with_w(self[e1234]) * Simd32x4::from(-1.0),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(other[e3215] * self[e41]) - (other[scalar] * self[e23]),
                -(other[e3215] * self[e42]) - (other[scalar] * self[e31]),
                -(other[e3215] * self[e43]) - (other[scalar] * self[e12]),
                (other[e3215] * self[e1234]) + (other[scalar] * self[e45]),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([other[scalar] * self[e15] * -1.0, other[scalar] * self[e25] * -1.0, other[scalar] * self[e35] * -1.0, 0.0])
                + (Simd32x4::from(other[e3215]) * self.group3().xyz().with_w(self[e45]))
                - (other.group0().xx().with_zw(other[e3215], other[scalar]) * self.group1().xyz().with_w(self[e3215])),
            // e1, e2, e3, e4
            ((Simd32x3::from(other[e3215]) * self.group0()) + (Simd32x3::from(other[scalar]) * self.group3().xyz())).with_w(other[scalar] * self[e1234] * -1.0),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlatPoint> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       88        0
    //    simd3        5       25        0
    //    simd4       54       39        0
    // Totals...
    // yes simd       99      152        0
    //  no simd      271      319        0
    fn anti_sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([other[e321], other[e321], other[e321], 1.0])
                * self
                    .group0()
                    .with_w(-(other[e235] * self[e41]) - (other[e315] * self[e42]) - (other[e125] * self[e43]) - (other[e321] * self[e45])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e235] * self[e1234]) + (other[e125] * self[e42]),
                (other[e235] * self[e43]) + (other[e315] * self[e1234]),
                (other[e315] * self[e41]) + (other[e125] * self[e1234]),
                other[e125] * self[e43] * -1.0,
            ]) - (other.group0().yzxx() * self.group0().zxy().with_w(self[e41]))
                - (other.group0().www() * self.group3().xyz()).with_w(other[e315] * self[e42]),
            // e15, e25, e35, e1234
            ((Simd32x3::from([self[e31], self[e4235], self[e23]]) * other.group0().zzy()) + (Simd32x3::from([self[e4125], self[e12], self[e4315]]) * other.group0().yxx())
                - (Simd32x3::from(other[e235]) * Simd32x3::from([self[e45], self[e4125], self[e31]]))
                - (Simd32x3::from(other[e315]) * Simd32x3::from([self[e12], self[e45], self[e4235]]))
                - (Simd32x3::from(other[e125]) * Simd32x3::from([self[e4315], self[e23], self[e45]]))
                - (Simd32x3::from(other[e321]) * self.group2().xyz()))
            .with_w(other[e321] * self[e1234]),
            // e4235, e4315, e4125, e3215
            (other.group0().xyzy() * self.group2().www().with_w(self[e4315]))
                + Simd32x3::from(0.0).with_w((other[e125] * self[e4125]) - (other[e125] * self[e12]) - (other[e321] * self[e3215]))
                + (self.group0().yzx() * other.group0().zxy()).with_w(other[e235] * self[e4235])
                - (other.group0().wwwy() * self.group1().xyzy())
                - (self.group0().zxy() * other.group0().yzx()).with_w(other[e235] * self[e23]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlector> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56      108        0
    //    simd3        0       20        0
    //    simd4       70       53        0
    // Totals...
    // yes simd      126      181        0
    //  no simd      336      380        0
    fn anti_sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (other.group1().xyzz() * self.group2().www().with_w(self[e4125]))
                + (other.group0().ww().with_zw(other[e2], self[e4235]) * self.group0().xyx().with_w(other[e1]))
                + (other.group1().zx().with_zw(other[e321], self[e4315]) * self.group0().yzz().with_w(other[e2]))
                + Simd32x3::from(0.0).with_w((other[e5] * self[e1234]) - (other[e315] * self[e42]) - (other[e125] * self[e43]) - (other[e321] * self[e45]))
                - (self.group0().zxy() * other.group1().yzx()).with_w(other[e235] * self[e41]),
            // e23, e31, e12, e45
            Simd32x4::from([other[e3] * self[e4315] * -1.0, other[e2] * self[e45] * -1.0, other[e3] * self[e45] * -1.0, 0.0])
                + (other.group1().yzxw() * self.group3().zxy().with_w(self[e1234]))
                + (other.group0().zx().with_zw(other[e5], self[e31]) * self.group0().yzz().with_w(other[e2]))
                + (other.group1().ww().with_zw(other[e315], self[e23]) * self.group0().xyx().with_w(other[e1]))
                + (self.group2().www() * other.group0().xyz()).with_w(other[e3] * self[e12])
                - (Simd32x4::from([self[e45], self[e4125], self[e4235], other[e125]]) * other.group1().xxy().with_w(self[e43]))
                - (other.group0().yzxx() * self.group0().zxy().with_w(self[e41]))
                - (other.group0().www() * self.group3().xyz()).with_w(other[e315] * self[e42]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e125] * self[e31]) + (other[e2] * self[e35]) + (other[e5] * self[e23])
                    - (other[e321] * self[e15])
                    - (other[e1] * self[e3215])
                    - (other[e3] * self[e25])
                    - (other[e5] * self[e4235]),
                (other[e125] * self[e4235]) + (other[e3] * self[e15]) + (other[e5] * self[e31])
                    - (other[e321] * self[e25])
                    - (other[e1] * self[e35])
                    - (other[e2] * self[e3215])
                    - (other[e5] * self[e4315]),
                (other[e315] * self[e23]) + (other[e1] * self[e25]) + (other[e5] * self[e12])
                    - (other[e321] * self[e35])
                    - (other[e2] * self[e15])
                    - (other[e3] * self[e3215])
                    - (other[e5] * self[e4125]),
                0.0,
            ]) + (Simd32x4::from([self[e4125], self[e12], self[e4315], self[e1234]]) * other.group0().yxxw())
                - (Simd32x4::from([self[e45], self[e4125], self[e31], other[e1]]) * other.group0().xxx().with_w(self[e41]))
                - (Simd32x4::from([self[e4315], self[e23], self[e45], other[e3]]) * other.group0().zzz().with_w(self[e43]))
                - (self.group1().zw().with_zw(self[e4235], other[e2]) * other.group0().yyy().with_w(self[e42])),
            // e4235, e4315, e4125, e3215
            (other.group0().xyzz() * self.group2().www().with_w(self[e4125]))
                + (other.group1().yzxx() * self.group1().zxy().with_w(self[e15]))
                + (other.group0().zx().with_zw(other[e5], self[e4315]) * self.group0().yzz().with_w(other[e315]))
                + (other.group1().ww().with_zw(other[e315], self[e4235]) * self.group0().xyx().with_w(other[e235]))
                + Simd32x3::from(0.0).with_w((other[e2] * self[e25]) + (other[e3] * self[e35]) - (other[e321] * self[e3215]) - (other[e5] * self[e45]))
                - (other.group0().wwwy() * self.group1().xyzy())
                - (self.group1().yzxz() * other.group1().zxy().with_w(other[e125]))
                - (self.group0().zxy() * other.group0().yzx()).with_w(other[e235] * self[e23]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiLine> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       51      101        0
    //    simd3        0       16        0
    //    simd4       62       49        0
    // Totals...
    // yes simd      113      166        0
    //  no simd      299      345        0
    fn anti_sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                -(other[e23] * self[e1234]) - (other[e12] * self[e42]),
                -(other[e23] * self[e43]) - (other[e31] * self[e1234]),
                -(other[e31] * self[e41]) - (other[e12] * self[e1234]),
                (other[e31] * self[e31]) + (other[e12] * self[e12]) + (other[e15] * self[e41]) + (other[e25] * self[e42]) + (other[e35] * self[e43]),
            ]) + (other.group0().yzx() * self.group0().zxy()).with_w(other[e23] * self[e23]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e31] * self[e12]) + (other[e25] * self[e43]),
                (other[e12] * self[e23]) + (other[e35] * self[e41]),
                (other[e23] * self[e31]) + (other[e15] * self[e42]),
                -(other[e15] * self[e41]) - (other[e25] * self[e42]) - (other[e35] * self[e43]),
            ]) - (Simd32x4::from([self[e42], self[e1234], self[e1234], self[e4125]]) * other.group1().zyz().with_w(other[e12]))
                - (Simd32x4::from([self[e1234], self[e43], self[e41], self[e4315]]) * other.group1().xxy().with_w(other[e31]))
                - (other.group0().zxy() * self.group1().yzx()).with_w(other[e23] * self[e4235]),
            // e235, e315, e125, e5
            Simd32x4::from([
                other[e35] * self[e31] * -1.0,
                other[e35] * self[e4235] * -1.0,
                other[e25] * self[e23] * -1.0,
                (other[e25] * self[e31]) + (other[e35] * self[e12]),
            ]) + (Simd32x4::from([self[e45], self[e4125], self[e31], self[e25]]) * other.group1().xxx().with_w(other[e31]))
                + (Simd32x4::from([self[e4315], self[e23], self[e45], self[e23]]) * other.group1().zzz().with_w(other[e15]))
                + (self.group2().zxyx() * other.group0().yzx().with_w(other[e23]))
                + (self.group1().zw().with_zw(self[e4235], self[e35]) * other.group1().yyy().with_w(other[e12]))
                - (Simd32x4::from([self[e25], self[e3215], self[e3215], self[e4315]]) * other.group0().zyz().with_w(other[e25]))
                - (Simd32x4::from([self[e4125], self[e12], self[e4315], self[e4125]]) * other.group1().yxx().with_w(other[e35]))
                - (Simd32x4::from([self[e3215], self[e35], self[e15], self[e4235]]) * other.group0().xxy().with_w(other[e15])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e35] * self[e42]) - (other[e31] * self[e4125]) - (other[e25] * self[e43]),
                (other[e25] * self[e1234]) - (other[e12] * self[e4235]) - (other[e35] * self[e41]),
                (other[e35] * self[e1234]) - (other[e23] * self[e4315]) - (other[e15] * self[e42]),
                0.0,
            ]) + (Simd32x4::from([self[e45], self[e4125], self[e4235], self[e41]]) * other.group0().xxy().with_w(other[e23]))
                + (Simd32x4::from([self[e1234], self[e43], self[e41], self[e43]]) * other.group1().xxy().with_w(other[e12]))
                + (Simd32x4::from([self[e4315], self[e45], self[e45], self[e42]]) * other.group0().zyz().with_w(other[e31])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiMotor> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       52      105        0
    //    simd3        0       24        0
    //    simd4       70       49        0
    // Totals...
    // yes simd      122      178        0
    //  no simd      332      373        0
    fn anti_sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                -(other[e23] * self[e1234]) - (other[e12] * self[e42]),
                -(other[e23] * self[e43]) - (other[e31] * self[e1234]),
                -(other[e12] * self[e1234]) - (other[scalar] * self[e43]),
                (other[e23] * self[e23]) + (other[e31] * self[e31]) + (other[e12] * self[e12]) + (other[e25] * self[e42]) + (other[e35] * self[e43]),
            ]) + (self.group0().zxy() * other.group0().yzx()).with_w(other[e15] * self[e41])
                - (self.group0().xyx() * other.group0().wwy()).with_w(other[e3215] * self[e1234]),
            // e415, e425, e435, e321
            Simd32x3::from(0.0).with_w(other[e12] * self[e4125] * -1.0)
                + (self.group0().zxy() * other.group1().yzx()).with_w(other[scalar] * self[e45])
                + (other.group0().yzx() * self.group1().zxy()).with_w(other[e3215] * self[e1234])
                - (other.group0().wwwx() * self.group1().xyz().with_w(self[e4235]))
                - (other.group1().zxwy() * self.group0().yzz().with_w(self[e42]))
                - (other.group1().wwyx() * self.group0().xyx().with_w(self[e41]))
                - (other.group0().zxy() * self.group1().yzx()).with_w(other[e35] * self[e43])
                - (self.group2().www() * other.group1().xyz()).with_w(other[e31] * self[e4315]),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(other[e35] * self[e31]) - (other[e3215] * self[e23]),
                -(other[e35] * self[e4235]) - (other[e3215] * self[e31]),
                -(other[e25] * self[e23]) - (other[e3215] * self[e12]),
                (other[e35] * self[e12]) + (other[e3215] * self[e45]),
            ]) + (Simd32x4::from([self[e45], self[e4125], self[e31], self[e25]]) * other.group1().xxx().with_w(other[e31]))
                + (Simd32x4::from([self[e4315], self[e23], self[e45], self[e23]]) * other.group1().zzzx())
                + (other.group0().yzxx() * self.group2().zxyx())
                + (other.group1().wwwy() * self.group3().xyz().with_w(self[e31]))
                + (self.group1().zw().with_zw(self[e4235], self[e35]) * other.group1().yyy().with_w(other[e12]))
                - (Simd32x4::from([self[e25], self[e3215], self[e3215], self[e4235]]) * other.group0().zyz().with_w(other[e15]))
                - (Simd32x4::from([self[e4125], self[e12], self[e4315], self[e4125]]) * other.group1().yxxz())
                - (Simd32x4::from([self[e3215], self[e35], self[e15], self[e3215]]) * other.group0().xxyw())
                - (other.group0().www() * self.group2().xyz()).with_w(other[e25] * self[e4315]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e12] * self[e4315]) + (other[scalar] * self[e4235]) + (other[e15] * self[e1234]) - (other[e31] * self[e4125]),
                (other[e31] * self[e45]) + (other[scalar] * self[e4315]) + (other[e25] * self[e1234]) - (other[e12] * self[e4235]),
                (other[e12] * self[e45]) + (other[scalar] * self[e4125]) + (other[e35] * self[e1234]) - (other[e23] * self[e4315]),
                0.0,
            ]) + (Simd32x4::from([self[e45], self[e4125], self[e4235], other[e12]]) * other.group0().xxy().with_w(self[e43]))
                + (self.group0().xyx() * other.group1().wwy()).with_w(other[e23] * self[e41])
                + (self.group0().yzz() * other.group1().zxw()).with_w(other[e31] * self[e42])
                - (self.group0().zxy() * other.group1().yzx()).with_w(other[scalar] * self[e1234]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiPlane> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       96        0
    //    simd3        0       20        0
    //    simd4       58       41        0
    // Totals...
    // yes simd       98      157        0
    //  no simd      272      320        0
    fn anti_sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                other[e2] * self[e43] * -1.0,
                other[e3] * self[e41] * -1.0,
                other[e1] * self[e42] * -1.0,
                (other[e3] * self[e4125]) + (other[e5] * self[e1234]),
            ]) + (other.group0().xyzy() * self.group2().www().with_w(self[e4315]))
                + (self.group0().yzx() * other.group0().zxy()).with_w(other[e1] * self[e4235]),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(other[e1] * self[e45]) - (other[e3] * self[e4315]),
                -(other[e1] * self[e4125]) - (other[e2] * self[e45]),
                -(other[e2] * self[e4235]) - (other[e3] * self[e45]),
                (other[e3] * self[e12]) + (other[e5] * self[e1234]),
            ]) + (other.group0().yzxy() * self.group3().zxy().with_w(self[e31]))
                + (self.group0() * other.group0().www()).with_w(other[e1] * self[e23]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e2] * self[e35]) + (other[e5] * self[e23]),
                (other[e3] * self[e15]) + (other[e5] * self[e31]),
                (other[e1] * self[e25]) + (other[e5] * self[e12]),
                0.0,
            ]) - (Simd32x4::from([self[e25], self[e3215], self[e3215], other[e2]]) * other.group0().zyz().with_w(self[e42]))
                - (Simd32x4::from([self[e3215], self[e35], self[e15], other[e1]]) * other.group0().xxy().with_w(self[e41]))
                - (other.group0().www() * self.group3().xyz()).with_w(other[e3] * self[e43]),
            // e4235, e4315, e4125, e3215
            (other.group0().yzxy() * self.group1().zxy().with_w(self[e25]))
                + Simd32x3::from(0.0).with_w(other[e3] * self[e35])
                + (self.group0() * other.group0().www()).with_w(other[e1] * self[e15])
                - (other.group0().zxyw() * self.group1().yzxw()),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiScalar> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       33       60        0
    //    simd3        0       17        0
    //    simd4       44       35        0
    // Totals...
    // yes simd       77      112        0
    //  no simd      209      251        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(other[e12345]) * self.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other[e12345]) * self.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(other[e12345]) * self.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e12345]) * self.group3(),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       70      133        0
    //    simd3        0       26        0
    //    simd4       72       49        0
    // Totals...
    // yes simd      142      208        0
    //  no simd      358      407        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e423] * self[e45])
                    + (other[e412] * self[e31])
                    + (other[e412] * self[e4315])
                    + (other[e415] * self[e1234])
                    + (other[e435] * self[e42])
                    + (other[e321] * self[e41]),
                (other[e423] * self[e12])
                    + (other[e423] * self[e4125])
                    + (other[e431] * self[e45])
                    + (other[e415] * self[e43])
                    + (other[e425] * self[e1234])
                    + (other[e321] * self[e42]),
                (other[e431] * self[e23])
                    + (other[e431] * self[e4235])
                    + (other[e412] * self[e45])
                    + (other[e425] * self[e41])
                    + (other[e435] * self[e1234])
                    + (other[e321] * self[e43]),
                -(other[e415] * self[e23])
                    - (other[e425] * self[e31])
                    - (other[e435] * self[e12])
                    - (other[e321] * self[e45])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]) - (other.group0().yzx() * self.group1().zxy()).with_w(other[e423] * self[e15])
                - (other.group0().yzx() * self.group3().zxy()).with_w(other[e431] * self[e25])
                - (self.group0().zxy() * other.group1().yzx()).with_w(other[e412] * self[e35]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e435] * self[e31]) + (other[e125] * self[e42]),
                (other[e415] * self[e12]) + (other[e315] * self[e1234]),
                (other[e425] * self[e23]) + (other[e125] * self[e1234]),
                -(other[e425] * self[e4315]) - (other[e435] * self[e4125]),
            ]) + (Simd32x4::from([self[e25], self[e3215], self[e3215], self[e25]]) * other.group0().zyz().with_w(other[e431]))
                + (Simd32x4::from([self[e1234], self[e43], self[e41], self[e35]]) * other.group2().xxy().with_w(other[e412]))
                + (Simd32x4::from([self[e3215], self[e35], self[e15], self[e15]]) * other.group0().xxy().with_w(other[e423]))
                - (other.group1().wwwx() * self.group3().xyzx())
                - (other.group0().yzx() * self.group2().zxy()).with_w(other[e235] * self[e41])
                - (other.group2().yzx() * self.group0().zxy()).with_w(other[e315] * self[e42])
                - (other.group1().yzx() * self.group1().zxy()).with_w(other[e125] * self[e43]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e415] * self[e3215]) + (other[e435] * self[e25]) + (other[e125] * self[e31]),
                (other[e415] * self[e35]) + (other[e425] * self[e3215]) + (other[e125] * self[e4235]),
                (other[e425] * self[e15]) + (other[e435] * self[e3215]) + (other[e315] * self[e23]),
                -(other[e412] * self[e4125]) - (other[e415] * self[e41]) - (other[e425] * self[e42]) - (other[e435] * self[e43]),
            ]) + (Simd32x4::from([self[e4125], self[e12], self[e4315], self[e1234]]) * other.group2().yxx().with_w(other[e321]))
                - (Simd32x4::from([self[e45], self[e4125], self[e31], self[e23]]) * other.group2().xxx().with_w(other[e423]))
                - (Simd32x4::from([self[e4315], self[e23], self[e45], self[e31]]) * other.group2().zzz().with_w(other[e431]))
                - (self.group1().zw().with_zw(self[e4235], self[e4235]) * other.group2().yyy().with_w(other[e423]))
                - (other.group1().yzx() * self.group2().zxy()).with_w(other[e431] * self[e4315])
                - (other.group1().www() * self.group2().xyz()).with_w(other[e412] * self[e12]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e415] * self[e45]) + (other[e435] * self[e4315]),
                (other[e415] * self[e4125]) + (other[e425] * self[e45]),
                (other[e425] * self[e4235]) + (other[e435] * self[e45]),
                -(other[e435] * self[e35]) - (other[e321] * self[e3215]),
            ]) + (Simd32x4::from([self[e42], self[e1234], self[e1234], self[e4125]]) * other.group2().zyz().with_w(other[e125]))
                + (Simd32x4::from([self[e1234], self[e43], self[e41], self[e4315]]) * other.group2().xxy().with_w(other[e315]))
                + (other.group0().yzx() * self.group2().zxy()).with_w(other[e235] * self[e4235])
                - (Simd32x4::from([self[e25], self[e3215], self[e3215], self[e31]]) * other.group0().zyz().with_w(other[e315]))
                - (Simd32x4::from([self[e3215], self[e35], self[e15], self[e23]]) * other.group0().xxy().with_w(other[e235]))
                - (other.group1().yzxx() * self.group3().zxy().with_w(self[e15]))
                - (other.group1().wwwy() * self.group1().xyz().with_w(self[e25]))
                - (other.group2().yzx() * self.group0().zxy()).with_w(other[e125] * self[e12]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       73      137        0
    //    simd3        0       27        0
    //    simd4       75       51        0
    // Totals...
    // yes simd      148      215        0
    //  no simd      373      422        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e423] * self[e45])
                    + (other[e412] * self[e31])
                    + (other[e412] * self[e4315])
                    + (other[e415] * self[e1234])
                    + (other[e435] * self[e42])
                    + (other[e321] * self[e41])
                    + (other[e12345] * self[e41]),
                (other[e423] * self[e12])
                    + (other[e423] * self[e4125])
                    + (other[e431] * self[e45])
                    + (other[e415] * self[e43])
                    + (other[e425] * self[e1234])
                    + (other[e321] * self[e42])
                    + (other[e12345] * self[e42]),
                (other[e431] * self[e23])
                    + (other[e431] * self[e4235])
                    + (other[e412] * self[e45])
                    + (other[e425] * self[e41])
                    + (other[e435] * self[e1234])
                    + (other[e321] * self[e43])
                    + (other[e12345] * self[e43]),
                -(other[e415] * self[e23])
                    - (other[e425] * self[e31])
                    - (other[e435] * self[e12])
                    - (other[e321] * self[e45])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]) - (other.group0().yzx() * self.group1().zxy()).with_w(other[e423] * self[e15])
                - (other.group0().yzx() * self.group3().zxy()).with_w(other[e431] * self[e25])
                - (self.group0().zxy() * other.group1().yzx()).with_w(other[e412] * self[e35]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e235] * self[e1234]) + (other[e12345] * self[e23]),
                (other[e315] * self[e1234]) + (other[e12345] * self[e31]),
                (other[e125] * self[e1234]) + (other[e12345] * self[e12]),
                -(other[e425] * self[e4315]) - (other[e435] * self[e4125]),
            ]) + (Simd32x4::from([self[e25], self[e3215], self[e3215], self[e25]]) * other.group0().zyz().with_w(other[e431]))
                + (Simd32x4::from([self[e3215], self[e35], self[e15], self[e15]]) * other.group0().xxy().with_w(other[e423]))
                + (self.group1().yzxw() * other.group1().zxy().with_w(other[e12345]))
                + (self.group0().yzx() * other.group2().zxy()).with_w(other[e412] * self[e35])
                - (other.group1().wwwx() * self.group3().xyzx())
                - (other.group2().yzxy() * self.group0().zxy().with_w(self[e42]))
                - (other.group0().yzx() * self.group2().zxy()).with_w(other[e235] * self[e41])
                - (other.group1().yzx() * self.group1().zxy()).with_w(other[e125] * self[e43]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e315] * self[e4125]) + (other[e125] * self[e31]) + (other[e12345] * self[e15]),
                (other[e235] * self[e12]) + (other[e125] * self[e4235]) + (other[e12345] * self[e25]),
                (other[e235] * self[e4315]) + (other[e315] * self[e23]) + (other[e12345] * self[e35]),
                -(other[e412] * self[e4125]) - (other[e415] * self[e41]) - (other[e425] * self[e42]) - (other[e435] * self[e43]),
            ]) + (Simd32x4::from([self[e25], self[e3215], self[e3215], self[e1234]]) * other.group1().zyz().with_w(other[e12345]))
                + (Simd32x4::from([self[e3215], self[e35], self[e15], self[e1234]]) * other.group1().xxyw())
                - (Simd32x4::from([self[e45], self[e4125], self[e31], self[e31]]) * other.group2().xxx().with_w(other[e431]))
                - (Simd32x4::from([self[e4315], self[e23], self[e45], self[e12]]) * other.group2().zzz().with_w(other[e412]))
                - (self.group1().zw().with_zw(self[e4235], self[e4315]) * other.group2().yyy().with_w(other[e431]))
                - (other.group1().yzx() * self.group2().zxy()).with_w(other[e423] * self[e23])
                - (other.group1().www() * self.group2().xyz()).with_w(other[e423] * self[e4235]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e235] * self[e1234]) + (other[e12345] * self[e4235]),
                (other[e315] * self[e1234]) + (other[e12345] * self[e4315]),
                (other[e125] * self[e1234]) + (other[e12345] * self[e4125]),
                -(other[e315] * self[e31]) - (other[e125] * self[e12]),
            ]) + (Simd32x4::from([self[e45], self[e4125], self[e4235], self[e4125]]) * other.group1().xxy().with_w(other[e125]))
                + (Simd32x4::from([self[e4315], self[e45], self[e45], self[e3215]]) * other.group1().zyz().with_w(other[e12345]))
                + (other.group0().yzx() * self.group2().zxy()).with_w(other[e235] * self[e4235])
                + (self.group0().yzx() * other.group2().zxy()).with_w(other[e315] * self[e4315])
                - (Simd32x4::from([self[e25], self[e3215], self[e3215], self[e25]]) * other.group0().zyz().with_w(other[e425]))
                - (Simd32x4::from([self[e3215], self[e35], self[e15], self[e15]]) * other.group0().xxy().with_w(other[e415]))
                - (other.group1().yzxw() * self.group3().zxyw())
                - (self.group1().xyzx() * other.group1().www().with_w(other[e235]))
                - (self.group0().zxy() * other.group2().yzx()).with_w(other[e435] * self[e35]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       58      111        0
    //    simd3        0       22        0
    //    simd4       75       57        0
    // Totals...
    // yes simd      133      190        0
    //  no simd      358      405        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                -(other[e43] * self[e31]) - (other[e43] * self[e4315]) - (other[e23] * self[e1234]) - (other[e12] * self[e42]),
                -(other[e41] * self[e4125]) - (other[e42] * self[e45]) - (other[e23] * self[e43]) - (other[e31] * self[e1234]),
                -(other[e42] * self[e4235]) - (other[e43] * self[e45]) - (other[e31] * self[e41]) - (other[e12] * self[e1234]),
                (other[e23] * self[e23]) + (other[e31] * self[e31]) + (other[e12] * self[e12]) + (other[e25] * self[e42]) + (other[e35] * self[e43]),
            ]) + (other.group0().yzx() * self.group1().zxy()).with_w(other[e41] * self[e15])
                + (other.group0().yzx() * self.group3().zxy()).with_w(other[e42] * self[e25])
                + (self.group0().xxy() * other.group1().wzx()).with_w(other[e43] * self[e35])
                + (self.group0().zyz() * other.group1().yww()).with_w(other[e15] * self[e41])
                - (self.group1().wzxw() * other.group0().xxy().with_w(other[e45])),
            // e415, e425, e435, e321
            (self.group2().zxyx() * other.group0().yzx().with_w(other[e41]))
                + (other.group2().yzx() * self.group0().zxy()).with_w(other[e42] * self[e25])
                + (other.group1().yzx() * self.group1().zxy()).with_w(other[e43] * self[e35])
                - (Simd32x4::from([self[e42], self[e1234], self[e1234], self[e4235]]) * other.group2().zyz().with_w(other[e23]))
                - (Simd32x4::from([self[e25], self[e3215], self[e3215], self[e42]]) * other.group0().zyz().with_w(other[e25]))
                - (Simd32x4::from([self[e1234], self[e43], self[e41], self[e43]]) * other.group2().xxy().with_w(other[e35]))
                - (Simd32x4::from([self[e3215], self[e35], self[e15], self[e41]]) * other.group0().xxy().with_w(other[e15]))
                - (other.group1().zxyy() * self.group1().yzx().with_w(self[e4315]))
                - (other.group1().wwwz() * self.group3().xyzz()),
            // e235, e315, e125, e5
            Simd32x4::from([
                other[e45] * self[e15] * -1.0,
                other[e45] * self[e25] * -1.0,
                other[e45] * self[e35] * -1.0,
                (other[e31] * self[e25]) + (other[e12] * self[e35]),
            ]) + (Simd32x4::from(other[e15]) * Simd32x4::from([self[e45], self[e4125], self[e31], self[e23]]))
                + (Simd32x4::from(other[e25]) * self.group1().zw().with_zw(self[e4235], self[e31]))
                + (Simd32x4::from(other[e35]) * Simd32x4::from([self[e4315], self[e23], self[e45], self[e12]]))
                + (other.group1().yzxx() * self.group2().zxyx())
                - (Simd32x4::from([self[e31], self[e4235], self[e23], self[e4315]]) * other.group2().zzy().with_w(other[e25]))
                - (Simd32x4::from([self[e25], self[e3215], self[e3215], self[e3215]]) * other.group1().zyzw())
                - (Simd32x4::from([self[e4125], self[e12], self[e4315], self[e4235]]) * other.group2().yxx().with_w(other[e15]))
                - (Simd32x4::from([self[e3215], self[e35], self[e15], self[e4125]]) * other.group1().xxy().with_w(other[e35])),
            // e1, e2, e3, e4
            Simd32x4::from([
                -(other[e41] * self[e3215]) - (other[e43] * self[e25]) - (other[e31] * self[e4125]) - (other[e25] * self[e43]),
                -(other[e41] * self[e35]) - (other[e42] * self[e3215]) - (other[e12] * self[e4235]) - (other[e35] * self[e41]),
                -(other[e42] * self[e15]) - (other[e43] * self[e3215]) - (other[e23] * self[e4315]) - (other[e15] * self[e42]),
                (other[e23] * self[e41]) + (other[e31] * self[e42]) + (other[e12] * self[e43]) + (other[e45] * self[e1234]),
            ]) + (Simd32x4::from([self[e42], self[e1234], self[e1234], self[e31]]) * other.group2().zyz().with_w(other[e42]))
                + (Simd32x4::from([self[e45], self[e4125], self[e4235], self[e4315]]) * other.group1().xxy().with_w(other[e42]))
                + (Simd32x4::from([self[e1234], self[e43], self[e41], self[e4235]]) * other.group2().xxy().with_w(other[e41]))
                + (Simd32x4::from([self[e4315], self[e45], self[e45], self[e12]]) * other.group1().zyz().with_w(other[e43]))
                + (other.group0().yzx() * self.group2().zxy()).with_w(other[e41] * self[e23])
                + (other.group1().www() * self.group1().xyz()).with_w(other[e43] * self[e4125]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       65      122        0
    //    simd3        0       29        0
    //    simd4       92       67        0
    // Totals...
    // yes simd      157      218        0
    //  no simd      433      477        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                -(other[e23] * self[e1234]) - (other[e12] * self[e42]) - (other[e1234] * self[e23]) - (other[e1234] * self[e4235]) - (other[e4315] * self[e43]),
                -(other[e23] * self[e43]) - (other[e31] * self[e1234]) - (other[e1234] * self[e31]) - (other[e1234] * self[e4315]) - (other[e4125] * self[e41]),
                -(other[e31] * self[e41]) - (other[e12] * self[e1234]) - (other[e1234] * self[e12]) - (other[e1234] * self[e4125]) - (other[e4235] * self[e42]),
                (other[e23] * self[e23])
                    + (other[e31] * self[e31])
                    + (other[e12] * self[e12])
                    + (other[e4235] * self[e4235])
                    + (other[e4315] * self[e4315])
                    + (other[e4125] * self[e4125]),
            ]) + (Simd32x4::from([other[e31], other[e4235], other[e45], other[e25]]) * self.group0().zzz().with_w(self[e42]))
                + (Simd32x4::from([other[e4125], other[e45], other[e23], other[e15]]) * self.group0().yyy().with_w(self[e41]))
                + (other.group1().wz().with_zw(other[e4315], self[e35]) * self.group0().xxx().with_w(other[e43]))
                + (other.group0().yzx() * self.group1().zxy()).with_w(other[e41] * self[e15])
                + (other.group0().yzx() * self.group3().zxy()).with_w(other[e42] * self[e25])
                + (self.group2().www() * other.group3().xyz()).with_w(other[e35] * self[e43])
                - (Simd32x4::from([self[e31], self[e4125], self[e4235], self[e3215]]) * other.group0().zxy().with_w(other[e1234]))
                - (Simd32x4::from([self[e4315], self[e45], self[e45], self[e1234]]) * other.group0().zyz().with_w(other[e3215]))
                - (self.group1().wzxw() * other.group0().xxy().with_w(other[e45])),
            // e415, e425, e435, e321
            (other.group3().yzxw() * self.group3().zxy().with_w(self[e1234]))
                + (self.group2().zxyx() * other.group0().yzx().with_w(other[e41]))
                + (self.group0().zxy() * other.group2().yzx()).with_w(other[e42] * self[e25])
                + (other.group1().yzx() * self.group1().zxy()).with_w(other[e43] * self[e35])
                - (Simd32x4::from([self[e45], self[e4125], self[e4235], self[e31]]) * other.group3().xxyy())
                - (Simd32x4::from([self[e25], self[e3215], self[e3215], other[e25]]) * other.group0().zyz().with_w(self[e42]))
                - (Simd32x4::from([self[e4315], self[e45], self[e45], self[e12]]) * other.group3().zyzz())
                - (Simd32x4::from([self[e3215], self[e35], self[e15], other[e15]]) * other.group0().xxy().with_w(self[e41]))
                - (other.group2() * self.group2().www().with_w(self[e3215]))
                - (other.group1().zxyy() * self.group1().yzx().with_w(self[e4315]))
                - (other.group1().wwwz() * self.group3().xyzz())
                - (other.group2().zx().with_zw(other[e3215], self[e4235]) * self.group0().yzz().with_w(other[e23]))
                - (other.group3().ww().with_zw(other[e25], other[e35]) * self.group0().xyx().with_w(self[e43]))
                - (other.group2().www() * self.group2().xyz()).with_w(other[e4235] * self[e23]),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(other[e35] * self[e31]) - (other[e4235] * self[e3215]) - (other[e4125] * self[e25]) - (other[e3215] * self[e23]),
                -(other[e35] * self[e4235]) - (other[e4235] * self[e35]) - (other[e4315] * self[e3215]) - (other[e3215] * self[e31]),
                -(other[e25] * self[e23]) - (other[e4315] * self[e15]) - (other[e4125] * self[e3215]) - (other[e3215] * self[e12]),
                (other[e4235] * self[e15]) + (other[e4315] * self[e25]) + (other[e4125] * self[e35]) + (other[e3215] * self[e45]),
            ]) + (Simd32x4::from([self[e45], self[e4125], self[e31], self[e25]]) * other.group2().xxx().with_w(other[e31]))
                + (Simd32x4::from([self[e4315], self[e23], self[e45], self[e23]]) * other.group2().zzzx())
                + (other.group1().yzxx() * self.group2().zxyx())
                + (self.group1().zw().with_zw(self[e4235], self[e35]) * other.group2().yyy().with_w(other[e12]))
                + (other.group3().yzx() * self.group2().zxy()).with_w(other[e25] * self[e31])
                + (other.group3().www() * self.group3().xyz()).with_w(other[e35] * self[e12])
                - (Simd32x4::from([self[e25], self[e3215], self[e3215], self[e4235]]) * other.group1().zyz().with_w(other[e15]))
                - (Simd32x4::from([self[e4125], self[e12], self[e4315], self[e4125]]) * other.group2().yxxz())
                - (Simd32x4::from([self[e3215], self[e35], self[e15], self[e3215]]) * other.group1().xxyw())
                - (other.group1().www() * self.group2().xyz()).with_w(other[e25] * self[e4315]),
            // e1, e2, e3, e4
            Simd32x4::from([
                -(other[e1234] * self[e15]) - (other[e4315] * self[e12]),
                -(other[e1234] * self[e25]) - (other[e4125] * self[e23]),
                -(other[e1234] * self[e35]) - (other[e4235] * self[e31]),
                (other[e12] * self[e43]) + (other[e45] * self[e1234]),
            ]) + (Simd32x4::from([self[e45], self[e4125], self[e4235], self[e4315]]) * other.group1().xxy().with_w(other[e42]))
                + (Simd32x4::from([self[e4315], self[e45], self[e45], self[e12]]) * other.group1().zyz().with_w(other[e43]))
                + (other.group2().zx().with_zw(other[e3215], self[e31]) * self.group0().yzz().with_w(other[e42]))
                + (other.group3().ww().with_zw(other[e25], self[e4235]) * self.group0().xyx().with_w(other[e41]))
                + (other.group0().yzx() * self.group2().zxy()).with_w(other[e41] * self[e23])
                + (other.group1().www() * self.group1().xyz()).with_w(other[e43] * self[e4125])
                + (other.group3().zxy() * self.group1().yzx()).with_w(other[e31] * self[e42])
                + (self.group2().www() * other.group2().xyz()).with_w(other[e23] * self[e41])
                - (Simd32x4::from([self[e25], self[e3215], self[e3215], other[e4315]]) * other.group0().zyz().with_w(self[e42]))
                - (Simd32x4::from([self[e3215], self[e35], self[e15], other[e4235]]) * other.group0().xxy().with_w(self[e41]))
                - (self.group0().zxy() * other.group2().yzx()).with_w(other[e4125] * self[e43])
                - (other.group1().yzx() * self.group3().zxy()).with_w(other[e1234] * self[e45]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       75        0
    //    simd3        2       19        0
    //    simd4       50       39        0
    // Totals...
    // yes simd       84      133        0
    //  no simd      238      288        0
    fn anti_sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            other.group0().yy().with_zw(other[e12345], other[e5]) * self.group0().with_w(self[e1234]),
            // e23, e31, e12, e45
            (Simd32x4::from(other[e5]) * self.group0().with_w(self[e1234])) + (Simd32x4::from(other[e12345]) * self.group1()),
            // e15, e25, e35, e1234
            ((Simd32x3::from(other[e5]) * self.group1().xyz()) + (Simd32x3::from(other[e12345]) * self.group2().xyz()) - (Simd32x3::from(other[e5]) * self.group3().xyz()))
                .with_w(self[e1234] * other[e12345]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e4235] * other[e12345], self[e4315] * other[e12345], self[e4125] * other[e12345], self[e45] * other[e5] * -1.0])
                + (other.group0().xx().with_zw(other[e5], other[e12345]) * self.group0().with_w(self[e3215])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       35       72        0
    //    simd3        3       18        0
    //    simd4       57       47        0
    // Totals...
    // yes simd       95      137        0
    //  no simd      272      314        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([other[e45], other[e45], other[e45], 1.0])
                * self
                    .group0()
                    .with_w((self[e41] * other[e15]) + (self[e42] * other[e25]) + (self[e43] * other[e35]) - (self[e45] * other[e45])),
            // e415, e425, e435, e321
            Simd32x4::from([self[e43] * other[e25], self[e41] * other[e35], self[e42] * other[e15], 0.0])
                - (other.group0().xyzy() * self.group2().www().with_w(self[e42]))
                - (other.group0().zxyx() * self.group0().yzx().with_w(self[e41]))
                - (other.group0().wwwz() * self.group3().xyz().with_w(self[e43])),
            // e235, e315, e125, e5
            (self.group1().zxyx() * other.group0().yzxx())
                + (self.group1().wwwy() * other.group0().xyzy())
                + (other.group0().zxyz() * self.group3().yzx().with_w(self[e12]))
                + Simd32x3::from(0.0).with_w(self[e3215] * other[e45] * -1.0)
                - (self.group3().zxyz() * other.group0().yzxz())
                - (other.group0().zxyx() * self.group1().yzx().with_w(self[e4235]))
                - (other.group0().wwwy() * self.group2().xyz().with_w(self[e4315])),
            // e1, e2, e3, e4
            ((Simd32x3::from(self[e1234]) * other.group0().xyz()) + (Simd32x3::from(other[e45]) * self.group1().xyz()) + (self.group0().yzx() * other.group0().zxy())
                - (self.group0().zxy() * other.group0().yzx()))
            .with_w(self[e1234] * other[e45]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       48       98        0
    //    simd3        0       21        0
    //    simd4       71       53        0
    // Totals...
    // yes simd      119      172        0
    //  no simd      332      373        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (other.group0().ww().with_zw(other[e4315], other[e15]) * self.group0().xyx().with_w(self[e41]))
                + (other.group1().zx().with_zw(other[e45], other[e25]) * self.group0().yzz().with_w(self[e42]))
                + Simd32x3::from(0.0).with_w((self[e4235] * other[e4235]) + (self[e4315] * other[e4315]) + (self[e4125] * other[e4125]) - (self[e1234] * other[e3215]))
                + (self.group2().www() * other.group1().xyz()).with_w(self[e43] * other[e35])
                - (self.group0().zxy() * other.group1().yzx()).with_w(self[e45] * other[e45]),
            // e415, e425, e435, e321
            Simd32x4::from([self[e4125] * other[e4315], self[e4235] * other[e4125], self[e4315] * other[e4235], 0.0])
                + (self.group0().zxy() * other.group0().yzx()).with_w(self[e1234] * other[e3215])
                - (other.group0().zx().with_zw(other[e3215], other[e25]) * self.group0().yzz().with_w(self[e42]))
                - (other.group0().ww().with_zw(other[e4315], other[e4315]) * self.group3().xyx().with_w(self[e31]))
                - (other.group1().zx().with_zw(other[e45], other[e4125]) * self.group3().yzz().with_w(self[e12]))
                - (other.group1().ww().with_zw(other[e25], other[e15]) * self.group0().xyx().with_w(self[e41]))
                - (self.group1().www() * other.group1().xyz()).with_w(self[e43] * other[e35])
                - (self.group2().www() * other.group0().xyz()).with_w(self[e23] * other[e4235]),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e4125] * other[e25]) - (self[e3215] * other[e4235]),
                -(self[e4235] * other[e35]) - (self[e3215] * other[e4315]),
                -(self[e4315] * other[e15]) - (self[e3215] * other[e4125]),
                (self[e25] * other[e4315]) + (self[e35] * other[e4125]),
            ]) + (self.group1().zxyx() * other.group0().yzxx())
                + (self.group1().wwwy() * other.group0().xyzy())
                + (other.group0().zx().with_zw(other[e3215], other[e4235]) * self.group3().yzz().with_w(self[e15]))
                + (other.group1().ww().with_zw(other[e25], other[e3215]) * self.group3().xyx().with_w(self[e45]))
                + (self.group2().zxy() * other.group1().yzx()).with_w(self[e12] * other[e35])
                - (other.group0().zx().with_zw(other[e3215], other[e25]) * self.group1().yzz().with_w(self[e4315]))
                - (other.group0().ww().with_zw(other[e4315], other[e35]) * self.group2().xyx().with_w(self[e4125]))
                - (other.group1().zx().with_zw(other[e45], other[e45]) * self.group2().yzz().with_w(self[e3215]))
                - (other.group1().ww().with_zw(other[e25], other[e15]) * self.group1().xyx().with_w(self[e4235])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e42] * other[e35]) + (self[e23] * other[e45]) + (self[e31] * other[e4125]) + (self[e1234] * other[e15]),
                (self[e43] * other[e15]) + (self[e31] * other[e45]) + (self[e12] * other[e4235]) + (self[e1234] * other[e25]),
                (self[e43] * other[e3215]) + (self[e23] * other[e4315]) + (self[e12] * other[e45]) + (self[e1234] * other[e35]),
                self[e43] * other[e4125] * -1.0,
            ]) + (other.group1().ww().with_zw(other[e25], other[e45]) * self.group0().xyx().with_w(self[e1234]))
                - (other.group1().yzxy() * self.group1().zxy().with_w(self[e42]))
                - (self.group0().zxy() * other.group0().yzx()).with_w(self[e41] * other[e4235]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       63      122        0
    //    simd3        0       23        0
    //    simd4       59       39        0
    // Totals...
    // yes simd      122      184        0
    //  no simd      299      347        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e42] * other[e435]) + (self[e1234] * other[e415]),
                (self[e43] * other[e415]) + (self[e1234] * other[e425]),
                (self[e41] * other[e425]) + (self[e1234] * other[e435]),
                -(self[e42] * other[e315]) - (self[e43] * other[e125]) - (self[e23] * other[e415]) - (self[e31] * other[e425]) - (self[e12] * other[e435]),
            ]) - (self.group0().zxy() * other.group0().yzx()).with_w(self[e41] * other[e235]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e42] * other[e125]) + (self[e31] * other[e435]) + (self[e1234] * other[e235]),
                (self[e43] * other[e235]) + (self[e12] * other[e415]) + (self[e1234] * other[e315]),
                (self[e41] * other[e315]) + (self[e23] * other[e425]) + (self[e1234] * other[e125]),
                -(self[e43] * other[e125]) - (self[e4235] * other[e415]) - (self[e4315] * other[e425]) - (self[e4125] * other[e435]),
            ]) - (self.group0().zxy() * other.group1().yzx()).with_w(self[e41] * other[e235])
                - (other.group0().yzx() * self.group1().zxy()).with_w(self[e42] * other[e315]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e31] * other[e125]) + (self[e25] * other[e435]) + (self[e4125] * other[e315]) + (self[e3215] * other[e415]) - (self[e4315] * other[e125]),
                (self[e12] * other[e235]) + (self[e35] * other[e415]) + (self[e4235] * other[e125]) + (self[e3215] * other[e425]) - (self[e23] * other[e125]),
                (self[e23] * other[e315]) + (self[e15] * other[e425]) + (self[e4315] * other[e235]) + (self[e3215] * other[e435]) - (self[e45] * other[e125]),
                0.0,
            ]) - (Simd32x4::from([self[e45], self[e4125], self[e31], other[e425]]) * other.group1().xxx().with_w(self[e42]))
                - (self.group1().zw().with_zw(self[e4235], other[e435]) * other.group1().yyy().with_w(self[e43]))
                - (other.group0().yzx() * self.group2().zxy()).with_w(self[e41] * other[e415]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e1234] * other[e235],
                self[e1234] * other[e315],
                self[e1234] * other[e125],
                -(self[e23] * other[e235]) - (self[e31] * other[e315]) - (self[e12] * other[e125]) - (self[e35] * other[e435]),
            ]) + (Simd32x4::from([self[e45], self[e4125], self[e4235], self[e4315]]) * other.group0().xxy().with_w(other[e315]))
                + (Simd32x4::from([self[e4315], self[e45], self[e45], self[e4125]]) * other.group0().zyz().with_w(other[e125]))
                + (self.group0().yzx() * other.group1().zxy()).with_w(self[e4235] * other[e235])
                - (self.group0().zxy() * other.group1().yzx()).with_w(self[e15] * other[e415])
                - (other.group0().yzx() * self.group3().zxy()).with_w(self[e25] * other[e425]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       73      135        0
    //    simd3        0       26        0
    //    simd4       64       41        0
    // Totals...
    // yes simd      137      202        0
    //  no simd      329      377        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e42] * other[e435]) + (self[e1234] * other[e415]),
                (self[e43] * other[e415]) + (self[e1234] * other[e425]),
                (self[e43] * other[e12345]) + (self[e1234] * other[e435]),
                -(self[e42] * other[e315]) - (self[e43] * other[e125]) - (self[e23] * other[e415]) - (self[e31] * other[e425]) - (self[e12] * other[e435]),
            ]) + (self.group0().xyx() * other.group0().wwy()).with_w(self[e1234] * other[e5])
                - (self.group0().zxy() * other.group0().yzx()).with_w(self[e41] * other[e235]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e23] * other[e12345]) + (self[e31] * other[e435]) + (self[e1234] * other[e235]),
                (self[e31] * other[e12345]) + (self[e12] * other[e415]) + (self[e1234] * other[e315]),
                (self[e23] * other[e425]) + (self[e12] * other[e12345]) + (self[e1234] * other[e125]),
                -(self[e43] * other[e125]) - (self[e4235] * other[e415]) - (self[e4315] * other[e425]) - (self[e4125] * other[e435]),
            ]) + (other.group1().zxww() * self.group0().yzz().with_w(self[e1234]))
                + (self.group0().xyx() * other.group1().wwy()).with_w(self[e45] * other[e12345])
                - (other.group1().yzxx() * self.group0().zxy().with_w(self[e41]))
                - (self.group1().zxy() * other.group0().yzx()).with_w(self[e42] * other[e315]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e31] * other[e125]) + (self[e15] * other[e12345]) + (self[e25] * other[e435]) + (self[e4125] * other[e315]) + (self[e3215] * other[e415])
                    - (self[e4235] * other[e5])
                    - (self[e4315] * other[e125]),
                (self[e12] * other[e235]) + (self[e25] * other[e12345]) + (self[e35] * other[e415]) + (self[e4235] * other[e125]) + (self[e3215] * other[e425])
                    - (self[e4315] * other[e5])
                    - (self[e4125] * other[e235]),
                (self[e12] * other[e5]) + (self[e15] * other[e425]) + (self[e35] * other[e12345]) + (self[e4315] * other[e235]) + (self[e3215] * other[e435])
                    - (self[e4235] * other[e315])
                    - (self[e4125] * other[e5]),
                0.0,
            ]) + (self.group1().xyx() * other.group1().wwy()).with_w(self[e1234] * other[e12345])
                - (other.group0().yzxz() * self.group2().zxy().with_w(self[e43]))
                - (self.group1().zxy() * other.group1().yzx()).with_w(self[e41] * other[e415])
                - (self.group1().www() * other.group1().xyz()).with_w(self[e42] * other[e425]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e4235] * other[e12345]) + (self[e4315] * other[e435]),
                (self[e4315] * other[e12345]) + (self[e4125] * other[e415]),
                (self[e4235] * other[e425]) + (self[e4125] * other[e12345]),
                -(self[e12] * other[e125]) - (self[e45] * other[e5]) - (self[e15] * other[e415]) - (self[e25] * other[e425]) - (self[e35] * other[e435]),
            ]) + (other.group1().zxwy() * self.group0().yzz().with_w(self[e4315]))
                + (other.group1().wwyx() * self.group0().xyx().with_w(self[e4235]))
                + (self.group1().www() * other.group0().xyz()).with_w(self[e4125] * other[e125])
                + (self.group2().www() * other.group1().xyz()).with_w(self[e3215] * other[e12345])
                - (other.group1().yzxx() * self.group0().zxy().with_w(self[e23]))
                - (self.group3().zxy() * other.group0().yzx()).with_w(self[e31] * other[e315]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for DipoleInversion {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      112      200        0
    //    simd2       12       12        0
    //    simd3      112      153        0
    //    simd4      106       76        0
    // Totals...
    // yes simd      342      441        0
    //  no simd      896      987        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[e3215] * other[e4])
                    - (self[e41] * other[e235])
                    - (self[e42] * other[e315])
                    - (self[e43] * other[e125])
                    - (self[e31] * other[e425])
                    - (self[e12] * other[e435])
                    - (self[e45] * other[e321])
                    - (self[e25] * other[e431])
                    - (self[e35] * other[e412]),
                (self[e41] * other[e15])
                    + (self[e42] * other[e25])
                    + (self[e43] * other[e35])
                    + (self[e23] * other[e23])
                    + (self[e31] * other[e31])
                    + (self[e12] * other[e12])
                    + (self[e25] * other[e42])
                    + (self[e35] * other[e43])
                    - (self[e3215] * other[e1234]),
            ]) + (Simd32x2::from(self[e4235]) * Simd32x2::from([other[e1], other[e4235]]))
                + (Simd32x2::from(self[e4315]) * Simd32x2::from([other[e2], other[e4315]]))
                + (Simd32x2::from(self[e4125]) * Simd32x2::from([other[e3], other[e4125]]))
                + (Simd32x2::from([other[e5], other[e41]]) * self.group2().wx())
                - (Simd32x2::from([other[e415], other[e45]]) * self.group1().xw())
                - (Simd32x2::from([other[e423], other[e3215]]) * self.group2().xw()),
            // e1, e2, e3, e4
            Simd32x4::from([
                self[e15] * other[e1234] * -1.0,
                self[e25] * other[e1234] * -1.0,
                self[e35] * other[e1234] * -1.0,
                self[e1234] * other[e45],
            ]) + (Simd32x4::from([self[e45], self[e4125], self[e4235], self[e4235]]) * other.group5().xxy().with_w(other[e41]))
                + (Simd32x4::from([self[e4315], self[e45], self[e45], self[e31]]) * other.group5().zyz().with_w(other[e42]))
                + (other.group0().xx().with_zw(other[scalar], self[e41]) * self.group3().xyz().with_w(other[e23]))
                + (other.group3().zx().with_zw(other[e3215], other[e12]) * self.group0().yzz().with_w(self[e43]))
                + (other.group3().ww().with_zw(other[e4315], self[e4315]) * self.group1().xyx().with_w(other[e42]))
                + (other.group9().zx().with_zw(other[e45], self[e12]) * self.group1().yzz().with_w(other[e43]))
                + (other.group9().ww().with_zw(other[e25], other[e31]) * self.group0().xyx().with_w(self[e42]))
                + (other.group4().yzx() * self.group2().zxy()).with_w(self[e23] * other[e41])
                + (self.group2().www() * other.group3().xyz()).with_w(self[e4125] * other[e43])
                - (Simd32x4::from([self[e25], self[e3215], self[e3215], other[e4315]]) * other.group4().zyz().with_w(self[e42]))
                - (Simd32x4::from([self[e3215], self[e35], self[e15], other[e4235]]) * other.group4().xxy().with_w(self[e41]))
                - (self.group1().zxyw() * other.group9().yzx().with_w(other[e1234]))
                - (self.group0().zxy() * other.group3().yzx()).with_w(self[e1234] * other[scalar])
                - (other.group5().yzx() * self.group3().zxy()).with_w(self[e43] * other[e4125]),
            // e5
            (self[e23] * other[e15])
                + (self[e31] * other[e25])
                + (self[e12] * other[e35])
                + (self[e45] * other[e3215])
                + (self[e15] * other[e23])
                + (self[e15] * other[e4235])
                + (self[e25] * other[e31])
                + (self[e25] * other[e4315])
                + (self[e35] * other[e12])
                + (self[e35] * other[e4125])
                - (self[e4235] * other[e15])
                - (self[e4315] * other[e25])
                - (self[e4125] * other[e35])
                - (self[e3215] * other[scalar])
                - (self[e3215] * other[e45]),
            // e15, e25, e35, e45
            Simd32x4::from([self[e3215] * other[e1] * -1.0, self[e3215] * other[e2] * -1.0, self[e3215] * other[e3] * -1.0, self[e1234] * other[e5]])
                + (Simd32x4::from(other[e12345]) * self.group2().xyz().with_w(self[e45]))
                + (Simd32x4::from([self[e31], self[e4235], self[e23], self[e25]]) * other.group8().zzy().with_w(other[e431]))
                + (Simd32x4::from([self[e4125], self[e12], self[e4315], self[e15]]) * other.group8().yxx().with_w(other[e423]))
                + (Simd32x4::from([other[e2], other[e415], other[e1], other[e2]]) * self.group2().zzy().with_w(self[e31]))
                + (Simd32x4::from([other[e5], other[e5], other[e5], self[e35]]) * self.group1().xyz().with_w(other[e412]))
                + (Simd32x4::from([other[e435], other[e3], other[e425], other[e1]]) * self.group2().yxx().with_w(self[e23]))
                + (self.group3().www() * other.group6().xyz()).with_w(self[e12] * other[e3])
                - (Simd32x4::from([self[e45], self[e4125], self[e31], other[e235]]) * other.group8().xxx().with_w(self[e41]))
                - (Simd32x4::from([self[e4315], self[e23], self[e45], other[e125]]) * other.group8().zzz().with_w(self[e43]))
                - (Simd32x4::from([other[e3], other[e321], other[e415], other[e425]]) * self.group2().yyy().with_w(self[e4315]))
                - (Simd32x4::from([other[e5], other[e5], other[e5], other[e4]]) * self.group3())
                - (Simd32x4::from([other[e425], other[e1], other[e321], other[e435]]) * self.group2().zzz().with_w(self[e4125]))
                - (self.group1().zw().with_zw(self[e4235], other[e315]) * other.group8().yyy().with_w(self[e42]))
                - (other.group6().wz().with_zw(other[e2], other[e415]) * self.group2().xxx().with_w(self[e4235])),
            // e41, e42, e43
            (Simd32x3::from(self[e1234]) * other.group1().xyz())
                + (Simd32x3::from(self[e1234]) * other.group6().xyz())
                + (Simd32x3::from(other[e12345]) * self.group0())
                + (Simd32x3::from(other[e4]) * self.group1().xyz())
                + (Simd32x3::from(other[e4]) * self.group3().xyz())
                + (Simd32x3::from([self[e31], self[e4125], self[e4235]]) * other.group7().zxy())
                + (Simd32x3::from([self[e4315], self[e45], self[e45]]) * other.group7().zyz())
                + (Simd32x3::from([other[e3], other[e1], other[e425]]) * self.group0().yzx())
                + (Simd32x3::from([other[e321], other[e321], other[e2]]) * self.group0().xyx())
                + (self.group0().yzz() * other.group6().zxw())
                + (other.group7().xxy() * self.group1().wzx())
                - (self.group0().zxy() * other.group1().yzx())
                - (self.group0().zxy() * other.group6().yzx())
                - (other.group7().yzx() * self.group1().zxy())
                - (other.group7().yzx() * self.group3().zxy()),
            // e23, e31, e12
            (Simd32x3::from(self[e1234]) * other.group8())
                + (Simd32x3::from(other[e12345]) * self.group1().xyz())
                + (Simd32x3::from(other[e4]) * self.group2().xyz())
                + (Simd32x3::from([self[e25], self[e3215], self[e3215]]) * other.group7().zyz())
                + (Simd32x3::from([self[e3215], self[e35], self[e15]]) * other.group7().xxy())
                + (Simd32x3::from([other[e5], other[e5], other[e315]]) * self.group0().xyx())
                + (self.group0().yzz() * other.group8().zx().with_z(other[e5]))
                + (self.group1().yzx() * other.group6().zxy())
                + (self.group3().zxy() * other.group1().yzx())
                - (Simd32x3::from(self[e45]) * other.group1().xyz())
                - (Simd32x3::from([other[e3], other[e1], other[e321]]) * self.group3().yzz())
                - (Simd32x3::from([other[e321], other[e321], other[e2]]) * self.group3().xyx())
                - (self.group0().zxy() * other.group8().yzx())
                - (other.group7().yzx() * self.group2().zxy())
                - (self.group1().zxy() * other.group6().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e4315] * other[e4125] * -1.0,
                self[e4125] * other[e4235] * -1.0,
                self[e4125] * other[e45] * -1.0,
                self[e1234] * other[e3215],
            ]) + (self.group2().zxyx() * other.group4().yzx().with_w(other[e41]))
                + (self.group0().zxy() * other.group3().yzx()).with_w(self[e45] * other[scalar])
                + (other.group5().yzx() * self.group1().zxy()).with_w(self[e25] * other[e42])
                + (self.group3().zxy() * other.group9().yzx()).with_w(self[e35] * other[e43])
                - (Simd32x4::from([self[e25], self[e3215], self[e3215], self[e4315]]) * other.group4().zyz().with_w(other[e31]))
                - (Simd32x4::from([self[e3215], self[e35], self[e15], self[e4235]]) * other.group4().xxy().with_w(other[e23]))
                - (Simd32x4::from([other[e1234], other[e1234], other[e1234], other[e4315]]) * self.group2().xyz().with_w(self[e31]))
                - (self.group1().wwwx() * other.group9().xyzx())
                - (self.group3().xyxw() * other.group3().ww().with_zw(other[e4315], other[e1234]))
                - (other.group0().xx().with_zw(other[scalar], self[e41]) * self.group1().xyz().with_w(other[e15]))
                - (other.group3().zx().with_zw(other[e3215], other[e35]) * self.group0().yzz().with_w(self[e43]))
                - (other.group9().ww().with_zw(other[e25], other[e25]) * self.group0().xyx().with_w(self[e42]))
                - (other.group5().zxy() * self.group1().yzx()).with_w(self[e4125] * other[e12])
                - (self.group2().www() * other.group3().xyz()).with_w(self[e12] * other[e4125]),
            // e423, e431, e412
            (Simd32x3::from(self[e41]) * Simd32x3::from([other[e45], other[e12], other[e4315]]))
                + (Simd32x3::from(self[e42]) * Simd32x3::from([other[e4125], other[e45], other[e23]]))
                + (Simd32x3::from(self[e43]) * Simd32x3::from([other[e31], other[e4235], other[e45]]))
                + (Simd32x3::from(self[e1234]) * other.group9().xyz())
                + (other.group4().yzx() * self.group1().zxy())
                + (other.group4().yzx() * self.group3().zxy())
                - (Simd32x3::from(self[e1234]) * other.group5())
                - (Simd32x3::from(other[scalar]) * self.group0())
                - (Simd32x3::from(other[e1234]) * self.group1().xyz())
                - (Simd32x3::from(other[e1234]) * self.group3().xyz())
                - (Simd32x3::from([self[e31], self[e4125], self[e4235]]) * other.group4().zxy())
                - (Simd32x3::from([self[e4315], self[e45], self[e45]]) * other.group4().zyz())
                - (Simd32x3::from([other[e12], other[e4125], other[e31]]) * self.group0().yxx())
                - (Simd32x3::from([other[e4315], other[e23], other[e4235]]) * self.group0().zzy())
                - (other.group4().xxy() * self.group1().wzx()),
            // e235, e315, e125
            (Simd32x3::from(self[e45]) * other.group3().xyz())
                + (Simd32x3::from([other[e35], other[e15], other[e3215]]) * self.group3().yzz())
                + (Simd32x3::from([other[e3215], other[e3215], other[e25]]) * self.group3().xyx())
                + (other.group5().yzx() * self.group2().zxy())
                + (self.group1().zxy() * other.group3().yzx())
                + (self.group2().zxy() * other.group9().yzx())
                - (Simd32x3::from(self[e3215]) * other.group9().xyz())
                - (Simd32x3::from(other[scalar]) * self.group2().xyz())
                - (Simd32x3::from([self[e25], self[e3215], self[e3215]]) * other.group5().zyz())
                - (Simd32x3::from([self[e3215], self[e35], self[e15]]) * other.group5().xxy())
                - (Simd32x3::from([other[e35], other[e15], other[e3215]]) * self.group1().yzz())
                - (Simd32x3::from([other[e45], other[e45], other[e4315]]) * self.group2().xyx())
                - (Simd32x3::from([other[e4125], other[e4235], other[e45]]) * self.group2().yzz())
                - (Simd32x3::from([other[e3215], other[e3215], other[e25]]) * self.group1().xyx())
                - (self.group3().zxy() * other.group3().yzx()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e4315] * other[e435], self[e4125] * other[e415], self[e4235] * other[e425], self[e3215] * other[e321] * -1.0])
                + (Simd32x4::from(other[e12345]) * self.group3())
                + (Simd32x4::from([other[e5], other[e5], other[e315], self[e4235]]) * self.group0().xyx().with_w(other[e235]))
                + (other.group1().yzxy() * self.group1().zxy().with_w(self[e25]))
                + (other.group8().zx().with_zw(other[e5], self[e4315]) * self.group0().yzz().with_w(other[e315]))
                + (other.group8() * self.group2().www()).with_w(self[e15] * other[e1])
                + (other.group7().yzx() * self.group2().zxy()).with_w(self[e4125] * other[e125])
                + (self.group1().www() * other.group6().xyz()).with_w(self[e35] * other[e3])
                - (Simd32x4::from([self[e25], self[e3215], self[e3215], self[e12]]) * other.group7().zyz().with_w(other[e125]))
                - (Simd32x4::from([self[e3215], self[e35], self[e15], self[e31]]) * other.group7().xxy().with_w(other[e315]))
                - (self.group1().xyxw() * other.group6().ww().with_zw(other[e2], other[e5]))
                - (self.group2().xyzy() * other.group1().www().with_w(other[e425]))
                - (other.group6().yzxz() * self.group3().zxy().with_w(self[e35]))
                - (other.group1().zx().with_zw(other[e321], other[e415]) * self.group1().yzz().with_w(self[e15]))
                - (self.group0().zxy() * other.group8().yzx()).with_w(self[e23] * other[e235]),
            // e1234
            (self[e45] * other[e4]) + (self[e1234] * other[e12345]) + (self[e1234] * other[e321])
                - (self[e41] * other[e1])
                - (self[e41] * other[e415])
                - (self[e42] * other[e2])
                - (self[e42] * other[e425])
                - (self[e43] * other[e3])
                - (self[e43] * other[e435])
                - (self[e23] * other[e423])
                - (self[e31] * other[e431])
                - (self[e12] * other[e412])
                - (self[e4235] * other[e423])
                - (self[e4315] * other[e431])
                - (self[e4125] * other[e412]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       43       82        0
    //    simd3        0       14        0
    //    simd4       57       47        0
    // Totals...
    // yes simd      100      143        0
    //  no simd      271      312        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (other.group0().xyzy() * self.group2().www().with_w(self[e4315]))
                + (other.group0().zxyx() * self.group0().yzx().with_w(self[e4235]))
                + Simd32x3::from(0.0).with_w(self[e4125] * other[e4125])
                - (other.group0().yzxw() * self.group0().zxy().with_w(self[e1234])),
            // e415, e425, e435, e321
            (other.group0().yzxw() * self.group3().zxy().with_w(self[e1234]))
                - (self.group1().wwwy() * other.group0().xyzy())
                - (other.group0().zxyz() * self.group3().yzx().with_w(self[e12]))
                - (other.group0().wwwx() * self.group0().with_w(self[e23])),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e23] * other[e3215]) - (self[e25] * other[e4125]) - (self[e3215] * other[e4235]),
                -(self[e31] * other[e3215]) - (self[e35] * other[e4235]) - (self[e3215] * other[e4315]),
                -(self[e12] * other[e3215]) - (self[e15] * other[e4315]) - (self[e3215] * other[e4125]),
                (self[e25] * other[e4315]) + (self[e35] * other[e4125]),
            ]) + (other.group0().yzxw() * self.group2().zxy().with_w(self[e45]))
                + (other.group0().wwwx() * self.group3().xyz().with_w(self[e15])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e41] * other[e3215]) + (self[e31] * other[e4125]),
                (self[e42] * other[e3215]) + (self[e12] * other[e4235]),
                (self[e43] * other[e3215]) + (self[e23] * other[e4315]),
                -(self[e42] * other[e4315]) - (self[e43] * other[e4125]),
            ]) - (other.group0().yzxx() * self.group1().zxy().with_w(self[e41])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       94        0
    //    simd3        0       17        0
    //    simd4       63       49        0
    // Totals...
    // yes simd       95      160        0
    //  no simd      284      341        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([self[e43] * other[e2] * -1.0, self[e41] * other[e3] * -1.0, self[e42] * other[e1] * -1.0, self[e3215] * other[e4]])
                + (self.group3().xyzz() * other.group0().wwwz())
                + (other.group0().xyzy() * self.group2().www().with_w(self[e4315]))
                + (other.group0().wwwx() * self.group1().xyz().with_w(self[e4235]))
                + (self.group0().yzx() * other.group0().zxy()).with_w(self[e1234] * other[e5]),
            // e23, e31, e12, e45
            Simd32x4::from([self[e4315] * other[e3] * -1.0, self[e4125] * other[e1] * -1.0, self[e4235] * other[e2] * -1.0, self[e1234] * other[e5]])
                + (Simd32x4::from([other[e5], other[e5], other[e5], other[e1]]) * self.group0().with_w(self[e23]))
                + (other.group0().yzxz() * self.group3().zxy().with_w(self[e12]))
                + (other.group0().wwwy() * self.group2().xyz().with_w(self[e31]))
                - (other.group0() * self.group1().www().with_w(self[e3215])),
            // e15, e25, e35, e1234
            Simd32x4::from([self[e35] * other[e2], self[e15] * other[e3], self[e25] * other[e1], 0.0])
                + (Simd32x4::from([other[e5], other[e5], other[e5], other[e4]]) * self.group1())
                - (Simd32x4::from([other[e5], other[e5], other[e5], other[e2]]) * self.group3().xyz().with_w(self[e42]))
                - (other.group0().xyzz() * self.group3().www().with_w(self[e43]))
                - (other.group0().zxyx() * self.group2().yzx().with_w(self[e41])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e15] * other[e4] * -1.0, self[e25] * other[e4] * -1.0, self[e35] * other[e4] * -1.0, self[e35] * other[e3]])
                + (Simd32x4::from([other[e5], other[e5], other[e5], other[e1]]) * self.group0().with_w(self[e15]))
                + (other.group0().yzxy() * self.group1().zxy().with_w(self[e25]))
                - (self.group1().yzxw() * other.group0().zxy().with_w(other[e5])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       29       60        0
    //    simd3        0       17        0
    //    simd4       45       39        0
    // Totals...
    // yes simd       74      116        0
    //  no simd      209      267        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[scalar]) * self.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            Simd32x4::from(other[scalar]) * self.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e4
            Simd32x4::from(other[scalar]) * self.group2() * Simd32x4::from(-1.0),
            // e1, e2, e3, e5
            Simd32x4::from(other[scalar]) * self.group3() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       43       88        0
    //    simd3        0       14        0
    //    simd4       60       50        0
    // Totals...
    // yes simd      103      152        0
    //  no simd      283      330        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[e4235] * other[e1234] * -1.0,
                self[e4315] * other[e1234] * -1.0,
                self[e4125] * other[e1234] * -1.0,
                self[e4125] * other[e4125],
            ]) + (other.group0().xyzy() * self.group2().www().with_w(self[e4315]))
                + (other.group0().zxyx() * self.group0().yzx().with_w(self[e4235]))
                - (Simd32x4::from(other[e1234]) * self.group1().xyz().with_w(self[e3215]))
                - (other.group0().yzxw() * self.group0().zxy().with_w(self[e1234])),
            // e415, e425, e435, e321
            (other.group0().yzxw() * self.group3().zxy().with_w(self[e1234]))
                - (Simd32x4::from([other[e1234], other[e1234], other[e1234], other[e4125]]) * self.group2().xyz().with_w(self[e12]))
                - (self.group1().wwwy() * other.group0().xyzy())
                - (self.group3().yzxw() * other.group0().zxy().with_w(other[e1234]))
                - (other.group0().wwwx() * self.group0().with_w(self[e23])),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e23] * other[e3215]) - (self[e25] * other[e4125]) - (self[e3215] * other[e4235]),
                -(self[e31] * other[e3215]) - (self[e35] * other[e4235]) - (self[e3215] * other[e4315]),
                -(self[e12] * other[e3215]) - (self[e15] * other[e4315]) - (self[e3215] * other[e4125]),
                (self[e25] * other[e4315]) + (self[e35] * other[e4125]),
            ]) + (other.group0().yzxw() * self.group2().zxy().with_w(self[e45]))
                + (other.group0().wwwx() * self.group3().xyz().with_w(self[e15])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e41] * other[e3215]) + (self[e31] * other[e4125]),
                (self[e42] * other[e3215]) + (self[e12] * other[e4235]),
                (self[e43] * other[e3215]) + (self[e23] * other[e4315]),
                -(self[e43] * other[e4125]) - (self[e45] * other[e1234]),
            ]) - (Simd32x4::from([other[e1234], other[e1234], other[e1234], other[e4315]]) * self.group2().xyz().with_w(self[e42]))
                - (other.group0().yzxx() * self.group1().zxy().with_w(self[e41])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for DipoleInversion {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       64      140        0
    //    simd3        0       37        0
    //    simd4       96       62        0
    // Totals...
    // yes simd      160      239        0
    //  no simd      448      499        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e31] * other[e412])
                    + (self[e45] * other[e423])
                    + (self[e1234] * other[e415])
                    + (self[e1234] * other[e1])
                    + (self[e4235] * other[e4])
                    + (self[e4315] * other[e412]),
                (self[e12] * other[e423])
                    + (self[e45] * other[e431])
                    + (self[e1234] * other[e425])
                    + (self[e1234] * other[e2])
                    + (self[e4315] * other[e4])
                    + (self[e4125] * other[e423]),
                (self[e12] * other[e4])
                    + (self[e45] * other[e412])
                    + (self[e1234] * other[e435])
                    + (self[e1234] * other[e3])
                    + (self[e4235] * other[e431])
                    + (self[e4125] * other[e4]),
                -(self[e31] * other[e425])
                    - (self[e12] * other[e435])
                    - (self[e45] * other[e321])
                    - (self[e15] * other[e423])
                    - (self[e25] * other[e431])
                    - (self[e35] * other[e412]),
            ]) + (other.group0().ww().with_zw(other[e425], other[e5]) * self.group0().xyx().with_w(self[e1234]))
                + (other.group1().zx().with_zw(other[e12345], other[e2]) * self.group0().yzz().with_w(self[e4315]))
                + (other.group1().ww().with_zw(other[e2], other[e1]) * self.group0().xyx().with_w(self[e4235]))
                + (other.group3().zx().with_zw(other[e321], other[e3]) * self.group0().yzz().with_w(self[e4125]))
                + (other.group3().ww().with_zw(other[e431], other[e4]) * self.group1().xyx().with_w(self[e3215]))
                - (self.group0().zxy() * other.group1().yzx()).with_w(self[e41] * other[e235])
                - (self.group0().zxy() * other.group3().yzx()).with_w(self[e42] * other[e315])
                - (self.group1().zxy() * other.group0().yzx()).with_w(self[e43] * other[e125])
                - (self.group3().zxy() * other.group0().yzx()).with_w(self[e23] * other[e415]),
            // e23, e31, e12, e45
            Simd32x4::from([self[e3215] * other[e423], self[e3215] * other[e431], self[e3215] * other[e412], self[e3215] * other[e4] * -1.0])
                + (self.group1().xyxz() * other.group0().ww().with_zw(other[e425], other[e3]))
                + (self.group1().yzzw() * other.group1().zx().with_zw(other[e12345], other[e12345]))
                + (self.group2().xyxx() * other.group3().ww().with_zw(other[e431], other[e423]))
                + (self.group2().yzzy() * other.group0().zx().with_zw(other[e4], other[e431]))
                + (self.group2().wwwz() * other.group2().xyz().with_w(other[e412]))
                + (self.group0().xyx() * other.group2().wwy()).with_w(self[e23] * other[e1])
                + (self.group0().yzz() * other.group2().zxw()).with_w(self[e31] * other[e2])
                + (self.group3().zxy() * other.group3().yzx()).with_w(self[e1234] * other[e5])
                - (self.group3().xyxy() * other.group1().ww().with_zw(other[e2], other[e425]))
                - (self.group3().yzzz() * other.group3().zx().with_zw(other[e321], other[e435]))
                - (other.group2().yzxx() * self.group0().zxy().with_w(self[e41]))
                - (self.group1().zxy() * other.group1().yzx()).with_w(self[e42] * other[e315])
                - (self.group1().www() * other.group3().xyz()).with_w(self[e43] * other[e125])
                - (self.group2().zxy() * other.group0().yzx()).with_w(self[e4235] * other[e415]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e25] * other[e435]) + (self[e35] * other[e2]) + (self[e4125] * other[e315]) + (self[e3215] * other[e415]),
                (self[e25] * other[e12345]) + (self[e35] * other[e415]) + (self[e4235] * other[e125]) + (self[e3215] * other[e425]),
                (self[e25] * other[e1]) + (self[e35] * other[e12345]) + (self[e4315] * other[e235]) + (self[e3215] * other[e435]),
                -(self[e12] * other[e412]) - (self[e4235] * other[e423]) - (self[e4315] * other[e431]) - (self[e4125] * other[e412]),
            ]) + (Simd32x4::from([other[e12345], other[e3], other[e425], other[e321]]) * self.group2().xxxw())
                + (self.group1().xyxw() * other.group2().wwy().with_w(other[e4]))
                + (self.group1().yzz() * other.group2().zxw()).with_w(self[e1234] * other[e12345])
                - (Simd32x4::from([other[e425], other[e1], other[e321], other[e435]]) * self.group2().zzz().with_w(self[e43]))
                - (Simd32x4::from([other[e3], other[e321], other[e415], other[e2]]) * self.group2().yyy().with_w(self[e42]))
                - (other.group1().wz().with_zw(other[e2], other[e425]) * self.group2().xxx().with_w(self[e42]))
                - (self.group1().zxy() * other.group2().yzx()).with_w(self[e41] * other[e415])
                - (self.group1().www() * other.group2().xyz()).with_w(self[e41] * other[e1])
                - (self.group3().xyx() * other.group2().wwy()).with_w(self[e43] * other[e3])
                - (self.group3().yzz() * other.group2().zxw()).with_w(self[e23] * other[e423])
                - (self.group3().www() * other.group3().xyz()).with_w(self[e31] * other[e431]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e4315] * other[e435], self[e4125] * other[e415], self[e4125] * other[e12345], self[e3215] * other[e321] * -1.0])
                + (self.group3().xyxw() * other.group0().ww().with_zw(other[e425], other[e12345]))
                + (other.group2().xyzz() * self.group2().www().with_w(self[e4125]))
                + (other.group3().yzxz() * self.group1().zxy().with_w(self[e35]))
                + (self.group0().xyx() * other.group2().wwy()).with_w(self[e15] * other[e1])
                + (self.group0().yzz() * other.group2().zxw()).with_w(self[e25] * other[e2])
                + (self.group1().www() * other.group1().xyz()).with_w(self[e4235] * other[e235])
                + (self.group2().zxy() * other.group0().yzx()).with_w(self[e4315] * other[e315])
                - (self.group1().xyxy() * other.group1().ww().with_zw(other[e2], other[e315]))
                - (self.group1().yzzz() * other.group3().zx().with_zw(other[e321], other[e125]))
                - (self.group2().yzzx() * other.group0().zx().with_zw(other[e4], other[e415]))
                - (other.group1().yzxy() * self.group3().zxy().with_w(self[e25]))
                - (other.group2().yzxx() * self.group0().zxy().with_w(self[e23]))
                - (other.group3().ww().with_zw(other[e431], other[e5]) * self.group2().xyx().with_w(self[e45]))
                - (self.group3().www() * other.group0().xyz()).with_w(self[e35] * other[e435]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for DipoleInversion {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       64      125        0
    //    simd3        0       23        0
    //    simd4       96       76        0
    // Totals...
    // yes simd      160      224        0
    //  no simd      448      498        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                -(self[e23] * other[e1234])
                    - (self[e31] * other[e43])
                    - (self[e45] * other[e41])
                    - (self[e1234] * other[e23])
                    - (self[e4235] * other[e1234])
                    - (self[e4315] * other[e43]),
                -(self[e31] * other[e1234])
                    - (self[e12] * other[e41])
                    - (self[e45] * other[e42])
                    - (self[e1234] * other[e31])
                    - (self[e4315] * other[e1234])
                    - (self[e4125] * other[e41]),
                -(self[e23] * other[e42])
                    - (self[e12] * other[e1234])
                    - (self[e45] * other[e43])
                    - (self[e1234] * other[e12])
                    - (self[e4235] * other[e42])
                    - (self[e4125] * other[e1234]),
                (self[e15] * other[e41])
                    + (self[e25] * other[e42])
                    + (self[e35] * other[e43])
                    + (self[e4235] * other[e4235])
                    + (self[e4315] * other[e4315])
                    + (self[e4125] * other[e4125]),
            ]) + (Simd32x4::from(self[e41]) * other.group1().wz().with_zw(other[e4315], other[e15]))
                + (Simd32x4::from(self[e42]) * Simd32x4::from([other[e4125], other[e45], other[e23], other[e25]]))
                + (Simd32x4::from(self[e43]) * Simd32x4::from([other[e31], other[e4235], other[e45], other[e35]]))
                + (self.group1().zxyx() * other.group0().yzx().with_w(other[e23]))
                + (self.group2().www() * other.group3().xyz()).with_w(self[e31] * other[e31])
                + (self.group3().zxy() * other.group0().yzx()).with_w(self[e12] * other[e12])
                - (Simd32x4::from([other[scalar], other[e4125], other[e31], other[e45]]) * self.group0().xxx().with_w(self[e45]))
                - (Simd32x4::from([other[e12], other[scalar], other[e4235], other[e3215]]) * self.group0().yyy().with_w(self[e1234]))
                - (Simd32x4::from([other[e4315], other[e23], other[scalar], other[e1234]]) * self.group0().zzz().with_w(self[e3215])),
            // e415, e425, e435, e321
            Simd32x4::from([
                self[e3215] * other[e41] * -1.0,
                self[e3215] * other[e42] * -1.0,
                self[e3215] * other[e43] * -1.0,
                self[e1234] * other[e3215],
            ]) + (self.group2().zxyy() * other.group0().yzxy())
                + (self.group0().zxy() * other.group2().yzx()).with_w(self[e45] * other[scalar])
                + (self.group1().zxy() * other.group1().yzx()).with_w(self[e15] * other[e41])
                + (self.group3().zxy() * other.group3().yzx()).with_w(self[e35] * other[e43])
                - (self.group1().yzzx() * other.group1().zx().with_zw(other[scalar], other[e4235]))
                - (self.group1().wwwy() * other.group3().xyzy())
                - (self.group3().xyxz() * other.group1().ww().with_zw(other[e4315], other[e12]))
                - (self.group3().yzzw() * other.group3().zx().with_zw(other[e45], other[e1234]))
                - (other.group0().zx().with_zw(other[e1234], other[e23]) * self.group2().yzz().with_w(self[e4235]))
                - (other.group0().ww().with_zw(other[e31], other[e35]) * self.group1().xyx().with_w(self[e43]))
                - (other.group2().zx().with_zw(other[e3215], other[e25]) * self.group0().yzz().with_w(self[e42]))
                - (other.group2().ww().with_zw(other[e42], other[e4125]) * self.group2().xyx().with_w(self[e12]))
                - (other.group3().ww().with_zw(other[e25], other[e15]) * self.group0().xyx().with_w(self[e41]))
                - (self.group2().www() * other.group2().xyz()).with_w(self[e4315] * other[e31]),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e25] * other[e4125]) - (self[e4125] * other[e25]) - (self[e3215] * other[e23]) - (self[e3215] * other[e4235]),
                -(self[e35] * other[e4235]) - (self[e4235] * other[e35]) - (self[e3215] * other[e31]) - (self[e3215] * other[e4315]),
                -(self[e35] * other[e45]) - (self[e4315] * other[e15]) - (self[e3215] * other[e12]) - (self[e3215] * other[e4125]),
                (self[e25] * other[e31]) + (self[e25] * other[e4315]) + (self[e35] * other[e12]) + (self[e35] * other[e4125]),
            ]) + (self.group1().zxyx() * other.group2().yzxx())
                + (self.group1().wwwy() * other.group2().xyzy())
                + (other.group3().yzxw() * self.group2().zxy().with_w(self[e45]))
                + (other.group2().zx().with_zw(other[e3215], other[e4235]) * self.group3().yzz().with_w(self[e15]))
                + (other.group3().ww().with_zw(other[e25], other[e23]) * self.group3().xyx().with_w(self[e15]))
                + (self.group2().zxy() * other.group1().yzx()).with_w(self[e12] * other[e35])
                - (other.group0().ww().with_zw(other[e31], other[e35]) * self.group2().xyx().with_w(self[e4125]))
                - (other.group1().zx().with_zw(other[scalar], other[e45]) * self.group2().yzz().with_w(self[e3215]))
                - (other.group1().ww().with_zw(other[e4315], other[scalar]) * self.group2().xyx().with_w(self[e3215]))
                - (other.group2().zx().with_zw(other[e3215], other[e25]) * self.group1().yzz().with_w(self[e4315]))
                - (other.group3().ww().with_zw(other[e25], other[e15]) * self.group1().xyx().with_w(self[e4235])),
            // e1, e2, e3, e4
            Simd32x4::from([
                self[e3215] * other[e41] * -1.0,
                self[e3215] * other[e42] * -1.0,
                self[e3215] * other[e43] * -1.0,
                self[e4125] * other[e43],
            ]) + (Simd32x4::from(self[e1234]) * other.group2().xyz().with_w(other[e45]))
                + (self.group1().yzzx() * other.group3().zx().with_zw(other[e45], other[e41]))
                + (self.group1().wwwy() * other.group1().xyz().with_w(other[e42]))
                + (self.group3().xyxx() * other.group0().ww().with_zw(other[e31], other[e41]))
                + (self.group3().yzzy() * other.group1().zx().with_zw(other[scalar], other[e42]))
                + (other.group0().yzxz() * self.group2().zxy().with_w(self[e12]))
                + (other.group1().ww().with_zw(other[e4315], other[e12]) * self.group1().xyx().with_w(self[e43]))
                + (other.group2().zx().with_zw(other[e3215], other[e31]) * self.group0().yzz().with_w(self[e42]))
                + (other.group3().ww().with_zw(other[e25], other[e23]) * self.group0().xyx().with_w(self[e41]))
                - (other.group3().yzxy() * self.group1().zxy().with_w(self[e42]))
                - (other.group0().zx().with_zw(other[e1234], other[e1234]) * self.group2().yzz().with_w(self[e45]))
                - (other.group2().ww().with_zw(other[e42], other[e4125]) * self.group2().xyx().with_w(self[e43]))
                - (self.group0().zxy() * other.group2().yzx()).with_w(self[e41] * other[e4235])
                - (self.group3().zxy() * other.group1().yzx()).with_w(self[e1234] * other[scalar]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl std::ops::Div<anti_sandwich> for DualNum {
    type Output = anti_sandwich_partial<DualNum>;
    fn div(self, _rhs: anti_sandwich) -> Self::Output {
        anti_sandwich_partial(self)
    }
}
impl AntiSandwich<AntiCircleRotor> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        8        0
    //    simd3        4        7        0
    //    simd4        3        8        0
    // Totals...
    // yes simd        9       23        0
    //  no simd       26       61        0
    fn anti_sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(self[e12345]) * other.group0().with_w(other[scalar]),
            // e23, e31, e12, e45
            ((Simd32x3::from(self[e5]) * other.group0()) + (Simd32x3::from(self[e12345]) * other.group1().xyz())).with_w(other[e45] * self[e12345]),
            // e15, e25, e35, e1234
            ((Simd32x3::from(self[e5]) * other.group1().xyz()) + (Simd32x3::from(self[e12345]) * other.group2().xyz())).with_w(0.0),
            // e4235, e4315, e4125, e3215
            self.group0().xx().with_zw(self[e5], (other[e45] * self[e5]) + (other[scalar] * self[e5])) * other.group0().with_w(1.0) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDipoleInversion> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1       12        0
    //    simd3        2        4        0
    //    simd4        6       10        0
    // Totals...
    // yes simd        9       26        0
    //  no simd       31       64        0
    fn anti_sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            self.group0().yy().with_zw(self[e12345], self[e5]) * other.group0().with_w(other[e4]),
            // e415, e425, e435, e321
            (Simd32x4::from(self[e5]) * other.group0().with_w(other[e4])) + (Simd32x4::from(self[e12345]) * other.group1()),
            // e235, e315, e125, e5
            Simd32x4::from([other[e235] * self[e12345], other[e315] * self[e12345], other[e125] * self[e12345], 0.0])
                + (self.group0().xx().with_zw(self[e5], self[e12345]) * other.group1().xyz().with_w(other[e5]))
                - (Simd32x4::from(self[e5]) * other.group3().xyz().with_w(other[e321])),
            // e1, e2, e3, e4
            ((Simd32x3::from(self[e5]) * other.group0()) + (Simd32x3::from(self[e12345]) * other.group3().xyz())).with_w(other[e4] * self[e12345]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum> for DualNum {
    type Output = AntiDualNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn anti_sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return AntiDualNum::from_groups(
            // e3215, scalar
            Simd32x2::from([(other[e3215] * self[e12345]) + (other[scalar] * self[e5]), other[scalar] * self[e12345]]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlatPoint> for DualNum {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        5        0
    //    simd3        1        2        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        2        9        0
    //  no simd        4       19        0
    fn anti_sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(self[e12345]) * other.group0(),
            // e1, e2, e3, e5
            Simd32x3::from(0.0).with_w(other[e321] * self[e5] * -1.0),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlector> for DualNum {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd3        2        4        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        4       12        0
    //  no simd        8       26        0
    fn anti_sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            ((Simd32x3::from(self[e12345]) * other.group0().xyz()) - (Simd32x3::from(self[e5]) * other.group1().xyz())).with_w(other[e321] * self[e12345]),
            // e1, e2, e3, e5
            Simd32x4::from([other[e1], other[e2], other[e3], 1.0]) * self.group0().yy().with_zw(self[e12345], (other[e5] * self[e12345]) - (other[e321] * self[e5])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiLine> for DualNum {
    type Output = AntiLine;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        2        6        0
    // no simd        6       18        0
    fn anti_sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(self[e12345]) * other.group0(),
            // e15, e25, e35
            (Simd32x3::from(self[e5]) * other.group0()) + (Simd32x3::from(self[e12345]) * other.group1()),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiMotor> for DualNum {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        2        6        0
    // no simd        8       24        0
    fn anti_sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(self[e12345]) * other.group0(),
            // e15, e25, e35, e3215
            (Simd32x4::from(self[e5]) * other.group0()) + (Simd32x4::from(self[e12345]) * other.group1()),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiPlane> for DualNum {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        3        0
    //    simd3        1        2        0
    //    simd4        0        5        0
    // Totals...
    // yes simd        2       10        0
    //  no simd        4       29        0
    fn anti_sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            self.group0().xx().with_zw(self[e5], 0.0) * Simd32x3::from(1.0).with_w(0.0) * other.group0().xyz().with_w(0.0) * Simd32x4::from([-1.0, -1.0, -1.0, 0.0]),
            // e1, e2, e3, e5
            Simd32x4::from(self[e12345]) * other.group0(),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiScalar> for DualNum {
    type Output = DualNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        3        0
    //    simd2        0        1        0
    // Totals...
    // yes simd        1        4        0
    //  no simd        1        5        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return DualNum::from_groups(/* e5, e12345 */ Simd32x2::from(other[e12345]) * self.group0()).geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0       10        0
    //    simd3        3        7        0
    //    simd4        3        6        0
    // Totals...
    // yes simd        6       23        0
    //  no simd       21       55        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[e12345]) * other.group0(),
            // e415, e425, e435, e321
            ((Simd32x3::from(self[e5]) * other.group0()) + (Simd32x3::from(self[e12345]) * other.group1().xyz())).with_w(other[e321] * self[e12345]),
            // e235, e315, e125, e4
            ((Simd32x3::from(self[e5]) * other.group1().xyz()) + (Simd32x3::from(self[e12345]) * other.group2())).with_w(0.0),
            // e1, e2, e3, e5
            Simd32x4::from(self[e5]) * other.group0().with_w(other[e321]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1       14        0
    //    simd3        2        4        0
    //    simd4        4       10        0
    // Totals...
    // yes simd        7       28        0
    //  no simd       23       66        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(self[e12345]) * other.group0().with_w(other[e12345]),
            // e415, e425, e435, e321
            ((Simd32x3::from(self[e5]) * other.group0()) + (Simd32x3::from(self[e12345]) * other.group1().xyz())).with_w(other[e321] * self[e12345]),
            // e235, e315, e125, e5
            Simd32x4::from([other[e235] * self[e12345], other[e315] * self[e12345], other[e125] * self[e12345], other[e321] * self[e5] * -1.0])
                + (Simd32x4::from(self[e5]) * other.group1().xyz().with_w(other[e12345])),
            // e1, e2, e3, e4
            self.group0().xx().with_zw(self[e5], 0.0) * Simd32x3::from(1.0).with_w(0.0) * other.group0().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        7        0
    //    simd3        4        8        0
    //    simd4        2        6        0
    // Totals...
    // yes simd        6       21        0
    //  no simd       20       55        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[e12345]) * other.group0(),
            // e23, e31, e12, e45
            ((Simd32x3::from(self[e5]) * other.group0()) + (Simd32x3::from(self[e12345]) * other.group1().xyz())).with_w(other[e45] * self[e12345]),
            // e15, e25, e35, e1234
            ((Simd32x3::from(self[e5]) * other.group1().xyz()) + (Simd32x3::from(self[e12345]) * other.group2())).with_w(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e5]) * other.group0().with_w(other[e45]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1       18        0
    //    simd3        4        6        0
    //    simd4        5        8        0
    // Totals...
    // yes simd       10       32        0
    //  no simd       33       68        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            self.group0().yy().with_zw(self[e12345], self[e5]) * other.group0().with_w(other[e1234]),
            // e23, e31, e12, e45
            Simd32x4::from([other[e23] * self[e12345], other[e31] * self[e12345], other[e12] * self[e12345], other[e1234] * self[e5] * -1.0])
                + (self.group0().xx().with_zw(self[e5], self[e12345]) * other.group0().with_w(other[e45])),
            // e15, e25, e35, e1234
            ((Simd32x3::from(self[e5]) * other.group1().xyz()) + (Simd32x3::from(self[e5]) * other.group3().xyz()) + (Simd32x3::from(self[e12345]) * other.group2().xyz()))
                .with_w(other[e1234] * self[e12345]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([other[e41] * self[e5] * -1.0, other[e42] * self[e5] * -1.0, other[e43] * self[e5] * -1.0, other[e3215] * self[e12345]])
                + (self.group0().yy().with_zw(self[e12345], self[e5]) * other.group3().xyz().with_w(other[e45])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum> for DualNum {
    type Output = DualNum;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        2        6        0
    fn anti_sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return DualNum::from_groups(
            // e5, e12345
            Simd32x2::from([(other[e5] * self[e12345]) + (other[e12345] * self[e5]), other[e12345] * self[e12345]]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for DualNum {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        4        0
    //    simd3        1        2        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        2        8        0
    //  no simd        4       18        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(self[e12345]) * other.group0(),
            // e4235, e4315, e4125, e3215
            Simd32x3::from(0.0).with_w(self[e5] * other[e45]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for DualNum {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd3        2        4        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        4       12        0
    //  no simd        8       26        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            ((Simd32x3::from(self[e5]) * other.group1().xyz()) + (Simd32x3::from(self[e12345]) * other.group0().xyz())).with_w(self[e12345] * other[e45]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([other[e4235], other[e4315], other[e4125], 1.0]) * self.group0().yy().with_zw(self[e12345], (self[e5] * other[e45]) + (self[e12345] * other[e3215])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for DualNum {
    type Output = Line;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        2        6        0
    // no simd        6       18        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(self[e12345]) * other.group0(),
            // e235, e315, e125
            (Simd32x3::from(self[e5]) * other.group0()) + (Simd32x3::from(self[e12345]) * other.group1()),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for DualNum {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        2        6        0
    // no simd        8       24        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(self[e12345]) * other.group0(),
            // e235, e315, e125, e5
            (Simd32x4::from(self[e5]) * other.group0()) + (Simd32x4::from(self[e12345]) * other.group1()),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for DualNum {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       39        0
    //    simd2        2        4        0
    //    simd3        8       18        0
    //    simd4        8        9        0
    // Totals...
    // yes simd       26       70        0
    //  no simd       68      137        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from(self[e5]) * Simd32x2::from([other[e1234], other[e4]])) + (Simd32x2::from(self[e12345]) * other.group0()),
            // e1, e2, e3, e4
            ((Simd32x3::from(self[e5]) * other.group7()) + (Simd32x3::from(self[e12345]) * other.group1().xyz())).with_w(self[e12345] * other[e4]),
            // e5
            (self[e5] * other[e12345]) + (self[e12345] * other[e5]) - (self[e5] * other[e321]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e5] * other[e4235]) + (self[e12345] * other[e15]),
                (self[e5] * other[e4315]) + (self[e12345] * other[e25]),
                (self[e5] * other[e4125]) + (self[e12345] * other[e35]),
                self[e5] * other[e1234] * -1.0,
            ]) + (self.group0().xx().with_zw(self[e5], self[e12345]) * other.group5().with_w(other[e45])),
            // e41, e42, e43
            Simd32x3::from(self[e12345]) * other.group4(),
            // e23, e31, e12
            (Simd32x3::from(self[e5]) * other.group4()) + (Simd32x3::from(self[e12345]) * other.group5()),
            // e415, e425, e435, e321
            (Simd32x4::from(self[e5]) * other.group7().with_w(other[e4])) + (Simd32x4::from(self[e12345]) * other.group6()),
            // e423, e431, e412
            Simd32x3::from(self[e12345]) * other.group7(),
            // e235, e315, e125
            (Simd32x3::from(self[e5]) * other.group6().xyz()) + (Simd32x3::from(self[e12345]) * other.group8()) - (Simd32x3::from(self[e5]) * other.group1().xyz()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e5] * other[e41] * -1.0,
                self[e5] * other[e42] * -1.0,
                self[e5] * other[e43] * -1.0,
                (self[e5] * other[e45]) + (self[e12345] * other[e3215]),
            ]) + (self.group0().yy().with_zw(self[e12345], self[e5]) * other.group9().xyz().with_w(other[scalar])),
            // e1234
            self[e12345] * other[e1234],
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for DualNum {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        3        0
    //    simd3        1        2        0
    //    simd4        0        5        0
    // Totals...
    // yes simd        2       10        0
    //  no simd        4       29        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            self.group0().xx().with_zw(self[e5], 0.0) * Simd32x3::from(1.0).with_w(0.0) * other.group0().xyz().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e12345]) * other.group0(),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1       10        0
    //    simd3        1        2        0
    //    simd4        3        8        0
    // Totals...
    // yes simd        5       20        0
    //  no simd       16       48        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x3::from(0.0).with_w(self[e5] * other[e4]),
            // e415, e425, e435, e321
            Simd32x3::from(0.0).with_w(self[e5] * other[e4]),
            // e235, e315, e125, e5
            self.group0().xx().with_zw(self[e5], self[e12345]) * other.group0().xyz().with_w(other[e5]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e4
            Simd32x4::from(self[e12345]) * other.group0(),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for DualNum {
    type Output = AntiDualNum;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        3        0
    //    simd2        0        1        0
    // Totals...
    // yes simd        1        4        0
    //  no simd        1        5        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiDualNum::from_groups(/* e3215, scalar */ Simd32x2::from(other[scalar]) * self.group0()).geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        8        0
    //    simd3        2        3        0
    //    simd4        3        7        0
    // Totals...
    // yes simd        6       18        0
    //  no simd       19       45        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x3::from(0.0).with_w(self[e5] * other[e1234]),
            // e23, e31, e12, e45
            Simd32x3::from(0.0).with_w(self[e5] * other[e1234] * -1.0),
            // e15, e25, e35, e1234
            self.group0().xx().with_zw(self[e5], self[e12345]) * other.group0().xyz().with_w(other[e1234]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[e12345]) * other.group0(),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for DualNum {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2       11        0
    //    simd3        2        4        0
    //    simd4        6       11        0
    // Totals...
    // yes simd       10       26        0
    //  no simd       32       67        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([other[e423], other[e431], other[e412], 1.0]) * self.group0().yy().with_zw(self[e12345], (self[e5] * other[e4]) + (self[e12345] * other[e12345])),
            // e415, e425, e435, e321
            (Simd32x4::from(self[e5]) * other.group0().xyz().with_w(other[e4])) + (Simd32x4::from(self[e12345]) * other.group1()),
            // e235, e315, e125, e5
            (Simd32x4::from(self[e5]) * other.group1().xyz().with_w(other[e12345])) + (Simd32x4::from(self[e12345]) * other.group2())
                - (Simd32x4::from(self[e5]) * other.group3().xyz().with_w(other[e321])),
            // e1, e2, e3, e4
            ((Simd32x3::from(self[e5]) * other.group0().xyz()) + (Simd32x3::from(self[e12345]) * other.group3().xyz())).with_w(self[e12345] * other[e4]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for DualNum {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       21        0
    //    simd3        4        6        0
    //    simd4        5        8        0
    // Totals...
    // yes simd       12       35        0
    //  no simd       35       71        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([other[e41], other[e42], other[e43], 1.0]) * self.group0().yy().with_zw(self[e12345], (self[e5] * other[e1234]) + (self[e12345] * other[scalar])),
            // e23, e31, e12, e45
            Simd32x4::from([self[e12345] * other[e23], self[e12345] * other[e31], self[e12345] * other[e12], self[e5] * other[e1234] * -1.0])
                + (self.group0().xx().with_zw(self[e5], self[e12345]) * other.group0().xyz().with_w(other[e45])),
            // e15, e25, e35, e1234
            ((Simd32x3::from(self[e5]) * other.group1().xyz()) + (Simd32x3::from(self[e5]) * other.group3().xyz()) + (Simd32x3::from(self[e12345]) * other.group2().xyz()))
                .with_w(self[e12345] * other[e1234]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e5] * other[e41] * -1.0,
                self[e5] * other[e42] * -1.0,
                self[e5] * other[e43] * -1.0,
                (self[e5] * other[e45]) + (self[e12345] * other[e3215]),
            ]) + (self.group0().yy().with_zw(self[e12345], self[e5]) * other.group3().xyz().with_w(other[scalar])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl std::ops::Div<anti_sandwich> for FlatPoint {
    type Output = anti_sandwich_partial<FlatPoint>;
    fn div(self, _rhs: anti_sandwich) -> Self::Output {
        anti_sandwich_partial(self)
    }
}
impl AntiSandwich<AntiCircleRotor> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       21       45        0
    //    simd3        6       10        0
    //    simd4       10       13        0
    // Totals...
    // yes simd       37       68        0
    //  no simd       79      127        0
    fn anti_sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([self[e45], self[e45], self[e45], 1.0])
                * other
                    .group0()
                    .with_w((other[e41] * self[e15]) + (other[e42] * self[e25]) + (other[e43] * self[e35]) - (other[e45] * self[e45]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            Simd32x4::from([
                other[e43] * self[e25] * -1.0,
                other[e41] * self[e35] * -1.0,
                other[e42] * self[e15] * -1.0,
                (other[e42] * self[e25]) + (other[e43] * self[e35]) + (other[scalar] * self[e45]),
            ]) + (self.group0().zxyx() * other.group0().yzx().with_w(other[e41])),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(other[e12] * self[e25]) - (other[e45] * self[e15]) - (other[scalar] * self[e15]),
                -(other[e23] * self[e35]) - (other[e45] * self[e25]) - (other[scalar] * self[e25]),
                -(other[e31] * self[e15]) - (other[e45] * self[e35]) - (other[scalar] * self[e35]),
                other[e12] * self[e35],
            ]) + (other.group1().yzxx() * self.group0().zxyx())
                + (self.group0().wwwy() * other.group2().xyz().with_w(other[e31])),
            // e1, e2, e3, e4
            (Simd32x3::from(self[e45]) * other.group1().xyz()).with_w(0.0) + (other.group0().yzx() * self.group0().zxy()).with_w(0.0)
                - (other.group0().zxy() * self.group0().yzx()).with_w(0.0),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDipoleInversion> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       20        0
    //    simd3        8       10        0
    //    simd4       15       20        0
    // Totals...
    // yes simd       34       50        0
    //  no simd       95      130        0
    fn anti_sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([self[e45], self[e45], self[e45], 1.0])
                * other
                    .group0()
                    .with_w(-(other[e423] * self[e15]) - (other[e431] * self[e25]) - (other[e412] * self[e35]) - (other[e321] * self[e45])),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(other[e431] * self[e35]) - (other[e1] * self[e45]),
                -(other[e412] * self[e15]) - (other[e2] * self[e45]),
                -(other[e423] * self[e25]) - (other[e3] * self[e45]),
                other[e412] * self[e35],
            ]) + (self.group0().xyzy() * other.group2().www().with_w(other[e431]))
                + (self.group0().yzxx() * other.group0().zxy().with_w(other[e423])),
            // e15, e25, e35, e1234
            ((other.group1().zxy() * self.group0().yzx()) + (other.group3().yzx() * self.group0().zxy())
                - (Simd32x3::from(other[e321]) * self.group0().xyz())
                - (Simd32x3::from(self[e45]) * other.group2().xyz())
                - (other.group1().yzx() * self.group0().zxy())
                - (other.group3().zxy() * self.group0().yzx()))
            .with_w(other[e4] * self[e45]),
            // e4235, e4315, e4125, e3215
            (self.group0().zxyx() * other.group0().yzx().with_w(other[e1]))
                + (self.group0().wwwy() * other.group1().xyz().with_w(other[e2]))
                + Simd32x3::from(0.0).with_w((other[e3] * self[e35]) - (other[e435] * self[e35]) - (other[e5] * self[e45]))
                - (self.group0().xyzy() * other.group2().www().with_w(other[e425]))
                - (self.group0().yzxx() * other.group0().zxy().with_w(other[e415])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum> for FlatPoint {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        9        0
    //    simd4        2        7        0
    // Totals...
    // yes simd        6       16        0
    //  no simd       12       37        0
    fn anti_sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(other[scalar]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            Simd32x3::from(0.0).with_w(other[e3215] * self[e45]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlatPoint> for FlatPoint {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        7        0
    //    simd3        4        6        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        7       15        0
    //  no simd       15       33        0
    fn anti_sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x3::from(0.0).with_w(other[e321] * self[e45] * -1.0),
            // e15, e25, e35, e3215
            (-(Simd32x3::from(other[e321]) * self.group0().xyz()) - (Simd32x3::from(self[e45]) * other.group0().xyz())).with_w(0.0),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlector> for FlatPoint {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       13        0
    //    simd3        3        4        0
    //    simd4        2        6        0
    // Totals...
    // yes simd       12       23        0
    //  no simd       24       49        0
    fn anti_sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(self[e45]) * other.group1().xyz().with_w(other[e321]) * Simd32x4::from(-1.0),
            // e15, e25, e35, e3215
            Simd32x4::from([
                -(other[e321] * self[e15]) - (other[e3] * self[e25]),
                -(other[e321] * self[e25]) - (other[e1] * self[e35]),
                -(other[e321] * self[e35]) - (other[e2] * self[e15]),
                (other[e2] * self[e25]) + (other[e3] * self[e35]),
            ]) + (other.group1().yzxx() * self.group0().zxyx())
                - (Simd32x4::from(self[e45]) * other.group0().xyz().with_w(other[e5])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiLine> for FlatPoint {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       11        0
    //    simd3        0        3        0
    //    simd4        4        6        0
    // Totals...
    // yes simd       10       20        0
    //  no simd       22       44        0
    fn anti_sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x3::from(self[e45]) * other.group1()).with_w(0.0) + (other.group0().yzx() * self.group0().zxy()).with_w(0.0)
                - (other.group0().zxy() * self.group0().yzx()).with_w(0.0),
            // e1, e2, e3, e5
            Simd32x4::from([self[e45], self[e45], self[e45], 1.0]) * other.group0().with_w((other[e23] * self[e15]) + (other[e31] * self[e25]) + (other[e12] * self[e35])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiMotor> for FlatPoint {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       13        0
    //    simd3        3        4        0
    //    simd4        2        6        0
    // Totals...
    // yes simd       12       23        0
    //  no simd       24       49        0
    fn anti_sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            ((Simd32x3::from(self[e45]) * other.group1().xyz()) + (other.group0().yzx() * self.group0().zxy())
                - (Simd32x3::from(other[scalar]) * self.group0().xyz())
                - (other.group0().zxy() * self.group0().yzx()))
            .with_w(other[scalar] * self[e45]),
            // e1, e2, e3, e5
            Simd32x4::from([self[e45], self[e45], self[e45], 1.0])
                * other
                    .group0()
                    .xyz()
                    .with_w((other[e23] * self[e15]) + (other[e31] * self[e25]) + (other[e12] * self[e35]) + (other[e3215] * self[e45])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiPlane> for FlatPoint {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        7        0
    //    simd3        3        4        0
    //    simd4        2        7        0
    // Totals...
    // yes simd        9       18        0
    //  no simd       21       47        0
    fn anti_sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x3::from(1.0).with_w(0.0) * self.group0().www().with_w(0.0) * other.group0().xyz().with_w(0.0) * Simd32x4::from([-1.0, -1.0, -1.0, 0.0]),
            // e15, e25, e35, e3215
            (other.group0().yzxx() * self.group0().zxyx()) + Simd32x3::from(0.0).with_w((other[e2] * self[e25]) + (other[e3] * self[e35]))
                - (other.group0().zxyw() * self.group0().yzxw()),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiScalar> for FlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd3        1        2        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        1        6        0
    //  no simd        3       16        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return FlatPoint::from_groups(/* e15, e25, e35, e45 */ Simd32x4::from(other[e12345]) * self.group0()).geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       11       25        0
    //    simd3        3        8        0
    //    simd4       14       16        0
    // Totals...
    // yes simd       28       49        0
    //  no simd       76      113        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([self[e45], self[e45], self[e45], 1.0])
                * other
                    .group0()
                    .with_w(-(other[e423] * self[e15]) - (other[e431] * self[e25]) - (other[e412] * self[e35]) - (other[e321] * self[e45])),
            // e23, e31, e12, e45
            Simd32x4::from([
                other[e431] * self[e35] * -1.0,
                other[e412] * self[e15] * -1.0,
                other[e423] * self[e25] * -1.0,
                (other[e431] * self[e25]) + (other[e412] * self[e35]),
            ]) + (self.group0().yzxx() * other.group0().zxy().with_w(other[e423])),
            // e15, e25, e35, e1234
            (other.group1().zxy() * self.group0().yzx()).with_w(0.0)
                - (Simd32x3::from(other[e321]) * self.group0().xyz()).with_w(0.0)
                - (Simd32x3::from(self[e45]) * other.group2()).with_w(0.0)
                - (other.group1().yzx() * self.group0().zxy()).with_w(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e431] * self[e35]) + (other[e415] * self[e45]),
                (other[e412] * self[e15]) + (other[e425] * self[e45]),
                (other[e423] * self[e25]) + (other[e435] * self[e45]),
                -(other[e425] * self[e25]) - (other[e435] * self[e35]),
            ]) - (self.group0().yzxx() * other.group0().zxy().with_w(other[e415])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       26        0
    //    simd3        3        9        0
    //    simd4       15       16        0
    // Totals...
    // yes simd       30       51        0
    //  no simd       81      117        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([self[e45], self[e45], self[e45], 1.0])
                * other
                    .group0()
                    .with_w(-(other[e423] * self[e15]) - (other[e431] * self[e25]) - (other[e412] * self[e35]) - (other[e321] * self[e45])),
            // e23, e31, e12, e45
            Simd32x4::from([
                other[e431] * self[e35] * -1.0,
                other[e412] * self[e15] * -1.0,
                other[e423] * self[e25] * -1.0,
                (other[e431] * self[e25]) + (other[e412] * self[e35]) + (other[e12345] * self[e45]),
            ]) + (self.group0().yzxx() * other.group0().zxy().with_w(other[e423])),
            // e15, e25, e35, e1234
            (Simd32x3::from(other[e12345]) * self.group0().xyz()).with_w(0.0) + (other.group1().zxy() * self.group0().yzx()).with_w(0.0)
                - (Simd32x3::from(other[e321]) * self.group0().xyz()).with_w(0.0)
                - (Simd32x3::from(self[e45]) * other.group2().xyz()).with_w(0.0)
                - (other.group1().yzx() * self.group0().zxy()).with_w(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e431] * self[e35]) + (other[e415] * self[e45]),
                (other[e412] * self[e15]) + (other[e425] * self[e45]),
                (other[e423] * self[e25]) + (other[e435] * self[e45]),
                -(other[e425] * self[e25]) - (other[e435] * self[e35]),
            ]) - (self.group0().yzxx() * other.group0().zxy().with_w(other[e415])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       41        0
    //    simd3        6       10        0
    //    simd4       10       13        0
    // Totals...
    // yes simd       33       64        0
    //  no simd       75      123        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([self[e45], self[e45], self[e45], 1.0])
                * other
                    .group0()
                    .with_w((other[e41] * self[e15]) + (other[e42] * self[e25]) + (other[e43] * self[e35]) - (other[e45] * self[e45]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            Simd32x4::from([
                other[e43] * self[e25] * -1.0,
                other[e41] * self[e35] * -1.0,
                other[e42] * self[e15] * -1.0,
                (other[e42] * self[e25]) + (other[e43] * self[e35]),
            ]) + (self.group0().zxyx() * other.group0().yzx().with_w(other[e41])),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(other[e12] * self[e25]) - (other[e45] * self[e15]),
                -(other[e23] * self[e35]) - (other[e45] * self[e25]),
                -(other[e31] * self[e15]) - (other[e45] * self[e35]),
                other[e12] * self[e35],
            ]) + (other.group1().yzxy() * self.group0().zxyy())
                + (self.group0().wwwx() * other.group2().with_w(other[e23])),
            // e1, e2, e3, e4
            (Simd32x3::from(self[e45]) * other.group1().xyz()).with_w(0.0) + (other.group0().yzx() * self.group0().zxy()).with_w(0.0)
                - (other.group0().zxy() * self.group0().yzx()).with_w(0.0),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       29       52        0
    //    simd3        9       11        0
    //    simd4        9       14        0
    // Totals...
    // yes simd       47       77        0
    //  no simd       92      141        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([self[e45], self[e45], self[e45], 1.0])
                * other
                    .group0()
                    .with_w((other[e41] * self[e15]) + (other[e42] * self[e25]) + (other[e43] * self[e35]) - (other[e45] * self[e45]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(other[e43] * self[e25]) - (other[e1234] * self[e15]) - (other[e4235] * self[e45]),
                -(other[e41] * self[e35]) - (other[e1234] * self[e25]) - (other[e4315] * self[e45]),
                -(other[e42] * self[e15]) - (other[e1234] * self[e35]) - (other[e4125] * self[e45]),
                (other[e42] * self[e25]) + (other[e43] * self[e35]),
            ]) + (self.group0().zxyx() * other.group0().yzx().with_w(other[e41])),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(other[e12] * self[e25]) - (other[e45] * self[e15]) - (other[e4125] * self[e25]),
                -(other[e23] * self[e35]) - (other[e45] * self[e25]) - (other[e4235] * self[e35]),
                -(other[e31] * self[e15]) - (other[e45] * self[e35]) - (other[e4315] * self[e15]),
                (other[e4235] * self[e15]) + (other[e4315] * self[e25]) + (other[e4125] * self[e35]) + (other[e3215] * self[e45]),
            ]) + (other.group1().yzxx() * self.group0().zxyx())
                + (self.group0().zxyz() * other.group3().yzx().with_w(other[e12]))
                + (self.group0().wwwy() * other.group2().xyz().with_w(other[e31])),
            // e1, e2, e3, e4
            ((Simd32x3::from(self[e45]) * other.group1().xyz()) + (other.group0().yzx() * self.group0().zxy())
                - (Simd32x3::from(other[e1234]) * self.group0().xyz())
                - (other.group0().zxy() * self.group0().yzx()))
            .with_w(other[e1234] * self[e45] * -1.0),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum> for FlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       10        0
    //    simd4        2        6        0
    // Totals...
    // yes simd        6       16        0
    //  no simd       12       34        0
    fn anti_sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(other[e12345]) * self.group0(),
            // e4235, e4315, e4125, e3215
            Simd32x3::from(0.0).with_w(other[e5] * self[e45] * -1.0),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for FlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3        7        0
    //    simd3        4        6        0
    //    simd4        0        2        0
    // Totals...
    // yes simd        7       15        0
    //  no simd       15       33        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x3::from(0.0).with_w(other[e45] * self[e45] * -1.0),
            // e235, e315, e125, e5
            ((Simd32x3::from(self[e45]) * other.group0().xyz()) - (Simd32x3::from(other[e45]) * self.group0().xyz())).with_w(0.0),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for FlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       13        0
    //    simd3        3        4        0
    //    simd4        2        6        0
    // Totals...
    // yes simd       12       23        0
    //  no simd       24       49        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(self[e45]) * other.group1().xyz().with_w(other[e45]) * Simd32x4::from(-1.0),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e15] * other[e45]) - (self[e25] * other[e4125]),
                -(self[e25] * other[e45]) - (self[e35] * other[e4235]),
                -(self[e15] * other[e4315]) - (self[e35] * other[e45]),
                (self[e35] * other[e4125]) + (self[e45] * other[e3215]),
            ]) + (self.group0().zxyx() * other.group1().yzxx())
                + (self.group0().wwwy() * other.group0().xyz().with_w(other[e4315])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for FlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       11        0
    //    simd3        0        3        0
    //    simd4        4        6        0
    // Totals...
    // yes simd       10       20        0
    //  no simd       22       44        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            (other.group0().zxy() * self.group0().yzx()).with_w(0.0)
                - (Simd32x3::from(self[e45]) * other.group1()).with_w(0.0)
                - (other.group0().yzx() * self.group0().zxy()).with_w(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e45], self[e45], self[e45], 1.0]) * other.group0().with_w(-(self[e15] * other[e415]) - (self[e25] * other[e425]) - (self[e35] * other[e435])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for FlatPoint {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       13        0
    //    simd3        3        4        0
    //    simd4        2        6        0
    // Totals...
    // yes simd       12       23        0
    //  no simd       24       49        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            ((self.group0().xyx() * other.group0().wwy()) + (self.group0().yzz() * other.group0().zxw())
                - (Simd32x3::from(self[e45]) * other.group1().xyz())
                - (self.group0().zxy() * other.group0().yzx()))
            .with_w(self[e45] * other[e12345]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([other[e415], other[e425], other[e435], 1.0])
                * self
                    .group0()
                    .www()
                    .with_w(-(self[e15] * other[e415]) - (self[e25] * other[e425]) - (self[e35] * other[e435]) - (self[e45] * other[e5])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for FlatPoint {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       55       92        0
    //    simd2        2        2        0
    //    simd3       24       43        0
    //    simd4       16       11        0
    // Totals...
    // yes simd       97      148        0
    //  no simd      195      269        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                -(self[e25] * other[e431]) - (self[e35] * other[e412]) - (self[e45] * other[e321]),
                (self[e15] * other[e41]) + (self[e25] * other[e42]) + (self[e35] * other[e43]),
            ]) - (Simd32x2::from([other[e423], other[e45]]) * self.group0().xw()),
            // e1, e2, e3, e4
            ((Simd32x3::from(self[e45]) * other.group5()) + (other.group4().yzx() * self.group0().zxy())
                - (Simd32x3::from(other[e1234]) * self.group0().xyz())
                - (other.group4().zxy() * self.group0().yzx()))
            .with_w(self[e45] * other[e1234] * -1.0),
            // e5
            (self[e15] * other[e23])
                + (self[e15] * other[e4235])
                + (self[e25] * other[e31])
                + (self[e25] * other[e4315])
                + (self[e35] * other[e12])
                + (self[e35] * other[e4125])
                + (self[e45] * other[e3215]),
            // e15, e25, e35, e45
            Simd32x4::from([
                -(self[e15] * other[e321]) - (self[e25] * other[e3]) - (self[e35] * other[e425]) - (self[e45] * other[e235]),
                -(self[e15] * other[e435]) - (self[e25] * other[e321]) - (self[e35] * other[e1]) - (self[e45] * other[e315]),
                -(self[e15] * other[e2]) - (self[e25] * other[e415]) - (self[e35] * other[e321]) - (self[e45] * other[e125]),
                self[e35] * other[e412],
            ]) + (Simd32x4::from(other[e12345]) * self.group0())
                + (Simd32x4::from([other[e2], other[e415], other[e1], self[e25]]) * self.group0().zzy().with_w(other[e431]))
                + (Simd32x4::from([other[e435], other[e3], other[e425], self[e15]]) * self.group0().yxx().with_w(other[e423])),
            // e41, e42, e43
            Simd32x3::from(self[e45]) * other.group7(),
            // e23, e31, e12
            (Simd32x3::from(other[e4]) * self.group0().xyz()) + (other.group7().zxy() * self.group0().yzx())
                - (Simd32x3::from(self[e45]) * other.group1().xyz())
                - (other.group7().yzx() * self.group0().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(self[e15] * other[e1234]) - (self[e25] * other[e43]) - (self[e45] * other[e4235]),
                -(self[e25] * other[e1234]) - (self[e35] * other[e41]) - (self[e45] * other[e4315]),
                -(self[e15] * other[e42]) - (self[e35] * other[e1234]) - (self[e45] * other[e4125]),
                (self[e15] * other[e41]) + (self[e25] * other[e42]) + (self[e35] * other[e43]),
            ]) + (self.group0().zxyw() * other.group4().yzx().with_w(other[scalar])),
            // e423, e431, e412
            Simd32x3::from(self[e45]) * other.group4() * Simd32x3::from(-1.0),
            // e235, e315, e125
            (Simd32x3::from(self[e45]) * other.group3().xyz()) + (other.group5().yzx() * self.group0().zxy()) + (self.group0().zxy() * other.group9().yzx())
                - (Simd32x3::from(other[scalar]) * self.group0().xyz())
                - (Simd32x3::from([other[e45], other[e45], other[e4315]]) * self.group0().xyx())
                - (Simd32x3::from([other[e4125], other[e4235], other[e45]]) * self.group0().yzz())
                - (other.group5().zxy() * self.group0().yzx()),
            // e4235, e4315, e4125, e3215
            (self.group0().wwwy() * other.group6().xyz().with_w(other[e2]))
                + Simd32x3::from(0.0).with_w((self[e35] * other[e3]) - (self[e35] * other[e435]) - (self[e45] * other[e5]))
                + (other.group7().yzx() * self.group0().zxy()).with_w(self[e15] * other[e1])
                - (self.group0().xyzy() * other.group1().www().with_w(other[e425]))
                - (other.group7().zxy() * self.group0().yzx()).with_w(self[e15] * other[e415]),
            // e1234
            self[e45] * other[e4],
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for FlatPoint {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       14        0
    //    simd3        3        4        0
    //    simd4        1        6        0
    // Totals...
    // yes simd        9       24        0
    //  no simd       18       50        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x3::from(1.0).with_w(0.0) * self.group0().www().with_w(0.0) * other.group0().xyz().with_w(0.0) * Simd32x4::from([-1.0, -1.0, -1.0, 0.0]),
            // e235, e315, e125, e5
            Simd32x4::from([
                self[e25] * other[e4125] * -1.0,
                self[e35] * other[e4235] * -1.0,
                self[e15] * other[e4315] * -1.0,
                (self[e25] * other[e4315]) + (self[e35] * other[e4125]) + (self[e45] * other[e3215]),
            ]) + (self.group0().zxyx() * other.group0().yzxx()),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       15        0
    //    simd3        5        8        0
    //    simd4        9       13        0
    // Totals...
    // yes simd       20       36        0
    //  no simd       57       91        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            ((Simd32x3::from(other[e4]) * self.group0().xyz()) - (Simd32x3::from(self[e45]) * other.group0().xyz())).with_w(0.0),
            // e15, e25, e35, e1234
            ((self.group0().zxy() * other.group0().yzx()) - (self.group0().yzx() * other.group0().zxy())).with_w(self[e45] * other[e4]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([other[e4], other[e4], other[e4], 1.0])
                * self
                    .group0()
                    .xyz()
                    .with_w((self[e15] * other[e1]) + (self[e25] * other[e2]) + (self[e35] * other[e3]) - (self[e45] * other[e5]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for FlatPoint {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        2        0
    //    simd3        1        2        0
    //    simd4        0        3        0
    // Totals...
    // yes simd        1        7        0
    //  no simd        3       20        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiFlatPoint::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(other[scalar]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       31        0
    //    simd3        7       10        0
    //    simd4        4        9        0
    // Totals...
    // yes simd       27       50        0
    //  no simd       53       97        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            (-(Simd32x3::from(self[e45]) * other.group0().xyz()) - (Simd32x3::from(other[e1234]) * self.group0().xyz())).with_w(0.0),
            // e235, e315, e125, e4
            ((self.group0().zxy() * other.group0().yzx()) - (self.group0().yzx() * other.group0().zxy())).with_w(self[e45] * other[e1234] * -1.0),
            // e1, e2, e3, e5
            Simd32x4::from([other[e1234], other[e1234], other[e1234], 1.0])
                * self
                    .group0()
                    .xyz()
                    .with_w((self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125]) + (self[e45] * other[e3215]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for FlatPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       21        0
    //    simd3        9       11        0
    //    simd4       15       20        0
    // Totals...
    // yes simd       36       52        0
    //  no simd       99      134        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([other[e423], other[e431], other[e412], 1.0])
                * self
                    .group0()
                    .www()
                    .with_w(-(self[e15] * other[e423]) - (self[e25] * other[e431]) - (self[e35] * other[e412]) - (self[e45] * other[e321])),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(self[e35] * other[e431]) - (self[e45] * other[e1]),
                -(self[e15] * other[e412]) - (self[e45] * other[e2]),
                -(self[e25] * other[e423]) - (self[e45] * other[e3]),
                (self[e35] * other[e412]) + (self[e45] * other[e12345]),
            ]) + (self.group0().xyxx() * other.group3().ww().with_zw(other[e431], other[e423]))
                + (self.group0().yzzy() * other.group0().zx().with_zw(other[e4], other[e431])),
            // e15, e25, e35, e1234
            ((Simd32x3::from(self[e15]) * Simd32x3::from([other[e12345], other[e3], other[e425]]))
                + (Simd32x3::from(self[e25]) * Simd32x3::from([other[e435], other[e12345], other[e1]]))
                + (Simd32x3::from(self[e35]) * Simd32x3::from([other[e2], other[e415], other[e12345]]))
                - (Simd32x3::from(self[e15]) * Simd32x3::from([other[e321], other[e435], other[e2]]))
                - (Simd32x3::from(self[e25]) * Simd32x3::from([other[e3], other[e321], other[e415]]))
                - (Simd32x3::from(self[e35]) * Simd32x3::from([other[e425], other[e1], other[e321]]))
                - (Simd32x3::from(self[e45]) * other.group2().xyz()))
            .with_w(self[e45] * other[e4]),
            // e4235, e4315, e4125, e3215
            (self.group0().zxyx() * other.group0().yzx().with_w(other[e1]))
                + (self.group0().wwwy() * other.group1().xyz().with_w(other[e2]))
                + Simd32x3::from(0.0).with_w((self[e35] * other[e3]) - (self[e35] * other[e435]) - (self[e45] * other[e5]))
                - (self.group0().xyxx() * other.group3().ww().with_zw(other[e431], other[e415]))
                - (self.group0().yzzy() * other.group0().zx().with_zw(other[e4], other[e425])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for FlatPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       33       56        0
    //    simd3        9       11        0
    //    simd4        9       14        0
    // Totals...
    // yes simd       51       81        0
    //  no simd       96      145        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([other[e41], other[e42], other[e43], 1.0])
                * self
                    .group0()
                    .www()
                    .with_w((self[e15] * other[e41]) + (self[e25] * other[e42]) + (self[e35] * other[e43]) - (self[e45] * other[e45]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(self[e15] * other[e1234]) - (self[e25] * other[e43]) - (self[e45] * other[e4235]),
                -(self[e25] * other[e1234]) - (self[e35] * other[e41]) - (self[e45] * other[e4315]),
                -(self[e15] * other[e42]) - (self[e35] * other[e1234]) - (self[e45] * other[e4125]),
                (self[e25] * other[e42]) + (self[e35] * other[e43]) + (self[e45] * other[scalar]),
            ]) + (self.group0().zxyx() * other.group0().yzxx()),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e15] * other[scalar]) - (self[e15] * other[e45]) - (self[e25] * other[e12]) - (self[e25] * other[e4125]),
                -(self[e25] * other[scalar]) - (self[e25] * other[e45]) - (self[e35] * other[e23]) - (self[e35] * other[e4235]),
                -(self[e15] * other[e31]) - (self[e15] * other[e4315]) - (self[e35] * other[scalar]) - (self[e35] * other[e45]),
                (self[e25] * other[e4315]) + (self[e35] * other[e12]) + (self[e35] * other[e4125]) + (self[e45] * other[e3215]),
            ]) + (self.group0().zxyx() * other.group1().yzxx())
                + (self.group0().zxyx() * other.group3().yzxx())
                + (self.group0().wwwy() * other.group2().xyz().with_w(other[e31])),
            // e1, e2, e3, e4
            ((Simd32x3::from(self[e45]) * other.group1().xyz()) + (self.group0().zxy() * other.group0().yzx())
                - (Simd32x3::from([other[e43], other[e41], other[e1234]]) * self.group0().yzz())
                - (Simd32x3::from([other[e1234], other[e1234], other[e42]]) * self.group0().xyx()))
            .with_w(self[e45] * other[e1234] * -1.0),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl std::ops::Div<anti_sandwich> for Flector {
    type Output = anti_sandwich_partial<Flector>;
    fn div(self, _rhs: anti_sandwich) -> Self::Output {
        anti_sandwich_partial(self)
    }
}
impl AntiSandwich<AntiCircleRotor> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       52       79        0
    //    simd3        0        4        0
    //    simd4       35       33        0
    // Totals...
    // yes simd       87      116        0
    //  no simd      192      223        0
    fn anti_sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                other[e43] * self[e4315] * -1.0,
                other[e42] * self[e45] * -1.0,
                other[e43] * self[e45] * -1.0,
                (other[e42] * self[e25]) + (other[e43] * self[e35]),
            ]) + (other.group0().yzx() * self.group1().zxy()).with_w(other[e41] * self[e15])
                - (Simd32x4::from([self[e45], self[e4125], self[e4235], self[e45]]) * other.group0().xxy().with_w(other[e45])),
            // e415, e425, e435, e321
            (self.group0().zxyx() * other.group0().yzx().with_w(other[e41]))
                + Simd32x3::from(0.0).with_w((other[e42] * self[e25]) + (other[e43] * self[e35]) + (other[scalar] * self[e45]))
                - (Simd32x4::from([self[e25], self[e3215], self[e3215], self[e4315]]) * other.group0().zyz().with_w(other[e31]))
                - (Simd32x4::from([self[e3215], self[e35], self[e15], self[e4235]]) * other.group0().xxy().with_w(other[e23]))
                - (other.group1().wwwz() * self.group1().xyzz()),
            // e235, e315, e125, e5
            (Simd32x4::from([self[e45], self[e4125], self[e4235], self[e25]]) * other.group2().xxy().with_w(other[e31]))
                + (Simd32x4::from([self[e4315], self[e45], self[e45], self[e35]]) * other.group2().zyz().with_w(other[e12]))
                + (other.group1().yzxx() * self.group0().zxyx())
                - (Simd32x4::from(other[scalar]) * self.group0().xyz().with_w(self[e3215]))
                - (Simd32x4::from([self[e25], self[e3215], self[e3215], self[e4235]]) * other.group1().zyz().with_w(other[e15]))
                - (Simd32x4::from([self[e3215], self[e35], self[e15], self[e3215]]) * other.group1().xxyw())
                - (other.group2().yzxz() * self.group1().zxyz())
                - (other.group1().www() * self.group0().xyz()).with_w(other[e25] * self[e4315]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[scalar] * self[e4235]) - (other[e41] * self[e3215]) - (other[e43] * self[e25]) - (other[e31] * self[e4125]),
                (other[scalar] * self[e4315]) - (other[e41] * self[e35]) - (other[e42] * self[e3215]) - (other[e12] * self[e4235]),
                (other[scalar] * self[e4125]) - (other[e42] * self[e15]) - (other[e43] * self[e3215]) - (other[e23] * self[e4315]),
                0.0,
            ]) + (Simd32x4::from([self[e45], self[e4125], self[e4235], self[e4315]]) * other.group1().xxy().with_w(other[e42]))
                + (Simd32x4::from([self[e4315], self[e45], self[e45], self[e4125]]) * other.group1().zyz().with_w(other[e43]))
                + (other.group0().yzx() * self.group0().zxy()).with_w(other[e41] * self[e4235]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDipoleInversion> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       43       68        0
    //    simd3        0        7        0
    //    simd4       46       41        0
    // Totals...
    // yes simd       89      116        0
    //  no simd      227      253        0
    fn anti_sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([self[e45], self[e4125], self[e4235], self[e3215]]) * other.group0().xxy().with_w(other[e4]))
                + (Simd32x4::from([self[e4315], self[e45], self[e45], self[e4235]]) * other.group0().zyz().with_w(other[e1]))
                + (self.group1().xyzy() * other.group2().www().with_w(other[e2]))
                + Simd32x3::from(0.0).with_w((other[e3] * self[e4125]) - (other[e431] * self[e25]) - (other[e412] * self[e35]) - (other[e321] * self[e45]))
                - (other.group0().yzx() * self.group1().zxy()).with_w(other[e423] * self[e15]),
            // e23, e31, e12, e45
            Simd32x4::from([other[e2] * self[e4125], other[e3] * self[e4235], other[e1] * self[e4315], 0.0])
                + (Simd32x4::from([self[e25], self[e3215], self[e3215], self[e25]]) * other.group0().zyz().with_w(other[e431]))
                + (Simd32x4::from([self[e3215], self[e35], self[e15], self[e15]]) * other.group0().xxy().with_w(other[e423]))
                + (self.group0().xyzz() * other.group2().www().with_w(other[e412]))
                - (Simd32x4::from([self[e45], self[e4125], self[e4235], self[e4125]]) * other.group3().xxy().with_w(other[e435]))
                - (Simd32x4::from([self[e4315], self[e45], self[e45], self[e3215]]) * other.group3().zyz().with_w(other[e4]))
                - (other.group1().wwwy() * self.group1().xyzy())
                - (other.group0().yzx() * self.group0().zxy()).with_w(other[e415] * self[e4235]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e435] * self[e25]) + (other[e315] * self[e4125]) + (other[e2] * self[e35])
                    - (other[e125] * self[e4315])
                    - (other[e1] * self[e3215])
                    - (other[e3] * self[e25])
                    - (other[e5] * self[e4235]),
                (other[e425] * self[e3215]) + (other[e125] * self[e4235]) + (other[e3] * self[e15])
                    - (other[e315] * self[e45])
                    - (other[e1] * self[e35])
                    - (other[e2] * self[e3215])
                    - (other[e5] * self[e4315]),
                (other[e435] * self[e3215]) + (other[e235] * self[e4315]) + (other[e1] * self[e25])
                    - (other[e125] * self[e45])
                    - (other[e2] * self[e15])
                    - (other[e3] * self[e3215])
                    - (other[e5] * self[e4125]),
                0.0,
            ]) + (Simd32x4::from([self[e3215], self[e35], self[e15], self[e45]]) * other.group1().xxy().with_w(other[e4]))
                - (Simd32x4::from([self[e45], self[e4125], self[e4235], self[e4125]]) * other.group2().xxy().with_w(other[e412]))
                - (other.group1().yzx() * self.group0().zxy()).with_w(other[e423] * self[e4235])
                - (other.group1().www() * self.group0().xyz()).with_w(other[e431] * self[e4315]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([self[e45], self[e4125], self[e4235], self[e4315]]) * other.group1().xxy().with_w(other[e315]))
                + (Simd32x4::from([self[e4315], self[e45], self[e45], self[e4125]]) * other.group1().zyz().with_w(other[e125]))
                + Simd32x3::from(0.0).with_w((other[e1] * self[e15]) + (other[e2] * self[e25]) + (other[e3] * self[e35]) - (other[e5] * self[e45]))
                + (other.group0().yzx() * self.group0().zxy()).with_w(other[e235] * self[e4235])
                - (Simd32x4::from([self[e25], self[e3215], self[e3215], self[e25]]) * other.group0().zyz().with_w(other[e425]))
                - (Simd32x4::from([self[e3215], self[e35], self[e15], self[e15]]) * other.group0().xxy().with_w(other[e415]))
                - (other.group1().yzxz() * self.group1().zxy().with_w(self[e35]))
                - (other.group2().www() * self.group0().xyz()).with_w(other[e321] * self[e3215]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum> for Flector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       28        0
    //    simd3        1        3        0
    //    simd4        6        7        0
    // Totals...
    // yes simd       24       38        0
    //  no simd       44       65        0
    fn anti_sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            ((Simd32x3::from(other[e3215]) * self.group1().xyz()) - (Simd32x3::from(other[scalar]) * self.group0().xyz())).with_w(other[scalar] * self[e45]),
            // e1, e2, e3, e5
            Simd32x4::from([self[e4235], self[e4315], self[e4125], 1.0]) * other.group0().yy().with_zw(other[scalar], (other[e3215] * self[e45]) - (other[scalar] * self[e3215])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlatPoint> for Flector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       24        0
    //    simd4       10       13        0
    // Totals...
    // yes simd       26       37        0
    //  no simd       56       76        0
    fn anti_sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(other[e321]) * self.group1().xyz().with_w(self[e45]) * Simd32x4::from(-1.0),
            // e15, e25, e35, e3215
            Simd32x4::from([
                -(other[e125] * self[e4315]) - (other[e321] * self[e15]),
                -(other[e315] * self[e45]) - (other[e321] * self[e25]),
                -(other[e125] * self[e45]) - (other[e321] * self[e35]),
                (other[e315] * self[e4315]) + (other[e125] * self[e4125]),
            ]) + (other.group0().yzxx() * self.group1().zxyx())
                - (Simd32x4::from([self[e45], self[e4125], self[e4235], self[e3215]]) * other.group0().xxyw()),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlector> for Flector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       41        0
    //    simd3        0        1        0
    //    simd4       14       14        0
    // Totals...
    // yes simd       42       56        0
    //  no simd       84      100        0
    fn anti_sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                -(other[e1] * self[e45]) - (other[e3] * self[e4315]),
                -(other[e1] * self[e4125]) - (other[e2] * self[e45]),
                -(other[e2] * self[e4235]) - (other[e3] * self[e45]),
                (other[e2] * self[e4315]) + (other[e3] * self[e4125]),
            ]) + (other.group1().yzxx() * self.group1().zxyx())
                - (Simd32x4::from(other[e321]) * self.group1().xyz().with_w(self[e45])),
            // e15, e25, e35, e3215
            Simd32x4::from([
                -(other[e321] * self[e15]) - (other[e1] * self[e3215]) - (other[e3] * self[e25]) - (other[e5] * self[e4235]),
                -(other[e321] * self[e25]) - (other[e1] * self[e35]) - (other[e2] * self[e3215]) - (other[e5] * self[e4315]),
                -(other[e321] * self[e35]) - (other[e2] * self[e15]) - (other[e3] * self[e3215]) - (other[e5] * self[e4125]),
                (other[e125] * self[e4125]) + (other[e1] * self[e15]) + (other[e2] * self[e25]) + (other[e3] * self[e35]),
            ]) + (other.group0().yzxx() * self.group1().zxyx())
                + (other.group1().yzx() * self.group0().zxy()).with_w(other[e315] * self[e4315])
                - (Simd32x4::from([self[e45], self[e4125], self[e4235], self[e3215]]) * other.group0().xxyw())
                - (Simd32x4::from([self[e4315], self[e45], self[e45], self[e45]]) * other.group0().zyz().with_w(other[e5])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiLine> for Flector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       37        0
    //    simd3        0        1        0
    //    simd4       12       12        0
    // Totals...
    // yes simd       36       50        0
    //  no simd       72       88        0
    fn anti_sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (other[e31] * self[e35]) + (other[e15] * self[e45]) + (other[e35] * self[e4315]),
                (other[e12] * self[e15]) + (other[e15] * self[e4125]) + (other[e25] * self[e45]),
                (other[e23] * self[e25]) + (other[e25] * self[e4235]) + (other[e35] * self[e45]),
                0.0,
            ]) - (Simd32x4::from([self[e25], self[e3215], self[e3215], self[e4315]]) * other.group0().zyz().with_w(other[e31]))
                - (Simd32x4::from([self[e3215], self[e35], self[e15], self[e4235]]) * other.group0().xxy().with_w(other[e23]))
                - (self.group1().zxyz() * other.group1().yzx().with_w(other[e12])),
            // e1, e2, e3, e5
            (Simd32x4::from([self[e45], self[e4125], self[e4235], self[e15]]) * other.group0().xxy().with_w(other[e23]))
                + (Simd32x4::from([self[e4315], self[e45], self[e45], self[e25]]) * other.group0().zyz().with_w(other[e31]))
                + Simd32x3::from(0.0).with_w((other[e12] * self[e35]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]))
                - (self.group1().zxyx() * other.group0().yzx().with_w(other[e15])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiMotor> for Flector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       41        0
    //    simd3        0        1        0
    //    simd4       14       14        0
    // Totals...
    // yes simd       42       56        0
    //  no simd       84      100        0
    fn anti_sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (other[e15] * self[e45]) + (other[e35] * self[e4315]) + (other[e3215] * self[e4235]) - (other[e25] * self[e4125]),
                (other[e15] * self[e4125]) + (other[e25] * self[e45]) + (other[e3215] * self[e4315]) - (other[e35] * self[e4235]),
                (other[e25] * self[e4235]) + (other[e35] * self[e45]) + (other[e3215] * self[e4125]) - (other[e15] * self[e4315]),
                0.0,
            ]) + (other.group0().yzxw() * self.group0().zxyw())
                - (Simd32x4::from([self[e25], self[e3215], self[e3215], self[e4315]]) * other.group0().zyzy())
                - (Simd32x4::from([self[e3215], self[e35], self[e15], self[e4235]]) * other.group0().xxyx())
                - (other.group0().wwwz() * self.group0().xyz().with_w(self[e4125])),
            // e1, e2, e3, e5
            (Simd32x4::from([self[e45], self[e4125], self[e4235], self[e15]]) * other.group0().xxyx())
                + (Simd32x4::from([self[e4315], self[e45], self[e45], self[e25]]) * other.group0().zyzy())
                + (other.group0().wwwz() * self.group1().xyz().with_w(self[e35]))
                + Simd32x3::from(0.0).with_w((other[e3215] * self[e45]) - (other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]))
                - (other.group0().yzxw() * self.group1().zxyw()),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiPlane> for Flector {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       32        0
    //    simd4       11       12        0
    // Totals...
    // yes simd       31       44        0
    //  no simd       64       80        0
    fn anti_sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                -(other[e1] * self[e45]) - (other[e3] * self[e4315]),
                -(other[e1] * self[e4125]) - (other[e2] * self[e45]),
                -(other[e2] * self[e4235]) - (other[e3] * self[e45]),
                (other[e2] * self[e4315]) + (other[e3] * self[e4125]),
            ]) + (other.group0().yzxx() * self.group1().zxyx()),
            // e15, e25, e35, e3215
            Simd32x4::from([
                -(other[e3] * self[e25]) - (other[e5] * self[e4235]),
                -(other[e2] * self[e3215]) - (other[e5] * self[e4315]),
                -(other[e3] * self[e3215]) - (other[e5] * self[e4125]),
                (other[e2] * self[e25]) + (other[e3] * self[e35]),
            ]) + (other.group0().yzxx() * self.group0().zxyx())
                - (Simd32x4::from([self[e3215], self[e35], self[e15], self[e45]]) * other.group0().xxyw()),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiScalar> for Flector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4        8        0
    //    simd4        9       13        0
    // Totals...
    // yes simd       13       21        0
    //  no simd       40       60        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(other[e12345]) * self.group0(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e12345]) * self.group1(),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       34       59        0
    //    simd3        0        5        0
    //    simd4       38       35        0
    // Totals...
    // yes simd       72       99        0
    //  no simd      186      214        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e423] * self[e45]) + (other[e412] * self[e4315]),
                (other[e423] * self[e4125]) + (other[e431] * self[e45]),
                (other[e431] * self[e4235]) + (other[e412] * self[e45]),
                -(other[e431] * self[e25]) - (other[e412] * self[e35]) - (other[e321] * self[e45]),
            ]) - (other.group0().yzx() * self.group1().zxy()).with_w(other[e423] * self[e15]),
            // e23, e31, e12, e45
            (Simd32x4::from([self[e25], self[e3215], self[e3215], self[e25]]) * other.group0().zyz().with_w(other[e431]))
                + (Simd32x4::from([self[e3215], self[e35], self[e15], self[e15]]) * other.group0().xxy().with_w(other[e423]))
                + Simd32x3::from(0.0).with_w((other[e412] * self[e35]) - (other[e435] * self[e4125]))
                - (other.group1().wwwy() * self.group1().xyzy())
                - (other.group0().yzx() * self.group0().zxy()).with_w(other[e415] * self[e4235]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e415] * self[e3215]) + (other[e435] * self[e25]) + (other[e315] * self[e4125]) - (other[e321] * self[e15]),
                (other[e415] * self[e35]) + (other[e425] * self[e3215]) + (other[e125] * self[e4235]) - (other[e321] * self[e25]),
                (other[e425] * self[e15]) + (other[e435] * self[e3215]) + (other[e235] * self[e4315]) - (other[e321] * self[e35]),
                0.0,
            ]) - (Simd32x4::from([self[e45], self[e4125], self[e4235], self[e4235]]) * other.group2().xxy().with_w(other[e423]))
                - (Simd32x4::from([self[e4315], self[e45], self[e45], self[e4315]]) * other.group2().zyz().with_w(other[e431]))
                - (other.group1().yzx() * self.group0().zxy()).with_w(other[e412] * self[e4125]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([self[e45], self[e4125], self[e4235], self[e4315]]) * other.group1().xxy().with_w(other[e315]))
                + (Simd32x4::from([self[e4315], self[e45], self[e45], self[e4125]]) * other.group1().zyz().with_w(other[e125]))
                + Simd32x3::from(0.0).with_w(other[e321] * self[e3215] * -1.0)
                + (other.group0().yzx() * self.group0().zxy()).with_w(other[e235] * self[e4235])
                - (Simd32x4::from([self[e25], self[e3215], self[e3215], self[e25]]) * other.group0().zyz().with_w(other[e425]))
                - (Simd32x4::from([self[e3215], self[e35], self[e15], self[e15]]) * other.group0().xxy().with_w(other[e415]))
                - (other.group1().yzxz() * self.group1().zxy().with_w(self[e35])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       38       64        0
    //    simd3        0        6        0
    //    simd4       39       35        0
    // Totals...
    // yes simd       77      105        0
    //  no simd      194      222        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e423] * self[e45]) + (other[e412] * self[e4315]),
                (other[e423] * self[e4125]) + (other[e431] * self[e45]),
                (other[e431] * self[e4235]) + (other[e412] * self[e45]),
                -(other[e431] * self[e25]) - (other[e412] * self[e35]) - (other[e321] * self[e45]),
            ]) - (other.group0().yzx() * self.group1().zxy()).with_w(other[e423] * self[e15]),
            // e23, e31, e12, e45
            (Simd32x4::from([self[e25], self[e3215], self[e3215], self[e25]]) * other.group0().zyz().with_w(other[e431]))
                + (Simd32x4::from([self[e3215], self[e35], self[e15], self[e15]]) * other.group0().xxy().with_w(other[e423]))
                + Simd32x3::from(0.0).with_w((other[e412] * self[e35]) + (other[e12345] * self[e45]) - (other[e435] * self[e4125]))
                - (other.group1().wwwy() * self.group1().xyzy())
                - (other.group0().yzx() * self.group0().zxy()).with_w(other[e415] * self[e4235]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e415] * self[e3215]) + (other[e435] * self[e25]) + (other[e315] * self[e4125]) + (other[e12345] * self[e15]) - (other[e125] * self[e4315]),
                (other[e415] * self[e35]) + (other[e425] * self[e3215]) + (other[e125] * self[e4235]) + (other[e12345] * self[e25]) - (other[e315] * self[e45]),
                (other[e425] * self[e15]) + (other[e435] * self[e3215]) + (other[e235] * self[e4315]) + (other[e12345] * self[e35]) - (other[e125] * self[e45]),
                0.0,
            ]) - (Simd32x4::from([self[e45], self[e4125], self[e4235], self[e4125]]) * other.group2().xxy().with_w(other[e412]))
                - (other.group1().yzx() * self.group0().zxy()).with_w(other[e423] * self[e4235])
                - (other.group1().www() * self.group0().xyz()).with_w(other[e431] * self[e4315]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other[e12345]) * self.group1())
                + (Simd32x4::from([self[e45], self[e4125], self[e4235], self[e4315]]) * other.group1().xxy().with_w(other[e315]))
                + (Simd32x4::from([self[e4315], self[e45], self[e45], self[e4125]]) * other.group1().zyz().with_w(other[e125]))
                + Simd32x3::from(0.0).with_w(other[e321] * self[e3215] * -1.0)
                + (other.group0().yzx() * self.group0().zxy()).with_w(other[e235] * self[e4235])
                - (Simd32x4::from([self[e25], self[e3215], self[e3215], self[e25]]) * other.group0().zyz().with_w(other[e425]))
                - (Simd32x4::from([self[e3215], self[e35], self[e15], self[e15]]) * other.group0().xxy().with_w(other[e415]))
                - (other.group1().yzxz() * self.group1().zxy().with_w(self[e35])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       48       74        0
    //    simd3        0        3        0
    //    simd4       34       33        0
    // Totals...
    // yes simd       82      110        0
    //  no simd      184      215        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                other[e43] * self[e4315] * -1.0,
                other[e42] * self[e45] * -1.0,
                other[e43] * self[e45] * -1.0,
                (other[e42] * self[e25]) + (other[e43] * self[e35]),
            ]) + (other.group0().yzx() * self.group1().zxy()).with_w(other[e41] * self[e15])
                - (Simd32x4::from([self[e45], self[e4125], self[e4235], self[e45]]) * other.group0().xxy().with_w(other[e45])),
            // e415, e425, e435, e321
            (self.group0().zxyx() * other.group0().yzx().with_w(other[e41])) + Simd32x3::from(0.0).with_w((other[e42] * self[e25]) + (other[e43] * self[e35]))
                - (Simd32x4::from([self[e25], self[e3215], self[e3215], self[e4315]]) * other.group0().zyz().with_w(other[e31]))
                - (Simd32x4::from([self[e3215], self[e35], self[e15], self[e4235]]) * other.group0().xxy().with_w(other[e23]))
                - (other.group1().wwwz() * self.group1().xyzz()),
            // e235, e315, e125, e5
            (Simd32x4::from([self[e45], self[e4125], self[e4235], self[e15]]) * other.group2().xxy().with_w(other[e23]))
                + (Simd32x4::from([self[e4315], self[e45], self[e45], self[e25]]) * other.group2().zyz().with_w(other[e31]))
                + (other.group1().yzxz() * self.group0().zxyz())
                - (Simd32x4::from(other[e45]) * self.group0().xyz().with_w(self[e3215]))
                - (Simd32x4::from([self[e25], self[e3215], self[e3215], self[e4125]]) * other.group1().zyz().with_w(other[e35]))
                - (Simd32x4::from([self[e3215], self[e35], self[e15], self[e4315]]) * other.group1().xxy().with_w(other[e25]))
                - (self.group1().zxyx() * other.group2().yzx().with_w(other[e15])),
            // e1, e2, e3, e4
            Simd32x4::from([
                -(other[e41] * self[e3215]) - (other[e43] * self[e25]) - (other[e31] * self[e4125]),
                -(other[e41] * self[e35]) - (other[e42] * self[e3215]) - (other[e12] * self[e4235]),
                -(other[e42] * self[e15]) - (other[e43] * self[e3215]) - (other[e23] * self[e4315]),
                0.0,
            ]) + (Simd32x4::from([self[e45], self[e4125], self[e4235], self[e4315]]) * other.group1().xxy().with_w(other[e42]))
                + (Simd32x4::from([self[e4315], self[e45], self[e45], self[e4125]]) * other.group1().zyz().with_w(other[e43]))
                + (other.group0().yzx() * self.group0().zxy()).with_w(other[e41] * self[e4235]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       57       92        0
    //    simd3        0        5        0
    //    simd4       41       37        0
    // Totals...
    // yes simd       98      134        0
    //  no simd      221      255        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                other[e1234] * self[e4235] * -1.0,
                other[e1234] * self[e4315] * -1.0,
                other[e1234] * self[e4125] * -1.0,
                (other[e42] * self[e25]) + (other[e43] * self[e35]) + (other[e4235] * self[e4235]) + (other[e4315] * self[e4315]) + (other[e4125] * self[e4125]),
            ]) + (other.group0().yzx() * self.group1().zxy()).with_w(other[e41] * self[e15])
                - (Simd32x4::from([self[e45], self[e4125], self[e4235], self[e45]]) * other.group0().xxy().with_w(other[e45]))
                - (Simd32x4::from([self[e4315], self[e45], self[e45], self[e3215]]) * other.group0().zyz().with_w(other[e1234])),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(other[e4235] * self[e45]) - (other[e4125] * self[e4315]),
                -(other[e4235] * self[e4125]) - (other[e4315] * self[e45]),
                -(other[e4315] * self[e4235]) - (other[e4125] * self[e45]),
                other[e43] * self[e35],
            ]) + (self.group0().zxyx() * other.group0().yzx().with_w(other[e41]))
                + (other.group3().yzx() * self.group1().zxy()).with_w(other[e42] * self[e25])
                - (Simd32x4::from(other[e1234]) * self.group0().xyz().with_w(self[e3215]))
                - (Simd32x4::from([self[e25], self[e3215], self[e3215], self[e4315]]) * other.group0().zyz().with_w(other[e31]))
                - (Simd32x4::from([self[e3215], self[e35], self[e15], self[e4235]]) * other.group0().xxy().with_w(other[e23]))
                - (other.group1().wwwz() * self.group1().xyzz()),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(other[e4235] * self[e3215]) - (other[e4125] * self[e25]),
                -(other[e4235] * self[e35]) - (other[e4315] * self[e3215]),
                -(other[e4315] * self[e15]) - (other[e4125] * self[e3215]),
                (other[e4125] * self[e35]) + (other[e3215] * self[e45]),
            ]) + (Simd32x4::from([self[e45], self[e4125], self[e4235], self[e25]]) * other.group2().xxy().with_w(other[e31]))
                + (Simd32x4::from([self[e4315], self[e45], self[e45], self[e35]]) * other.group2().zyz().with_w(other[e12]))
                + (other.group1().yzxx() * self.group0().zxyx())
                + (other.group3().yzxx() * self.group0().zxyx())
                + (other.group3().wwwy() * self.group1().xyz().with_w(self[e25]))
                - (Simd32x4::from([self[e25], self[e3215], self[e3215], self[e4235]]) * other.group1().zyz().with_w(other[e15]))
                - (Simd32x4::from([self[e3215], self[e35], self[e15], self[e3215]]) * other.group1().xxyw())
                - (other.group2().yzxz() * self.group1().zxyz())
                - (other.group1().www() * self.group0().xyz()).with_w(other[e25] * self[e4315]),
            // e1, e2, e3, e4
            Simd32x4::from([
                -(other[e43] * self[e25]) - (other[e31] * self[e4125]) - (other[e1234] * self[e15]),
                -(other[e42] * self[e3215]) - (other[e12] * self[e4235]) - (other[e1234] * self[e25]),
                -(other[e43] * self[e3215]) - (other[e23] * self[e4315]) - (other[e1234] * self[e35]),
                0.0,
            ]) + (Simd32x4::from([self[e45], self[e4125], self[e4235], self[e4315]]) * other.group1().xxy().with_w(other[e42]))
                + (Simd32x4::from([self[e4315], self[e45], self[e45], self[e4125]]) * other.group1().zyz().with_w(other[e43]))
                + (other.group0().yzx() * self.group0().zxy()).with_w(other[e41] * self[e4235])
                - (Simd32x4::from([self[e3215], self[e35], self[e15], self[e45]]) * other.group0().xxy().with_w(other[e1234])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum> for Flector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        5       11        0
    //    simd3        1        2        0
    //    simd4        9       12        0
    // Totals...
    // yes simd       15       25        0
    //  no simd       44       65        0
    fn anti_sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            ((Simd32x3::from(other[e12345]) * self.group0().xyz()) - (Simd32x3::from(other[e5]) * self.group1().xyz())).with_w(other[e12345] * self[e45]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e4235], self[e4315], self[e4125], 1.0]) * other.group0().yy().with_zw(other[e12345], (other[e12345] * self[e3215]) - (other[e5] * self[e45])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for Flector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       33        0
    //    simd4        8       11        0
    // Totals...
    // yes simd       28       44        0
    //  no simd       52       77        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(other[e45]) * self.group1().xyz().with_w(self[e45]) * Simd32x4::from(-1.0),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e15] * self[e45]) + (other[e35] * self[e4315]),
                (other[e15] * self[e4125]) + (other[e25] * self[e45]),
                (other[e25] * self[e4235]) + (other[e35] * self[e45]),
                -(other[e35] * self[e4125]) - (other[e45] * self[e3215]),
            ]) - (other.group0().yzxx() * self.group1().zxyx())
                - (other.group0().wwwy() * self.group0().xyz().with_w(self[e4315])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for Flector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       33        0
    //    simd4       15       17        0
    // Totals...
    // yes simd       35       50        0
    //  no simd       80      101        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                -(other[e4235] * self[e45]) - (other[e4125] * self[e4315]),
                -(other[e4235] * self[e4125]) - (other[e4315] * self[e45]),
                -(other[e4315] * self[e4235]) - (other[e4125] * self[e45]),
                (other[e4315] * self[e4315]) + (other[e4125] * self[e4125]),
            ]) + (other.group1().yzxx() * self.group1().zxyx())
                - (Simd32x4::from(other[e45]) * self.group1().xyz().with_w(self[e45])),
            // e235, e315, e125, e5
            (Simd32x4::from(other[e3215]) * self.group1().xyz().with_w(self[e45]))
                + (Simd32x4::from([self[e45], self[e4125], self[e4235], self[e15]]) * other.group0().xxy().with_w(other[e4235]))
                + (Simd32x4::from([self[e4315], self[e45], self[e45], self[e25]]) * other.group0().zyz().with_w(other[e4315]))
                + (other.group1().yzxz() * self.group0().zxyz())
                - (Simd32x4::from([self[e25], self[e3215], self[e3215], self[e3215]]) * other.group1().zyz().with_w(other[e45]))
                - (Simd32x4::from([self[e3215], self[e35], self[e15], self[e4125]]) * other.group1().xxy().with_w(other[e35]))
                - (other.group0().yzxx() * self.group1().zxyx())
                - (other.group0().wwwy() * self.group0().xyz().with_w(self[e4315])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for Flector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       22        0
    //    simd3        0        2        0
    //    simd4       15       15        0
    // Totals...
    // yes simd       27       39        0
    //  no simd       72       88        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e25] * other[e435]) + (self[e4125] * other[e315]) + (self[e3215] * other[e415]),
                (self[e35] * other[e415]) + (self[e4235] * other[e125]) + (self[e3215] * other[e425]),
                (self[e15] * other[e425]) + (self[e4315] * other[e235]) + (self[e3215] * other[e435]),
                0.0,
            ]) - (Simd32x4::from([self[e45], self[e4125], self[e4235], self[e4315]]) * other.group1().xxy().with_w(other[e425]))
                - (Simd32x4::from([self[e4315], self[e45], self[e45], self[e4125]]) * other.group1().zyz().with_w(other[e435]))
                - (other.group0().yzx() * self.group0().zxy()).with_w(self[e4235] * other[e415]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([self[e45], self[e4125], self[e4235], self[e4235]]) * other.group0().xxy().with_w(other[e235]))
                + (Simd32x4::from([self[e4315], self[e45], self[e45], self[e4315]]) * other.group0().zyz().with_w(other[e315]))
                + Simd32x3::from(0.0).with_w((self[e4125] * other[e125]) - (self[e25] * other[e425]) - (self[e35] * other[e435]))
                - (other.group0().yzx() * self.group1().zxy()).with_w(self[e15] * other[e415]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for Flector {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       26        0
    //    simd3        0        2        0
    //    simd4       17       17        0
    // Totals...
    // yes simd       33       45        0
    //  no simd       84      100        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e25] * other[e435]) + (self[e4125] * other[e315]) + (self[e3215] * other[e415]) - (self[e4315] * other[e125]),
                (self[e35] * other[e415]) + (self[e4235] * other[e125]) + (self[e3215] * other[e425]) - (self[e4125] * other[e235]),
                (self[e35] * other[e12345]) + (self[e4315] * other[e235]) + (self[e3215] * other[e435]) - (self[e4125] * other[e5]),
                0.0,
            ]) + (self.group0().xyxw() * other.group0().wwyw())
                - (self.group1().xyxz() * other.group1().wwy().with_w(other[e435]))
                - (other.group0().yzxx() * self.group0().zxy().with_w(self[e4235]))
                - (self.group0().www() * other.group1().xyz()).with_w(self[e4315] * other[e425]),
            // e4235, e4315, e4125, e3215
            (self.group1().xyxy() * other.group0().wwy().with_w(other[e315]))
                + (self.group1().yzzz() * other.group0().zxw().with_w(other[e125]))
                + Simd32x3::from(0.0).with_w((self[e3215] * other[e12345]) - (self[e25] * other[e425]) - (self[e35] * other[e435]) - (self[e45] * other[e5]))
                + (self.group0().www() * other.group0().xyz()).with_w(self[e4235] * other[e235])
                - (other.group0().yzxx() * self.group1().zxy().with_w(self[e15])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for Flector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      109      156        0
    //    simd2        8        8        0
    //    simd3       48       71        0
    //    simd4       46       33        0
    // Totals...
    // yes simd      211      268        0
    //  no simd      453      517        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[e3215] * other[e4]) - (self[e25] * other[e431]) - (self[e35] * other[e412]) - (self[e45] * other[e321]),
                (self[e15] * other[e41]) + (self[e25] * other[e42]) + (self[e35] * other[e43]) - (self[e3215] * other[e1234]),
            ]) + (Simd32x2::from(self[e4235]) * Simd32x2::from([other[e1], other[e4235]]))
                + (Simd32x2::from(self[e4315]) * Simd32x2::from([other[e2], other[e4315]]))
                + (Simd32x2::from(self[e4125]) * Simd32x2::from([other[e3], other[e4125]]))
                - (Simd32x2::from([other[e423], other[e45]]) * self.group0().xw()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e4315] * other[e12]) - (self[e15] * other[e1234]) - (self[e25] * other[e43]) - (self[e4125] * other[e31]),
                (self[e45] * other[e31]) - (self[e25] * other[e1234]) - (self[e4235] * other[e12]) - (self[e3215] * other[e42]),
                (self[e45] * other[e12]) - (self[e35] * other[e1234]) - (self[e4315] * other[e23]) - (self[e3215] * other[e43]),
                0.0,
            ]) + (Simd32x4::from([self[e45], self[e4125], self[e4235], self[e4125]]) * other.group5().xxy().with_w(other[e43]))
                + (self.group1().xyzx() * other.group0().xx().with_zw(other[scalar], other[e41]))
                + (other.group4().yzx() * self.group0().zxy()).with_w(self[e4315] * other[e42])
                - (Simd32x4::from([self[e3215], self[e35], self[e15], other[e1234]]) * other.group4().xxy().with_w(self[e45])),
            // e5
            (self[e15] * other[e23])
                + (self[e15] * other[e4235])
                + (self[e25] * other[e31])
                + (self[e25] * other[e4315])
                + (self[e35] * other[e12])
                + (self[e35] * other[e4125])
                + (self[e45] * other[e3215])
                - (self[e4235] * other[e15])
                - (self[e4315] * other[e25])
                - (self[e4125] * other[e35])
                - (self[e3215] * other[scalar])
                - (self[e3215] * other[e45]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e3215] * other[e415]) - (self[e35] * other[e425]) - (self[e4235] * other[e5]) - (self[e3215] * other[e1]),
                (self[e3215] * other[e425]) - (self[e35] * other[e1]) - (self[e4315] * other[e5]) - (self[e3215] * other[e2]),
                (self[e3215] * other[e435]) - (self[e35] * other[e321]) - (self[e4125] * other[e5]) - (self[e3215] * other[e3]),
                0.0,
            ]) + (Simd32x4::from(other[e12345]) * self.group0())
                + (Simd32x4::from([other[e2], other[e415], other[e1], self[e35]]) * self.group0().zzy().with_w(other[e412]))
                + (Simd32x4::from([other[e435], other[e3], other[e425], self[e25]]) * self.group0().yxx().with_w(other[e431]))
                + (other.group8().yzx() * self.group1().zxy()).with_w(self[e15] * other[e423])
                - (Simd32x4::from([self[e45], self[e4125], self[e4235], other[e415]]) * other.group8().xxy().with_w(self[e4235]))
                - (Simd32x4::from([self[e4315], self[e45], self[e45], other[e425]]) * other.group8().zyz().with_w(self[e4315]))
                - (Simd32x4::from([other[e3], other[e321], other[e415], other[e4]]) * self.group0().yyy().with_w(self[e3215]))
                - (other.group6().wz().with_zw(other[e2], other[e435]) * self.group0().xxx().with_w(self[e4125])),
            // e41, e42, e43
            (Simd32x3::from(other[e4]) * self.group1().xyz())
                + (Simd32x3::from([self[e45], self[e4125], self[e4235]]) * other.group7().xxy())
                + (Simd32x3::from([self[e4315], self[e45], self[e45]]) * other.group7().zyz())
                - (other.group7().yzx() * self.group1().zxy()),
            // e23, e31, e12
            (Simd32x3::from(other[e4]) * self.group0().xyz())
                + (Simd32x3::from([self[e25], self[e3215], self[e3215]]) * other.group7().zyz())
                + (Simd32x3::from([self[e3215], self[e35], self[e15]]) * other.group7().xxy())
                + (self.group1().zxy() * other.group1().yzx())
                - (Simd32x3::from(self[e45]) * other.group1().xyz())
                - (Simd32x3::from([other[e3], other[e1], other[e321]]) * self.group1().yzz())
                - (Simd32x3::from([other[e321], other[e321], other[e2]]) * self.group1().xyx())
                - (other.group7().yzx() * self.group0().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(self[e4235] * other[e45]) - (self[e4315] * other[e4125]),
                -(self[e4315] * other[e45]) - (self[e4125] * other[e4235]),
                -(self[e4235] * other[e4315]) - (self[e4125] * other[e45]),
                (self[e25] * other[e42]) + (self[e35] * other[e43]),
            ]) + (self.group0().zxyw() * other.group4().yzx().with_w(other[scalar]))
                + (self.group1().zxy() * other.group9().yzx()).with_w(self[e15] * other[e41])
                - (Simd32x4::from([self[e25], self[e3215], self[e3215], self[e4315]]) * other.group4().zyz().with_w(other[e31]))
                - (Simd32x4::from([self[e3215], self[e35], self[e15], self[e4235]]) * other.group4().xxy().with_w(other[e23]))
                - (Simd32x4::from([other[e1234], other[e1234], other[e1234], self[e4125]]) * self.group0().xyz().with_w(other[e12]))
                - (self.group0().www() * other.group9().xyz()).with_w(self[e3215] * other[e1234]),
            // e423, e431, e412
            (other.group4().yzx() * self.group1().zxy())
                - (Simd32x3::from(other[e1234]) * self.group1().xyz())
                - (Simd32x3::from([self[e45], self[e4125], self[e4235]]) * other.group4().xxy())
                - (Simd32x3::from([self[e4315], self[e45], self[e45]]) * other.group4().zyz()),
            // e235, e315, e125
            (Simd32x3::from(self[e45]) * other.group3().xyz())
                + (Simd32x3::from([other[e35], other[e15], other[e3215]]) * self.group1().yzz())
                + (Simd32x3::from([other[e3215], other[e3215], other[e25]]) * self.group1().xyx())
                + (other.group5().yzx() * self.group0().zxy())
                + (self.group0().zxy() * other.group9().yzx())
                - (Simd32x3::from(self[e3215]) * other.group9().xyz())
                - (Simd32x3::from(other[scalar]) * self.group0().xyz())
                - (Simd32x3::from([self[e25], self[e3215], self[e3215]]) * other.group5().zyz())
                - (Simd32x3::from([self[e3215], self[e35], self[e15]]) * other.group5().xxy())
                - (Simd32x3::from([other[e45], other[e45], other[e4315]]) * self.group0().xyx())
                - (Simd32x3::from([other[e4125], other[e4235], other[e45]]) * self.group0().yzz())
                - (self.group1().zxy() * other.group3().yzx()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other[e12345]) * self.group1())
                + Simd32x3::from(0.0).with_w((self[e15] * other[e1]) + (self[e25] * other[e2]) + (self[e35] * other[e3]) - (self[e3215] * other[e321]))
                + (other.group7().yzx() * self.group0().zxy()).with_w(self[e4235] * other[e235])
                + (self.group0().www() * other.group6().xyz()).with_w(self[e4315] * other[e315])
                + (self.group1().yzx() * other.group6().zxy()).with_w(self[e4125] * other[e125])
                - (Simd32x4::from([self[e25], self[e3215], self[e3215], other[e425]]) * other.group7().zyz().with_w(self[e25]))
                - (Simd32x4::from([self[e3215], self[e35], self[e15], other[e415]]) * other.group7().xxy().with_w(self[e15]))
                - (self.group0().xyzz() * other.group1().www().with_w(other[e435]))
                - (self.group1().zxy() * other.group6().yzx()).with_w(self[e45] * other[e5]),
            // e1234
            (self[e45] * other[e4]) - (self[e4235] * other[e423]) - (self[e4315] * other[e431]) - (self[e4125] * other[e412]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for Flector {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       41        0
    //    simd4        9       10        0
    // Totals...
    // yes simd       33       51        0
    //  no simd       60       81        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                -(self[e45] * other[e4235]) - (self[e4315] * other[e4125]),
                -(self[e45] * other[e4315]) - (self[e4125] * other[e4235]),
                -(self[e45] * other[e4125]) - (self[e4235] * other[e4315]),
                (self[e4315] * other[e4315]) + (self[e4125] * other[e4125]),
            ]) + (self.group1().zxyx() * other.group0().yzxx()),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e25] * other[e4125]) - (self[e3215] * other[e4235]),
                -(self[e35] * other[e4235]) - (self[e3215] * other[e4315]),
                -(self[e15] * other[e4315]) - (self[e3215] * other[e4125]),
                (self[e35] * other[e4125]) + (self[e45] * other[e3215]),
            ]) + (self.group0().zxyx() * other.group0().yzxx())
                + (other.group0().wwwy() * self.group1().xyz().with_w(self[e25])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       25       41        0
    //    simd3        6        9        0
    //    simd4       24       28        0
    // Totals...
    // yes simd       55       78        0
    //  no simd      139      180        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([other[e4], other[e4], other[e4], 1.0])
                * self
                    .group1()
                    .xyz()
                    .with_w((self[e4235] * other[e1]) + (self[e4315] * other[e2]) + (self[e4125] * other[e3]) + (self[e3215] * other[e4])),
            // e23, e31, e12, e45
            ((Simd32x3::from(other[e4]) * self.group0().xyz()) + (self.group1().zxy() * other.group0().yzx())
                - (Simd32x3::from(self[e45]) * other.group0().xyz())
                - (self.group1().yzx() * other.group0().zxy()))
            .with_w(self[e3215] * other[e4] * -1.0),
            // e15, e25, e35, e1234
            ((self.group0().zxy() * other.group0().yzx())
                - (Simd32x3::from(self[e3215]) * other.group0().xyz())
                - (Simd32x3::from(other[e5]) * self.group1().xyz())
                - (self.group0().yzx() * other.group0().zxy()))
            .with_w(self[e45] * other[e4]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([other[e4], other[e4], other[e4], 1.0])
                * self
                    .group0()
                    .xyz()
                    .with_w((self[e15] * other[e1]) + (self[e25] * other[e2]) + (self[e35] * other[e3]) - (self[e45] * other[e5]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for Flector {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       25        0
    //    simd3        0        1        0
    //    simd4        6       10        0
    // Totals...
    // yes simd       22       36        0
    //  no simd       40       68        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(other[scalar]) * self.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            Simd32x4::from(other[scalar]) * self.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       47       67        0
    //    simd3        3        5        0
    //    simd4       21       25        0
    // Totals...
    // yes simd       71       97        0
    //  no simd      140      182        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([other[e1234], other[e1234], other[e1234], 1.0])
                * self
                    .group1()
                    .xyz()
                    .with_w((self[e4235] * other[e4235]) + (self[e4315] * other[e4315]) + (self[e4125] * other[e4125]) - (self[e3215] * other[e1234]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            ((self.group1().zxy() * other.group0().yzx())
                - (Simd32x3::from(self[e45]) * other.group0().xyz())
                - (Simd32x3::from(other[e1234]) * self.group0().xyz())
                - (self.group1().yzx() * other.group0().zxy()))
            .with_w(self[e3215] * other[e1234] * -1.0),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e25] * other[e4125]) - (self[e3215] * other[e4235]),
                -(self[e35] * other[e4235]) - (self[e3215] * other[e4315]),
                -(self[e15] * other[e4315]) - (self[e3215] * other[e4125]),
                (self[e35] * other[e4125]) + (self[e45] * other[e3215]),
            ]) + (self.group0().zxyx() * other.group0().yzxx())
                + (other.group0().wwwy() * self.group1().xyz().with_w(self[e25])),
            // e1, e2, e3, e4
            Simd32x4::from(other[e1234]) * self.group0() * Simd32x4::from(-1.0),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for Flector {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       46       67        0
    //    simd3        0        6        0
    //    simd4       47       44        0
    // Totals...
    // yes simd       93      117        0
    //  no simd      234      261        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (self.group1().xyxy() * other.group3().ww().with_zw(other[e431], other[e2]))
                + (self.group1().yzzz() * other.group0().zx().with_zw(other[e4], other[e3]))
                + Simd32x3::from(0.0).with_w((self[e3215] * other[e4]) - (self[e25] * other[e431]) - (self[e35] * other[e412]) - (self[e45] * other[e321]))
                + (self.group0().www() * other.group0().xyz()).with_w(self[e4235] * other[e1])
                - (other.group0().yzxx() * self.group1().zxy().with_w(self[e15])),
            // e23, e31, e12, e45
            (other.group0() * self.group1().www().with_w(self[e45]))
                + (self.group0().xyxx() * other.group3().ww().with_zw(other[e431], other[e423]))
                + (self.group0().yzzy() * other.group0().zx().with_zw(other[e4], other[e431]))
                + (self.group1().zxy() * other.group3().yzx()).with_w(self[e35] * other[e412])
                - (self.group1().xyxz() * other.group1().ww().with_zw(other[e2], other[e435]))
                - (self.group1().yzzw() * other.group3().zx().with_zw(other[e321], other[e4]))
                - (self.group0().zxy() * other.group0().yzx()).with_w(self[e4235] * other[e415])
                - (self.group0().www() * other.group3().xyz()).with_w(self[e4315] * other[e425]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e25] * other[e435]) + (self[e35] * other[e2]) + (self[e4125] * other[e315]) + (self[e3215] * other[e415])
                    - (self[e45] * other[e235])
                    - (self[e4235] * other[e5])
                    - (self[e4315] * other[e125])
                    - (self[e3215] * other[e1]),
                (self[e25] * other[e12345]) + (self[e35] * other[e415]) + (self[e4235] * other[e125]) + (self[e3215] * other[e425])
                    - (self[e45] * other[e315])
                    - (self[e4315] * other[e5])
                    - (self[e4125] * other[e235])
                    - (self[e3215] * other[e2]),
                (self[e25] * other[e1]) + (self[e35] * other[e12345]) + (self[e4315] * other[e235]) + (self[e3215] * other[e435])
                    - (self[e45] * other[e125])
                    - (self[e4235] * other[e315])
                    - (self[e4125] * other[e5])
                    - (self[e3215] * other[e3]),
                0.0,
            ]) + (Simd32x4::from([other[e12345], other[e3], other[e425], other[e4]]) * self.group0().xxxw())
                - (Simd32x4::from([other[e425], other[e1], other[e321], other[e412]]) * self.group0().zzz().with_w(self[e4125]))
                - (Simd32x4::from([other[e3], other[e321], other[e415], other[e431]]) * self.group0().yyy().with_w(self[e4315]))
                - (other.group1().wz().with_zw(other[e2], other[e423]) * self.group0().xxx().with_w(self[e4235])),
            // e4235, e4315, e4125, e3215
            (self.group0().zxyx() * other.group0().yzx().with_w(other[e1]))
                + (self.group0().wwwy() * other.group1().xyz().with_w(other[e2]))
                + (self.group1().yzzx() * other.group1().zx().with_zw(other[e12345], other[e235]))
                + (other.group0().ww().with_zw(other[e425], other[e3]) * self.group1().xyx().with_w(self[e35]))
                + Simd32x3::from(0.0).with_w((self[e4315] * other[e315]) + (self[e4125] * other[e125]) + (self[e3215] * other[e12345]) - (self[e3215] * other[e321]))
                - (self.group0().xyxx() * other.group3().ww().with_zw(other[e431], other[e415]))
                - (self.group0().yzzy() * other.group0().zx().with_zw(other[e4], other[e425]))
                - (other.group1().yzxz() * self.group1().zxy().with_w(self[e35]))
                - (self.group1().www() * other.group0().xyz()).with_w(self[e45] * other[e5]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for Flector {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       61       95        0
    //    simd3        0        4        0
    //    simd4       42       39        0
    // Totals...
    // yes simd      103      138        0
    //  no simd      229      263        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[e4315] * other[e43] * -1.0,
                self[e4125] * other[e41] * -1.0,
                self[e4125] * other[e1234] * -1.0,
                (self[e25] * other[e42]) + (self[e35] * other[e43]) + (self[e4235] * other[e4235]) + (self[e4315] * other[e4315]) + (self[e4125] * other[e4125]),
            ]) + (other.group0().yzxx() * self.group1().zxy().with_w(self[e15]))
                - (Simd32x4::from(self[e45]) * other.group0().xyz().with_w(other[e45]))
                - (self.group1().xyxw() * other.group2().ww().with_zw(other[e42], other[e1234])),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(self[e4315] * other[e4125]) - (self[e3215] * other[e41]),
                -(self[e4125] * other[e4235]) - (self[e3215] * other[e42]),
                -(self[e4125] * other[e45]) - (self[e3215] * other[e43]),
                (self[e35] * other[e43]) + (self[e45] * other[scalar]),
            ]) + (self.group0().zxyx() * other.group0().yzxx())
                + (self.group1().zxy() * other.group3().yzx()).with_w(self[e25] * other[e42])
                - (self.group1().xyxw() * other.group1().ww().with_zw(other[e4315], other[e1234]))
                - (other.group0().zx().with_zw(other[e1234], other[e31]) * self.group0().yzz().with_w(self[e4315]))
                - (other.group2().ww().with_zw(other[e42], other[e23]) * self.group0().xyx().with_w(self[e4235]))
                - (self.group0().www() * other.group3().xyz()).with_w(self[e4125] * other[e12]),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e3215] * other[e23]) - (self[e3215] * other[e4235]),
                -(self[e3215] * other[e31]) - (self[e3215] * other[e4315]),
                -(self[e3215] * other[e12]) - (self[e3215] * other[e4125]),
                (self[e35] * other[e4125]) + (self[e45] * other[e3215]),
            ]) + (self.group0().zxyx() * other.group1().yzxx())
                + (self.group0().zxyx() * other.group3().yzxx())
                + (self.group0().wwwy() * other.group2().xyz().with_w(other[e31]))
                + (other.group2().zx().with_zw(other[e3215], other[e12]) * self.group1().yzz().with_w(self[e35]))
                + (other.group3().ww().with_zw(other[e25], other[e4315]) * self.group1().xyx().with_w(self[e25]))
                - (self.group1().zxyw() * other.group2().yzx().with_w(other[e45]))
                - (other.group0().ww().with_zw(other[e31], other[e15]) * self.group0().xyx().with_w(self[e4235]))
                - (other.group1().zx().with_zw(other[scalar], other[e35]) * self.group0().yzz().with_w(self[e4125]))
                - (other.group1().ww().with_zw(other[e4315], other[e25]) * self.group0().xyx().with_w(self[e4315]))
                - (other.group3().zx().with_zw(other[e45], other[scalar]) * self.group0().yzz().with_w(self[e3215])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e4315] * other[e12]) - (self[e25] * other[e43]) - (self[e4125] * other[e31]) - (self[e3215] * other[e41]),
                (self[e4125] * other[e23]) - (self[e35] * other[e41]) - (self[e4235] * other[e12]) - (self[e3215] * other[e42]),
                (self[e4125] * other[scalar]) - (self[e35] * other[e1234]) - (self[e4315] * other[e23]) - (self[e3215] * other[e43]),
                0.0,
            ]) + (self.group1().xyxz() * other.group0().ww().with_zw(other[e31], other[e43]))
                + (other.group0().yzxx() * self.group0().zxy().with_w(self[e4235]))
                + (self.group0().www() * other.group1().xyz()).with_w(self[e4315] * other[e42])
                - (self.group0().xyxw() * other.group2().ww().with_zw(other[e42], other[e1234])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl std::ops::Div<anti_sandwich> for Line {
    type Output = anti_sandwich_partial<Line>;
    fn div(self, _rhs: anti_sandwich) -> Self::Output {
        anti_sandwich_partial(self)
    }
}
impl AntiSandwich<AntiCircleRotor> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       60      102        0
    //    simd3        0       13        0
    //    simd4       18        7        0
    // Totals...
    // yes simd       78      122        0
    //  no simd      132      169        0
    fn anti_sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                other[e43] * self[e425],
                other[e41] * self[e435],
                other[e42] * self[e415],
                -(other[e42] * self[e315]) - (other[e43] * self[e125]) - (other[e23] * self[e415]) - (other[e31] * self[e425]) - (other[e12] * self[e435]),
            ]) - (other.group0().yzx() * self.group0().zxy()).with_w(other[e41] * self[e235]),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(other[e42] * self[e125]) - (other[e31] * self[e435]),
                -(other[e43] * self[e235]) - (other[e12] * self[e415]),
                -(other[e41] * self[e315]) - (other[e23] * self[e425]),
                0.0,
            ]) + (other.group1().zx().with_zw(other[scalar], self[e125]) * self.group0().yzz().with_w(other[e43]))
                + (other.group2().ww().with_zw(other[e31], self[e315]) * self.group0().xyx().with_w(other[e42]))
                + (other.group0().zxy() * self.group1().yzx()).with_w(other[e41] * self[e235]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e12] * self[e315]) + (other[e45] * self[e235]) + (other[e35] * self[e425]) + (other[scalar] * self[e235]),
                (other[e23] * self[e125]) + (other[e45] * self[e315]) + (other[e15] * self[e435]) + (other[scalar] * self[e315]),
                (other[e31] * self[e235]) + (other[e45] * self[e125]) + (other[e25] * self[e415]) + (other[scalar] * self[e125]),
                other[e43] * self[e435] * -1.0,
            ]) - (self.group0().zxy() * other.group2().yzx()).with_w(other[e41] * self[e415])
                - (self.group1().zxy() * other.group1().yzx()).with_w(other[e42] * self[e425]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e42] * self[e125]) + (other[e45] * self[e415]),
                (other[e43] * self[e235]) + (other[e45] * self[e425]),
                (other[e41] * self[e315]) + (other[e45] * self[e435]),
                -(other[e23] * self[e235]) - (other[e31] * self[e315]) - (other[e12] * self[e125]) - (other[e25] * self[e425]) - (other[e35] * self[e435]),
            ]) - (other.group0().zxy() * self.group1().yzx()).with_w(other[e15] * self[e415]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDipoleInversion> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       59      103        0
    //    simd3        0       13        0
    //    simd4       24       13        0
    // Totals...
    // yes simd       83      129        0
    //  no simd      155      194        0
    fn anti_sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e412] * self[e425]) + (other[e4] * self[e415]),
                (other[e423] * self[e435]) + (other[e4] * self[e425]),
                (other[e431] * self[e415]) + (other[e4] * self[e435]),
                -(other[e431] * self[e315]) - (other[e412] * self[e125]) - (other[e415] * self[e415]) - (other[e425] * self[e425]) - (other[e435] * self[e435]),
            ]) - (other.group0().yzx() * self.group0().zxy()).with_w(other[e423] * self[e235]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e435] * self[e425]) + (other[e4] * self[e235]),
                (other[e423] * self[e125]) + (other[e415] * self[e435]) + (other[e4] * self[e315]),
                (other[e431] * self[e235]) + (other[e425] * self[e415]) + (other[e4] * self[e125]),
                -(other[e412] * self[e125]) - (other[e1] * self[e415]) - (other[e2] * self[e425]) - (other[e3] * self[e435]),
            ]) - (other.group0().yzx() * self.group1().zxy()).with_w(other[e423] * self[e235])
                - (self.group0().zxy() * other.group1().yzx()).with_w(other[e431] * self[e315]),
            // e235, e315, e125, e5
            Simd32x4::from([
                other[e2] * self[e125],
                other[e415] * self[e125],
                other[e1] * self[e315],
                -(other[e425] * self[e315]) - (other[e435] * self[e125]),
            ]) + (Simd32x4::from([other[e435], other[e3], other[e425], other[e3]]) * self.group1().yxx().with_w(self[e125]))
                + (other.group2().zx().with_zw(other[e5], other[e2]) * self.group0().yzz().with_w(self[e315]))
                + (other.group3().ww().with_zw(other[e315], other[e1]) * self.group0().xyx().with_w(self[e235]))
                - (Simd32x4::from([other[e425], other[e1], other[e321], other[e415]]) * self.group1().zzz().with_w(self[e235]))
                - (Simd32x4::from([other[e3], other[e321], other[e415], other[e125]]) * self.group1().yyy().with_w(self[e435]))
                - (other.group2().yzxx() * self.group0().zxy().with_w(self[e415]))
                - (other.group1().wz().with_zw(other[e2], other[e315]) * self.group1().xxx().with_w(self[e425])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e321] * self[e415]) + (other[e4] * self[e235]) + (other[e3] * self[e425]),
                (other[e423] * self[e125]) + (other[e321] * self[e425]) + (other[e4] * self[e315]) + (other[e1] * self[e435]),
                (other[e431] * self[e235]) + (other[e321] * self[e435]) + (other[e4] * self[e125]) + (other[e2] * self[e415]),
                other[e412] * self[e435] * -1.0,
            ]) - (other.group0().yzx() * self.group1().zxy()).with_w(other[e423] * self[e415])
                - (self.group0().zxy() * other.group3().yzx()).with_w(other[e431] * self[e425]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum> for Line {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       18        0
    //    simd3        1        8        0
    //    simd4        3        0        0
    // Totals...
    // yes simd       11       26        0
    //  no simd       22       42        0
    fn anti_sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(other[scalar]) * self.group0(),
            // e15, e25, e35
            (Simd32x3::from(other[e3215]) * self.group0()) + (Simd32x3::from(other[scalar]) * self.group1()),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlatPoint> for Line {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       30        0
    //    simd3        0        7        0
    //    simd4        5        2        0
    // Totals...
    // yes simd       23       39        0
    //  no simd       38       59        0
    fn anti_sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            (self.group0().yzx() * other.group0().zxy()).with_w(0.0)
                - (Simd32x3::from(other[e321]) * self.group1()).with_w(0.0)
                - (self.group0().zxy() * other.group0().yzx()).with_w(0.0),
            // e1, e2, e3, e5
            Simd32x4::from([other[e321], other[e321], other[e321], 1.0])
                * self.group0().with_w(-(other[e235] * self[e415]) - (other[e315] * self[e425]) - (other[e125] * self[e435])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlector> for Line {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       41        0
    //    simd3        0        6        0
    //    simd4        9        5        0
    // Totals...
    // yes simd       33       52        0
    //  no simd       60       79        0
    fn anti_sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (other[e125] * self[e425]) + (other[e2] * self[e125]) + (other[e5] * self[e415]),
                (other[e235] * self[e435]) + (other[e3] * self[e235]) + (other[e5] * self[e425]),
                (other[e315] * self[e415]) + (other[e1] * self[e315]) + (other[e5] * self[e435]),
                0.0,
            ]) - (other.group0().ww().with_zw(other[e2], other[e2]) * self.group1().xyx().with_w(self[e425]))
                - (other.group1().zx().with_zw(other[e321], other[e3]) * self.group1().yzz().with_w(self[e435]))
                - (self.group0().zxy() * other.group0().yzx()).with_w(other[e1] * self[e415]),
            // e1, e2, e3, e5
            (other.group0().ww().with_zw(other[e2], other[e1]) * self.group0().xyx().with_w(self[e235]))
                + (other.group1().zx().with_zw(other[e321], other[e2]) * self.group0().yzz().with_w(self[e315]))
                + Simd32x3::from(0.0).with_w((other[e3] * self[e125]) - (other[e315] * self[e425]) - (other[e125] * self[e435]))
                - (self.group0().zxy() * other.group1().yzx()).with_w(other[e235] * self[e415]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiLine> for Line {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       23       43        0
    //    simd3        0        6        0
    //    simd4        6        2        0
    // Totals...
    // yes simd       29       51        0
    //  no simd       47       69        0
    fn anti_sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                other[e12] * self[e425],
                other[e23] * self[e435],
                other[e31] * self[e415],
                -(other[e31] * self[e425]) - (other[e12] * self[e435]),
            ]) - (other.group0().yzx() * self.group0().zxy()).with_w(other[e23] * self[e415]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (other[e12] * self[e315]) + (other[e35] * self[e425]),
                (other[e23] * self[e125]) + (other[e15] * self[e435]),
                (other[e31] * self[e235]) + (other[e25] * self[e415]),
                -(other[e12] * self[e125]) - (other[e15] * self[e415]) - (other[e25] * self[e425]) - (other[e35] * self[e435]),
            ]) - (other.group0().yzx() * self.group1().zxy()).with_w(other[e23] * self[e235])
                - (other.group1().yzx() * self.group0().zxy()).with_w(other[e31] * self[e315]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiMotor> for Line {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       50        0
    //    simd3        0        4        0
    //    simd4        6        4        0
    // Totals...
    // yes simd       38       58        0
    //  no simd       56       78        0
    fn anti_sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (other[e12] * self[e425]) + (other[scalar] * self[e415]),
                (other[e23] * self[e435]) + (other[scalar] * self[e425]),
                (other[e31] * self[e415]) + (other[scalar] * self[e435]),
                -(other[e31] * self[e425]) - (other[e12] * self[e435]),
            ]) - (other.group0().yzxx() * self.group0().zxy().with_w(self[e415])),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (other[e12] * self[e315]) + (other[scalar] * self[e235]) + (other[e35] * self[e425]) + (other[e3215] * self[e415]),
                (other[e23] * self[e125]) + (other[scalar] * self[e315]) + (other[e15] * self[e435]) + (other[e3215] * self[e425]),
                (other[e31] * self[e235]) + (other[scalar] * self[e125]) + (other[e25] * self[e415]) + (other[e3215] * self[e435]),
                -(other[e23] * self[e235]) - (other[e31] * self[e315]) - (other[e12] * self[e125]) - (other[e35] * self[e435]),
            ]) - (other.group1().yzxx() * self.group0().zxy().with_w(self[e415]))
                - (self.group1().zxy() * other.group0().yzx()).with_w(other[e25] * self[e425]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiPlane> for Line {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       21       43        0
    //    simd3        0        4        0
    //    simd4        5        3        0
    // Totals...
    // yes simd       26       50        0
    //  no simd       41       67        0
    fn anti_sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (other[e2] * self[e125]) + (other[e5] * self[e415]),
                (other[e3] * self[e235]) + (other[e5] * self[e425]),
                (other[e1] * self[e315]) + (other[e5] * self[e435]),
                -(other[e2] * self[e425]) - (other[e3] * self[e435]),
            ]) - (other.group0().zxyx() * self.group1().yzx().with_w(self[e415])),
            // e1, e2, e3, e5
            Simd32x4::from([
                other[e2] * self[e435] * -1.0,
                other[e3] * self[e415] * -1.0,
                other[e1] * self[e425] * -1.0,
                (other[e2] * self[e315]) + (other[e3] * self[e125]),
            ]) + (other.group0().zxyx() * self.group0().yzx().with_w(self[e235])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiScalar> for Line {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       18        0
    //    simd3        0        7        0
    //    simd4        3        0        0
    // Totals...
    // yes simd       10       25        0
    //  no simd       19       39        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(other[e12345]) * self.group0(),
            // e235, e315, e125
            Simd32x3::from(other[e12345]) * self.group1(),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       49       95        0
    //    simd3        0       15        0
    //    simd4       19        6        0
    // Totals...
    // yes simd       68      116        0
    //  no simd      125      164        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                other[e412] * self[e425],
                other[e423] * self[e435],
                other[e431] * self[e415],
                -(other[e431] * self[e315]) - (other[e412] * self[e125]) - (other[e415] * self[e415]) - (other[e425] * self[e425]) - (other[e435] * self[e435]),
            ]) - (other.group0().yzx() * self.group0().zxy()).with_w(other[e423] * self[e235]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e435] * self[e425]),
                (other[e423] * self[e125]) + (other[e415] * self[e435]),
                (other[e431] * self[e235]) + (other[e425] * self[e415]),
                other[e412] * self[e125] * -1.0,
            ]) - (other.group0().yzx() * self.group1().zxy()).with_w(other[e423] * self[e235])
                - (self.group0().zxy() * other.group1().yzx()).with_w(other[e431] * self[e315]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e435] * self[e315]) + (other[e125] * self[e425]),
                (other[e415] * self[e125]) + (other[e235] * self[e435]),
                (other[e425] * self[e235]) + (other[e315] * self[e415]),
                -(other[e415] * self[e235]) - (other[e425] * self[e315]) - (other[e435] * self[e125]),
            ]) - (other.group2().yzx() * self.group0().zxy()).with_w(other[e235] * self[e415])
                - (self.group1().xxy() * other.group1().wzx()).with_w(other[e315] * self[e425])
                - (self.group1().zyz() * other.group1().yww()).with_w(other[e125] * self[e435]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e321] * self[e415]),
                (other[e423] * self[e125]) + (other[e321] * self[e425]),
                (other[e431] * self[e235]) + (other[e321] * self[e435]),
                -(other[e431] * self[e425]) - (other[e412] * self[e435]),
            ]) - (other.group0().yzx() * self.group1().zxy()).with_w(other[e423] * self[e415]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       55      100        0
    //    simd3        0       14        0
    //    simd4       19        7        0
    // Totals...
    // yes simd       74      121        0
    //  no simd      131      170        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                other[e412] * self[e425],
                other[e423] * self[e435],
                other[e431] * self[e415],
                -(other[e431] * self[e315]) - (other[e412] * self[e125]) - (other[e415] * self[e415]) - (other[e425] * self[e425]) - (other[e435] * self[e435]),
            ]) - (other.group0().yzx() * self.group0().zxy()).with_w(other[e423] * self[e235]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e435] * self[e425]) + (other[e12345] * self[e415]),
                (other[e423] * self[e125]) + (other[e415] * self[e435]) + (other[e12345] * self[e425]),
                (other[e431] * self[e235]) + (other[e425] * self[e415]) + (other[e12345] * self[e435]),
                other[e412] * self[e125] * -1.0,
            ]) - (other.group0().yzx() * self.group1().zxy()).with_w(other[e423] * self[e235])
                - (self.group0().zxy() * other.group1().yzx()).with_w(other[e431] * self[e315]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e435] * self[e315]) + (other[e125] * self[e425]) + (other[e12345] * self[e235]),
                (other[e415] * self[e125]) + (other[e235] * self[e435]) + (other[e12345] * self[e315]),
                (other[e425] * self[e235]) + (other[e315] * self[e415]) + (other[e12345] * self[e125]),
                -(other[e415] * self[e235]) - (other[e425] * self[e315]) - (other[e435] * self[e125]),
            ]) - (other.group2().yzxx() * self.group0().zxy().with_w(self[e415]))
                - (self.group1().xxy() * other.group1().wzx()).with_w(other[e315] * self[e425])
                - (self.group1().zyz() * other.group1().yww()).with_w(other[e125] * self[e435]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e321] * self[e415]),
                (other[e423] * self[e125]) + (other[e321] * self[e425]),
                (other[e431] * self[e235]) + (other[e321] * self[e435]),
                -(other[e431] * self[e425]) - (other[e412] * self[e435]),
            ]) - (other.group0().yzx() * self.group1().zxy()).with_w(other[e423] * self[e415]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       57      101        0
    //    simd3        0       14        0
    //    simd4       17        5        0
    // Totals...
    // yes simd       74      120        0
    //  no simd      125      163        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                other[e43] * self[e425],
                other[e41] * self[e435],
                other[e42] * self[e415],
                -(other[e42] * self[e315]) - (other[e43] * self[e125]) - (other[e23] * self[e415]) - (other[e31] * self[e425]) - (other[e12] * self[e435]),
            ]) - (other.group0().yzx() * self.group0().zxy()).with_w(other[e41] * self[e235]),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(other[e42] * self[e125]) - (other[e31] * self[e435]),
                -(other[e43] * self[e235]) - (other[e12] * self[e415]),
                -(other[e41] * self[e315]) - (other[e23] * self[e425]),
                other[e43] * self[e125],
            ]) + (other.group0().zxy() * self.group1().yzx()).with_w(other[e41] * self[e235])
                + (self.group0().yzx() * other.group1().zxy()).with_w(other[e42] * self[e315]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e12] * self[e315]) + (other[e45] * self[e235]) + (other[e35] * self[e425]),
                (other[e23] * self[e125]) + (other[e45] * self[e315]) + (other[e15] * self[e435]),
                (other[e31] * self[e235]) + (other[e45] * self[e125]) + (other[e25] * self[e415]),
                other[e43] * self[e435] * -1.0,
            ]) - (other.group2().yzx() * self.group0().zxy()).with_w(other[e41] * self[e415])
                - (self.group1().zxy() * other.group1().yzx()).with_w(other[e42] * self[e425]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e42] * self[e125]) + (other[e45] * self[e415]),
                (other[e43] * self[e235]) + (other[e45] * self[e425]),
                (other[e41] * self[e315]) + (other[e45] * self[e435]),
                -(other[e23] * self[e235]) - (other[e31] * self[e315]) - (other[e12] * self[e125]) - (other[e25] * self[e425]) - (other[e35] * self[e435]),
            ]) - (other.group0().zxy() * self.group1().yzx()).with_w(other[e15] * self[e415]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       67      112        0
    //    simd3        0       19        0
    //    simd4       23        6        0
    // Totals...
    // yes simd       90      137        0
    //  no simd      159      193        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e43] * self[e425]) + (other[e1234] * self[e415]),
                (other[e41] * self[e435]) + (other[e1234] * self[e425]),
                (other[e42] * self[e415]) + (other[e1234] * self[e435]),
                -(other[e42] * self[e315]) - (other[e43] * self[e125]) - (other[e23] * self[e415]) - (other[e31] * self[e425]) - (other[e12] * self[e435]),
            ]) - (other.group0().yzx() * self.group0().zxy()).with_w(other[e41] * self[e235]),
            // e23, e31, e12, e45
            Simd32x3::from(0.0).with_w(other[e4125] * self[e435] * -1.0)
                + (self.group1() * other.group2().www()).with_w(other[e43] * self[e125])
                + (other.group0().zxy() * self.group1().yzx()).with_w(other[e41] * self[e235])
                + (self.group0().yzx() * other.group1().zxy()).with_w(other[e42] * self[e315])
                - (other.group0().yzx() * self.group1().zxy()).with_w(other[e4235] * self[e415])
                - (self.group0().zxy() * other.group1().yzx()).with_w(other[e4315] * self[e425]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e12] * self[e315]) + (other[e45] * self[e235]) + (other[e35] * self[e425]) + (other[e4125] * self[e315]) + (other[e3215] * self[e415]),
                (other[e23] * self[e125]) + (other[e45] * self[e315]) + (other[e15] * self[e435]) + (other[e4235] * self[e125]) + (other[e3215] * self[e425]),
                (other[e31] * self[e235]) + (other[e45] * self[e125]) + (other[e25] * self[e415]) + (other[e4315] * self[e235]) + (other[e3215] * self[e435]),
                0.0,
            ]) - (self.group0().zxy() * other.group2().yzx()).with_w(other[e41] * self[e415])
                - (self.group1().zxy() * other.group1().yzx()).with_w(other[e42] * self[e425])
                - (self.group1().zxy() * other.group3().yzx()).with_w(other[e43] * self[e435]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e42] * self[e125]) + (other[e45] * self[e415]) + (other[e4125] * self[e425]),
                (other[e43] * self[e235]) + (other[e45] * self[e425]) + (other[e4235] * self[e435]),
                (other[e41] * self[e315]) + (other[e45] * self[e435]) + (other[e4315] * self[e415]),
                -(other[e23] * self[e235])
                    - (other[e31] * self[e315])
                    - (other[e12] * self[e125])
                    - (other[e4235] * self[e235])
                    - (other[e4315] * self[e315])
                    - (other[e4125] * self[e125]),
            ]) - (other.group2().wwwz() * self.group1().with_w(self[e435]))
                - (other.group0().zxy() * self.group1().yzx()).with_w(other[e15] * self[e415])
                - (self.group0().zxy() * other.group3().yzx()).with_w(other[e25] * self[e425]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum> for Line {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       18        0
    //    simd3        1        8        0
    //    simd4        3        0        0
    // Totals...
    // yes simd       11       26        0
    //  no simd       22       42        0
    fn anti_sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(other[e12345]) * self.group0(),
            // e235, e315, e125
            (Simd32x3::from(other[e5]) * self.group0()) + (Simd32x3::from(other[e12345]) * self.group1()),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for Line {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       17        0
    //    simd3        0        7        0
    //    simd4        8        5        0
    // Totals...
    // yes simd       18       29        0
    //  no simd       42       58        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x3::from(other[e45]) * self.group1()).with_w(0.0) + (self.group0().yzx() * other.group0().zxy()).with_w(0.0)
                - (self.group0().zxy() * other.group0().yzx()).with_w(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([other[e45], other[e45], other[e45], 1.0]) * self.group0().with_w(-(other[e15] * self[e415]) - (other[e25] * self[e425]) - (other[e35] * self[e435])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for Line {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       24       41        0
    //    simd3        0        6        0
    //    simd4        9        5        0
    // Totals...
    // yes simd       33       52        0
    //  no simd       60       79        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e35] * self[e425]) + (other[e45] * self[e235]) + (other[e4125] * self[e315]) + (other[e3215] * self[e415]),
                (other[e15] * self[e435]) + (other[e45] * self[e315]) + (other[e4235] * self[e125]) + (other[e3215] * self[e425]),
                (other[e25] * self[e415]) + (other[e45] * self[e125]) + (other[e4315] * self[e235]) + (other[e3215] * self[e435]),
                other[e4125] * self[e435] * -1.0,
            ]) - (other.group1().yzxy() * self.group1().zxy().with_w(self[e425]))
                - (self.group0().zxy() * other.group0().yzx()).with_w(other[e4235] * self[e415]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e45] * self[e415]) + (other[e4125] * self[e425]),
                (other[e45] * self[e425]) + (other[e4235] * self[e435]),
                (other[e45] * self[e435]) + (other[e4315] * self[e415]),
                -(other[e25] * self[e425]) - (other[e35] * self[e435]) - (other[e4235] * self[e235]) - (other[e4315] * self[e315]) - (other[e4125] * self[e125]),
            ]) - (self.group0().zxy() * other.group1().yzx()).with_w(other[e15] * self[e415]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for Line {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       23       43        0
    //    simd3        0        6        0
    //    simd4        6        2        0
    // Totals...
    // yes simd       29       51        0
    //  no simd       47       69        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                other[e435] * self[e425],
                other[e415] * self[e435],
                other[e425] * self[e415],
                -(other[e425] * self[e425]) - (other[e435] * self[e435]),
            ]) - (other.group0().yzx() * self.group0().zxy()).with_w(other[e415] * self[e415]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e435] * self[e315]) + (other[e125] * self[e425]),
                (other[e415] * self[e125]) + (other[e235] * self[e435]),
                (other[e425] * self[e235]) + (other[e315] * self[e415]),
                -(other[e435] * self[e125]) - (other[e235] * self[e415]) - (other[e315] * self[e425]) - (other[e125] * self[e435]),
            ]) - (other.group0().yzx() * self.group1().zxy()).with_w(other[e415] * self[e235])
                - (other.group1().yzx() * self.group0().zxy()).with_w(other[e425] * self[e315]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for Line {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       50        0
    //    simd3        0        4        0
    //    simd4        6        4        0
    // Totals...
    // yes simd       38       58        0
    //  no simd       56       78        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self[e415] * other[e12345]) + (self[e425] * other[e435]),
                (self[e425] * other[e12345]) + (self[e435] * other[e415]),
                (self[e415] * other[e425]) + (self[e435] * other[e12345]),
                -(self[e425] * other[e425]) - (self[e435] * other[e435]),
            ]) - (other.group0().yzxx() * self.group0().zxy().with_w(self[e415])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e415] * other[e5]) + (self[e425] * other[e125]) + (self[e235] * other[e12345]) + (self[e315] * other[e435]),
                (self[e425] * other[e5]) + (self[e435] * other[e235]) + (self[e315] * other[e12345]) + (self[e125] * other[e415]),
                (self[e415] * other[e315]) + (self[e435] * other[e5]) + (self[e235] * other[e425]) + (self[e125] * other[e12345]),
                -(self[e435] * other[e125]) - (self[e235] * other[e415]) - (self[e315] * other[e425]) - (self[e125] * other[e435]),
            ]) - (other.group1().yzxx() * self.group0().zxy().with_w(self[e415]))
                - (self.group1().zxy() * other.group0().yzx()).with_w(self[e425] * other[e315]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for Line {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       80      130        0
    //    simd2       10       12        0
    //    simd3       34       58        0
    //    simd4       30       16        0
    // Totals...
    // yes simd      154      216        0
    //  no simd      322      392        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            -(Simd32x2::from(self[e415]) * Simd32x2::from([other[e23], other[e415]]))
                - (Simd32x2::from(self[e425]) * Simd32x2::from([other[e31], other[e425]]))
                - (Simd32x2::from(self[e435]) * Simd32x2::from([other[e12], other[e435]]))
                - (Simd32x2::from(self[e235]) * Simd32x2::from([other[e41], other[e423]]))
                - (Simd32x2::from(self[e315]) * Simd32x2::from([other[e42], other[e431]]))
                - (Simd32x2::from(self[e125]) * Simd32x2::from([other[e43], other[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e415] * other[e321]) + (self[e425] * other[e3]) + (self[e235] * other[e4]) + (self[e315] * other[e412]),
                (self[e425] * other[e321]) + (self[e435] * other[e1]) + (self[e315] * other[e4]) + (self[e125] * other[e423]),
                (self[e415] * other[e2]) + (self[e435] * other[e321]) + (self[e235] * other[e431]) + (self[e125] * other[e4]),
                self[e435] * other[e412] * -1.0,
            ]) - (self.group0().zxy() * other.group1().yzx()).with_w(self[e415] * other[e423])
                - (self.group1().zxy() * other.group7().yzx()).with_w(self[e425] * other[e431]),
            // e5
            (self[e235] * other[e1]) + (self[e315] * other[e2]) + (self[e125] * other[e3])
                - (self[e415] * other[e235])
                - (self[e425] * other[e315])
                - (self[e435] * other[e125])
                - (self[e235] * other[e415])
                - (self[e315] * other[e425])
                - (self[e125] * other[e435]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e235] * other[e45]) + (self[e315] * other[e12]) + (self[e315] * other[e4125]),
                (self[e315] * other[e45]) + (self[e125] * other[e23]) + (self[e125] * other[e4235]),
                (self[e235] * other[e31]) + (self[e235] * other[e4315]) + (self[e125] * other[e45]),
                0.0,
            ]) + (other.group0().xx().with_zw(other[scalar], self[e235]) * self.group1().with_w(other[e41]))
                + (other.group3().zx().with_zw(other[e3215], other[e43]) * self.group0().yzz().with_w(self[e125]))
                + (other.group9().ww().with_zw(other[e25], other[e42]) * self.group0().xyx().with_w(self[e315]))
                - (other.group9().yzxz() * self.group1().zxy().with_w(self[e435]))
                - (self.group0().zxy() * other.group3().yzx()).with_w(self[e415] * other[e4235])
                - (self.group1().zxy() * other.group5().yzx()).with_w(self[e425] * other[e4315]),
            // e41, e42, e43
            (Simd32x3::from([other[e1234], other[e1234], other[e42]]) * self.group0().xyx()) + (self.group0().yzz() * other.group4().zx().with_z(other[e1234]))
                - (self.group0().zxy() * other.group4().yzx()),
            // e23, e31, e12
            (Simd32x3::from(other[scalar]) * self.group0())
                + (Simd32x3::from([other[e1234], other[e1234], other[e42]]) * self.group1().xyx())
                + (self.group0().yzx() * other.group5().zxy())
                + (self.group1().yzz() * other.group4().zx().with_z(other[e1234]))
                - (self.group0().zxy() * other.group5().yzx())
                - (self.group1().zxy() * other.group4().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e415] * other[e12345]) + (self[e425] * other[e435]) + (self[e235] * other[e4]) + (self[e315] * other[e412]),
                (self[e425] * other[e12345]) + (self[e435] * other[e415]) + (self[e315] * other[e4]) + (self[e125] * other[e423]),
                (self[e415] * other[e425]) + (self[e435] * other[e12345]) + (self[e235] * other[e431]) + (self[e125] * other[e4]),
                -(self[e435] * other[e3]) - (self[e235] * other[e423]) - (self[e315] * other[e431]) - (self[e125] * other[e412]),
            ]) - (self.group0().zxy() * other.group6().yzx()).with_w(self[e415] * other[e1])
                - (self.group1().zxy() * other.group7().yzx()).with_w(self[e425] * other[e2]),
            // e423, e431, e412
            (Simd32x3::from([other[e4], other[e4], other[e431]]) * self.group0().xyx()) + (self.group0().yzz() * other.group7().zx().with_z(other[e4]))
                - (self.group0().zxy() * other.group7().yzx()),
            // e235, e315, e125
            (Simd32x3::from(other[e12345]) * self.group1())
                + (Simd32x3::from([other[e2], other[e415], other[e1]]) * self.group1().zzy())
                + (Simd32x3::from([other[e5], other[e5], other[e315]]) * self.group0().xyx())
                + (Simd32x3::from([other[e435], other[e3], other[e425]]) * self.group1().yxx())
                + (self.group0().yzz() * other.group8().zx().with_z(other[e5]))
                - (Simd32x3::from(self[e235]) * Simd32x3::from([other[e321], other[e435], other[e2]]))
                - (Simd32x3::from(self[e315]) * Simd32x3::from([other[e3], other[e321], other[e415]]))
                - (Simd32x3::from(self[e125]) * Simd32x3::from([other[e425], other[e1], other[e321]]))
                - (self.group0().zxy() * other.group8().yzx()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e415] * other[e45]) + (self[e425] * other[e4125]) + (self[e125] * other[e42]),
                (self[e425] * other[e45]) + (self[e435] * other[e4235]) + (self[e235] * other[e43]),
                (self[e415] * other[e4315]) + (self[e435] * other[e45]) + (self[e315] * other[e41]),
                -(self[e235] * other[e23])
                    - (self[e235] * other[e4235])
                    - (self[e315] * other[e31])
                    - (self[e315] * other[e4315])
                    - (self[e125] * other[e12])
                    - (self[e125] * other[e4125]),
            ]) - (Simd32x4::from([other[e1234], other[e1234], other[e42], other[e25]]) * self.group1().xyx().with_w(self[e425]))
                - (other.group4().zx().with_zw(other[e1234], other[e35]) * self.group1().yzz().with_w(self[e435]))
                - (self.group0().zxy() * other.group9().yzx()).with_w(self[e415] * other[e15]),
            // e1234
            -(self[e415] * other[e41]) - (self[e425] * other[e42]) - (self[e435] * other[e43]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for Line {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       27        0
    //    simd3        0        4        0
    //    simd4        8        6        0
    // Totals...
    // yes simd       21       37        0
    //  no simd       45       63        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e415] * other[e3215]) + (self[e315] * other[e4125]),
                (self[e425] * other[e3215]) + (self[e125] * other[e4235]),
                (self[e435] * other[e3215]) + (self[e235] * other[e4315]),
                -(self[e425] * other[e4315]) - (self[e435] * other[e4125]),
            ]) - (other.group0().yzxx() * self.group1().zxy().with_w(self[e415])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e425] * other[e4125],
                self[e435] * other[e4235],
                self[e415] * other[e4315],
                -(self[e315] * other[e4315]) - (self[e125] * other[e4125]),
            ]) - (other.group0().yzxx() * self.group0().zxy().with_w(self[e235])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       64        0
    //    simd3        0       17        0
    //    simd4       16        4        0
    // Totals...
    // yes simd       48       85        0
    //  no simd       96      131        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[e4]) * self.group0(),
            // e415, e425, e435, e321
            Simd32x4::from([other[e4], other[e4], other[e4], 1.0]) * self.group1().with_w(-(self[e415] * other[e1]) - (self[e425] * other[e2]) - (self[e435] * other[e3])),
            // e235, e315, e125, e4
            (Simd32x3::from(other[e5]) * self.group0()).with_w(0.0) + (self.group1().zxy() * other.group0().yzx()).with_w(0.0)
                - (self.group1().yzx() * other.group0().zxy()).with_w(0.0),
            // e1, e2, e3, e5
            Simd32x4::from([self[e435] * other[e2] * -1.0, self[e415] * other[e3] * -1.0, self[e425] * other[e1] * -1.0, self[e125] * other[e3]])
                + (other.group0().zxyx() * self.group0().yzx().with_w(self[e235]))
                + (other.group0().wwwy() * self.group1().with_w(self[e315])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for Line {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       18        0
    //    simd3        0        7        0
    //    simd4        3        0        0
    // Totals...
    // yes simd       10       25        0
    //  no simd       19       39        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(other[scalar]) * self.group0(),
            // e15, e25, e35
            Simd32x3::from(other[scalar]) * self.group1(),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       33       61        0
    //    simd3        0       13        0
    //    simd4       15        7        0
    // Totals...
    // yes simd       48       81        0
    //  no simd       93      128        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(other[e1234]) * self.group0(),
            // e23, e31, e12, e45
            Simd32x4::from([other[e1234], other[e1234], other[e1234], 1.0])
                * self.group1().with_w(-(self[e415] * other[e4235]) - (self[e425] * other[e4315]) - (self[e435] * other[e4125])),
            // e15, e25, e35, e1234
            (Simd32x3::from(other[e3215]) * self.group0()).with_w(0.0) + (self.group1().yzx() * other.group0().zxy()).with_w(0.0)
                - (self.group1().zxy() * other.group0().yzx()).with_w(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e425] * other[e4125], self[e435] * other[e4235], self[e415] * other[e4315], self[e125] * other[e4125] * -1.0])
                - (Simd32x4::from([other[e1234], other[e1234], other[e1234], other[e4315]]) * self.group1().with_w(self[e315]))
                - (other.group0().yzxx() * self.group0().zxy().with_w(self[e235])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for Line {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       65      110        0
    //    simd3        0       14        0
    //    simd4       24       12        0
    // Totals...
    // yes simd       89      136        0
    //  no simd      161      200        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (self[e415] * other[e4]) + (self[e425] * other[e412]),
                (self[e425] * other[e4]) + (self[e435] * other[e423]),
                (self[e415] * other[e431]) + (self[e435] * other[e4]),
                -(self[e425] * other[e425]) - (self[e435] * other[e435]) - (self[e235] * other[e423]) - (self[e315] * other[e431]) - (self[e125] * other[e412]),
            ]) - (self.group0().zxy() * other.group0().yzx()).with_w(self[e415] * other[e415]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e415] * other[e12345]) + (self[e425] * other[e435]) + (self[e235] * other[e4]) + (self[e315] * other[e412]),
                (self[e425] * other[e12345]) + (self[e435] * other[e415]) + (self[e315] * other[e4]) + (self[e125] * other[e423]),
                (self[e415] * other[e425]) + (self[e435] * other[e12345]) + (self[e235] * other[e431]) + (self[e125] * other[e4]),
                -(self[e435] * other[e3]) - (self[e235] * other[e423]) - (self[e315] * other[e431]) - (self[e125] * other[e412]),
            ]) - (self.group0().zxy() * other.group1().yzx()).with_w(self[e415] * other[e1])
                - (self.group1().zxy() * other.group0().yzx()).with_w(self[e425] * other[e2]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e315] * other[e435]) + (self[e125] * other[e2]),
                (self[e315] * other[e12345]) + (self[e125] * other[e415]),
                (self[e315] * other[e1]) + (self[e125] * other[e12345]),
                -(self[e315] * other[e425]) - (self[e125] * other[e435]),
            ]) + (Simd32x4::from([other[e12345], other[e3], other[e425], other[e3]]) * self.group1().xxx().with_w(self[e125]))
                + (self.group0().xyx() * other.group2().wwy()).with_w(self[e235] * other[e1])
                + (self.group0().yzz() * other.group2().zxw()).with_w(self[e315] * other[e2])
                - (Simd32x4::from([other[e425], other[e1], other[e321], other[e415]]) * self.group1().zzz().with_w(self[e235]))
                - (Simd32x4::from([other[e3], other[e321], other[e415], other[e125]]) * self.group1().yyy().with_w(self[e435]))
                - (other.group2().yzxx() * self.group0().zxy().with_w(self[e415]))
                - (other.group1().wz().with_zw(other[e2], other[e315]) * self.group1().xxx().with_w(self[e425])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e415] * other[e321]) + (self[e425] * other[e3]) + (self[e235] * other[e4]) + (self[e315] * other[e412]),
                (self[e425] * other[e321]) + (self[e435] * other[e1]) + (self[e315] * other[e4]) + (self[e125] * other[e423]),
                (self[e415] * other[e2]) + (self[e435] * other[e321]) + (self[e235] * other[e431]) + (self[e125] * other[e4]),
                self[e435] * other[e412] * -1.0,
            ]) - (other.group0().yzxy() * self.group1().zxy().with_w(self[e425]))
                - (self.group0().zxy() * other.group3().yzx()).with_w(self[e415] * other[e423]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for Line {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       70      114        0
    //    simd3        0       15        0
    //    simd4       23       10        0
    // Totals...
    // yes simd       93      139        0
    //  no simd      162      199        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e415] * other[e1234]) + (self[e425] * other[e43]),
                (self[e425] * other[e1234]) + (self[e435] * other[e41]),
                (self[e415] * other[e42]) + (self[e435] * other[e1234]),
                -(self[e425] * other[e31]) - (self[e435] * other[e12]) - (self[e235] * other[e41]) - (self[e315] * other[e42]) - (self[e125] * other[e43]),
            ]) - (self.group0().zxy() * other.group0().yzx()).with_w(self[e415] * other[e23]),
            // e23, e31, e12, e45
            Simd32x4::from([self[e315] * other[e43], self[e125] * other[e41], self[e125] * other[e1234], self[e435] * other[e4125] * -1.0])
                + (other.group0().ww().with_zw(other[e31], other[e41]) * self.group0().xyx().with_w(self[e235]))
                + (other.group1().zx().with_zw(other[scalar], other[e42]) * self.group0().yzz().with_w(self[e315]))
                + (other.group2().ww().with_zw(other[e42], other[e43]) * self.group1().xyx().with_w(self[e125]))
                - (self.group0().zxy() * other.group1().yzx()).with_w(self[e415] * other[e4235])
                - (self.group1().zxy() * other.group0().yzx()).with_w(self[e425] * other[e4315]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e415] * other[e3215])
                    + (self[e425] * other[e35])
                    + (self[e235] * other[scalar])
                    + (self[e235] * other[e45])
                    + (self[e315] * other[e12])
                    + (self[e315] * other[e4125]),
                (self[e425] * other[e3215])
                    + (self[e435] * other[e15])
                    + (self[e315] * other[scalar])
                    + (self[e315] * other[e45])
                    + (self[e125] * other[e23])
                    + (self[e125] * other[e4235]),
                (self[e415] * other[e25])
                    + (self[e435] * other[e3215])
                    + (self[e235] * other[e31])
                    + (self[e235] * other[e4315])
                    + (self[e125] * other[scalar])
                    + (self[e125] * other[e45]),
                0.0,
            ]) - (self.group0().zxy() * other.group2().yzx()).with_w(self[e415] * other[e41])
                - (self.group1().zxy() * other.group1().yzx()).with_w(self[e425] * other[e42])
                - (self.group1().zxy() * other.group3().yzx()).with_w(self[e435] * other[e43]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e415] * other[e45]) + (self[e425] * other[e4125]) + (self[e125] * other[e42]),
                (self[e425] * other[e45]) + (self[e435] * other[e4235]) + (self[e235] * other[e43]),
                (self[e415] * other[e4315]) + (self[e435] * other[e45]) + (self[e315] * other[e41]),
                -(self[e235] * other[e23])
                    - (self[e235] * other[e4235])
                    - (self[e315] * other[e31])
                    - (self[e315] * other[e4315])
                    - (self[e125] * other[e12])
                    - (self[e125] * other[e4125]),
            ]) - (other.group0().zx().with_zw(other[e1234], other[e35]) * self.group1().yzz().with_w(self[e435]))
                - (other.group2().ww().with_zw(other[e42], other[e25]) * self.group1().xyx().with_w(self[e425]))
                - (self.group0().zxy() * other.group3().yzx()).with_w(self[e415] * other[e15]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl std::ops::Div<anti_sandwich> for Motor {
    type Output = anti_sandwich_partial<Motor>;
    fn div(self, _rhs: anti_sandwich) -> Self::Output {
        anti_sandwich_partial(self)
    }
}
impl AntiSandwich<AntiCircleRotor> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       69      103        0
    //    simd3        0        6        0
    //    simd4       30       26        0
    // Totals...
    // yes simd       99      135        0
    //  no simd      189      225        0
    fn anti_sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                other[e43] * self[e425],
                other[e42] * self[e12345],
                other[e43] * self[e12345],
                -(other[e42] * self[e315]) - (other[e43] * self[e125]) - (other[e23] * self[e415]) - (other[e31] * self[e425]) - (other[e12] * self[e435]),
            ]) + (self.group0().wzxw() * other.group0().xxy().with_w(other[scalar]))
                - (other.group0().yzx() * self.group0().zxy()).with_w(other[e41] * self[e235]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[scalar] * self[e415]) - (other[e42] * self[e125]) - (other[e31] * self[e435]),
                (other[scalar] * self[e425]) - (other[e43] * self[e235]) - (other[e12] * self[e415]),
                (other[scalar] * self[e435]) - (other[e41] * self[e315]) - (other[e23] * self[e425]),
                0.0,
            ]) + (other.group1().zyzw() * self.group0().ywww())
                + (self.group1().ywwy() * other.group0().zyz().with_w(other[e42]))
                + (self.group1().wzxx() * other.group0().xxy().with_w(other[e41]))
                + (other.group1().xxy() * self.group0().wzx()).with_w(other[e43] * self[e125]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e23] * self[e5])
                    + (other[e12] * self[e315])
                    + (other[e45] * self[e235])
                    + (other[e15] * self[e12345])
                    + (other[e35] * self[e425])
                    + (other[scalar] * self[e235]),
                (other[e23] * self[e125])
                    + (other[e31] * self[e5])
                    + (other[e45] * self[e315])
                    + (other[e15] * self[e435])
                    + (other[e25] * self[e12345])
                    + (other[scalar] * self[e315]),
                (other[e31] * self[e235])
                    + (other[e12] * self[e5])
                    + (other[e45] * self[e125])
                    + (other[e25] * self[e415])
                    + (other[e35] * self[e12345])
                    + (other[scalar] * self[e125]),
                other[e43] * self[e435] * -1.0,
            ]) - (self.group0().zxyy() * other.group2().yzx().with_w(other[e42]))
                - (other.group1().yzx() * self.group1().zxy()).with_w(other[e41] * self[e415]),
            // e4235, e4315, e4125, e3215
            (self.group1().zxyw() * other.group0().yzx().with_w(other[e45]))
                + Simd32x3::from(0.0).with_w(-(other[e12] * self[e125]) - (other[e15] * self[e415]) - (other[e25] * self[e425]) - (other[e35] * self[e435]))
                + (other.group1().www() * self.group0().xyz()).with_w(other[scalar] * self[e5])
                - (self.group1().ywwy() * other.group0().zyz().with_w(other[e31]))
                - (self.group1().wzxx() * other.group0().xxy().with_w(other[e23])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDipoleInversion> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       69      116        0
    //    simd3        0       15        0
    //    simd4       37       24        0
    // Totals...
    // yes simd      106      155        0
    //  no simd      217      257        0
    fn anti_sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e412] * self[e425]) + (other[e4] * self[e415]),
                (other[e431] * self[e12345]) + (other[e4] * self[e425]),
                (other[e412] * self[e12345]) + (other[e4] * self[e435]),
                -(other[e431] * self[e315]) - (other[e412] * self[e125]) - (other[e415] * self[e415]) - (other[e425] * self[e425]) - (other[e435] * self[e435]),
            ]) + (other.group0().xxy() * self.group0().wzx()).with_w(other[e4] * self[e5])
                - (other.group0().yzx() * self.group0().zxy()).with_w(other[e423] * self[e235]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e415] * self[e12345]) + (other[e435] * self[e425]) + (other[e4] * self[e235]),
                (other[e415] * self[e435]) + (other[e425] * self[e12345]) + (other[e4] * self[e315]),
                (other[e425] * self[e415]) + (other[e435] * self[e12345]) + (other[e4] * self[e125]),
                -(other[e412] * self[e125]) - (other[e1] * self[e415]) - (other[e2] * self[e425]) - (other[e3] * self[e435]),
            ]) + (self.group1().ywww() * other.group0().zyz().with_w(other[e4]))
                + (other.group0().xxy() * self.group1().wzx()).with_w(other[e321] * self[e12345])
                - (self.group1().zxyx() * other.group0().yzx().with_w(other[e423]))
                - (other.group1().yzx() * self.group0().zxy()).with_w(other[e431] * self[e315]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e2] * self[e125]) + (other[e5] * self[e415]),
                (other[e3] * self[e235]) + (other[e5] * self[e425]),
                (other[e1] * self[e315]) + (other[e5] * self[e435]),
                -(other[e315] * self[e425]) - (other[e125] * self[e435]),
            ]) + (self.group0().ywww() * other.group2().zyz().with_w(other[e5]))
                + (self.group1().ywwy() * other.group1().zyz().with_w(other[e2]))
                + (self.group1().wzxx() * other.group1().xxy().with_w(other[e1]))
                + (other.group2().xxy() * self.group0().wzx()).with_w(other[e3] * self[e125])
                - (other.group1().yzxx() * self.group1().zxyx())
                - (other.group1().wwwy() * self.group1().xyzy())
                - (self.group1().wzxw() * other.group3().xxy().with_w(other[e321]))
                - (other.group2().yzx() * self.group0().zxy()).with_w(other[e435] * self[e125])
                - (other.group3().zyz() * self.group1().yww()).with_w(other[e235] * self[e415]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e321] * self[e415]) + (other[e4] * self[e235]) + (other[e1] * self[e12345]) + (other[e3] * self[e425]),
                (other[e431] * self[e5]) + (other[e321] * self[e425]) + (other[e4] * self[e315]) + (other[e1] * self[e435]) + (other[e2] * self[e12345]),
                (other[e412] * self[e5]) + (other[e321] * self[e435]) + (other[e4] * self[e125]) + (other[e2] * self[e415]) + (other[e3] * self[e12345]),
                other[e412] * self[e435] * -1.0,
            ]) + (other.group0().xxy() * self.group1().wzx()).with_w(other[e4] * self[e12345])
                - (self.group0().zxyy() * other.group3().yzx().with_w(other[e431]))
                - (other.group0().yzx() * self.group1().zxy()).with_w(other[e423] * self[e415]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum> for Motor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       26        0
    //    simd3        0        2        0
    //    simd4        7        9        0
    // Totals...
    // yes simd       23       37        0
    //  no simd       44       68        0
    fn anti_sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(other[scalar]) * self.group0(),
            // e15, e25, e35, e3215
            (Simd32x4::from(other[e3215]) * self.group0()) + (Simd32x4::from(other[scalar]) * self.group1()),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlatPoint> for Motor {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       30        0
    //    simd3        3        4        0
    //    simd4        6        9        0
    // Totals...
    // yes simd       28       43        0
    //  no simd       52       78        0
    fn anti_sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            ((other.group0().xxy() * self.group0().wzx()) + (other.group0().zyz() * self.group0().yww())
                - (Simd32x3::from(other[e321]) * self.group1().xyz())
                - (other.group0().yzx() * self.group0().zxy()))
            .with_w(other[e321] * self[e12345]),
            // e1, e2, e3, e5
            Simd32x4::from([self[e415], self[e425], self[e435], 1.0])
                * other
                    .group0()
                    .www()
                    .with_w(-(other[e235] * self[e415]) - (other[e315] * self[e425]) - (other[e125] * self[e435]) - (other[e321] * self[e5])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlector> for Motor {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       43        0
    //    simd3        0        2        0
    //    simd4       14       14        0
    // Totals...
    // yes simd       42       59        0
    //  no simd       84      105        0
    fn anti_sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (other[e125] * self[e425]) + (other[e2] * self[e125]) + (other[e5] * self[e415]) - (other[e3] * self[e315]),
                (other[e315] * self[e12345]) + (other[e3] * self[e235]) + (other[e5] * self[e425]) - (other[e2] * self[e5]),
                (other[e125] * self[e12345]) + (other[e1] * self[e315]) + (other[e5] * self[e435]) - (other[e3] * self[e5]),
                0.0,
            ]) + (other.group0().xxyw() * self.group0().wzxw())
                - (other.group1().xxyz() * self.group1().wzx().with_w(self[e435]))
                - (self.group0().zxyx() * other.group0().yzx().with_w(other[e1]))
                - (other.group0().www() * self.group1().xyz()).with_w(other[e2] * self[e425]),
            // e1, e2, e3, e5
            (other.group1().xxyy() * self.group0().wzx().with_w(self[e315]))
                + (other.group1().zyzz() * self.group0().yww().with_w(self[e125]))
                + Simd32x3::from(0.0).with_w((other[e5] * self[e12345]) - (other[e315] * self[e425]) - (other[e125] * self[e435]) - (other[e321] * self[e5]))
                + (other.group0().www() * self.group0().xyz()).with_w(other[e1] * self[e235])
                - (self.group0().zxyx() * other.group1().yzx().with_w(other[e235])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiLine> for Motor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       51        0
    //    simd3        0        3        0
    //    simd4        9        8        0
    // Totals...
    // yes simd       41       62        0
    //  no simd       68       92        0
    fn anti_sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (other[e23] * self[e12345]) + (other[e12] * self[e425]),
                (other[e23] * self[e435]) + (other[e31] * self[e12345]),
                (other[e31] * self[e415]) + (other[e12] * self[e12345]),
                -(other[e31] * self[e425]) - (other[e12] * self[e435]),
            ]) - (self.group0().zxyx() * other.group0().yzx().with_w(other[e23])),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (other[e23] * self[e5]) + (other[e12] * self[e315]) + (other[e15] * self[e12345]) + (other[e35] * self[e425]),
                (other[e23] * self[e125]) + (other[e31] * self[e5]) + (other[e15] * self[e435]) + (other[e25] * self[e12345]),
                (other[e31] * self[e235]) + (other[e12] * self[e5]) + (other[e25] * self[e415]) + (other[e35] * self[e12345]),
                -(other[e12] * self[e125]) - (other[e15] * self[e415]) - (other[e25] * self[e425]) - (other[e35] * self[e435]),
            ]) - (self.group1().zxyx() * other.group0().yzx().with_w(other[e23]))
                - (other.group1().yzx() * self.group0().zxy()).with_w(other[e31] * self[e315]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiMotor> for Motor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       52        0
    //    simd3        0        4        0
    //    simd4       12       10        0
    // Totals...
    // yes simd       44       66        0
    //  no simd       80      104        0
    fn anti_sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (other[e12] * self[e425]) + (other[scalar] * self[e415]),
                (other[e31] * self[e12345]) + (other[scalar] * self[e425]),
                (other[e12] * self[e12345]) + (other[scalar] * self[e435]),
                -(other[e31] * self[e425]) - (other[e12] * self[e435]),
            ]) + (other.group0().xxyw() * self.group0().wzxw())
                - (other.group0().yzxx() * self.group0().zxyx()),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (other[scalar] * self[e235]) + (other[e15] * self[e12345]) + (other[e35] * self[e425]) + (other[e3215] * self[e415]),
                (other[scalar] * self[e315]) + (other[e15] * self[e435]) + (other[e25] * self[e12345]) + (other[e3215] * self[e425]),
                (other[scalar] * self[e125]) + (other[e25] * self[e415]) + (other[e35] * self[e12345]) + (other[e3215] * self[e435]),
                -(other[e12] * self[e125]) - (other[e15] * self[e415]) - (other[e25] * self[e425]) - (other[e35] * self[e435]),
            ]) + (other.group0().xxyw() * self.group1().wzxw())
                + (other.group0().zyz() * self.group1().yww()).with_w(other[e3215] * self[e12345])
                - (other.group0().yzxx() * self.group1().zxyx())
                - (other.group1().yzx() * self.group0().zxy()).with_w(other[e31] * self[e315]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiPlane> for Motor {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       41        0
    //    simd4       10       12        0
    // Totals...
    // yes simd       30       53        0
    //  no simd       60       89        0
    fn anti_sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (other[e2] * self[e125]) + (other[e5] * self[e415]),
                (other[e3] * self[e235]) + (other[e5] * self[e425]),
                (other[e1] * self[e315]) + (other[e5] * self[e435]),
                other[e3] * self[e435] * -1.0,
            ]) - (other.group0().xxyx() * self.group1().wzx().with_w(self[e415]))
                - (other.group0().zyzy() * self.group1().yww().with_w(self[e425])),
            // e1, e2, e3, e5
            Simd32x4::from([
                other[e2] * self[e435] * -1.0,
                other[e3] * self[e415] * -1.0,
                other[e1] * self[e425] * -1.0,
                (other[e3] * self[e125]) + (other[e5] * self[e12345]),
            ]) + (other.group0().xxyx() * self.group0().wzx().with_w(self[e235]))
                + (other.group0().zyzy() * self.group0().yww().with_w(self[e315])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiScalar> for Motor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       26        0
    //    simd3        0        2        0
    //    simd4        6        8        0
    // Totals...
    // yes simd       22       36        0
    //  no simd       40       64        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(other[e12345]) * self.group0(),
            // e235, e315, e125, e5
            Simd32x4::from(other[e12345]) * self.group1(),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       69      113        0
    //    simd3        0       12        0
    //    simd4       27       17        0
    // Totals...
    // yes simd       96      142        0
    //  no simd      177      217        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e423] * self[e12345]) + (other[e412] * self[e425]),
                (other[e423] * self[e435]) + (other[e431] * self[e12345]),
                (other[e431] * self[e415]) + (other[e412] * self[e12345]),
                -(other[e431] * self[e315]) - (other[e412] * self[e125]) - (other[e415] * self[e415]) - (other[e425] * self[e425]) - (other[e435] * self[e435]),
            ]) - (other.group0().yzx() * self.group0().zxy()).with_w(other[e423] * self[e235]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e415] * self[e12345]) + (other[e435] * self[e425]),
                (other[e431] * self[e5]) + (other[e415] * self[e435]) + (other[e425] * self[e12345]),
                (other[e412] * self[e5]) + (other[e425] * self[e415]) + (other[e435] * self[e12345]),
                other[e412] * self[e125] * -1.0,
            ]) + (other.group0().xxy() * self.group1().wzx()).with_w(other[e321] * self[e12345])
                - (self.group1().zxyx() * other.group0().yzx().with_w(other[e423]))
                - (other.group1().yzx() * self.group0().zxy()).with_w(other[e431] * self[e315]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e415] * self[e5]) + (other[e435] * self[e315]) + (other[e235] * self[e12345]) + (other[e125] * self[e425]),
                (other[e415] * self[e125]) + (other[e425] * self[e5]) + (other[e235] * self[e435]) + (other[e315] * self[e12345]),
                (other[e425] * self[e235]) + (other[e435] * self[e5]) + (other[e315] * self[e415]) + (other[e125] * self[e12345]),
                -(other[e415] * self[e235]) - (other[e425] * self[e315]) - (other[e435] * self[e125]) - (other[e321] * self[e5]),
            ]) - (self.group0().zxyx() * other.group2().yzx().with_w(other[e235]))
                - (other.group1().yzx() * self.group1().zxy()).with_w(other[e315] * self[e425])
                - (other.group1().www() * self.group1().xyz()).with_w(other[e125] * self[e435]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e423] * self[e5]) + (other[e412] * self[e315]) + (other[e321] * self[e415]),
                (other[e423] * self[e125]) + (other[e431] * self[e5]) + (other[e321] * self[e425]),
                (other[e431] * self[e235]) + (other[e412] * self[e5]) + (other[e321] * self[e435]),
                -(other[e431] * self[e425]) - (other[e412] * self[e435]),
            ]) - (other.group0().yzx() * self.group1().zxy()).with_w(other[e423] * self[e415]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       69      112        0
    //    simd3        0       11        0
    //    simd4       29       20        0
    // Totals...
    // yes simd       98      143        0
    //  no simd      185      225        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                other[e412] * self[e425],
                other[e431] * self[e12345],
                other[e412] * self[e12345],
                -(other[e431] * self[e315]) - (other[e412] * self[e125]) - (other[e415] * self[e415]) - (other[e425] * self[e425]) - (other[e435] * self[e435]),
            ]) + (self.group0().wzxw() * other.group0().xxy().with_w(other[e12345]))
                - (other.group0().yzx() * self.group0().zxy()).with_w(other[e423] * self[e235]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e412] * self[e315]) + (other[e415] * self[e12345]) + (other[e435] * self[e425]) + (other[e12345] * self[e415]),
                (other[e431] * self[e5]) + (other[e415] * self[e435]) + (other[e425] * self[e12345]) + (other[e12345] * self[e425]),
                (other[e412] * self[e5]) + (other[e425] * self[e415]) + (other[e435] * self[e12345]) + (other[e12345] * self[e435]),
                other[e412] * self[e125] * -1.0,
            ]) + (other.group0().xxy() * self.group1().wzx()).with_w(other[e321] * self[e12345])
                - (self.group1().zxyx() * other.group0().yzx().with_w(other[e423]))
                - (other.group1().yzx() * self.group0().zxy()).with_w(other[e431] * self[e315]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e435] * self[e315]) + (other[e235] * self[e12345]) + (other[e125] * self[e425]) + (other[e12345] * self[e235]),
                (other[e425] * self[e5]) + (other[e235] * self[e435]) + (other[e315] * self[e12345]) + (other[e12345] * self[e315]),
                (other[e435] * self[e5]) + (other[e315] * self[e415]) + (other[e125] * self[e12345]) + (other[e12345] * self[e125]),
                -(other[e321] * self[e5]) - (other[e235] * self[e415]) - (other[e315] * self[e425]) - (other[e125] * self[e435]),
            ]) + (self.group1().wzxw() * other.group1().xxy().with_w(other[e12345]))
                - (other.group1().yzxx() * self.group1().zxyx())
                - (other.group1().wwwy() * self.group1().xyzy())
                - (other.group2().yzx() * self.group0().zxy()).with_w(other[e435] * self[e125]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e423] * self[e5]) + (other[e412] * self[e315]) + (other[e321] * self[e415]),
                (other[e423] * self[e125]) + (other[e431] * self[e5]) + (other[e321] * self[e425]),
                (other[e431] * self[e235]) + (other[e412] * self[e5]) + (other[e321] * self[e435]),
                -(other[e431] * self[e425]) - (other[e412] * self[e435]),
            ]) - (other.group0().yzx() * self.group1().zxy()).with_w(other[e423] * self[e415]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       66      104        0
    //    simd3        0        7        0
    //    simd4       28       23        0
    // Totals...
    // yes simd       94      134        0
    //  no simd      178      217        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e41] * self[e12345]) + (other[e43] * self[e425]),
                (other[e41] * self[e435]) + (other[e42] * self[e12345]),
                (other[e42] * self[e415]) + (other[e43] * self[e12345]),
                -(other[e42] * self[e315]) - (other[e43] * self[e125]) - (other[e23] * self[e415]) - (other[e31] * self[e425]) - (other[e12] * self[e435]),
            ]) - (other.group0().yzx() * self.group0().zxy()).with_w(other[e41] * self[e235]),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(other[e42] * self[e125]) - (other[e31] * self[e435]),
                -(other[e43] * self[e235]) - (other[e12] * self[e415]),
                -(other[e41] * self[e315]) - (other[e23] * self[e425]),
                0.0,
            ]) + (other.group1().zyzw() * self.group0().ywww())
                + (self.group1().ywwy() * other.group0().zyz().with_w(other[e42]))
                + (self.group1().wzxx() * other.group0().xxy().with_w(other[e41]))
                + (other.group1().xxy() * self.group0().wzx()).with_w(other[e43] * self[e125]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e23] * self[e5]) + (other[e12] * self[e315]) + (other[e45] * self[e235]) + (other[e15] * self[e12345]) + (other[e35] * self[e425]),
                (other[e23] * self[e125]) + (other[e31] * self[e5]) + (other[e45] * self[e315]) + (other[e15] * self[e435]) + (other[e25] * self[e12345]),
                (other[e31] * self[e235]) + (other[e12] * self[e5]) + (other[e45] * self[e125]) + (other[e25] * self[e415]) + (other[e35] * self[e12345]),
                other[e43] * self[e435] * -1.0,
            ]) - (self.group0().zxyx() * other.group2().yzx().with_w(other[e41]))
                - (other.group1().yzx() * self.group1().zxy()).with_w(other[e42] * self[e425]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e45] * self[e415],
                other[e45] * self[e425],
                other[e45] * self[e435],
                -(other[e23] * self[e235]) - (other[e31] * self[e315]) - (other[e12] * self[e125]) - (other[e35] * self[e435]),
            ]) + (self.group1().zxyw() * other.group0().yzx().with_w(other[e45]))
                - (other.group0().xxy() * self.group1().wzx()).with_w(other[e15] * self[e415])
                - (other.group0().zyz() * self.group1().yww()).with_w(other[e25] * self[e425]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       74      112        0
    //    simd3        0        8        0
    //    simd4       36       30        0
    // Totals...
    // yes simd      110      150        0
    //  no simd      218      256        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e43] * self[e425]) + (other[e1234] * self[e415]),
                (other[e42] * self[e12345]) + (other[e1234] * self[e425]),
                (other[e43] * self[e12345]) + (other[e1234] * self[e435]),
                -(other[e42] * self[e315]) - (other[e43] * self[e125]) - (other[e23] * self[e415]) - (other[e31] * self[e425]) - (other[e12] * self[e435]),
            ]) + (other.group0().xxy() * self.group0().wzx()).with_w(other[e1234] * self[e5])
                - (other.group0().yzx() * self.group0().zxy()).with_w(other[e41] * self[e235]),
            // e23, e31, e12, e45
            Simd32x4::from([
                other[e1234] * self[e235],
                other[e1234] * self[e315],
                other[e1234] * self[e125],
                -(other[e4315] * self[e425]) - (other[e4125] * self[e435]),
            ]) + (other.group1().zyzw() * self.group0().ywww())
                + (self.group1().ywwy() * other.group0().zyz().with_w(other[e42]))
                + (self.group1().wzxx() * other.group0().xxy().with_w(other[e41]))
                + (other.group1().xxy() * self.group0().wzx()).with_w(other[e43] * self[e125])
                - (self.group0().zxyx() * other.group1().yzx().with_w(other[e4235]))
                - (self.group1().zxyw() * other.group0().yzx().with_w(other[e1234])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e12] * self[e315])
                    + (other[e45] * self[e235])
                    + (other[e15] * self[e12345])
                    + (other[e35] * self[e425])
                    + (other[e4235] * self[e5])
                    + (other[e4125] * self[e315])
                    + (other[e3215] * self[e415]),
                (other[e31] * self[e5])
                    + (other[e45] * self[e315])
                    + (other[e15] * self[e435])
                    + (other[e25] * self[e12345])
                    + (other[e4235] * self[e125])
                    + (other[e4315] * self[e5])
                    + (other[e3215] * self[e425]),
                (other[e12] * self[e5])
                    + (other[e45] * self[e125])
                    + (other[e25] * self[e415])
                    + (other[e35] * self[e12345])
                    + (other[e4315] * self[e235])
                    + (other[e4125] * self[e5])
                    + (other[e3215] * self[e435]),
                0.0,
            ]) + (other.group1().xxy() * self.group1().wzx()).with_w(other[e1234] * self[e12345])
                - (self.group0().zxyy() * other.group2().yzx().with_w(other[e42]))
                - (other.group1().yzx() * self.group1().zxy()).with_w(other[e41] * self[e415])
                - (other.group3().yzx() * self.group1().zxy()).with_w(other[e43] * self[e435]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e4235] * self[e12345]) + (other[e4125] * self[e425]),
                (other[e4235] * self[e435]) + (other[e4315] * self[e12345]),
                (other[e4315] * self[e415]) + (other[e4125] * self[e12345]),
                -(other[e25] * self[e425]) - (other[e35] * self[e435]) - (other[e4235] * self[e235]) - (other[e4315] * self[e315]) - (other[e4125] * self[e125]),
            ]) + (self.group0() * other.group1().www().with_w(other[e3215]))
                + (self.group1().zxyw() * other.group0().yzx().with_w(other[e45]))
                - (self.group0().zxyx() * other.group3().yzx().with_w(other[e15]))
                - (self.group1().xyzz() * other.group2().www().with_w(other[e12]))
                - (self.group1().ywwy() * other.group0().zyz().with_w(other[e31]))
                - (self.group1().wzxx() * other.group0().xxy().with_w(other[e23])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum> for Motor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       26        0
    //    simd3        0        2        0
    //    simd4        7        9        0
    // Totals...
    // yes simd       23       37        0
    //  no simd       44       68        0
    fn anti_sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(other[e12345]) * self.group0(),
            // e235, e315, e125, e5
            (Simd32x4::from(other[e5]) * self.group0()) + (Simd32x4::from(other[e12345]) * self.group1()),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for Motor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       23        0
    //    simd3        3        6        0
    //    simd4        8        9        0
    // Totals...
    // yes simd       26       38        0
    //  no simd       56       77        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            ((Simd32x3::from(other[e45]) * self.group1().xyz()) + (other.group0().xxy() * self.group0().wzx()) + (other.group0().zyz() * self.group0().yww())
                - (other.group0().yzx() * self.group0().zxy()))
            .with_w(other[e45] * self[e12345]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e415], self[e425], self[e435], 1.0])
                * other
                    .group0()
                    .www()
                    .with_w((other[e45] * self[e5]) - (other[e15] * self[e415]) - (other[e25] * self[e425]) - (other[e35] * self[e435])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for Motor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       43        0
    //    simd3        0        2        0
    //    simd4       14       14        0
    // Totals...
    // yes simd       42       59        0
    //  no simd       84      105        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e35] * self[e425]) + (other[e45] * self[e235]) + (other[e4235] * self[e5]) + (other[e4125] * self[e315]) + (other[e3215] * self[e415]),
                (other[e25] * self[e12345]) + (other[e45] * self[e315]) + (other[e4235] * self[e125]) + (other[e4315] * self[e5]) + (other[e3215] * self[e425]),
                (other[e35] * self[e12345]) + (other[e45] * self[e125]) + (other[e4315] * self[e235]) + (other[e4125] * self[e5]) + (other[e3215] * self[e435]),
                other[e4125] * self[e435] * -1.0,
            ]) + (other.group0().xxyw() * self.group0().wzxw())
                - (other.group1().yzxy() * self.group1().zxy().with_w(self[e425]))
                - (self.group0().zxyx() * other.group0().yzx().with_w(other[e4235])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e4125] * self[e425],
                other[e4315] * self[e12345],
                other[e4125] * self[e12345],
                -(other[e25] * self[e425]) - (other[e35] * self[e435]) - (other[e4235] * self[e235]) - (other[e4315] * self[e315]) - (other[e4125] * self[e125]),
            ]) + (Simd32x4::from(other[e45]) * self.group0().xyz().with_w(self[e5]))
                + (other.group1().xxyw() * self.group0().wzxw())
                - (self.group0().zxyx() * other.group1().yzx().with_w(other[e15])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for Motor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       51        0
    //    simd3        0        3        0
    //    simd4        9        8        0
    // Totals...
    // yes simd       41       62        0
    //  no simd       68       92        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (other[e415] * self[e12345]) + (other[e435] * self[e425]),
                (other[e415] * self[e435]) + (other[e425] * self[e12345]),
                (other[e425] * self[e415]) + (other[e435] * self[e12345]),
                -(other[e425] * self[e425]) - (other[e435] * self[e435]),
            ]) - (self.group0().zxyx() * other.group0().yzx().with_w(other[e415])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e415] * self[e5]) + (other[e435] * self[e315]) + (other[e235] * self[e12345]) + (other[e125] * self[e425]),
                (other[e415] * self[e125]) + (other[e425] * self[e5]) + (other[e235] * self[e435]) + (other[e315] * self[e12345]),
                (other[e425] * self[e235]) + (other[e435] * self[e5]) + (other[e315] * self[e415]) + (other[e125] * self[e12345]),
                -(other[e435] * self[e125]) - (other[e235] * self[e415]) - (other[e315] * self[e425]) - (other[e125] * self[e435]),
            ]) - (self.group1().zxyx() * other.group0().yzx().with_w(other[e415]))
                - (other.group1().yzx() * self.group0().zxy()).with_w(other[e425] * self[e315]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for Motor {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       52        0
    //    simd3        0        4        0
    //    simd4       12       10        0
    // Totals...
    // yes simd       44       66        0
    //  no simd       80      104        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (other[e435] * self[e425]) + (other[e12345] * self[e415]),
                (other[e425] * self[e12345]) + (other[e12345] * self[e425]),
                (other[e435] * self[e12345]) + (other[e12345] * self[e435]),
                -(other[e425] * self[e425]) - (other[e435] * self[e435]),
            ]) + (other.group0().xxyw() * self.group0().wzxw())
                - (other.group0().yzxx() * self.group0().zxyx()),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e12345] * self[e235]) + (other[e235] * self[e12345]) + (other[e125] * self[e425]) + (other[e5] * self[e415]),
                (other[e12345] * self[e315]) + (other[e235] * self[e435]) + (other[e315] * self[e12345]) + (other[e5] * self[e425]),
                (other[e12345] * self[e125]) + (other[e315] * self[e415]) + (other[e125] * self[e12345]) + (other[e5] * self[e435]),
                -(other[e435] * self[e125]) - (other[e235] * self[e415]) - (other[e315] * self[e425]) - (other[e125] * self[e435]),
            ]) + (other.group0().xxyw() * self.group1().wzxw())
                + (other.group0().zyz() * self.group1().yww()).with_w(other[e5] * self[e12345])
                - (other.group0().yzxx() * self.group1().zxyx())
                - (other.group1().yzx() * self.group0().zxy()).with_w(other[e425] * self[e315]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for Motor {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       97      151        0
    //    simd2       14       16        0
    //    simd3       48       72        0
    //    simd4       45       31        0
    // Totals...
    // yes simd      204      270        0
    //  no simd      449      523        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from(self[e12345]) * other.group0()) + (Simd32x2::from(self[e5]) * Simd32x2::from([other[e1234], other[e4]]))
                - (Simd32x2::from(self[e415]) * Simd32x2::from([other[e23], other[e415]]))
                - (Simd32x2::from(self[e425]) * Simd32x2::from([other[e31], other[e425]]))
                - (Simd32x2::from(self[e435]) * Simd32x2::from([other[e12], other[e435]]))
                - (Simd32x2::from(self[e235]) * Simd32x2::from([other[e41], other[e423]]))
                - (Simd32x2::from(self[e315]) * Simd32x2::from([other[e42], other[e431]]))
                - (Simd32x2::from(self[e125]) * Simd32x2::from([other[e43], other[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e415] * other[e321]) + (self[e425] * other[e3]) + (self[e12345] * other[e1]) + (self[e235] * other[e4]) + (self[e315] * other[e412]),
                (self[e425] * other[e321]) + (self[e435] * other[e1]) + (self[e12345] * other[e2]) + (self[e315] * other[e4]) + (self[e5] * other[e431]),
                (self[e415] * other[e2]) + (self[e435] * other[e321]) + (self[e12345] * other[e3]) + (self[e125] * other[e4]) + (self[e5] * other[e412]),
                self[e435] * other[e412] * -1.0,
            ]) + (other.group7().xxy() * self.group1().wzx()).with_w(self[e12345] * other[e4])
                - (other.group7().yzx() * self.group1().zxy()).with_w(self[e415] * other[e423])
                - (self.group0().zxy() * other.group1().yzx()).with_w(self[e425] * other[e431]),
            // e5
            (self[e12345] * other[e5]) + (self[e235] * other[e1]) + (self[e315] * other[e2]) + (self[e125] * other[e3]) + (self[e5] * other[e12345])
                - (self[e415] * other[e235])
                - (self[e425] * other[e315])
                - (self[e435] * other[e125])
                - (self[e235] * other[e415])
                - (self[e315] * other[e425])
                - (self[e125] * other[e435])
                - (self[e5] * other[e321]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e425] * other[e35]) + (self[e12345] * other[e15]) + (self[e235] * other[e45]) + (self[e315] * other[e4125]) + (self[e5] * other[e4235]),
                (self[e435] * other[e15]) + (self[e12345] * other[e25]) + (self[e315] * other[e45]) + (self[e125] * other[e4235]) + (self[e5] * other[e4315]),
                (self[e435] * other[e3215]) + (self[e12345] * other[e35]) + (self[e235] * other[e4315]) + (self[e125] * other[e45]) + (self[e5] * other[e4125]),
                self[e5] * other[e1234] * -1.0,
            ]) + (self.group0().xyxw() * other.group9().ww().with_zw(other[e25], other[e45]))
                + (self.group1().xyzx() * other.group0().xx().with_zw(other[scalar], other[e41]))
                + (self.group1().ywwz() * other.group5().zyz().with_w(other[e43]))
                + (self.group1().wzxy() * other.group5().xxy().with_w(other[e42]))
                - (self.group0().zxyy() * other.group3().yzx().with_w(other[e4315]))
                - (other.group9().yzxz() * self.group1().zxy().with_w(self[e435]))
                - (other.group5().yzx() * self.group1().zxy()).with_w(self[e415] * other[e4235]),
            // e41, e42, e43
            (Simd32x3::from(other[e1234]) * self.group0().xyz()) + (other.group4().xxy() * self.group0().wzx()) + (other.group4().zyz() * self.group0().yww())
                - (other.group4().yzx() * self.group0().zxy()),
            // e23, e31, e12
            (Simd32x3::from(other[scalar]) * self.group0().xyz())
                + (Simd32x3::from(other[e1234]) * self.group1().xyz())
                + (other.group4().xxy() * self.group1().wzx())
                + (other.group4().zyz() * self.group1().yww())
                + (other.group5().xxy() * self.group0().wzx())
                + (other.group5().zyz() * self.group0().yww())
                - (other.group4().yzx() * self.group1().zxy())
                - (other.group5().yzx() * self.group0().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e425] * other[e435]) + (self[e12345] * other[e415]) + (self[e235] * other[e4]) + (self[e315] * other[e412]),
                (self[e435] * other[e415]) + (self[e12345] * other[e425]) + (self[e315] * other[e4]) + (self[e5] * other[e431]),
                (self[e415] * other[e425]) + (self[e12345] * other[e435]) + (self[e125] * other[e4]) + (self[e5] * other[e412]),
                -(self[e415] * other[e1]) - (self[e425] * other[e2]) - (self[e435] * other[e3]) - (self[e125] * other[e412]),
            ]) + (other.group0().yy().with_zw(other[e12345], self[e12345]) * self.group0().xyz().with_w(other[e321]))
                + (other.group7().xxy() * self.group1().wzx()).with_w(self[e5] * other[e4])
                - (self.group1().zxyx() * other.group7().yzx().with_w(other[e423]))
                - (self.group0().zxy() * other.group6().yzx()).with_w(self[e315] * other[e431]),
            // e423, e431, e412
            (Simd32x3::from(other[e4]) * self.group0().xyz()) + (other.group7().xxy() * self.group0().wzx()) + (other.group7().zyz() * self.group0().yww())
                - (other.group7().yzx() * self.group0().zxy()),
            // e235, e315, e125
            (Simd32x3::from(self[e5]) * other.group6().xyz())
                + (Simd32x3::from(other[e12345]) * self.group1().xyz())
                + (Simd32x3::from(other[e5]) * self.group0().xyz())
                + (Simd32x3::from([other[e2], other[e415], other[e1]]) * self.group1().zzy())
                + (Simd32x3::from([other[e435], other[e3], other[e425]]) * self.group1().yxx())
                + (other.group8().xxy() * self.group0().wzx())
                + (other.group8().zyz() * self.group0().yww())
                - (Simd32x3::from(self[e235]) * Simd32x3::from([other[e321], other[e435], other[e2]]))
                - (Simd32x3::from(self[e315]) * Simd32x3::from([other[e3], other[e321], other[e415]]))
                - (Simd32x3::from(self[e125]) * Simd32x3::from([other[e425], other[e1], other[e321]]))
                - (Simd32x3::from(self[e5]) * other.group1().xyz())
                - (other.group8().yzx() * self.group0().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e12345] * other[e4235],
                self[e12345] * other[e4315],
                self[e12345] * other[e4125],
                -(self[e425] * other[e25]) - (self[e435] * other[e35]) - (self[e235] * other[e4235]) - (self[e315] * other[e4315]) - (self[e125] * other[e4125]),
            ]) + (self.group0().xyxw() * other.group3().ww().with_zw(other[e4315], other[e3215]))
                + (self.group1().zxyw() * other.group4().yzx().with_w(other[scalar]))
                + (other.group9().zx().with_zw(other[e45], other[e45]) * self.group0().yzz().with_w(self[e5]))
                - (Simd32x4::from([other[e1234], other[e1234], other[e1234], other[e15]]) * self.group1().xyz().with_w(self[e415]))
                - (self.group1().ywwy() * other.group4().zyz().with_w(other[e31]))
                - (self.group1().wzxx() * other.group4().xxy().with_w(other[e23]))
                - (self.group0().zxy() * other.group9().yzx()).with_w(self[e125] * other[e12]),
            // e1234
            (self[e12345] * other[e1234]) - (self[e415] * other[e41]) - (self[e425] * other[e42]) - (self[e435] * other[e43]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for Motor {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       34        0
    //    simd3        0        2        0
    //    simd4       11       11        0
    // Totals...
    // yes simd       31       47        0
    //  no simd       64       84        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e415] * other[e3215]) + (self[e315] * other[e4125]) + (self[e5] * other[e4235]),
                (self[e425] * other[e3215]) + (self[e125] * other[e4235]) + (self[e5] * other[e4315]),
                (self[e435] * other[e3215]) + (self[e235] * other[e4315]) + (self[e5] * other[e4125]),
                -(self[e425] * other[e4315]) - (self[e435] * other[e4125]),
            ]) - (other.group0().yzxx() * self.group1().zxy().with_w(self[e415])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e12345] * other[e4235],
                self[e12345] * other[e4315],
                self[e12345] * other[e4125],
                -(self[e315] * other[e4315]) - (self[e125] * other[e4125]),
            ]) + (self.group0().yzxw() * other.group0().zxyw())
                - (other.group0().yzxx() * self.group0().zxy().with_w(self[e235])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       44       71        0
    //    simd3        3       10        0
    //    simd4       21       19        0
    // Totals...
    // yes simd       68      100        0
    //  no simd      137      177        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(other[e4]) * self.group0().xyz().with_w(self[e5]),
            // e415, e425, e435, e321
            Simd32x4::from([other[e4], other[e4], other[e4], 1.0])
                * self
                    .group1()
                    .xyz()
                    .with_w((self[e5] * other[e4]) - (self[e415] * other[e1]) - (self[e425] * other[e2]) - (self[e435] * other[e3])),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(self[e315] * other[e3]) - (self[e5] * other[e1]),
                -(self[e125] * other[e1]) - (self[e5] * other[e2]),
                -(self[e235] * other[e2]) - (self[e5] * other[e3]),
                (self[e315] * other[e2]) + (self[e125] * other[e3]),
            ]) + (Simd32x4::from(other[e5]) * self.group0())
                + (self.group1().zxyx() * other.group0().yzxx()),
            // e1, e2, e3, e4
            ((Simd32x3::from(self[e12345]) * other.group0().xyz()) + (Simd32x3::from(other[e4]) * self.group1().xyz()) + (self.group0().yzx() * other.group0().zxy())
                - (self.group0().zxy() * other.group0().yzx()))
            .with_w(self[e12345] * other[e4]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for Motor {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       26        0
    //    simd3        0        2        0
    //    simd4        6        8        0
    // Totals...
    // yes simd       22       36        0
    //  no simd       40       64        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(other[scalar]) * self.group0(),
            // e15, e25, e35, e3215
            Simd32x4::from(other[scalar]) * self.group1(),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       44       68        0
    //    simd3        3        6        0
    //    simd4       21       23        0
    // Totals...
    // yes simd       68       97        0
    //  no simd      137      178        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(other[e1234]) * self.group0().xyz().with_w(self[e5]),
            // e23, e31, e12, e45
            Simd32x4::from([other[e1234], other[e1234], other[e1234], 1.0])
                * self
                    .group1()
                    .xyz()
                    .with_w(-(self[e415] * other[e4235]) - (self[e425] * other[e4315]) - (self[e435] * other[e4125]) - (self[e5] * other[e1234])),
            // e15, e25, e35, e1234
            ((Simd32x3::from(self[e5]) * other.group0().xyz()) + (Simd32x3::from(other[e3215]) * self.group0().xyz()) + (self.group1().yzx() * other.group0().zxy())
                - (self.group1().zxy() * other.group0().yzx()))
            .with_w(self[e12345] * other[e1234]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e12345] * other[e4235], self[e12345] * other[e4315], self[e12345] * other[e4125], self[e125] * other[e4125] * -1.0])
                + (self.group0().yzxw() * other.group0().zxyw())
                - (Simd32x4::from([other[e1234], other[e1234], other[e1234], other[e4315]]) * self.group1().xyzy())
                - (other.group0().yzxx() * self.group0().zxy().with_w(self[e235])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for Motor {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       69      110        0
    //    simd3        0        9        0
    //    simd4       39       32        0
    // Totals...
    // yes simd      108      151        0
    //  no simd      225      265        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[e12345] * other[e423],
                self[e12345] * other[e431],
                self[e12345] * other[e412],
                -(self[e425] * other[e425]) - (self[e435] * other[e435]) - (self[e235] * other[e423]) - (self[e315] * other[e431]) - (self[e125] * other[e412]),
            ]) + (self.group0().xyxw() * other.group3().ww().with_zw(other[e431], other[e12345]))
                + (other.group0().zx().with_zw(other[e4], other[e4]) * self.group0().yzz().with_w(self[e5]))
                - (self.group0().zxyx() * other.group0().yzx().with_w(other[e415])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e12345] * other[e415]) + (self[e235] * other[e4]) + (self[e315] * other[e412]) + (self[e5] * other[e423]),
                (self[e12345] * other[e425]) + (self[e315] * other[e4]) + (self[e125] * other[e423]) + (self[e5] * other[e431]),
                (self[e12345] * other[e435]) + (self[e235] * other[e431]) + (self[e125] * other[e4]) + (self[e5] * other[e412]),
                -(self[e435] * other[e3]) - (self[e235] * other[e423]) - (self[e315] * other[e431]) - (self[e125] * other[e412]),
            ]) + (self.group0().xyxw() * other.group0().ww().with_zw(other[e425], other[e321]))
                + (other.group1().zx().with_zw(other[e12345], other[e4]) * self.group0().yzz().with_w(self[e5]))
                - (self.group0().zxyx() * other.group1().yzx().with_w(other[e1]))
                - (self.group1().zxy() * other.group0().yzx()).with_w(self[e425] * other[e2]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e125] * other[e2]) + (self[e5] * other[e415]),
                (self[e125] * other[e415]) + (self[e5] * other[e425]),
                (self[e125] * other[e12345]) + (self[e5] * other[e435]),
                -(self[e125] * other[e435]) - (self[e5] * other[e321]),
            ]) + (Simd32x4::from([other[e12345], other[e3], other[e425], other[e3]]) * self.group1().xxxz())
                + (Simd32x4::from([other[e435], other[e12345], other[e1], other[e12345]]) * self.group1().yyyw())
                + (self.group0().xyxw() * other.group2().wwyw())
                + (self.group0().yzz() * other.group2().zxw()).with_w(self[e235] * other[e1])
                + (self.group0().www() * other.group2().xyz()).with_w(self[e315] * other[e2])
                - (Simd32x4::from([other[e425], other[e1], other[e321], other[e415]]) * self.group1().zzzx())
                - (Simd32x4::from([other[e3], other[e321], other[e415], other[e125]]) * self.group1().yyy().with_w(self[e435]))
                - (self.group0().zxyx() * other.group2().yzxx())
                - (self.group1().wwwy() * other.group3().xyz().with_w(other[e425]))
                - (other.group1().wz().with_zw(other[e2], other[e315]) * self.group1().xxx().with_w(self[e425])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e425] * other[e3]) + (self[e12345] * other[e1]) + (self[e235] * other[e4]) + (self[e315] * other[e412]) + (self[e5] * other[e423]),
                (self[e435] * other[e1]) + (self[e12345] * other[e2]) + (self[e315] * other[e4]) + (self[e125] * other[e423]) + (self[e5] * other[e431]),
                (self[e435] * other[e321]) + (self[e12345] * other[e3]) + (self[e235] * other[e431]) + (self[e125] * other[e4]) + (self[e5] * other[e412]),
                self[e435] * other[e412] * -1.0,
            ]) + (self.group0().xyxw() * other.group1().ww().with_zw(other[e2], other[e4]))
                - (self.group0().zxyx() * other.group3().yzx().with_w(other[e423]))
                - (other.group0().yzxy() * self.group1().zxy().with_w(self[e425])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for Motor {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       74      111        0
    //    simd3        0        7        0
    //    simd4       38       33        0
    // Totals...
    // yes simd      112      151        0
    //  no simd      226      264        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e12345] * other[e41],
                self[e12345] * other[e42],
                self[e12345] * other[e43],
                -(self[e425] * other[e31]) - (self[e435] * other[e12]) - (self[e235] * other[e41]) - (self[e315] * other[e42]) - (self[e125] * other[e43]),
            ]) + (self.group0().xyxw() * other.group2().ww().with_zw(other[e42], other[scalar]))
                + (other.group0().zx().with_zw(other[e1234], other[e1234]) * self.group0().yzz().with_w(self[e5]))
                - (self.group0().zxyx() * other.group0().yzx().with_w(other[e23])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e315] * other[e43]) + (self[e5] * other[e41]),
                (self[e125] * other[e41]) + (self[e5] * other[e42]),
                (self[e125] * other[e1234]) + (self[e5] * other[e43]),
                -(self[e435] * other[e4125]) - (self[e5] * other[e1234]),
            ]) + (self.group0().xyxw() * other.group0().ww().with_zw(other[e31], other[e45]))
                + (self.group1().xyxz() * other.group2().ww().with_zw(other[e42], other[e43]))
                + (other.group1().zx().with_zw(other[scalar], other[e41]) * self.group0().yzz().with_w(self[e235]))
                + (self.group0().www() * other.group1().xyz()).with_w(self[e315] * other[e42])
                - (self.group0().zxyx() * other.group1().yzx().with_w(other[e4235]))
                - (self.group1().zxy() * other.group0().yzx()).with_w(self[e425] * other[e4315]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e425] * other[e35])
                    + (self[e12345] * other[e15])
                    + (self[e235] * other[scalar])
                    + (self[e235] * other[e45])
                    + (self[e315] * other[e12])
                    + (self[e315] * other[e4125])
                    + (self[e5] * other[e23])
                    + (self[e5] * other[e4235]),
                (self[e435] * other[e15])
                    + (self[e12345] * other[e25])
                    + (self[e315] * other[scalar])
                    + (self[e315] * other[e45])
                    + (self[e125] * other[e23])
                    + (self[e125] * other[e4235])
                    + (self[e5] * other[e31])
                    + (self[e5] * other[e4315]),
                (self[e435] * other[e3215])
                    + (self[e12345] * other[e35])
                    + (self[e235] * other[e31])
                    + (self[e235] * other[e4315])
                    + (self[e125] * other[scalar])
                    + (self[e125] * other[e45])
                    + (self[e5] * other[e12])
                    + (self[e5] * other[e4125]),
                0.0,
            ]) + (self.group0().xyxw() * other.group3().ww().with_zw(other[e25], other[e1234]))
                - (self.group0().zxyx() * other.group2().yzx().with_w(other[e41]))
                - (self.group1().zxy() * other.group1().yzx()).with_w(self[e425] * other[e42])
                - (self.group1().zxy() * other.group3().yzx()).with_w(self[e435] * other[e43]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e125] * other[e42],
                self[e235] * other[e43],
                self[e315] * other[e41],
                -(self[e235] * other[e4235]) - (self[e315] * other[e31]) - (self[e315] * other[e4315]) - (self[e125] * other[e12]) - (self[e125] * other[e4125]),
            ]) + (self.group0().xyxw() * other.group1().ww().with_zw(other[e4315], other[e3215]))
                + (other.group3().zx().with_zw(other[e45], other[scalar]) * self.group0().yzz().with_w(self[e5]))
                + (self.group0().www() * other.group3().xyz()).with_w(self[e5] * other[e45])
                - (self.group0().zxyx() * other.group3().yzx().with_w(other[e15]))
                - (self.group1().wwwx() * other.group0().xyz().with_w(other[e23]))
                - (other.group0().zx().with_zw(other[e1234], other[e35]) * self.group1().yzz().with_w(self[e435]))
                - (other.group2().ww().with_zw(other[e42], other[e25]) * self.group1().xyx().with_w(self[e425])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl std::ops::Div<anti_sandwich> for MultiVector {
    type Output = anti_sandwich_partial<MultiVector>;
    fn div(self, _rhs: anti_sandwich) -> Self::Output {
        anti_sandwich_partial(self)
    }
}
impl AntiSandwich<AntiCircleRotor> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      194      284        0
    //    simd2       19       19        0
    //    simd3      164      225        0
    //    simd4      147      100        0
    // Totals...
    // yes simd      524      628        0
    //  no simd     1312     1397        0
    fn anti_sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                -(other[e41] * self[e235])
                    - (other[e42] * self[e315])
                    - (other[e43] * self[e125])
                    - (other[e31] * self[e425])
                    - (other[e12] * self[e435])
                    - (other[e45] * self[e321])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412]),
                (other[e41] * self[e15])
                    + (other[e42] * self[e25])
                    + (other[e43] * self[e35])
                    + (other[e23] * self[e23])
                    + (other[e31] * self[e31])
                    + (other[e12] * self[e12])
                    + (other[e25] * self[e42])
                    + (other[e35] * self[e43]),
            ]) + (Simd32x2::from([self[e12345], self[e41]]) * other.group2().wx())
                - (Simd32x2::from([self[e415], self[e45]]) * other.group1().xw())
                - (Simd32x2::from([self[e423], self[scalar]]) * other.group2().xw()),
            // e1, e2, e3, e4
            Simd32x4::from([
                -(other[e43] * self[e25]) - (other[e31] * self[e4125]) - (other[e25] * self[e43]),
                -(other[e42] * self[e3215]) - (other[e12] * self[e4235]) - (other[e35] * self[e41]),
                -(other[e43] * self[e3215]) - (other[e23] * self[e4315]) - (other[e15] * self[e42]),
                (other[e31] * self[e42]) + (other[e12] * self[e43]) + (other[e45] * self[e1234]),
            ]) + (Simd32x4::from([self[e45], self[e4125], self[e4235], self[e4315]]) * other.group1().xxy().with_w(other[e42]))
                + (Simd32x4::from([self[e4315], self[e45], self[e45], self[e12]]) * other.group1().zyz().with_w(other[e43]))
                + (Simd32x4::from([self[e1234], self[e1234], self[e1234], self[e4125]]) * other.group2().xyz().with_w(other[e43]))
                + (self.group5() * other.group1().www()).with_w(other[e42] * self[e31])
                + (other.group0().yzx() * self.group3().zxy()).with_w(other[e41] * self[e23])
                + (self.group4().yzx() * other.group2().zxy()).with_w(other[e41] * self[e4235])
                + (other.group2().www() * self.group9().xyz()).with_w(other[e23] * self[e41])
                - (Simd32x4::from([self[e3215], self[e35], self[e15], self[e1234]]) * other.group0().xxy().with_w(other[scalar])),
            // e5
            (other[e23] * self[e15]) + (other[e31] * self[e25]) + (other[e12] * self[e35]) + (other[e15] * self[e23]) + (other[e25] * self[e31]) + (other[e35] * self[e12])
                - (other[e45] * self[e3215])
                - (other[e15] * self[e4235])
                - (other[e25] * self[e4315])
                - (other[e35] * self[e4125])
                - (other[scalar] * self[e3215]),
            // e15, e25, e35, e45
            Simd32x4::from([other[e35] * self[e425], other[e25] * self[e321], other[e35] * self[e321], other[scalar] * self[e321] * -1.0])
                + (Simd32x4::from(self[e12345]) * other.group2().xyz().with_w(other[e45]))
                + (Simd32x4::from([self[e2], self[e435], self[e415], self[e3]]) * other.group2().zxy().with_w(other[e12]))
                + (Simd32x4::from([self[e5], self[e5], self[e5], self[e1]]) * other.group1().xyzx())
                + (Simd32x4::from([self[e321], self[e3], self[e1], self[e2]]) * other.group2().xxy().with_w(other[e31]))
                + (other.group1().zx().with_zw(other[scalar], self[e125]) * self.group8().yzz().with_w(other[e43]))
                + (other.group2().ww().with_zw(other[e45], self[e315]) * self.group8().with_w(other[e42]))
                + (self.group8().xyx() * other.group1().wwy()).with_w(other[e41] * self[e235])
                - (self.group8().zxy() * other.group1().yzx()).with_w(other[e15] * self[e423])
                - (other.group2().yzx() * self.group1().zxy()).with_w(other[e25] * self[e431])
                - (other.group2().yzx() * self.group6().zxy()).with_w(other[e35] * self[e412]),
            // e41, e42, e43
            (Simd32x3::from(self[e12345]) * other.group0())
                + (Simd32x3::from(self[e4]) * other.group1().xyz())
                + (Simd32x3::from([other[e12], other[e23], other[scalar]]) * self.group7().yzz())
                + (Simd32x3::from([other[scalar], other[scalar], other[e31]]) * self.group7().xyx())
                + (Simd32x3::from([self[e3], self[e435], self[e2]]) * other.group0().yxx())
                + (Simd32x3::from([self[e425], self[e1], self[e415]]) * other.group0().zzy())
                - (Simd32x3::from(other[e41]) * Simd32x3::from([self[e321], self[e3], self[e425]]))
                - (Simd32x3::from(other[e42]) * Simd32x3::from([self[e435], self[e321], self[e1]]))
                - (Simd32x3::from(other[e43]) * Simd32x3::from([self[e2], self[e415], self[e321]]))
                - (self.group7().xxy() * other.group1().wzx())
                - (self.group7().zyz() * other.group1().yww()),
            // e23, e31, e12
            (Simd32x3::from(other[scalar]) * self.group6().xyz())
                + (Simd32x3::from(self[e12345]) * other.group1().xyz())
                + (Simd32x3::from(self[e4]) * other.group2().xyz())
                + (Simd32x3::from([self[e5], self[e125], self[e235]]) * other.group0().xxy())
                + (Simd32x3::from([self[e315], self[e5], self[e5]]) * other.group0().zyz())
                + (self.group7().yzx() * other.group2().zxy())
                + (other.group1().zxy() * self.group6().yzx())
                - (Simd32x3::from(other[e45]) * self.group1().xyz())
                - (other.group0().yzx() * self.group8().zxy())
                - (self.group7().zxy() * other.group2().yzx())
                - (other.group1().yzx() * self.group6().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(other[e45] * self[e4235]) - (other[e15] * self[e1234]),
                -(other[e45] * self[e4315]) - (other[e25] * self[e1234]),
                -(other[e45] * self[e4125]) - (other[e35] * self[e1234]),
                (other[e43] * self[e35]) + (other[scalar] * self[e45]),
            ]) + (other.group0().yzx() * self.group3().zxy()).with_w(other[e45] * self[scalar])
                + (self.group4().zxy() * other.group2().yzx()).with_w(other[e41] * self[e15])
                + (self.group5().zxy() * other.group1().yzx()).with_w(other[e42] * self[e25])
                - (Simd32x4::from([self[e25], self[e3215], self[e3215], other[e35]]) * other.group0().zyz().with_w(self[e43]))
                - (Simd32x4::from([self[e3215], self[e35], self[e15], other[e25]]) * other.group0().xxy().with_w(self[e42]))
                - (self.group0().xx().with_zw(self[scalar], self[e41]) * other.group1().xyz().with_w(other[e15]))
                - (other.group1().zx().with_zw(other[scalar], self[e4125]) * self.group5().yzz().with_w(other[e12]))
                - (other.group2().ww().with_zw(other[e31], self[e4315]) * self.group5().xyx().with_w(other[e31]))
                - (self.group4().yzx() * other.group2().zxy()).with_w(other[e23] * self[e4235]),
            // e423, e431, e412
            (other.group0().yzx() * self.group5().zxy())
                + (other.group0().yzx() * self.group9().zxy())
                + (self.group4().xxy() * other.group1().wzx())
                + (self.group4().zyz() * other.group1().yww())
                - (Simd32x3::from(self[scalar]) * other.group0())
                - (Simd32x3::from(self[e1234]) * other.group1().xyz())
                - (Simd32x3::from([other[e12], other[e23], other[scalar]]) * self.group4().yzz())
                - (Simd32x3::from([other[scalar], other[scalar], other[e31]]) * self.group4().xyx())
                - (Simd32x3::from([self[e45], self[e12], self[e23]]) * other.group0().xxy())
                - (Simd32x3::from([self[e31], self[e4125], self[e4235]]) * other.group0().zxy())
                - (Simd32x3::from([self[e4315], self[e45], self[e45]]) * other.group0().zyz()),
            // e235, e315, e125
            (Simd32x3::from([self[e45], self[e4125], self[e4235]]) * other.group2().xxy())
                + (Simd32x3::from([self[e4315], self[e45], self[e45]]) * other.group2().zyz())
                + (self.group5().zxy() * other.group2().yzx())
                + (other.group1().yzx() * self.group3().zxy())
                - (Simd32x3::from(other[e45]) * self.group3().xyz())
                - (Simd32x3::from(other[scalar]) * self.group3().xyz())
                - (Simd32x3::from(self[scalar]) * other.group2().xyz())
                - (Simd32x3::from([self[e25], self[e3215], self[e3215]]) * other.group1().zyz())
                - (Simd32x3::from([self[e3215], self[e35], self[e15]]) * other.group1().xxy())
                - (self.group5().yzx() * other.group2().zxy())
                - (other.group2().yzx() * self.group9().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e31] * self[e3]) + (other[e45] * self[e415]) + (other[e15] * self[e4]),
                (other[e12] * self[e1]) + (other[e45] * self[e425]) + (other[e25] * self[e4]),
                (other[e23] * self[e2]) + (other[e45] * self[e435]) + (other[e35] * self[e4]),
                -(other[e25] * self[e425]) - (other[e35] * self[e3]) - (other[e35] * self[e435]),
            ]) + (other.group0().yzx() * self.group8().zxy()).with_w(other[e45] * self[e5])
                + (self.group7().yzx() * other.group2().zxy()).with_w(other[scalar] * self[e5])
                - (Simd32x4::from([self[e2], self[e321], self[e321], self[e415]]) * other.group1().zyz().with_w(other[e15]))
                - (Simd32x4::from([self[e5], self[e125], self[e235], other[e23]]) * other.group0().xxy().with_w(self[e235]))
                - (Simd32x4::from([self[e321], self[e3], self[e1], self[e1]]) * other.group1().xxy().with_w(other[e15]))
                - (Simd32x4::from([self[e315], self[e5], self[e5], other[e31]]) * other.group0().zyz().with_w(self[e315]))
                - (other.group2().wwwy() * self.group1().xyzy())
                - (self.group7().zxy() * other.group2().yzx()).with_w(other[e12] * self[e125]),
            // e1234
            (other[e41] * self[e1]) + (other[e42] * self[e2]) + (other[e43] * self[e3]) + (other[scalar] * self[e4])
                - (other[e41] * self[e415])
                - (other[e42] * self[e425])
                - (other[e43] * self[e435])
                - (other[e23] * self[e423])
                - (other[e31] * self[e431])
                - (other[e12] * self[e412])
                - (other[e45] * self[e4]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDipoleInversion> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      206      288        0
    //    simd2       27       27        0
    //    simd3      180      242        0
    //    simd4      160      114        0
    // Totals...
    // yes simd      573      671        0
    //  no simd     1440     1524        0
    fn anti_sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (other[e2] * self[e4315]) + (other[e3] * self[e4125]) + (other[e5] * self[e1234]) - (other[e321] * self[e45]),
                (other[e321] * self[e321]) - (other[e1] * self[e1]) - (other[e2] * self[e2]) - (other[e3] * self[e3]),
            ]) + (Simd32x2::from(other[e4]) * Simd32x2::from([self[e3215], self[e5]]))
                + (Simd32x2::from([self[e4235], self[e4]]) * other.group3().xw())
                - (Simd32x2::from(other[e423]) * Simd32x2::from([self[e15], self[e235]]))
                - (Simd32x2::from(other[e431]) * Simd32x2::from([self[e25], self[e315]]))
                - (Simd32x2::from(other[e412]) * Simd32x2::from([self[e35], self[e125]]))
                - (Simd32x2::from(other[e415]) * Simd32x2::from([self[e23], self[e415]]))
                - (Simd32x2::from(other[e425]) * Simd32x2::from([self[e31], self[e425]]))
                - (Simd32x2::from(other[e435]) * Simd32x2::from([self[e12], self[e435]]))
                - (Simd32x2::from(other[e235]) * Simd32x2::from([self[e41], self[e423]]))
                - (Simd32x2::from(other[e315]) * Simd32x2::from([self[e42], self[e431]]))
                - (Simd32x2::from(other[e125]) * Simd32x2::from([self[e43], self[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e415] * self[e321]) + (other[e435] * self[e2]) + (other[e321] * self[e415]) + (other[e3] * self[e425]),
                (other[e415] * self[e3]) + (other[e425] * self[e321]) + (other[e321] * self[e425]) + (other[e1] * self[e435]),
                (other[e425] * self[e1]) + (other[e435] * self[e321]) + (other[e321] * self[e435]) + (other[e2] * self[e415]),
                -(other[e435] * self[e412]) - (other[e4] * self[e321]) - (other[e2] * self[e431]) - (other[e3] * self[e412]),
            ]) + (Simd32x4::from(self[e12345]) * other.group3().xyz().with_w(other[e4]))
                + (Simd32x4::from([self[e5], self[e125], self[e235], self[e1]]) * other.group0().xxy().with_w(other[e423]))
                + (Simd32x4::from([self[e315], self[e5], self[e5], self[e2]]) * other.group0().zyz().with_w(other[e431]))
                + (self.group8() * other.group2().www()).with_w(other[e321] * self[e4])
                + (self.group7().zxy() * other.group2().yzx()).with_w(other[e412] * self[e3])
                - (other.group2().zx().with_zw(other[e5], self[e435]) * self.group7().yzz().with_w(other[e412]))
                - (other.group3().ww().with_zw(other[e315], self[e425]) * self.group7().xyx().with_w(other[e431]))
                - (other.group0().yzx() * self.group8().zxy()).with_w(other[e423] * self[e415])
                - (other.group1().yzx() * self.group1().zxy()).with_w(other[e415] * self[e423])
                - (other.group3().yzx() * self.group6().zxy()).with_w(other[e425] * self[e431])
                - (self.group1().www() * other.group2().xyz()).with_w(other[e1] * self[e423]),
            // e5
            (other[e1] * self[e235]) + (other[e2] * self[e315]) + (other[e3] * self[e125]) + (other[e5] * self[e12345]) + (other[e5] * self[e321])
                - (other[e415] * self[e235])
                - (other[e425] * self[e315])
                - (other[e435] * self[e125])
                - (other[e321] * self[e5])
                - (other[e235] * self[e1])
                - (other[e235] * self[e415])
                - (other[e315] * self[e2])
                - (other[e315] * self[e425])
                - (other[e125] * self[e3])
                - (other[e125] * self[e435]),
            // e15, e25, e35, e45
            (Simd32x4::from([self[e25], self[e3215], self[e3215], other[e2]]) * other.group1().zyz().with_w(self[e31]))
                + (Simd32x4::from([self[e3215], self[e35], self[e15], other[e1]]) * other.group1().xxy().with_w(self[e23]))
                + (other.group3().yzxw() * self.group3().zxy().with_w(self[e1234]))
                + (self.group0().xx().with_zw(self[scalar], other[e423]) * other.group2().xyz().with_w(self[e15]))
                + (other.group2().zx().with_zw(other[e5], self[e35]) * self.group5().yzz().with_w(other[e412]))
                + (other.group3().ww().with_zw(other[e315], self[e25]) * self.group5().xyx().with_w(other[e431]))
                + (other.group2().yzx() * self.group9().zxy()).with_w(other[e3] * self[e12])
                - (Simd32x4::from([self[e25], self[e3215], self[e3215], self[e4125]]) * other.group3().zyz().with_w(other[e435]))
                - (Simd32x4::from([self[e45], self[e4125], self[e4235], other[e125]]) * other.group2().xxy().with_w(self[e43]))
                - (Simd32x4::from([self[e4315], self[e45], self[e45], self[e4235]]) * other.group2().zyz().with_w(other[e415]))
                - (Simd32x4::from([self[e3215], self[e35], self[e15], self[e4315]]) * other.group3().xxy().with_w(other[e425]))
                - (self.group9() * other.group3().www().with_w(other[e4]))
                - (self.group5().zxy() * other.group2().yzx()).with_w(other[e321] * self[scalar])
                - (other.group1().yzx() * self.group3().zxy()).with_w(other[e235] * self[e41])
                - (other.group1().www() * self.group3().xyz()).with_w(other[e315] * self[e42]),
            // e41, e42, e43
            (Simd32x3::from(other[e4]) * self.group5())
                + (Simd32x3::from(other[e4]) * self.group9().xyz())
                + (Simd32x3::from(self[scalar]) * other.group0())
                + (Simd32x3::from(self[e1234]) * other.group1().xyz())
                + (Simd32x3::from(self[e1234]) * other.group3().xyz())
                + (Simd32x3::from([other[e435], other[e415], other[e2]]) * self.group4().yzx())
                + (Simd32x3::from([other[e3], other[e1], other[e321]]) * self.group4().yzz())
                + (Simd32x3::from([self[e45], self[e12], self[e23]]) * other.group0().xxy())
                + (Simd32x3::from([self[e31], self[e4125], self[e4235]]) * other.group0().zxy())
                + (Simd32x3::from([self[e4315], self[e45], self[e45]]) * other.group0().zyz())
                + (self.group4().xyx() * other.group1().wwy())
                - (other.group0().yzx() * self.group5().zxy())
                - (other.group0().yzx() * self.group9().zxy())
                - (self.group4().zxy() * other.group1().yzx())
                - (self.group4().zxy() * other.group3().yzx()),
            // e23, e31, e12
            (Simd32x3::from(other[e4]) * self.group3().xyz())
                + (Simd32x3::from(self[scalar]) * other.group1().xyz())
                + (Simd32x3::from(self[e1234]) * other.group2().xyz())
                + (Simd32x3::from([other[e125], other[e235], other[e5]]) * self.group4().yzz())
                + (Simd32x3::from([other[e5], other[e5], other[e315]]) * self.group4().xyx())
                + (Simd32x3::from([self[e25], self[e3215], self[e3215]]) * other.group0().zyz())
                + (Simd32x3::from([self[e3215], self[e35], self[e15]]) * other.group0().xxy())
                + (self.group5().yzx() * other.group1().zxy())
                + (other.group3().yzx() * self.group9().zxy())
                - (Simd32x3::from(other[e321]) * self.group9().xyz())
                - (Simd32x3::from([self[e45], self[e4125], self[e4235]]) * other.group3().xxy())
                - (Simd32x3::from([self[e4315], self[e45], self[e45]]) * other.group3().zyz())
                - (other.group0().yzx() * self.group3().zxy())
                - (self.group4().zxy() * other.group2().yzx())
                - (self.group5().zxy() * other.group1().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e435] * self[e425]) + (other[e321] * self[e1]) + (other[e235] * self[e4]) + (other[e4] * self[e235]) + (other[e1] * self[e321]) + (other[e3] * self[e2]),
                (other[e415] * self[e435]) + (other[e321] * self[e2]) + (other[e315] * self[e4]) + (other[e4] * self[e315]) + (other[e1] * self[e3]) + (other[e2] * self[e321]),
                (other[e425] * self[e415]) + (other[e321] * self[e3]) + (other[e125] * self[e4]) + (other[e4] * self[e125]) + (other[e2] * self[e1]) + (other[e3] * self[e321]),
                -(other[e425] * self[e2]) - (other[e435] * self[e3]) - (other[e1] * self[e415]) - (other[e2] * self[e425]) - (other[e3] * self[e435]) - (other[e5] * self[e4]),
            ]) + (Simd32x4::from(self[e12345]) * other.group1())
                + (Simd32x4::from([self[e5], self[e125], self[e235], other[e235]]) * other.group0().xxy().with_w(self[e423]))
                + (Simd32x4::from([self[e315], self[e5], self[e5], other[e315]]) * other.group0().zyz().with_w(self[e431]))
                + (other.group2().zx().with_zw(other[e5], self[e5]) * self.group7().yzz().with_w(other[e4]))
                + (other.group3().ww().with_zw(other[e315], other[e125]) * self.group7().xyx().with_w(self[e412]))
                - (self.group1().zxyx() * other.group3().yzx().with_w(other[e415]))
                - (other.group0().yzx() * self.group8().zxy()).with_w(other[e423] * self[e235])
                - (self.group7().zxy() * other.group2().yzx()).with_w(other[e431] * self[e315])
                - (other.group1().yzx() * self.group6().zxy()).with_w(other[e412] * self[e125]),
            // e423, e431, e412
            (Simd32x3::from(other[e4]) * self.group6().xyz())
                + (Simd32x3::from(self[e12345]) * other.group0())
                + (Simd32x3::from(self[e4]) * other.group1().xyz())
                + (Simd32x3::from(self[e4]) * other.group3().xyz())
                + (Simd32x3::from([other[e435], other[e415], other[e2]]) * self.group7().yzx())
                + (Simd32x3::from([other[e3], other[e1], other[e321]]) * self.group7().yzz())
                + (Simd32x3::from([self[e3], self[e435], self[e2]]) * other.group0().yxx())
                + (Simd32x3::from([self[e425], self[e1], self[e415]]) * other.group0().zzy())
                + (self.group7().xyx() * other.group1().wwy())
                - (Simd32x3::from(other[e423]) * Simd32x3::from([self[e321], self[e3], self[e425]]))
                - (Simd32x3::from(other[e431]) * Simd32x3::from([self[e435], self[e321], self[e1]]))
                - (Simd32x3::from(other[e412]) * Simd32x3::from([self[e2], self[e415], self[e321]]))
                - (Simd32x3::from(other[e4]) * self.group1().xyz())
                - (self.group7().zxy() * other.group1().yzx())
                - (self.group7().zxy() * other.group3().yzx()),
            // e235, e315, e125
            (Simd32x3::from(other[e5]) * self.group1().xyz())
                + (Simd32x3::from(other[e5]) * self.group6().xyz())
                + (Simd32x3::from(self[e12345]) * other.group2().xyz())
                + (Simd32x3::from(self[e5]) * other.group1().xyz())
                + (Simd32x3::from([other[e435], other[e3], other[e425]]) * self.group8().yxx())
                + (Simd32x3::from([other[e2], other[e415], other[e1]]) * self.group8().zzy())
                + (Simd32x3::from([self[e2], self[e435], self[e415]]) * other.group2().zxy())
                + (Simd32x3::from([self[e321], self[e3], self[e1]]) * other.group2().xxy())
                + (other.group2().zyz() * self.group6().yww())
                - (Simd32x3::from(self[e5]) * other.group3().xyz())
                - (Simd32x3::from(self[e235]) * Simd32x3::from([other[e321], other[e435], other[e2]]))
                - (Simd32x3::from(self[e315]) * Simd32x3::from([other[e3], other[e321], other[e415]]))
                - (Simd32x3::from(self[e125]) * Simd32x3::from([other[e425], other[e1], other[e321]]))
                - (other.group2().yzx() * self.group1().zxy())
                - (other.group2().yzx() * self.group6().zxy()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([self[e45], self[e4125], self[e4235], self[e15]]) * other.group1().xxy().with_w(other[e1]))
                + (Simd32x4::from([self[e4315], self[e45], self[e45], self[e25]]) * other.group1().zyz().with_w(other[e2]))
                + (Simd32x4::from([self[e1234], self[e1234], self[e1234], self[e35]]) * other.group2().xyz().with_w(other[e3]))
                + (other.group2().zx().with_zw(other[e5], self[e4315]) * self.group4().yzz().with_w(other[e315]))
                + (other.group3().ww().with_zw(other[e315], self[e4235]) * self.group4().xyx().with_w(other[e235]))
                + (other.group0().yzx() * self.group3().zxy()).with_w(other[e5] * self[scalar])
                + (self.group5().zxy() * other.group3().yzx()).with_w(other[e125] * self[e4125])
                - (Simd32x4::from([self[e25], self[e3215], self[e3215], other[e125]]) * other.group0().zyz().with_w(self[e12]))
                - (Simd32x4::from([self[e3215], self[e35], self[e15], other[e315]]) * other.group0().xxy().with_w(self[e31]))
                - (self.group3() * other.group2().www().with_w(other[e5]))
                - (other.group1().yzxw() * self.group9().zxyw())
                - (self.group0().xx().with_zw(self[scalar], self[e23]) * other.group3().xyz().with_w(other[e235]))
                - (other.group1().ww().with_zw(other[e2], self[e25]) * self.group5().xyx().with_w(other[e425]))
                - (other.group3().zx().with_zw(other[e321], self[e35]) * self.group5().yzz().with_w(other[e435]))
                - (self.group4().zxy() * other.group2().yzx()).with_w(other[e415] * self[e15]),
            // e1234
            (other[e321] * self[e1234]) + (other[e4] * self[scalar]) + (other[e4] * self[e45])
                - (other[e423] * self[e23])
                - (other[e423] * self[e4235])
                - (other[e431] * self[e31])
                - (other[e431] * self[e4315])
                - (other[e412] * self[e12])
                - (other[e412] * self[e4125])
                - (other[e415] * self[e41])
                - (other[e425] * self[e42])
                - (other[e435] * self[e43])
                - (other[e1] * self[e41])
                - (other[e2] * self[e42])
                - (other[e3] * self[e43]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      152      228        0
    //    simd2       16       16        0
    //    simd3      128      176        0
    //    simd4      114       82        0
    // Totals...
    // yes simd      410      502        0
    //  no simd     1024     1116        0
    fn anti_sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (other[e3215] * self[e4]) + (other[scalar] * self[e12345]),
                -(other[e3215] * self[e1234]) - (other[scalar] * self[scalar]),
            ]),
            // e1, e2, e3, e4
            ((Simd32x3::from(other[e3215]) * self.group4()) + (Simd32x3::from(other[scalar]) * self.group9().xyz())).with_w(other[scalar] * self[e1234] * -1.0),
            // e5
            (other[e3215] * self[e45]) - (other[e3215] * self[scalar]) - (other[scalar] * self[e3215]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e3215] * self[e415]) + (other[scalar] * self[e235]),
                (other[e3215] * self[e425]) + (other[scalar] * self[e315]),
                (other[e3215] * self[e435]) + (other[scalar] * self[e125]),
                other[scalar] * self[e321] * -1.0,
            ]) + (Simd32x4::from(other[e3215]) * self.group1()),
            // e41, e42, e43
            Simd32x3::from(other[scalar]) * self.group7(),
            // e23, e31, e12
            (Simd32x3::from(other[e3215]) * self.group7()) + (Simd32x3::from(other[scalar]) * self.group6().xyz()),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(other[e3215] * self[e41]) - (other[scalar] * self[e23]),
                -(other[e3215] * self[e42]) - (other[scalar] * self[e31]),
                -(other[e3215] * self[e43]) - (other[scalar] * self[e12]),
                (other[e3215] * self[e1234]) + (other[scalar] * self[e45]),
            ]),
            // e423, e431, e412
            Simd32x3::from(other[scalar]) * self.group4() * Simd32x3::from(-1.0),
            // e235, e315, e125
            (Simd32x3::from(other[e3215]) * self.group9().xyz()) - (Simd32x3::from(other[e3215]) * self.group5()) - (Simd32x3::from(other[scalar]) * self.group3().xyz()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[scalar] * self[e1] * -1.0,
                other[scalar] * self[e2] * -1.0,
                other[scalar] * self[e3] * -1.0,
                (other[e3215] * self[e321]) + (other[scalar] * self[e5]),
            ]) + (Simd32x4::from(other[e3215]) * self.group7().with_w(self[e12345])),
            // e1234
            other[scalar] * self[e4],
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlatPoint> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      154      229        0
    //    simd2       19       19        0
    //    simd3      136      187        0
    //    simd4      123       87        0
    // Totals...
    // yes simd      432      522        0
    //  no simd     1092     1176        0
    fn anti_sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([other[e321] * self[e45] * -1.0, other[e321] * self[e321]])
                - (Simd32x2::from(other[e235]) * Simd32x2::from([self[e41], self[e423]]))
                - (Simd32x2::from(other[e315]) * Simd32x2::from([self[e42], self[e431]]))
                - (Simd32x2::from(other[e125]) * Simd32x2::from([self[e43], self[e412]])),
            // e1, e2, e3, e4
            ((Simd32x3::from(other[e321]) * self.group6().xyz()) + (self.group7().zxy() * other.group0().yzx())
                - (Simd32x3::from(self[e4]) * other.group0().xyz())
                - (self.group7().yzx() * other.group0().zxy()))
            .with_w(other[e321] * self[e4]),
            // e5
            -(other[e235] * self[e1])
                - (other[e235] * self[e415])
                - (other[e315] * self[e2])
                - (other[e315] * self[e425])
                - (other[e125] * self[e3])
                - (other[e125] * self[e435])
                - (other[e321] * self[e5]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e235] * self[scalar]) + (other[e315] * self[e4125]) + (other[e125] * self[e31]),
                (other[e235] * self[e12]) + (other[e315] * self[scalar]) + (other[e125] * self[e4235]),
                (other[e235] * self[e4315]) + (other[e315] * self[e23]) + (other[e125] * self[scalar]),
                0.0,
            ]) - (Simd32x4::from([self[e45], self[e4125], self[e4235], other[e235]]) * other.group0().xxy().with_w(self[e41]))
                - (Simd32x4::from([self[e4315], self[e45], self[e45], other[e315]]) * other.group0().zyz().with_w(self[e42]))
                - (other.group0().yzxw() * self.group5().zxy().with_w(self[scalar]))
                - (other.group0().www() * self.group3().xyz()).with_w(other[e125] * self[e43]),
            // e41, e42, e43
            Simd32x3::from(other[e321]) * self.group4(),
            // e23, e31, e12
            (Simd32x3::from(self[e1234]) * other.group0().xyz()) + (self.group4().yzx() * other.group0().zxy())
                - (Simd32x3::from(other[e321]) * self.group9().xyz())
                - (self.group4().zxy() * other.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                other[e315] * self[e412] * -1.0,
                other[e125] * self[e423] * -1.0,
                other[e235] * self[e431] * -1.0,
                other[e125] * self[e412],
            ]) + (other.group0().zxyw() * self.group7().yzx().with_w(self[e12345]))
                + (other.group0().www() * self.group1().xyz()).with_w(other[e315] * self[e431])
                + (self.group1().www() * other.group0().xyz()).with_w(other[e235] * self[e423]),
            // e423, e431, e412
            Simd32x3::from(other[e321]) * self.group7(),
            // e235, e315, e125
            (Simd32x3::from(self[e12345]) * other.group0().xyz())
                + (Simd32x3::from([self[e2], self[e435], self[e415]]) * other.group0().zxy())
                + (Simd32x3::from([self[e321], self[e3], self[e1]]) * other.group0().xxy())
                + (other.group0().zyz() * self.group6().yww())
                - (Simd32x3::from(other[e321]) * self.group8())
                - (other.group0().yzx() * self.group1().zxy())
                - (other.group0().yzx() * self.group6().zxy()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([self[e1234], self[e1234], self[e1234], self[e4315]]) * other.group0().xyzy())
                + Simd32x3::from(0.0).with_w((other[e125] * self[e4125]) - (other[e125] * self[e12]) - (other[e321] * self[e3215]))
                + (self.group4().yzx() * other.group0().zxy()).with_w(other[e235] * self[e4235])
                - (other.group0().yzxx() * self.group4().zxy().with_w(self[e23]))
                - (other.group0().wwwy() * self.group5().with_w(self[e31])),
            // e1234
            other[e321] * self[e1234],
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlector> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      185      261        0
    //    simd2       20       20        0
    //    simd3      148      201        0
    //    simd4      138       99        0
    // Totals...
    // yes simd      491      581        0
    //  no simd     1221     1300        0
    fn anti_sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (other[e2] * self[e4315]) + (other[e3] * self[e4125]) + (other[e5] * self[e1234]) - (other[e321] * self[e45]),
                (other[e321] * self[e321]) - (other[e1] * self[e1]) - (other[e2] * self[e2]) - (other[e3] * self[e3]),
            ]) + (Simd32x2::from([self[e4235], self[e4]]) * other.group1().xw())
                - (Simd32x2::from(other[e235]) * Simd32x2::from([self[e41], self[e423]]))
                - (Simd32x2::from(other[e315]) * Simd32x2::from([self[e42], self[e431]]))
                - (Simd32x2::from(other[e125]) * Simd32x2::from([self[e43], self[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e315] * self[e412]) + (other[e321] * self[e415]) + (other[e3] * self[e425]) - (other[e2] * self[e435]),
                (other[e125] * self[e423]) + (other[e321] * self[e425]) + (other[e1] * self[e435]) - (other[e3] * self[e415]),
                (other[e235] * self[e431]) + (other[e321] * self[e435]) + (other[e2] * self[e415]) - (other[e1] * self[e425]),
                0.0,
            ]) + (self.group0().yy().with_zw(self[e12345], other[e321]) * other.group1().xyz().with_w(self[e4]))
                - (other.group0().zx().with_zw(other[e5], other[e2]) * self.group7().yzz().with_w(self[e431]))
                - (other.group1().ww().with_zw(other[e315], other[e1]) * self.group7().xyx().with_w(self[e423]))
                - (self.group1().www() * other.group0().xyz()).with_w(other[e3] * self[e412]),
            // e5
            (other[e1] * self[e235]) + (other[e2] * self[e315]) + (other[e3] * self[e125]) + (other[e5] * self[e12345]) + (other[e5] * self[e321])
                - (other[e235] * self[e1])
                - (other[e235] * self[e415])
                - (other[e315] * self[e2])
                - (other[e315] * self[e425])
                - (other[e125] * self[e3])
                - (other[e125] * self[e435])
                - (other[e321] * self[e5]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e2] * self[e35]) - (other[e1] * self[e3215]) - (other[e3] * self[e25]) - (other[e5] * self[e4235]),
                (other[e3] * self[e15]) - (other[e1] * self[e35]) - (other[e2] * self[e3215]) - (other[e5] * self[e4315]),
                (other[e1] * self[e25]) - (other[e2] * self[e15]) - (other[e3] * self[e3215]) - (other[e5] * self[e4125]),
                0.0,
            ]) + (self.group0().xx().with_zw(self[scalar], self[e23]) * other.group0().xyz().with_w(other[e1]))
                + (other.group0().zx().with_zw(other[e5], other[e3]) * self.group5().yzz().with_w(self[e12]))
                + (other.group1().ww().with_zw(other[e315], other[e2]) * self.group5().xyx().with_w(self[e31]))
                + (other.group0().yzx() * self.group9().zxy()).with_w(other[e5] * self[e1234])
                - (Simd32x4::from([self[e45], self[e4125], self[e4235], other[e235]]) * other.group0().xxy().with_w(self[e41]))
                - (Simd32x4::from([self[e4315], self[e45], self[e45], other[e315]]) * other.group0().zyz().with_w(self[e42]))
                - (other.group0().yzxw() * self.group5().zxy().with_w(self[scalar]))
                - (other.group0().www() * self.group3().xyz()).with_w(other[e125] * self[e43]),
            // e41, e42, e43
            (Simd32x3::from(self[e1234]) * other.group1().xyz())
                + (Simd32x3::from([other[e321], other[e321], other[e2]]) * self.group4().xyx())
                + (Simd32x3::from([other[e3], other[e1], other[e321]]) * self.group4().yzz())
                - (self.group4().zxy() * other.group1().yzx()),
            // e23, e31, e12
            (Simd32x3::from(self[e1234]) * other.group0().xyz())
                + (Simd32x3::from([other[e125], other[e235], other[e5]]) * self.group4().yzz())
                + (Simd32x3::from([other[e5], other[e5], other[e315]]) * self.group4().xyx())
                + (other.group1().yzx() * self.group9().zxy())
                - (Simd32x3::from(other[e321]) * self.group9().xyz())
                - (Simd32x3::from([self[e45], self[e4125], self[e4235]]) * other.group1().xxy())
                - (Simd32x3::from([self[e4315], self[e45], self[e45]]) * other.group1().zyz())
                - (self.group4().zxy() * other.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e1] * self[e321]) + (other[e3] * self[e2]),
                (other[e1] * self[e3]) + (other[e2] * self[e321]),
                (other[e2] * self[e1]) + (other[e3] * self[e321]),
                -(other[e3] * self[e435]) - (other[e5] * self[e4]),
            ]) + (other.group0().zx().with_zw(other[e5], other[e235]) * self.group7().yzz().with_w(self[e423]))
                + (other.group1().ww().with_zw(other[e315], other[e321]) * self.group7().xyx().with_w(self[e12345]))
                + (other.group0().www() * self.group1().xyz()).with_w(other[e125] * self[e412])
                + (self.group1().www() * other.group0().xyz()).with_w(other[e315] * self[e431])
                - (other.group1().yzxy() * self.group1().zxy().with_w(self[e425]))
                - (self.group7().zxy() * other.group0().yzx()).with_w(other[e1] * self[e415]),
            // e423, e431, e412
            (Simd32x3::from(self[e4]) * other.group1().xyz())
                + (Simd32x3::from([other[e321], other[e321], other[e2]]) * self.group7().xyx())
                + (Simd32x3::from([other[e3], other[e1], other[e321]]) * self.group7().yzz())
                - (self.group7().zxy() * other.group1().yzx()),
            // e235, e315, e125
            (Simd32x3::from(other[e5]) * self.group1().xyz())
                + (Simd32x3::from(other[e5]) * self.group6().xyz())
                + (Simd32x3::from(self[e12345]) * other.group0().xyz())
                + (Simd32x3::from([self[e2], self[e435], self[e415]]) * other.group0().zxy())
                + (Simd32x3::from([self[e321], self[e3], self[e1]]) * other.group0().xxy())
                + (self.group8().zxy() * other.group1().yzx())
                + (other.group0().zyz() * self.group6().yww())
                - (Simd32x3::from(self[e5]) * other.group1().xyz())
                - (Simd32x3::from([other[e321], other[e321], other[e2]]) * self.group8().xyx())
                - (Simd32x3::from([other[e3], other[e1], other[e321]]) * self.group8().yzz())
                - (other.group0().yzx() * self.group1().zxy())
                - (other.group0().yzx() * self.group6().zxy()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([self[e1234], self[e1234], self[e1234], self[e4125]]) * other.group0().xyzz())
                + (other.group0().zx().with_zw(other[e5], self[e4235]) * self.group4().yzz().with_w(other[e235]))
                + (other.group1().ww().with_zw(other[e315], other[e5]) * self.group4().xyx().with_w(self[scalar]))
                + Simd32x3::from(0.0).with_w((other[e1] * self[e15]) + (other[e2] * self[e25]) + (other[e3] * self[e35]) - (other[e5] * self[e45]))
                + (self.group5().zxy() * other.group1().yzx()).with_w(other[e315] * self[e4315])
                - (other.group0().yzxy() * self.group4().zxy().with_w(self[e31]))
                - (self.group0().xx().with_zw(self[scalar], self[e23]) * other.group1().xyz().with_w(other[e235]))
                - (other.group0().ww().with_zw(other[e2], other[e125]) * self.group5().xyx().with_w(self[e12]))
                - (other.group1().zx().with_zw(other[e321], self[e3215]) * self.group5().yzz().with_w(other[e321])),
            // e1234
            (other[e321] * self[e1234]) - (other[e1] * self[e41]) - (other[e2] * self[e42]) - (other[e3] * self[e43]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiLine> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      187      264        0
    //    simd2       16       16        0
    //    simd3      141      192        0
    //    simd4      128       91        0
    // Totals...
    // yes simd      472      563        0
    //  no simd     1154     1236        0
    fn anti_sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                -(other[e23] * self[e415])
                    - (other[e31] * self[e425])
                    - (other[e12] * self[e435])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412]),
                (other[e23] * self[e23]) + (other[e31] * self[e31]) + (other[e12] * self[e12]) + (other[e15] * self[e41]) + (other[e25] * self[e42]) + (other[e35] * self[e43]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e35] * self[e42]) - (other[e31] * self[e4125]) - (other[e25] * self[e43]),
                (other[e25] * self[e1234]) - (other[e12] * self[e4235]) - (other[e35] * self[e41]),
                (other[e35] * self[e1234]) - (other[e23] * self[e4315]) - (other[e15] * self[e42]),
                0.0,
            ]) + (Simd32x4::from([self[e45], self[e4125], self[e4235], self[e41]]) * other.group0().xxy().with_w(other[e23]))
                + (Simd32x4::from([self[e4315], self[e45], self[e45], self[e42]]) * other.group0().zyz().with_w(other[e31]))
                + (Simd32x4::from([self[e1234], self[e43], self[e41], self[e43]]) * other.group1().xxy().with_w(other[e12])),
            // e5
            (other[e23] * self[e15]) + (other[e31] * self[e25]) + (other[e12] * self[e35]) + (other[e15] * self[e23]) + (other[e25] * self[e31]) + (other[e35] * self[e12])
                - (other[e15] * self[e4235])
                - (other[e25] * self[e4315])
                - (other[e35] * self[e4125]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e15] * self[e321]) + (other[e35] * self[e2]) + (other[e35] * self[e425]),
                (other[e15] * self[e3]) + (other[e15] * self[e435]) + (other[e25] * self[e321]),
                (other[e25] * self[e1]) + (other[e25] * self[e415]) + (other[e35] * self[e321]),
                0.0,
            ]) + (Simd32x4::from([self[e5], self[e125], self[e235], self[e2]]) * other.group0().xxy().with_w(other[e31]))
                + (Simd32x4::from([self[e315], self[e5], self[e5], self[e3]]) * other.group0().zyz().with_w(other[e12]))
                + (self.group0().yy().with_zw(self[e12345], other[e23]) * other.group1().with_w(self[e1]))
                - (other.group0().yzx() * self.group8().zxy()).with_w(other[e15] * self[e423])
                - (other.group1().yzx() * self.group1().zxy()).with_w(other[e25] * self[e431])
                - (other.group1().yzx() * self.group6().zxy()).with_w(other[e35] * self[e412]),
            // e41, e42, e43
            (Simd32x3::from([self[e4], self[e412], self[e423]]) * other.group0().xxy()) + (Simd32x3::from([self[e431], self[e4], self[e4]]) * other.group0().zyz())
                - (other.group0().yzx() * self.group7().zxy()),
            // e23, e31, e12
            (Simd32x3::from(self[e12345]) * other.group0())
                + (Simd32x3::from([self[e4], self[e412], self[e423]]) * other.group1().xxy())
                + (Simd32x3::from([self[e431], self[e4], self[e4]]) * other.group1().zyz())
                + (other.group0().zxy() * self.group6().yzx())
                - (other.group0().yzx() * self.group6().zxy())
                - (other.group1().yzx() * self.group7().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e31] * self[e12]) + (other[e25] * self[e43]),
                (other[e12] * self[e23]) + (other[e35] * self[e41]),
                (other[e23] * self[e31]) + (other[e15] * self[e42]),
                -(other[e25] * self[e42]) - (other[e35] * self[e43]),
            ]) - (Simd32x4::from([self[e42], self[e1234], self[e1234], self[e41]]) * other.group1().zyz().with_w(other[e15]))
                - (Simd32x4::from([self[e1234], self[e43], self[e41], self[e4125]]) * other.group1().xxy().with_w(other[e12]))
                - (self.group0().xx().with_zw(self[scalar], other[e23]) * other.group0().with_w(self[e4235]))
                - (other.group0().zxy() * self.group5().yzx()).with_w(other[e31] * self[e4315]),
            // e423, e431, e412
            (other.group0().yzx() * self.group4().zxy())
                - (Simd32x3::from([self[e42], self[e1234], self[e1234]]) * other.group0().zyz())
                - (Simd32x3::from([self[e1234], self[e43], self[e41]]) * other.group0().xxy()),
            // e235, e315, e125
            (Simd32x3::from(other[e15]) * Simd32x3::from([self[e45], self[e4125], self[e31]]))
                + (Simd32x3::from(other[e25]) * Simd32x3::from([self[e12], self[e45], self[e4235]]))
                + (Simd32x3::from(other[e35]) * Simd32x3::from([self[e4315], self[e23], self[e45]]))
                + (other.group0().yzx() * self.group3().zxy())
                - (Simd32x3::from(self[scalar]) * other.group1())
                - (Simd32x3::from([self[e25], self[e3215], self[e3215]]) * other.group0().zyz())
                - (Simd32x3::from([self[e31], self[e4235], self[e23]]) * other.group1().zzy())
                - (Simd32x3::from([self[e4125], self[e12], self[e4315]]) * other.group1().yxx())
                - (Simd32x3::from([self[e3215], self[e35], self[e15]]) * other.group0().xxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e31] * self[e3]) + (other[e15] * self[e4]) + (other[e35] * self[e431]),
                (other[e12] * self[e1]) + (other[e15] * self[e412]) + (other[e25] * self[e4]),
                (other[e23] * self[e2]) + (other[e25] * self[e423]) + (other[e35] * self[e4]),
                -(other[e15] * self[e1]) - (other[e15] * self[e415]) - (other[e25] * self[e2]) - (other[e25] * self[e425]) - (other[e35] * self[e3]) - (other[e35] * self[e435]),
            ]) - (Simd32x4::from([self[e2], self[e321], self[e321], self[e315]]) * other.group0().zyz().with_w(other[e31]))
                - (Simd32x4::from([self[e321], self[e3], self[e1], self[e235]]) * other.group0().xxy().with_w(other[e23]))
                - (other.group1().yzx() * self.group7().zxy()).with_w(other[e12] * self[e125]),
            // e1234
            -(other[e23] * self[e423]) - (other[e31] * self[e431]) - (other[e12] * self[e412]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiMotor> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      185      270        0
    //    simd2       20       20        0
    //    simd3      148      209        0
    //    simd4      137       91        0
    // Totals...
    // yes simd      490      590        0
    //  no simd     1217     1301        0
    fn anti_sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                -(other[e31] * self[e425]) - (other[e12] * self[e435]) - (other[e25] * self[e431]) - (other[e35] * self[e412]),
                (other[e31] * self[e31]) + (other[e12] * self[e12]) + (other[e25] * self[e42]) + (other[e35] * self[e43]),
            ]) + (Simd32x2::from([self[e12345], self[e23]]) * other.group0().wx())
                + (Simd32x2::from([self[e4], self[e41]]) * other.group1().wx())
                - (Simd32x2::from([self[e415], self[scalar]]) * other.group0().xw())
                - (Simd32x2::from([self[e423], self[e1234]]) * other.group1().xw()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e12] * self[e4315]) + (other[scalar] * self[e4235]) + (other[e15] * self[e1234]) - (other[e31] * self[e4125]),
                (other[e31] * self[e45]) + (other[scalar] * self[e4315]) + (other[e25] * self[e1234]) - (other[e12] * self[e4235]),
                (other[e12] * self[e45]) + (other[scalar] * self[e4125]) + (other[e35] * self[e1234]) - (other[e23] * self[e4315]),
                0.0,
            ]) + (Simd32x4::from([self[e45], self[e4125], self[e4235], other[e12]]) * other.group0().xxy().with_w(self[e43]))
                + (self.group4().xyx() * other.group1().wwy()).with_w(other[e23] * self[e41])
                + (self.group4().yzz() * other.group1().zxw()).with_w(other[e31] * self[e42])
                - (self.group4().zxy() * other.group1().yzx()).with_w(other[scalar] * self[e1234]),
            // e5
            (other[e23] * self[e15])
                + (other[e31] * self[e25])
                + (other[e12] * self[e35])
                + (other[e15] * self[e23])
                + (other[e25] * self[e31])
                + (other[e35] * self[e12])
                + (other[e3215] * self[e45])
                - (other[scalar] * self[e3215])
                - (other[e15] * self[e4235])
                - (other[e25] * self[e4315])
                - (other[e35] * self[e4125])
                - (other[e3215] * self[scalar]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e15] * self[e321]) + (other[e35] * self[e2]) + (other[e35] * self[e425]) + (other[e3215] * self[e1]) + (other[e3215] * self[e415]),
                (other[e15] * self[e3]) + (other[e15] * self[e435]) + (other[e25] * self[e321]) + (other[e3215] * self[e2]) + (other[e3215] * self[e425]),
                (other[e25] * self[e1]) + (other[e25] * self[e415]) + (other[e35] * self[e321]) + (other[e3215] * self[e3]) + (other[e3215] * self[e435]),
                other[scalar] * self[e321] * -1.0,
            ]) + (Simd32x4::from([self[e5], self[e5], self[e5], self[e4]]) * other.group0().xyz().with_w(other[e3215]))
                + (self.group0().yy().with_zw(self[e12345], other[e23]) * other.group1().xyz().with_w(self[e1]))
                + (self.group8().xyx() * other.group0().wwy()).with_w(other[e31] * self[e2])
                + (self.group8().yzz() * other.group0().zxw()).with_w(other[e12] * self[e3])
                - (self.group8().zxy() * other.group0().yzx()).with_w(other[e15] * self[e423])
                - (other.group1().yzx() * self.group1().zxy()).with_w(other[e25] * self[e431])
                - (other.group1().yzx() * self.group6().zxy()).with_w(other[e35] * self[e412]),
            // e41, e42, e43
            (Simd32x3::from(self[e4]) * other.group0().xyz()) + (self.group7().xyx() * other.group0().wwy()) + (self.group7().yzz() * other.group0().zxw())
                - (self.group7().zxy() * other.group0().yzx()),
            // e23, e31, e12
            (Simd32x3::from(other[scalar]) * self.group6().xyz())
                + (Simd32x3::from(self[e12345]) * other.group0().xyz())
                + (Simd32x3::from(self[e4]) * other.group1().xyz())
                + (self.group7().xyx() * other.group1().wwy())
                + (self.group7().yzz() * other.group1().zxw())
                + (other.group0().zxy() * self.group6().yzx())
                - (self.group7().zxy() * other.group1().yzx())
                - (other.group0().yzx() * self.group6().zxy()),
            // e415, e425, e435, e321
            (self.group4().zxy() * other.group1().yzx()).with_w(other[scalar] * self[e45]) + (self.group5().zxy() * other.group0().yzx()).with_w(other[e3215] * self[e1234])
                - (Simd32x4::from([self[e1234], self[e1234], self[e1234], self[e4125]]) * other.group1().xyz().with_w(other[e12]))
                - (other.group1().zxwz() * self.group4().yzz().with_w(self[e43]))
                - (other.group1().wwyy() * self.group4().xyx().with_w(self[e42]))
                - (self.group0().xx().with_zw(self[scalar], self[e41]) * other.group0().xyz().with_w(other[e15]))
                - (self.group5().xyx() * other.group0().wwy()).with_w(other[e23] * self[e4235])
                - (self.group5().yzz() * other.group0().zxw()).with_w(other[e31] * self[e4315]),
            // e423, e431, e412
            (self.group4().zxy() * other.group0().yzx())
                - (Simd32x3::from(self[e1234]) * other.group0().xyz())
                - (self.group4().xyx() * other.group0().wwy())
                - (self.group4().yzz() * other.group0().zxw()),
            // e235, e315, e125
            (Simd32x3::from(other[e3215]) * self.group9().xyz())
                + (Simd32x3::from([self[e45], self[e4125], self[e4235]]) * other.group1().xxy())
                + (Simd32x3::from([self[e4315], self[e45], self[e45]]) * other.group1().zyz())
                + (self.group5().zxy() * other.group1().yzx())
                + (other.group0().yzx() * self.group3().zxy())
                - (Simd32x3::from(other[scalar]) * self.group3().xyz())
                - (Simd32x3::from(self[scalar]) * other.group1().xyz())
                - (Simd32x3::from([self[e25], self[e3215], self[e3215]]) * other.group0().zyz())
                - (Simd32x3::from([self[e3215], self[e35], self[e15]]) * other.group0().xxy())
                - (self.group5().xyx() * other.group1().wwy())
                - (self.group5().yzz() * other.group1().zxw())
                - (other.group1().yzx() * self.group9().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e15] * self[e4],
                other[e25] * self[e4],
                other[e35] * self[e4],
                -(other[e15] * self[e415]) - (other[e25] * self[e2]) - (other[e25] * self[e425]) - (other[e35] * self[e3]) - (other[e35] * self[e435]),
            ]) + (other.group1().wwyw() * self.group7().xyx().with_w(self[e12345]))
                + (self.group7().yzz() * other.group1().zxw()).with_w(other[scalar] * self[e5])
                + (other.group0().yzx() * self.group1().zxy()).with_w(other[e3215] * self[e321])
                - (Simd32x4::from([self[e2], self[e321], self[e321], other[e12]]) * other.group0().zyz().with_w(self[e125]))
                - (Simd32x4::from([self[e321], self[e3], self[e1], other[e31]]) * other.group0().xxy().with_w(self[e315]))
                - (self.group1().xyzx() * other.group0().www().with_w(other[e15]))
                - (self.group7().zxy() * other.group1().yzx()).with_w(other[e23] * self[e235]),
            // e1234
            (other[scalar] * self[e4]) - (other[e23] * self[e423]) - (other[e31] * self[e431]) - (other[e12] * self[e412]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiPlane> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      169      250        0
    //    simd2       17       17        0
    //    simd3      135      184        0
    //    simd4      120       85        0
    // Totals...
    // yes simd      441      536        0
    //  no simd     1088     1176        0
    fn anti_sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (other[e2] * self[e4315]) + (other[e3] * self[e4125]) + (other[e5] * self[e1234]),
                -(other[e1] * self[e1]) - (other[e2] * self[e2]) - (other[e3] * self[e3]),
            ]) + (Simd32x2::from([self[e4235], self[e4]]) * other.group0().xw()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e1] * self[e12345]) + (other[e3] * self[e425]),
                (other[e1] * self[e435]) + (other[e2] * self[e12345]),
                (other[e2] * self[e415]) + (other[e3] * self[e12345]),
                other[e3] * self[e412] * -1.0,
            ]) - (other.group0().wwwx() * self.group7().with_w(self[e423]))
                - (other.group0().yzx() * self.group6().zxy()).with_w(other[e2] * self[e431]),
            // e5
            (other[e1] * self[e235]) + (other[e2] * self[e315]) + (other[e3] * self[e125]) + (other[e5] * self[e12345]) + (other[e5] * self[e321]),
            // e15, e25, e35, e45
            Simd32x4::from([
                -(other[e1] * self[e3215]) - (other[e3] * self[e25]) - (other[e5] * self[e4235]),
                -(other[e1] * self[e35]) - (other[e2] * self[e3215]) - (other[e5] * self[e4315]),
                -(other[e2] * self[e15]) - (other[e3] * self[e3215]) - (other[e5] * self[e4125]),
                (other[e3] * self[e12]) + (other[e5] * self[e1234]),
            ]) + (other.group0().wwwx() * self.group5().with_w(self[e23]))
                + (other.group0().yzx() * self.group3().zxy()).with_w(other[e2] * self[e31]),
            // e41, e42, e43
            (Simd32x3::from(self[e1234]) * other.group0().xyz()) + (self.group4().yzx() * other.group0().zxy()) - (self.group4().zxy() * other.group0().yzx()),
            // e23, e31, e12
            (Simd32x3::from(other[e5]) * self.group4()) + (other.group0().yzx() * self.group9().zxy())
                - (Simd32x3::from([self[e45], self[e4125], self[e4235]]) * other.group0().xxy())
                - (Simd32x3::from([self[e4315], self[e45], self[e45]]) * other.group0().zyz()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e1] * self[e321]) + (other[e3] * self[e2]) + (other[e5] * self[e423]),
                (other[e1] * self[e3]) + (other[e2] * self[e321]) + (other[e5] * self[e431]),
                (other[e2] * self[e1]) + (other[e3] * self[e321]) + (other[e5] * self[e412]),
                -(other[e2] * self[e425]) - (other[e3] * self[e435]) - (other[e5] * self[e4]),
            ]) - (other.group0().yzxx() * self.group1().zxy().with_w(self[e415])),
            // e423, e431, e412
            (Simd32x3::from(self[e4]) * other.group0().xyz()) + (self.group7().yzx() * other.group0().zxy()) - (self.group7().zxy() * other.group0().yzx()),
            // e235, e315, e125
            (Simd32x3::from(other[e5]) * self.group1().xyz()) + (Simd32x3::from(other[e5]) * self.group6().xyz()) + (self.group8().zxy() * other.group0().yzx())
                - (Simd32x3::from(self[e5]) * other.group0().xyz())
                - (self.group8().yzx() * other.group0().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e3] * self[e31] * -1.0,
                other[e1] * self[e12] * -1.0,
                other[e2] * self[e23] * -1.0,
                (other[e2] * self[e25]) + (other[e3] * self[e35]),
            ]) + (Simd32x4::from(other[e5]) * self.group4().with_w(self[scalar]))
                + (self.group5().zxy() * other.group0().yzx()).with_w(other[e1] * self[e15])
                - (self.group0().xx().with_zw(self[scalar], other[e5]) * other.group0().xyz().with_w(self[e45])),
            // e1234
            -(other[e1] * self[e41]) - (other[e2] * self[e42]) - (other[e3] * self[e43]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiScalar> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      140      196        0
    //    simd2       16       17        0
    //    simd3      124      170        0
    //    simd4      112       84        0
    // Totals...
    // yes simd      392      467        0
    //  no simd      992     1076        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(other[e12345]) * self.group0(),
            // e1, e2, e3, e4
            Simd32x4::from(other[e12345]) * self.group1(),
            // e5
            other[e12345] * self[e5],
            // e15, e25, e35, e45
            Simd32x4::from(other[e12345]) * self.group3(),
            // e41, e42, e43
            Simd32x3::from(other[e12345]) * self.group4(),
            // e23, e31, e12
            Simd32x3::from(other[e12345]) * self.group5(),
            // e415, e425, e435, e321
            Simd32x4::from(other[e12345]) * self.group6(),
            // e423, e431, e412
            Simd32x3::from(other[e12345]) * self.group7(),
            // e235, e315, e125
            Simd32x3::from(other[e12345]) * self.group8(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e12345]) * self.group9(),
            // e1234
            other[e12345] * self[e1234],
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      178      263        0
    //    simd2       25       25        0
    //    simd3      160      216        0
    //    simd4      143      101        0
    // Totals...
    // yes simd      506      605        0
    //  no simd     1280     1365        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([other[e321] * self[e45] * -1.0, other[e321] * self[e321]])
                - (Simd32x2::from(other[e423]) * Simd32x2::from([self[e15], self[e235]]))
                - (Simd32x2::from(other[e431]) * Simd32x2::from([self[e25], self[e315]]))
                - (Simd32x2::from(other[e412]) * Simd32x2::from([self[e35], self[e125]]))
                - (Simd32x2::from(other[e415]) * Simd32x2::from([self[e23], self[e415]]))
                - (Simd32x2::from(other[e425]) * Simd32x2::from([self[e31], self[e425]]))
                - (Simd32x2::from(other[e435]) * Simd32x2::from([self[e12], self[e435]]))
                - (Simd32x2::from(other[e235]) * Simd32x2::from([self[e41], self[e423]]))
                - (Simd32x2::from(other[e315]) * Simd32x2::from([self[e42], self[e431]]))
                - (Simd32x2::from(other[e125]) * Simd32x2::from([self[e43], self[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e435] * self[e2]) + (other[e321] * self[e415]),
                (other[e425] * self[e321]) + (other[e321] * self[e425]),
                (other[e435] * self[e321]) + (other[e321] * self[e435]),
                -(other[e425] * self[e431]) - (other[e435] * self[e412]),
            ]) + (Simd32x4::from([self[e5], self[e125], self[e235], self[e1]]) * other.group0().xxy().with_w(other[e423]))
                + (Simd32x4::from([self[e321], self[e3], self[e1], self[e4]]) * other.group1().xxyw())
                + (Simd32x4::from([self[e315], self[e5], self[e5], self[e2]]) * other.group0().zyz().with_w(other[e431]))
                + (other.group2().yzx() * self.group7().zxy()).with_w(other[e412] * self[e3])
                - (Simd32x4::from([self[e4], self[e412], self[e423], self[e425]]) * other.group2().xxy().with_w(other[e431]))
                - (Simd32x4::from([self[e431], self[e4], self[e4], self[e435]]) * other.group2().zyz().with_w(other[e412]))
                - (other.group0().yzx() * self.group8().zxy()).with_w(other[e423] * self[e415])
                - (other.group1().yzx() * self.group1().zxy()).with_w(other[e415] * self[e423]),
            // e5
            -(other[e415] * self[e235])
                - (other[e425] * self[e315])
                - (other[e435] * self[e125])
                - (other[e321] * self[e5])
                - (other[e235] * self[e1])
                - (other[e235] * self[e415])
                - (other[e315] * self[e2])
                - (other[e315] * self[e425])
                - (other[e125] * self[e3])
                - (other[e125] * self[e435]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e415] * self[e3215]) + (other[e435] * self[e25]),
                (other[e415] * self[e35]) + (other[e425] * self[e3215]),
                (other[e425] * self[e15]) + (other[e435] * self[e3215]),
                -(other[e425] * self[e4315]) - (other[e435] * self[e4125]),
            ]) + (Simd32x4::from([self[e31], self[e4235], self[e23], self[e35]]) * other.group2().zzy().with_w(other[e412]))
                + (Simd32x4::from([self[e4125], self[e12], self[e4315], self[e25]]) * other.group2().yxx().with_w(other[e431]))
                + (self.group0().xx().with_zw(self[scalar], other[e423]) * other.group2().with_w(self[e15]))
                - (Simd32x4::from([self[e45], self[e4125], self[e31], other[e321]]) * other.group2().xxx().with_w(self[scalar]))
                - (Simd32x4::from([self[e12], self[e45], self[e4235], self[e41]]) * other.group2().yyy().with_w(other[e235]))
                - (Simd32x4::from([self[e4315], self[e23], self[e45], self[e42]]) * other.group2().zzz().with_w(other[e315]))
                - (other.group1().wwwx() * self.group3().xyz().with_w(self[e4235]))
                - (other.group1().yzx() * self.group3().zxy()).with_w(other[e125] * self[e43]),
            // e41, e42, e43
            (Simd32x3::from(self[scalar]) * other.group0())
                + (Simd32x3::from(self[e1234]) * other.group1().xyz())
                + (Simd32x3::from([self[e45], self[e12], self[e23]]) * other.group0().xxy())
                + (Simd32x3::from([self[e31], self[e4125], self[e4235]]) * other.group0().zxy())
                + (Simd32x3::from([self[e4315], self[e45], self[e45]]) * other.group0().zyz())
                + (self.group4().xyx() * other.group1().wwy())
                + (self.group4().yzz() * other.group1().zxw())
                - (other.group0().yzx() * self.group5().zxy())
                - (other.group0().yzx() * self.group9().zxy())
                - (self.group4().zxy() * other.group1().yzx()),
            // e23, e31, e12
            (Simd32x3::from(self[scalar]) * other.group1().xyz())
                + (Simd32x3::from([self[e25], self[e3215], self[e3215]]) * other.group0().zyz())
                + (Simd32x3::from([self[e42], self[e1234], self[e1234]]) * other.group2().zyz())
                + (Simd32x3::from([self[e3215], self[e35], self[e15]]) * other.group0().xxy())
                + (Simd32x3::from([self[e1234], self[e43], self[e41]]) * other.group2().xxy())
                + (self.group5().yzx() * other.group1().zxy())
                - (Simd32x3::from(other[e321]) * self.group9().xyz())
                - (other.group0().yzx() * self.group3().zxy())
                - (other.group2().yzx() * self.group4().zxy())
                - (self.group5().zxy() * other.group1().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e435] * self[e425]) + (other[e321] * self[e1]) + (other[e125] * self[e431]),
                (other[e415] * self[e435]) + (other[e321] * self[e2]) + (other[e315] * self[e4]),
                (other[e425] * self[e415]) + (other[e321] * self[e3]) + (other[e125] * self[e4]),
                -(other[e415] * self[e1]) - (other[e425] * self[e2]) - (other[e435] * self[e3]),
            ]) + (Simd32x4::from(self[e12345]) * other.group1())
                + (Simd32x4::from([self[e4], self[e412], self[e423], self[e412]]) * other.group2().xxy().with_w(other[e125]))
                + (Simd32x4::from([self[e5], self[e125], self[e235], self[e423]]) * other.group0().xxy().with_w(other[e235]))
                + (Simd32x4::from([self[e315], self[e5], self[e5], self[e431]]) * other.group0().zyz().with_w(other[e315]))
                - (other.group0().yzx() * self.group8().zxy()).with_w(other[e423] * self[e235])
                - (other.group2().yzx() * self.group7().zxy()).with_w(other[e431] * self[e315])
                - (other.group1().yzx() * self.group6().zxy()).with_w(other[e412] * self[e125]),
            // e423, e431, e412
            (Simd32x3::from(self[e12345]) * other.group0())
                + (Simd32x3::from(self[e4]) * other.group1().xyz())
                + (Simd32x3::from([self[e3], self[e435], self[e2]]) * other.group0().yxx())
                + (Simd32x3::from([self[e425], self[e1], self[e415]]) * other.group0().zzy())
                + (self.group7().xyx() * other.group1().wwy())
                + (self.group7().yzz() * other.group1().zxw())
                - (Simd32x3::from(other[e423]) * Simd32x3::from([self[e321], self[e3], self[e425]]))
                - (Simd32x3::from(other[e431]) * Simd32x3::from([self[e435], self[e321], self[e1]]))
                - (Simd32x3::from(other[e412]) * Simd32x3::from([self[e2], self[e415], self[e321]]))
                - (self.group7().zxy() * other.group1().yzx()),
            // e235, e315, e125
            (Simd32x3::from(self[e12345]) * other.group2())
                + (Simd32x3::from(self[e5]) * other.group1().xyz())
                + (Simd32x3::from([self[e2], self[e435], self[e415]]) * other.group2().zxy())
                + (Simd32x3::from([self[e321], self[e3], self[e1]]) * other.group2().xxy())
                + (other.group2().zyz() * self.group6().yww())
                + (self.group8().yzx() * other.group1().zxy())
                - (other.group2().yzx() * self.group1().zxy())
                - (other.group2().yzx() * self.group6().zxy())
                - (self.group8().xxy() * other.group1().wzx())
                - (self.group8().zyz() * other.group1().yww()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e415] * self[e45]) + (other[e435] * self[e4315]),
                (other[e415] * self[e4125]) + (other[e425] * self[e45]),
                (other[e425] * self[e4235]) + (other[e435] * self[e45]),
                -(other[e435] * self[e35]) - (other[e321] * self[e3215]),
            ]) + (Simd32x4::from([self[e42], self[e1234], self[e1234], self[e4125]]) * other.group2().zyz().with_w(other[e125]))
                + (Simd32x4::from([self[e1234], self[e43], self[e41], self[e4315]]) * other.group2().xxy().with_w(other[e315]))
                + (other.group0().yzx() * self.group3().zxy()).with_w(other[e235] * self[e4235])
                - (Simd32x4::from([self[e25], self[e3215], self[e3215], self[e31]]) * other.group0().zyz().with_w(other[e315]))
                - (Simd32x4::from([self[e3215], self[e35], self[e15], self[e23]]) * other.group0().xxy().with_w(other[e235]))
                - (other.group1().yzxy() * self.group9().zxy().with_w(self[e25]))
                - (self.group5() * other.group1().www()).with_w(other[e415] * self[e15])
                - (other.group2().yzx() * self.group4().zxy()).with_w(other[e125] * self[e12]),
            // e1234
            (other[e321] * self[e1234])
                - (other[e423] * self[e23])
                - (other[e423] * self[e4235])
                - (other[e431] * self[e31])
                - (other[e431] * self[e4315])
                - (other[e412] * self[e12])
                - (other[e412] * self[e4125])
                - (other[e415] * self[e41])
                - (other[e425] * self[e42])
                - (other[e435] * self[e43]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      180      270        0
    //    simd2       26       26        0
    //    simd3      164      225        0
    //    simd4      147      100        0
    // Totals...
    // yes simd      517      621        0
    //  no simd     1312     1397        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([other[e321] * self[e45] * -1.0, other[e321] * self[e321]]) + (Simd32x2::from(other[e12345]) * self.group0())
                - (Simd32x2::from(other[e423]) * Simd32x2::from([self[e15], self[e235]]))
                - (Simd32x2::from(other[e431]) * Simd32x2::from([self[e25], self[e315]]))
                - (Simd32x2::from(other[e412]) * Simd32x2::from([self[e35], self[e125]]))
                - (Simd32x2::from(other[e415]) * Simd32x2::from([self[e23], self[e415]]))
                - (Simd32x2::from(other[e425]) * Simd32x2::from([self[e31], self[e425]]))
                - (Simd32x2::from(other[e435]) * Simd32x2::from([self[e12], self[e435]]))
                - (Simd32x2::from(other[e235]) * Simd32x2::from([self[e41], self[e423]]))
                - (Simd32x2::from(other[e315]) * Simd32x2::from([self[e42], self[e431]]))
                - (Simd32x2::from(other[e125]) * Simd32x2::from([self[e43], self[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e321] * self[e415]) + (other[e12345] * self[e1]),
                (other[e321] * self[e425]) + (other[e12345] * self[e2]),
                (other[e321] * self[e435]) + (other[e12345] * self[e3]),
                -(other[e425] * self[e431]) - (other[e435] * self[e412]),
            ]) + (Simd32x4::from([self[e2], self[e321], self[e321], self[e4]]) * other.group1().zyz().with_w(other[e12345]))
                + (Simd32x4::from([self[e5], self[e125], self[e235], self[e1]]) * other.group0().xxy().with_w(other[e423]))
                + (Simd32x4::from([self[e321], self[e3], self[e1], self[e4]]) * other.group1().xxyw())
                + (Simd32x4::from([self[e315], self[e5], self[e5], self[e2]]) * other.group0().zyz().with_w(other[e431]))
                + (self.group7().zxy() * other.group2().yzx()).with_w(other[e412] * self[e3])
                - (other.group0().yzx() * self.group8().zxy()).with_w(other[e423] * self[e415])
                - (self.group7().yzx() * other.group2().zxy()).with_w(other[e431] * self[e425])
                - (other.group1().yzx() * self.group1().zxy()).with_w(other[e412] * self[e435])
                - (self.group1().www() * other.group2().xyz()).with_w(other[e415] * self[e423]),
            // e5
            (other[e12345] * self[e5])
                - (other[e415] * self[e235])
                - (other[e425] * self[e315])
                - (other[e435] * self[e125])
                - (other[e321] * self[e5])
                - (other[e235] * self[e1])
                - (other[e235] * self[e415])
                - (other[e315] * self[e2])
                - (other[e315] * self[e425])
                - (other[e125] * self[e3])
                - (other[e125] * self[e435]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e315] * self[e4125]) + (other[e12345] * self[e15]),
                (other[e125] * self[e4235]) + (other[e12345] * self[e25]),
                (other[e235] * self[e4315]) + (other[e12345] * self[e35]),
                -(other[e425] * self[e4315]) - (other[e435] * self[e4125]),
            ]) + (Simd32x4::from([self[e25], self[e3215], self[e3215], self[e45]]) * other.group1().zyz().with_w(other[e12345]))
                + (Simd32x4::from([self[e3215], self[e35], self[e15], self[e35]]) * other.group1().xxy().with_w(other[e412]))
                + (self.group0().xx().with_zw(self[scalar], other[e423]) * other.group2().xyz().with_w(self[e15]))
                + (self.group5().yzx() * other.group2().zxy()).with_w(other[e431] * self[e25])
                - (Simd32x4::from([self[e45], self[e4125], self[e4235], other[e125]]) * other.group2().xxy().with_w(self[e43]))
                - (Simd32x4::from([self[e4315], self[e45], self[e45], self[e4235]]) * other.group2().zyz().with_w(other[e415]))
                - (self.group5().zxy() * other.group2().yzx()).with_w(other[e321] * self[scalar])
                - (other.group1().yzx() * self.group3().zxy()).with_w(other[e235] * self[e41])
                - (other.group1().www() * self.group3().xyz()).with_w(other[e315] * self[e42]),
            // e41, e42, e43
            (Simd32x3::from(self[scalar]) * other.group0())
                + (Simd32x3::from(self[e1234]) * other.group1().xyz())
                + (Simd32x3::from([other[e435], other[e415], other[e12345]]) * self.group4().yzz())
                + (Simd32x3::from([other[e12345], other[e12345], other[e321]]) * self.group4())
                + (Simd32x3::from([self[e45], self[e12], self[e23]]) * other.group0().xxy())
                + (Simd32x3::from([self[e31], self[e4125], self[e4235]]) * other.group0().zxy())
                + (Simd32x3::from([self[e4315], self[e45], self[e45]]) * other.group0().zyz())
                + (self.group4().xyx() * other.group1().wwy())
                - (other.group0().yzx() * self.group5().zxy())
                - (other.group0().yzx() * self.group9().zxy())
                - (self.group4().zxy() * other.group1().yzx()),
            // e23, e31, e12
            (Simd32x3::from(self[scalar]) * other.group1().xyz())
                + (Simd32x3::from(self[e1234]) * other.group2().xyz())
                + (Simd32x3::from([other[e435], other[e415], other[e12345]]) * self.group5().yzz())
                + (Simd32x3::from([other[e12345], other[e12345], other[e425]]) * self.group5().xyx())
                + (Simd32x3::from([self[e25], self[e3215], self[e3215]]) * other.group0().zyz())
                + (Simd32x3::from([self[e3215], self[e35], self[e15]]) * other.group0().xxy())
                + (self.group4().yzx() * other.group2().zxy())
                - (Simd32x3::from(other[e321]) * self.group9().xyz())
                - (other.group0().yzx() * self.group3().zxy())
                - (self.group4().zxy() * other.group2().yzx())
                - (self.group5().zxy() * other.group1().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e321] * self[e1]) + (other[e235] * self[e4]) + (other[e12345] * self[e415]),
                (other[e321] * self[e2]) + (other[e315] * self[e4]) + (other[e12345] * self[e425]),
                (other[e321] * self[e3]) + (other[e125] * self[e4]) + (other[e12345] * self[e435]),
                -(other[e415] * self[e1]) - (other[e425] * self[e2]) - (other[e435] * self[e3]),
            ]) + (Simd32x4::from(self[e12345]) * other.group1())
                + (Simd32x4::from([self[e5], self[e125], self[e235], other[e235]]) * other.group0().xxy().with_w(self[e423]))
                + (Simd32x4::from([self[e315], self[e5], self[e5], other[e315]]) * other.group0().zyz().with_w(self[e431]))
                + (other.group2().zxyz() * self.group7().yzx().with_w(self[e412]))
                + (self.group6().yzxw() * other.group1().zxy().with_w(other[e12345]))
                - (other.group0().yzx() * self.group8().zxy()).with_w(other[e423] * self[e235])
                - (self.group7().zxy() * other.group2().yzx()).with_w(other[e431] * self[e315])
                - (other.group1().yzx() * self.group6().zxy()).with_w(other[e412] * self[e125]),
            // e423, e431, e412
            (Simd32x3::from(self[e12345]) * other.group0())
                + (Simd32x3::from(self[e4]) * other.group1().xyz())
                + (Simd32x3::from([other[e435], other[e415], other[e12345]]) * self.group7().yzz())
                + (Simd32x3::from([other[e12345], other[e12345], other[e321]]) * self.group7())
                + (Simd32x3::from([self[e3], self[e435], self[e2]]) * other.group0().yxx())
                + (Simd32x3::from([self[e425], self[e1], self[e415]]) * other.group0().zzy())
                + (self.group7().xyx() * other.group1().wwy())
                - (Simd32x3::from(other[e423]) * Simd32x3::from([self[e321], self[e3], self[e425]]))
                - (Simd32x3::from(other[e431]) * Simd32x3::from([self[e435], self[e321], self[e1]]))
                - (Simd32x3::from(other[e412]) * Simd32x3::from([self[e2], self[e415], self[e321]]))
                - (self.group7().zxy() * other.group1().yzx()),
            // e235, e315, e125
            (Simd32x3::from(self[e12345]) * other.group2().xyz())
                + (Simd32x3::from(self[e5]) * other.group1().xyz())
                + (Simd32x3::from([other[e435], other[e415], other[e12345]]) * self.group8().yzz())
                + (Simd32x3::from([other[e12345], other[e12345], other[e425]]) * self.group8().xyx())
                + (Simd32x3::from([self[e2], self[e435], self[e415]]) * other.group2().zxy())
                + (Simd32x3::from([self[e321], self[e3], self[e1]]) * other.group2().xxy())
                + (other.group2().zyz() * self.group6().yww())
                - (self.group8().xxy() * other.group1().wzx())
                - (self.group8().zyz() * other.group1().yww())
                - (other.group2().yzx() * self.group1().zxy())
                - (other.group2().yzx() * self.group6().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e235] * self[e1234]) + (other[e12345] * self[e4235]),
                (other[e315] * self[e1234]) + (other[e12345] * self[e4315]),
                (other[e125] * self[e1234]) + (other[e12345] * self[e4125]),
                -(other[e435] * self[e35]) - (other[e321] * self[e3215]),
            ]) + (Simd32x4::from([self[e45], self[e4125], self[e4235], self[e4125]]) * other.group1().xxy().with_w(other[e125]))
                + (Simd32x4::from([self[e4315], self[e45], self[e45], self[e3215]]) * other.group1().zyz().with_w(other[e12345]))
                + (other.group0().yzx() * self.group3().zxy()).with_w(other[e235] * self[e4235])
                + (self.group4().yzx() * other.group2().zxy()).with_w(other[e315] * self[e4315])
                - (Simd32x4::from([self[e25], self[e3215], self[e3215], other[e315]]) * other.group0().zyz().with_w(self[e31]))
                - (Simd32x4::from([self[e3215], self[e35], self[e15], other[e235]]) * other.group0().xxy().with_w(self[e23]))
                - (other.group1().yzxy() * self.group9().zxy().with_w(self[e25]))
                - (other.group2().yzxz() * self.group4().zxy().with_w(self[e12]))
                - (self.group5() * other.group1().www()).with_w(other[e415] * self[e15]),
            // e1234
            (other[e321] * self[e1234]) + (other[e12345] * self[e1234])
                - (other[e423] * self[e23])
                - (other[e423] * self[e4235])
                - (other[e431] * self[e31])
                - (other[e431] * self[e4315])
                - (other[e412] * self[e12])
                - (other[e412] * self[e4125])
                - (other[e415] * self[e41])
                - (other[e425] * self[e42])
                - (other[e435] * self[e43]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      198      285        0
    //    simd2       17       17        0
    //    simd3      160      220        0
    //    simd4      142       97        0
    // Totals...
    // yes simd      517      619        0
    //  no simd     1280     1367        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                -(other[e41] * self[e235])
                    - (other[e42] * self[e315])
                    - (other[e43] * self[e125])
                    - (other[e31] * self[e425])
                    - (other[e12] * self[e435])
                    - (other[e45] * self[e321])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412]),
                (other[e41] * self[e15])
                    + (other[e42] * self[e25])
                    + (other[e43] * self[e35])
                    + (other[e23] * self[e23])
                    + (other[e31] * self[e31])
                    + (other[e12] * self[e12])
                    + (other[e15] * self[e41])
                    + (other[e25] * self[e42])
                    + (other[e35] * self[e43]),
            ]) - (Simd32x2::from([self[e415], self[e45]]) * other.group1().xw()),
            // e1, e2, e3, e4
            Simd32x4::from([
                -(other[e41] * self[e3215]) - (other[e43] * self[e25]) - (other[e31] * self[e4125]) - (other[e25] * self[e43]),
                -(other[e41] * self[e35]) - (other[e42] * self[e3215]) - (other[e12] * self[e4235]) - (other[e35] * self[e41]),
                -(other[e42] * self[e15]) - (other[e43] * self[e3215]) - (other[e23] * self[e4315]) - (other[e15] * self[e42]),
                (other[e23] * self[e41]) + (other[e31] * self[e42]) + (other[e12] * self[e43]) + (other[e45] * self[e1234]),
            ]) + (Simd32x4::from([self[e45], self[e4125], self[e4235], self[e12]]) * other.group1().xxy().with_w(other[e43]))
                + (Simd32x4::from([self[e42], self[e1234], self[e1234], self[e31]]) * other.group2().zyz().with_w(other[e42]))
                + (Simd32x4::from([self[e4315], self[e45], self[e45], self[e4125]]) * other.group1().zyz().with_w(other[e43]))
                + (Simd32x4::from([self[e1234], self[e43], self[e41], self[e4235]]) * other.group2().xxy().with_w(other[e41]))
                + (self.group5() * other.group1().www()).with_w(other[e42] * self[e4315])
                + (other.group0().yzx() * self.group3().zxy()).with_w(other[e41] * self[e23]),
            // e5
            (other[e23] * self[e15]) + (other[e31] * self[e25]) + (other[e12] * self[e35]) + (other[e15] * self[e23]) + (other[e25] * self[e31]) + (other[e35] * self[e12])
                - (other[e45] * self[e3215])
                - (other[e15] * self[e4235])
                - (other[e25] * self[e4315])
                - (other[e35] * self[e4125]),
            // e15, e25, e35, e45
            (Simd32x4::from(self[e12345]) * other.group2().with_w(other[e45]))
                + (Simd32x4::from([self[e2], self[e435], self[e415], self[e315]]) * other.group2().zxy().with_w(other[e42]))
                + (Simd32x4::from([self[e5], self[e5], self[e5], self[e3]]) * other.group1().xyzz())
                + (Simd32x4::from([self[e321], self[e3], self[e1], self[e235]]) * other.group2().xxy().with_w(other[e41]))
                + (other.group2().zyz() * self.group6().yww()).with_w(other[e43] * self[e125])
                + (self.group8().xyx() * other.group1().wwy()).with_w(other[e23] * self[e1])
                + (self.group8().yzz() * other.group1().zxw()).with_w(other[e31] * self[e2])
                - (other.group2().yzx() * self.group1().zxy()).with_w(other[e15] * self[e423])
                - (other.group2().yzx() * self.group6().zxy()).with_w(other[e25] * self[e431])
                - (self.group8().zxy() * other.group1().yzx()).with_w(other[e35] * self[e412]),
            // e41, e42, e43
            (Simd32x3::from(self[e12345]) * other.group0())
                + (Simd32x3::from(self[e4]) * other.group1().xyz())
                + (Simd32x3::from([self[e3], self[e435], self[e2]]) * other.group0().yxx())
                + (Simd32x3::from([self[e425], self[e1], self[e415]]) * other.group0().zzy())
                + (self.group7().yzx() * other.group1().zxy())
                - (Simd32x3::from(other[e41]) * Simd32x3::from([self[e321], self[e3], self[e425]]))
                - (Simd32x3::from(other[e42]) * Simd32x3::from([self[e435], self[e321], self[e1]]))
                - (Simd32x3::from(other[e43]) * Simd32x3::from([self[e2], self[e415], self[e321]]))
                - (self.group7().xxy() * other.group1().wzx())
                - (self.group7().zyz() * other.group1().yww()),
            // e23, e31, e12
            (Simd32x3::from(self[e12345]) * other.group1().xyz())
                + (Simd32x3::from([self[e4], self[e412], self[e423]]) * other.group2().xxy())
                + (Simd32x3::from([self[e5], self[e125], self[e235]]) * other.group0().xxy())
                + (Simd32x3::from([self[e431], self[e4], self[e4]]) * other.group2().zyz())
                + (Simd32x3::from([self[e315], self[e5], self[e5]]) * other.group0().zyz())
                + (other.group1().zxy() * self.group6().yzx())
                - (Simd32x3::from(other[e45]) * self.group1().xyz())
                - (other.group0().yzx() * self.group8().zxy())
                - (other.group2().yzx() * self.group7().zxy())
                - (other.group1().yzx() * self.group6().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                other[e45] * self[e4235] * -1.0,
                other[e45] * self[e4315] * -1.0,
                other[e45] * self[e4125] * -1.0,
                other[e43] * self[e35],
            ]) + (other.group0().yzx() * self.group3().zxy()).with_w(other[e45] * self[scalar])
                + (other.group2().yzx() * self.group4().zxy()).with_w(other[e41] * self[e15])
                + (self.group5().zxy() * other.group1().yzx()).with_w(other[e42] * self[e25])
                - (Simd32x4::from([self[e25], self[e3215], self[e3215], self[e43]]) * other.group0().zyz().with_w(other[e35]))
                - (Simd32x4::from([self[e42], self[e1234], self[e1234], self[e4315]]) * other.group2().zyz().with_w(other[e31]))
                - (Simd32x4::from([self[e3215], self[e35], self[e15], self[e42]]) * other.group0().xxy().with_w(other[e25]))
                - (Simd32x4::from([self[e1234], self[e43], self[e41], self[e4235]]) * other.group2().xxy().with_w(other[e23]))
                - (self.group0().xx().with_zw(self[scalar], other[e15]) * other.group1().xyz().with_w(self[e41]))
                - (self.group5().yzx() * other.group1().zxy()).with_w(other[e12] * self[e4125]),
            // e423, e431, e412
            (other.group0().yzx() * self.group5().zxy())
                + (other.group0().yzx() * self.group9().zxy())
                + (self.group4().xxy() * other.group1().wzx())
                + (self.group4().zyz() * other.group1().yww())
                - (Simd32x3::from(self[scalar]) * other.group0())
                - (Simd32x3::from(self[e1234]) * other.group1().xyz())
                - (Simd32x3::from([self[e45], self[e12], self[e23]]) * other.group0().xxy())
                - (Simd32x3::from([self[e31], self[e4125], self[e4235]]) * other.group0().zxy())
                - (Simd32x3::from([self[e4315], self[e45], self[e45]]) * other.group0().zyz())
                - (self.group4().yzx() * other.group1().zxy()),
            // e235, e315, e125
            (Simd32x3::from(other[e15]) * Simd32x3::from([self[e45], self[e4125], self[e31]]))
                + (Simd32x3::from(other[e25]) * Simd32x3::from([self[e12], self[e45], self[e4235]]))
                + (Simd32x3::from(other[e35]) * Simd32x3::from([self[e4315], self[e23], self[e45]]))
                + (other.group1().yzx() * self.group3().zxy())
                - (Simd32x3::from(other[e45]) * self.group3().xyz())
                - (Simd32x3::from(self[scalar]) * other.group2())
                - (Simd32x3::from([self[e25], self[e3215], self[e3215]]) * other.group1().zyz())
                - (Simd32x3::from([self[e31], self[e4235], self[e23]]) * other.group2().zzy())
                - (Simd32x3::from([self[e4125], self[e12], self[e4315]]) * other.group2().yxx())
                - (Simd32x3::from([self[e3215], self[e35], self[e15]]) * other.group1().xxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e31] * self[e3]) + (other[e45] * self[e415]) + (other[e15] * self[e4]) + (other[e35] * self[e431]),
                (other[e12] * self[e1]) + (other[e45] * self[e425]) + (other[e15] * self[e412]) + (other[e25] * self[e4]),
                (other[e23] * self[e2]) + (other[e45] * self[e435]) + (other[e25] * self[e423]) + (other[e35] * self[e4]),
                -(other[e23] * self[e235]) - (other[e31] * self[e315]) - (other[e12] * self[e125]) - (other[e35] * self[e435]),
            ]) + (other.group0().yzx() * self.group8().zxy()).with_w(other[e45] * self[e5])
                - (Simd32x4::from([self[e2], self[e321], self[e321], self[e3]]) * other.group1().zyz().with_w(other[e35]))
                - (Simd32x4::from([self[e5], self[e125], self[e235], self[e1]]) * other.group0().xxy().with_w(other[e15]))
                - (Simd32x4::from([self[e321], self[e3], self[e1], self[e425]]) * other.group1().xxy().with_w(other[e25]))
                - (Simd32x4::from([self[e315], self[e5], self[e5], self[e415]]) * other.group0().zyz().with_w(other[e15]))
                - (other.group2().yzx() * self.group7().zxy()).with_w(other[e25] * self[e2]),
            // e1234
            (other[e41] * self[e1]) + (other[e42] * self[e2]) + (other[e43] * self[e3])
                - (other[e41] * self[e415])
                - (other[e42] * self[e425])
                - (other[e43] * self[e435])
                - (other[e23] * self[e423])
                - (other[e31] * self[e431])
                - (other[e12] * self[e412])
                - (other[e45] * self[e4]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      208      306        0
    //    simd2       22       22        0
    //    simd3      180      244        0
    //    simd4      162      112        0
    // Totals...
    // yes simd      572      684        0
    //  no simd     1440     1530        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (other[e3215] * self[e4])
                    - (other[e41] * self[e235])
                    - (other[e42] * self[e315])
                    - (other[e43] * self[e125])
                    - (other[e31] * self[e425])
                    - (other[e12] * self[e435])
                    - (other[e45] * self[e321])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412]),
                (other[e41] * self[e15])
                    + (other[e42] * self[e25])
                    + (other[e43] * self[e35])
                    + (other[e23] * self[e23])
                    + (other[e31] * self[e31])
                    + (other[e12] * self[e12])
                    + (other[e25] * self[e42])
                    + (other[e35] * self[e43])
                    - (other[e3215] * self[e1234]),
            ]) + (Simd32x2::from(other[e4235]) * Simd32x2::from([self[e1], self[e4235]]))
                + (Simd32x2::from(other[e4315]) * Simd32x2::from([self[e2], self[e4315]]))
                + (Simd32x2::from(other[e4125]) * Simd32x2::from([self[e3], self[e4125]]))
                + (Simd32x2::from([self[e5], self[e41]]) * other.group2().wx())
                - (Simd32x2::from([self[e415], self[e45]]) * other.group1().xw())
                - (Simd32x2::from([self[e423], self[e3215]]) * other.group2().xw()),
            // e1, e2, e3, e4
            Simd32x4::from([
                other[e1234] * self[e15] * -1.0,
                other[e1234] * self[e25] * -1.0,
                other[e1234] * self[e35] * -1.0,
                other[e45] * self[e1234],
            ]) + (Simd32x4::from([self[e45], self[e4125], self[e4235], other[e23]]) * other.group1().xxy().with_w(self[e41]))
                + (Simd32x4::from([self[e4315], self[e45], self[e45], other[e31]]) * other.group1().zyz().with_w(self[e42]))
                + (Simd32x4::from([self[e1234], self[e1234], self[e1234], other[e12]]) * other.group2().xyz().with_w(self[e43]))
                + (self.group0().xx().with_zw(self[scalar], other[e41]) * other.group3().xyz().with_w(self[e23]))
                + (other.group1().ww().with_zw(other[e4315], self[e12]) * self.group5().xyx().with_w(other[e43]))
                + (other.group2().zx().with_zw(other[e3215], self[e4315]) * self.group4().yzz().with_w(other[e42]))
                + (other.group3().zx().with_zw(other[e45], self[e4125]) * self.group5().yzz().with_w(other[e43]))
                + (other.group3().ww().with_zw(other[e25], self[e31]) * self.group4().xyx().with_w(other[e42]))
                + (other.group0().yzx() * self.group3().zxy()).with_w(other[e41] * self[e4235])
                - (Simd32x4::from([self[e25], self[e3215], self[e3215], other[e4235]]) * other.group0().zyz().with_w(self[e41]))
                - (Simd32x4::from([self[e3215], self[e35], self[e15], other[e1234]]) * other.group0().xxy().with_w(self[scalar]))
                - (other.group3().yzxz() * self.group5().zxy().with_w(self[e43]))
                - (self.group4().zxy() * other.group2().yzx()).with_w(other[e4315] * self[e42])
                - (other.group1().yzx() * self.group9().zxy()).with_w(other[e1234] * self[e45]),
            // e5
            (other[e23] * self[e15])
                + (other[e31] * self[e25])
                + (other[e12] * self[e35])
                + (other[e15] * self[e23])
                + (other[e25] * self[e31])
                + (other[e35] * self[e12])
                + (other[e4235] * self[e15])
                + (other[e4315] * self[e25])
                + (other[e4125] * self[e35])
                + (other[e3215] * self[e45])
                - (other[e45] * self[e3215])
                - (other[e15] * self[e4235])
                - (other[e25] * self[e4315])
                - (other[e35] * self[e4125])
                - (other[e3215] * self[scalar]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e4235] * self[e5]) + (other[e3215] * self[e1]) + (other[e3215] * self[e415]),
                (other[e4315] * self[e5]) + (other[e3215] * self[e2]) + (other[e3215] * self[e425]),
                (other[e4125] * self[e5]) + (other[e3215] * self[e3]) + (other[e3215] * self[e435]),
                -(other[e4235] * self[e415]) - (other[e4315] * self[e425]) - (other[e4125] * self[e435]),
            ]) + (Simd32x4::from(self[e12345]) * other.group2().xyz().with_w(other[e45]))
                + (Simd32x4::from([self[e2], self[e435], self[e415], self[e3]]) * other.group2().zxy().with_w(other[e12]))
                + (Simd32x4::from([self[e5], self[e5], self[e5], self[e1]]) * other.group1().xyzx())
                + (Simd32x4::from([self[e321], self[e3], self[e1], self[e2]]) * other.group2().xxy().with_w(other[e31]))
                + (other.group1().zx().with_zw(other[e4315], self[e315]) * self.group8().yzx().with_w(other[e42]))
                + (other.group3().zx().with_zw(other[e45], self[e125]) * self.group8().yzz().with_w(other[e43]))
                + (self.group8().xyx() * other.group1().wwy()).with_w(other[e41] * self[e235])
                + (other.group2().zyz() * self.group6().yww()).with_w(other[e3215] * self[e4])
                - (other.group2().yzxw() * self.group6().zxy().with_w(self[e5]))
                - (self.group8().zxy() * other.group1().yzx()).with_w(other[e15] * self[e423])
                - (self.group8().zxy() * other.group3().yzx()).with_w(other[e25] * self[e431])
                - (other.group2().yzx() * self.group1().zxy()).with_w(other[e35] * self[e412]),
            // e41, e42, e43
            (Simd32x3::from(other[e1234]) * self.group6().xyz())
                + (Simd32x3::from(self[e12345]) * other.group0())
                + (Simd32x3::from(self[e4]) * other.group1().xyz())
                + (Simd32x3::from([other[e12], other[e4125], other[e31]]) * self.group7().yxx())
                + (Simd32x3::from([other[e4315], other[e23], other[e4235]]) * self.group7().zzy())
                + (Simd32x3::from([self[e3], self[e435], self[e2]]) * other.group0().yxx())
                + (Simd32x3::from([self[e425], self[e1], self[e415]]) * other.group0().zzy())
                - (Simd32x3::from(other[e41]) * Simd32x3::from([self[e321], self[e3], self[e425]]))
                - (Simd32x3::from(other[e42]) * Simd32x3::from([self[e435], self[e321], self[e1]]))
                - (Simd32x3::from(other[e43]) * Simd32x3::from([self[e2], self[e415], self[e321]]))
                - (Simd32x3::from(other[e1234]) * self.group1().xyz())
                - (Simd32x3::from(self[e4]) * other.group3().xyz())
                - (Simd32x3::from(self[e423]) * Simd32x3::from([other[e45], other[e12], other[e4315]]))
                - (Simd32x3::from(self[e431]) * Simd32x3::from([other[e4125], other[e45], other[e23]]))
                - (Simd32x3::from(self[e412]) * Simd32x3::from([other[e31], other[e4235], other[e45]])),
            // e23, e31, e12
            (Simd32x3::from(other[e1234]) * self.group8())
                + (Simd32x3::from(self[e12345]) * other.group1().xyz())
                + (Simd32x3::from(self[e4]) * other.group2().xyz())
                + (Simd32x3::from([other[e35], other[e15], other[e3215]]) * self.group7().yzz())
                + (Simd32x3::from([other[e3215], other[e3215], other[e25]]) * self.group7().xyx())
                + (Simd32x3::from([self[e5], self[e125], self[e235]]) * other.group0().xxy())
                + (Simd32x3::from([self[e315], self[e5], self[e5]]) * other.group0().zyz())
                + (other.group1().zxy() * self.group6().yzx())
                + (other.group3().yzx() * self.group1().zxy())
                - (Simd32x3::from(other[e45]) * self.group1().xyz())
                - (Simd32x3::from([self[e2], self[e321], self[e321]]) * other.group3().zyz())
                - (Simd32x3::from([self[e321], self[e3], self[e1]]) * other.group3().xxy())
                - (other.group0().yzx() * self.group8().zxy())
                - (self.group7().zxy() * other.group2().yzx())
                - (other.group1().yzx() * self.group6().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                other[e4125] * self[e4315] * -1.0,
                other[e4315] * self[e45] * -1.0,
                other[e4125] * self[e45] * -1.0,
                other[e3215] * self[e1234],
            ]) + (other.group0().yzx() * self.group3().zxy()).with_w(other[e45] * self[scalar])
                + (self.group4().zxy() * other.group2().yzx()).with_w(other[e41] * self[e15])
                + (self.group5().zxy() * other.group1().yzx()).with_w(other[e42] * self[e25])
                + (other.group3().yzx() * self.group9().zxy()).with_w(other[e43] * self[e35])
                - (Simd32x4::from([self[e25], self[e3215], self[e3215], other[e35]]) * other.group0().zyz().with_w(self[e43]))
                - (Simd32x4::from([self[e45], self[e4125], self[e4235], self[e3215]]) * other.group3().xxy().with_w(other[e1234]))
                - (Simd32x4::from([self[e3215], self[e35], self[e15], other[e25]]) * other.group0().xxy().with_w(self[e42]))
                - (Simd32x4::from([self[e1234], self[e1234], self[e1234], self[e4315]]) * other.group2().xyz().with_w(other[e31]))
                - (other.group1().wwwx() * self.group9().xyzx())
                - (self.group0().xx().with_zw(self[scalar], self[e41]) * other.group1().xyz().with_w(other[e15]))
                - (other.group2().zx().with_zw(other[e3215], other[e4315]) * self.group4().yzz().with_w(self[e31]))
                - (other.group3().ww().with_zw(other[e25], other[e4235]) * self.group4().xyx().with_w(self[e23]))
                - (self.group5().yzx() * other.group1().zxy()).with_w(other[e4125] * self[e12])
                - (other.group2().www() * self.group3().xyz()).with_w(other[e12] * self[e4125]),
            // e423, e431, e412
            (Simd32x3::from(self[e41]) * Simd32x3::from([other[e45], other[e12], other[e4315]]))
                + (Simd32x3::from(self[e42]) * Simd32x3::from([other[e4125], other[e45], other[e23]]))
                + (Simd32x3::from(self[e43]) * Simd32x3::from([other[e31], other[e4235], other[e45]]))
                + (Simd32x3::from(self[e1234]) * other.group3().xyz())
                + (other.group0().yzx() * self.group5().zxy())
                + (other.group0().yzx() * self.group9().zxy())
                - (Simd32x3::from(other[e1234]) * self.group5())
                - (Simd32x3::from(other[e1234]) * self.group9().xyz())
                - (Simd32x3::from(self[scalar]) * other.group0())
                - (Simd32x3::from(self[e1234]) * other.group1().xyz())
                - (Simd32x3::from([other[e12], other[e4125], other[e31]]) * self.group4().yxx())
                - (Simd32x3::from([other[e4315], other[e23], other[e4235]]) * self.group4().zzy())
                - (Simd32x3::from([self[e45], self[e12], self[e23]]) * other.group0().xxy())
                - (Simd32x3::from([self[e31], self[e4125], self[e4235]]) * other.group0().zxy())
                - (Simd32x3::from([self[e4315], self[e45], self[e45]]) * other.group0().zyz()),
            // e235, e315, e125
            (Simd32x3::from(other[e3215]) * self.group9().xyz())
                + (Simd32x3::from([self[e45], self[e4125], self[e4235]]) * other.group2().xxy())
                + (Simd32x3::from([self[e4315], self[e45], self[e45]]) * other.group2().zyz())
                + (self.group5().zxy() * other.group2().yzx())
                + (other.group1().yzx() * self.group3().zxy())
                + (other.group3().yzx() * self.group3().zxy())
                - (Simd32x3::from(other[e45]) * self.group3().xyz())
                - (Simd32x3::from(self[scalar]) * other.group2().xyz())
                - (Simd32x3::from([other[e35], other[e15], other[e3215]]) * self.group5().yzz())
                - (Simd32x3::from([other[e3215], other[e3215], other[e25]]) * self.group5().xyx())
                - (Simd32x3::from([self[e25], self[e3215], self[e3215]]) * other.group1().zyz())
                - (Simd32x3::from([self[e25], self[e3215], self[e3215]]) * other.group3().zyz())
                - (Simd32x3::from([self[e3215], self[e35], self[e15]]) * other.group1().xxy())
                - (Simd32x3::from([self[e3215], self[e35], self[e15]]) * other.group3().xxy())
                - (other.group2().yzx() * self.group9().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e31] * self[e3]) + (other[e45] * self[e415]) + (other[e15] * self[e4]) + (other[e35] * self[e431]) + (other[e4125] * self[e425]),
                (other[e12] * self[e1]) + (other[e45] * self[e425]) + (other[e15] * self[e412]) + (other[e25] * self[e4]) + (other[e4235] * self[e435]),
                (other[e23] * self[e2]) + (other[e45] * self[e435]) + (other[e35] * self[e4]) + (other[e4315] * self[e415]) + (other[e3215] * self[e412]),
                -(other[e15] * self[e415]) - (other[e25] * self[e2]) - (other[e25] * self[e425]) - (other[e35] * self[e3]) - (other[e35] * self[e435]),
            ]) + (Simd32x4::from(self[e12345]) * other.group3())
                + (other.group3().ww().with_zw(other[e25], self[e321]) * self.group7().xyx().with_w(other[e3215]))
                + (other.group0().yzx() * self.group8().zxy()).with_w(other[e45] * self[e5])
                - (Simd32x4::from([self[e2], self[e321], self[e321], other[e4125]]) * other.group1().zyz().with_w(self[e125]))
                - (Simd32x4::from([self[e5], self[e125], self[e235], other[e23]]) * other.group0().xxy().with_w(self[e235]))
                - (Simd32x4::from([self[e321], self[e3], self[e1], other[e12]]) * other.group1().xxy().with_w(self[e125]))
                - (Simd32x4::from([self[e315], self[e5], self[e5], other[e4235]]) * other.group0().zyz().with_w(self[e235]))
                - (self.group8() * other.group2().www()).with_w(other[e4315] * self[e315])
                - (self.group7().zxy() * other.group2().yzx()).with_w(other[e31] * self[e315])
                - (other.group3().yzx() * self.group6().zxy()).with_w(other[e15] * self[e1]),
            // e1234
            (other[e41] * self[e1])
                + (other[e42] * self[e2])
                + (other[e43] * self[e3])
                + (other[e1234] * self[e12345])
                + (other[e4235] * self[e423])
                + (other[e4315] * self[e431])
                + (other[e4125] * self[e412])
                - (other[e41] * self[e415])
                - (other[e42] * self[e425])
                - (other[e43] * self[e435])
                - (other[e23] * self[e423])
                - (other[e31] * self[e431])
                - (other[e12] * self[e412])
                - (other[e45] * self[e4])
                - (other[e1234] * self[e321]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      142      212        0
    //    simd2       17       18        0
    //    simd3      128      175        0
    //    simd4      117       85        0
    // Totals...
    // yes simd      404      490        0
    //  no simd     1028     1113        0
    fn anti_sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from(other[e5]) * Simd32x2::from([self[e1234], self[e4]])) + (Simd32x2::from(other[e12345]) * self.group0()),
            // e1, e2, e3, e4
            ((Simd32x3::from(other[e12345]) * self.group1().xyz()) - (Simd32x3::from(other[e5]) * self.group7())).with_w(other[e12345] * self[e4]),
            // e5
            (other[e5] * self[e12345]) + (other[e5] * self[e321]) + (other[e12345] * self[e5]),
            // e15, e25, e35, e45
            Simd32x4::from([other[e5] * self[e4235] * -1.0, other[e5] * self[e4315] * -1.0, other[e5] * self[e4125] * -1.0, 0.0])
                + (Simd32x4::from(other[e5]) * self.group5().with_w(self[e1234]))
                + (Simd32x4::from(other[e12345]) * self.group3()),
            // e41, e42, e43
            Simd32x3::from(other[e12345]) * self.group4(),
            // e23, e31, e12
            (Simd32x3::from(other[e5]) * self.group4()) + (Simd32x3::from(other[e12345]) * self.group5()),
            // e415, e425, e435, e321
            Simd32x4::from([other[e12345] * self[e415], other[e12345] * self[e425], other[e12345] * self[e435], other[e5] * self[e4] * -1.0])
                + (other.group0().xx().with_zw(other[e5], other[e12345]) * self.group7().with_w(self[e321])),
            // e423, e431, e412
            Simd32x3::from(other[e12345]) * self.group7(),
            // e235, e315, e125
            (Simd32x3::from(other[e5]) * self.group1().xyz()) + (Simd32x3::from(other[e5]) * self.group6().xyz()) + (Simd32x3::from(other[e12345]) * self.group8()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other[e5]) * self.group4().with_w(self[scalar]))
                + (Simd32x4::from(other[e12345]) * self.group9())
                + Simd32x3::from(0.0).with_w(other[e5] * self[e45] * -1.0),
            // e1234
            other[e12345] * self[e1234],
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      166      240        0
    //    simd2       17       17        0
    //    simd3      136      189        0
    //    simd4      120       84        0
    // Totals...
    // yes simd      439      530        0
    //  no simd     1088     1177        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                -(other[e25] * self[e431]) - (other[e35] * self[e412]) - (other[e45] * self[e321]),
                (other[e15] * self[e41]) + (other[e25] * self[e42]) + (other[e35] * self[e43]),
            ]) - (Simd32x2::from([self[e423], self[e45]]) * other.group0().xw()),
            // e1, e2, e3, e4
            ((Simd32x3::from(other[e45]) * self.group5()) + (Simd32x3::from(self[e1234]) * other.group0().xyz()) + (self.group4().yzx() * other.group0().zxy())
                - (self.group4().zxy() * other.group0().yzx()))
            .with_w(other[e45] * self[e1234]),
            // e5
            (other[e15] * self[e23]) + (other[e25] * self[e31]) + (other[e35] * self[e12])
                - (other[e15] * self[e4235])
                - (other[e25] * self[e4315])
                - (other[e35] * self[e4125])
                - (other[e45] * self[e3215]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e15] * self[e321]) + (other[e35] * self[e2]) + (other[e35] * self[e425]) + (other[e45] * self[e235]),
                (other[e15] * self[e3]) + (other[e15] * self[e435]) + (other[e25] * self[e321]) + (other[e45] * self[e315]),
                (other[e25] * self[e1]) + (other[e25] * self[e415]) + (other[e35] * self[e321]) + (other[e45] * self[e125]),
                other[e35] * self[e412] * -1.0,
            ]) + (Simd32x4::from(self[e12345]) * other.group0())
                - (other.group0().yzx() * self.group1().zxy()).with_w(other[e15] * self[e423])
                - (other.group0().yzx() * self.group6().zxy()).with_w(other[e25] * self[e431]),
            // e41, e42, e43
            Simd32x3::from(other[e45]) * self.group7() * Simd32x3::from(-1.0),
            // e23, e31, e12
            (Simd32x3::from(self[e4]) * other.group0().xyz()) + (self.group7().yzx() * other.group0().zxy())
                - (Simd32x3::from(other[e45]) * self.group1().xyz())
                - (self.group7().zxy() * other.group0().yzx()),
            // e415, e425, e435, e321
            (other.group0().yzxw() * self.group4().zxy().with_w(self[scalar]))
                - (Simd32x4::from([self[e1234], self[e1234], self[e1234], other[e25]]) * other.group0().xyz().with_w(self[e42]))
                - (other.group0().zxyx() * self.group4().yzx().with_w(self[e41]))
                - (other.group0().www() * self.group9().xyz()).with_w(other[e35] * self[e43]),
            // e423, e431, e412
            Simd32x3::from(other[e45]) * self.group4(),
            // e235, e315, e125
            (Simd32x3::from([self[e45], self[e4125], self[e4235]]) * other.group0().xxy())
                + (Simd32x3::from([self[e4315], self[e45], self[e45]]) * other.group0().zyz())
                + (self.group5().zxy() * other.group0().yzx())
                - (Simd32x3::from(other[e45]) * self.group3().xyz())
                - (Simd32x3::from(self[scalar]) * other.group0().xyz())
                - (self.group5().yzx() * other.group0().zxy())
                - (other.group0().yzx() * self.group9().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e15] * self[e4]) + (other[e45] * self[e415]),
                (other[e25] * self[e4]) + (other[e45] * self[e425]),
                (other[e35] * self[e4]) + (other[e45] * self[e435]),
                -(other[e15] * self[e415]) - (other[e25] * self[e2]) - (other[e25] * self[e425]) - (other[e35] * self[e3]) - (other[e35] * self[e435]),
            ]) + (self.group7().yzx() * other.group0().zxy()).with_w(other[e45] * self[e5])
                - (self.group7().zxy() * other.group0().yzx()).with_w(other[e15] * self[e1]),
            // e1234
            other[e45] * self[e4] * -1.0,
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      204      282        0
    //    simd2       20       20        0
    //    simd3      148      201        0
    //    simd4      132       94        0
    // Totals...
    // yes simd      504      597        0
    //  no simd     1216     1301        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (other[e3215] * self[e4]) - (other[e25] * self[e431]) - (other[e35] * self[e412]) - (other[e45] * self[e321]),
                (other[e15] * self[e41]) + (other[e25] * self[e42]) + (other[e35] * self[e43]) - (other[e3215] * self[e1234]),
            ]) + (Simd32x2::from(other[e4235]) * Simd32x2::from([self[e1], self[e4235]]))
                + (Simd32x2::from(other[e4315]) * Simd32x2::from([self[e2], self[e4315]]))
                + (Simd32x2::from(other[e4125]) * Simd32x2::from([self[e3], self[e4125]]))
                - (Simd32x2::from([self[e423], self[e45]]) * other.group0().xw()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e15] * self[e1234]) + (other[e35] * self[e42]) + (other[e45] * self[e23]) + (other[e4125] * self[e31]) + (other[e3215] * self[e41]),
                (other[e15] * self[e43]) + (other[e25] * self[e1234]) + (other[e45] * self[e31]) + (other[e4235] * self[e12]) + (other[e3215] * self[e42]),
                (other[e25] * self[e41]) + (other[e35] * self[e1234]) + (other[e45] * self[e12]) + (other[e4315] * self[e23]) + (other[e3215] * self[e43]),
                other[e4125] * self[e43] * -1.0,
            ]) + (self.group0().xx().with_zw(self[scalar], other[e45]) * other.group1().xyz().with_w(self[e1234]))
                - (other.group1().yzxy() * self.group5().zxy().with_w(self[e42]))
                - (self.group4().zxy() * other.group0().yzx()).with_w(other[e4235] * self[e41]),
            // e5
            (other[e15] * self[e23])
                + (other[e25] * self[e31])
                + (other[e35] * self[e12])
                + (other[e4235] * self[e15])
                + (other[e4315] * self[e25])
                + (other[e4125] * self[e35])
                + (other[e3215] * self[e45])
                - (other[e15] * self[e4235])
                - (other[e25] * self[e4315])
                - (other[e35] * self[e4125])
                - (other[e45] * self[e3215])
                - (other[e3215] * self[scalar]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e15] * self[e321])
                    + (other[e35] * self[e2])
                    + (other[e35] * self[e425])
                    + (other[e4235] * self[e5])
                    + (other[e4125] * self[e315])
                    + (other[e3215] * self[e1])
                    + (other[e3215] * self[e415]),
                (other[e15] * self[e3])
                    + (other[e15] * self[e435])
                    + (other[e25] * self[e321])
                    + (other[e4235] * self[e125])
                    + (other[e4315] * self[e5])
                    + (other[e3215] * self[e2])
                    + (other[e3215] * self[e425]),
                (other[e25] * self[e1])
                    + (other[e25] * self[e415])
                    + (other[e35] * self[e321])
                    + (other[e45] * self[e125])
                    + (other[e4125] * self[e5])
                    + (other[e3215] * self[e3])
                    + (other[e3215] * self[e435]),
                -(other[e4235] * self[e415]) - (other[e4315] * self[e425]) - (other[e4125] * self[e435]),
            ]) + (Simd32x4::from(self[e12345]) * other.group0())
                + (other.group0().ww().with_zw(other[e4315], self[e4]) * self.group8().xyx().with_w(other[e3215]))
                - (self.group8().zxy() * other.group1().yzx()).with_w(other[e15] * self[e423])
                - (other.group0().yzx() * self.group1().zxy()).with_w(other[e25] * self[e431])
                - (other.group0().yzx() * self.group6().zxy()).with_w(other[e35] * self[e412]),
            // e41, e42, e43
            (self.group7().zxy() * other.group1().yzx())
                - (Simd32x3::from(self[e4]) * other.group1().xyz())
                - (Simd32x3::from([other[e45], other[e45], other[e4315]]) * self.group7().xyx())
                - (Simd32x3::from([other[e4125], other[e4235], other[e45]]) * self.group7().yzz()),
            // e23, e31, e12
            (Simd32x3::from(self[e4]) * other.group0().xyz())
                + (Simd32x3::from([other[e35], other[e15], other[e3215]]) * self.group7().yzz())
                + (Simd32x3::from([other[e3215], other[e3215], other[e25]]) * self.group7().xyx())
                + (other.group1().yzx() * self.group1().zxy())
                - (Simd32x3::from(other[e45]) * self.group1().xyz())
                - (Simd32x3::from([self[e2], self[e321], self[e321]]) * other.group1().zyz())
                - (Simd32x3::from([self[e321], self[e3], self[e1]]) * other.group1().xxy())
                - (self.group7().zxy() * other.group0().yzx()),
            // e415, e425, e435, e321
            (other.group0().yzxw() * self.group4().zxy().with_w(self[scalar])) + (other.group1().yzxw() * self.group9().zxy().with_w(self[e1234]))
                - (Simd32x4::from([self[e45], self[e4125], self[e4235], other[e4315]]) * other.group1().xxy().with_w(self[e31]))
                - (Simd32x4::from([self[e4315], self[e45], self[e45], other[e4125]]) * other.group1().zyz().with_w(self[e12]))
                - (Simd32x4::from([self[e1234], self[e1234], self[e1234], other[e35]]) * other.group0().xyz().with_w(self[e43]))
                - (other.group0().zx().with_zw(other[e3215], other[e25]) * self.group4().yzz().with_w(self[e42]))
                - (other.group1().ww().with_zw(other[e25], other[e15]) * self.group4().xyx().with_w(self[e41]))
                - (other.group0().www() * self.group9().xyz()).with_w(other[e4235] * self[e23]),
            // e423, e431, e412
            (Simd32x3::from(self[e1234]) * other.group1().xyz())
                + (Simd32x3::from([other[e45], other[e45], other[e4315]]) * self.group4().xyx())
                + (Simd32x3::from([other[e4125], other[e4235], other[e45]]) * self.group4().yzz())
                - (self.group4().zxy() * other.group1().yzx()),
            // e235, e315, e125
            (Simd32x3::from(other[e3215]) * self.group9().xyz())
                + (Simd32x3::from([self[e45], self[e4125], self[e4235]]) * other.group0().xxy())
                + (Simd32x3::from([self[e4315], self[e45], self[e45]]) * other.group0().zyz())
                + (self.group5().zxy() * other.group0().yzx())
                + (other.group1().yzx() * self.group3().zxy())
                - (Simd32x3::from(other[e45]) * self.group3().xyz())
                - (Simd32x3::from(self[scalar]) * other.group0().xyz())
                - (Simd32x3::from([other[e35], other[e15], other[e3215]]) * self.group5().yzz())
                - (Simd32x3::from([other[e3215], other[e3215], other[e25]]) * self.group5().xyx())
                - (Simd32x3::from([self[e25], self[e3215], self[e3215]]) * other.group1().zyz())
                - (Simd32x3::from([self[e3215], self[e35], self[e15]]) * other.group1().xxy())
                - (other.group0().yzx() * self.group9().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e15] * self[e4]) + (other[e45] * self[e415]) + (other[e4125] * self[e425]),
                (other[e25] * self[e4]) + (other[e45] * self[e425]) + (other[e4235] * self[e435]),
                (other[e35] * self[e4]) + (other[e45] * self[e435]) + (other[e4315] * self[e415]),
                -(other[e15] * self[e1])
                    - (other[e15] * self[e415])
                    - (other[e25] * self[e2])
                    - (other[e25] * self[e425])
                    - (other[e35] * self[e3])
                    - (other[e35] * self[e435])
                    - (other[e4125] * self[e125]),
            ]) + (Simd32x4::from(self[e12345]) * other.group1())
                + (other.group0().zx().with_zw(other[e3215], self[e321]) * self.group7().yzz().with_w(other[e3215]))
                + (other.group1().ww().with_zw(other[e25], self[e5]) * self.group7().xyx().with_w(other[e45]))
                - (self.group7().zxy() * other.group0().yzx()).with_w(other[e4235] * self[e235])
                - (other.group1().yzx() * self.group6().zxy()).with_w(other[e4315] * self[e315]),
            // e1234
            (other[e4235] * self[e423]) + (other[e4315] * self[e431]) + (other[e4125] * self[e412]) - (other[e45] * self[e4]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      172      251        0
    //    simd2       21       22        0
    //    simd3      141      194        0
    //    simd4      129       90        0
    // Totals...
    // yes simd      463      557        0
    //  no simd     1153     1237        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            -(Simd32x2::from(other[e415]) * Simd32x2::from([self[e23], self[e415]]))
                - (Simd32x2::from(other[e425]) * Simd32x2::from([self[e31], self[e425]]))
                - (Simd32x2::from(other[e435]) * Simd32x2::from([self[e12], self[e435]]))
                - (Simd32x2::from(other[e235]) * Simd32x2::from([self[e41], self[e423]]))
                - (Simd32x2::from(other[e315]) * Simd32x2::from([self[e42], self[e431]]))
                - (Simd32x2::from(other[e125]) * Simd32x2::from([self[e43], self[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e415] * self[e321]) + (other[e435] * self[e2]) + (other[e315] * self[e412]),
                (other[e415] * self[e3]) + (other[e425] * self[e321]) + (other[e125] * self[e423]),
                (other[e425] * self[e1]) + (other[e435] * self[e321]) + (other[e235] * self[e431]),
                0.0,
            ]) - (Simd32x4::from([self[e4], self[e412], self[e423], self[e431]]) * other.group1().xxy().with_w(other[e425]))
                - (Simd32x4::from([self[e431], self[e4], self[e4], self[e412]]) * other.group1().zyz().with_w(other[e435]))
                - (other.group0().yzx() * self.group1().zxy()).with_w(other[e415] * self[e423]),
            // e5
            -(other[e415] * self[e235])
                - (other[e425] * self[e315])
                - (other[e435] * self[e125])
                - (other[e235] * self[e1])
                - (other[e235] * self[e415])
                - (other[e315] * self[e2])
                - (other[e315] * self[e425])
                - (other[e125] * self[e3])
                - (other[e125] * self[e435]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e415] * self[e3215]) + (other[e435] * self[e25]) + (other[e235] * self[scalar]) + (other[e315] * self[e4125]) + (other[e125] * self[e31]),
                (other[e415] * self[e35]) + (other[e425] * self[e3215]) + (other[e235] * self[e12]) + (other[e315] * self[scalar]) + (other[e125] * self[e4235]),
                (other[e425] * self[e15]) + (other[e435] * self[e3215]) + (other[e235] * self[e4315]) + (other[e315] * self[e23]) + (other[e125] * self[scalar]),
                -(other[e315] * self[e42]) - (other[e125] * self[e43]),
            ]) - (Simd32x4::from([self[e45], self[e4125], self[e31], self[e4315]]) * other.group1().xxx().with_w(other[e425]))
                - (Simd32x4::from([self[e12], self[e45], self[e4235], self[e4125]]) * other.group1().yyy().with_w(other[e435]))
                - (Simd32x4::from([self[e4315], self[e23], self[e45], self[e41]]) * other.group1().zzz().with_w(other[e235]))
                - (other.group0().yzx() * self.group3().zxy()).with_w(other[e415] * self[e4235]),
            // e41, e42, e43
            (Simd32x3::from([self[e42], self[e1234], self[e1234]]) * other.group0().zyz()) + (Simd32x3::from([self[e1234], self[e43], self[e41]]) * other.group0().xxy())
                - (other.group0().yzx() * self.group4().zxy()),
            // e23, e31, e12
            (Simd32x3::from(self[scalar]) * other.group0())
                + (Simd32x3::from([self[e42], self[e1234], self[e1234]]) * other.group1().zyz())
                + (Simd32x3::from([self[e1234], self[e43], self[e41]]) * other.group1().xxy())
                + (other.group0().zxy() * self.group5().yzx())
                - (other.group0().yzx() * self.group5().zxy())
                - (other.group1().yzx() * self.group4().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([other[e125] * self[e431], other[e315] * self[e4], other[e125] * self[e4], other[e435] * self[e3] * -1.0])
                + (Simd32x4::from([self[e4], self[e412], self[e423], self[e412]]) * other.group1().xxy().with_w(other[e125]))
                + (self.group0().yy().with_zw(self[e12345], other[e235]) * other.group0().with_w(self[e423]))
                + (other.group0().zxy() * self.group6().yzx()).with_w(other[e315] * self[e431])
                - (other.group0().yzx() * self.group6().zxy()).with_w(other[e415] * self[e1])
                - (other.group1().yzx() * self.group7().zxy()).with_w(other[e425] * self[e2]),
            // e423, e431, e412
            (Simd32x3::from([self[e4], self[e412], self[e423]]) * other.group0().xxy()) + (Simd32x3::from([self[e431], self[e4], self[e4]]) * other.group0().zyz())
                - (other.group0().yzx() * self.group7().zxy()),
            // e235, e315, e125
            (Simd32x3::from(self[e12345]) * other.group1())
                + (Simd32x3::from([self[e2], self[e435], self[e415]]) * other.group1().zxy())
                + (Simd32x3::from([self[e5], self[e125], self[e235]]) * other.group0().xxy())
                + (Simd32x3::from([self[e321], self[e3], self[e1]]) * other.group1().xxy())
                + (Simd32x3::from([self[e315], self[e5], self[e5]]) * other.group0().zyz())
                + (other.group1().zyz() * self.group6().yww())
                - (other.group0().yzx() * self.group8().zxy())
                - (other.group1().yzx() * self.group1().zxy())
                - (other.group1().yzx() * self.group6().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e125] * self[e42],
                other[e315] * self[e1234],
                other[e125] * self[e1234],
                -(other[e435] * self[e35]) - (other[e235] * self[e23]) - (other[e315] * self[e31]) - (other[e125] * self[e12]),
            ]) + (Simd32x4::from([self[e45], self[e4125], self[e4235], self[e4235]]) * other.group0().xxy().with_w(other[e235]))
                + (Simd32x4::from([self[e4315], self[e45], self[e45], self[e4315]]) * other.group0().zyz().with_w(other[e315]))
                + (Simd32x4::from([self[e1234], self[e43], self[e41], self[e4125]]) * other.group1().xxy().with_w(other[e125]))
                - (other.group0().yzx() * self.group9().zxy()).with_w(other[e415] * self[e15])
                - (other.group1().yzx() * self.group4().zxy()).with_w(other[e425] * self[e25]),
            // e1234
            -(other[e415] * self[e41]) - (other[e425] * self[e42]) - (other[e435] * self[e43]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      183      264        0
    //    simd2       23       24        0
    //    simd3      148      203        0
    //    simd4      136       95        0
    // Totals...
    // yes simd      490      586        0
    //  no simd     1217     1301        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from(other[e12345]) * self.group0()) + (Simd32x2::from(other[e5]) * Simd32x2::from([self[e1234], self[e4]]))
                - (Simd32x2::from(other[e415]) * Simd32x2::from([self[e23], self[e415]]))
                - (Simd32x2::from(other[e425]) * Simd32x2::from([self[e31], self[e425]]))
                - (Simd32x2::from(other[e435]) * Simd32x2::from([self[e12], self[e435]]))
                - (Simd32x2::from(other[e235]) * Simd32x2::from([self[e41], self[e423]]))
                - (Simd32x2::from(other[e315]) * Simd32x2::from([self[e42], self[e431]]))
                - (Simd32x2::from(other[e125]) * Simd32x2::from([self[e43], self[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e415] * self[e321]) + (other[e435] * self[e2]) + (other[e12345] * self[e1]) - (other[e235] * self[e4]),
                (other[e415] * self[e3]) + (other[e425] * self[e321]) + (other[e12345] * self[e2]) - (other[e315] * self[e4]),
                (other[e425] * self[e1]) + (other[e435] * self[e321]) + (other[e12345] * self[e3]) - (other[e125] * self[e4]),
                0.0,
            ]) + (self.group7().zxy() * other.group1().yzx()).with_w(other[e12345] * self[e4])
                - (self.group7().xyx() * other.group1().wwy()).with_w(other[e415] * self[e423])
                - (self.group7().yzz() * other.group1().zxw()).with_w(other[e425] * self[e431])
                - (other.group0().yzx() * self.group1().zxy()).with_w(other[e435] * self[e412]),
            // e5
            (other[e12345] * self[e5]) + (other[e5] * self[e12345]) + (other[e5] * self[e321])
                - (other[e415] * self[e235])
                - (other[e425] * self[e315])
                - (other[e435] * self[e125])
                - (other[e235] * self[e1])
                - (other[e235] * self[e415])
                - (other[e315] * self[e2])
                - (other[e315] * self[e425])
                - (other[e125] * self[e3])
                - (other[e125] * self[e435]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e415] * self[e3215]) + (other[e435] * self[e25]) + (other[e12345] * self[e15]) + (other[e315] * self[e4125]) + (other[e125] * self[e31]),
                (other[e415] * self[e35]) + (other[e425] * self[e3215]) + (other[e12345] * self[e25]) + (other[e235] * self[e12]) + (other[e125] * self[e4235]),
                (other[e425] * self[e15]) + (other[e435] * self[e3215]) + (other[e12345] * self[e35]) + (other[e235] * self[e4315]) + (other[e5] * self[e12]),
                other[e435] * self[e4125] * -1.0,
            ]) + (self.group0().xx().with_zw(self[scalar], other[e12345]) * other.group1().xyz().with_w(self[e45]))
                + (self.group5().xyx() * other.group1().wwy()).with_w(other[e5] * self[e1234])
                - (Simd32x4::from([self[e45], self[e4125], self[e4235], other[e125]]) * other.group1().xxy().with_w(self[e43]))
                - (Simd32x4::from([self[e4315], self[e45], self[e45], self[e4235]]) * other.group1().zyz().with_w(other[e415]))
                - (other.group1().yzxx() * self.group5().zxy().with_w(self[e41]))
                - (self.group9().xyzy() * other.group1().www().with_w(other[e425]))
                - (other.group0().yzx() * self.group3().zxy()).with_w(other[e315] * self[e42]),
            // e41, e42, e43
            (Simd32x3::from(self[e1234]) * other.group0().xyz()) + (self.group4().xyx() * other.group0().wwy()) + (self.group4().yzz() * other.group0().zxw())
                - (self.group4().zxy() * other.group0().yzx()),
            // e23, e31, e12
            (Simd32x3::from(self[scalar]) * other.group0().xyz())
                + (Simd32x3::from(self[e1234]) * other.group1().xyz())
                + (self.group4().xyx() * other.group1().wwy())
                + (self.group4().yzz() * other.group1().zxw())
                + (self.group5().xyx() * other.group0().wwy())
                + (self.group5().yzz() * other.group0().zxw())
                - (self.group4().zxy() * other.group1().yzx())
                - (self.group5().zxy() * other.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e12345] * self[e415]) + (other[e235] * self[e4]),
                (other[e12345] * self[e425]) + (other[e315] * self[e4]),
                (other[e12345] * self[e435]) + (other[e125] * self[e4]),
                -(other[e435] * self[e3]) - (other[e5] * self[e4]),
            ]) + (other.group0().zxyw() * self.group6().yzxw())
                + (other.group1().zxwz() * self.group7().yzz().with_w(self[e412]))
                + (other.group1().wwyy() * self.group7().xyx().with_w(self[e431]))
                + (self.group0().yy().with_zw(self[e12345], self[e423]) * other.group0().xyz().with_w(other[e235]))
                - (other.group0().yzxy() * self.group6().zxy().with_w(self[e2]))
                - (self.group7().zxy() * other.group1().yzx()).with_w(other[e415] * self[e1]),
            // e423, e431, e412
            (Simd32x3::from(self[e4]) * other.group0().xyz()) + (self.group7().xyx() * other.group0().wwy()) + (self.group7().yzz() * other.group0().zxw())
                - (self.group7().zxy() * other.group0().yzx()),
            // e235, e315, e125
            (Simd32x3::from(other[e5]) * self.group1().xyz())
                + (Simd32x3::from(other[e5]) * self.group6().xyz())
                + (Simd32x3::from(self[e12345]) * other.group1().xyz())
                + (Simd32x3::from(self[e5]) * other.group0().xyz())
                + (Simd32x3::from([self[e2], self[e435], self[e415]]) * other.group1().zxy())
                + (Simd32x3::from([self[e321], self[e3], self[e1]]) * other.group1().xxy())
                + (self.group8().xyx() * other.group0().wwy())
                + (self.group8().yzz() * other.group0().zxw())
                + (other.group1().zyz() * self.group6().yww())
                - (self.group8().zxy() * other.group0().yzx())
                - (other.group1().yzx() * self.group1().zxy())
                - (other.group1().yzx() * self.group6().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e235] * self[e1234],
                other[e315] * self[e1234],
                other[e125] * self[e1234],
                -(other[e415] * self[e15]) - (other[e425] * self[e25]) - (other[e435] * self[e35]) - (other[e125] * self[e12]) - (other[e5] * self[e45]),
            ]) + (Simd32x4::from([self[e45], self[e4125], self[e4235], self[e4235]]) * other.group0().xxy().with_w(other[e235]))
                + (Simd32x4::from([self[e4315], self[e45], self[e45], self[e4315]]) * other.group0().zyz().with_w(other[e315]))
                + (other.group1().wwyw() * self.group4().xyx().with_w(self[scalar]))
                + (self.group9().xyzz() * other.group0().www().with_w(other[e125]))
                + (self.group4().yzz() * other.group1().zxw()).with_w(other[e12345] * self[e3215])
                - (other.group1().yzxx() * self.group4().zxy().with_w(self[e23]))
                - (other.group0().yzx() * self.group9().zxy()).with_w(other[e315] * self[e31]),
            // e1234
            (other[e12345] * self[e1234]) - (other[e415] * self[e41]) - (other[e425] * self[e42]) - (other[e435] * self[e43]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      280      388        0
    //    simd2       32       32        0
    //    simd3      248      328        0
    //    simd4      224      158        0
    // Totals...
    // yes simd      784      906        0
    //  no simd     1984     2068        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (other[e12345] * self[scalar])
                    + (other[e5] * self[e1234])
                    + (other[e4315] * self[e2])
                    + (other[e4125] * self[e3])
                    + (other[e3215] * self[e4])
                    + (other[e1234] * self[e5])
                    - (other[e15] * self[e423])
                    - (other[e25] * self[e431])
                    - (other[e35] * self[e412])
                    - (other[e45] * self[e321])
                    - (other[e415] * self[e23])
                    - (other[e425] * self[e31])
                    - (other[e435] * self[e12])
                    - (other[e321] * self[e45])
                    - (other[e431] * self[e25])
                    - (other[e412] * self[e35]),
                (other[e15] * self[e41])
                    + (other[e25] * self[e42])
                    + (other[e35] * self[e43])
                    + (other[e41] * self[e15])
                    + (other[e42] * self[e25])
                    + (other[e43] * self[e35])
                    + (other[e23] * self[e23])
                    + (other[e31] * self[e31])
                    + (other[e12] * self[e12])
                    + (other[e321] * self[e321])
                    - (other[scalar] * self[scalar])
                    - (other[e1] * self[e1])
                    - (other[e2] * self[e2])
                    - (other[e3] * self[e3])
                    - (other[e3215] * self[e1234])
                    - (other[e1234] * self[e3215]),
            ]) + (Simd32x2::from(self[e12345]) * other.group0())
                + (Simd32x2::from([other[e2], other[e4235]]) * self.group9().yx())
                + (Simd32x2::from([other[e3], other[e4315]]) * self.group9().zy())
                + (Simd32x2::from([other[e4], other[e4125]]) * self.group9().wz())
                + (Simd32x2::from([other[e4235], other[e5]]) * self.group1().xw())
                + (Simd32x2::from([self[e4235], self[e5]]) * other.group1().xw())
                - (Simd32x2::from(other[e235]) * Simd32x2::from([self[e41], self[e423]]))
                - (Simd32x2::from(other[e315]) * Simd32x2::from([self[e42], self[e431]]))
                - (Simd32x2::from(other[e125]) * Simd32x2::from([self[e43], self[e412]]))
                - (Simd32x2::from(self[e415]) * Simd32x2::from([other[e23], other[e415]]))
                - (Simd32x2::from(self[e425]) * Simd32x2::from([other[e31], other[e425]]))
                - (Simd32x2::from(self[e435]) * Simd32x2::from([other[e12], other[e435]]))
                - (Simd32x2::from(self[e235]) * Simd32x2::from([other[e41], other[e423]]))
                - (Simd32x2::from(self[e315]) * Simd32x2::from([other[e42], other[e431]]))
                - (Simd32x2::from(self[e125]) * Simd32x2::from([other[e43], other[e412]]))
                - (Simd32x2::from([other[e423], other[e45]]) * self.group3().xw()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e15] * self[e1234]) + (other[e415] * self[e321]) + (other[e435] * self[e2]) + (other[e321] * self[e415]),
                (other[e25] * self[e1234]) + (other[e415] * self[e3]) + (other[e425] * self[e321]) + (other[e321] * self[e425]),
                (other[e35] * self[e1234]) + (other[e425] * self[e1]) + (other[e435] * self[e321]) + (other[e321] * self[e435]),
                -(other[e3] * self[e412]) - (other[e4] * self[e321]) - (other[e435] * self[e412]) - (other[e1234] * self[e45]),
            ]) + (Simd32x4::from([self[e5], self[e125], self[e235], self[e4125]]) * other.group7().xxy().with_w(other[e43]))
                + (Simd32x4::from([self[e45], self[e4125], self[e4235], self[e4315]]) * other.group5().xxy().with_w(other[e42]))
                + (Simd32x4::from([self[e315], self[e5], self[e5], self[e41]]) * other.group7().zyz().with_w(other[e23]))
                + (Simd32x4::from([self[e4315], self[e45], self[e45], self[e12]]) * other.group5().zyz().with_w(other[e43]))
                + (other.group0().xx().with_zw(other[scalar], other[e12345]) * self.group9().xyz().with_w(self[e4]))
                + (other.group0().yy().with_zw(other[e12345], self[e12345]) * self.group1().xyz().with_w(other[e4]))
                + (self.group0().xx().with_zw(self[scalar], other[e41]) * other.group9().xyz().with_w(self[e23]))
                + (self.group0().yy().with_zw(self[e12345], other[e41]) * other.group1().xyz().with_w(self[e4235]))
                + (other.group3().zx().with_zw(other[e3215], self[e1]) * self.group4().yzz().with_w(other[e423]))
                + (other.group3().ww().with_zw(other[e4315], self[e2]) * self.group5().xyx().with_w(other[e431]))
                + (other.group9().zx().with_zw(other[e45], self[e3]) * self.group5().yzz().with_w(other[e412]))
                + (other.group9().ww().with_zw(other[e25], self[e43]) * self.group4().xyx().with_w(other[e12]))
                + (self.group8() * other.group1().www()).with_w(other[e45] * self[e1234])
                + (other.group4().yzx() * self.group3().zxy()).with_w(other[e42] * self[e31])
                + (other.group8().yzx() * self.group7().zxy()).with_w(other[e31] * self[e42])
                + (other.group1().zxy() * self.group6().yzx()).with_w(other[e321] * self[e4])
                - (Simd32x4::from([other[e5], other[e5], other[e5], other[e1]]) * self.group7().with_w(self[e423]))
                - (Simd32x4::from([other[e1234], other[e1234], other[e1234], other[e425]]) * self.group3().xyz().with_w(self[e431]))
                - (Simd32x4::from([self[e4], self[e412], self[e423], self[e435]]) * other.group8().xxy().with_w(other[e412]))
                - (Simd32x4::from([self[e25], self[e3215], self[e3215], other[e1234]]) * other.group4().zyz().with_w(self[scalar]))
                - (Simd32x4::from([self[e431], self[e4], self[e4], other[e4235]]) * other.group8().zyz().with_w(self[e41]))
                - (Simd32x4::from([self[e3215], self[e35], self[e15], self[e1234]]) * other.group4().xxy().with_w(other[scalar]))
                - (other.group9().yzxz() * self.group5().zxy().with_w(self[e43]))
                - (other.group5().yzx() * self.group9().zxy()).with_w(other[e423] * self[e415])
                - (other.group7().yzx() * self.group8().zxy()).with_w(other[e431] * self[e425])
                - (self.group4().zxy() * other.group3().yzx()).with_w(other[e4315] * self[e42])
                - (other.group1().yzx() * self.group6().zxy()).with_w(other[e415] * self[e423])
                - (other.group6().yzx() * self.group1().zxy()).with_w(other[e2] * self[e431]),
            // e5
            (other[e12345] * self[e5])
                + (other[e1] * self[e235])
                + (other[e2] * self[e315])
                + (other[e3] * self[e125])
                + (other[e5] * self[e12345])
                + (other[e5] * self[e321])
                + (other[e15] * self[e23])
                + (other[e25] * self[e31])
                + (other[e35] * self[e12])
                + (other[e23] * self[e15])
                + (other[e31] * self[e25])
                + (other[e12] * self[e35])
                + (other[e4235] * self[e15])
                + (other[e4315] * self[e25])
                + (other[e4125] * self[e35])
                + (other[e3215] * self[e45])
                - (other[scalar] * self[e3215])
                - (other[e15] * self[e4235])
                - (other[e25] * self[e4315])
                - (other[e35] * self[e4125])
                - (other[e45] * self[e3215])
                - (other[e415] * self[e235])
                - (other[e425] * self[e315])
                - (other[e435] * self[e125])
                - (other[e321] * self[e5])
                - (other[e235] * self[e1])
                - (other[e235] * self[e415])
                - (other[e315] * self[e2])
                - (other[e315] * self[e425])
                - (other[e125] * self[e3])
                - (other[e125] * self[e435])
                - (other[e3215] * self[scalar]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e435] * self[e25]) + (other[e4235] * self[e5]) + (other[e3215] * self[e1]) + (other[e3215] * self[e415]),
                (other[e425] * self[e3215]) + (other[e4315] * self[e5]) + (other[e3215] * self[e2]) + (other[e3215] * self[e425]),
                (other[e435] * self[e3215]) + (other[e4125] * self[e5]) + (other[e3215] * self[e3]) + (other[e3215] * self[e435]),
                -(other[e4235] * self[e415]) - (other[e4315] * self[e425]) - (other[e4125] * self[e435]) - (other[e1234] * self[e5]),
            ]) + (Simd32x4::from([other[e5], other[e5], other[e5], self[e15]]) * self.group5().with_w(other[e423]))
                + (Simd32x4::from([self[e2], self[e435], self[e415], other[e3]]) * other.group3().zxy().with_w(self[e12]))
                + (Simd32x4::from([self[e5], self[e125], self[e235], self[e125]]) * other.group5().xxy().with_w(other[e43]))
                + (Simd32x4::from([self[e31], self[e4235], self[e23], self[e3]]) * other.group8().zzy().with_w(other[e12]))
                + (Simd32x4::from([self[e321], self[e3], self[e1], other[e2]]) * other.group3().xxy().with_w(self[e31]))
                + (Simd32x4::from([self[e315], self[e5], self[e5], self[e1]]) * other.group5().zyz().with_w(other[e23]))
                + (Simd32x4::from([self[e4125], self[e12], self[e4315], self[e2]]) * other.group8().yxx().with_w(other[e31]))
                + (Simd32x4::from([self[e3215], self[e35], self[e15], self[e1234]]) * other.group6().xxy().with_w(other[e5]))
                + (other.group0().xx().with_zw(other[scalar], other[e12345]) * self.group8().with_w(self[e45]))
                + (other.group0().yy().with_zw(other[e12345], self[e12345]) * self.group3().xyz().with_w(other[e45]))
                + (self.group0().xx().with_zw(self[scalar], other[e41]) * other.group8().with_w(self[e235]))
                + (self.group0().yy().with_zw(self[e12345], other[e42]) * other.group3().xyz().with_w(self[e315]))
                + (other.group3().ww().with_zw(other[e4315], self[e25]) * self.group8().xyx().with_w(other[e431]))
                + (other.group9().zx().with_zw(other[e45], self[e35]) * self.group8().yzz().with_w(other[e412]))
                + (other.group1().yzx() * self.group3().zxy()).with_w(other[e1] * self[e23])
                + (other.group3().zyz() * self.group6().yww()).with_w(other[e3215] * self[e4])
                - (Simd32x4::from([other[e5], other[e5], other[e5], self[e4125]]) * self.group9().xyz().with_w(other[e435]))
                - (Simd32x4::from([self[e25], self[e3215], self[e3215], other[e25]]) * other.group1().zyz().with_w(self[e431]))
                - (Simd32x4::from([self[e45], self[e4125], self[e31], other[e321]]) * other.group8().xxx().with_w(self[scalar]))
                - (Simd32x4::from([self[e12], self[e45], self[e4235], self[e41]]) * other.group8().yyy().with_w(other[e235]))
                - (Simd32x4::from([self[e4315], self[e23], self[e45], self[e42]]) * other.group8().zzz().with_w(other[e315]))
                - (Simd32x4::from([self[e3215], self[e35], self[e15], other[e15]]) * other.group1().xxy().with_w(self[e423]))
                - (other.group6().yzxx() * self.group3().zxy().with_w(self[e4235]))
                - (other.group6().wwwy() * self.group3().xyz().with_w(self[e4315]))
                - (other.group5().yzx() * self.group8().zxy()).with_w(other[scalar] * self[e321])
                - (self.group8().zxy() * other.group9().yzx()).with_w(other[e125] * self[e43])
                - (other.group3().yzx() * self.group1().zxy()).with_w(other[e35] * self[e412])
                - (other.group3().yzx() * self.group6().zxy()).with_w(other[e4] * self[e3215]),
            // e41, e42, e43
            (Simd32x3::from(other[scalar]) * self.group7())
                + (Simd32x3::from(other[e12345]) * self.group4())
                + (Simd32x3::from(other[e4]) * self.group5())
                + (Simd32x3::from(other[e4]) * self.group9().xyz())
                + (Simd32x3::from(other[e1234]) * self.group6().xyz())
                + (Simd32x3::from(self[scalar]) * other.group7())
                + (Simd32x3::from(self[e12345]) * other.group4())
                + (Simd32x3::from(self[e1234]) * other.group1().xyz())
                + (Simd32x3::from(self[e1234]) * other.group6().xyz())
                + (Simd32x3::from([other[e3], other[e1], other[e425]]) * self.group4().yzx())
                + (Simd32x3::from([other[e321], other[e321], other[e2]]) * self.group4().xyx())
                + (Simd32x3::from([self[e3], self[e435], self[e2]]) * other.group4().yxx())
                + (Simd32x3::from([self[e4], self[e412], self[e423]]) * other.group5().xxy())
                + (Simd32x3::from([self[e45], self[e12], self[e23]]) * other.group7().xxy())
                + (Simd32x3::from([self[e31], self[e4125], self[e4235]]) * other.group7().zxy())
                + (Simd32x3::from([self[e425], self[e1], self[e415]]) * other.group4().zzy())
                + (Simd32x3::from([self[e431], self[e4], self[e4]]) * other.group5().zyz())
                + (Simd32x3::from([self[e4315], self[e45], self[e45]]) * other.group7().zyz())
                + (self.group4().yzz() * other.group6().zxw())
                + (self.group7().zxy() * other.group9().yzx())
                - (Simd32x3::from(other[e41]) * Simd32x3::from([self[e321], self[e3], self[e425]]))
                - (Simd32x3::from(other[e42]) * Simd32x3::from([self[e435], self[e321], self[e1]]))
                - (Simd32x3::from(other[e43]) * Simd32x3::from([self[e2], self[e415], self[e321]]))
                - (Simd32x3::from(other[e1234]) * self.group1().xyz())
                - (Simd32x3::from(self[e4]) * other.group9().xyz())
                - (Simd32x3::from([other[e45], other[e45], other[e4315]]) * self.group7().xyx())
                - (Simd32x3::from([other[e4125], other[e4235], other[e45]]) * self.group7().yzz())
                - (other.group5().yzx() * self.group7().zxy())
                - (other.group7().yzx() * self.group5().zxy())
                - (other.group7().yzx() * self.group9().zxy())
                - (self.group4().zxy() * other.group1().yzx())
                - (self.group4().zxy() * other.group6().yzx()),
            // e23, e31, e12
            (Simd32x3::from(other[scalar]) * self.group6().xyz())
                + (Simd32x3::from(other[e12345]) * self.group5())
                + (Simd32x3::from(other[e4]) * self.group3().xyz())
                + (Simd32x3::from(other[e5]) * self.group4())
                + (Simd32x3::from(other[e1234]) * self.group8())
                + (Simd32x3::from(self[scalar]) * other.group6().xyz())
                + (Simd32x3::from(self[e12345]) * other.group5())
                + (Simd32x3::from(self[e4]) * other.group3().xyz())
                + (Simd32x3::from([other[e35], other[e15], other[e3215]]) * self.group7().yzz())
                + (Simd32x3::from([other[e3215], other[e3215], other[e25]]) * self.group7().xyx())
                + (Simd32x3::from([self[e5], self[e125], self[e235]]) * other.group4().xxy())
                + (Simd32x3::from([self[e25], self[e3215], self[e3215]]) * other.group7().zyz())
                + (Simd32x3::from([self[e42], self[e1234], self[e1234]]) * other.group8().zyz())
                + (Simd32x3::from([self[e315], self[e5], self[e5]]) * other.group4().zyz())
                + (Simd32x3::from([self[e3215], self[e35], self[e15]]) * other.group7().xxy())
                + (Simd32x3::from([self[e1234], self[e43], self[e41]]) * other.group8().xxy())
                + (other.group5().zxy() * self.group6().yzx())
                + (self.group5().yzx() * other.group6().zxy())
                + (other.group1().yzx() * self.group9().zxy())
                + (other.group9().yzx() * self.group1().zxy())
                - (Simd32x3::from(other[e45]) * self.group1().xyz())
                - (Simd32x3::from(other[e321]) * self.group9().xyz())
                - (Simd32x3::from([self[e2], self[e321], self[e321]]) * other.group9().zyz())
                - (Simd32x3::from([self[e45], self[e4125], self[e4235]]) * other.group1().xxy())
                - (Simd32x3::from([self[e321], self[e3], self[e1]]) * other.group9().xxy())
                - (Simd32x3::from([self[e4315], self[e45], self[e45]]) * other.group1().zyz())
                - (other.group4().yzx() * self.group8().zxy())
                - (other.group5().yzx() * self.group6().zxy())
                - (other.group7().yzx() * self.group3().zxy())
                - (other.group8().yzx() * self.group4().zxy())
                - (self.group5().zxy() * other.group6().yzx())
                - (self.group7().zxy() * other.group3().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e3] * self[e2]) + (other[e435] * self[e425]) + (other[e321] * self[e1]) + (other[e4315] * self[e4125]),
                (other[e2] * self[e321]) + (other[e415] * self[e435]) + (other[e321] * self[e2]) + (other[e4125] * self[e4235]),
                (other[e3] * self[e321]) + (other[e425] * self[e415]) + (other[e321] * self[e3]) + (other[e4235] * self[e4315]),
                -(other[e5] * self[e4]) - (other[e425] * self[e2]) - (other[e435] * self[e3]) - (other[e1234] * self[e3215]),
            ]) + (Simd32x4::from([other[e5], other[e5], other[e5], self[e412]]) * self.group7().with_w(other[e125]))
                + (Simd32x4::from([self[e4], self[e412], self[e423], self[e35]]) * other.group8().xxy().with_w(other[e43]))
                + (Simd32x4::from([self[e5], self[e125], self[e235], self[e15]]) * other.group7().xxy().with_w(other[e41]))
                + (Simd32x4::from([self[e321], self[e3], self[e1], self[e1234]]) * other.group1().xxy().with_w(other[e3215]))
                + (Simd32x4::from([self[e431], self[e4], self[e4], self[e423]]) * other.group8().zyz().with_w(other[e235]))
                + (Simd32x4::from([self[e315], self[e5], self[e5], self[e25]]) * other.group7().zyz().with_w(other[e42]))
                + (other.group0().yy().with_zw(other[e12345], other[scalar]) * self.group6().xyz().with_w(self[e45]))
                + (self.group0().yy().with_zw(self[e12345], other[e12345]) * other.group6().xyz().with_w(self[e321]))
                + (self.group8() * other.group1().www()).with_w(other[e4] * self[e5])
                + (other.group4().yzx() * self.group3().zxy()).with_w(other[e45] * self[scalar])
                + (other.group5().yzx() * self.group5().zxy()).with_w(other[e321] * self[e12345])
                + (self.group4().zxy() * other.group3().yzx()).with_w(other[e315] * self[e431])
                - (Simd32x4::from([other[e1234], other[e1234], other[e1234], self[e1]]) * self.group3().xyz().with_w(other[e415]))
                - (Simd32x4::from([self[e25], self[e3215], self[e3215], self[e235]]) * other.group4().zyz().with_w(other[e423]))
                - (Simd32x4::from([self[e45], self[e4125], self[e4235], self[e425]]) * other.group9().xxy().with_w(other[e2]))
                - (Simd32x4::from([self[e4315], self[e45], self[e45], self[e435]]) * other.group9().zyz().with_w(other[e3]))
                - (Simd32x4::from([self[e3215], self[e35], self[e15], self[e4125]]) * other.group4().xxy().with_w(other[e12]))
                - (Simd32x4::from([self[e1234], self[e1234], self[e1234], other[e4315]]) * other.group3().xyz().with_w(self[e31]))
                - (self.group6().zxyx() * other.group6().yzx().with_w(other[e1]))
                - (other.group0().xx().with_zw(other[scalar], other[e23]) * self.group5().with_w(self[e4235]))
                - (self.group0().xx().with_zw(self[scalar], other[e31]) * other.group5().with_w(self[e4315]))
                - (other.group3().zx().with_zw(other[e3215], other[e35]) * self.group4().yzz().with_w(self[e43]))
                - (other.group9().ww().with_zw(other[e25], other[e25]) * self.group4().xyx().with_w(self[e42]))
                - (other.group5().zxy() * self.group5().yzx()).with_w(other[e431] * self[e315])
                - (other.group7().yzx() * self.group8().zxy()).with_w(other[e412] * self[e125])
                - (other.group8().yzx() * self.group7().zxy()).with_w(other[e15] * self[e41])
                - (other.group1().yzx() * self.group1().zxy()).with_w(other[e4235] * self[e23])
                - (other.group3().www() * self.group9().xyz()).with_w(other[e4125] * self[e12]),
            // e423, e431, e412
            (Simd32x3::from(other[e12345]) * self.group7())
                + (Simd32x3::from(other[e4]) * self.group6().xyz())
                + (Simd32x3::from(self[e12345]) * other.group7())
                + (Simd32x3::from(self[e4]) * other.group1().xyz())
                + (Simd32x3::from(self[e4]) * other.group6().xyz())
                + (Simd32x3::from(self[e1234]) * other.group9().xyz())
                + (Simd32x3::from([other[e3], other[e1], other[e425]]) * self.group7().yzx())
                + (Simd32x3::from([other[e45], other[e45], other[e4315]]) * self.group4().xyx())
                + (Simd32x3::from([other[e321], other[e321], other[e2]]) * self.group7().xyx())
                + (Simd32x3::from([other[e4125], other[e4235], other[e45]]) * self.group4().yzz())
                + (Simd32x3::from([self[e3], self[e435], self[e2]]) * other.group7().yxx())
                + (Simd32x3::from([self[e425], self[e1], self[e415]]) * other.group7().zzy())
                + (other.group4().yzx() * self.group5().zxy())
                + (other.group4().yzx() * self.group9().zxy())
                + (other.group5().yzx() * self.group4().zxy())
                + (self.group7().yzz() * other.group6().zxw())
                - (Simd32x3::from(other[scalar]) * self.group4())
                - (Simd32x3::from(other[e4]) * self.group1().xyz())
                - (Simd32x3::from(other[e423]) * Simd32x3::from([self[e321], self[e3], self[e425]]))
                - (Simd32x3::from(other[e431]) * Simd32x3::from([self[e435], self[e321], self[e1]]))
                - (Simd32x3::from(other[e412]) * Simd32x3::from([self[e2], self[e415], self[e321]]))
                - (Simd32x3::from(other[e1234]) * self.group5())
                - (Simd32x3::from(other[e1234]) * self.group9().xyz())
                - (Simd32x3::from(self[scalar]) * other.group4())
                - (Simd32x3::from([self[e45], self[e12], self[e23]]) * other.group4().xxy())
                - (Simd32x3::from([self[e42], self[e1234], self[e1234]]) * other.group5().zyz())
                - (Simd32x3::from([self[e31], self[e4125], self[e4235]]) * other.group4().zxy())
                - (Simd32x3::from([self[e4315], self[e45], self[e45]]) * other.group4().zyz())
                - (Simd32x3::from([self[e1234], self[e43], self[e41]]) * other.group5().xxy())
                - (self.group4().zxy() * other.group9().yzx())
                - (self.group7().zxy() * other.group1().yzx())
                - (self.group7().zxy() * other.group6().yzx()),
            // e235, e315, e125
            (Simd32x3::from(other[e12345]) * self.group8())
                + (Simd32x3::from(other[e5]) * self.group1().xyz())
                + (Simd32x3::from(other[e5]) * self.group6().xyz())
                + (Simd32x3::from(other[e3215]) * self.group9().xyz())
                + (Simd32x3::from(self[e12345]) * other.group8())
                + (Simd32x3::from(self[e5]) * other.group6().xyz())
                + (Simd32x3::from([other[e2], other[e415], other[e1]]) * self.group8().zzy())
                + (Simd32x3::from([other[e435], other[e3], other[e425]]) * self.group8().yxx())
                + (Simd32x3::from([self[e2], self[e435], self[e415]]) * other.group8().zxy())
                + (Simd32x3::from([self[e45], self[e4125], self[e4235]]) * other.group3().xxy())
                + (Simd32x3::from([self[e321], self[e3], self[e1]]) * other.group8().xxy())
                + (Simd32x3::from([self[e4315], self[e45], self[e45]]) * other.group3().zyz())
                + (other.group5().yzx() * self.group3().zxy())
                + (other.group8().zyz() * self.group6().yww())
                + (self.group5().zxy() * other.group3().yzx())
                + (other.group9().yzx() * self.group3().zxy())
                - (Simd32x3::from(other[scalar]) * self.group3().xyz())
                - (Simd32x3::from(other[e45]) * self.group3().xyz())
                - (Simd32x3::from(self[scalar]) * other.group3().xyz())
                - (Simd32x3::from(self[e5]) * other.group1().xyz())
                - (Simd32x3::from(self[e235]) * Simd32x3::from([other[e321], other[e435], other[e2]]))
                - (Simd32x3::from(self[e315]) * Simd32x3::from([other[e3], other[e321], other[e415]]))
                - (Simd32x3::from(self[e125]) * Simd32x3::from([other[e425], other[e1], other[e321]]))
                - (Simd32x3::from([other[e35], other[e15], other[e3215]]) * self.group5().yzz())
                - (Simd32x3::from([other[e3215], other[e3215], other[e25]]) * self.group5().xyx())
                - (Simd32x3::from([self[e25], self[e3215], self[e3215]]) * other.group5().zyz())
                - (Simd32x3::from([self[e25], self[e3215], self[e3215]]) * other.group9().zyz())
                - (Simd32x3::from([self[e3215], self[e35], self[e15]]) * other.group5().xxy())
                - (Simd32x3::from([self[e3215], self[e35], self[e15]]) * other.group9().xxy())
                - (other.group8().yzx() * self.group1().zxy())
                - (other.group8().yzx() * self.group6().zxy())
                - (other.group3().yzx() * self.group9().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e45] * self[e415]) + (other[e415] * self[e45]) + (other[e435] * self[e4315]) + (other[e4125] * self[e425]),
                (other[e45] * self[e425]) + (other[e415] * self[e4125]) + (other[e425] * self[e45]) + (other[e4235] * self[e435]),
                (other[e45] * self[e435]) + (other[e425] * self[e4235]) + (other[e435] * self[e45]) + (other[e4315] * self[e415]),
                -(other[e5] * self[e45]) - (other[e425] * self[e25]) - (other[e435] * self[e35]) - (other[e321] * self[e3215]),
            ]) + (Simd32x4::from([other[e5], other[e5], other[e5], self[e15]]) * self.group4().with_w(other[e1]))
                + (Simd32x4::from([self[e42], self[e1234], self[e1234], self[e4125]]) * other.group8().zyz().with_w(other[e125]))
                + (Simd32x4::from([self[e1234], self[e43], self[e41], self[e4315]]) * other.group8().xxy().with_w(other[e315]))
                + (other.group0().yy().with_zw(other[e12345], other[scalar]) * self.group9().xyz().with_w(self[e5]))
                + (self.group0().yy().with_zw(self[e12345], other[e12345]) * other.group9().xyz().with_w(self[e3215]))
                + (other.group3().zx().with_zw(other[e3215], self[e5]) * self.group7().yzz().with_w(other[e45]))
                + (other.group9().ww().with_zw(other[e25], self[e35]) * self.group7().xyx().with_w(other[e3]))
                + (other.group4().yzx() * self.group8().zxy()).with_w(other[e5] * self[scalar])
                + (other.group5().yzx() * self.group1().zxy()).with_w(other[e3215] * self[e12345])
                + (other.group7().yzx() * self.group3().zxy()).with_w(other[e235] * self[e4235])
                + (self.group5().zxy() * other.group1().yzx()).with_w(other[e2] * self[e25])
                + (self.group1().www() * other.group3().xyz()).with_w(other[e3215] * self[e321])
                - (Simd32x4::from([other[e1234], other[e1234], other[e1234], self[e425]]) * self.group8().with_w(other[e25]))
                - (Simd32x4::from([self[e2], self[e321], self[e321], self[e12]]) * other.group5().zyz().with_w(other[e125]))
                - (Simd32x4::from([self[e5], self[e125], self[e235], self[e125]]) * other.group4().xxy().with_w(other[e12]))
                - (Simd32x4::from([self[e25], self[e3215], self[e3215], other[e4315]]) * other.group7().zyz().with_w(self[e315]))
                - (Simd32x4::from([self[e321], self[e3], self[e1], self[e31]]) * other.group5().xxy().with_w(other[e315]))
                - (Simd32x4::from([self[e315], self[e5], self[e5], self[e23]]) * other.group4().zyz().with_w(other[e235]))
                - (Simd32x4::from([self[e3215], self[e35], self[e15], other[e4235]]) * other.group7().xxy().with_w(self[e235]))
                - (other.group0().xx().with_zw(other[scalar], other[e23]) * self.group1().xyz().with_w(self[e235]))
                - (self.group0().xx().with_zw(self[scalar], other[e31]) * other.group1().xyz().with_w(self[e315]))
                - (other.group1().zx().with_zw(other[e321], self[e415]) * self.group5().yzz().with_w(other[e15]))
                - (other.group6().ww().with_zw(other[e2], self[e1]) * self.group5().xyx().with_w(other[e15]))
                - (other.group8().yzx() * self.group4().zxy()).with_w(other[e4125] * self[e125])
                - (self.group7().zxy() * other.group3().yzx()).with_w(other[e25] * self[e2])
                - (other.group1().www() * self.group3().xyz()).with_w(other[e35] * self[e3])
                - (other.group6().yzx() * self.group9().zxy()).with_w(other[e35] * self[e435])
                - (other.group9().yzx() * self.group6().zxy()).with_w(other[e415] * self[e15]),
            // e1234
            (other[scalar] * self[e4])
                + (other[e12345] * self[e1234])
                + (other[e4] * self[scalar])
                + (other[e4] * self[e45])
                + (other[e41] * self[e1])
                + (other[e42] * self[e2])
                + (other[e43] * self[e3])
                + (other[e321] * self[e1234])
                + (other[e4235] * self[e423])
                + (other[e4315] * self[e431])
                + (other[e4125] * self[e412])
                + (other[e1234] * self[e12345])
                - (other[e1] * self[e41])
                - (other[e2] * self[e42])
                - (other[e3] * self[e43])
                - (other[e45] * self[e4])
                - (other[e41] * self[e415])
                - (other[e42] * self[e425])
                - (other[e43] * self[e435])
                - (other[e23] * self[e423])
                - (other[e31] * self[e431])
                - (other[e12] * self[e412])
                - (other[e415] * self[e41])
                - (other[e425] * self[e42])
                - (other[e435] * self[e43])
                - (other[e423] * self[e23])
                - (other[e423] * self[e4235])
                - (other[e431] * self[e31])
                - (other[e431] * self[e4315])
                - (other[e412] * self[e12])
                - (other[e412] * self[e4125])
                - (other[e1234] * self[e321]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      161      233        0
    //    simd2       19       19        0
    //    simd3      135      182        0
    //    simd4      121       89        0
    // Totals...
    // yes simd      436      523        0
    //  no simd     1088     1173        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([self[e4] * other[e3215], self[e1234] * other[e3215] * -1.0])
                + (Simd32x2::from(other[e4235]) * Simd32x2::from([self[e1], self[e4235]]))
                + (Simd32x2::from(other[e4315]) * Simd32x2::from([self[e2], self[e4315]]))
                + (Simd32x2::from(other[e4125]) * Simd32x2::from([self[e3], self[e4125]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[scalar] * other[e4235]) + (self[e41] * other[e3215]) + (self[e31] * other[e4125]),
                (self[scalar] * other[e4315]) + (self[e42] * other[e3215]) + (self[e12] * other[e4235]),
                (self[scalar] * other[e4125]) + (self[e43] * other[e3215]) + (self[e23] * other[e4315]),
                -(self[e42] * other[e4315]) - (self[e43] * other[e4125]),
            ]) - (other.group0().yzxx() * self.group5().zxy().with_w(self[e41])),
            // e5
            (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125]) + (self[e45] * other[e3215]) - (self[scalar] * other[e3215]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e1] * other[e3215]) + (self[e5] * other[e4235]) + (self[e415] * other[e3215]),
                (self[e2] * other[e3215]) + (self[e5] * other[e4315]) + (self[e425] * other[e3215]),
                (self[e3] * other[e3215]) + (self[e5] * other[e4125]) + (self[e435] * other[e3215]),
                -(self[e425] * other[e4315]) - (self[e435] * other[e4125]),
            ]) + (other.group0().zxyw() * self.group8().yzx().with_w(self[e4]))
                - (other.group0().yzxx() * self.group8().zxy().with_w(self[e415])),
            // e41, e42, e43
            (self.group7().zxy() * other.group0().yzx()) - (Simd32x3::from(self[e4]) * other.group0().xyz()) - (self.group7().yzx() * other.group0().zxy()),
            // e23, e31, e12
            (Simd32x3::from(other[e3215]) * self.group7()) + (self.group1().zxy() * other.group0().yzx())
                - (Simd32x3::from(self[e321]) * other.group0().xyz())
                - (self.group1().yzx() * other.group0().zxy()),
            // e415, e425, e435, e321
            (self.group9().zxy() * other.group0().yzx()).with_w(self[e1234] * other[e3215])
                - (other.group0().xyzy() * self.group3().www().with_w(self[e31]))
                - (other.group0().zxyz() * self.group9().yzx().with_w(self[e12]))
                - (other.group0().wwwx() * self.group4().with_w(self[e23])),
            // e423, e431, e412
            (Simd32x3::from(self[e1234]) * other.group0().xyz()) + (self.group4().yzx() * other.group0().zxy()) - (self.group4().zxy() * other.group0().yzx()),
            // e235, e315, e125
            (Simd32x3::from(other[e3215]) * self.group9().xyz()) + (self.group3().zxy() * other.group0().yzx())
                - (Simd32x3::from(self[e3215]) * other.group0().xyz())
                - (Simd32x3::from(other[e3215]) * self.group5())
                - (self.group3().yzx() * other.group0().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e425] * other[e4125],
                self[e435] * other[e4235],
                self[e415] * other[e4315],
                -(self[e315] * other[e4315]) - (self[e125] * other[e4125]),
            ]) + (Simd32x4::from(self[e12345]) * other.group0())
                + (Simd32x4::from(other[e3215]) * self.group7().with_w(self[e321]))
                - (other.group0().yzxx() * self.group6().zxy().with_w(self[e235])),
            // e1234
            (self[e423] * other[e4235]) + (self[e431] * other[e4315]) + (self[e412] * other[e4125]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      172      246        0
    //    simd2       18       18        0
    //    simd3      140      186        0
    //    simd4      123       91        0
    // Totals...
    // yes simd      453      541        0
    //  no simd     1120     1204        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[e4315] * other[e2]) + (self[e4125] * other[e3]) + (self[e3215] * other[e4]),
                -(self[e1] * other[e1]) - (self[e2] * other[e2]) - (self[e3] * other[e3]),
            ]) + (Simd32x2::from(other[e5]) * Simd32x2::from([self[e1234], self[e4]]))
                + (Simd32x2::from([self[e4235], self[e5]]) * other.group0().xw()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e425] * other[e3]) + (self[e235] * other[e4]),
                (self[e435] * other[e1]) + (self[e315] * other[e4]),
                (self[e415] * other[e2]) + (self[e125] * other[e4]),
                -(self[e321] * other[e4]) - (self[e412] * other[e3]),
            ]) + (Simd32x4::from(self[e12345]) * other.group0())
                - (Simd32x4::from([other[e5], other[e5], other[e5], other[e1]]) * self.group7().with_w(self[e423]))
                - (other.group0().yzxy() * self.group6().zxy().with_w(self[e431])),
            // e5
            (self[e12345] * other[e5]) + (self[e321] * other[e5]) + (self[e235] * other[e1]) + (self[e315] * other[e2]) + (self[e125] * other[e3]),
            // e15, e25, e35, e45
            Simd32x4::from([
                -(self[e4235] * other[e5]) - (self[e3215] * other[e1]),
                -(self[e4315] * other[e5]) - (self[e3215] * other[e2]),
                -(self[e4125] * other[e5]) - (self[e3215] * other[e3]),
                (self[e12] * other[e3]) + (self[e1234] * other[e5]),
            ]) + (Simd32x4::from([other[e5], other[e5], other[e5], other[e1]]) * self.group5().with_w(self[e23]))
                + (other.group0().yzxy() * self.group3().zxy().with_w(self[e31]))
                - (other.group0().zxyw() * self.group3().yzx().with_w(self[e3215])),
            // e41, e42, e43
            (Simd32x3::from(self[e1234]) * other.group0().xyz())
                + (Simd32x3::from(other[e4]) * self.group5())
                + (Simd32x3::from(other[e4]) * self.group9().xyz())
                + (self.group4().yzx() * other.group0().zxy())
                - (self.group4().zxy() * other.group0().yzx()),
            // e23, e31, e12
            (Simd32x3::from(other[e4]) * self.group3().xyz()) + (Simd32x3::from(other[e5]) * self.group4()) + (self.group9().zxy() * other.group0().yzx())
                - (Simd32x3::from(self[e45]) * other.group0().xyz())
                - (self.group9().yzx() * other.group0().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e2] * other[e3]) + (self[e321] * other[e1]) + (self[e235] * other[e4]),
                (self[e3] * other[e1]) + (self[e321] * other[e2]) + (self[e315] * other[e4]),
                (self[e1] * other[e2]) + (self[e321] * other[e3]) + (self[e125] * other[e4]),
                -(self[e415] * other[e1]) - (self[e425] * other[e2]) - (self[e435] * other[e3]),
            ]) + (Simd32x4::from([other[e5], other[e5], other[e5], self[e5]]) * self.group7().with_w(other[e4]))
                - (self.group1().zxyw() * other.group0().yzx().with_w(other[e5])),
            // e423, e431, e412
            (Simd32x3::from(self[e4]) * other.group0().xyz()) + (Simd32x3::from(other[e4]) * self.group6().xyz()) + (self.group7().yzx() * other.group0().zxy())
                - (Simd32x3::from(other[e4]) * self.group1().xyz())
                - (self.group7().zxy() * other.group0().yzx()),
            // e235, e315, e125
            (Simd32x3::from(other[e5]) * self.group1().xyz()) + (Simd32x3::from(other[e5]) * self.group6().xyz()) + (self.group8().zxy() * other.group0().yzx())
                - (Simd32x3::from(self[e5]) * other.group0().xyz())
                - (self.group8().yzx() * other.group0().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(self[e15] * other[e4]) - (self[e31] * other[e3]),
                -(self[e25] * other[e4]) - (self[e12] * other[e1]),
                -(self[e35] * other[e4]) - (self[e23] * other[e2]),
                (self[e25] * other[e2]) + (self[e35] * other[e3]),
            ]) + (Simd32x4::from(other[e5]) * self.group4().with_w(self[scalar]))
                + (other.group0().yzxx() * self.group5().zxy().with_w(self[e15]))
                - (self.group0().xx().with_zw(self[scalar], self[e45]) * other.group0().xyz().with_w(other[e5])),
            // e1234
            (self[scalar] * other[e4]) + (self[e45] * other[e4]) - (self[e41] * other[e1]) - (self[e42] * other[e2]) - (self[e43] * other[e3]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      140      197        0
    //    simd2       16       18        0
    //    simd3      124      172        0
    //    simd4      112       88        0
    // Totals...
    // yes simd      392      475        0
    //  no simd      992     1101        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(other[scalar]) * self.group0().yx() * Simd32x2::from([1.0, -1.0]),
            // e1, e2, e3, e4
            Simd32x4::from(other[scalar]) * self.group9().xyz().with_w(self[e1234]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e5
            self[e3215] * other[scalar] * -1.0,
            // e15, e25, e35, e45
            Simd32x4::from(other[scalar]) * self.group8().with_w(self[e321]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e41, e42, e43
            Simd32x3::from(other[scalar]) * self.group7(),
            // e23, e31, e12
            Simd32x3::from(other[scalar]) * self.group6().xyz(),
            // e415, e425, e435, e321
            Simd32x4::from(other[scalar]) * self.group5().with_w(self[e45]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e423, e431, e412
            Simd32x3::from(other[scalar]) * self.group4() * Simd32x3::from(-1.0),
            // e235, e315, e125
            Simd32x3::from(other[scalar]) * self.group3().xyz() * Simd32x3::from(-1.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[scalar]) * self.group1().xyz().with_w(self[e5]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1234
            self[e4] * other[scalar],
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      166      239        0
    //    simd2       19       19        0
    //    simd3      140      188        0
    //    simd4      124       91        0
    // Totals...
    // yes simd      449      537        0
    //  no simd     1120     1205        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([(self[e4] * other[e3215]) + (self[e5] * other[e1234]), -(self[e3215] * other[e1234]) - (self[e1234] * other[e3215])])
                + (Simd32x2::from(other[e4235]) * Simd32x2::from([self[e1], self[e4235]]))
                + (Simd32x2::from(other[e4315]) * Simd32x2::from([self[e2], self[e4315]]))
                + (Simd32x2::from(other[e4125]) * Simd32x2::from([self[e3], self[e4125]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[scalar] * other[e4235]) + (self[e41] * other[e3215]) + (self[e31] * other[e4125]),
                (self[scalar] * other[e4315]) + (self[e42] * other[e3215]) + (self[e12] * other[e4235]),
                (self[scalar] * other[e4125]) + (self[e43] * other[e3215]) + (self[e23] * other[e4315]),
                -(self[e45] * other[e1234]) - (self[e42] * other[e4315]) - (self[e43] * other[e4125]),
            ]) - (Simd32x4::from([other[e1234], other[e1234], other[e1234], other[e4235]]) * self.group3().xyz().with_w(self[e41]))
                - (self.group5().zxy() * other.group0().yzx()).with_w(self[scalar] * other[e1234]),
            // e5
            (self[e15] * other[e4235]) + (self[e25] * other[e4315]) + (self[e35] * other[e4125]) + (self[e45] * other[e3215]) - (self[scalar] * other[e3215]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e1] * other[e3215]) + (self[e5] * other[e4235]) + (self[e415] * other[e3215]),
                (self[e2] * other[e3215]) + (self[e5] * other[e4315]) + (self[e425] * other[e3215]),
                (self[e3] * other[e3215]) + (self[e5] * other[e4125]) + (self[e435] * other[e3215]),
                -(self[e5] * other[e1234]) - (self[e425] * other[e4315]) - (self[e435] * other[e4125]),
            ]) + (other.group0().zxyw() * self.group8().yzx().with_w(self[e4]))
                - (other.group0().yzxx() * self.group8().zxy().with_w(self[e415])),
            // e41, e42, e43
            (Simd32x3::from(other[e1234]) * self.group6().xyz()) + (self.group7().zxy() * other.group0().yzx())
                - (Simd32x3::from(self[e4]) * other.group0().xyz())
                - (Simd32x3::from(other[e1234]) * self.group1().xyz())
                - (self.group7().yzx() * other.group0().zxy()),
            // e23, e31, e12
            (Simd32x3::from(other[e3215]) * self.group7()) + (Simd32x3::from(other[e1234]) * self.group8()) + (self.group1().zxy() * other.group0().yzx())
                - (Simd32x3::from(self[e321]) * other.group0().xyz())
                - (self.group1().yzx() * other.group0().zxy()),
            // e415, e425, e435, e321
            (self.group9().zxy() * other.group0().yzx()).with_w(self[e1234] * other[e3215])
                - (Simd32x4::from([other[e1234], other[e1234], other[e1234], other[e4315]]) * self.group3().xyz().with_w(self[e31]))
                - (self.group9().yzxw() * other.group0().zxy().with_w(other[e1234]))
                - (other.group0().xyzz() * self.group3().www().with_w(self[e12]))
                - (other.group0().wwwx() * self.group4().with_w(self[e23])),
            // e423, e431, e412
            (Simd32x3::from(self[e1234]) * other.group0().xyz()) + (self.group4().yzx() * other.group0().zxy())
                - (Simd32x3::from(other[e1234]) * self.group5())
                - (Simd32x3::from(other[e1234]) * self.group9().xyz())
                - (self.group4().zxy() * other.group0().yzx()),
            // e235, e315, e125
            (Simd32x3::from(other[e3215]) * self.group9().xyz()) + (self.group3().zxy() * other.group0().yzx())
                - (Simd32x3::from(self[e3215]) * other.group0().xyz())
                - (Simd32x3::from(other[e3215]) * self.group5())
                - (self.group3().yzx() * other.group0().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e425] * other[e4125], self[e435] * other[e4235], self[e415] * other[e4315], self[e125] * other[e4125] * -1.0])
                + (Simd32x4::from(self[e12345]) * other.group0())
                + (Simd32x4::from(other[e3215]) * self.group7().with_w(self[e321]))
                - (Simd32x4::from([other[e1234], other[e1234], other[e1234], other[e4235]]) * self.group8().with_w(self[e235]))
                - (other.group0().yzxy() * self.group6().zxy().with_w(self[e315])),
            // e1234
            (self[e12345] * other[e1234]) + (self[e423] * other[e4235]) + (self[e431] * other[e4315]) + (self[e412] * other[e4125]) - (self[e321] * other[e1234]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      208      291        0
    //    simd2       28       28        0
    //    simd3      184      247        0
    //    simd4      164      117        0
    // Totals...
    // yes simd      584      683        0
    //  no simd     1472     1556        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[e4315] * other[e2]) + (self[e4125] * other[e3]) + (self[e3215] * other[e4]) - (self[e45] * other[e321]),
                (self[e321] * other[e321]) - (self[e1] * other[e1]) - (self[e2] * other[e2]) - (self[e3] * other[e3]),
            ]) + (Simd32x2::from(other[e12345]) * self.group0())
                + (Simd32x2::from(other[e5]) * Simd32x2::from([self[e1234], self[e4]]))
                + (Simd32x2::from([self[e4235], self[e5]]) * other.group3().xw())
                - (Simd32x2::from(other[e423]) * Simd32x2::from([self[e15], self[e235]]))
                - (Simd32x2::from(other[e431]) * Simd32x2::from([self[e25], self[e315]]))
                - (Simd32x2::from(other[e412]) * Simd32x2::from([self[e35], self[e125]]))
                - (Simd32x2::from(other[e415]) * Simd32x2::from([self[e23], self[e415]]))
                - (Simd32x2::from(other[e425]) * Simd32x2::from([self[e31], self[e425]]))
                - (Simd32x2::from(other[e435]) * Simd32x2::from([self[e12], self[e435]]))
                - (Simd32x2::from(other[e235]) * Simd32x2::from([self[e41], self[e423]]))
                - (Simd32x2::from(other[e315]) * Simd32x2::from([self[e42], self[e431]]))
                - (Simd32x2::from(other[e125]) * Simd32x2::from([self[e43], self[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e5] * other[e423]) + (self[e415] * other[e321]) + (self[e425] * other[e3]) + (self[e321] * other[e415]),
                (self[e5] * other[e431]) + (self[e425] * other[e321]) + (self[e435] * other[e1]) + (self[e321] * other[e425]),
                (self[e5] * other[e412]) + (self[e415] * other[e2]) + (self[e435] * other[e321]) + (self[e321] * other[e435]),
                -(self[e415] * other[e423]) - (self[e425] * other[e431]) - (self[e435] * other[e412]) - (self[e321] * other[e4]),
            ]) + (Simd32x4::from(self[e12345]) * other.group3())
                + (self.group1().xyxw() * other.group0().ww().with_zw(other[e425], other[e12345]))
                + (self.group1().yzzw() * other.group1().zx().with_zw(other[e12345], other[e321]))
                + (other.group0().zx().with_zw(other[e4], other[e412]) * self.group8().yzz().with_w(self[e3]))
                + (other.group3().ww().with_zw(other[e431], other[e431]) * self.group8().xyx().with_w(self[e2]))
                + (self.group7().zxy() * other.group2().yzx()).with_w(self[e1] * other[e423])
                - (other.group3().yzxz() * self.group6().zxy().with_w(self[e412]))
                - (self.group7().xyx() * other.group2().wwy()).with_w(self[e423] * other[e415])
                - (self.group7().yzz() * other.group2().zxw()).with_w(self[e423] * other[e1])
                - (self.group8().zxy() * other.group0().yzx()).with_w(self[e431] * other[e425])
                - (self.group1().zxy() * other.group1().yzx()).with_w(self[e431] * other[e2])
                - (self.group1().www() * other.group2().xyz()).with_w(self[e412] * other[e435]),
            // e5
            (self[e12345] * other[e5]) + (self[e5] * other[e12345]) + (self[e321] * other[e5]) + (self[e235] * other[e1]) + (self[e315] * other[e2]) + (self[e125] * other[e3])
                - (self[e1] * other[e235])
                - (self[e2] * other[e315])
                - (self[e3] * other[e125])
                - (self[e5] * other[e321])
                - (self[e415] * other[e235])
                - (self[e425] * other[e315])
                - (self[e435] * other[e125])
                - (self[e235] * other[e415])
                - (self[e315] * other[e425])
                - (self[e125] * other[e435]),
            // e15, e25, e35, e45
            (Simd32x4::from(self[e15]) * Simd32x4::from([other[e12345], other[e3], other[e425], other[e423]]))
                + (Simd32x4::from(self[e25]) * Simd32x4::from([other[e435], other[e12345], other[e1], other[e431]]))
                + (Simd32x4::from(self[e35]) * Simd32x4::from([other[e2], other[e415], other[e12345], other[e412]]))
                + (self.group0().xx().with_zw(self[scalar], self[e23]) * other.group2().xyz().with_w(other[e1]))
                + (self.group5().xyx() * other.group2().wwy()).with_w(self[e31] * other[e2])
                + (self.group5().yzz() * other.group2().zxw()).with_w(self[e12] * other[e3])
                + (self.group9().zxy() * other.group2().yzx()).with_w(self[e45] * other[e12345])
                + (self.group9().www() * other.group1().xyz()).with_w(self[e1234] * other[e5])
                - (Simd32x4::from(self[e3215]) * other.group3())
                - (Simd32x4::from([other[e425], other[e1], other[e321], other[e125]]) * self.group3().zzz().with_w(self[e43]))
                - (Simd32x4::from([other[e3], other[e321], other[e415], other[e315]]) * self.group3().yyy().with_w(self[e42]))
                - (self.group9().xyxy() * other.group2().wwy().with_w(other[e425]))
                - (self.group9().yzzz() * other.group2().zxw().with_w(other[e435]))
                - (other.group1().wz().with_zw(other[e2], other[e235]) * self.group3().xxx().with_w(self[e41]))
                - (self.group5().zxy() * other.group2().yzx()).with_w(self[scalar] * other[e321])
                - (self.group3().www() * other.group2().xyz()).with_w(self[e4235] * other[e415]),
            // e41, e42, e43
            (Simd32x3::from(self[scalar]) * other.group0().xyz())
                + (Simd32x3::from(self[e45]) * other.group0().xyz())
                + (Simd32x3::from(self[e1234]) * other.group1().xyz())
                + (Simd32x3::from(self[e1234]) * other.group3().xyz())
                + (Simd32x3::from([other[e412], other[e423], other[e4]]) * self.group5().yzz())
                + (Simd32x3::from([other[e412], other[e423], other[e4]]) * self.group9().yzz())
                + (Simd32x3::from([other[e12345], other[e12345], other[e425]]) * self.group4().xyx())
                + (Simd32x3::from([other[e435], other[e415], other[e12345]]) * self.group4().yzz())
                + (Simd32x3::from([other[e321], other[e321], other[e2]]) * self.group4().xyx())
                + (Simd32x3::from([other[e3], other[e1], other[e321]]) * self.group4().yzz())
                + (Simd32x3::from([other[e4], other[e4], other[e431]]) * self.group5().xyx())
                + (Simd32x3::from([other[e4], other[e4], other[e431]]) * self.group9().xyx())
                - (self.group4().zxy() * other.group1().yzx())
                - (self.group4().zxy() * other.group3().yzx())
                - (self.group5().zxy() * other.group0().yzx())
                - (self.group9().zxy() * other.group0().yzx()),
            // e23, e31, e12
            (Simd32x3::from(self[scalar]) * other.group1().xyz())
                + (Simd32x3::from(self[e3215]) * other.group0().xyz())
                + (Simd32x3::from(self[e1234]) * other.group2().xyz())
                + (Simd32x3::from([other[e412], other[e423], other[e4]]) * self.group3().yzz())
                + (Simd32x3::from([other[e12345], other[e12345], other[e425]]) * self.group5().xyx())
                + (Simd32x3::from([other[e435], other[e415], other[e12345]]) * self.group5().yzz())
                + (Simd32x3::from([other[e4], other[e4], other[e431]]) * self.group3().xyx())
                + (self.group4().xyx() * other.group2().wwy())
                + (self.group4().yzz() * other.group2().zxw())
                + (self.group9().zxy() * other.group3().yzx())
                - (Simd32x3::from(self[e45]) * other.group3().xyz())
                - (Simd32x3::from([other[e321], other[e321], other[e2]]) * self.group9().xyx())
                - (Simd32x3::from([other[e3], other[e1], other[e321]]) * self.group9().yzz())
                - (self.group4().zxy() * other.group2().yzx())
                - (self.group5().zxy() * other.group1().yzx())
                - (self.group3().zxy() * other.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e2] * other[e3]) + (self[e4] * other[e235]) + (self[e5] * other[e423]) + (self[e415] * other[e12345]) + (self[e425] * other[e435]) + (self[e321] * other[e1]),
                (self[e3] * other[e1]) + (self[e4] * other[e315]) + (self[e5] * other[e431]) + (self[e425] * other[e12345]) + (self[e435] * other[e415]) + (self[e321] * other[e2]),
                (self[e3] * other[e321])
                    + (self[e4] * other[e125])
                    + (self[e5] * other[e412])
                    + (self[e415] * other[e425])
                    + (self[e435] * other[e12345])
                    + (self[e321] * other[e3]),
                -(self[e2] * other[e425]) - (self[e3] * other[e435]) - (self[e4] * other[e5]) - (self[e415] * other[e1]) - (self[e425] * other[e2]) - (self[e435] * other[e3]),
            ]) + (Simd32x4::from(self[e12345]) * other.group1())
                + (other.group2().zxwy() * self.group7().yzz().with_w(self[e431]))
                + (other.group2().wwyx() * self.group7().xyx().with_w(self[e423]))
                + (other.group0().zx().with_zw(other[e4], other[e12345]) * self.group8().yzz().with_w(self[e321]))
                + (other.group1().ww().with_zw(other[e2], self[e5]) * self.group1().xyx().with_w(other[e4]))
                + (other.group3().ww().with_zw(other[e431], other[e125]) * self.group8().xyx().with_w(self[e412]))
                - (other.group0().yzxy() * self.group8().zxy().with_w(self[e315]))
                - (other.group1().yzxx() * self.group6().zxy().with_w(self[e1]))
                - (self.group7().zxy() * other.group2().yzx()).with_w(self[e235] * other[e423])
                - (self.group1().zxy() * other.group3().yzx()).with_w(self[e125] * other[e412]),
            // e423, e431, e412
            (Simd32x3::from(self[e12345]) * other.group0().xyz())
                + (Simd32x3::from(self[e4]) * other.group1().xyz())
                + (Simd32x3::from(self[e4]) * other.group3().xyz())
                + (Simd32x3::from([other[e412], other[e423], other[e4]]) * self.group6().yzz())
                + (Simd32x3::from([other[e12345], other[e12345], other[e425]]) * self.group7().xyx())
                + (Simd32x3::from([other[e435], other[e415], other[e12345]]) * self.group7().yzz())
                + (Simd32x3::from([other[e321], other[e321], other[e2]]) * self.group7().xyx())
                + (Simd32x3::from([other[e3], other[e1], other[e321]]) * self.group7().yzz())
                + (Simd32x3::from([other[e4], other[e4], other[e431]]) * self.group6().xyx())
                + (self.group1().zxy() * other.group0().yzx())
                - (Simd32x3::from(self[e321]) * other.group0().xyz())
                - (Simd32x3::from([other[e412], other[e423], other[e4]]) * self.group1().yzz())
                - (Simd32x3::from([other[e4], other[e4], other[e431]]) * self.group1().xyx())
                - (self.group7().zxy() * other.group1().yzx())
                - (self.group7().zxy() * other.group3().yzx())
                - (self.group6().zxy() * other.group0().yzx()),
            // e235, e315, e125
            (Simd32x3::from(self[e12345]) * other.group2().xyz())
                + (Simd32x3::from(self[e5]) * other.group1().xyz())
                + (Simd32x3::from(self[e321]) * other.group2().xyz())
                + (Simd32x3::from(self[e235]) * Simd32x3::from([other[e12345], other[e3], other[e425]]))
                + (Simd32x3::from(self[e315]) * Simd32x3::from([other[e435], other[e12345], other[e1]]))
                + (Simd32x3::from(self[e125]) * Simd32x3::from([other[e2], other[e415], other[e12345]]))
                + (self.group1().xyx() * other.group2().wwy())
                + (self.group1().yzz() * other.group2().zxw())
                + (self.group6().xyx() * other.group2().wwy())
                + (self.group6().yzz() * other.group2().zxw())
                - (Simd32x3::from(self[e5]) * other.group3().xyz())
                - (Simd32x3::from(self[e235]) * Simd32x3::from([other[e321], other[e435], other[e2]]))
                - (Simd32x3::from(self[e315]) * Simd32x3::from([other[e3], other[e321], other[e415]]))
                - (Simd32x3::from(self[e125]) * Simd32x3::from([other[e425], other[e1], other[e321]]))
                - (self.group1().zxy() * other.group2().yzx())
                - (self.group6().zxy() * other.group2().yzx()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([self[e1234], self[e1234], self[e1234], other[e12345]]) * other.group2().xyz().with_w(self[e3215]))
                + (self.group3().zxyz() * other.group0().yzx().with_w(other[e3]))
                + (self.group9().xyxy() * other.group0().ww().with_zw(other[e425], other[e315]))
                + (self.group9().yzzz() * other.group1().zx().with_zw(other[e12345], other[e125]))
                + (other.group2().wwyw() * self.group4().xyx().with_w(self[scalar]))
                + (other.group3().yzxy() * self.group5().zxy().with_w(self[e25]))
                + (self.group4().yzz() * other.group2().zxw()).with_w(self[e15] * other[e1])
                + (self.group3().www() * other.group1().xyz()).with_w(self[e4235] * other[e235])
                - (Simd32x4::from(self[e3215]) * other.group0().xyz().with_w(other[e321]))
                - (self.group3().xyxy() * other.group3().ww().with_zw(other[e431], other[e425]))
                - (self.group3().yzzz() * other.group0().zx().with_zw(other[e4], other[e435]))
                - (other.group2().yzxy() * self.group4().zxy().with_w(self[e31]))
                - (self.group0().xx().with_zw(self[scalar], self[e23]) * other.group3().xyz().with_w(other[e235]))
                - (other.group1().ww().with_zw(other[e2], other[e125]) * self.group5().xyx().with_w(self[e12]))
                - (other.group3().zx().with_zw(other[e321], other[e415]) * self.group5().yzz().with_w(self[e15]))
                - (self.group9().zxy() * other.group1().yzx()).with_w(self[e45] * other[e5]),
            // e1234
            (self[scalar] * other[e4]) + (self[e45] * other[e4]) + (self[e1234] * other[e12345]) + (self[e1234] * other[e321])
                - (self[e41] * other[e415])
                - (self[e41] * other[e1])
                - (self[e42] * other[e425])
                - (self[e42] * other[e2])
                - (self[e43] * other[e435])
                - (self[e43] * other[e3])
                - (self[e23] * other[e423])
                - (self[e31] * other[e431])
                - (self[e12] * other[e412])
                - (self[e4235] * other[e423])
                - (self[e4315] * other[e431])
                - (self[e4125] * other[e412]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for MultiVector {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      212      294        0
    //    simd2       24       24        0
    //    simd3      184      242        0
    //    simd4      165      122        0
    // Totals...
    // yes simd      585      682        0
    //  no simd     1472     1556        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self[e4] * other[e3215])
                    - (self[e425] * other[e31])
                    - (self[e435] * other[e12])
                    - (self[e321] * other[e45])
                    - (self[e431] * other[e25])
                    - (self[e412] * other[e35])
                    - (self[e315] * other[e42])
                    - (self[e125] * other[e43]),
                (self[e25] * other[e42])
                    + (self[e35] * other[e43])
                    + (self[e42] * other[e25])
                    + (self[e43] * other[e35])
                    + (self[e23] * other[e23])
                    + (self[e31] * other[e31])
                    + (self[e12] * other[e12])
                    - (self[e1234] * other[e3215]),
            ]) + (Simd32x2::from(other[e4235]) * Simd32x2::from([self[e1], self[e4235]]))
                + (Simd32x2::from(other[e4315]) * Simd32x2::from([self[e2], self[e4315]]))
                + (Simd32x2::from(other[e4125]) * Simd32x2::from([self[e3], self[e4125]]))
                + (Simd32x2::from([self[e12345], self[e15]]) * other.group0().wx())
                + (Simd32x2::from([self[e5], self[e41]]) * other.group2().wx())
                - (Simd32x2::from([self[e415], self[e45]]) * other.group1().xw())
                - (Simd32x2::from([self[e423], self[e3215]]) * other.group2().xw())
                - (Simd32x2::from([self[e235], self[scalar]]) * other.group0().xw()),
            // e1, e2, e3, e4
            (Simd32x4::from(self[e1234]) * other.group2().xyz().with_w(other[e45]))
                + (self.group9().xyxy() * other.group0().ww().with_zw(other[e31], other[e42]))
                + (self.group9().yzzz() * other.group1().zx().with_zw(other[scalar], other[e43]))
                + (other.group0().yzxz() * self.group3().zxy().with_w(self[e12]))
                + (self.group0().xx().with_zw(self[scalar], self[e41]) * other.group3().xyz().with_w(other[e23]))
                + (other.group1().ww().with_zw(other[e4315], other[e41]) * self.group5().xyx().with_w(self[e23]))
                + (other.group2().zx().with_zw(other[e3215], other[e12]) * self.group4().yzz().with_w(self[e43]))
                + (other.group3().zx().with_zw(other[e45], other[e42]) * self.group5().yzz().with_w(self[e31]))
                + (other.group3().ww().with_zw(other[e25], other[e31]) * self.group4().xyx().with_w(self[e42]))
                + (self.group3().www() * other.group1().xyz()).with_w(self[e4235] * other[e41])
                - (other.group2().yzxw() * self.group4().zxy().with_w(self[scalar]))
                - (other.group3().yzxx() * self.group5().zxy().with_w(self[e41]))
                - (other.group0().zx().with_zw(other[e1234], other[e4125]) * self.group3().yzz().with_w(self[e43]))
                - (other.group2().ww().with_zw(other[e42], other[e4315]) * self.group3().xyx().with_w(self[e42]))
                - (self.group9().zxy() * other.group1().yzx()).with_w(self[e45] * other[e1234])
                - (self.group9().www() * other.group0().xyz()).with_w(self[e1234] * other[scalar]),
            // e5
            (self[e15] * other[e23])
                + (self[e15] * other[e4235])
                + (self[e25] * other[e31])
                + (self[e25] * other[e4315])
                + (self[e35] * other[e12])
                + (self[e35] * other[e4125])
                + (self[e45] * other[e3215])
                + (self[e23] * other[e15])
                + (self[e31] * other[e25])
                + (self[e12] * other[e35])
                - (self[scalar] * other[e3215])
                - (self[e4235] * other[e15])
                - (self[e4315] * other[e25])
                - (self[e4125] * other[e35])
                - (self[e3215] * other[scalar])
                - (self[e3215] * other[e45]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self[e5] * other[e23]) + (self[e5] * other[e4235]) + (self[e425] * other[e35]) + (self[e321] * other[e15]),
                (self[e5] * other[e31]) + (self[e5] * other[e4315]) + (self[e435] * other[e15]) + (self[e321] * other[e25]),
                (self[e5] * other[e12]) + (self[e5] * other[e4125]) + (self[e435] * other[e3215]) + (self[e321] * other[e35]),
                -(self[e5] * other[e1234]) - (self[e425] * other[e4315]) - (self[e435] * other[e4125]) - (self[e321] * other[scalar]),
            ]) + (Simd32x4::from(self[e12345]) * other.group2().xyz().with_w(other[e45]))
                + (self.group1().xyxy() * other.group3().ww().with_zw(other[e25], other[e31]))
                + (self.group1().yzzz() * other.group2().zx().with_zw(other[e3215], other[e12]))
                + (other.group0().ww().with_zw(other[e31], other[e41]) * self.group8().xyx().with_w(self[e235]))
                + (other.group1().zx().with_zw(other[scalar], other[e43]) * self.group8().yzz().with_w(self[e125]))
                + (other.group1().ww().with_zw(other[e4315], other[e42]) * self.group8().xyx().with_w(self[e315]))
                + (other.group3().zx().with_zw(other[e45], other[e23]) * self.group8().yzz().with_w(self[e1]))
                + (other.group3().ww().with_zw(other[e25], other[e3215]) * self.group6().xyx().with_w(self[e4]))
                - (self.group6().zxyx() * other.group2().yzx().with_w(other[e4235]))
                - (other.group2().yzxz() * self.group1().zxy().with_w(self[e412]))
                - (self.group8().zxy() * other.group1().yzx()).with_w(self[e423] * other[e15])
                - (self.group8().zxy() * other.group3().yzx()).with_w(self[e431] * other[e25]),
            // e41, e42, e43
            (Simd32x3::from(self[e12345]) * other.group0().xyz())
                + (Simd32x3::from(self[e4]) * other.group1().xyz())
                + (Simd32x3::from(self[e423]) * Simd32x3::from([other[scalar], other[e4125], other[e31]]))
                + (Simd32x3::from(self[e431]) * Simd32x3::from([other[e12], other[scalar], other[e4235]]))
                + (Simd32x3::from(self[e412]) * Simd32x3::from([other[e4315], other[e23], other[scalar]]))
                + (Simd32x3::from([other[e43], other[e41], other[e1234]]) * self.group6().yzz())
                + (Simd32x3::from([other[e1234], other[e1234], other[e42]]) * self.group6().xyx())
                + (self.group1().zxy() * other.group0().yzx())
                - (Simd32x3::from(self[e4]) * other.group3().xyz())
                - (Simd32x3::from(self[e321]) * other.group0().xyz())
                - (Simd32x3::from(self[e423]) * Simd32x3::from([other[e45], other[e12], other[e4315]]))
                - (Simd32x3::from(self[e431]) * Simd32x3::from([other[e4125], other[e45], other[e23]]))
                - (Simd32x3::from(self[e412]) * Simd32x3::from([other[e31], other[e4235], other[e45]]))
                - (Simd32x3::from([other[e43], other[e41], other[e1234]]) * self.group1().yzz())
                - (Simd32x3::from([other[e1234], other[e1234], other[e42]]) * self.group1().xyx())
                - (self.group6().zxy() * other.group0().yzx()),
            // e23, e31, e12
            (Simd32x3::from(self[e12345]) * other.group1().xyz())
                + (Simd32x3::from(self[e4]) * other.group2().xyz())
                + (Simd32x3::from(self[e5]) * other.group0().xyz())
                + (Simd32x3::from([other[e43], other[e41], other[e1234]]) * self.group8().yzz())
                + (Simd32x3::from([other[scalar], other[scalar], other[e31]]) * self.group6().xyx())
                + (Simd32x3::from([other[e12], other[e23], other[scalar]]) * self.group6().yzz())
                + (Simd32x3::from([other[e35], other[e15], other[e3215]]) * self.group7().yzz())
                + (Simd32x3::from([other[e1234], other[e1234], other[e42]]) * self.group8().xyx())
                + (Simd32x3::from([other[e3215], other[e3215], other[e25]]) * self.group7().xyx())
                + (self.group1().zxy() * other.group3().yzx())
                - (Simd32x3::from(self[e321]) * other.group3().xyz())
                - (Simd32x3::from([other[e45], other[e45], other[e4315]]) * self.group1().xyx())
                - (Simd32x3::from([other[e4125], other[e4235], other[e45]]) * self.group1().yzz())
                - (self.group7().zxy() * other.group2().yzx())
                - (self.group8().zxy() * other.group0().yzx())
                - (self.group6().zxy() * other.group1().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(self[e3215] * other[e41]) - (self[e1234] * other[e15]),
                -(self[e3215] * other[e42]) - (self[e1234] * other[e25]),
                -(self[e3215] * other[e43]) - (self[e1234] * other[e35]),
                (self[e45] * other[scalar]) + (self[e1234] * other[e3215]),
            ]) + (self.group3().zxyy() * other.group0().yzxy())
                + (self.group4().zxy() * other.group2().yzx()).with_w(self[scalar] * other[e45])
                + (self.group5().zxy() * other.group1().yzx()).with_w(self[e15] * other[e41])
                + (self.group9().zxy() * other.group3().yzx()).with_w(self[e35] * other[e43])
                - (self.group9().xyxz() * other.group1().ww().with_zw(other[e4315], other[e12]))
                - (self.group9().yzzw() * other.group3().zx().with_zw(other[e45], other[e1234]))
                - (self.group0().xx().with_zw(self[scalar], self[e41]) * other.group1().xyz().with_w(other[e15]))
                - (other.group0().zx().with_zw(other[e1234], other[e23]) * self.group3().yzz().with_w(self[e4235]))
                - (other.group0().ww().with_zw(other[e31], other[e4235]) * self.group5().xyx().with_w(self[e23]))
                - (other.group1().zx().with_zw(other[scalar], other[e4315]) * self.group5().yzz().with_w(self[e31]))
                - (other.group2().zx().with_zw(other[e3215], other[e35]) * self.group4().yzz().with_w(self[e43]))
                - (other.group2().ww().with_zw(other[e42], other[e4125]) * self.group3().xyx().with_w(self[e12]))
                - (other.group3().ww().with_zw(other[e25], other[e25]) * self.group4().xyx().with_w(self[e42]))
                - (self.group3().www() * other.group3().xyz()).with_w(self[e4315] * other[e31]),
            // e423, e431, e412
            (Simd32x3::from(self[e41]) * Simd32x3::from([other[e45], other[e12], other[e4315]]))
                + (Simd32x3::from(self[e42]) * Simd32x3::from([other[e4125], other[e45], other[e23]]))
                + (Simd32x3::from(self[e43]) * Simd32x3::from([other[e31], other[e4235], other[e45]]))
                + (Simd32x3::from(self[e1234]) * other.group3().xyz())
                + (self.group5().zxy() * other.group0().yzx())
                + (self.group9().zxy() * other.group0().yzx())
                - (Simd32x3::from(self[scalar]) * other.group0().xyz())
                - (Simd32x3::from(self[e45]) * other.group0().xyz())
                - (Simd32x3::from(self[e41]) * Simd32x3::from([other[scalar], other[e4125], other[e31]]))
                - (Simd32x3::from(self[e42]) * Simd32x3::from([other[e12], other[scalar], other[e4235]]))
                - (Simd32x3::from(self[e43]) * Simd32x3::from([other[e4315], other[e23], other[scalar]]))
                - (Simd32x3::from(self[e1234]) * other.group1().xyz())
                - (Simd32x3::from([other[e43], other[e41], other[e1234]]) * self.group5().yzz())
                - (Simd32x3::from([other[e43], other[e41], other[e1234]]) * self.group9().yzz())
                - (Simd32x3::from([other[e1234], other[e1234], other[e42]]) * self.group5().xyx())
                - (Simd32x3::from([other[e1234], other[e1234], other[e42]]) * self.group9().xyx()),
            // e235, e315, e125
            (Simd32x3::from(self[e45]) * other.group2().xyz())
                + (Simd32x3::from([other[e35], other[e15], other[e3215]]) * self.group9().yzz())
                + (Simd32x3::from([other[e3215], other[e3215], other[e25]]) * self.group9().xyx())
                + (self.group5().zxy() * other.group2().yzx())
                + (self.group3().zxy() * other.group1().yzx())
                + (self.group3().zxy() * other.group3().yzx())
                - (Simd32x3::from(self[scalar]) * other.group2().xyz())
                - (Simd32x3::from(self[e3215]) * other.group1().xyz())
                - (Simd32x3::from(self[e3215]) * other.group3().xyz())
                - (Simd32x3::from([other[scalar], other[scalar], other[e31]]) * self.group3().xyx())
                - (Simd32x3::from([other[e12], other[e23], other[scalar]]) * self.group3().yzz())
                - (Simd32x3::from([other[e45], other[e45], other[e4315]]) * self.group3().xyx())
                - (Simd32x3::from([other[e35], other[e15], other[e3215]]) * self.group5().yzz())
                - (Simd32x3::from([other[e4125], other[e4235], other[e45]]) * self.group3().yzz())
                - (Simd32x3::from([other[e3215], other[e3215], other[e25]]) * self.group5().xyx())
                - (self.group9().zxy() * other.group2().yzx()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e3] * other[e31]) + (self[e4] * other[e15]) + (self[e415] * other[e45]) + (self[e425] * other[e4125]),
                (self[e1] * other[e12]) + (self[e4] * other[e25]) + (self[e425] * other[e45]) + (self[e435] * other[e4235]),
                (self[e2] * other[e23]) + (self[e4] * other[e35]) + (self[e415] * other[e4315]) + (self[e435] * other[e45]),
                -(self[e3] * other[e35]) - (self[e415] * other[e15]) - (self[e425] * other[e25]) - (self[e435] * other[e35]),
            ]) + (Simd32x4::from(self[e12345]) * other.group3())
                + (other.group2().zx().with_zw(other[e3215], self[e5]) * self.group7().yzz().with_w(other[scalar]))
                + (other.group3().ww().with_zw(other[e25], other[e3215]) * self.group7().xyx().with_w(self[e321]))
                + (self.group8().zxy() * other.group0().yzx()).with_w(self[e5] * other[e45])
                - (Simd32x4::from([self[e5], self[e5], self[e5], other[e25]]) * other.group0().xyz().with_w(self[e2]))
                - (other.group3().yzxz() * self.group6().zxy().with_w(self[e125]))
                - (other.group0().zx().with_zw(other[e1234], other[e31]) * self.group8().yzz().with_w(self[e315]))
                - (other.group0().ww().with_zw(other[e31], other[e4315]) * self.group1().xyx().with_w(self[e315]))
                - (other.group1().zx().with_zw(other[scalar], other[e12]) * self.group1().yzz().with_w(self[e125]))
                - (other.group2().ww().with_zw(other[e42], other[e4235]) * self.group8().xyx().with_w(self[e235]))
                - (self.group7().zxy() * other.group2().yzx()).with_w(self[e235] * other[e23])
                - (self.group6().www() * other.group1().xyz()).with_w(self[e1] * other[e15]),
            // e1234
            (self[e12345] * other[e1234])
                + (self[e1] * other[e41])
                + (self[e2] * other[e42])
                + (self[e3] * other[e43])
                + (self[e4] * other[scalar])
                + (self[e423] * other[e4235])
                + (self[e431] * other[e4315])
                + (self[e412] * other[e4125])
                - (self[e4] * other[e45])
                - (self[e415] * other[e41])
                - (self[e425] * other[e42])
                - (self[e435] * other[e43])
                - (self[e321] * other[e1234])
                - (self[e423] * other[e23])
                - (self[e431] * other[e31])
                - (self[e412] * other[e12]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl std::ops::Div<anti_sandwich> for Plane {
    type Output = anti_sandwich_partial<Plane>;
    fn div(self, _rhs: anti_sandwich) -> Self::Output {
        anti_sandwich_partial(self)
    }
}
impl AntiSandwich<AntiCircleRotor> for Plane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       44        0
    //    simd3        1        2        0
    //    simd4       14       14        0
    // Totals...
    // yes simd       33       60        0
    //  no simd       77      106        0
    fn anti_sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (other.group0().yzx() * self.group0().zxy()) - (other.group0().zxy() * self.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x3::from(0.0).with_w(other[e12] * self[e4125] * -1.0)
                - (other.group1().wwwy() * self.group0().xyzy())
                - (self.group0().wwwx() * other.group0().with_w(other[e23])),
            // e235, e315, e125, e4
            Simd32x4::from([
                -(other[e23] * self[e3215]) - (other[e25] * self[e4125]),
                -(other[e31] * self[e3215]) - (other[e35] * self[e4235]),
                -(other[e12] * self[e3215]) - (other[e15] * self[e4315]),
                (other[e42] * self[e4315]) + (other[e43] * self[e4125]),
            ]) + (self.group0().yzxx() * other.group2().zxy().with_w(other[e41])),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other[e12] * self[e4315]) + (other[scalar] * self[e4235]),
                (other[e23] * self[e4125]) + (other[scalar] * self[e4315]),
                (other[e31] * self[e4235]) + (other[scalar] * self[e4125]),
                -(other[e25] * self[e4315]) - (other[e35] * self[e4125]) - (other[scalar] * self[e3215]),
            ]) - (Simd32x4::from(self[e3215]) * other.group0().with_w(other[e45]))
                - (self.group0().zxyx() * other.group1().yzx().with_w(other[e15])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDipoleInversion> for Plane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       50        0
    //    simd4       19       20        0
    // Totals...
    // yes simd       39       70        0
    //  no simd       96      130        0
    fn anti_sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                other[e431] * self[e4125] * -1.0,
                other[e412] * self[e4235] * -1.0,
                other[e423] * self[e4315] * -1.0,
                (other[e2] * self[e4315]) + (other[e3] * self[e4125]),
            ]) + (self.group0().xyzx() * other.group2().www().with_w(other[e1]))
                + (self.group0().yzxw() * other.group0().zxy().with_w(other[e4])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e423] * self[e3215]) + (other[e2] * self[e4125]),
                (other[e431] * self[e3215]) + (other[e3] * self[e4235]),
                (other[e412] * self[e3215]) + (other[e1] * self[e4315]),
                -(other[e435] * self[e4125]) - (other[e4] * self[e3215]),
            ]) - (other.group1().wwwx() * self.group0().xyzx())
                - (self.group0().yzxy() * other.group3().zxy().with_w(other[e425])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e415] * self[e3215]) + (other[e315] * self[e4125]),
                (other[e425] * self[e3215]) + (other[e125] * self[e4235]),
                (other[e435] * self[e3215]) + (other[e235] * self[e4315]),
                0.0,
            ]) - (self.group0().xyzz() * other.group3().www().with_w(other[e412]))
                - (self.group0().yzxx() * other.group2().zxy().with_w(other[e423]))
                - (self.group0().wwwy() * other.group3().xyz().with_w(other[e431])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e425] * self[e4125] * -1.0,
                other[e435] * self[e4235] * -1.0,
                other[e415] * self[e4315] * -1.0,
                (other[e315] * self[e4315]) + (other[e125] * self[e4125]),
            ]) + (self.group0().yzxx() * other.group1().zxy().with_w(other[e235]))
                - (Simd32x4::from(self[e3215]) * other.group0().with_w(other[e321])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum> for Plane {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       16        0
    //    simd4        3        8        0
    // Totals...
    // yes simd       11       24        0
    //  no simd       20       48        0
    fn anti_sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            other.group0().xx().with_zw(other[e3215], 0.0) * Simd32x3::from(1.0).with_w(0.0) * self.group0().xyz().with_w(0.0) * Simd32x4::from([1.0, 1.0, 1.0, 0.0]),
            // e1, e2, e3, e5
            Simd32x4::from(other[scalar]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlatPoint> for Plane {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        6        0
    //    simd4        8       11        0
    // Totals...
    // yes simd        9       17        0
    //  no simd       33       50        0
    fn anti_sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x3::from(1.0).with_w(0.0) * other.group0().www().with_w(0.0) * self.group0().xyz().with_w(0.0) * Simd32x4::from([-1.0, -1.0, -1.0, 0.0]),
            // e15, e25, e35, e3215
            (other.group0().yzxx() * self.group0().zxyx()) + Simd32x3::from(0.0).with_w((other[e315] * self[e4315]) + (other[e125] * self[e4125]))
                - (other.group0().zxyw() * self.group0().yzxw()),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlector> for Plane {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       20        0
    //    simd4        9        9        0
    // Totals...
    // yes simd       17       29        0
    //  no simd       44       56        0
    fn anti_sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                -(other[e321] * self[e4235]) - (other[e3] * self[e4315]),
                -(other[e321] * self[e4315]) - (other[e1] * self[e4125]),
                -(other[e321] * self[e4125]) - (other[e2] * self[e4235]),
                (other[e2] * self[e4315]) + (other[e3] * self[e4125]),
            ]) + (other.group1().yzxx() * self.group0().zxyx()),
            // e15, e25, e35, e3215
            Simd32x4::from([
                -(other[e1] * self[e3215]) - (other[e5] * self[e4235]),
                -(other[e2] * self[e3215]) - (other[e5] * self[e4315]),
                -(other[e3] * self[e3215]) - (other[e5] * self[e4125]),
                (other[e315] * self[e4315]) + (other[e125] * self[e4125]),
            ]) + (other.group0().yzxx() * self.group0().zxyx())
                - (other.group0().zxyw() * self.group0().yzxw()),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiLine> for Plane {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       26        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       15       32        0
    //  no simd       33       50        0
    fn anti_sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([other[e35] * self[e4315], other[e15] * self[e4125], other[e25] * self[e4235], other[e12] * self[e4125] * -1.0])
                - (self.group0().zxyy() * other.group1().yzx().with_w(other[e31]))
                - (self.group0().wwwx() * other.group0().with_w(other[e23])),
            // e1, e2, e3, e5
            Simd32x4::from([
                other[e12] * self[e4315],
                other[e23] * self[e4125],
                other[e31] * self[e4235],
                -(other[e25] * self[e4315]) - (other[e35] * self[e4125]),
            ]) - (self.group0().zxyx() * other.group0().yzx().with_w(other[e15])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiMotor> for Plane {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       33        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       22       39        0
    //  no simd       40       57        0
    fn anti_sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (other[e35] * self[e4315]) + (other[e3215] * self[e4235]),
                (other[e15] * self[e4125]) + (other[e3215] * self[e4315]),
                (other[e25] * self[e4235]) + (other[e3215] * self[e4125]),
                other[e12] * self[e4125] * -1.0,
            ]) - (other.group0().xyzx() * self.group0().wwwx())
                - (self.group0().zxyy() * other.group1().yzx().with_w(other[e31])),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other[e12] * self[e4315]) + (other[scalar] * self[e4235]),
                (other[e23] * self[e4125]) + (other[scalar] * self[e4315]),
                (other[e31] * self[e4235]) + (other[scalar] * self[e4125]),
                -(other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]),
            ]) - (other.group0().yzxw() * self.group0().zxyw()),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiPlane> for Plane {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1       12        0
    //    simd3        1        2        0
    //    simd4        7        7        0
    // Totals...
    // yes simd        9       21        0
    //  no simd       32       46        0
    fn anti_sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                other[e3] * self[e4315] * -1.0,
                other[e1] * self[e4125] * -1.0,
                other[e2] * self[e4235] * -1.0,
                (other[e2] * self[e4315]) + (other[e3] * self[e4125]),
            ]) + (other.group0().yzxx() * self.group0().zxyx()),
            // e15, e25, e35, e3215
            (-(Simd32x3::from(other[e5]) * self.group0().xyz()) - (Simd32x3::from(self[e3215]) * other.group0().xyz())).with_w(0.0),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiScalar> for Plane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        8        0
    //    simd3        1        2        0
    //    simd4        1        2        0
    // Totals...
    // yes simd        3       12        0
    //  no simd        8       22        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from(other[e12345]) * self.group0()).geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for Plane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       41        0
    //    simd3        1        2        0
    //    simd4       13       14        0
    // Totals...
    // yes simd       31       57        0
    //  no simd       72      103        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (other.group0().zxy() * self.group0().yzx()) - (other.group0().yzx() * self.group0().zxy()),
            // e23, e31, e12, e45
            Simd32x4::from([
                other[e423] * self[e3215],
                other[e431] * self[e3215],
                other[e412] * self[e3215],
                -(other[e425] * self[e4315]) - (other[e435] * self[e4125]),
            ]) - (other.group1().wwwx() * self.group0().xyzx()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e415] * self[e3215]) + (other[e315] * self[e4125]),
                (other[e425] * self[e3215]) + (other[e125] * self[e4235]),
                (other[e435] * self[e3215]) + (other[e235] * self[e4315]),
                -(other[e431] * self[e4315]) - (other[e412] * self[e4125]),
            ]) - (self.group0().yzxx() * other.group2().zxy().with_w(other[e423])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e425] * self[e4125] * -1.0,
                other[e435] * self[e4235] * -1.0,
                other[e415] * self[e4315] * -1.0,
                (other[e315] * self[e4315]) + (other[e125] * self[e4125]),
            ]) + (self.group0().yzxx() * other.group1().zxy().with_w(other[e235]))
                - (Simd32x4::from(self[e3215]) * other.group0().with_w(other[e321])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for Plane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       41        0
    //    simd3        1        2        0
    //    simd4       14       15        0
    // Totals...
    // yes simd       32       58        0
    //  no simd       76      107        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (other.group0().zxy() * self.group0().yzx()) - (other.group0().yzx() * self.group0().zxy()),
            // e23, e31, e12, e45
            Simd32x4::from([
                other[e423] * self[e3215],
                other[e431] * self[e3215],
                other[e412] * self[e3215],
                -(other[e425] * self[e4315]) - (other[e435] * self[e4125]),
            ]) - (other.group1().wwwx() * self.group0().xyzx()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e415] * self[e3215]) + (other[e315] * self[e4125]),
                (other[e425] * self[e3215]) + (other[e125] * self[e4235]),
                (other[e435] * self[e3215]) + (other[e235] * self[e4315]),
                -(other[e431] * self[e4315]) - (other[e412] * self[e4125]),
            ]) - (self.group0().yzxx() * other.group2().zxy().with_w(other[e423])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e425] * self[e4125] * -1.0,
                other[e435] * self[e4235] * -1.0,
                other[e415] * self[e4315] * -1.0,
                (other[e125] * self[e4125]) + (other[e12345] * self[e3215]),
            ]) + (other.group2().wwwy() * self.group0().xyzy())
                + (self.group0().yzxx() * other.group1().zxy().with_w(other[e235]))
                - (Simd32x4::from(self[e3215]) * other.group0().with_w(other[e321])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for Plane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       40        0
    //    simd3        1        2        0
    //    simd4       14       14        0
    // Totals...
    // yes simd       29       56        0
    //  no simd       73      102        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (other.group0().yzx() * self.group0().zxy()) - (other.group0().zxy() * self.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x3::from(0.0).with_w(other[e12] * self[e4125] * -1.0)
                - (other.group1().wwwy() * self.group0().xyzy())
                - (self.group0().wwwx() * other.group0().with_w(other[e23])),
            // e235, e315, e125, e4
            Simd32x4::from([
                -(other[e23] * self[e3215]) - (other[e25] * self[e4125]),
                -(other[e31] * self[e3215]) - (other[e35] * self[e4235]),
                -(other[e12] * self[e3215]) - (other[e15] * self[e4315]),
                (other[e42] * self[e4315]) + (other[e43] * self[e4125]),
            ]) + (self.group0().yzxx() * other.group2().zxy().with_w(other[e41])),
            // e1, e2, e3, e5
            Simd32x4::from([
                other[e12] * self[e4315],
                other[e23] * self[e4125],
                other[e31] * self[e4235],
                -(other[e45] * self[e3215]) - (other[e35] * self[e4125]),
            ]) - (self.group0().zxyy() * other.group1().yzx().with_w(other[e25]))
                - (self.group0().wwwx() * other.group0().with_w(other[e15])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for Plane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       54        0
    //    simd4       19       19        0
    // Totals...
    // yes simd       36       73        0
    //  no simd       93      130        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                other[e1234] * self[e4235] * -1.0,
                other[e1234] * self[e4315] * -1.0,
                other[e1234] * self[e4125] * -1.0,
                (other[e4315] * self[e4315]) + (other[e4125] * self[e4125]),
            ]) + (self.group0().zxyx() * other.group0().yzx().with_w(other[e4235]))
                - (self.group0().yzxw() * other.group0().zxy().with_w(other[e1234])),
            // e415, e425, e435, e321
            Simd32x4::from([other[e4315] * self[e4125], other[e4125] * self[e4235], other[e4235] * self[e4315], other[e1234] * self[e3215] * -1.0])
                - (other.group1().wwwy() * self.group0().xyzy())
                - (self.group0().yzxz() * other.group3().zxy().with_w(other[e12]))
                - (self.group0().wwwx() * other.group0().with_w(other[e23])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e35] * self[e4315]) + (other[e3215] * self[e4235]),
                (other[e15] * self[e4125]) + (other[e3215] * self[e4315]),
                (other[e25] * self[e4235]) + (other[e3215] * self[e4125]),
                other[e35] * self[e4125] * -1.0,
            ]) - (Simd32x4::from(self[e3215]) * other.group1())
                - (other.group2().yzxx() * self.group0().zxyx())
                - (self.group0().wwwy() * other.group3().xyz().with_w(other[e25])),
            // e1, e2, e3, e4
            Simd32x4::from([
                -(other[e41] * self[e3215]) - (other[e31] * self[e4125]),
                -(other[e42] * self[e3215]) - (other[e12] * self[e4235]),
                -(other[e43] * self[e3215]) - (other[e23] * self[e4315]),
                (other[e42] * self[e4315]) + (other[e43] * self[e4125]),
            ]) + (self.group0().yzxx() * other.group1().zxy().with_w(other[e41])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum> for Plane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       16        0
    //    simd4        3        7        0
    // Totals...
    // yes simd       11       23        0
    //  no simd       20       44        0
    fn anti_sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            other.group0().xx().with_zw(other[e5], 0.0) * Simd32x3::from(1.0).with_w(0.0) * self.group0().xyz().with_w(0.0) * Simd32x4::from([-1.0, -1.0, -1.0, 0.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e12345]) * self.group0(),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for Plane {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       22        0
    //    simd4        4        7        0
    // Totals...
    // yes simd       14       29        0
    //  no simd       26       50        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x3::from(1.0).with_w(0.0) * other.group0().www().with_w(0.0) * self.group0().xyz().with_w(0.0) * Simd32x4::from([-1.0, -1.0, -1.0, 0.0]),
            // e235, e315, e125, e5
            Simd32x4::from([
                other[e35] * self[e4315],
                other[e15] * self[e4125],
                other[e25] * self[e4235],
                -(other[e25] * self[e4315]) - (other[e35] * self[e4125]) - (other[e45] * self[e3215]),
            ]) - (other.group0().yzxx() * self.group0().zxyx()),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for Plane {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       32        0
    //    simd4        6        6        0
    // Totals...
    // yes simd       22       38        0
    //  no simd       40       56        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                -(other[e45] * self[e4235]) - (other[e4125] * self[e4315]),
                -(other[e45] * self[e4315]) - (other[e4235] * self[e4125]),
                -(other[e45] * self[e4125]) - (other[e4315] * self[e4235]),
                (other[e4315] * self[e4315]) + (other[e4125] * self[e4125]),
            ]) + (other.group1().yzxx() * self.group0().zxyx()),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e35] * self[e4315]) + (other[e3215] * self[e4235]),
                (other[e15] * self[e4125]) + (other[e3215] * self[e4315]),
                (other[e25] * self[e4235]) + (other[e3215] * self[e4125]),
                -(other[e35] * self[e4125]) - (other[e45] * self[e3215]),
            ]) - (other.group0().yzxx() * self.group0().zxyx())
                - (self.group0().wwwy() * other.group1().xyz().with_w(other[e25])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for Plane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       32        0
    //    simd4        5        5        0
    // Totals...
    // yes simd       18       37        0
    //  no simd       33       52        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e415] * self[e3215]) + (other[e315] * self[e4125]),
                (other[e425] * self[e3215]) + (other[e125] * self[e4235]),
                (other[e435] * self[e3215]) + (other[e235] * self[e4315]),
                -(other[e425] * self[e4315]) - (other[e435] * self[e4125]),
            ]) - (self.group0().yzxx() * other.group1().zxy().with_w(other[e415])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e425] * self[e4125] * -1.0,
                other[e435] * self[e4235] * -1.0,
                other[e415] * self[e4315] * -1.0,
                (other[e315] * self[e4315]) + (other[e125] * self[e4125]),
            ]) + (self.group0().yzxx() * other.group0().zxy().with_w(other[e235])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for Plane {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       32        0
    //    simd4        7        7        0
    // Totals...
    // yes simd       19       39        0
    //  no simd       40       60        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e415] * self[e3215]) + (other[e315] * self[e4125]),
                (other[e425] * self[e3215]) + (other[e125] * self[e4235]),
                (other[e435] * self[e3215]) + (other[e235] * self[e4315]),
                other[e435] * self[e4125] * -1.0,
            ]) - (self.group0().xyzy() * other.group1().www().with_w(other[e425]))
                - (self.group0().yzxx() * other.group1().zxy().with_w(other[e415])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e425] * self[e4125] * -1.0,
                other[e435] * self[e4235] * -1.0,
                other[e415] * self[e4315] * -1.0,
                (other[e315] * self[e4315]) + (other[e125] * self[e4125]),
            ]) + (other.group0().zxyw() * self.group0().yzxw())
                + (self.group0().xyzx() * other.group0().www().with_w(other[e235])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for Plane {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       34       78        0
    //    simd2        6        6        0
    //    simd3       22       31        0
    //    simd4       20       20        0
    // Totals...
    // yes simd       82      135        0
    //  no simd      192      263        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([other[e4] * self[e3215], other[e1234] * self[e3215] * -1.0])
                + (Simd32x2::from(self[e4235]) * Simd32x2::from([other[e1], other[e4235]]))
                + (Simd32x2::from(self[e4315]) * Simd32x2::from([other[e2], other[e4315]]))
                + (Simd32x2::from(self[e4125]) * Simd32x2::from([other[e3], other[e4125]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                -(other[e41] * self[e3215]) - (other[e31] * self[e4125]),
                -(other[e42] * self[e3215]) - (other[e12] * self[e4235]),
                -(other[e43] * self[e3215]) - (other[e23] * self[e4315]),
                other[e43] * self[e4125],
            ]) + (self.group0().xyzx() * other.group0().xx().with_zw(other[scalar], other[e41]))
                + (self.group0().yzxy() * other.group5().zxy().with_w(other[e42])),
            // e5
            -(other[scalar] * self[e3215]) - (other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]) - (other[e45] * self[e3215]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e415] * self[e3215]) + (other[e315] * self[e4125]),
                (other[e425] * self[e3215]) + (other[e125] * self[e4235]),
                (other[e435] * self[e3215]) + (other[e235] * self[e4315]),
                other[e435] * self[e4125] * -1.0,
            ]) - (Simd32x4::from([other[e5], other[e5], other[e5], self[e4315]]) * self.group0().xyz().with_w(other[e425]))
                - (self.group0().yzxw() * other.group8().zxy().with_w(other[e4]))
                - (self.group0().wwwx() * other.group1().xyz().with_w(other[e415])),
            // e41, e42, e43
            (Simd32x3::from(other[e4]) * self.group0().xyz()) + (other.group7().zxy() * self.group0().yzx()) - (other.group7().yzx() * self.group0().zxy()),
            // e23, e31, e12
            (Simd32x3::from(self[e3215]) * other.group7()) + (other.group1().yzx() * self.group0().zxy())
                - (Simd32x3::from(other[e321]) * self.group0().xyz())
                - (other.group1().zxy() * self.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([other[e4315] * self[e4125], other[e4125] * self[e4235], other[e4235] * self[e4315], other[e1234] * self[e3215] * -1.0])
                - (self.group0().xyzy() * other.group3().www().with_w(other[e31]))
                - (self.group0().yzxz() * other.group9().zxy().with_w(other[e12]))
                - (self.group0().wwwx() * other.group4().with_w(other[e23])),
            // e423, e431, e412
            (other.group4().yzx() * self.group0().zxy()) - (Simd32x3::from(other[e1234]) * self.group0().xyz()) - (other.group4().zxy() * self.group0().yzx()),
            // e235, e315, e125
            (Simd32x3::from(other[e3215]) * self.group0().xyz()) + (other.group3().zxy() * self.group0().yzx())
                - (Simd32x3::from(self[e3215]) * other.group5())
                - (Simd32x3::from(self[e3215]) * other.group9().xyz())
                - (other.group3().yzx() * self.group0().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e425] * self[e4125] * -1.0,
                other[e435] * self[e4235] * -1.0,
                other[e415] * self[e4315] * -1.0,
                (other[e315] * self[e4315]) + (other[e125] * self[e4125]),
            ]) + (Simd32x4::from(other[e12345]) * self.group0())
                + (self.group0().yzxx() * other.group6().zxy().with_w(other[e235]))
                - (Simd32x4::from(self[e3215]) * other.group7().with_w(other[e321])),
            // e1234
            -(other[e423] * self[e4235]) - (other[e431] * self[e4315]) - (other[e412] * self[e4125]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for Plane {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       24        0
    //    simd3        1        2        0
    //    simd4        4        4        0
    // Totals...
    // yes simd       14       30        0
    //  no simd       28       46        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                other[e4125] * self[e4315] * -1.0,
                other[e4235] * self[e4125] * -1.0,
                other[e4315] * self[e4235] * -1.0,
                (other[e4315] * self[e4315]) + (other[e4125] * self[e4125]),
            ]) + (other.group0().yzxx() * self.group0().zxyx()),
            // e235, e315, e125, e5
            ((Simd32x3::from(other[e3215]) * self.group0().xyz()) - (Simd32x3::from(self[e3215]) * other.group0().xyz())).with_w(0.0),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for Plane {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       20        0
    //    simd3        2        5        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       16       33        0
    //  no simd       44       67        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(other[e4]) * self.group0().xyz(),
            // e23, e31, e12, e45
            ((self.group0().zxy() * other.group0().yzx()) - (self.group0().yzx() * other.group0().zxy())).with_w(self[e3215] * other[e4] * -1.0),
            // e15, e25, e35, scalar
            Simd32x4::from([
                -(self[e4235] * other[e5]) - (self[e3215] * other[e1]),
                -(self[e4315] * other[e5]) - (self[e3215] * other[e2]),
                -(self[e4125] * other[e5]) - (self[e3215] * other[e3]),
                (self[e4235] * other[e1]) + (self[e4315] * other[e2]) + (self[e4125] * other[e3]) + (self[e3215] * other[e4]),
            ]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for Plane {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1        8        0
    //    simd3        1        2        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        3       13        0
    //  no simd        8       26        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from(other[scalar]) * self.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
            .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for Plane {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       21        0
    //    simd3        2        6        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       13       35        0
    //  no simd       41       71        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(other[e1234]) * self.group0().xyz() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            ((self.group0().zxy() * other.group0().yzx()) - (self.group0().yzx() * other.group0().zxy())).with_w(self[e3215] * other[e1234] * -1.0),
            // e235, e315, e125, e12345
            (self.group0().xyzx() * other.group0().wwwx()) + Simd32x3::from(0.0).with_w((self[e4315] * other[e4315]) + (self[e4125] * other[e4125]))
                - (Simd32x4::from(self[e3215]) * other.group0().xyz().with_w(other[e1234])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for Plane {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       20       50        0
    //    simd4       20       21        0
    // Totals...
    // yes simd       40       71        0
    //  no simd      100      134        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e4125] * other[e431] * -1.0,
                self[e4235] * other[e412] * -1.0,
                self[e4315] * other[e423] * -1.0,
                (self[e4125] * other[e3]) + (self[e3215] * other[e4]),
            ]) + (self.group0().xyxx() * other.group3().ww().with_zw(other[e431], other[e1]))
                + (self.group0().yzzy() * other.group0().zx().with_zw(other[e4], other[e2])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e4125] * other[e2]) + (self[e3215] * other[e423]),
                (self[e4235] * other[e3]) + (self[e3215] * other[e431]),
                (self[e4315] * other[e1]) + (self[e3215] * other[e412]),
                -(self[e4125] * other[e435]) - (self[e3215] * other[e4]),
            ]) - (self.group0().xyxx() * other.group1().ww().with_zw(other[e2], other[e415]))
                - (self.group0().yzzy() * other.group3().zx().with_zw(other[e321], other[e425])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e4125] * other[e315]) + (self[e3215] * other[e415]),
                (self[e4235] * other[e125]) + (self[e3215] * other[e425]),
                (self[e4315] * other[e235]) + (self[e3215] * other[e435]),
                0.0,
            ]) - (self.group0().xyxx() * other.group2().wwy().with_w(other[e423]))
                - (self.group0().yzzy() * other.group2().zxw().with_w(other[e431]))
                - (self.group0().wwwz() * other.group3().xyz().with_w(other[e412])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e3215] * other[e423] * -1.0,
                self[e3215] * other[e431] * -1.0,
                self[e3215] * other[e412] * -1.0,
                (self[e4125] * other[e125]) + (self[e3215] * other[e12345]),
            ]) + (self.group0().xyxx() * other.group0().ww().with_zw(other[e425], other[e235]))
                + (self.group0().yzzy() * other.group1().zx().with_zw(other[e12345], other[e315]))
                - (self.group0().zxyw() * other.group1().yzxw()),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for Plane {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       53        0
    //    simd4       20       20        0
    // Totals...
    // yes simd       37       73        0
    //  no simd       97      133        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[e4315] * other[e43] * -1.0,
                self[e4125] * other[e41] * -1.0,
                self[e4125] * other[e1234] * -1.0,
                (self[e4315] * other[e4315]) + (self[e4125] * other[e4125]),
            ]) + (self.group0().zxyx() * other.group0().yzx().with_w(other[e4235]))
                - (self.group0().xyxw() * other.group2().ww().with_zw(other[e42], other[e1234])),
            // e415, e425, e435, e321
            Simd32x4::from([self[e4125] * other[e4315], self[e4235] * other[e4125], self[e4315] * other[e4235], self[e3215] * other[e1234] * -1.0])
                - (self.group0().xyxx() * other.group1().ww().with_zw(other[e4315], other[e23]))
                - (self.group0().yzzy() * other.group3().zx().with_zw(other[e45], other[e31]))
                - (self.group0().wwwz() * other.group0().xyz().with_w(other[e12])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e4235] * other[e3215]) + (self[e4315] * other[e35]),
                (self[e4315] * other[e3215]) + (self[e4125] * other[e15]),
                (self[e4235] * other[e25]) + (self[e4125] * other[e3215]),
                -(self[e3215] * other[scalar]) - (self[e3215] * other[e45]),
            ]) - (self.group0().zxyx() * other.group2().yzxx())
                - (self.group0().wwwy() * other.group1().xyz().with_w(other[e25]))
                - (self.group0().wwwz() * other.group3().xyz().with_w(other[e35])),
            // e1, e2, e3, e4
            Simd32x4::from([
                -(self[e4125] * other[e31]) - (self[e3215] * other[e41]),
                -(self[e4235] * other[e12]) - (self[e3215] * other[e42]),
                -(self[e4315] * other[e23]) - (self[e3215] * other[e43]),
                self[e4125] * other[e43],
            ]) + (self.group0().xyxx() * other.group0().ww().with_zw(other[e31], other[e41]))
                + (self.group0().yzzy() * other.group1().zx().with_zw(other[scalar], other[e42])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl std::ops::Div<anti_sandwich> for RoundPoint {
    type Output = anti_sandwich_partial<RoundPoint>;
    fn div(self, _rhs: anti_sandwich) -> Self::Output {
        anti_sandwich_partial(self)
    }
}
impl AntiSandwich<AntiCircleRotor> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        1       34        0
    //    simd3        2        4        0
    //    simd4       24       24        0
    // Totals...
    // yes simd       27       62        0
    //  no simd      103      142        0
    fn anti_sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[e4]) * other.group1().xyz()) + (other.group0().yzx() * self.group0().zxy()) - (other.group0().zxy() * self.group0().yzx()),
            // e23, e31, e12, e45
            Simd32x4::from([other[e45] * self[e1] * -1.0, other[e45] * self[e2] * -1.0, other[e45] * self[e3] * -1.0, other[e12] * self[e3]])
                + (Simd32x4::from([self[e5], self[e5], self[e5], self[e1]]) * other.group0().with_w(other[e23]))
                + (self.group0().wwwy() * other.group2().xyz().with_w(other[e31])),
            // e15, e25, e35, e1234
            (Simd32x4::from([self[e5], self[e5], self[e5], self[e1]]) * other.group1().xyz().with_w(other[e41]))
                + (self.group0().yzxy() * other.group2().zxy().with_w(other[e42]))
                + Simd32x3::from(0.0).with_w((other[e43] * self[e3]) + (other[scalar] * self[e4]))
                - (self.group0().zxyw() * other.group2().yzx().with_w(other[e45])),
            // e4235, e4315, e4125, e3215
            (other.group2() * self.group0().www().with_w(self[e5])) + (other.group1().yzxw() * self.group0().zxy().with_w(self[e5]))
                - (Simd32x4::from([self[e5], self[e5], self[e5], self[e1]]) * other.group0().with_w(other[e15]))
                - (other.group2().wwwz() * self.group0().xyzz())
                - (self.group0().yzxy() * other.group1().zxy().with_w(other[e25])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDipoleInversion> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       35       71        0
    //    simd3        0        2        0
    //    simd4       22       20        0
    // Totals...
    // yes simd       57       93        0
    //  no simd      123      157        0
    fn anti_sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([other[e1] * self[e4], other[e2] * self[e4], other[e3] * self[e4], other[e3] * self[e3] * -1.0])
                + (Simd32x4::from(self[e4]) * other.group1().xyz().with_w(other[e5]))
                + (other.group0().yzx() * self.group0().zxy()).with_w(other[e4] * self[e5])
                - (self.group0().xyzy() * other.group2().www().with_w(other[e2]))
                - (self.group0().yzxx() * other.group0().zxy().with_w(other[e1])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e321] * self[e1]) + (other[e235] * self[e4]) + (other[e3] * self[e2]),
                (other[e321] * self[e2]) + (other[e315] * self[e4]) + (other[e1] * self[e3]),
                (other[e321] * self[e3]) + (other[e125] * self[e4]) + (other[e2] * self[e1]),
                -(other[e425] * self[e2]) - (other[e435] * self[e3]) - (other[e5] * self[e4]),
            ]) + (Simd32x4::from(self[e5]) * other.group0().with_w(other[e4]))
                - (self.group0().zxyx() * other.group3().yzx().with_w(other[e415])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e415] * self[e5]) + (other[e125] * self[e2]) + (other[e5] * self[e1]),
                (other[e425] * self[e5]) + (other[e235] * self[e3]) + (other[e5] * self[e2]),
                (other[e435] * self[e5]) + (other[e315] * self[e1]) + (other[e5] * self[e3]),
                -(other[e315] * self[e2]) - (other[e125] * self[e3]),
            ]) - (Simd32x4::from([self[e5], self[e5], self[e5], self[e1]]) * other.group3().xyz().with_w(other[e235]))
                - (other.group2().yzx() * self.group0().zxy()).with_w(other[e321] * self[e5]),
            // e1, e2, e3, e4
            Simd32x4::from([
                -(other[e425] * self[e3]) - (other[e235] * self[e4]),
                -(other[e435] * self[e1]) - (other[e315] * self[e4]),
                -(other[e415] * self[e2]) - (other[e125] * self[e4]),
                (other[e412] * self[e3]) + (other[e321] * self[e4]),
            ]) + (Simd32x4::from([self[e5], self[e5], self[e5], self[e1]]) * other.group0().with_w(other[e423]))
                + (self.group0().yzxy() * other.group1().zxy().with_w(other[e431])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        4       24        0
    //    simd4       15       19        0
    // Totals...
    // yes simd       19       43        0
    //  no simd       64      100        0
    fn anti_sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x3::from(0.0).with_w(other[e3215] * self[e4]),
            // e23, e31, e12, e45
            Simd32x3::from(0.0).with_w(other[e3215] * self[e4]),
            // e15, e25, e35, e1234
            self.group0() * other.group0().xx().with_zw(other[e3215], other[scalar]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[scalar]) * self.group0().xyz().with_w(self[e5]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlatPoint> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       38        0
    //    simd3        2        5        0
    //    simd4       11       12        0
    // Totals...
    // yes simd       31       55        0
    //  no simd       68      101        0
    fn anti_sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            ((Simd32x3::from(other[e321]) * self.group0().xyz()) + (Simd32x3::from(self[e4]) * other.group0().xyz())).with_w(0.0),
            // e235, e315, e125, e4
            ((other.group0().zxy() * self.group0().yzx()) - (other.group0().yzx() * self.group0().zxy())).with_w(other[e321] * self[e4]),
            // e1, e2, e3, e5
            Simd32x4::from([self[e4], self[e4], self[e4], 1.0])
                * other
                    .group0()
                    .xyz()
                    .with_w(-(other[e235] * self[e1]) - (other[e315] * self[e2]) - (other[e125] * self[e3]) - (other[e321] * self[e5]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlector> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       23       47        0
    //    simd3        3        4        0
    //    simd4       14       17        0
    // Totals...
    // yes simd       40       68        0
    //  no simd       88      127        0
    fn anti_sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([self[e4], self[e4], self[e4], 1.0])
                * other
                    .group1()
                    .xyz()
                    .with_w((other[e5] * self[e4]) - (other[e1] * self[e1]) - (other[e2] * self[e2]) - (other[e3] * self[e3])),
            // e415, e425, e435, e321
            ((Simd32x3::from(other[e321]) * self.group0().xyz()) + (Simd32x3::from(self[e4]) * other.group0().xyz()) + (other.group1().zxy() * self.group0().yzx())
                - (other.group1().yzx() * self.group0().zxy()))
            .with_w(other[e5] * self[e4] * -1.0),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e125] * self[e2]) + (other[e5] * self[e1]),
                (other[e235] * self[e3]) + (other[e5] * self[e2]),
                (other[e315] * self[e1]) + (other[e5] * self[e3]),
                -(other[e125] * self[e3]) - (other[e321] * self[e5]),
            ]) - (Simd32x4::from([self[e5], self[e5], self[e5], self[e2]]) * other.group1().xyz().with_w(other[e315]))
                - (other.group0().yzxx() * self.group0().zxyx()),
            // e1, e2, e3, e4
            Simd32x4::from(self[e4]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiLine> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       36        0
    //    simd3        0        5        0
    //    simd4       18       16        0
    // Totals...
    // yes simd       24       57        0
    //  no simd       78      115        0
    fn anti_sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[e4]) * other.group0(),
            // e23, e31, e12, e45
            Simd32x4::from([self[e4], self[e4], self[e4], 1.0]) * other.group1().with_w((other[e23] * self[e1]) + (other[e31] * self[e2]) + (other[e12] * self[e3])),
            // e15, e25, e35, e1234
            (Simd32x3::from(self[e5]) * other.group0()).with_w(0.0) + (other.group1().zxy() * self.group0().yzx()).with_w(0.0)
                - (other.group1().yzx() * self.group0().zxy()).with_w(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e31] * self[e3]) + (other[e15] * self[e4]),
                (other[e12] * self[e1]) + (other[e25] * self[e4]),
                (other[e23] * self[e2]) + (other[e35] * self[e4]),
                -(other[e25] * self[e2]) - (other[e35] * self[e3]),
            ]) - (self.group0().yzxx() * other.group0().zxy().with_w(other[e15])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiMotor> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       32        0
    //    simd3        3        4        0
    //    simd4       18       21        0
    // Totals...
    // yes simd       28       57        0
    //  no simd       88      128        0
    fn anti_sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(self[e4]) * other.group0().xyz().with_w(other[e3215]),
            // e23, e31, e12, e45
            Simd32x4::from([self[e4], self[e4], self[e4], 1.0])
                * other
                    .group1()
                    .xyz()
                    .with_w((other[e23] * self[e1]) + (other[e31] * self[e2]) + (other[e12] * self[e3]) + (other[e3215] * self[e4])),
            // e15, e25, e35, e1234
            ((Simd32x3::from(other[e3215]) * self.group0().xyz()) + (Simd32x3::from(self[e5]) * other.group0().xyz()) + (other.group1().zxy() * self.group0().yzx())
                - (other.group1().yzx() * self.group0().zxy()))
            .with_w(other[scalar] * self[e4]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([other[e15] * self[e4], other[e25] * self[e4], other[e35] * self[e4], other[e35] * self[e3] * -1.0])
                + (other.group0().yzxw() * self.group0().zxy().with_w(self[e5]))
                - (self.group0().xyzy() * other.group0().www().with_w(other[e25]))
                - (self.group0().yzxx() * other.group0().zxy().with_w(other[e15])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiPlane> for RoundPoint {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       30        0
    //    simd3        3        6        0
    //    simd4        7        7        0
    // Totals...
    // yes simd       25       43        0
    //  no simd       52       76        0
    fn anti_sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[e4]) * other.group0().xyz(),
            // e415, e425, e435, e321
            ((other.group0().zxy() * self.group0().yzx()) - (other.group0().yzx() * self.group0().zxy())).with_w(other[e5] * self[e4] * -1.0),
            // e235, e315, e125, e12345
            (Simd32x4::from(other[e5]) * self.group0()) + Simd32x3::from(0.0).with_w(-(other[e2] * self[e2]) - (other[e3] * self[e3]))
                - (Simd32x4::from([self[e5], self[e5], self[e5], self[e1]]) * other.group0().xyzx()),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiScalar> for RoundPoint {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        5        0
    //    simd3        1        3        0
    //    simd4        3        4        0
    // Totals...
    // yes simd        6       12        0
    //  no simd       17       30        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return RoundPoint::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from(other[e12345]) * self.group0(), /* e5 */ other[e12345] * self[e5])
            .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       28       61        0
    //    simd3        2        4        0
    //    simd4       15       14        0
    // Totals...
    // yes simd       45       79        0
    //  no simd       94      129        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[e4]) * other.group1().xyz()) + (other.group0().yzx() * self.group0().zxy()) - (other.group0().zxy() * self.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e423] * self[e5]) + (other[e321] * self[e1]) + (other[e235] * self[e4]),
                (other[e431] * self[e5]) + (other[e321] * self[e2]) + (other[e315] * self[e4]),
                (other[e412] * self[e5]) + (other[e321] * self[e3]) + (other[e125] * self[e4]),
                -(other[e415] * self[e1]) - (other[e425] * self[e2]) - (other[e435] * self[e3]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                other[e315] * self[e3] * -1.0,
                other[e125] * self[e1] * -1.0,
                other[e235] * self[e2] * -1.0,
                (other[e412] * self[e3]) + (other[e321] * self[e4]),
            ]) + (Simd32x4::from([self[e5], self[e5], self[e5], self[e2]]) * other.group1().xyz().with_w(other[e431]))
                + (self.group0().yzxx() * other.group2().zxy().with_w(other[e423])),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other[e423] * self[e5]) + (other[e435] * self[e2]),
                (other[e431] * self[e5]) + (other[e415] * self[e3]),
                (other[e412] * self[e5]) + (other[e425] * self[e1]),
                -(other[e321] * self[e5]) - (other[e125] * self[e3]),
            ]) - (self.group0().zxyy() * other.group1().yzx().with_w(other[e315]))
                - (self.group0().wwwx() * other.group2().with_w(other[e235])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       29       62        0
    //    simd3        2        4        0
    //    simd4       16       15        0
    // Totals...
    // yes simd       47       81        0
    //  no simd       99      134        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[e4]) * other.group1().xyz()) + (other.group0().yzx() * self.group0().zxy()) - (other.group0().zxy() * self.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e423] * self[e5]) + (other[e321] * self[e1]) + (other[e235] * self[e4]),
                (other[e431] * self[e5]) + (other[e321] * self[e2]) + (other[e315] * self[e4]),
                (other[e412] * self[e5]) + (other[e321] * self[e3]) + (other[e125] * self[e4]),
                -(other[e415] * self[e1]) - (other[e425] * self[e2]) - (other[e435] * self[e3]),
            ]),
            // e235, e315, e125, e4
            Simd32x4::from([
                other[e315] * self[e3] * -1.0,
                other[e125] * self[e1] * -1.0,
                other[e235] * self[e2] * -1.0,
                (other[e412] * self[e3]) + (other[e321] * self[e4]) + (other[e12345] * self[e4]),
            ]) + (Simd32x4::from([self[e5], self[e5], self[e5], self[e1]]) * other.group1().xyz().with_w(other[e423]))
                + (self.group0().yzxy() * other.group2().zxy().with_w(other[e431])),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other[e435] * self[e2]) + (other[e12345] * self[e1]),
                (other[e415] * self[e3]) + (other[e12345] * self[e2]),
                (other[e425] * self[e1]) + (other[e12345] * self[e3]),
                -(other[e315] * self[e2]) - (other[e125] * self[e3]),
            ]) + (Simd32x4::from(self[e5]) * other.group0().with_w(other[e12345]))
                - (other.group1().yzxw() * self.group0().zxy().with_w(self[e5]))
                - (other.group2().xyzx() * self.group0().wwwx()),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0       39        0
    //    simd3        2        5        0
    //    simd4       23       21        0
    // Totals...
    // yes simd       25       65        0
    //  no simd       98      138        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[e4]) * other.group1().xyz()) + (other.group0().yzx() * self.group0().zxy()) - (other.group0().zxy() * self.group0().yzx()),
            // e23, e31, e12, e45
            Simd32x4::from([other[e45] * self[e1] * -1.0, other[e45] * self[e2] * -1.0, other[e45] * self[e3] * -1.0, other[e12] * self[e3]])
                + (Simd32x4::from([self[e5], self[e5], self[e5], self[e1]]) * other.group0().with_w(other[e23]))
                + (self.group0().wwwy() * other.group2().with_w(other[e31])),
            // e15, e25, e35, e1234
            (Simd32x4::from([self[e5], self[e5], self[e5], self[e2]]) * other.group1().xyz().with_w(other[e42]))
                + (self.group0().yzxx() * other.group2().zxy().with_w(other[e41]))
                + Simd32x3::from(0.0).with_w(other[e43] * self[e3])
                - (self.group0().zxyw() * other.group2().yzx().with_w(other[e45])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([other[e31] * self[e3], other[e12] * self[e1], other[e23] * self[e2], other[e35] * self[e3] * -1.0])
                + (other.group2() * self.group0().www()).with_w(other[e45] * self[e5])
                - (Simd32x4::from([self[e5], self[e5], self[e5], self[e1]]) * other.group0().with_w(other[e15]))
                - (self.group0().yzxy() * other.group1().zxy().with_w(other[e25])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       51        0
    //    simd3        0        2        0
    //    simd4       28       27        0
    // Totals...
    // yes simd       40       80        0
    //  no simd      124      165        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(other[e43] * self[e2]) - (other[e1234] * self[e1]) - (other[e4235] * self[e4]),
                -(other[e41] * self[e3]) - (other[e1234] * self[e2]) - (other[e4315] * self[e4]),
                -(other[e42] * self[e1]) - (other[e1234] * self[e3]) - (other[e4125] * self[e4]),
                (other[e4315] * self[e2]) + (other[e4125] * self[e3]) + (other[e3215] * self[e4]),
            ]) + (self.group0().wwwx() * other.group1().xyz().with_w(other[e4235]))
                + (other.group0().yzx() * self.group0().zxy()).with_w(other[e1234] * self[e5]),
            // e23, e31, e12, e45
            Simd32x4::from([other[e4125] * self[e2] * -1.0, other[e4235] * self[e3] * -1.0, other[e4315] * self[e1] * -1.0, other[e3215] * self[e4]])
                + (Simd32x4::from([self[e5], self[e5], self[e5], self[e1]]) * other.group0().with_w(other[e23]))
                + (self.group0().zxyz() * other.group3().yzx().with_w(other[e12]))
                + (self.group0().wwwy() * other.group2().xyz().with_w(other[e31]))
                - (other.group1().www() * self.group0().xyz()).with_w(other[e1234] * self[e5]),
            // e15, e25, e35, e1234
            Simd32x4::from([other[e3215] * self[e1], other[e3215] * self[e2], other[e3215] * self[e3], 0.0])
                + (Simd32x4::from([self[e5], self[e5], self[e5], self[e1]]) * other.group1().xyz().with_w(other[e41]))
                + (Simd32x4::from([self[e5], self[e5], self[e5], self[e3]]) * other.group3().xyz().with_w(other[e43]))
                + (self.group0().yzxy() * other.group2().zxy().with_w(other[e42]))
                - (self.group0().zxyw() * other.group2().yzx().with_w(other[e45])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([other[e15] * self[e4], other[e25] * self[e4], other[e35] * self[e4], other[e35] * self[e3] * -1.0])
                + (other.group1().yzxw() * self.group0().zxy().with_w(self[e5]))
                - (Simd32x4::from([self[e5], self[e5], self[e5], self[e1]]) * other.group0().with_w(other[e15]))
                - (self.group0().yzxy() * other.group1().zxy().with_w(other[e25])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       36        0
    //    simd4       12       14        0
    // Totals...
    // yes simd       28       50        0
    //  no simd       64       92        0
    fn anti_sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x3::from(0.0).with_w(other[e5] * self[e4]),
            // e415, e425, e435, e321
            Simd32x3::from(0.0).with_w(other[e5] * self[e4] * -1.0),
            // e235, e315, e125, e5
            other.group0().xx().with_zw(other[e5], other[e12345]) * self.group0().xyz().with_w(self[e5]),
            // e1, e2, e3, e4
            Simd32x4::from(other[e12345]) * self.group0(),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        3       31        0
    //    simd3        2        5        0
    //    simd4       15       15        0
    // Totals...
    // yes simd       20       51        0
    //  no simd       69      106        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            ((Simd32x3::from(self[e4]) * other.group0().xyz()) - (Simd32x3::from(other[e45]) * self.group0().xyz())).with_w(0.0),
            // e15, e25, e35, e1234
            ((other.group0().zxy() * self.group0().yzx()) - (other.group0().yzx() * self.group0().zxy())).with_w(other[e45] * self[e4] * -1.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e4], self[e4], self[e4], 1.0])
                * other
                    .group0()
                    .xyz()
                    .with_w((other[e45] * self[e5]) - (other[e15] * self[e1]) - (other[e25] * self[e2]) - (other[e35] * self[e3])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       10       33        0
    //    simd3        6        8        0
    //    simd4       15       19        0
    // Totals...
    // yes simd       31       60        0
    //  no simd       88      133        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([self[e4], self[e4], self[e4], 1.0])
                * other
                    .group1()
                    .xyz()
                    .with_w((other[e4235] * self[e1]) + (other[e4315] * self[e2]) + (other[e4125] * self[e3]) + (other[e3215] * self[e4]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            ((Simd32x3::from(self[e4]) * other.group0().xyz()) + (other.group1().yzx() * self.group0().zxy())
                - (Simd32x3::from(other[e45]) * self.group0().xyz())
                - (other.group1().zxy() * self.group0().yzx()))
            .with_w(other[e3215] * self[e4]),
            // e15, e25, e35, e1234
            ((Simd32x3::from(other[e3215]) * self.group0().xyz()) + (Simd32x3::from(self[e5]) * other.group1().xyz()) + (other.group0().zxy() * self.group0().yzx())
                - (other.group0().yzx() * self.group0().zxy()))
            .with_w(other[e45] * self[e4] * -1.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e4], self[e4], self[e4], 1.0])
                * other
                    .group0()
                    .xyz()
                    .with_w((other[e45] * self[e5]) - (other[e15] * self[e1]) - (other[e25] * self[e2]) - (other[e35] * self[e3])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       17       41        0
    //    simd3        0        5        0
    //    simd4       15       13        0
    // Totals...
    // yes simd       32       59        0
    //  no simd       77      108        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[e4]) * other.group0(),
            // e415, e425, e435, e321
            Simd32x4::from([self[e4], self[e4], self[e4], 1.0]) * other.group1().with_w(-(other[e415] * self[e1]) - (other[e425] * self[e2]) - (other[e435] * self[e3])),
            // e235, e315, e125, e4
            (Simd32x3::from(self[e5]) * other.group0()).with_w(0.0) + (other.group1().zxy() * self.group0().yzx()).with_w(0.0)
                - (other.group1().yzx() * self.group0().zxy()).with_w(0.0),
            // e1, e2, e3, e5
            Simd32x4::from([other[e435] * self[e2], other[e415] * self[e3], other[e425] * self[e1], other[e125] * self[e3] * -1.0])
                - (self.group0().zxyx() * other.group0().yzx().with_w(other[e235]))
                - (self.group0().wwwy() * other.group1().with_w(other[e315])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       23       46        0
    //    simd3        3        4        0
    //    simd4       14       16        0
    // Totals...
    // yes simd       40       66        0
    //  no simd       88      122        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(self[e4]) * other.group0().xyz().with_w(other[e5]),
            // e415, e425, e435, e321
            Simd32x4::from([self[e4], self[e4], self[e4], 1.0])
                * other
                    .group1()
                    .xyz()
                    .with_w(-(other[e415] * self[e1]) - (other[e425] * self[e2]) - (other[e435] * self[e3]) - (other[e5] * self[e4])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e125] * self[e2]) + (other[e5] * self[e1]),
                (other[e235] * self[e3]) + (other[e5] * self[e2]),
                (other[e315] * self[e1]) + (other[e5] * self[e3]),
                -(other[e315] * self[e2]) - (other[e125] * self[e3]),
            ]) + (Simd32x4::from(self[e5]) * other.group0())
                - (other.group1().yzxx() * self.group0().zxyx()),
            // e1, e2, e3, e4
            ((Simd32x3::from(other[e12345]) * self.group0().xyz()) + (other.group0().zxy() * self.group0().yzx())
                - (Simd32x3::from(self[e4]) * other.group1().xyz())
                - (other.group0().yzx() * self.group0().zxy()))
            .with_w(other[e12345] * self[e4]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for RoundPoint {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       56       90        0
    //    simd2        4        4        0
    //    simd3       32       42        0
    //    simd4       24       24        0
    // Totals...
    // yes simd      116      160        0
    //  no simd      256      320        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (other[e4315] * self[e2]) + (other[e4125] * self[e3]) + (other[e3215] * self[e4]),
                -(other[e1] * self[e1]) - (other[e2] * self[e2]) - (other[e3] * self[e3]),
            ]) + (Simd32x2::from(self[e5]) * Simd32x2::from([other[e1234], other[e4]]))
                + (Simd32x2::from([other[e4235], other[e5]]) * self.group0().xw()),
            // e1, e2, e3, e4
            Simd32x4::from([
                -(other[e425] * self[e3]) - (other[e235] * self[e4]),
                -(other[e435] * self[e1]) - (other[e315] * self[e4]),
                -(other[e415] * self[e2]) - (other[e125] * self[e4]),
                (other[e321] * self[e4]) + (other[e412] * self[e3]),
            ]) + (Simd32x4::from(other[e12345]) * self.group0())
                + (Simd32x4::from([self[e5], self[e5], self[e5], self[e1]]) * other.group7().with_w(other[e423]))
                + (self.group0().yzxy() * other.group6().zxy().with_w(other[e431])),
            // e5
            (other[e12345] * self[e5]) - (other[e321] * self[e5]) - (other[e235] * self[e1]) - (other[e315] * self[e2]) - (other[e125] * self[e3]),
            // e15, e25, e35, e45
            (Simd32x4::from(other[e3215]) * self.group0())
                + (Simd32x4::from([self[e5], self[e5], self[e5], self[e1]]) * other.group5().with_w(other[e23]))
                + (Simd32x4::from([self[e5], self[e5], self[e5], self[e3]]) * other.group9().xyz().with_w(other[e12]))
                + (self.group0().yzxy() * other.group3().zxy().with_w(other[e31]))
                - (other.group3().yzx() * self.group0().zxy()).with_w(other[e1234] * self[e5]),
            // e41, e42, e43
            (Simd32x3::from(self[e4]) * other.group5()) + (other.group4().yzx() * self.group0().zxy())
                - (Simd32x3::from(other[e1234]) * self.group0().xyz())
                - (Simd32x3::from(self[e4]) * other.group9().xyz())
                - (other.group4().zxy() * self.group0().yzx()),
            // e23, e31, e12
            (Simd32x3::from(self[e4]) * other.group3().xyz()) + (Simd32x3::from(self[e5]) * other.group4()) + (other.group9().yzx() * self.group0().zxy())
                - (Simd32x3::from(other[e45]) * self.group0().xyz())
                - (other.group9().zxy() * self.group0().yzx()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e3] * self[e2]) + (other[e321] * self[e1]) + (other[e235] * self[e4]),
                (other[e1] * self[e3]) + (other[e321] * self[e2]) + (other[e315] * self[e4]),
                (other[e2] * self[e1]) + (other[e321] * self[e3]) + (other[e125] * self[e4]),
                -(other[e5] * self[e4]) - (other[e425] * self[e2]) - (other[e435] * self[e3]),
            ]) + (Simd32x4::from(self[e5]) * other.group7().with_w(other[e4]))
                - (self.group0().zxyx() * other.group1().yzx().with_w(other[e415])),
            // e423, e431, e412
            (Simd32x3::from(self[e4]) * other.group1().xyz()) + (Simd32x3::from(self[e4]) * other.group6().xyz()) + (other.group7().yzx() * self.group0().zxy())
                - (Simd32x3::from(other[e4]) * self.group0().xyz())
                - (other.group7().zxy() * self.group0().yzx()),
            // e235, e315, e125
            (Simd32x3::from(other[e5]) * self.group0().xyz()) + (Simd32x3::from(self[e5]) * other.group6().xyz()) + (other.group8().zxy() * self.group0().yzx())
                - (Simd32x3::from(self[e5]) * other.group1().xyz())
                - (other.group8().yzx() * self.group0().zxy()),
            // e4235, e4315, e4125, e3215
            (other.group3() * self.group0().www().with_w(self[e5])) + (other.group5().yzx() * self.group0().zxy()).with_w(other[scalar] * self[e5])
                - (Simd32x4::from([self[e5], self[e5], self[e5], self[e2]]) * other.group4().with_w(other[e25]))
                - (self.group0().xyzx() * other.group0().xx().with_zw(other[scalar], other[e15]))
                - (self.group0().yzxz() * other.group5().zxy().with_w(other[e35])),
            // e1234
            (other[scalar] * self[e4]) + (other[e41] * self[e1]) + (other[e42] * self[e2]) + (other[e43] * self[e3]) - (other[e45] * self[e4]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for RoundPoint {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       20        0
    //    simd3        3        7        0
    //    simd4       10       10        0
    // Totals...
    // yes simd       19       37        0
    //  no simd       55       81        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[e4]) * other.group0().xyz() * Simd32x3::from(-1.0),
            // e23, e31, e12, e45
            ((other.group0().yzx() * self.group0().zxy()) - (other.group0().zxy() * self.group0().yzx())).with_w(other[e3215] * self[e4]),
            // e15, e25, e35, scalar
            (Simd32x4::from([self[e5], self[e5], self[e5], self[e1]]) * other.group0().xyzx())
                + (other.group0().wwwy() * self.group0().xyzy())
                + Simd32x3::from(0.0).with_w((other[e4125] * self[e3]) + (other[e3215] * self[e4])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for RoundPoint {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       30        0
    //    simd3        3        6        0
    //    simd4        8        8        0
    // Totals...
    // yes simd       27       44        0
    //  no simd       57       80        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return CircleRotor::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[e4]) * other.group0().xyz()) - (Simd32x3::from(other[e4]) * self.group0().xyz()),
            // e415, e425, e435, e321
            (other.group0().zxyw() * self.group0().yzx().with_w(self[e5])) - (other.group0().yzx() * self.group0().zxy()).with_w(other[e5] * self[e4]),
            // e235, e315, e125, e12345
            (Simd32x4::from([other[e5], other[e5], other[e5], self[e5]]) * self.group0().xyz().with_w(other[e4]))
                + Simd32x3::from(0.0).with_w((other[e5] * self[e4]) - (other[e2] * self[e2]) - (other[e3] * self[e3]))
                - (Simd32x4::from([self[e5], self[e5], self[e5], self[e1]]) * other.group0().xyzx()),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for RoundPoint {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       13        0
    //    simd3        1        3        0
    //    simd4        1        3        0
    // Totals...
    // yes simd        9       19        0
    //  no simd       14       34        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[scalar]) * self.group0().xyz().with_w(self[e5]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1234
            self[e4] * other[scalar],
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for RoundPoint {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       21        0
    //    simd3        3        6        0
    //    simd4       11       11        0
    // Totals...
    // yes simd       21       38        0
    //  no simd       60       83        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return AntiCircleRotor::from_groups(
            // e41, e42, e43
            -(Simd32x3::from(self[e4]) * other.group0().xyz()) - (Simd32x3::from(other[e1234]) * self.group0().xyz()),
            // e23, e31, e12, e45
            (self.group0().zxyw() * other.group0().yzxw()) - (self.group0().yzx() * other.group0().zxy()).with_w(self[e5] * other[e1234]),
            // e15, e25, e35, scalar
            (Simd32x4::from([self[e5], self[e5], self[e5], other[e4315]]) * other.group0().xyz().with_w(self[e2]))
                + (self.group0().xyzx() * other.group0().wwwx())
                + Simd32x3::from(0.0).with_w((self[e3] * other[e4125]) + (self[e4] * other[e3215]) + (self[e5] * other[e1234])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for RoundPoint {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       68        0
    //    simd3        0        2        0
    //    simd4       24       22        0
    // Totals...
    // yes simd       56       92        0
    //  no simd      128      162        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([self[e4] * other[e1], self[e4] * other[e2], self[e4] * other[e3], self[e3] * other[e3] * -1.0])
                + (self.group0().zxyw() * other.group0().yzx().with_w(other[e5]))
                + (self.group0().www() * other.group1().xyz()).with_w(self[e5] * other[e4])
                - (self.group0().xyxx() * other.group3().ww().with_zw(other[e431], other[e1]))
                - (self.group0().yzzy() * other.group0().zx().with_zw(other[e4], other[e2])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (self[e2] * other[e3]) + (self[e4] * other[e235]) + (self[e5] * other[e423]),
                (self[e3] * other[e1]) + (self[e4] * other[e315]) + (self[e5] * other[e431]),
                (self[e3] * other[e321]) + (self[e4] * other[e125]) + (self[e5] * other[e412]),
                -(self[e2] * other[e425]) - (self[e3] * other[e435]) - (self[e4] * other[e5]),
            ]) + (other.group1().ww().with_zw(other[e2], self[e5]) * self.group0().xyx().with_w(other[e4]))
                - (self.group0().zxyx() * other.group3().yzx().with_w(other[e415])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e2] * other[e125]) + (self[e5] * other[e415]),
                (self[e3] * other[e235]) + (self[e5] * other[e425]),
                (self[e3] * other[e5]) + (self[e5] * other[e435]),
                -(self[e3] * other[e125]) - (self[e5] * other[e321]),
            ]) + (self.group0().xyx() * other.group2().wwy()).with_w(self[e5] * other[e12345])
                - (Simd32x4::from([self[e5], self[e5], self[e5], other[e315]]) * other.group3().xyz().with_w(self[e2]))
                - (self.group0().zxyx() * other.group2().yzxx()),
            // e1, e2, e3, e4
            Simd32x4::from([
                -(self[e3] * other[e425]) - (self[e4] * other[e235]),
                -(self[e1] * other[e435]) - (self[e4] * other[e315]),
                -(self[e2] * other[e415]) - (self[e4] * other[e125]),
                (self[e4] * other[e12345]) + (self[e4] * other[e321]),
            ]) + (Simd32x4::from([self[e5], self[e5], self[e5], other[e412]]) * other.group0().xyz().with_w(self[e3]))
                + (self.group0().xyxx() * other.group0().ww().with_zw(other[e425], other[e423]))
                + (self.group0().yzzy() * other.group1().zx().with_zw(other[e12345], other[e431])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for RoundPoint {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       43        0
    //    simd3        0        2        0
    //    simd4       29       30        0
    // Totals...
    // yes simd       41       75        0
    //  no simd      128      169        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(self[e1] * other[e1234]) - (self[e2] * other[e43]) - (self[e4] * other[e4235]),
                -(self[e2] * other[e1234]) - (self[e3] * other[e41]) - (self[e4] * other[e4315]),
                -(self[e1] * other[e42]) - (self[e3] * other[e1234]) - (self[e4] * other[e4125]),
                (self[e3] * other[e4125]) + (self[e4] * other[e3215]) + (self[e5] * other[e1234]),
            ]) + (self.group0().zxyx() * other.group0().yzx().with_w(other[e4235]))
                + (self.group0().wwwy() * other.group1().xyz().with_w(other[e4315])),
            // e23, e31, e12, e45
            Simd32x4::from([self[e2] * other[e4125] * -1.0, self[e3] * other[e4235] * -1.0, self[e3] * other[e45] * -1.0, self[e4] * other[e3215]])
                + (Simd32x4::from([self[e5], self[e5], self[e5], other[e12]]) * other.group0().xyz().with_w(self[e3]))
                + (self.group0().zxyx() * other.group3().yzx().with_w(other[e23]))
                + (self.group0().wwwy() * other.group2().xyz().with_w(other[e31]))
                - (other.group1().ww().with_zw(other[e4315], self[e5]) * self.group0().xyx().with_w(other[e1234])),
            // e15, e25, e35, e1234
            (Simd32x4::from([self[e5], self[e5], self[e5], other[e43]]) * other.group1().xyz().with_w(self[e3]))
                + (Simd32x4::from([self[e5], self[e5], self[e5], other[scalar]]) * other.group3().xyz().with_w(self[e4]))
                + (self.group0().xyxx() * other.group3().ww().with_zw(other[e25], other[e41]))
                + (self.group0().yzzy() * other.group2().zx().with_zw(other[e3215], other[e42]))
                - (self.group0().zxyw() * other.group2().yzx().with_w(other[e45])),
            // e4235, e4315, e4125, e3215
            (self.group0().zxy() * other.group1().yzx()).with_w(self[e5] * other[scalar]) + (self.group0().www() * other.group2().xyz()).with_w(self[e5] * other[e45])
                - (Simd32x4::from([self[e5], self[e5], self[e5], other[e35]]) * other.group0().xyz().with_w(self[e3]))
                - (self.group0().xyxx() * other.group0().ww().with_zw(other[e31], other[e15]))
                - (self.group0().yzzy() * other.group1().zx().with_zw(other[scalar], other[e25])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl std::ops::Div<anti_sandwich> for Scalar {
    type Output = anti_sandwich_partial<Scalar>;
    fn div(self, _rhs: anti_sandwich) -> Self::Output {
        anti_sandwich_partial(self)
    }
}
impl AntiSandwich<AntiCircleRotor> for Scalar {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        3        0
    //    simd4        0        7        0
    // Totals...
    // yes simd        0       10        0
    //  no simd        0       37        0
    fn anti_sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[scalar]) * other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            Simd32x4::from(self[scalar]) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e12345
            Simd32x4::from(self[scalar]) * other.group2() * Simd32x4::from(-1.0),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDipoleInversion> for Scalar {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        3        0
    //    simd4        0       11        0
    // Totals...
    // yes simd        0       14        0
    //  no simd        0       53        0
    fn anti_sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[scalar]) * other.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(self[scalar]) * other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e1234
            Simd32x4::from(self[scalar]) * other.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[scalar]) * other.group3() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum> for Scalar {
    type Output = AntiDualNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        3        0
    // no simd        0        6        0
    fn anti_sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return DualNum::from_groups(/* e5, e12345 */ Simd32x2::from(self[scalar]) * other.group0() * Simd32x2::from(-1.0)).geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlatPoint> for Scalar {
    type Output = AntiFlatPoint;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn anti_sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return FlatPoint::from_groups(/* e15, e25, e35, e45 */ Simd32x4::from(self[scalar]) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
            .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlector> for Scalar {
    type Output = AntiFlector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        8        0
    // no simd        0       32        0
    fn anti_sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from(self[scalar]) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[scalar]) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiLine> for Scalar {
    type Output = AntiLine;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        6        0
    // no simd        0       18        0
    fn anti_sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return Line::from_groups(
            // e415, e425, e435
            Simd32x3::from(self[scalar]) * other.group0() * Simd32x3::from(-1.0),
            // e235, e315, e125
            Simd32x3::from(self[scalar]) * other.group1() * Simd32x3::from(-1.0),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiMotor> for Scalar {
    type Output = AntiMotor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        6        0
    // no simd        0       24        0
    fn anti_sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from(self[scalar]) * other.group0() * Simd32x4::from(-1.0),
            // e235, e315, e125, e5
            Simd32x4::from(self[scalar]) * other.group1() * Simd32x4::from(-1.0),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiPlane> for Scalar {
    type Output = AntiPlane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn anti_sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return Plane::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[scalar]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiScalar> for Scalar {
    type Output = AntiScalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        3        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ other[e12345] * self[scalar]).geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for Scalar {
    type Output = Circle;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        6        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0       10        0
    //  no simd        0       34        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return Dipole::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[scalar]) * other.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(self[scalar]) * other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35
            Simd32x3::from(self[scalar]) * other.group2(),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for Scalar {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        3        0
    //    simd4        0        7        0
    // Totals...
    // yes simd        0       10        0
    //  no simd        0       37        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[scalar]) * other.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(self[scalar]) * other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, scalar
            Simd32x4::from(self[scalar]) * other.group2(),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for Scalar {
    type Output = Dipole;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        6        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0       10        0
    //  no simd        0       34        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return Circle::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[scalar]) * other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            Simd32x4::from(self[scalar]) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125
            Simd32x3::from(self[scalar]) * other.group2() * Simd32x3::from(-1.0),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for Scalar {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //    simd3        0        3        0
    //    simd4        0       11        0
    // Totals...
    // yes simd        0       14        0
    //  no simd        0       53        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[scalar]) * other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            Simd32x4::from(self[scalar]) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e4
            Simd32x4::from(self[scalar]) * other.group2() * Simd32x4::from(-1.0),
            // e1, e2, e3, e5
            Simd32x4::from(self[scalar]) * other.group3() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum> for Scalar {
    type Output = DualNum;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd2        0        3        0
    // no simd        0        6        0
    fn anti_sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return AntiDualNum::from_groups(/* e3215, scalar */ Simd32x2::from(self[scalar]) * other.group0()).geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for Scalar {
    type Output = FlatPoint;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiFlatPoint::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(self[scalar]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for Scalar {
    type Output = Flector;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        8        0
    // no simd        0       32        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from(self[scalar]) * other.group0() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1, e2, e3, e5
            Simd32x4::from(self[scalar]) * other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for Scalar {
    type Output = Line;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd3        0        6        0
    // no simd        0       18        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return AntiLine::from_groups(
            // e23, e31, e12
            Simd32x3::from(self[scalar]) * other.group0(),
            // e15, e25, e35
            Simd32x3::from(self[scalar]) * other.group1(),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for Scalar {
    type Output = Motor;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        6        0
    // no simd        0       24        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from(self[scalar]) * other.group0(),
            // e15, e25, e35, e3215
            Simd32x4::from(self[scalar]) * other.group1(),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for Scalar {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        6        0
    //    simd2        0        4        0
    //    simd3        0       12        0
    //    simd4        0       16        0
    // Totals...
    // yes simd        0       38        0
    //  no simd        0      114        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(self[scalar]) * other.group0().yx() * Simd32x2::from([1.0, -1.0]),
            // e1, e2, e3, e4
            Simd32x4::from(self[scalar]) * other.group9().xyz().with_w(other[e1234]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e5
            other[e3215] * self[scalar] * -1.0,
            // e15, e25, e35, e45
            Simd32x4::from(self[scalar]) * other.group8().with_w(other[e321]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e41, e42, e43
            Simd32x3::from(self[scalar]) * other.group7(),
            // e23, e31, e12
            Simd32x3::from(self[scalar]) * other.group6().xyz(),
            // e415, e425, e435, e321
            Simd32x4::from(self[scalar]) * other.group5().with_w(other[e45]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e423, e431, e412
            Simd32x3::from(self[scalar]) * other.group4() * Simd32x3::from(-1.0),
            // e235, e315, e125
            Simd32x3::from(self[scalar]) * other.group3().xyz() * Simd32x3::from(-1.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[scalar]) * other.group1().xyz().with_w(other[e5]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1234
            other[e4] * self[scalar],
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for Scalar {
    type Output = Plane;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0        4        0
    // no simd        0       16        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from(self[scalar]) * other.group0() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]))
            .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for Scalar {
    type Output = RoundPoint;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0        7        0
    //  no simd        0       19        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[scalar]) * other.group0().xyz().with_w(other[e5]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e1234
            other[e4] * self[scalar],
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for Scalar {
    type Output = Scalar;
    // Operative Statistics for this implementation:
    //      add/sub      mul      div
    // f32        0        3        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ other[scalar] * self[scalar] * -1.0).geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for Scalar {
    type Output = Sphere;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        0        3        0
    //    simd4        0        4        0
    // Totals...
    // yes simd        0        7        0
    //  no simd        0       19        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return RoundPoint::from_groups(
            // e1, e2, e3, e4
            Simd32x4::from([self[scalar], self[scalar], self[scalar], other[e1234]]) * other.group0().xyz().with_w(self[scalar]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e5
            self[scalar] * other[e3215] * -1.0,
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for Scalar {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0       14        0
    // no simd        0       56        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(self[scalar]) * other.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(self[scalar]) * other.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e1234
            Simd32x4::from(self[scalar]) * other.group2().xyz().with_w(other[e4]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(self[scalar]) * other.group3().xyz().with_w(other[e5]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for Scalar {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //          add/sub      mul      div
    //   simd4        0       14        0
    // no simd        0       56        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(self[scalar]) * other.group0() * Simd32x4::from(-1.0),
            // e415, e425, e435, e321
            Simd32x4::from(self[scalar]) * other.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            Simd32x4::from(self[scalar]) * other.group2().xyz().with_w(other[e3215]) * Simd32x4::from(-1.0),
            // e1, e2, e3, e4
            Simd32x4::from(self[scalar]) * other.group3().xyz().with_w(other[e1234]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl std::ops::Div<anti_sandwich> for Sphere {
    type Output = anti_sandwich_partial<Sphere>;
    fn div(self, _rhs: anti_sandwich) -> Self::Output {
        anti_sandwich_partial(self)
    }
}
impl AntiSandwich<AntiCircleRotor> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       22       51        0
    //    simd3        2        5        0
    //    simd4       18       17        0
    // Totals...
    // yes simd       42       73        0
    //  no simd      100      134        0
    fn anti_sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (other.group0().yzx() * self.group0().zxy()) - (Simd32x3::from(self[e1234]) * other.group1().xyz()) - (other.group0().zxy() * self.group0().yzx()),
            // e415, e425, e435, e321
            -(Simd32x4::from([self[e1234], self[e1234], self[e1234], self[e4125]]) * other.group2().xyz().with_w(other[e12]))
                - (other.group1().wwwy() * self.group0().xyzy())
                - (self.group0().wwwx() * other.group0().with_w(other[e23])),
            // e235, e315, e125, e4
            Simd32x4::from([
                other[e25] * self[e4125] * -1.0,
                other[e35] * self[e4235] * -1.0,
                other[e15] * self[e4315] * -1.0,
                (other[e42] * self[e4315]) + (other[e43] * self[e4125]) + (other[e45] * self[e1234]),
            ]) + (self.group0().yzxx() * other.group2().zxy().with_w(other[e41]))
                - (self.group0().www() * other.group1().xyz()).with_w(other[scalar] * self[e1234]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other[e12] * self[e4315]) + (other[e15] * self[e1234]) + (other[scalar] * self[e4235]),
                (other[e23] * self[e4125]) + (other[e25] * self[e1234]) + (other[scalar] * self[e4315]),
                (other[e31] * self[e4235]) + (other[e35] * self[e1234]) + (other[scalar] * self[e4125]),
                -(other[e25] * self[e4315]) - (other[e35] * self[e4125]) - (other[scalar] * self[e3215]),
            ]) - (Simd32x4::from(self[e3215]) * other.group0().with_w(other[e45]))
                - (self.group0().zxyx() * other.group1().yzx().with_w(other[e15])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDipoleInversion> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       53        0
    //    simd3        0        1        0
    //    simd4       27       27        0
    // Totals...
    // yes simd       43       81        0
    //  no simd      124      164        0
    fn anti_sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                other[e431] * self[e4125] * -1.0,
                other[e412] * self[e4235] * -1.0,
                other[e423] * self[e4315] * -1.0,
                other[e5] * self[e1234],
            ]) + (Simd32x4::from([self[e1234], self[e1234], self[e1234], self[e4235]]) * other.group1().xyz().with_w(other[e1]))
                + (Simd32x4::from([self[e1234], self[e1234], self[e1234], self[e4125]]) * other.group3().xyzz())
                + (self.group0().xyzy() * other.group2().www().with_w(other[e2]))
                + (self.group0().yzxw() * other.group0().zxy().with_w(other[e4])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e235] * self[e1234]) + (other[e2] * self[e4125]),
                (other[e315] * self[e1234]) + (other[e3] * self[e4235]),
                (other[e125] * self[e1234]) + (other[e1] * self[e4315]),
                -(other[e435] * self[e4125]) - (other[e4] * self[e3215]),
            ]) + (other.group0() * self.group0().www()).with_w(other[e5] * self[e1234])
                - (other.group1().wwwx() * self.group0().xyzx())
                - (self.group0().yzxy() * other.group3().zxy().with_w(other[e425])),
            // e15, e25, e35, e1234
            Simd32x4::from([other[e315] * self[e4125], other[e125] * self[e4235], other[e235] * self[e4315], 0.0]) + (other.group1() * self.group0().www().with_w(self[e1234]))
                - (self.group0().xyzz() * other.group3().www().with_w(other[e412]))
                - (self.group0().yzxx() * other.group2().zxy().with_w(other[e423]))
                - (self.group0().wwwy() * other.group3().xyz().with_w(other[e431])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e425] * self[e4125] * -1.0,
                other[e435] * self[e4235] * -1.0,
                other[e415] * self[e4315] * -1.0,
                other[e125] * self[e4125],
            ]) + (Simd32x4::from([self[e1234], self[e1234], self[e1234], self[e4315]]) * other.group2().xyzy())
                + (self.group0().yzxx() * other.group1().zxy().with_w(other[e235]))
                - (Simd32x4::from(self[e3215]) * other.group0().with_w(other[e321])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       30        0
    //    simd3        0        2        0
    //    simd4       13       16        0
    // Totals...
    // yes simd       25       48        0
    //  no simd       64      100        0
    fn anti_sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x3::from(0.0).with_w(other[e3215] * self[e1234] * -1.0),
            // e415, e425, e435, e321
            Simd32x3::from(0.0).with_w(other[e3215] * self[e1234]),
            // e235, e315, e125, e5
            self.group0() * other.group0().xx().with_zw(other[e3215], other[scalar]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e1, e2, e3, e4
            Simd32x4::from(other[scalar]) * self.group0().xyz().with_w(self[e1234]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlatPoint> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       14       31        0
    //    simd3        2        4        0
    //    simd4       12       14        0
    // Totals...
    // yes simd       28       49        0
    //  no simd       68       99        0
    fn anti_sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(0.0),
            // e23, e31, e12, e45
            ((Simd32x3::from(self[e1234]) * other.group0().xyz()) - (Simd32x3::from(other[e321]) * self.group0().xyz())).with_w(0.0),
            // e15, e25, e35, e1234
            ((other.group0().yzx() * self.group0().zxy()) - (other.group0().zxy() * self.group0().yzx())).with_w(other[e321] * self[e1234]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e1234], self[e1234], self[e1234], 1.0])
                * other
                    .group0()
                    .xyz()
                    .with_w((other[e235] * self[e4235]) + (other[e315] * self[e4315]) + (other[e125] * self[e4125]) - (other[e321] * self[e3215])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlector> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       37        0
    //    simd3        6        8        0
    //    simd4       13       16        0
    // Totals...
    // yes simd       37       61        0
    //  no simd       88      125        0
    fn anti_sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([self[e1234], self[e1234], self[e1234], 1.0])
                * other
                    .group1()
                    .xyz()
                    .with_w((other[e1] * self[e4235]) + (other[e2] * self[e4315]) + (other[e3] * self[e4125]) + (other[e5] * self[e1234])),
            // e23, e31, e12, e45
            ((Simd32x3::from(self[e1234]) * other.group0().xyz()) + (other.group1().yzx() * self.group0().zxy())
                - (Simd32x3::from(other[e321]) * self.group0().xyz())
                - (other.group1().zxy() * self.group0().yzx()))
            .with_w(other[e5] * self[e1234]),
            // e15, e25, e35, e1234
            ((other.group0().yzx() * self.group0().zxy())
                - (Simd32x3::from(other[e5]) * self.group0().xyz())
                - (Simd32x3::from(self[e3215]) * other.group1().xyz())
                - (other.group0().zxy() * self.group0().yzx()))
            .with_w(other[e321] * self[e1234]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([self[e1234], self[e1234], self[e1234], 1.0])
                * other
                    .group0()
                    .xyz()
                    .with_w((other[e235] * self[e4235]) + (other[e315] * self[e4315]) + (other[e125] * self[e4125]) - (other[e321] * self[e3215])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiLine> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       18       40        0
    //    simd3        0        6        0
    //    simd4       15       14        0
    // Totals...
    // yes simd       33       60        0
    //  no simd       78      114        0
    fn anti_sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[e1234]) * other.group0() * Simd32x3::from(-1.0),
            // e415, e425, e435, e321
            Simd32x4::from([self[e1234], self[e1234], self[e1234], 1.0])
                * other.group1().with_w(-(other[e23] * self[e4235]) - (other[e31] * self[e4315]) - (other[e12] * self[e4125]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e4
            (other.group1().zxy() * self.group0().yzx()).with_w(0.0)
                - (Simd32x3::from(self[e3215]) * other.group0()).with_w(0.0)
                - (other.group1().yzx() * self.group0().zxy()).with_w(0.0),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other[e12] * self[e4315]) + (other[e15] * self[e1234]),
                (other[e23] * self[e4125]) + (other[e25] * self[e1234]),
                (other[e31] * self[e4235]) + (other[e35] * self[e1234]),
                -(other[e25] * self[e4315]) - (other[e35] * self[e4125]),
            ]) - (self.group0().zxyx() * other.group0().yzx().with_w(other[e15])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiMotor> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       41        0
    //    simd3        3        6        0
    //    simd4       15       18        0
    // Totals...
    // yes simd       37       65        0
    //  no simd       88      131        0
    fn anti_sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(self[e1234]) * other.group0().xyz().with_w(other[e3215]) * Simd32x4::from(-1.0),
            // e415, e425, e435, e321
            Simd32x4::from([self[e1234], self[e1234], self[e1234], 1.0])
                * other
                    .group1()
                    .xyz()
                    .with_w((other[e3215] * self[e1234]) - (other[e23] * self[e4235]) - (other[e31] * self[e4315]) - (other[e12] * self[e4125]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e35] * self[e4315]) + (other[e3215] * self[e4235]),
                (other[e15] * self[e4125]) + (other[e3215] * self[e4315]),
                (other[e25] * self[e4235]) + (other[e3215] * self[e4125]),
                -(other[e25] * self[e4315]) - (other[e35] * self[e4125]),
            ]) - (Simd32x4::from(self[e3215]) * other.group0())
                - (other.group1().yzxx() * self.group0().zxyx()),
            // e1, e2, e3, e4
            ((Simd32x3::from(other[scalar]) * self.group0().xyz()) + (Simd32x3::from(self[e1234]) * other.group1().xyz()) + (other.group0().zxy() * self.group0().yzx())
                - (other.group0().yzx() * self.group0().zxy()))
            .with_w(other[scalar] * self[e1234] * -1.0),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiPlane> for Sphere {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        8       24        0
    //    simd3        3        6        0
    //    simd4        8        9        0
    // Totals...
    // yes simd       19       39        0
    //  no simd       49       78        0
    fn anti_sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return AntiCircleRotor::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[e1234]) * other.group0().xyz(),
            // e23, e31, e12, e45
            ((other.group0().yzx() * self.group0().zxy()) - (other.group0().zxy() * self.group0().yzx())).with_w(other[e5] * self[e1234]),
            // e15, e25, e35, scalar
            Simd32x4::from([
                -(other[e1] * self[e3215]) - (other[e5] * self[e4235]),
                -(other[e2] * self[e3215]) - (other[e5] * self[e4315]),
                -(other[e3] * self[e3215]) - (other[e5] * self[e4125]),
                (other[e1] * self[e4235]) + (other[e2] * self[e4315]) + (other[e3] * self[e4125]) + (other[e5] * self[e1234]),
            ]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiScalar> for Sphere {
    type Output = CircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        5        0
    //    simd3        1        3        0
    //    simd4        3        4        0
    // Totals...
    // yes simd        6       12        0
    //  no simd       17       30        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return Sphere::from_groups(
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e12345]) * self.group0(),
            // e1234
            other[e12345] * self[e1234],
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       47        0
    //    simd3        2        4        0
    //    simd4       18       18        0
    // Totals...
    // yes simd       36       69        0
    //  no simd       94      131        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[e1234]) * other.group1().xyz()) + (other.group0().zxy() * self.group0().yzx()) - (other.group0().yzx() * self.group0().zxy()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e423] * self[e3215]) + (other[e235] * self[e1234]),
                (other[e431] * self[e3215]) + (other[e315] * self[e1234]),
                (other[e412] * self[e3215]) + (other[e125] * self[e1234]),
                -(other[e425] * self[e4315]) - (other[e435] * self[e4125]),
            ]) - (other.group1().wwwx() * self.group0().xyzx()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                other[e415] * self[e3215],
                other[e425] * self[e3215],
                other[e435] * self[e3215],
                -(other[e431] * self[e4315]) - (other[e412] * self[e4125]),
            ]) + (other.group2().yzx() * self.group0().zxy()).with_w(other[e321] * self[e1234])
                - (self.group0().yzxx() * other.group2().zxy().with_w(other[e423])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e425] * self[e4125] * -1.0,
                other[e435] * self[e4235] * -1.0,
                other[e415] * self[e4315] * -1.0,
                other[e125] * self[e4125],
            ]) + (Simd32x4::from([self[e1234], self[e1234], self[e1234], self[e4235]]) * other.group2().with_w(other[e235]))
                + (self.group0().yzxy() * other.group1().zxy().with_w(other[e315]))
                - (Simd32x4::from(self[e3215]) * other.group0().with_w(other[e321])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       43        0
    //    simd3        2        3        0
    //    simd4       20       21        0
    // Totals...
    // yes simd       38       67        0
    //  no simd      102      136        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[e1234]) * other.group1().xyz()) + (other.group0().zxy() * self.group0().yzx()) - (other.group0().yzx() * self.group0().zxy()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e423] * self[e3215]) + (other[e235] * self[e1234]),
                (other[e431] * self[e3215]) + (other[e315] * self[e1234]),
                (other[e412] * self[e3215]) + (other[e125] * self[e1234]),
                -(other[e425] * self[e4315]) - (other[e435] * self[e4125]),
            ]) - (other.group1().wwwx() * self.group0().xyzx()),
            // e15, e25, e35, e1234
            (other.group1() * self.group0().www().with_w(self[e1234]))
                + (other.group2().yzxw() * self.group0().zxy().with_w(self[e1234]))
                + Simd32x3::from(0.0).with_w(-(other[e431] * self[e4315]) - (other[e412] * self[e4125]))
                - (self.group0().yzxx() * other.group2().zxy().with_w(other[e423])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e425] * self[e4125] * -1.0,
                other[e435] * self[e4235] * -1.0,
                other[e415] * self[e4315] * -1.0,
                other[e12345] * self[e3215],
            ]) + (Simd32x4::from([self[e1234], self[e1234], self[e1234], self[e4315]]) * other.group2().xyzy())
                + (other.group2().wwwz() * self.group0().xyzz())
                + (self.group0().yzxx() * other.group1().zxy().with_w(other[e235]))
                - (Simd32x4::from(self[e3215]) * other.group0().with_w(other[e321])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       21       46        0
    //    simd3        2        4        0
    //    simd4       17       17        0
    // Totals...
    // yes simd       40       67        0
    //  no simd       95      126        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            (other.group0().yzx() * self.group0().zxy()) - (Simd32x3::from(self[e1234]) * other.group1().xyz()) - (other.group0().zxy() * self.group0().yzx()),
            // e415, e425, e435, e321
            -(Simd32x4::from([self[e1234], self[e1234], self[e1234], self[e4315]]) * other.group2().with_w(other[e31]))
                - (other.group1().wwwz() * self.group0().xyzz())
                - (self.group0().wwwx() * other.group0().with_w(other[e23])),
            // e235, e315, e125, e4
            Simd32x4::from([
                -(other[e23] * self[e3215]) - (other[e25] * self[e4125]),
                -(other[e31] * self[e3215]) - (other[e35] * self[e4235]),
                -(other[e12] * self[e3215]) - (other[e15] * self[e4315]),
                (other[e42] * self[e4315]) + (other[e43] * self[e4125]) + (other[e45] * self[e1234]),
            ]) + (self.group0().yzxx() * other.group2().zxy().with_w(other[e41])),
            // e1, e2, e3, e5
            Simd32x4::from([
                (other[e12] * self[e4315]) + (other[e15] * self[e1234]),
                (other[e23] * self[e4125]) + (other[e25] * self[e1234]),
                (other[e31] * self[e4235]) + (other[e35] * self[e1234]),
                -(other[e45] * self[e3215]) - (other[e35] * self[e4125]),
            ]) - (self.group0().zxyy() * other.group1().yzx().with_w(other[e25]))
                - (self.group0().wwwx() * other.group0().with_w(other[e15])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       50        0
    //    simd3        0        2        0
    //    simd4       26       26        0
    // Totals...
    // yes simd       45       78        0
    //  no simd      123      160        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                other[e1234] * self[e4235] * -1.0,
                other[e1234] * self[e4315] * -1.0,
                other[e1234] * self[e4125] * -1.0,
                other[e4125] * self[e4125],
            ]) + (Simd32x4::from([self[e1234], self[e1234], self[e1234], self[e4315]]) * other.group3().xyzy())
                + (self.group0().zxyx() * other.group0().yzx().with_w(other[e4235]))
                - (Simd32x4::from(self[e1234]) * other.group1().xyz().with_w(other[e3215]))
                - (self.group0().yzxw() * other.group0().zxy().with_w(other[e1234])),
            // e415, e425, e435, e321
            (other.group3().yzxw() * self.group0().zxy().with_w(self[e1234]))
                - (Simd32x4::from([self[e1234], self[e1234], self[e1234], self[e4125]]) * other.group2().xyz().with_w(other[e12]))
                - (other.group1().wwwy() * self.group0().xyzy())
                - (self.group0().yzxw() * other.group3().zxy().with_w(other[e1234]))
                - (self.group0().wwwx() * other.group0().with_w(other[e23])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e35] * self[e4315]) + (other[e3215] * self[e4235]),
                (other[e15] * self[e4125]) + (other[e3215] * self[e4315]),
                (other[e25] * self[e4235]) + (other[e3215] * self[e4125]),
                other[e35] * self[e4125] * -1.0,
            ]) - (Simd32x4::from(self[e3215]) * other.group1())
                - (other.group2().yzxx() * self.group0().zxyx())
                - (self.group0().wwwy() * other.group3().xyz().with_w(other[e25])),
            // e1, e2, e3, e4
            Simd32x4::from([
                -(other[e41] * self[e3215]) - (other[e31] * self[e4125]),
                -(other[e42] * self[e3215]) - (other[e12] * self[e4235]),
                -(other[e43] * self[e3215]) - (other[e23] * self[e4315]),
                (other[e43] * self[e4125]) + (other[e45] * self[e1234]),
            ]) + (Simd32x4::from([self[e1234], self[e1234], self[e1234], self[e4315]]) * other.group2().xyz().with_w(other[e42]))
                + (self.group0().yzxx() * other.group1().zxy().with_w(other[e41])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       12       29        0
    //    simd4       13       17        0
    // Totals...
    // yes simd       25       46        0
    //  no simd       64       97        0
    fn anti_sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x3::from(0.0).with_w(other[e5] * self[e1234]),
            // e23, e31, e12, e45
            Simd32x3::from(0.0).with_w(other[e5] * self[e1234]),
            // e15, e25, e35, e1234
            other.group0().xx().with_zw(other[e5], other[e12345]) * self.group0().xyz().with_w(self[e1234]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e12345]) * self.group0(),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       34        0
    //    simd3        2        5        0
    //    simd4       12       12        0
    // Totals...
    // yes simd       29       51        0
    //  no simd       69       97        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleInversion::from_groups(
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e415, e425, e435, e321
            (-(Simd32x3::from(other[e45]) * self.group0().xyz()) - (Simd32x3::from(self[e1234]) * other.group0().xyz())).with_w(0.0),
            // e235, e315, e125, e4
            ((other.group0().zxy() * self.group0().yzx()) - (other.group0().yzx() * self.group0().zxy())).with_w(other[e45] * self[e1234]),
            // e1, e2, e3, e5
            Simd32x4::from([self[e1234], self[e1234], self[e1234], 1.0])
                * other
                    .group0()
                    .xyz()
                    .with_w(-(other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]) - (other[e45] * self[e3215])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       19       40        0
    //    simd3        3        6        0
    //    simd4       15       16        0
    // Totals...
    // yes simd       37       62        0
    //  no simd       88      122        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([self[e1234], self[e1234], self[e1234], 1.0])
                * other
                    .group1()
                    .xyz()
                    .with_w((other[e4235] * self[e4235]) + (other[e4315] * self[e4315]) + (other[e4125] * self[e4125]) - (other[e3215] * self[e1234])),
            // e415, e425, e435, e321
            ((other.group1().yzx() * self.group0().zxy())
                - (Simd32x3::from(other[e45]) * self.group0().xyz())
                - (Simd32x3::from(self[e1234]) * other.group0().xyz())
                - (other.group1().zxy() * self.group0().yzx()))
            .with_w(other[e3215] * self[e1234]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e35] * self[e4315]) + (other[e3215] * self[e4235]),
                (other[e15] * self[e4125]) + (other[e3215] * self[e4315]),
                (other[e25] * self[e4235]) + (other[e3215] * self[e4125]),
                -(other[e35] * self[e4125]) - (other[e45] * self[e3215]),
            ]) - (other.group0().yzxx() * self.group0().zxyx())
                - (self.group0().wwwy() * other.group1().xyz().with_w(other[e25])),
            // e1, e2, e3, e4
            Simd32x4::from(self[e1234]) * other.group0(),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       13       36        0
    //    simd3        0        4        0
    //    simd4       16       16        0
    // Totals...
    // yes simd       29       56        0
    //  no simd       77      112        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return DipoleInversion::from_groups(
            // e41, e42, e43
            Simd32x3::from(self[e1234]) * other.group0(),
            // e23, e31, e12, e45
            Simd32x4::from([self[e1234], self[e1234], self[e1234], 1.0])
                * other.group1().with_w(-(other[e415] * self[e4235]) - (other[e425] * self[e4315]) - (other[e435] * self[e4125])),
            // e15, e25, e35, e1234
            (Simd32x3::from(self[e3215]) * other.group0()).with_w(0.0) + (other.group1().yzx() * self.group0().zxy()).with_w(0.0)
                - (other.group1().zxy() * self.group0().yzx()).with_w(0.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e425] * self[e4125] * -1.0,
                other[e435] * self[e4235] * -1.0,
                other[e415] * self[e4315] * -1.0,
                other[e125] * self[e4125],
            ]) + (Simd32x4::from([self[e1234], self[e1234], self[e1234], self[e4315]]) * other.group1().with_w(other[e315]))
                + (self.group0().yzxx() * other.group0().zxy().with_w(other[e235])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       15       39        0
    //    simd3        3        4        0
    //    simd4       16       19        0
    // Totals...
    // yes simd       34       62        0
    //  no simd       88      127        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(self[e1234]) * other.group0().xyz().with_w(other[e5]),
            // e23, e31, e12, e45
            Simd32x4::from([self[e1234], self[e1234], self[e1234], 1.0])
                * other
                    .group1()
                    .xyz()
                    .with_w((other[e5] * self[e1234]) - (other[e415] * self[e4235]) - (other[e425] * self[e4315]) - (other[e435] * self[e4125])),
            // e15, e25, e35, e1234
            ((Simd32x3::from(self[e3215]) * other.group0().xyz()) + (other.group1().yzx() * self.group0().zxy())
                - (Simd32x3::from(other[e5]) * self.group0().xyz())
                - (other.group1().zxy() * self.group0().yzx()))
            .with_w(other[e12345] * self[e1234]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e425] * self[e4125] * -1.0,
                other[e435] * self[e4235] * -1.0,
                other[e415] * self[e4315] * -1.0,
                other[e125] * self[e4125],
            ]) + (Simd32x4::from([self[e1234], self[e1234], self[e1234], self[e4315]]) * other.group1().xyzy())
                + (other.group0().zxyw() * self.group0().yzxw())
                + (self.group0().xyzx() * other.group0().www().with_w(other[e235])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for Sphere {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       81        0
    //    simd2        6        6        0
    //    simd3       32       45        0
    //    simd4       28       25        0
    // Totals...
    // yes simd      102      157        0
    //  no simd      256      328        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([(other[e4] * self[e3215]) + (other[e5] * self[e1234]), -(other[e3215] * self[e1234]) - (other[e1234] * self[e3215])])
                + (Simd32x2::from(self[e4235]) * Simd32x2::from([other[e1], other[e4235]]))
                + (Simd32x2::from(self[e4315]) * Simd32x2::from([other[e2], other[e4315]]))
                + (Simd32x2::from(self[e4125]) * Simd32x2::from([other[e3], other[e4125]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                other[e31] * self[e4125] * -1.0,
                other[e12] * self[e4235] * -1.0,
                other[e23] * self[e4315] * -1.0,
                other[e45] * self[e1234],
            ]) + (Simd32x4::from([self[e1234], self[e1234], self[e1234], self[e4125]]) * other.group3().xyz().with_w(other[e43]))
                + (self.group0().xyzx() * other.group0().xx().with_zw(other[scalar], other[e41]))
                + (self.group0().yzxy() * other.group5().zxy().with_w(other[e42]))
                - (other.group4() * self.group0().www()).with_w(other[scalar] * self[e1234]),
            // e5
            -(other[scalar] * self[e3215]) - (other[e15] * self[e4235]) - (other[e25] * self[e4315]) - (other[e35] * self[e4125]) - (other[e45] * self[e3215]),
            // e15, e25, e35, e45
            Simd32x4::from([other[e415] * self[e3215], other[e425] * self[e3215], other[e435] * self[e3215], other[e435] * self[e4125] * -1.0])
                + (other.group8().yzx() * self.group0().zxy()).with_w(other[e5] * self[e1234])
                - (Simd32x4::from([other[e5], other[e5], other[e5], self[e4315]]) * self.group0().xyz().with_w(other[e425]))
                - (self.group0().yzxw() * other.group8().zxy().with_w(other[e4]))
                - (self.group0().wwwx() * other.group1().xyz().with_w(other[e415])),
            // e41, e42, e43
            (Simd32x3::from(other[e4]) * self.group0().xyz())
                + (Simd32x3::from(self[e1234]) * other.group1().xyz())
                + (Simd32x3::from(self[e1234]) * other.group6().xyz())
                + (other.group7().zxy() * self.group0().yzx())
                - (other.group7().yzx() * self.group0().zxy()),
            // e23, e31, e12
            (Simd32x3::from(self[e3215]) * other.group7()) + (Simd32x3::from(self[e1234]) * other.group8()) + (other.group1().yzx() * self.group0().zxy())
                - (Simd32x3::from(other[e321]) * self.group0().xyz())
                - (other.group1().zxy() * self.group0().yzx()),
            // e415, e425, e435, e321
            (other.group9().yzxw() * self.group0().zxy().with_w(self[e1234]))
                - (Simd32x4::from([self[e1234], self[e1234], self[e1234], self[e4315]]) * other.group3().xyz().with_w(other[e31]))
                - (self.group0().xyzz() * other.group3().www().with_w(other[e12]))
                - (self.group0().wwwx() * other.group4().with_w(other[e23]))
                - (other.group9().zxy() * self.group0().yzx()).with_w(other[e1234] * self[e3215]),
            // e423, e431, e412
            (Simd32x3::from(self[e1234]) * other.group9().xyz()) + (other.group4().yzx() * self.group0().zxy())
                - (Simd32x3::from(other[e1234]) * self.group0().xyz())
                - (Simd32x3::from(self[e1234]) * other.group5())
                - (other.group4().zxy() * self.group0().yzx()),
            // e235, e315, e125
            (Simd32x3::from(other[e3215]) * self.group0().xyz()) + (other.group3().zxy() * self.group0().yzx())
                - (Simd32x3::from(self[e3215]) * other.group5())
                - (Simd32x3::from(self[e3215]) * other.group9().xyz())
                - (other.group3().yzx() * self.group0().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e425] * self[e4125] * -1.0,
                other[e435] * self[e4235] * -1.0,
                other[e415] * self[e4315] * -1.0,
                other[e125] * self[e4125],
            ]) + (Simd32x4::from(other[e12345]) * self.group0())
                + (Simd32x4::from([self[e1234], self[e1234], self[e1234], self[e4235]]) * other.group8().with_w(other[e235]))
                + (self.group0().yzxy() * other.group6().zxy().with_w(other[e315]))
                - (Simd32x4::from(self[e3215]) * other.group7().with_w(other[e321])),
            // e1234
            (other[e12345] * self[e1234]) + (other[e321] * self[e1234]) - (other[e423] * self[e4235]) - (other[e431] * self[e4315]) - (other[e412] * self[e4125]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for Sphere {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        6       19        0
    //    simd3        3        7        0
    //    simd4       10        9        0
    // Totals...
    // yes simd       19       35        0
    //  no simd       55       76        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return CircleRotor::from_groups(
            // e423, e431, e412
            Simd32x3::from(self[e1234]) * other.group0().xyz(),
            // e415, e425, e435, e321
            ((other.group0().yzx() * self.group0().zxy()) - (other.group0().zxy() * self.group0().yzx())).with_w(other[e3215] * self[e1234]),
            // e235, e315, e125, e12345
            (other.group0().wwwx() * self.group0().xyzx()) + Simd32x3::from(0.0).with_w((other[e4315] * self[e4315]) + (other[e4125] * self[e4125]))
                - (other.group0() * self.group0().www().with_w(self[e1234])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for Sphere {
    type Output = AntiDipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        9       25        0
    //    simd3        3        6        0
    //    simd4        9       10        0
    // Totals...
    // yes simd       21       41        0
    //  no simd       54       83        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return AntiCircleRotor::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other[e4]) * self.group0().xyz()) + (Simd32x3::from(self[e1234]) * other.group0().xyz()),
            // e23, e31, e12, e45
            (other.group0().yzx() * self.group0().zxy()).with_w(other[e5] * self[e1234]) - (other.group0().zxyw() * self.group0().yzxw()),
            // e15, e25, e35, scalar
            Simd32x4::from([
                -(other[e1] * self[e3215]) - (other[e5] * self[e4235]),
                -(other[e2] * self[e3215]) - (other[e5] * self[e4315]),
                -(other[e3] * self[e3215]) - (other[e5] * self[e4125]),
                (other[e1] * self[e4235]) + (other[e2] * self[e4315]) + (other[e3] * self[e4125]) + (other[e4] * self[e3215]) + (other[e5] * self[e1234]),
            ]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for Sphere {
    type Output = AntiCircleRotor;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        2        6        0
    //    simd3        1        3        0
    //    simd4        3        5        0
    // Totals...
    // yes simd        6       14        0
    //  no simd       17       35        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return RoundPoint::from_groups(
            // e1, e2, e3, e4
            Simd32x4::from([other[scalar], other[scalar], other[scalar], self[e1234]]) * self.group0().xyz().with_w(other[scalar]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e5
            other[scalar] * self[e3215] * -1.0,
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for Sphere {
    type Output = DipoleInversion;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32        7       20        0
    //    simd3        3        7        0
    //    simd4       11       10        0
    // Totals...
    // yes simd       21       37        0
    //  no simd       60       81        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return CircleRotor::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[e1234]) * other.group0().xyz()) - (Simd32x3::from(other[e1234]) * self.group0().xyz()),
            // e415, e425, e435, e321
            (other.group0().yzxw() * self.group0().zxy().with_w(self[e1234])) - (other.group0().zxy() * self.group0().yzx()).with_w(other[e1234] * self[e3215]),
            // e235, e315, e125, e12345
            (other.group0().wwwx() * self.group0().xyzx()) + Simd32x3::from(0.0).with_w((other[e4315] * self[e4315]) + (other[e4125] * self[e4125]) - (other[e1234] * self[e3215]))
                - (other.group0() * self.group0().www().with_w(self[e1234])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for Sphere {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       52        0
    //    simd3        0        3        0
    //    simd4       28       27        0
    // Totals...
    // yes simd       44       82        0
    //  no simd      128      169        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                self[e4125] * other[e431] * -1.0,
                self[e4235] * other[e412] * -1.0,
                self[e4315] * other[e423] * -1.0,
                self[e1234] * other[e5],
            ]) + (Simd32x4::from([self[e1234], self[e1234], self[e1234], other[e3]]) * other.group1().xyz().with_w(self[e4125]))
                + (Simd32x4::from([self[e1234], self[e1234], self[e1234], other[e4]]) * other.group3().xyz().with_w(self[e3215]))
                + (self.group0().xyxx() * other.group3().ww().with_zw(other[e431], other[e1]))
                + (self.group0().yzzy() * other.group0().zx().with_zw(other[e4], other[e2])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e3215] * other[e423]) + (self[e1234] * other[e235]),
                (self[e3215] * other[e431]) + (self[e1234] * other[e315]),
                (self[e3215] * other[e412]) + (self[e1234] * other[e125]),
                -(self[e4125] * other[e435]) - (self[e3215] * other[e4]),
            ]) + (self.group0().zxy() * other.group3().yzx()).with_w(self[e1234] * other[e5])
                - (self.group0().xyxx() * other.group1().ww().with_zw(other[e2], other[e415]))
                - (self.group0().yzzy() * other.group3().zx().with_zw(other[e321], other[e425])),
            // e15, e25, e35, e1234
            (self.group0().zxy() * other.group2().yzx()).with_w(self[e1234] * other[e12345]) + (self.group0().www() * other.group1().xyz()).with_w(self[e1234] * other[e321])
                - (self.group0().xyxx() * other.group2().wwy().with_w(other[e423]))
                - (self.group0().yzzy() * other.group2().zxw().with_w(other[e431]))
                - (self.group0().wwwz() * other.group3().xyz().with_w(other[e412])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                self[e3215] * other[e423] * -1.0,
                self[e3215] * other[e431] * -1.0,
                self[e3215] * other[e412] * -1.0,
                self[e3215] * other[e12345],
            ]) + (Simd32x4::from([self[e1234], self[e1234], self[e1234], other[e125]]) * other.group2().xyz().with_w(self[e4125]))
                + (self.group0().xyxx() * other.group0().ww().with_zw(other[e425], other[e235]))
                + (self.group0().yzzy() * other.group1().zx().with_zw(other[e12345], other[e315]))
                - (self.group0().zxyw() * other.group1().yzxw()),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for Sphere {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       16       51        0
    //    simd3        0        4        0
    //    simd4       28       26        0
    // Totals...
    // yes simd       44       81        0
    //  no simd      128      167        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                self[e1234] * other[e23] * -1.0,
                self[e1234] * other[e31] * -1.0,
                self[e1234] * other[e12] * -1.0,
                self[e4125] * other[e4125],
            ]) + (Simd32x4::from([self[e1234], self[e1234], self[e1234], other[e4315]]) * other.group3().xyz().with_w(self[e4315]))
                + (self.group0().zxyx() * other.group0().yzx().with_w(other[e4235]))
                - (self.group0().xyxw() * other.group2().ww().with_zw(other[e42], other[e1234]))
                - (other.group0().zx().with_zw(other[e1234], self[e1234]) * self.group0().yzz().with_w(other[e3215])),
            // e415, e425, e435, e321
            (self.group0().zxy() * other.group3().yzx()).with_w(self[e1234] * other[e3215])
                - (Simd32x4::from([self[e1234], self[e1234], self[e1234], other[e1234]]) * other.group2().xyz().with_w(self[e3215]))
                - (self.group0().xyxx() * other.group1().ww().with_zw(other[e4315], other[e23]))
                - (self.group0().yzzy() * other.group3().zx().with_zw(other[e45], other[e31]))
                - (self.group0().wwwz() * other.group0().xyz().with_w(other[e12])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self[e4235] * other[e3215]) + (self[e4315] * other[e35]),
                (self[e4315] * other[e3215]) + (self[e4125] * other[e15]),
                (self[e4235] * other[e25]) + (self[e4125] * other[e3215]),
                -(self[e3215] * other[scalar]) - (self[e3215] * other[e45]),
            ]) - (self.group0().zxyx() * other.group2().yzxx())
                - (self.group0().wwwy() * other.group1().xyz().with_w(other[e25]))
                - (self.group0().wwwz() * other.group3().xyz().with_w(other[e35])),
            // e1, e2, e3, e4
            Simd32x4::from([
                self[e3215] * other[e41] * -1.0,
                self[e3215] * other[e42] * -1.0,
                self[e3215] * other[e43] * -1.0,
                self[e1234] * other[e45],
            ]) + (Simd32x4::from([self[e1234], self[e1234], self[e1234], other[e43]]) * other.group2().xyz().with_w(self[e4125]))
                + (self.group0().xyxx() * other.group0().ww().with_zw(other[e31], other[e41]))
                + (self.group0().yzzy() * other.group1().zx().with_zw(other[scalar], other[e42]))
                - (self.group0().zxy() * other.group1().yzx()).with_w(self[e1234] * other[scalar]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl std::ops::Div<anti_sandwich> for VersorEven {
    type Output = anti_sandwich_partial<VersorEven>;
    fn div(self, _rhs: anti_sandwich) -> Self::Output {
        anti_sandwich_partial(self)
    }
}
impl AntiSandwich<AntiCircleRotor> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       72      115        0
    //    simd3        0       19        0
    //    simd4       82       68        0
    // Totals...
    // yes simd      154      202        0
    //  no simd      400      444        0
    fn anti_sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e42] * self[e3]) + (other[e43] * self[e425]) + (other[e23] * self[e4]) + (other[e12] * self[e431]) + (other[scalar] * self[e423]),
                (other[e42] * self[e12345]) + (other[e43] * self[e1]) + (other[e23] * self[e412]) + (other[e31] * self[e4]) + (other[scalar] * self[e431]),
                (other[e42] * self[e415]) + (other[e43] * self[e12345]) + (other[e31] * self[e423]) + (other[e12] * self[e4]) + (other[scalar] * self[e412]),
                -(other[e12] * self[e435]) - (other[e45] * self[e321]) - (other[e15] * self[e423]) - (other[e25] * self[e431]) - (other[e35] * self[e412]),
            ]) + (Simd32x4::from([self[e12345], self[e435], self[e2], self[e12345]]) * other.group0().xxx().with_w(other[scalar]))
                - (Simd32x4::from(other[e41]) * Simd32x4::from([self[e321], self[e3], self[e425], self[e235]]))
                - (Simd32x4::from(other[e42]) * self.group1().zw().with_zw(self[e1], self[e315]))
                - (Simd32x4::from(other[e43]) * Simd32x4::from([self[e2], self[e415], self[e321], self[e125]]))
                - (other.group1().yzxx() * self.group0().zxy().with_w(self[e415]))
                - (other.group1().wwwy() * self.group0().xyz().with_w(self[e425])),
            // e23, e31, e12, e45
            (Simd32x4::from([self[e431], self[e4], self[e4], self[e3]]) * other.group2().zyz().with_w(other[e12]))
                + (Simd32x4::from([self[e12345], self[e435], self[e415], self[e125]]) * other.group1().xxy().with_w(other[e43]))
                + (Simd32x4::from([self[e425], self[e12345], self[e12345], self[e1]]) * other.group1().zyzx())
                + (Simd32x4::from([self[e4], self[e412], self[e423], self[e2]]) * other.group2().xxy().with_w(other[e31]))
                + (self.group2().ywwy() * other.group0().zyz().with_w(other[e42]))
                + (self.group2().wzxx() * other.group0().xxy().with_w(other[e41]))
                + (other.group2().www() * self.group1().xyz()).with_w(other[e45] * self[e12345])
                - (other.group2().yzxw() * self.group0().zxy().with_w(self[e321]))
                - (other.group0().yzx() * self.group2().zxy()).with_w(other[e15] * self[e423])
                - (other.group1().yzx() * self.group1().zxy()).with_w(other[e25] * self[e431])
                - (other.group1().www() * self.group3().xyz()).with_w(other[e35] * self[e412]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e15] * self[e321]) + (other[e35] * self[e425]) + (other[e35] * self[e2]) + (other[scalar] * self[e235]),
                (other[e15] * self[e3]) + (other[e25] * self[e12345]) + (other[e25] * self[e321]) + (other[scalar] * self[e315]),
                (other[e25] * self[e1]) + (other[e35] * self[e12345]) + (other[e35] * self[e321]) + (other[scalar] * self[e125]),
                -(other[e23] * self[e423]) - (other[e31] * self[e431]) - (other[e12] * self[e412]) - (other[e45] * self[e4]),
            ]) + (Simd32x4::from([self[e12345], self[e435], self[e415], self[e4]]) * other.group2().xxyw())
                + (other.group1().xxy() * self.group2().wzx()).with_w(other[e41] * self[e1])
                + (other.group1().zyz() * self.group2().yww()).with_w(other[e42] * self[e2])
                + (other.group1().www() * self.group2().xyz()).with_w(other[e43] * self[e3])
                - (self.group1().zxyy() * other.group2().yzx().with_w(other[e42]))
                - (other.group1().yzx() * self.group2().zxy()).with_w(other[e41] * self[e415])
                - (other.group2().yzx() * self.group3().zxy()).with_w(other[e43] * self[e435]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e45] * self[e415]) + (other[e15] * self[e4]) + (other[e35] * self[e431]),
                (other[e45] * self[e425]) + (other[e15] * self[e412]) + (other[e25] * self[e4]),
                (other[e45] * self[e435]) + (other[e25] * self[e423]) + (other[e35] * self[e4]),
                -(other[e25] * self[e2]) - (other[e35] * self[e435]) - (other[e35] * self[e3]),
            ]) + (self.group2().zxyw() * other.group0().yzx().with_w(other[e45]))
                + (other.group1().yzx() * self.group3().zxy()).with_w(other[scalar] * self[e5])
                - (Simd32x4::from([self[e321], self[e3], self[e1], self[e125]]) * other.group1().xxyz())
                - (Simd32x4::from([self[e2], self[e321], self[e321], self[e415]]) * other.group1().zyz().with_w(other[e15]))
                - (other.group2().yzxx() * self.group0().zxy().with_w(self[e1]))
                - (other.group2().wwwy() * self.group3().xyz().with_w(self[e425]))
                - (self.group2().ywwy() * other.group0().zyz().with_w(other[e31]))
                - (self.group2().wzxx() * other.group0().xxy().with_w(other[e23])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDipoleInversion> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      128      194        0
    //    simd3        0       34        0
    //    simd4       84       53        0
    // Totals...
    // yes simd      212      281        0
    //  no simd      464      508        0
    fn anti_sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e415] * self[e4]) + (other[e435] * self[e431]) + (other[e321] * self[e423]) + (other[e4] * self[e415]) + (other[e1] * self[e4]) + (other[e3] * self[e431]),
                (other[e415] * self[e412]) + (other[e425] * self[e4]) + (other[e321] * self[e431]) + (other[e4] * self[e425]) + (other[e1] * self[e412]) + (other[e2] * self[e4]),
                (other[e425] * self[e423]) + (other[e435] * self[e4]) + (other[e321] * self[e412]) + (other[e4] * self[e435]) + (other[e2] * self[e423]) + (other[e3] * self[e4]),
                -(other[e235] * self[e423]) - (other[e315] * self[e431]) - (other[e125] * self[e412]) - (other[e1] * self[e1]) - (other[e2] * self[e2]) - (other[e3] * self[e3]),
            ]) + (Simd32x4::from([self[e12345], self[e435], self[e2], self[e321]]) * other.group0().xxx().with_w(other[e321]))
                + (Simd32x4::from([self[e425], self[e1], self[e12345], self[e4]]) * other.group0().zzz().with_w(other[e5]))
                + (Simd32x4::from([self[e3], self[e12345], self[e415], self[e5]]) * other.group0().yyy().with_w(other[e4]))
                - (Simd32x4::from(other[e423]) * Simd32x4::from([self[e321], self[e3], self[e425], self[e235]]))
                - (Simd32x4::from(other[e431]) * self.group1().zw().with_zw(self[e1], self[e315]))
                - (Simd32x4::from(other[e412]) * Simd32x4::from([self[e2], self[e415], self[e321], self[e125]]))
                - (other.group1().yzxx() * self.group0().zxy().with_w(self[e415]))
                - (other.group2().www() * self.group3().xyz()).with_w(other[e425] * self[e425])
                - (other.group3().yzx() * self.group0().zxy()).with_w(other[e435] * self[e435]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e235] * self[e4]) + (other[e125] * self[e431]) + (other[e4] * self[e235]) + (other[e1] * self[e321]) + (other[e3] * self[e2]) + (other[e5] * self[e423]),
                (other[e235] * self[e412]) + (other[e315] * self[e4]) + (other[e4] * self[e315]) + (other[e1] * self[e3]) + (other[e2] * self[e321]) + (other[e5] * self[e431]),
                (other[e315] * self[e423]) + (other[e125] * self[e4]) + (other[e4] * self[e125]) + (other[e2] * self[e1]) + (other[e3] * self[e321]) + (other[e5] * self[e412]),
                -(other[e425] * self[e2]) - (other[e435] * self[e3]) - (other[e1] * self[e415]) - (other[e2] * self[e425]) - (other[e3] * self[e435]) - (other[e5] * self[e4]),
            ]) + (Simd32x4::from([self[e12345], self[e435], self[e415], self[e431]]) * other.group1().xxy().with_w(other[e315]))
                + (Simd32x4::from([self[e425], self[e12345], self[e12345], self[e412]]) * other.group1().zyz().with_w(other[e125]))
                + (other.group0().xxy() * self.group2().wzx()).with_w(other[e321] * self[e12345])
                + (other.group0().zyz() * self.group2().yww()).with_w(other[e235] * self[e423])
                + (other.group1().www() * self.group3().xyz()).with_w(other[e4] * self[e5])
                - (self.group2().zxyx() * other.group0().yzx().with_w(other[e423]))
                - (self.group3().zxyx() * other.group3().yzx().with_w(other[e415]))
                - (other.group1().yzx() * self.group1().zxy()).with_w(other[e431] * self[e315])
                - (other.group2().yzx() * self.group0().zxy()).with_w(other[e412] * self[e125]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e125] * self[e2]) + (other[e2] * self[e125]) + (other[e5] * self[e415]) + (other[e5] * self[e1]),
                (other[e315] * self[e321]) + (other[e3] * self[e235]) + (other[e5] * self[e425]) + (other[e5] * self[e2]),
                (other[e125] * self[e321]) + (other[e1] * self[e315]) + (other[e5] * self[e435]) + (other[e5] * self[e3]),
                -(other[e315] * self[e425]) - (other[e315] * self[e2]) - (other[e125] * self[e435]) - (other[e125] * self[e3]),
            ]) + (Simd32x4::from([self[e12345], self[e435], self[e415], self[e125]]) * other.group2().xxy().with_w(other[e3]))
                + (Simd32x4::from([self[e425], self[e12345], self[e12345], self[e321]]) * other.group2().zyz().with_w(other[e5]))
                + (Simd32x4::from([self[e321], self[e3], self[e1], self[e12345]]) * other.group2().xxy().with_w(other[e5]))
                + (self.group2().ywwy() * other.group1().zyz().with_w(other[e2]))
                + (self.group2().wzxx() * other.group1().xxy().with_w(other[e1]))
                - (other.group1().yzxx() * self.group2().zxyx())
                - (other.group1().wwwy() * self.group2().xyzy())
                - (other.group2().yzx() * self.group1().zxy()).with_w(other[e435] * self[e125])
                - (other.group2().yzx() * self.group3().zxy()).with_w(other[e321] * self[e5])
                - (other.group3().xxy() * self.group2().wzx()).with_w(other[e235] * self[e415])
                - (other.group3().zyz() * self.group2().yww()).with_w(other[e235] * self[e1]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e315] * self[e412]) + (other[e4] * self[e235]) + (other[e1] * self[e12345]) + (other[e3] * self[e425]),
                (other[e125] * self[e423]) + (other[e4] * self[e315]) + (other[e1] * self[e435]) + (other[e2] * self[e12345]),
                (other[e235] * self[e431]) + (other[e4] * self[e125]) + (other[e2] * self[e415]) + (other[e3] * self[e12345]),
                -(other[e4] * self[e321]) - (other[e1] * self[e423]) - (other[e2] * self[e431]) - (other[e3] * self[e412]),
            ]) + (Simd32x4::from([self[e321], self[e3], self[e1], self[e3]]) * other.group1().xxy().with_w(other[e412]))
                + (Simd32x4::from([self[e2], self[e321], self[e321], self[e4]]) * other.group1().zyzw())
                + (other.group0().xxy() * self.group2().wzx()).with_w(other[e423] * self[e1])
                + (other.group0().zyz() * self.group2().yww()).with_w(other[e431] * self[e2])
                + (other.group1().www() * self.group1().xyz()).with_w(other[e4] * self[e12345])
                - (Simd32x4::from([self[e431], self[e4], self[e4], self[e423]]) * other.group2().zyz().with_w(other[e415]))
                - (Simd32x4::from([self[e4], self[e412], self[e423], self[e435]]) * other.group2().xxy().with_w(other[e412]))
                - (self.group0().xyzz() * other.group3().www().with_w(other[e435]))
                - (other.group0().yzx() * self.group2().zxy()).with_w(other[e423] * self[e415])
                - (other.group1().yzx() * self.group3().zxy()).with_w(other[e431] * self[e425])
                - (other.group3().yzx() * self.group1().zxy()).with_w(other[e425] * self[e431]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       38       73        0
    //    simd3        2       12        0
    //    simd4       53       49        0
    // Totals...
    // yes simd       93      134        0
    //  no simd      256      305        0
    fn anti_sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([self[e423], self[e431], self[e412], 1.0]) * other.group0().yy().with_zw(other[scalar], (other[e3215] * self[e4]) + (other[scalar] * self[e12345])),
            // e23, e31, e12, e45
            Simd32x4::from([other[scalar] * self[e415], other[scalar] * self[e425], other[scalar] * self[e435], other[scalar] * self[e321] * -1.0])
                + (Simd32x4::from(other[e3215]) * self.group0().xyz().with_w(self[e4])),
            // e15, e25, e35, e1234
            ((Simd32x3::from(other[e3215]) * self.group1().xyz()) + (Simd32x3::from(other[e3215]) * self.group3().xyz()) + (Simd32x3::from(other[scalar]) * self.group2().xyz()))
                .with_w(other[scalar] * self[e4]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[scalar] * self[e1] * -1.0,
                other[scalar] * self[e2] * -1.0,
                other[scalar] * self[e3] * -1.0,
                (other[e3215] * self[e321]) + (other[scalar] * self[e5]),
            ]) + (Simd32x4::from(other[e3215]) * self.group0()),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlatPoint> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       79      125        0
    //    simd3        3       21        0
    //    simd4       50       37        0
    // Totals...
    // yes simd      132      183        0
    //  no simd      288      336        0
    fn anti_sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([self[e423], self[e431], self[e412], 1.0])
                * other
                    .group0()
                    .www()
                    .with_w((other[e321] * self[e321]) - (other[e235] * self[e423]) - (other[e315] * self[e431]) - (other[e125] * self[e412])),
            // e415, e425, e435, e321
            Simd32x4::from([
                other[e315] * self[e412] * -1.0,
                other[e125] * self[e423] * -1.0,
                other[e235] * self[e431] * -1.0,
                other[e321] * self[e12345],
            ]) + (Simd32x4::from([self[e431], self[e4], self[e4], self[e431]]) * other.group0().zyzy())
                + (Simd32x4::from([self[e4], self[e412], self[e423], self[e423]]) * other.group0().xxyx())
                + (other.group0().wwwz() * self.group3().xyz().with_w(self[e412])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e235] * self[e12345]) + (other[e235] * self[e321]) + (other[e125] * self[e425]) + (other[e125] * self[e2]),
                (other[e235] * self[e435]) + (other[e235] * self[e3]) + (other[e315] * self[e12345]) + (other[e315] * self[e321]),
                (other[e315] * self[e415]) + (other[e315] * self[e1]) + (other[e125] * self[e12345]) + (other[e125] * self[e321]),
                -(other[e315] * self[e2]) - (other[e125] * self[e435]) - (other[e125] * self[e3]) - (other[e321] * self[e5]),
            ]) - (other.group0().yzxx() * self.group1().zxyx())
                - (other.group0().yzxx() * self.group3().zxyx())
                - (other.group0().wwwy() * self.group2().xyz().with_w(self[e425])),
            // e1, e2, e3, e4
            ((Simd32x3::from(other[e321]) * self.group1().xyz()) + (other.group0().yzx() * self.group0().zxy())
                - (Simd32x3::from([self[e431], self[e4], self[e4]]) * other.group0().zyz())
                - (Simd32x3::from([self[e4], self[e412], self[e423]]) * other.group0().xxy()))
            .with_w(other[e321] * self[e4]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlector> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       85      136        0
    //    simd3        0       20        0
    //    simd4       67       50        0
    // Totals...
    // yes simd      152      206        0
    //  no simd      353      396        0
    fn anti_sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                other[e3] * self[e431],
                other[e2] * self[e4],
                other[e3] * self[e4],
                -(other[e315] * self[e431]) - (other[e125] * self[e412]) - (other[e1] * self[e1]) - (other[e2] * self[e2]) - (other[e3] * self[e3]),
            ]) + (Simd32x4::from(other[e321]) * self.group0().xyz().with_w(self[e321]))
                + (Simd32x4::from([self[e4], self[e412], self[e423], self[e4]]) * other.group1().xxyw())
                - (self.group0().zxyx() * other.group1().yzx().with_w(other[e235])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e3] * self[e2]) + (other[e5] * self[e423]),
                (other[e2] * self[e321]) + (other[e5] * self[e431]),
                (other[e3] * self[e321]) + (other[e5] * self[e412]),
                -(other[e3] * self[e435]) - (other[e5] * self[e4]),
            ]) + (Simd32x4::from([self[e431], self[e4], self[e4], self[e431]]) * other.group0().zyzy())
                + (Simd32x4::from([self[e321], self[e3], self[e1], self[e12345]]) * other.group1().xxy().with_w(other[e321]))
                + (Simd32x4::from([self[e4], self[e412], self[e423], self[e423]]) * other.group0().xxyx())
                + (other.group0().wwwz() * self.group3().xyz().with_w(self[e412]))
                - (other.group1().yzxy() * self.group3().zxy().with_w(self[e425]))
                - (other.group0().yzx() * self.group0().zxy()).with_w(other[e1] * self[e415]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e5] * self[e415]) + (other[e5] * self[e1]),
                (other[e5] * self[e425]) + (other[e5] * self[e2]),
                (other[e5] * self[e435]) + (other[e5] * self[e3]),
                -(other[e125] * self[e3]) - (other[e321] * self[e5]),
            ]) + (Simd32x4::from([self[e12345], self[e435], self[e415], self[e235]]) * other.group0().xxy().with_w(other[e1]))
                + (Simd32x4::from([self[e425], self[e12345], self[e12345], self[e125]]) * other.group0().zyz().with_w(other[e3]))
                + (Simd32x4::from([self[e321], self[e3], self[e1], self[e315]]) * other.group0().xxy().with_w(other[e2]))
                + (Simd32x4::from([self[e2], self[e321], self[e321], self[e12345]]) * other.group0().zyz().with_w(other[e5]))
                + (other.group1().yzxw() * self.group2().zxy().with_w(self[e321]))
                - (other.group0().yzxx() * self.group1().zxyx())
                - (other.group0().yzxx() * self.group3().zxyx())
                - (other.group0().wwwy() * self.group2().xyz().with_w(self[e425]))
                - (other.group1().xxy() * self.group2().wzx()).with_w(other[e315] * self[e2])
                - (other.group1().zyz() * self.group2().yww()).with_w(other[e125] * self[e435]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e321] * self[e415]) + (other[e1] * self[e12345]) + (other[e3] * self[e425]) - (other[e5] * self[e423]),
                (other[e321] * self[e425]) + (other[e1] * self[e435]) + (other[e2] * self[e12345]) - (other[e5] * self[e431]),
                (other[e321] * self[e435]) + (other[e2] * self[e415]) + (other[e3] * self[e12345]) - (other[e5] * self[e412]),
                0.0,
            ]) + (other.group0().yzxw() * self.group0().zxy().with_w(self[e4]))
                - (Simd32x4::from([self[e431], self[e4], self[e4], self[e431]]) * other.group0().zyz().with_w(other[e2]))
                - (Simd32x4::from([self[e4], self[e412], self[e423], self[e423]]) * other.group0().xxy().with_w(other[e1]))
                - (other.group1().yzxz() * self.group1().zxy().with_w(self[e412])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiLine> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       69      112        0
    //    simd3        0       15        0
    //    simd4       63       52        0
    // Totals...
    // yes simd      132      179        0
    //  no simd      321      365        0
    fn anti_sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e23] * self[e4]) + (other[e12] * self[e431]),
                (other[e23] * self[e412]) + (other[e31] * self[e4]),
                (other[e31] * self[e423]) + (other[e12] * self[e4]),
                -(other[e31] * self[e425]) - (other[e12] * self[e435]) - (other[e15] * self[e423]) - (other[e25] * self[e431]) - (other[e35] * self[e412]),
            ]) - (other.group0().yzx() * self.group0().zxy()).with_w(other[e23] * self[e415]),
            // e23, e31, e12, e45
            Simd32x4::from([other[e35] * self[e431], other[e25] * self[e4], other[e35] * self[e4], other[e35] * self[e412] * -1.0])
                + (Simd32x4::from([self[e12345], self[e435], self[e415], self[e1]]) * other.group0().xxy().with_w(other[e23]))
                + (Simd32x4::from([self[e425], self[e12345], self[e12345], self[e2]]) * other.group0().zyz().with_w(other[e31]))
                + (Simd32x4::from([self[e4], self[e412], self[e423], self[e3]]) * other.group1().xxy().with_w(other[e12]))
                - (self.group0().zxyy() * other.group1().yzx().with_w(other[e25]))
                - (other.group0().yzx() * self.group1().zxy()).with_w(other[e15] * self[e423]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e23] * self[e5]) + (other[e12] * self[e315]) + (other[e15] * self[e12345]) + (other[e15] * self[e321]) + (other[e35] * self[e425]) + (other[e35] * self[e2]),
                (other[e23] * self[e125]) + (other[e31] * self[e5]) + (other[e15] * self[e435]) + (other[e15] * self[e3]) + (other[e25] * self[e12345]) + (other[e25] * self[e321]),
                (other[e31] * self[e235]) + (other[e12] * self[e5]) + (other[e25] * self[e415]) + (other[e25] * self[e1]) + (other[e35] * self[e12345]) + (other[e35] * self[e321]),
                0.0,
            ]) - (other.group0().yzx() * self.group2().zxy()).with_w(other[e23] * self[e423])
                - (other.group1().yzx() * self.group1().zxy()).with_w(other[e31] * self[e431])
                - (other.group1().yzx() * self.group3().zxy()).with_w(other[e12] * self[e412]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e31] * self[e3]) + (other[e15] * self[e4]) + (other[e35] * self[e431]),
                (other[e12] * self[e1]) + (other[e15] * self[e412]) + (other[e25] * self[e4]),
                (other[e23] * self[e2]) + (other[e25] * self[e423]) + (other[e35] * self[e4]),
                -(other[e15] * self[e415]) - (other[e15] * self[e1]) - (other[e25] * self[e425]) - (other[e25] * self[e2]) - (other[e35] * self[e435]) - (other[e35] * self[e3]),
            ]) - (Simd32x4::from([self[e321], self[e3], self[e1], self[e235]]) * other.group0().xxy().with_w(other[e23]))
                - (Simd32x4::from([self[e2], self[e321], self[e321], self[e315]]) * other.group0().zyz().with_w(other[e31]))
                - (other.group1().yzx() * self.group0().zxy()).with_w(other[e12] * self[e125]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiMotor> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       69      107        0
    //    simd3        0       11        0
    //    simd4       71       64        0
    // Totals...
    // yes simd      140      182        0
    //  no simd      353      396        0
    fn anti_sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                other[scalar] * self[e423],
                other[scalar] * self[e431],
                other[scalar] * self[e412],
                -(other[e31] * self[e425]) - (other[e12] * self[e435]) - (other[e15] * self[e423]) - (other[e25] * self[e431]) - (other[e35] * self[e412]),
            ]) + (Simd32x4::from([self[e431], self[e4], self[e4], self[e4]]) * other.group0().zyz().with_w(other[e3215]))
                + (Simd32x4::from([self[e4], self[e412], self[e423], self[e12345]]) * other.group0().xxyw())
                - (other.group0().yzxx() * self.group0().zxy().with_w(self[e415])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e35] * self[e431]) + (other[e3215] * self[e423]),
                (other[e25] * self[e4]) + (other[e3215] * self[e431]),
                (other[e35] * self[e4]) + (other[e3215] * self[e412]),
                -(other[e25] * self[e431]) - (other[e35] * self[e412]),
            ]) + (Simd32x4::from([self[e12345], self[e435], self[e415], self[e1]]) * other.group0().xxyx())
                + (Simd32x4::from([self[e425], self[e12345], self[e12345], self[e2]]) * other.group0().zyzy())
                + (Simd32x4::from([self[e4], self[e412], self[e423], self[e4]]) * other.group1().xxyw())
                + (other.group0().wwwz() * self.group1().xyz().with_w(self[e3]))
                - (other.group0().yzxw() * self.group1().zxyw())
                - (other.group1().yzxx() * self.group0().zxyx()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e12] * self[e315])
                    + (other[scalar] * self[e235])
                    + (other[e15] * self[e12345])
                    + (other[e15] * self[e321])
                    + (other[e35] * self[e425])
                    + (other[e35] * self[e2])
                    + (other[e3215] * self[e415])
                    + (other[e3215] * self[e1]),
                (other[e31] * self[e5])
                    + (other[scalar] * self[e315])
                    + (other[e15] * self[e435])
                    + (other[e15] * self[e3])
                    + (other[e25] * self[e12345])
                    + (other[e25] * self[e321])
                    + (other[e3215] * self[e425])
                    + (other[e3215] * self[e2]),
                (other[e12] * self[e5])
                    + (other[scalar] * self[e125])
                    + (other[e25] * self[e415])
                    + (other[e25] * self[e1])
                    + (other[e35] * self[e12345])
                    + (other[e35] * self[e321])
                    + (other[e3215] * self[e435])
                    + (other[e3215] * self[e3]),
                0.0,
            ]) + (other.group0().xxyw() * self.group2().wzx().with_w(self[e4]))
                - (other.group0().yzxx() * self.group2().zxy().with_w(self[e423]))
                - (other.group1().yzx() * self.group1().zxy()).with_w(other[e31] * self[e431])
                - (other.group1().yzx() * self.group3().zxy()).with_w(other[e12] * self[e412]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e3215] * self[e423],
                other[e3215] * self[e431],
                other[e3215] * self[e412],
                -(other[e15] * self[e1]) - (other[e25] * self[e425]) - (other[e25] * self[e2]) - (other[e35] * self[e435]) - (other[e35] * self[e3]),
            ]) + (Simd32x4::from([self[e431], self[e4], self[e4], self[e321]]) * other.group1().zyzw())
                + (Simd32x4::from([self[e4], self[e412], self[e423], self[e12345]]) * other.group1().xxyw())
                + (other.group0().yzxw() * self.group3().zxy().with_w(self[e5]))
                - (Simd32x4::from([self[e321], self[e3], self[e1], self[e235]]) * other.group0().xxyx())
                - (Simd32x4::from([self[e2], self[e321], self[e321], self[e315]]) * other.group0().zyzy())
                - (other.group0().wwwz() * self.group3().xyz().with_w(self[e125]))
                - (other.group1().yzxx() * self.group0().zxy().with_w(self[e415])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiPlane> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       80      130        0
    //    simd3        0       17        0
    //    simd4       52       38        0
    // Totals...
    // yes simd      132      185        0
    //  no simd      288      333        0
    fn anti_sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([other[e3] * self[e431], other[e2] * self[e4], other[e3] * self[e4], -(other[e2] * self[e2]) - (other[e3] * self[e3])])
                + (Simd32x4::from([self[e4], self[e412], self[e423], self[e4]]) * other.group0().xxyw())
                - (other.group0().yzxx() * self.group0().zxy().with_w(self[e1])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e1] * self[e321]) + (other[e3] * self[e2]) + (other[e5] * self[e423]),
                (other[e1] * self[e3]) + (other[e2] * self[e321]) + (other[e5] * self[e431]),
                (other[e2] * self[e1]) + (other[e3] * self[e321]) + (other[e5] * self[e412]),
                -(other[e2] * self[e425]) - (other[e3] * self[e435]) - (other[e5] * self[e4]),
            ]) - (other.group0().yzxx() * self.group3().zxy().with_w(self[e415])),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(other[e1] * self[e5]) - (other[e3] * self[e315]),
                -(other[e1] * self[e125]) - (other[e2] * self[e5]),
                -(other[e2] * self[e235]) - (other[e3] * self[e5]),
                (other[e5] * self[e12345]) + (other[e5] * self[e321]),
            ]) + (other.group0().yzxx() * self.group2().zxyx())
                + (other.group0().wwwy() * self.group1().xyz().with_w(self[e315]))
                + (other.group0().wwwz() * self.group3().xyz().with_w(self[e125])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e1] * self[e12345]) + (other[e3] * self[e425]),
                (other[e1] * self[e435]) + (other[e2] * self[e12345]),
                (other[e2] * self[e415]) + (other[e3] * self[e12345]),
                other[e3] * self[e412] * -1.0,
            ]) - (other.group0().yzxx() * self.group1().zxy().with_w(self[e423]))
                - (other.group0().wwwy() * self.group0().xyzy()),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiScalar> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       64       97        0
    //    simd3        0       17        0
    //    simd4       44       34        0
    // Totals...
    // yes simd      108      148        0
    //  no simd      240      284        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(other[e12345]) * self.group0(),
            // e415, e425, e435, e321
            Simd32x4::from(other[e12345]) * self.group1(),
            // e235, e315, e125, e5
            Simd32x4::from(other[e12345]) * self.group2(),
            // e1, e2, e3, e4
            Simd32x4::from(other[e12345]) * self.group3(),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      112      171        0
    //    simd3        0       27        0
    //    simd4       68       44        0
    // Totals...
    // yes simd      180      242        0
    //  no simd      384      428        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e431] * self[e3]) + (other[e412] * self[e425]) + (other[e415] * self[e4]) + (other[e435] * self[e431]) + (other[e321] * self[e423]),
                (other[e431] * self[e12345]) + (other[e412] * self[e1]) + (other[e415] * self[e412]) + (other[e425] * self[e4]) + (other[e321] * self[e431]),
                (other[e431] * self[e415]) + (other[e412] * self[e12345]) + (other[e425] * self[e423]) + (other[e435] * self[e4]) + (other[e321] * self[e412]),
                -(other[e415] * self[e415]) - (other[e425] * self[e425]) - (other[e435] * self[e435]) - (other[e315] * self[e431]) - (other[e125] * self[e412]),
            ]) + (Simd32x4::from([self[e12345], self[e435], self[e2], self[e321]]) * other.group0().xxx().with_w(other[e321]))
                - (Simd32x4::from(other[e423]) * Simd32x4::from([self[e321], self[e3], self[e425], self[e235]]))
                - (Simd32x4::from(other[e431]) * self.group1().zw().with_zw(self[e1], self[e315]))
                - (Simd32x4::from(other[e412]) * Simd32x4::from([self[e2], self[e415], self[e321], self[e125]]))
                - (self.group0().zxyx() * other.group1().yzx().with_w(other[e235])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e415] * self[e12345]) + (other[e435] * self[e425]) + (other[e321] * self[e1]),
                (other[e415] * self[e435]) + (other[e425] * self[e12345]) + (other[e321] * self[e2]),
                (other[e425] * self[e415]) + (other[e435] * self[e12345]) + (other[e321] * self[e3]),
                -(other[e415] * self[e1]) - (other[e425] * self[e2]) - (other[e435] * self[e3]),
            ]) + (Simd32x4::from([self[e431], self[e4], self[e4], self[e12345]]) * other.group2().zyz().with_w(other[e321]))
                + (Simd32x4::from([self[e4], self[e412], self[e423], self[e412]]) * other.group2().xxy().with_w(other[e125]))
                + (other.group0().xxy() * self.group2().wzx()).with_w(other[e235] * self[e423])
                + (other.group0().zyz() * self.group2().yww()).with_w(other[e315] * self[e431])
                - (self.group2().zxyx() * other.group0().yzx().with_w(other[e423]))
                - (other.group2().yzx() * self.group0().zxy()).with_w(other[e431] * self[e315])
                - (other.group1().yzx() * self.group1().zxy()).with_w(other[e412] * self[e125]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e415] * self[e5])
                    + (other[e435] * self[e315])
                    + (other[e235] * self[e12345])
                    + (other[e235] * self[e321])
                    + (other[e125] * self[e425])
                    + (other[e125] * self[e2]),
                (other[e415] * self[e125])
                    + (other[e425] * self[e5])
                    + (other[e235] * self[e435])
                    + (other[e235] * self[e3])
                    + (other[e315] * self[e12345])
                    + (other[e315] * self[e321]),
                (other[e425] * self[e235])
                    + (other[e435] * self[e5])
                    + (other[e315] * self[e415])
                    + (other[e315] * self[e1])
                    + (other[e125] * self[e12345])
                    + (other[e125] * self[e321]),
                -(other[e415] * self[e235])
                    - (other[e425] * self[e315])
                    - (other[e435] * self[e125])
                    - (other[e321] * self[e5])
                    - (other[e125] * self[e435])
                    - (other[e125] * self[e3]),
            ]) - (self.group1().zxyx() * other.group2().yzx().with_w(other[e235]))
                - (self.group3().zxyx() * other.group2().yzx().with_w(other[e235]))
                - (other.group1().yzx() * self.group2().zxy()).with_w(other[e315] * self[e425])
                - (other.group1().www() * self.group2().xyz()).with_w(other[e315] * self[e2]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e435] * self[e2]) + (other[e321] * self[e415]),
                (other[e425] * self[e321]) + (other[e321] * self[e425]),
                (other[e435] * self[e321]) + (other[e321] * self[e435]),
                -(other[e425] * self[e431]) - (other[e435] * self[e412]),
            ]) + (Simd32x4::from([self[e321], self[e3], self[e1], self[e4]]) * other.group1().xxyw())
                + (other.group0().xxy() * self.group2().wzx()).with_w(other[e423] * self[e1])
                + (other.group0().zyz() * self.group2().yww()).with_w(other[e431] * self[e2])
                + (other.group2().yzx() * self.group0().zxy()).with_w(other[e412] * self[e3])
                - (Simd32x4::from([self[e431], self[e4], self[e4], self[e435]]) * other.group2().zyz().with_w(other[e412]))
                - (Simd32x4::from([self[e4], self[e412], self[e423], self[e425]]) * other.group2().xxy().with_w(other[e431]))
                - (other.group1().yzxx() * self.group3().zxy().with_w(self[e423]))
                - (other.group0().yzx() * self.group2().zxy()).with_w(other[e423] * self[e415]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      112      173        0
    //    simd3        0       29        0
    //    simd4       72       46        0
    // Totals...
    // yes simd      184      248        0
    //  no simd      400      444        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e412] * self[e425]) + (other[e415] * self[e4]) + (other[e435] * self[e431]) + (other[e321] * self[e423]) + (other[e12345] * self[e423]),
                (other[e412] * self[e1]) + (other[e415] * self[e412]) + (other[e425] * self[e4]) + (other[e321] * self[e431]) + (other[e12345] * self[e431]),
                (other[e412] * self[e12345]) + (other[e425] * self[e423]) + (other[e435] * self[e4]) + (other[e321] * self[e412]) + (other[e12345] * self[e412]),
                -(other[e425] * self[e425]) - (other[e435] * self[e435]) - (other[e235] * self[e423]) - (other[e315] * self[e431]) - (other[e125] * self[e412]),
            ]) + (Simd32x4::from([self[e12345], self[e435], self[e2], self[e321]]) * other.group0().xxx().with_w(other[e321]))
                + (Simd32x4::from([self[e3], self[e12345], self[e415], self[e12345]]) * other.group0().yyy().with_w(other[e12345]))
                - (Simd32x4::from(other[e423]) * Simd32x4::from([self[e321], self[e3], self[e425], self[e235]]))
                - (Simd32x4::from(other[e431]) * self.group1().zw().with_zw(self[e1], self[e315]))
                - (Simd32x4::from(other[e412]) * Simd32x4::from([self[e2], self[e415], self[e321], self[e125]]))
                - (other.group1().yzxx() * self.group0().zxy().with_w(self[e415])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e235] * self[e4]) + (other[e125] * self[e431]) + (other[e12345] * self[e415]),
                (other[e235] * self[e412]) + (other[e315] * self[e4]) + (other[e12345] * self[e425]),
                (other[e315] * self[e423]) + (other[e125] * self[e4]) + (other[e12345] * self[e435]),
                -(other[e415] * self[e1]) - (other[e425] * self[e2]) - (other[e435] * self[e3]),
            ]) + (Simd32x4::from([self[e12345], self[e435], self[e415], self[e431]]) * other.group1().xxy().with_w(other[e315]))
                + (Simd32x4::from([self[e425], self[e12345], self[e12345], self[e412]]) * other.group1().zyz().with_w(other[e125]))
                + (other.group0().xxy() * self.group2().wzx()).with_w(other[e321] * self[e12345])
                + (other.group0().zyz() * self.group2().yww()).with_w(other[e235] * self[e423])
                + (other.group1().www() * self.group3().xyz()).with_w(other[e12345] * self[e321])
                - (self.group2().zxyx() * other.group0().yzx().with_w(other[e423]))
                - (other.group1().yzx() * self.group1().zxy()).with_w(other[e431] * self[e315])
                - (other.group2().yzx() * self.group0().zxy()).with_w(other[e412] * self[e125]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e435] * self[e315])
                    + (other[e235] * self[e12345])
                    + (other[e235] * self[e321])
                    + (other[e125] * self[e425])
                    + (other[e125] * self[e2])
                    + (other[e12345] * self[e235]),
                (other[e425] * self[e5])
                    + (other[e235] * self[e435])
                    + (other[e235] * self[e3])
                    + (other[e315] * self[e12345])
                    + (other[e315] * self[e321])
                    + (other[e12345] * self[e315]),
                (other[e435] * self[e5])
                    + (other[e315] * self[e415])
                    + (other[e315] * self[e1])
                    + (other[e125] * self[e12345])
                    + (other[e125] * self[e321])
                    + (other[e12345] * self[e125]),
                -(other[e235] * self[e415])
                    - (other[e235] * self[e1])
                    - (other[e315] * self[e425])
                    - (other[e315] * self[e2])
                    - (other[e125] * self[e435])
                    - (other[e125] * self[e3]),
            ]) + (self.group2().wzxw() * other.group1().xxy().with_w(other[e12345]))
                - (other.group1().yzxx() * self.group2().zxyx())
                - (other.group1().wwwy() * self.group2().xyzy())
                - (other.group2().yzx() * self.group1().zxy()).with_w(other[e435] * self[e125])
                - (other.group2().yzx() * self.group3().zxy()).with_w(other[e321] * self[e5]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e315] * self[e412]) + (other[e12345] * self[e1]),
                (other[e125] * self[e423]) + (other[e12345] * self[e2]),
                (other[e235] * self[e431]) + (other[e12345] * self[e3]),
                -(other[e425] * self[e431]) - (other[e435] * self[e412]),
            ]) + (Simd32x4::from([self[e321], self[e3], self[e1], self[e3]]) * other.group1().xxy().with_w(other[e412]))
                + (Simd32x4::from([self[e2], self[e321], self[e321], self[e4]]) * other.group1().zyzw())
                + (other.group0().xxy() * self.group2().wzx()).with_w(other[e423] * self[e1])
                + (other.group0().zyz() * self.group2().yww()).with_w(other[e431] * self[e2])
                + (other.group1().www() * self.group1().xyz()).with_w(other[e12345] * self[e4])
                - (Simd32x4::from([self[e431], self[e4], self[e4], self[e423]]) * other.group2().zyz().with_w(other[e415]))
                - (Simd32x4::from([self[e4], self[e412], self[e423], self[e435]]) * other.group2().xxy().with_w(other[e412]))
                - (other.group0().yzx() * self.group2().zxy()).with_w(other[e423] * self[e415])
                - (other.group1().yzx() * self.group3().zxy()).with_w(other[e431] * self[e425]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       76      123        0
    //    simd3        0       16        0
    //    simd4       77       65        0
    // Totals...
    // yes simd      153      204        0
    //  no simd      384      431        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e41] * self[e12345]) + (other[e42] * self[e3]) + (other[e43] * self[e425]) + (other[e23] * self[e4]) + (other[e12] * self[e431]),
                (other[e41] * self[e435]) + (other[e42] * self[e12345]) + (other[e43] * self[e1]) + (other[e23] * self[e412]) + (other[e31] * self[e4]),
                (other[e41] * self[e2]) + (other[e42] * self[e415]) + (other[e43] * self[e12345]) + (other[e31] * self[e423]) + (other[e12] * self[e4]),
                -(other[e23] * self[e415]) - (other[e31] * self[e425]) - (other[e12] * self[e435]) - (other[e45] * self[e321]) - (other[e35] * self[e412]),
            ]) - (Simd32x4::from(other[e41]) * Simd32x4::from([self[e321], self[e3], self[e425], self[e235]]))
                - (Simd32x4::from(other[e42]) * self.group1().zw().with_zw(self[e1], self[e315]))
                - (Simd32x4::from(other[e43]) * Simd32x4::from([self[e2], self[e415], self[e321], self[e125]]))
                - (self.group0().xyzy() * other.group1().www().with_w(other[e25]))
                - (self.group0().zxyx() * other.group1().yzx().with_w(other[e15])),
            // e23, e31, e12, e45
            Simd32x4::from([other[e45] * self[e1] * -1.0, other[e45] * self[e2] * -1.0, other[e45] * self[e3] * -1.0, other[e45] * self[e12345]])
                + (Simd32x4::from([self[e431], self[e4], self[e4], self[e1]]) * other.group2().zyz().with_w(other[e23]))
                + (Simd32x4::from([self[e12345], self[e435], self[e415], self[e2]]) * other.group1().xxyy())
                + (Simd32x4::from([self[e425], self[e12345], self[e12345], self[e3]]) * other.group1().zyzz())
                + (Simd32x4::from([self[e4], self[e412], self[e423], self[e125]]) * other.group2().xxy().with_w(other[e43]))
                + (self.group2().ywwy() * other.group0().zyz().with_w(other[e42]))
                + (self.group2().wzxx() * other.group0().xxy().with_w(other[e41]))
                - (self.group0().zxyy() * other.group2().yzx().with_w(other[e25]))
                - (other.group0().yzx() * self.group2().zxy()).with_w(other[e15] * self[e423])
                - (other.group1().yzx() * self.group1().zxy()).with_w(other[e35] * self[e412]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e23] * self[e5]) + (other[e12] * self[e315]) + (other[e45] * self[e235]) + (other[e35] * self[e2]),
                (other[e23] * self[e125]) + (other[e31] * self[e5]) + (other[e45] * self[e315]) + (other[e25] * self[e321]),
                (other[e31] * self[e235]) + (other[e12] * self[e5]) + (other[e45] * self[e125]) + (other[e35] * self[e321]),
                -(other[e23] * self[e423]) - (other[e31] * self[e431]) - (other[e12] * self[e412]) - (other[e45] * self[e4]),
            ]) + (Simd32x4::from([self[e12345], self[e435], self[e415], self[e1]]) * other.group2().xxy().with_w(other[e41]))
                + (Simd32x4::from([self[e425], self[e12345], self[e12345], self[e3]]) * other.group2().zyz().with_w(other[e43]))
                + (Simd32x4::from([self[e321], self[e3], self[e1], self[e2]]) * other.group2().xxy().with_w(other[e42]))
                - (self.group1().zxyx() * other.group2().yzx().with_w(other[e41]))
                - (other.group2().yzx() * self.group3().zxy()).with_w(other[e42] * self[e425])
                - (other.group1().yzx() * self.group2().zxy()).with_w(other[e43] * self[e435]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e31] * self[e3]) + (other[e45] * self[e415]) + (other[e15] * self[e4]) + (other[e35] * self[e431]),
                (other[e12] * self[e1]) + (other[e45] * self[e425]) + (other[e15] * self[e412]) + (other[e25] * self[e4]),
                (other[e23] * self[e2]) + (other[e45] * self[e435]) + (other[e25] * self[e423]) + (other[e35] * self[e4]),
                -(other[e23] * self[e235]) - (other[e31] * self[e315]) - (other[e12] * self[e125]) - (other[e35] * self[e3]),
            ]) + (self.group2().zxyw() * other.group0().yzx().with_w(other[e45]))
                - (Simd32x4::from([self[e321], self[e3], self[e1], self[e2]]) * other.group1().xxy().with_w(other[e25]))
                - (Simd32x4::from([self[e2], self[e321], self[e321], self[e435]]) * other.group1().zyz().with_w(other[e35]))
                - (other.group0().xxy() * self.group2().wzx()).with_w(other[e15] * self[e415])
                - (other.group0().zyz() * self.group2().yww()).with_w(other[e15] * self[e1])
                - (other.group2().yzx() * self.group0().zxy()).with_w(other[e25] * self[e425]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       68      119        0
    //    simd3        0       22        0
    //    simd4       99       81        0
    // Totals...
    // yes simd      167      222        0
    //  no simd      464      509        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e1234] * self[e415]) + (other[e4315] * self[e412]),
                (other[e1234] * self[e425]) + (other[e4125] * self[e423]),
                (other[e1234] * self[e435]) + (other[e4235] * self[e431]),
                -(other[e25] * self[e431]) - (other[e35] * self[e412]),
            ]) + (Simd32x4::from([self[e431], self[e4], self[e4], self[e4]]) * other.group1().zyz().with_w(other[e3215]))
                + (Simd32x4::from([self[e12345], self[e435], self[e2], self[e5]]) * other.group0().xxx().with_w(other[e1234]))
                + (Simd32x4::from([self[e425], self[e1], self[e12345], self[e2]]) * other.group0().zzz().with_w(other[e4315]))
                + (Simd32x4::from([self[e3], self[e12345], self[e415], self[e1]]) * other.group0().yyy().with_w(other[e4235]))
                + (Simd32x4::from([self[e4], self[e412], self[e423], self[e3]]) * other.group1().xxy().with_w(other[e4125]))
                - (Simd32x4::from(other[e41]) * Simd32x4::from([self[e321], self[e3], self[e425], self[e235]]))
                - (Simd32x4::from(other[e42]) * self.group1().zw().with_zw(self[e1], self[e315]))
                - (Simd32x4::from(other[e43]) * Simd32x4::from([self[e2], self[e415], self[e321], self[e125]]))
                - (Simd32x4::from([self[e431], self[e4], self[e4], self[e423]]) * other.group3().zyz().with_w(other[e15]))
                - (Simd32x4::from([self[e4], self[e412], self[e423], self[e321]]) * other.group3().xxy().with_w(other[e45]))
                - (other.group1().yzxx() * self.group0().zxy().with_w(self[e415]))
                - (other.group1().wwwy() * self.group0().xyz().with_w(self[e425]))
                - (other.group2().www() * self.group3().xyz()).with_w(other[e12] * self[e435]),
            // e23, e31, e12, e45
            Simd32x4::from([other[e3215] * self[e423], other[e3215] * self[e431], other[e3215] * self[e412], other[e4125] * self[e435] * -1.0])
                + (Simd32x4::from([self[e431], self[e4], self[e4], self[e3]]) * other.group2().zyz().with_w(other[e12]))
                + (Simd32x4::from([self[e12345], self[e435], self[e415], self[e125]]) * other.group1().xxy().with_w(other[e43]))
                + (Simd32x4::from([self[e425], self[e12345], self[e12345], self[e1]]) * other.group1().zyzx())
                + (Simd32x4::from([self[e4], self[e412], self[e423], self[e2]]) * other.group2().xxy().with_w(other[e31]))
                + (other.group3().yzxw() * self.group3().zxyw())
                + (self.group2().ywwy() * other.group0().zyz().with_w(other[e42]))
                + (self.group2().wzxx() * other.group0().xxy().with_w(other[e41]))
                + (other.group2().www() * self.group2().xyz()).with_w(other[e45] * self[e12345])
                - (Simd32x4::from([self[e321], self[e3], self[e1], self[e415]]) * other.group3().xxyx())
                - (Simd32x4::from([self[e2], self[e321], self[e321], self[e425]]) * other.group3().zyzy())
                - (other.group2().yzxw() * self.group0().zxy().with_w(self[e5]))
                - (other.group0().yzx() * self.group2().zxy()).with_w(other[e15] * self[e423])
                - (other.group1().yzx() * self.group1().zxy()).with_w(other[e25] * self[e431])
                - (other.group1().www() * self.group3().xyz()).with_w(other[e35] * self[e412]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e4235] * self[e5]) + (other[e4125] * self[e315]) + (other[e3215] * self[e415]) + (other[e3215] * self[e1]),
                (other[e4235] * self[e125]) + (other[e4315] * self[e5]) + (other[e3215] * self[e425]) + (other[e3215] * self[e2]),
                (other[e4315] * self[e235]) + (other[e4125] * self[e5]) + (other[e3215] * self[e435]) + (other[e3215] * self[e3]),
                -(other[e31] * self[e431]) - (other[e12] * self[e412]) - (other[e45] * self[e4]) - (other[e1234] * self[e321]),
            ]) + (Simd32x4::from([self[e12345], self[e435], self[e415], self[e12345]]) * other.group2().xxyw())
                + (Simd32x4::from([self[e425], self[e12345], self[e12345], self[e431]]) * other.group2().zyz().with_w(other[e4315]))
                + (Simd32x4::from([self[e321], self[e3], self[e1], self[e423]]) * other.group2().xxy().with_w(other[e4235]))
                + (Simd32x4::from([self[e2], self[e321], self[e321], self[e412]]) * other.group2().zyz().with_w(other[e4125]))
                + (other.group1().xxy() * self.group2().wzx()).with_w(other[e41] * self[e1])
                + (other.group1().zyz() * self.group2().yww()).with_w(other[e42] * self[e2])
                + (other.group1().www() * self.group2().xyz()).with_w(other[e43] * self[e3])
                - (self.group1().zxyy() * other.group2().yzx().with_w(other[e42]))
                - (other.group1().yzx() * self.group2().zxy()).with_w(other[e41] * self[e415])
                - (other.group2().yzx() * self.group3().zxy()).with_w(other[e43] * self[e435])
                - (other.group3().yzx() * self.group2().zxy()).with_w(other[e23] * self[e423]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e15] * self[e4]) + (other[e35] * self[e431]) + (other[e4235] * self[e12345]) + (other[e4125] * self[e425]) + (other[e3215] * self[e423]),
                (other[e15] * self[e412]) + (other[e25] * self[e4]) + (other[e4235] * self[e435]) + (other[e4315] * self[e12345]) + (other[e3215] * self[e431]),
                (other[e25] * self[e423]) + (other[e35] * self[e4]) + (other[e4315] * self[e415]) + (other[e4125] * self[e12345]) + (other[e3215] * self[e412]),
                -(other[e35] * self[e435]) - (other[e35] * self[e3]) - (other[e4235] * self[e235]) - (other[e4315] * self[e315]) - (other[e4125] * self[e125]),
            ]) + (self.group1() * other.group1().www().with_w(other[e3215]))
                + (self.group2().zxyw() * other.group0().yzx().with_w(other[e45]))
                + (other.group1().yzx() * self.group3().zxy()).with_w(other[e3215] * self[e12345])
                - (Simd32x4::from([self[e321], self[e3], self[e1], self[e125]]) * other.group1().xxyz())
                - (Simd32x4::from([self[e2], self[e321], self[e321], self[e415]]) * other.group1().zyz().with_w(other[e15]))
                - (other.group2().yzxx() * self.group0().zxy().with_w(self[e1]))
                - (other.group2().wwwy() * self.group2().xyz().with_w(self[e425]))
                - (self.group2().ywwy() * other.group0().zyz().with_w(other[e31]))
                - (self.group2().wzxx() * other.group0().xxy().with_w(other[e23]))
                - (other.group3().yzx() * self.group1().zxy()).with_w(other[e25] * self[e2]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       65      105        0
    //    simd3        1       19        0
    //    simd4       47       35        0
    // Totals...
    // yes simd      113      159        0
    //  no simd      256      302        0
    fn anti_sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([self[e423], self[e431], self[e412], 1.0]) * other.group0().yy().with_zw(other[e12345], (other[e5] * self[e4]) + (other[e12345] * self[e12345])),
            // e415, e425, e435, e321
            Simd32x4::from([other[e12345] * self[e415], other[e12345] * self[e425], other[e12345] * self[e435], other[e5] * self[e4] * -1.0])
                + (other.group0().xx().with_zw(other[e5], other[e12345]) * self.group0().xyz().with_w(self[e321])),
            // e235, e315, e125, e5
            (Simd32x4::from(other[e5]) * self.group1().xyz().with_w(self[e12345]))
                + (Simd32x4::from(other[e5]) * self.group3().xyz().with_w(self[e321]))
                + (Simd32x4::from(other[e12345]) * self.group2()),
            // e1, e2, e3, e4
            ((Simd32x3::from(other[e12345]) * self.group3().xyz()) - (Simd32x3::from(other[e5]) * self.group0().xyz())).with_w(other[e12345] * self[e4]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       46       79        0
    //    simd3        6       16        0
    //    simd4       56       53        0
    // Totals...
    // yes simd      108      148        0
    //  no simd      288      339        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([self[e423], self[e431], self[e412], 1.0])
                * other
                    .group0()
                    .www()
                    .with_w(-(other[e15] * self[e423]) - (other[e25] * self[e431]) - (other[e35] * self[e412]) - (other[e45] * self[e321]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e23, e31, e12, e45
            Simd32x4::from([other[e35] * self[e431], other[e25] * self[e4], other[e35] * self[e4], other[e35] * self[e412] * -1.0])
                + (Simd32x4::from([self[e4], self[e412], self[e423], self[e12345]]) * other.group0().xxyw())
                - (other.group0().yzxx() * self.group0().zxyx())
                - (other.group0().wwwy() * self.group3().xyz().with_w(self[e431])),
            // e15, e25, e35, e1234
            ((Simd32x3::from(other[e45]) * self.group2().xyz())
                + (Simd32x3::from([self[e12345], self[e435], self[e415]]) * other.group0().xxy())
                + (Simd32x3::from([self[e425], self[e12345], self[e12345]]) * other.group0().zyz())
                + (Simd32x3::from([self[e321], self[e3], self[e1]]) * other.group0().xxy())
                + (Simd32x3::from([self[e2], self[e321], self[e321]]) * other.group0().zyz())
                - (other.group0().yzx() * self.group1().zxy())
                - (other.group0().yzx() * self.group3().zxy()))
            .with_w(other[e45] * self[e4] * -1.0),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e35] * self[e431]) + (other[e45] * self[e415]),
                (other[e25] * self[e4]) + (other[e45] * self[e425]),
                (other[e35] * self[e4]) + (other[e45] * self[e435]),
                -(other[e15] * self[e1]) - (other[e25] * self[e425]) - (other[e25] * self[e2]) - (other[e35] * self[e435]) - (other[e35] * self[e3]),
            ]) + (Simd32x4::from([self[e4], self[e412], self[e423], self[e5]]) * other.group0().xxyw())
                - (other.group0().yzxx() * self.group0().zxy().with_w(self[e415])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       76      110        0
    //    simd3        0       10        0
    //    simd4       70       64        0
    // Totals...
    // yes simd      146      184        0
    //  no simd      356      396        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (other.group1().yzxx() * self.group0().zxy().with_w(self[e1]))
                + Simd32x3::from(0.0).with_w((other[e4315] * self[e2]) + (other[e4125] * self[e3]) + (other[e3215] * self[e4]) - (other[e45] * self[e321]))
                - (Simd32x4::from([self[e431], self[e4], self[e4], self[e412]]) * other.group1().zyz().with_w(other[e35]))
                - (Simd32x4::from([self[e4], self[e412], self[e423], self[e431]]) * other.group1().xxy().with_w(other[e25]))
                - (other.group0().wwwx() * self.group0().xyzx()),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e4315] * self[e3]) + (other[e3215] * self[e423]),
                (other[e4125] * self[e1]) + (other[e3215] * self[e431]),
                (other[e4235] * self[e2]) + (other[e3215] * self[e412]),
                -(other[e4315] * self[e425]) - (other[e4125] * self[e435]),
            ]) + (Simd32x4::from([self[e431], self[e4], self[e4], self[e4]]) * other.group0().zyz().with_w(other[e3215]))
                + (Simd32x4::from([self[e4], self[e412], self[e423], self[e12345]]) * other.group0().xxyw())
                - (Simd32x4::from([self[e321], self[e3], self[e1], self[e412]]) * other.group1().xxy().with_w(other[e35]))
                - (Simd32x4::from([self[e2], self[e321], self[e321], self[e415]]) * other.group1().zyzx())
                - (other.group0().yzxx() * self.group0().zxyx())
                - (other.group0().wwwy() * self.group3().xyz().with_w(self[e431])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e35] * self[e2])
                    + (other[e45] * self[e235])
                    + (other[e4235] * self[e5])
                    + (other[e4125] * self[e315])
                    + (other[e3215] * self[e415])
                    + (other[e3215] * self[e1])
                    - (other[e25] * self[e3])
                    - (other[e4315] * self[e125]),
                (other[e25] * self[e321])
                    + (other[e45] * self[e315])
                    + (other[e4235] * self[e125])
                    + (other[e4315] * self[e5])
                    + (other[e3215] * self[e425])
                    + (other[e3215] * self[e2])
                    - (other[e35] * self[e1])
                    - (other[e4125] * self[e235]),
                (other[e35] * self[e321])
                    + (other[e45] * self[e125])
                    + (other[e4315] * self[e235])
                    + (other[e4125] * self[e5])
                    + (other[e3215] * self[e435])
                    + (other[e3215] * self[e3])
                    - (other[e15] * self[e2])
                    - (other[e4235] * self[e315]),
                0.0,
            ]) + (Simd32x4::from([self[e12345], self[e435], self[e415], self[e423]]) * other.group0().xxy().with_w(other[e4235]))
                + (Simd32x4::from([self[e425], self[e12345], self[e12345], self[e412]]) * other.group0().zyz().with_w(other[e4125]))
                + (Simd32x4::from([self[e321], self[e3], self[e1], self[e431]]) * other.group0().xxy().with_w(other[e4315]))
                - (other.group0().yzxw() * self.group1().zxy().with_w(self[e4])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e4235] * self[e12345]) + (other[e4125] * self[e425]) + (other[e3215] * self[e423]),
                (other[e4235] * self[e435]) + (other[e4315] * self[e12345]) + (other[e3215] * self[e431]),
                (other[e4315] * self[e415]) + (other[e4125] * self[e12345]) + (other[e3215] * self[e412]),
                -(other[e25] * self[e425])
                    - (other[e25] * self[e2])
                    - (other[e35] * self[e435])
                    - (other[e35] * self[e3])
                    - (other[e4235] * self[e235])
                    - (other[e4315] * self[e315])
                    - (other[e4125] * self[e125]),
            ]) + (Simd32x4::from([self[e431], self[e4], self[e4], self[e12345]]) * other.group0().zyz().with_w(other[e3215]))
                + (Simd32x4::from([self[e4], self[e412], self[e423], self[e5]]) * other.group0().xxyw())
                + (self.group1() * other.group0().www().with_w(other[e3215]))
                - (other.group0().yzxx() * self.group0().zxy().with_w(self[e415]))
                - (other.group1().yzx() * self.group1().zxy()).with_w(other[e15] * self[e1]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       97      152        0
    //    simd3        0       23        0
    //    simd4       56       36        0
    // Totals...
    // yes simd      153      211        0
    //  no simd      321      365        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e415] * self[e4]) + (other[e435] * self[e431]),
                (other[e415] * self[e412]) + (other[e425] * self[e4]),
                (other[e425] * self[e423]) + (other[e435] * self[e4]),
                -(other[e425] * self[e425]) - (other[e435] * self[e435]) - (other[e235] * self[e423]) - (other[e315] * self[e431]) - (other[e125] * self[e412]),
            ]) - (other.group0().yzx() * self.group0().zxy()).with_w(other[e415] * self[e415]),
            // e415, e425, e435, e321
            Simd32x4::from([other[e125] * self[e431], other[e315] * self[e4], other[e125] * self[e4], other[e435] * self[e3] * -1.0])
                + (Simd32x4::from([self[e12345], self[e435], self[e415], self[e423]]) * other.group0().xxy().with_w(other[e235]))
                + (Simd32x4::from([self[e425], self[e12345], self[e12345], self[e431]]) * other.group0().zyz().with_w(other[e315]))
                + (Simd32x4::from([self[e4], self[e412], self[e423], self[e412]]) * other.group1().xxy().with_w(other[e125]))
                - (other.group0().yzx() * self.group1().zxy()).with_w(other[e415] * self[e1])
                - (other.group1().yzx() * self.group0().zxy()).with_w(other[e425] * self[e2]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e415] * self[e5])
                    + (other[e435] * self[e315])
                    + (other[e235] * self[e12345])
                    + (other[e235] * self[e321])
                    + (other[e125] * self[e425])
                    + (other[e125] * self[e2]),
                (other[e415] * self[e125])
                    + (other[e425] * self[e5])
                    + (other[e235] * self[e435])
                    + (other[e235] * self[e3])
                    + (other[e315] * self[e12345])
                    + (other[e315] * self[e321]),
                (other[e425] * self[e235])
                    + (other[e435] * self[e5])
                    + (other[e315] * self[e415])
                    + (other[e315] * self[e1])
                    + (other[e125] * self[e12345])
                    + (other[e125] * self[e321]),
                -(other[e235] * self[e415])
                    - (other[e235] * self[e1])
                    - (other[e315] * self[e425])
                    - (other[e315] * self[e2])
                    - (other[e125] * self[e435])
                    - (other[e125] * self[e3]),
            ]) - (self.group2().zxyx() * other.group0().yzx().with_w(other[e415]))
                - (other.group1().yzx() * self.group1().zxy()).with_w(other[e425] * self[e315])
                - (other.group1().yzx() * self.group3().zxy()).with_w(other[e435] * self[e125]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e415] * self[e321]) + (other[e435] * self[e2]) + (other[e315] * self[e412]),
                (other[e415] * self[e3]) + (other[e425] * self[e321]) + (other[e125] * self[e423]),
                (other[e425] * self[e1]) + (other[e435] * self[e321]) + (other[e235] * self[e431]),
                0.0,
            ]) - (Simd32x4::from([self[e431], self[e4], self[e4], self[e412]]) * other.group1().zyz().with_w(other[e435]))
                - (Simd32x4::from([self[e4], self[e412], self[e423], self[e431]]) * other.group1().xxy().with_w(other[e425]))
                - (other.group0().yzx() * self.group3().zxy()).with_w(other[e415] * self[e423]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      101      155        0
    //    simd3        0       23        0
    //    simd4       63       43        0
    // Totals...
    // yes simd      164      221        0
    //  no simd      353      396        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                other[e12345] * self[e423],
                other[e12345] * self[e431],
                other[e12345] * self[e412],
                -(other[e425] * self[e425]) - (other[e435] * self[e435]) - (other[e235] * self[e423]) - (other[e315] * self[e431]) - (other[e125] * self[e412]),
            ]) + (Simd32x4::from([self[e431], self[e4], self[e4], self[e4]]) * other.group0().zyz().with_w(other[e5]))
                + (Simd32x4::from([self[e4], self[e412], self[e423], self[e12345]]) * other.group0().xxyw())
                - (other.group0().yzxx() * self.group0().zxy().with_w(self[e415])),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e125] * self[e431]) + (other[e5] * self[e423]),
                (other[e315] * self[e4]) + (other[e5] * self[e431]),
                (other[e125] * self[e4]) + (other[e5] * self[e412]),
                -(other[e435] * self[e3]) - (other[e5] * self[e4]),
            ]) + (Simd32x4::from([self[e12345], self[e435], self[e415], self[e321]]) * other.group0().xxyw())
                + (Simd32x4::from([self[e425], self[e12345], self[e12345], self[e423]]) * other.group0().zyz().with_w(other[e235]))
                + (Simd32x4::from([self[e4], self[e412], self[e423], self[e412]]) * other.group1().xxyz())
                + (other.group0().www() * self.group1().xyz()).with_w(other[e315] * self[e431])
                - (other.group0().yzxx() * self.group1().zxy().with_w(self[e1]))
                - (other.group1().yzx() * self.group0().zxy()).with_w(other[e425] * self[e2]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e235] * self[e12345])
                    + (other[e235] * self[e321])
                    + (other[e125] * self[e425])
                    + (other[e125] * self[e2])
                    + (other[e5] * self[e415])
                    + (other[e5] * self[e1]),
                (other[e235] * self[e435])
                    + (other[e235] * self[e3])
                    + (other[e315] * self[e12345])
                    + (other[e315] * self[e321])
                    + (other[e5] * self[e425])
                    + (other[e5] * self[e2]),
                (other[e315] * self[e415])
                    + (other[e315] * self[e1])
                    + (other[e125] * self[e12345])
                    + (other[e125] * self[e321])
                    + (other[e5] * self[e435])
                    + (other[e5] * self[e3]),
                -(other[e235] * self[e415])
                    - (other[e235] * self[e1])
                    - (other[e315] * self[e425])
                    - (other[e315] * self[e2])
                    - (other[e125] * self[e435])
                    - (other[e125] * self[e3]),
            ]) + (other.group0().xxyw() * self.group2().wzxw())
                + (other.group0().zyz() * self.group2().yww()).with_w(other[e5] * self[e12345])
                + (other.group0().www() * self.group2().xyz()).with_w(other[e5] * self[e321])
                - (other.group0().yzxx() * self.group2().zxyx())
                - (other.group1().yzx() * self.group1().zxy()).with_w(other[e425] * self[e315])
                - (other.group1().yzx() * self.group3().zxy()).with_w(other[e435] * self[e125]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e435] * self[e2]) + (other[e12345] * self[e1]) + (other[e315] * self[e412]) - (other[e5] * self[e423]),
                (other[e425] * self[e321]) + (other[e12345] * self[e2]) + (other[e125] * self[e423]) - (other[e5] * self[e431]),
                (other[e435] * self[e321]) + (other[e12345] * self[e3]) + (other[e235] * self[e431]) - (other[e5] * self[e412]),
                0.0,
            ]) + (Simd32x4::from([self[e321], self[e3], self[e1], self[e4]]) * other.group0().xxyw())
                - (Simd32x4::from([self[e431], self[e4], self[e4], self[e412]]) * other.group1().zyz().with_w(other[e435]))
                - (Simd32x4::from([self[e4], self[e412], self[e423], self[e431]]) * other.group1().xxy().with_w(other[e425]))
                - (other.group0().yzxx() * self.group3().zxy().with_w(self[e423])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for VersorEven {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      160      223        0
    //    simd2       24       24        0
    //    simd3      120      159        0
    //    simd4       98       72        0
    // Totals...
    // yes simd      402      478        0
    //  no simd      960     1036        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (other[e4315] * self[e2]) + (other[e4125] * self[e3]) + (other[e3215] * self[e4]) - (other[e45] * self[e321]),
                (other[e321] * self[e321]) - (other[e1] * self[e1]) - (other[e2] * self[e2]) - (other[e3] * self[e3]),
            ]) + (Simd32x2::from(self[e12345]) * other.group0())
                + (Simd32x2::from(self[e5]) * Simd32x2::from([other[e1234], other[e4]]))
                + (Simd32x2::from([other[e4235], other[e5]]) * self.group3().xw())
                - (Simd32x2::from(self[e423]) * Simd32x2::from([other[e15], other[e235]]))
                - (Simd32x2::from(self[e431]) * Simd32x2::from([other[e25], other[e315]]))
                - (Simd32x2::from(self[e412]) * Simd32x2::from([other[e35], other[e125]]))
                - (Simd32x2::from(self[e415]) * Simd32x2::from([other[e23], other[e415]]))
                - (Simd32x2::from(self[e425]) * Simd32x2::from([other[e31], other[e425]]))
                - (Simd32x2::from(self[e435]) * Simd32x2::from([other[e12], other[e435]]))
                - (Simd32x2::from(self[e235]) * Simd32x2::from([other[e41], other[e423]]))
                - (Simd32x2::from(self[e315]) * Simd32x2::from([other[e42], other[e431]]))
                - (Simd32x2::from(self[e125]) * Simd32x2::from([other[e43], other[e412]])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e4] * self[e235]) + (other[e415] * self[e321]) + (other[e435] * self[e2]) + (other[e321] * self[e415]),
                (other[e4] * self[e315]) + (other[e415] * self[e3]) + (other[e425] * self[e321]) + (other[e321] * self[e425]),
                (other[e4] * self[e125]) + (other[e425] * self[e1]) + (other[e435] * self[e321]) + (other[e321] * self[e435]),
                -(other[e4] * self[e321]) - (other[e415] * self[e423]) - (other[e425] * self[e431]) - (other[e435] * self[e412]),
            ]) + (Simd32x4::from(other[e12345]) * self.group3())
                + (Simd32x4::from([self[e12345], self[e435], self[e415], self[e12345]]) * other.group1().xxyw())
                + (Simd32x4::from([self[e425], self[e12345], self[e12345], self[e4]]) * other.group1().zyz().with_w(other[e321]))
                + (other.group7().xxy() * self.group2().wzx()).with_w(other[e423] * self[e1])
                + (other.group7().zyz() * self.group2().yww()).with_w(other[e431] * self[e2])
                + (other.group8().yzx() * self.group0().zxy()).with_w(other[e412] * self[e3])
                - (Simd32x4::from([other[e5], other[e5], other[e5], self[e412]]) * self.group0().xyz().with_w(other[e3]))
                - (Simd32x4::from([self[e431], self[e4], self[e4], self[e435]]) * other.group8().zyz().with_w(other[e412]))
                - (Simd32x4::from([self[e4], self[e412], self[e423], self[e425]]) * other.group8().xxy().with_w(other[e431]))
                - (other.group1().yzxx() * self.group1().zxy().with_w(self[e423]))
                - (other.group7().yzx() * self.group2().zxy()).with_w(other[e423] * self[e415])
                - (other.group6().yzx() * self.group3().zxy()).with_w(other[e2] * self[e431]),
            // e5
            (other[e12345] * self[e5]) + (other[e1] * self[e235]) + (other[e2] * self[e315]) + (other[e3] * self[e125]) + (other[e5] * self[e12345]) + (other[e5] * self[e321])
                - (other[e415] * self[e235])
                - (other[e425] * self[e315])
                - (other[e435] * self[e125])
                - (other[e321] * self[e5])
                - (other[e235] * self[e415])
                - (other[e235] * self[e1])
                - (other[e315] * self[e425])
                - (other[e315] * self[e2])
                - (other[e125] * self[e435])
                - (other[e125] * self[e3]),
            // e15, e25, e35, e45
            Simd32x4::from([
                (other[e4235] * self[e5]) + (other[e4125] * self[e315]) + (other[e3215] * self[e415]) + (other[e3215] * self[e1]),
                (other[e4235] * self[e125]) + (other[e4315] * self[e5]) + (other[e3215] * self[e425]) + (other[e3215] * self[e2]),
                (other[e4315] * self[e235]) + (other[e4125] * self[e5]) + (other[e3215] * self[e435]) + (other[e3215] * self[e3]),
                -(other[e4235] * self[e415]) - (other[e4315] * self[e425]) - (other[e4125] * self[e435]) - (other[e1234] * self[e5]),
            ]) + (Simd32x4::from([self[e12345], self[e435], self[e415], self[e1]]) * other.group3().xxy().with_w(other[e23]))
                + (Simd32x4::from([self[e425], self[e12345], self[e12345], self[e3]]) * other.group3().zyz().with_w(other[e12]))
                + (Simd32x4::from([self[e321], self[e3], self[e1], self[e2]]) * other.group3().xxy().with_w(other[e31]))
                + (Simd32x4::from([self[e2], self[e321], self[e321], self[e12345]]) * other.group3().zyzw())
                + (self.group2().xyzx() * other.group0().xx().with_zw(other[scalar], other[e41]))
                + (self.group2().ywwz() * other.group5().zyz().with_w(other[e43]))
                + (self.group2().wzxy() * other.group5().xxy().with_w(other[e42]))
                + (other.group3().www() * self.group2().xyz()).with_w(other[e3215] * self[e4])
                - (other.group3().yzxx() * self.group1().zxy().with_w(self[e423]))
                - (other.group3().yzxy() * self.group3().zxy().with_w(self[e431]))
                - (other.group5().yzx() * self.group2().zxy()).with_w(other[scalar] * self[e321])
                - (other.group9().yzx() * self.group2().zxy()).with_w(other[e35] * self[e412]),
            // e41, e42, e43
            (Simd32x3::from(other[scalar]) * self.group0().xyz())
                + (Simd32x3::from(other[e41]) * Simd32x3::from([self[e12345], self[e435], self[e2]]))
                + (Simd32x3::from(other[e42]) * Simd32x3::from([self[e3], self[e12345], self[e415]]))
                + (Simd32x3::from(other[e43]) * Simd32x3::from([self[e425], self[e1], self[e12345]]))
                + (Simd32x3::from(other[e1234]) * self.group1().xyz())
                + (Simd32x3::from([self[e431], self[e4], self[e4]]) * other.group5().zyz())
                + (Simd32x3::from([self[e4], self[e412], self[e423]]) * other.group5().xxy())
                + (other.group9().yzx() * self.group0().zxy())
                - (Simd32x3::from(other[e45]) * self.group0().xyz())
                - (Simd32x3::from(other[e41]) * Simd32x3::from([self[e321], self[e3], self[e425]]))
                - (Simd32x3::from(other[e42]) * Simd32x3::from([self[e435], self[e321], self[e1]]))
                - (Simd32x3::from(other[e43]) * Simd32x3::from([self[e2], self[e415], self[e321]]))
                - (Simd32x3::from(other[e1234]) * self.group3().xyz())
                - (Simd32x3::from([self[e431], self[e4], self[e4]]) * other.group9().zyz())
                - (Simd32x3::from([self[e4], self[e412], self[e423]]) * other.group9().xxy())
                - (other.group5().yzx() * self.group0().zxy()),
            // e23, e31, e12
            (Simd32x3::from(other[scalar]) * self.group1().xyz())
                + (Simd32x3::from(other[e3215]) * self.group0().xyz())
                + (Simd32x3::from(other[e1234]) * self.group2().xyz())
                + (Simd32x3::from([self[e431], self[e4], self[e4]]) * other.group3().zyz())
                + (Simd32x3::from([self[e12345], self[e435], self[e415]]) * other.group5().xxy())
                + (Simd32x3::from([self[e425], self[e12345], self[e12345]]) * other.group5().zyz())
                + (Simd32x3::from([self[e4], self[e412], self[e423]]) * other.group3().xxy())
                + (other.group4().xxy() * self.group2().wzx())
                + (other.group4().zyz() * self.group2().yww())
                + (other.group9().yzx() * self.group3().zxy())
                - (Simd32x3::from(other[e45]) * self.group3().xyz())
                - (Simd32x3::from([self[e321], self[e3], self[e1]]) * other.group9().xxy())
                - (Simd32x3::from([self[e2], self[e321], self[e321]]) * other.group9().zyz())
                - (other.group4().yzx() * self.group2().zxy())
                - (other.group5().yzx() * self.group1().zxy())
                - (other.group3().yzx() * self.group0().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e3] * self[e2]) + (other[e4] * self[e235]) + (other[e5] * self[e423]) + (other[e415] * self[e12345]) + (other[e435] * self[e425]) + (other[e321] * self[e1]),
                (other[e2] * self[e321])
                    + (other[e4] * self[e315])
                    + (other[e5] * self[e431])
                    + (other[e415] * self[e435])
                    + (other[e425] * self[e12345])
                    + (other[e321] * self[e2]),
                (other[e3] * self[e321])
                    + (other[e4] * self[e125])
                    + (other[e5] * self[e412])
                    + (other[e425] * self[e415])
                    + (other[e435] * self[e12345])
                    + (other[e321] * self[e3]),
                -(other[e2] * self[e425]) - (other[e3] * self[e435]) - (other[e5] * self[e4]) - (other[e415] * self[e1]) - (other[e425] * self[e2]) - (other[e435] * self[e3]),
            ]) + (Simd32x4::from(other[e12345]) * self.group1())
                + (Simd32x4::from([self[e431], self[e4], self[e4], self[e5]]) * other.group8().zyz().with_w(other[e4]))
                + (Simd32x4::from([self[e321], self[e3], self[e1], self[e12345]]) * other.group1().xxy().with_w(other[e321]))
                + (Simd32x4::from([self[e4], self[e412], self[e423], self[e412]]) * other.group8().xxy().with_w(other[e125]))
                + (other.group7().xxy() * self.group2().wzx()).with_w(other[e235] * self[e423])
                + (other.group7().zyz() * self.group2().yww()).with_w(other[e315] * self[e431])
                - (self.group1().zxyx() * other.group6().yzx().with_w(other[e1]))
                - (self.group2().zxyx() * other.group7().yzx().with_w(other[e423]))
                - (other.group8().yzx() * self.group0().zxy()).with_w(other[e431] * self[e315])
                - (other.group1().yzx() * self.group3().zxy()).with_w(other[e412] * self[e125]),
            // e423, e431, e412
            (Simd32x3::from(other[e12345]) * self.group0().xyz())
                + (Simd32x3::from(other[e4]) * self.group1().xyz())
                + (Simd32x3::from(other[e321]) * self.group0().xyz())
                + (Simd32x3::from(other[e423]) * Simd32x3::from([self[e12345], self[e435], self[e2]]))
                + (Simd32x3::from(other[e431]) * Simd32x3::from([self[e3], self[e12345], self[e415]]))
                + (Simd32x3::from(other[e412]) * Simd32x3::from([self[e425], self[e1], self[e12345]]))
                + (Simd32x3::from([self[e431], self[e4], self[e4]]) * other.group1().zyz())
                + (Simd32x3::from([self[e431], self[e4], self[e4]]) * other.group6().zyz())
                + (Simd32x3::from([self[e4], self[e412], self[e423]]) * other.group1().xxy())
                + (Simd32x3::from([self[e4], self[e412], self[e423]]) * other.group6().xxy())
                - (Simd32x3::from(other[e4]) * self.group3().xyz())
                - (Simd32x3::from(other[e423]) * Simd32x3::from([self[e321], self[e3], self[e425]]))
                - (Simd32x3::from(other[e431]) * Simd32x3::from([self[e435], self[e321], self[e1]]))
                - (Simd32x3::from(other[e412]) * Simd32x3::from([self[e2], self[e415], self[e321]]))
                - (other.group1().yzx() * self.group0().zxy())
                - (other.group6().yzx() * self.group0().zxy()),
            // e235, e315, e125
            (Simd32x3::from(other[e12345]) * self.group2().xyz())
                + (Simd32x3::from(other[e5]) * self.group1().xyz())
                + (Simd32x3::from(other[e5]) * self.group3().xyz())
                + (Simd32x3::from([self[e12345], self[e435], self[e415]]) * other.group8().xxy())
                + (Simd32x3::from([self[e425], self[e12345], self[e12345]]) * other.group8().zyz())
                + (Simd32x3::from([self[e321], self[e3], self[e1]]) * other.group8().xxy())
                + (Simd32x3::from([self[e2], self[e321], self[e321]]) * other.group8().zyz())
                + (other.group1().yzx() * self.group2().zxy())
                + (other.group6().xxy() * self.group2().wzx())
                + (other.group6().zyz() * self.group2().yww())
                - (Simd32x3::from(other[e321]) * self.group2().xyz())
                - (other.group8().yzx() * self.group1().zxy())
                - (other.group8().yzx() * self.group3().zxy())
                - (other.group1().xxy() * self.group2().wzx())
                - (other.group1().zyz() * self.group2().yww())
                - (other.group6().yzx() * self.group2().zxy()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e45] * self[e415]) + (other[e4235] * self[e12345]) + (other[e4125] * self[e425]) + (other[e3215] * self[e423]),
                (other[e45] * self[e425]) + (other[e4235] * self[e435]) + (other[e4315] * self[e12345]) + (other[e3215] * self[e431]),
                (other[e45] * self[e435]) + (other[e4315] * self[e415]) + (other[e4125] * self[e12345]) + (other[e3215] * self[e412]),
                -(other[e35] * self[e3]) - (other[e4235] * self[e235]) - (other[e4315] * self[e315]) - (other[e4125] * self[e125]),
            ]) + (Simd32x4::from([self[e431], self[e4], self[e4], self[e321]]) * other.group3().zyz().with_w(other[e3215]))
                + (Simd32x4::from([self[e4], self[e412], self[e423], self[e12345]]) * other.group3().xxy().with_w(other[e3215]))
                + (self.group2().zxyw() * other.group4().yzx().with_w(other[scalar]))
                + (other.group5().yzx() * self.group3().zxy()).with_w(other[e45] * self[e5])
                - (Simd32x4::from([other[e1234], other[e1234], other[e1234], self[e435]]) * self.group2().xyz().with_w(other[e35]))
                - (Simd32x4::from([self[e321], self[e3], self[e1], self[e415]]) * other.group5().xxy().with_w(other[e15]))
                - (Simd32x4::from([self[e2], self[e321], self[e321], self[e1]]) * other.group5().zyz().with_w(other[e15]))
                - (other.group3().yzxy() * self.group0().zxy().with_w(self[e425]))
                - (self.group2().ywwz() * other.group4().zyz().with_w(other[e12]))
                - (self.group2().wzxy() * other.group4().xxy().with_w(other[e31]))
                - (other.group0().xx().with_zw(other[scalar], other[e23]) * self.group3().xyz().with_w(self[e235]))
                - (other.group9().yzx() * self.group1().zxy()).with_w(other[e25] * self[e2]),
            // e1234
            (other[scalar] * self[e4])
                + (other[e41] * self[e1])
                + (other[e42] * self[e2])
                + (other[e43] * self[e3])
                + (other[e4235] * self[e423])
                + (other[e4315] * self[e431])
                + (other[e4125] * self[e412])
                + (other[e1234] * self[e12345])
                - (other[e45] * self[e4])
                - (other[e41] * self[e415])
                - (other[e42] * self[e425])
                - (other[e43] * self[e435])
                - (other[e23] * self[e423])
                - (other[e31] * self[e431])
                - (other[e12] * self[e412])
                - (other[e1234] * self[e321]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       45       82        0
    //    simd3        0        9        0
    //    simd4       61       56        0
    // Totals...
    // yes simd      106      147        0
    //  no simd      289      333        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(other[e4235] * self[e4]) - (other[e4125] * self[e431]),
                -(other[e4235] * self[e412]) - (other[e4315] * self[e4]),
                -(other[e4315] * self[e423]) - (other[e4125] * self[e4]),
                (other[e4315] * self[e2]) + (other[e4125] * self[e3]) + (other[e3215] * self[e4]),
            ]) + (other.group0().yzxx() * self.group0().zxy().with_w(self[e1])),
            // e23, e31, e12, e45
            Simd32x4::from([other[e3215] * self[e423], other[e3215] * self[e431], other[e3215] * self[e412], other[e4125] * self[e435] * -1.0])
                + (other.group0().yzxw() * self.group3().zxyw())
                - (Simd32x4::from([self[e321], self[e3], self[e1], self[e415]]) * other.group0().xxyx())
                - (Simd32x4::from([self[e2], self[e321], self[e321], self[e425]]) * other.group0().zyzy()),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e3215] * self[e1]) - (other[e4315] * self[e125]),
                (other[e3215] * self[e2]) - (other[e4125] * self[e235]),
                (other[e3215] * self[e3]) - (other[e4235] * self[e315]),
                0.0,
            ]) + (other.group0().xxyx() * self.group2().wzx().with_w(self[e423]))
                + (other.group0().zyzy() * self.group2().yww().with_w(self[e431]))
                + (other.group0().wwwz() * self.group1().xyz().with_w(self[e412])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e3215] * self[e423],
                other[e3215] * self[e431],
                other[e3215] * self[e412],
                -(other[e4315] * self[e315]) - (other[e4125] * self[e125]),
            ]) + (Simd32x4::from([self[e12345], self[e435], self[e415], self[e12345]]) * other.group0().xxyw())
                + (Simd32x4::from([self[e425], self[e12345], self[e12345], self[e321]]) * other.group0().zyzw())
                - (other.group0().yzxx() * self.group1().zxy().with_w(self[e235])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       80      130        0
    //    simd3        0       17        0
    //    simd4       56       42        0
    // Totals...
    // yes simd      136      189        0
    //  no simd      304      349        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([other[e4] * self[e415], other[e4] * self[e425], other[e4] * self[e435], other[e3] * self[e3] * -1.0])
                + (Simd32x4::from([self[e431], self[e4], self[e4], other[e5]]) * other.group0().zyz().with_w(self[e4]))
                + (Simd32x4::from([self[e4], self[e412], self[e423], self[e5]]) * other.group0().xxyw())
                - (other.group0().yzxx() * self.group0().zxy().with_w(self[e1]))
                - (other.group0().wwwy() * self.group3().xyzy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e3] * self[e2]) + (other[e4] * self[e235]) + (other[e5] * self[e423]),
                (other[e2] * self[e321]) + (other[e4] * self[e315]) + (other[e5] * self[e431]),
                (other[e3] * self[e321]) + (other[e4] * self[e125]) + (other[e5] * self[e412]),
                -(other[e2] * self[e425]) - (other[e3] * self[e435]) - (other[e5] * self[e4]),
            ]) + (Simd32x4::from([self[e321], self[e3], self[e1], self[e5]]) * other.group0().xxyw())
                - (other.group0().yzxx() * self.group3().zxy().with_w(self[e415])),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(other[e1] * self[e5]) - (other[e3] * self[e315]),
                -(other[e1] * self[e125]) - (other[e2] * self[e5]),
                -(other[e2] * self[e235]) - (other[e3] * self[e5]),
                (other[e5] * self[e12345]) + (other[e5] * self[e321]),
            ]) + (Simd32x4::from([other[e5], other[e5], other[e5], self[e315]]) * self.group1().xyz().with_w(other[e2]))
                + (Simd32x4::from([other[e5], other[e5], other[e5], self[e125]]) * self.group3().xyz().with_w(other[e3]))
                + (other.group0().yzxx() * self.group2().zxyx()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e3] * self[e425]) + (other[e4] * self[e235]),
                (other[e2] * self[e12345]) + (other[e4] * self[e315]),
                (other[e3] * self[e12345]) + (other[e4] * self[e125]),
                -(other[e3] * self[e412]) - (other[e4] * self[e321]),
            ]) + (Simd32x4::from([self[e12345], self[e435], self[e415], self[e12345]]) * other.group0().xxyw())
                - (Simd32x4::from([other[e5], other[e5], other[e5], self[e431]]) * self.group0().xyz().with_w(other[e2]))
                - (other.group0().yzxx() * self.group1().zxy().with_w(self[e423])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       57        0
    //    simd3        0        9        0
    //    simd4       51       52        0
    // Totals...
    // yes simd       87      118        0
    //  no simd      240      292        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(other[scalar]) * self.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other[scalar]) * self.group1() * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
            // e15, e25, e35, e1234
            Simd32x4::from(other[scalar]) * self.group2().xyz().with_w(self[e4]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[scalar]) * self.group3().xyz().with_w(self[e5]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       48       84        0
    //    simd3        0       11        0
    //    simd4       64       58        0
    // Totals...
    // yes simd      112      153        0
    //  no simd      304      349        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                -(other[e4235] * self[e4]) - (other[e4125] * self[e431]) - (other[e1234] * self[e1]),
                -(other[e4235] * self[e412]) - (other[e4315] * self[e4]) - (other[e1234] * self[e2]),
                -(other[e4315] * self[e423]) - (other[e4125] * self[e4]) - (other[e1234] * self[e3]),
                (other[e4125] * self[e3]) + (other[e3215] * self[e4]) + (other[e1234] * self[e5]),
            ]) + (Simd32x4::from([other[e1234], other[e1234], other[e1234], self[e2]]) * self.group1().xyz().with_w(other[e4315]))
                + (other.group0().yzxx() * self.group0().zxy().with_w(self[e1])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e3215] * self[e423]) + (other[e1234] * self[e235]),
                (other[e3215] * self[e431]) + (other[e1234] * self[e315]),
                (other[e3215] * self[e412]) + (other[e1234] * self[e125]),
                -(other[e4125] * self[e435]) - (other[e1234] * self[e5]),
            ]) + (other.group0().yzxw() * self.group3().zxyw())
                - (Simd32x4::from([self[e321], self[e3], self[e1], self[e415]]) * other.group0().xxyx())
                - (Simd32x4::from([self[e2], self[e321], self[e321], self[e425]]) * other.group0().zyzy()),
            // e15, e25, e35, e1234
            (other.group0().xxyx() * self.group2().wzx().with_w(self[e423]))
                + (other.group0().zyzy() * self.group2().yww().with_w(self[e431]))
                + (other.group0().wwwz() * self.group1().xyz().with_w(self[e412]))
                + (other.group0().www() * self.group3().xyz()).with_w(other[e1234] * self[e12345])
                - (other.group0().yzx() * self.group2().zxy()).with_w(other[e1234] * self[e321]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([other[e3215] * self[e423], other[e3215] * self[e431], other[e3215] * self[e412], other[e4125] * self[e125] * -1.0])
                + (Simd32x4::from([self[e12345], self[e435], self[e415], self[e12345]]) * other.group0().xxyw())
                + (Simd32x4::from([self[e425], self[e12345], self[e12345], self[e321]]) * other.group0().zyzw())
                - (Simd32x4::from([other[e1234], other[e1234], other[e1234], self[e315]]) * self.group2().xyz().with_w(other[e4315]))
                - (other.group0().yzxx() * self.group1().zxy().with_w(self[e235])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for VersorEven {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      128      194        0
    //    simd3        0       34        0
    //    simd4       88       57        0
    // Totals...
    // yes simd      216      285        0
    //  no simd      480      524        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                (other[e415] * self[e4]) + (other[e435] * self[e431]) + (other[e321] * self[e423]) + (other[e1] * self[e4]) + (other[e3] * self[e431]) + (other[e4] * self[e415]),
                (other[e415] * self[e412]) + (other[e425] * self[e4]) + (other[e321] * self[e431]) + (other[e1] * self[e412]) + (other[e2] * self[e4]) + (other[e4] * self[e425]),
                (other[e425] * self[e423]) + (other[e435] * self[e4]) + (other[e321] * self[e412]) + (other[e2] * self[e423]) + (other[e3] * self[e4]) + (other[e4] * self[e435]),
                -(other[e235] * self[e423]) - (other[e315] * self[e431]) - (other[e125] * self[e412]) - (other[e1] * self[e1]) - (other[e2] * self[e2]) - (other[e3] * self[e3]),
            ]) + (Simd32x4::from([self[e12345], self[e435], self[e2], self[e12345]]) * other.group0().xxxw())
                + (Simd32x4::from([self[e425], self[e1], self[e12345], self[e4]]) * other.group0().zzz().with_w(other[e5]))
                + (Simd32x4::from([self[e3], self[e12345], self[e415], self[e321]]) * other.group0().yyy().with_w(other[e321]))
                + (other.group0().www() * self.group0().xyz()).with_w(other[e4] * self[e5])
                - (Simd32x4::from(other[e423]) * Simd32x4::from([self[e321], self[e3], self[e425], self[e235]]))
                - (Simd32x4::from(other[e431]) * self.group1().zw().with_zw(self[e1], self[e315]))
                - (Simd32x4::from(other[e412]) * Simd32x4::from([self[e2], self[e415], self[e321], self[e125]]))
                - (other.group1().yzxx() * self.group0().zxy().with_w(self[e415]))
                - (other.group3().yzx() * self.group0().zxy()).with_w(other[e425] * self[e425])
                - (other.group3().www() * self.group3().xyz()).with_w(other[e435] * self[e435]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e235] * self[e4]) + (other[e125] * self[e431]) + (other[e5] * self[e423]) + (other[e1] * self[e321]) + (other[e3] * self[e2]) + (other[e4] * self[e235]),
                (other[e235] * self[e412]) + (other[e315] * self[e4]) + (other[e5] * self[e431]) + (other[e1] * self[e3]) + (other[e2] * self[e321]) + (other[e4] * self[e315]),
                (other[e315] * self[e423]) + (other[e125] * self[e4]) + (other[e5] * self[e412]) + (other[e2] * self[e1]) + (other[e3] * self[e321]) + (other[e4] * self[e125]),
                -(other[e425] * self[e2]) - (other[e435] * self[e3]) - (other[e5] * self[e4]) - (other[e1] * self[e415]) - (other[e2] * self[e425]) - (other[e3] * self[e435]),
            ]) + (Simd32x4::from([self[e12345], self[e435], self[e415], self[e431]]) * other.group1().xxy().with_w(other[e315]))
                + (Simd32x4::from([self[e425], self[e12345], self[e12345], self[e412]]) * other.group1().zyz().with_w(other[e125]))
                + (other.group0().xxyw() * self.group2().wzx().with_w(self[e321]))
                + (other.group0().zyz() * self.group2().yww()).with_w(other[e321] * self[e12345])
                + (other.group0().www() * self.group1().xyz()).with_w(other[e235] * self[e423])
                + (other.group1().www() * self.group3().xyz()).with_w(other[e4] * self[e5])
                - (other.group0().yzxx() * self.group2().zxyx())
                - (self.group3().zxyx() * other.group3().yzx().with_w(other[e415]))
                - (other.group1().yzx() * self.group1().zxy()).with_w(other[e431] * self[e315])
                - (other.group2().yzx() * self.group0().zxy()).with_w(other[e412] * self[e125]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (other[e125] * self[e2]) + (other[e5] * self[e415]) + (other[e5] * self[e1]) + (other[e2] * self[e125]),
                (other[e315] * self[e321]) + (other[e5] * self[e425]) + (other[e5] * self[e2]) + (other[e3] * self[e235]),
                (other[e125] * self[e321]) + (other[e5] * self[e435]) + (other[e5] * self[e3]) + (other[e1] * self[e315]),
                -(other[e315] * self[e425]) - (other[e315] * self[e2]) - (other[e125] * self[e435]) - (other[e125] * self[e3]),
            ]) + (Simd32x4::from(other[e12345]) * self.group2())
                + (Simd32x4::from([self[e12345], self[e435], self[e415], self[e235]]) * other.group2().xxy().with_w(other[e1]))
                + (Simd32x4::from([self[e425], self[e12345], self[e12345], self[e125]]) * other.group2().zyz().with_w(other[e3]))
                + (Simd32x4::from([self[e321], self[e3], self[e1], self[e315]]) * other.group2().xxy().with_w(other[e2]))
                + (other.group1().xxy() * self.group2().wzx()).with_w(other[e5] * self[e12345])
                + (other.group1().zyz() * self.group2().yww()).with_w(other[e5] * self[e321])
                - (other.group1().yzxx() * self.group2().zxyx())
                - (other.group1().wwwy() * self.group2().xyzy())
                - (other.group2().yzx() * self.group1().zxy()).with_w(other[e435] * self[e125])
                - (other.group2().yzx() * self.group3().zxy()).with_w(other[e321] * self[e5])
                - (other.group3().xxy() * self.group2().wzx()).with_w(other[e235] * self[e415])
                - (other.group3().zyz() * self.group2().yww()).with_w(other[e235] * self[e1]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e315] * self[e412]) + (other[e1] * self[e12345]) + (other[e3] * self[e425]) + (other[e4] * self[e235]),
                (other[e125] * self[e423]) + (other[e1] * self[e435]) + (other[e2] * self[e12345]) + (other[e4] * self[e315]),
                (other[e235] * self[e431]) + (other[e2] * self[e415]) + (other[e3] * self[e12345]) + (other[e4] * self[e125]),
                -(other[e1] * self[e423]) - (other[e2] * self[e431]) - (other[e3] * self[e412]) - (other[e4] * self[e321]),
            ]) + (Simd32x4::from([self[e321], self[e3], self[e1], self[e4]]) * other.group1().xxy().with_w(other[e12345]))
                + (Simd32x4::from([self[e2], self[e321], self[e321], self[e4]]) * other.group1().zyzw())
                + (other.group0().xxyx() * self.group2().wzx().with_w(self[e1]))
                + (other.group0().zyzy() * self.group2().yww().with_w(self[e2]))
                + (other.group0().wwwz() * self.group3().xyzz())
                + (other.group1().www() * self.group1().xyz()).with_w(other[e4] * self[e12345])
                - (Simd32x4::from([self[e431], self[e4], self[e4], self[e423]]) * other.group2().zyz().with_w(other[e415]))
                - (Simd32x4::from([self[e4], self[e412], self[e423], self[e435]]) * other.group2().xxy().with_w(other[e412]))
                - (other.group0().yzxx() * self.group2().zxy().with_w(self[e415]))
                - (self.group0().xyzy() * other.group2().www().with_w(other[e425]))
                - (other.group1().yzx() * self.group3().zxy()).with_w(other[e431] * self[e425])
                - (other.group3().yzx() * self.group1().zxy()).with_w(other[e435] * self[e412]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for VersorEven {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       68      116        0
    //    simd3        0       20        0
    //    simd4      103       87        0
    // Totals...
    // yes simd      171      223        0
    //  no simd      480      524        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (self[e3] * other[e42]) + (self[e4] * other[e23]),
                (self[e1] * other[e43]) + (self[e4] * other[e31]),
                (self[e2] * other[e41]) + (self[e4] * other[e12]),
                -(self[e315] * other[e42]) - (self[e125] * other[e43]),
            ]) + (Simd32x4::from([other[scalar], other[e4125], other[e31], other[scalar]]) * self.group0().xxxw())
                + (Simd32x4::from([other[e12], other[scalar], other[e4235], other[e1234]]) * self.group0().yyy().with_w(self[e5]))
                + (Simd32x4::from([other[e4315], other[e23], other[scalar], other[e4235]]) * self.group0().zzz().with_w(self[e1]))
                + (other.group0().zx().with_zw(other[e1234], other[e3215]) * self.group1().yzz().with_w(self[e4]))
                + (other.group2().ww().with_zw(other[e42], other[e4125]) * self.group1().xyx().with_w(self[e3]))
                + (self.group0().www() * other.group0().xyz()).with_w(self[e2] * other[e4315])
                - (Simd32x4::from(self[e423]) * other.group1().wz().with_zw(other[e4315], other[e15]))
                - (Simd32x4::from(self[e431]) * Simd32x4::from([other[e4125], other[e45], other[e23], other[e25]]))
                - (Simd32x4::from(self[e412]) * Simd32x4::from([other[e31], other[e4235], other[e45], other[e35]]))
                - (self.group1().zxyx() * other.group0().yzx().with_w(other[e23]))
                - (self.group1().wwwy() * other.group0().xyz().with_w(other[e31]))
                - (other.group0().zx().with_zw(other[e1234], other[e45]) * self.group3().yzz().with_w(self[e321]))
                - (other.group2().ww().with_zw(other[e42], other[e12]) * self.group3().xyx().with_w(self[e435]))
                - (self.group3().www() * other.group3().xyz()).with_w(self[e235] * other[e41]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (self[e3] * other[e4315]) + (self[e4] * other[e15]),
                (self[e1] * other[e4125]) + (self[e4] * other[e25]),
                (self[e2] * other[e4235]) + (self[e4] * other[e35]),
                -(self[e321] * other[scalar]) - (self[e5] * other[e1234]),
            ]) + (self.group0().xyxw() * other.group3().ww().with_zw(other[e25], other[e45]))
                + (other.group0().zx().with_zw(other[e1234], other[e12]) * self.group2().yzz().with_w(self[e3]))
                + (other.group0().ww().with_zw(other[e31], other[e43]) * self.group1().xyx().with_w(self[e125]))
                + (other.group1().zx().with_zw(other[scalar], other[e23]) * self.group1().yzz().with_w(self[e1]))
                + (other.group2().zx().with_zw(other[e3215], other[e41]) * self.group0().yzz().with_w(self[e235]))
                + (other.group2().ww().with_zw(other[e42], other[e31]) * self.group2().xyx().with_w(self[e2]))
                + (self.group0().www() * other.group1().xyz()).with_w(self[e315] * other[e42])
                + (self.group2().www() * other.group0().xyz()).with_w(self[e4] * other[e3215])
                - (self.group0().zxyx() * other.group2().yzxx())
                - (other.group1().ww().with_zw(other[e4315], other[e4315]) * self.group3().xyx().with_w(self[e425]))
                - (other.group3().zx().with_zw(other[e45], other[e4125]) * self.group3().yzz().with_w(self[e435]))
                - (self.group1().zxy() * other.group1().yzx()).with_w(self[e431] * other[e25])
                - (self.group1().www() * other.group3().xyz()).with_w(self[e412] * other[e35])
                - (self.group2().zxy() * other.group0().yzx()).with_w(self[e415] * other[e4235]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (self[e5] * other[e23]) + (self[e5] * other[e4235]) + (self[e1] * other[e3215]) + (self[e2] * other[e35]),
                (self[e5] * other[e31]) + (self[e5] * other[e4315]) + (self[e2] * other[e3215]) + (self[e3] * other[e15]),
                (self[e5] * other[e12]) + (self[e5] * other[e4125]) + (self[e1] * other[e25]) + (self[e3] * other[e3215]),
                -(self[e425] * other[e42]) - (self[e435] * other[e43]) - (self[e321] * other[e1234]) - (self[e4] * other[e45]),
            ]) + (other.group2() * self.group1().www().with_w(self[e12345]))
                + (self.group0().wwwx() * other.group2().xyz().with_w(other[e4235]))
                + (other.group0().ww().with_zw(other[e31], other[e41]) * self.group2().xyx().with_w(self[e1]))
                + (other.group1().zx().with_zw(other[scalar], other[e43]) * self.group2().yzz().with_w(self[e3]))
                + (other.group1().ww().with_zw(other[e4315], other[e42]) * self.group2().xyx().with_w(self[e2]))
                + (other.group2().zx().with_zw(other[e3215], other[e4125]) * self.group1().yzz().with_w(self[e412]))
                + (other.group3().zx().with_zw(other[e45], other[scalar]) * self.group2().yzz().with_w(self[e4]))
                + (other.group3().ww().with_zw(other[e25], other[e4315]) * self.group1().xyx().with_w(self[e431]))
                - (other.group1().yzxy() * self.group2().zxy().with_w(self[e431]))
                - (self.group1().zxy() * other.group2().yzx()).with_w(self[e423] * other[e23])
                - (self.group2().zxy() * other.group3().yzx()).with_w(self[e412] * other[e12])
                - (self.group3().zxy() * other.group2().yzx()).with_w(self[e415] * other[e41]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self[e425] * other[e4125]) + (self[e125] * other[e42]) + (self[e3] * other[e31]) + (self[e4] * other[e15]),
                (self[e435] * other[e4235]) + (self[e235] * other[e43]) + (self[e1] * other[e12]) + (self[e4] * other[e25]),
                (self[e435] * other[e45]) + (self[e315] * other[e41]) + (self[e2] * other[e23]) + (self[e4] * other[e35]),
                -(self[e125] * other[e4125]) - (self[e1] * other[e15]) - (self[e2] * other[e25]) - (self[e3] * other[e35]),
            ]) + (self.group0().xyxw() * other.group3().ww().with_zw(other[e25], other[e3215]))
                + (other.group1().ww().with_zw(other[e4315], other[e45]) * self.group1().xyx().with_w(self[e5]))
                + (other.group2().zx().with_zw(other[e3215], other[e3215]) * self.group0().yzz().with_w(self[e321]))
                + (self.group0().www() * other.group3().xyz()).with_w(self[e5] * other[scalar])
                - (self.group1().zxyy() * other.group3().yzx().with_w(other[e25]))
                - (self.group1().wwwz() * other.group1().xyz().with_w(other[e35]))
                - (self.group2().xyxx() * other.group2().ww().with_zw(other[e42], other[e23]))
                - (self.group2().yzzx() * other.group0().zx().with_zw(other[e1234], other[e4235]))
                - (self.group2().wwwy() * other.group0().xyz().with_w(other[e31]))
                - (other.group2().yzxx() * self.group0().zxy().with_w(self[e415]))
                - (other.group0().ww().with_zw(other[e31], other[e4315]) * self.group3().xyx().with_w(self[e315]))
                - (other.group1().zx().with_zw(other[scalar], other[e12]) * self.group3().yzz().with_w(self[e125])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl std::ops::Div<anti_sandwich> for VersorOdd {
    type Output = anti_sandwich_partial<VersorOdd>;
    fn div(self, _rhs: anti_sandwich) -> Self::Output {
        anti_sandwich_partial(self)
    }
}
impl AntiSandwich<AntiCircleRotor> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       64      117        0
    //    simd3        0       21        0
    //    simd4       84       66        0
    // Totals...
    // yes simd      148      204        0
    //  no simd      400      444        0
    fn anti_sandwich(self, other: AntiCircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                -(other[e43] * self[e31]) - (other[e43] * self[e4315]) - (other[e23] * self[e1234]) - (other[e12] * self[e42]) - (other[scalar] * self[e41]),
                -(other[e42] * self[scalar]) - (other[e42] * self[e45]) - (other[e23] * self[e43]) - (other[e31] * self[e1234]) - (other[scalar] * self[e42]),
                -(other[e43] * self[scalar]) - (other[e43] * self[e45]) - (other[e31] * self[e41]) - (other[e12] * self[e1234]) - (other[scalar] * self[e43]),
                (other[e31] * self[e31]) + (other[e12] * self[e12]) + (other[e15] * self[e41]) + (other[e25] * self[e42]) + (other[e35] * self[e43]),
            ]) + (other.group1().wwwx() * self.group0().xyz().with_w(self[e23]))
                + (other.group0().yzx() * self.group1().zxy()).with_w(other[e41] * self[e15])
                + (other.group0().yzx() * self.group3().zxy()).with_w(other[e42] * self[e25])
                + (other.group1().yzx() * self.group0().zxy()).with_w(other[e43] * self[e35])
                - (Simd32x4::from([self[scalar], self[e12], self[e23], self[e45]]) * other.group0().xxy().with_w(other[e45]))
                - (Simd32x4::from([self[e45], self[e4125], self[e4235], self[scalar]]) * other.group0().xxy().with_w(other[scalar])),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(other[e35] * self[e42]) - (other[scalar] * self[e23]),
                -(other[e25] * self[e1234]) - (other[scalar] * self[e31]),
                -(other[e35] * self[e1234]) - (other[scalar] * self[e12]),
                (other[e45] * self[scalar]) + (other[scalar] * self[e45]),
            ]) + (self.group2().zxyx() * other.group0().yzx().with_w(other[e41]))
                + (other.group1().yzx() * self.group1().zxy()).with_w(other[e42] * self[e25])
                + (other.group2().yzx() * self.group0().zxy()).with_w(other[e43] * self[e35])
                - (Simd32x4::from([self[scalar], self[e12], self[e23], self[e4125]]) * other.group1().xxyz())
                - (Simd32x4::from([self[e31], self[scalar], self[scalar], self[e41]]) * other.group1().zyz().with_w(other[e15]))
                - (Simd32x4::from([self[e25], self[e3215], self[e3215], self[e4315]]) * other.group0().zyz().with_w(other[e31]))
                - (Simd32x4::from([self[e1234], self[e43], self[e41], self[e43]]) * other.group2().xxyz())
                - (Simd32x4::from([self[e3215], self[e35], self[e15], self[e4235]]) * other.group0().xxy().with_w(other[e23]))
                - (other.group1().www() * self.group3().xyz()).with_w(other[e25] * self[e42]),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(other[e35] * self[e31]) - (other[scalar] * self[e15]),
                -(other[e35] * self[e4235]) - (other[scalar] * self[e25]),
                -(other[e35] * self[scalar]) - (other[scalar] * self[e35]),
                (other[e25] * self[e31]) + (other[e35] * self[e12]),
            ]) + (Simd32x4::from([self[e45], self[e4125], self[e31], self[e25]]) * other.group2().xxx().with_w(other[e31]))
                + (Simd32x4::from([self[e4315], self[e23], self[e45], self[e23]]) * other.group2().zzzx())
                + (other.group1().yzxx() * self.group2().zxyx())
                + (self.group1().zw().with_zw(self[e4235], self[e35]) * other.group2().yyy().with_w(other[e12]))
                - (Simd32x4::from([self[scalar], self[e12], self[e4315], self[e4125]]) * other.group2().xxxz())
                - (Simd32x4::from([self[e25], self[e3215], self[e3215], self[e4235]]) * other.group1().zyz().with_w(other[e15]))
                - (Simd32x4::from([self[e4125], self[scalar], self[e23], self[e3215]]) * other.group2().yyyw())
                - (Simd32x4::from([self[e3215], self[e35], self[e15], self[e3215]]) * other.group1().xxyw())
                - (other.group1().www() * self.group2().xyz()).with_w(other[e25] * self[e4315]),
            // e1, e2, e3, e4
            Simd32x4::from([
                -(other[e43] * self[e25]) - (other[e31] * self[e4125]) - (other[e25] * self[e43]),
                -(other[e42] * self[e3215]) - (other[e12] * self[e4235]) - (other[e35] * self[e41]),
                -(other[e43] * self[e3215]) - (other[e23] * self[e4315]) - (other[e15] * self[e42]),
                (other[e31] * self[e42]) + (other[e12] * self[e43]) + (other[e45] * self[e1234]),
            ]) + (Simd32x4::from([self[e42], self[e1234], self[e1234], self[e4125]]) * other.group2().zyz().with_w(other[e43]))
                + (Simd32x4::from([self[e45], self[e4125], self[e4235], self[e4235]]) * other.group1().xxy().with_w(other[e41]))
                + (Simd32x4::from([self[e1234], self[e43], self[e41], self[e12]]) * other.group2().xxy().with_w(other[e43]))
                + (Simd32x4::from([self[e4315], self[e45], self[e45], self[e31]]) * other.group1().zyz().with_w(other[e42]))
                + (other.group0().yzx() * self.group2().zxy()).with_w(other[e41] * self[e23])
                + (other.group1().www() * self.group1().xyz()).with_w(other[e42] * self[e4315])
                + (other.group2().www() * self.group3().xyz()).with_w(other[e23] * self[e41])
                - (Simd32x4::from([self[e3215], self[e35], self[e15], self[e1234]]) * other.group0().xxy().with_w(other[scalar])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDipoleInversion> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       72      118        0
    //    simd3        0       22        0
    //    simd4       98       81        0
    // Totals...
    // yes simd      170      221        0
    //  no simd      464      508        0
    fn anti_sandwich(self, other: AntiDipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e435] * self[e42]) + (other[e321] * self[e41]) + (other[e4] * self[e23]) + (other[e4] * self[e4235]) + (other[e1] * self[e1234]) + (other[e3] * self[e42]),
                (other[e425] * self[e1234]) + (other[e321] * self[e42]) + (other[e4] * self[e31]) + (other[e4] * self[e4315]) + (other[e1] * self[e43]) + (other[e2] * self[e1234]),
                (other[e435] * self[e1234]) + (other[e321] * self[e43]) + (other[e4] * self[e12]) + (other[e4] * self[e4125]) + (other[e2] * self[e41]) + (other[e3] * self[e1234]),
                -(other[e425] * self[e31])
                    - (other[e435] * self[e12])
                    - (other[e321] * self[e45])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]) + (Simd32x4::from([self[scalar], self[e12], self[e23], self[e3215]]) * other.group0().xxy().with_w(other[e4]))
                + (Simd32x4::from([self[e31], self[scalar], self[scalar], self[e4315]]) * other.group0().zyz().with_w(other[e2]))
                + (Simd32x4::from([self[e45], self[e4125], self[e4235], self[e4235]]) * other.group0().xxy().with_w(other[e1]))
                + (Simd32x4::from([self[e1234], self[e43], self[e41], self[e1234]]) * other.group1().xxy().with_w(other[e5]))
                + (Simd32x4::from([self[e4315], self[e45], self[e45], self[e4125]]) * other.group0().zyz().with_w(other[e3]))
                - (other.group0().yzx() * self.group1().zxy()).with_w(other[e423] * self[e15])
                - (other.group0().yzx() * self.group3().zxy()).with_w(other[e431] * self[e25])
                - (other.group1().yzx() * self.group0().zxy()).with_w(other[e412] * self[e35])
                - (other.group3().yzx() * self.group0().zxy()).with_w(other[e415] * self[e23]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e2] * self[e4125]) + (other[e5] * self[e41]),
                (other[e3] * self[e4235]) + (other[e5] * self[e42]),
                (other[e1] * self[e4315]) + (other[e5] * self[e43]),
                -(other[e125] * self[e43]) - (other[e4] * self[e3215]),
            ]) + (Simd32x4::from([self[e42], self[e1234], self[e1234], self[e12]]) * other.group2().zyz().with_w(other[e3]))
                + (Simd32x4::from([self[scalar], self[e12], self[e23], self[e35]]) * other.group1().xxy().with_w(other[e412]))
                + (Simd32x4::from([self[e31], self[scalar], self[scalar], self[e23]]) * other.group1().zyz().with_w(other[e1]))
                + (Simd32x4::from([self[e25], self[e3215], self[e3215], self[e25]]) * other.group0().zyz().with_w(other[e431]))
                + (Simd32x4::from([self[e1234], self[e43], self[e41], self[e31]]) * other.group2().xxy().with_w(other[e2]))
                + (Simd32x4::from([self[e3215], self[e35], self[e15], self[e15]]) * other.group0().xxy().with_w(other[e423]))
                + (self.group2() * other.group2().www().with_w(other[e5]))
                - (Simd32x4::from([self[e45], self[e4125], self[e4235], self[e41]]) * other.group3().xxy().with_w(other[e235]))
                - (Simd32x4::from([self[e4315], self[e45], self[e45], self[e42]]) * other.group3().zyz().with_w(other[e315]))
                - (other.group1().yzxy() * self.group1().zxy().with_w(self[e4315]))
                - (other.group1().wwwz() * self.group3().xyzz())
                - (self.group0().zxyw() * other.group2().yzx().with_w(other[e321]))
                - (other.group0().yzx() * self.group2().zxy()).with_w(other[e415] * self[e4235]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e315] * self[e4125]) + (other[e125] * self[e31]) + (other[e2] * self[e35]) + (other[e5] * self[e23]),
                (other[e315] * self[scalar]) + (other[e125] * self[e4235]) + (other[e3] * self[e15]) + (other[e5] * self[e31]),
                (other[e315] * self[e23]) + (other[e125] * self[scalar]) + (other[e1] * self[e25]) + (other[e5] * self[e12]),
                -(other[e435] * self[e43]) - (other[e1] * self[e41]) - (other[e2] * self[e42]) - (other[e3] * self[e43]),
            ]) + (Simd32x4::from([self[scalar], self[e12], self[e4315], self[e45]]) * other.group2().xxxw())
                + (Simd32x4::from([self[e25], self[e3215], self[e3215], self[scalar]]) * other.group1().zyz().with_w(other[e4]))
                + (Simd32x4::from([self[e3215], self[e35], self[e15], self[e1234]]) * other.group1().xxyw())
                - (Simd32x4::from([self[e45], self[e4125], self[e31], self[e31]]) * other.group2().xxx().with_w(other[e431]))
                - (Simd32x4::from([self[e25], self[e3215], self[e3215], self[e41]]) * other.group3().zyz().with_w(other[e415]))
                - (Simd32x4::from([self[e4315], self[e23], self[e45], self[e12]]) * other.group2().zzz().with_w(other[e412]))
                - (Simd32x4::from([self[e3215], self[e35], self[e15], self[e4125]]) * other.group3().xxy().with_w(other[e412]))
                - (self.group1().zw().with_zw(self[e4235], self[e4315]) * other.group2().yyy().with_w(other[e431]))
                - (other.group1().yzx() * self.group2().zxy()).with_w(other[e423] * self[e23])
                - (other.group1().www() * self.group2().xyz()).with_w(other[e423] * self[e4235])
                - (other.group3().www() * self.group3().xyz()).with_w(other[e425] * self[e42]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other[e5]) * self.group0())
                + (Simd32x4::from([self[e42], self[e1234], self[e1234], self[e25]]) * other.group2().zyz().with_w(other[e2]))
                + (Simd32x4::from([self[e45], self[e4125], self[e4235], self[e4315]]) * other.group1().xxy().with_w(other[e315]))
                + (Simd32x4::from([self[e1234], self[e43], self[e41], self[e15]]) * other.group2().xxy().with_w(other[e1]))
                + (Simd32x4::from([self[e4315], self[e45], self[e45], self[e4125]]) * other.group1().zyz().with_w(other[e125]))
                + (other.group3().yzxz() * self.group1().zxy().with_w(self[e35]))
                + (other.group0().yzx() * self.group2().zxy()).with_w(other[e235] * self[e4235])
                - (Simd32x4::from(other[e321]) * self.group1().xyz().with_w(self[e3215]))
                - (Simd32x4::from([self[scalar], self[e12], self[e23], self[e12]]) * other.group3().xxy().with_w(other[e125]))
                - (Simd32x4::from([self[e31], self[scalar], self[scalar], self[e45]]) * other.group3().zyzw())
                - (Simd32x4::from([self[e25], self[e3215], self[e3215], self[e25]]) * other.group0().zyz().with_w(other[e425]))
                - (Simd32x4::from([self[e3215], self[e35], self[e15], self[e15]]) * other.group0().xxy().with_w(other[e415]))
                - (other.group1().yzxz() * self.group3().zxy().with_w(self[e35]))
                - (other.group2().yzxx() * self.group0().zxy().with_w(self[e23]))
                - (other.group2().wwwy() * self.group2().xyz().with_w(self[e31])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiDualNum> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       37       71        0
    //    simd3        1       13        0
    //    simd4       54       49        0
    // Totals...
    // yes simd       92      133        0
    //  no simd      256      306        0
    fn anti_sandwich(self, other: AntiDualNum) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([self[e41], self[e42], self[e43], 1.0])
                * other.group0().yy().with_zw(other[scalar], -(other[e3215] * self[e1234]) - (other[scalar] * self[scalar]))
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(other[e3215] * self[e41]) - (other[scalar] * self[e23]),
                -(other[e3215] * self[e42]) - (other[scalar] * self[e31]),
                -(other[e3215] * self[e43]) - (other[scalar] * self[e12]),
                (other[e3215] * self[e1234]) + (other[scalar] * self[e45]),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from(other[e3215]) * self.group3().xyz().with_w(self[e45]))
                - (Simd32x4::from(other[e3215]) * self.group1().xyz().with_w(self[scalar]))
                - (Simd32x4::from(other[scalar]) * self.group2().xyz().with_w(self[e3215])),
            // e1, e2, e3, e4
            ((Simd32x3::from(other[e3215]) * self.group0().xyz()) + (Simd32x3::from(other[scalar]) * self.group3().xyz())).with_w(other[scalar] * self[e1234] * -1.0),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlatPoint> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       45       77        0
    //    simd3        6       20        0
    //    simd4       57       49        0
    // Totals...
    // yes simd      108      146        0
    //  no simd      291      333        0
    fn anti_sandwich(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([self[e41], self[e42], self[e43], 1.0])
                * other
                    .group0()
                    .www()
                    .with_w(-(other[e235] * self[e41]) - (other[e315] * self[e42]) - (other[e125] * self[e43]) - (other[e321] * self[e45])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e235] * self[e1234]) + (other[e125] * self[e42]),
                (other[e235] * self[e43]) + (other[e315] * self[e1234]),
                (other[e315] * self[e41]) + (other[e125] * self[e1234]),
                -(other[e125] * self[e43]) - (other[e321] * self[scalar]),
            ]) - (other.group0().yzxx() * self.group0().zxyx())
                - (other.group0().wwwy() * self.group3().xyz().with_w(self[e42])),
            // e15, e25, e35, e1234
            ((Simd32x3::from(other[e235]) * Simd32x3::from([self[scalar], self[e12], self[e4315]]))
                + (Simd32x3::from(other[e315]) * Simd32x3::from([self[e4125], self[scalar], self[e23]]))
                + (Simd32x3::from(other[e125]) * Simd32x3::from([self[e31], self[e4235], self[scalar]]))
                - (Simd32x3::from(other[e235]) * Simd32x3::from([self[e45], self[e4125], self[e31]]))
                - (Simd32x3::from(other[e315]) * Simd32x3::from([self[e12], self[e45], self[e4235]]))
                - (Simd32x3::from(other[e125]) * Simd32x3::from([self[e4315], self[e23], self[e45]]))
                - (Simd32x3::from(other[e321]) * self.group2().xyz()))
            .with_w(other[e321] * self[e1234]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([self[e42], self[e1234], self[e1234], self[e4315]]) * other.group0().zyzy())
                + (Simd32x4::from([self[e1234], self[e43], self[e41], self[e4235]]) * other.group0().xxyx())
                + Simd32x3::from(0.0).with_w((other[e125] * self[e4125]) - (other[e125] * self[e12]) - (other[e321] * self[e3215]))
                - (other.group0().yzxx() * self.group0().zxy().with_w(self[e23]))
                - (other.group0().wwwy() * self.group1().xyzy()),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiFlector> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       63       95        0
    //    simd3        0       15        0
    //    simd4       74       64        0
    // Totals...
    // yes simd      137      174        0
    //  no simd      359      396        0
    fn anti_sandwich(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            (Simd32x4::from([self[e42], self[e1234], self[e1234], self[e4125]]) * other.group1().zyzz())
                + (Simd32x4::from([self[e1234], self[e43], self[e41], self[e4315]]) * other.group1().xxyy())
                + Simd32x3::from(0.0).with_w((other[e5] * self[e1234]) - (other[e315] * self[e42]) - (other[e125] * self[e43]) - (other[e321] * self[e45]))
                + (other.group0().www() * self.group0().xyz()).with_w(other[e1] * self[e4235])
                - (self.group0().zxyx() * other.group1().yzx().with_w(other[e235])),
            // e23, e31, e12, e45
            (Simd32x4::from(other[e5]) * self.group0().xyz().with_w(self[e1234]))
                + (Simd32x4::from([self[e42], self[e1234], self[e1234], self[e31]]) * other.group0().zyz().with_w(other[e2]))
                + (Simd32x4::from([self[e1234], self[e43], self[e41], self[e23]]) * other.group0().xxy().with_w(other[e1]))
                + (other.group1().yzxz() * self.group3().zxy().with_w(self[e12]))
                - (Simd32x4::from([self[e45], self[e4125], self[e4235], self[e43]]) * other.group1().xxy().with_w(other[e125]))
                - (Simd32x4::from([self[e4315], self[e45], self[e45], self[scalar]]) * other.group1().zyz().with_w(other[e321]))
                - (other.group0().yzxx() * self.group0().zxyx())
                - (other.group0().wwwy() * self.group3().xyz().with_w(self[e42])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e315] * self[e4125]) + (other[e125] * self[e31]) + (other[e2] * self[e35]) + (other[e5] * self[e23])
                    - (other[e321] * self[e15])
                    - (other[e1] * self[e3215])
                    - (other[e3] * self[e25])
                    - (other[e5] * self[e4235]),
                (other[e315] * self[scalar]) + (other[e125] * self[e4235]) + (other[e3] * self[e15]) + (other[e5] * self[e31])
                    - (other[e321] * self[e25])
                    - (other[e1] * self[e35])
                    - (other[e2] * self[e3215])
                    - (other[e5] * self[e4315]),
                (other[e315] * self[e23]) + (other[e125] * self[scalar]) + (other[e1] * self[e25]) + (other[e5] * self[e12])
                    - (other[e321] * self[e35])
                    - (other[e2] * self[e15])
                    - (other[e3] * self[e3215])
                    - (other[e5] * self[e4125]),
                0.0,
            ]) + (Simd32x4::from([self[scalar], self[e12], self[e4315], self[e1234]]) * other.group0().xxxw())
                - (Simd32x4::from([self[e45], self[e4125], self[e31], self[e41]]) * other.group0().xxx().with_w(other[e1]))
                - (Simd32x4::from([self[e4315], self[e23], self[e45], self[e43]]) * other.group0().zzz().with_w(other[e3]))
                - (self.group1().zw().with_zw(self[e4235], self[e42]) * other.group0().yyy().with_w(other[e2])),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([self[e42], self[e1234], self[e1234], self[e4315]]) * other.group0().zyzy())
                + (Simd32x4::from([self[e1234], self[e43], self[e41], self[e4235]]) * other.group0().xxyx())
                + (other.group1().wwwx() * self.group0().xyz().with_w(self[e15]))
                + Simd32x3::from(0.0).with_w((other[e2] * self[e25]) + (other[e3] * self[e35]) + (other[e5] * self[scalar]) - (other[e5] * self[e45]))
                + (other.group1().yzx() * self.group1().zxy()).with_w(other[e125] * self[e4125])
                - (Simd32x4::from([self[scalar], self[e12], self[e23], self[e12]]) * other.group1().xxy().with_w(other[e125]))
                - (Simd32x4::from([self[e31], self[scalar], self[scalar], self[e3215]]) * other.group1().zyz().with_w(other[e321]))
                - (other.group0().yzxx() * self.group0().zxy().with_w(self[e23]))
                - (other.group0().wwwy() * self.group1().xyzy()),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiLine> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       53       96        0
    //    simd3        0       12        0
    //    simd4       67       58        0
    // Totals...
    // yes simd      120      166        0
    //  no simd      321      364        0
    fn anti_sandwich(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                -(other[e23] * self[e1234]) - (other[e12] * self[e42]),
                -(other[e23] * self[e43]) - (other[e31] * self[e1234]),
                -(other[e31] * self[e41]) - (other[e12] * self[e1234]),
                (other[e31] * self[e31]) + (other[e12] * self[e12]) + (other[e15] * self[e41]) + (other[e25] * self[e42]) + (other[e35] * self[e43]),
            ]) + (other.group0().yzx() * self.group0().zxy()).with_w(other[e23] * self[e23]),
            // e415, e425, e435, e321
            Simd32x4::from([
                (other[e31] * self[e12]) + (other[e25] * self[e43]),
                (other[e12] * self[e23]) + (other[e35] * self[e41]),
                (other[e23] * self[e31]) + (other[e15] * self[e42]),
                -(other[e25] * self[e42]) - (other[e35] * self[e43]),
            ]) - (Simd32x4::from([self[e42], self[e1234], self[e1234], self[e41]]) * other.group1().zyz().with_w(other[e15]))
                - (Simd32x4::from([self[scalar], self[e12], self[e23], self[e4235]]) * other.group0().xxy().with_w(other[e23]))
                - (Simd32x4::from([self[e31], self[scalar], self[scalar], self[e4315]]) * other.group0().zyz().with_w(other[e31]))
                - (Simd32x4::from([self[e1234], self[e43], self[e41], self[e4125]]) * other.group1().xxy().with_w(other[e12])),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(other[e25] * self[e4125]) - (other[e35] * self[e31]),
                -(other[e25] * self[scalar]) - (other[e35] * self[e4235]),
                -(other[e25] * self[e23]) - (other[e35] * self[scalar]),
                (other[e25] * self[e31]) + (other[e35] * self[e12]),
            ]) + (Simd32x4::from([self[e45], self[e4125], self[e31], self[e25]]) * other.group1().xxx().with_w(other[e31]))
                + (Simd32x4::from([self[e4315], self[e23], self[e45], self[e23]]) * other.group1().zzz().with_w(other[e15]))
                + (self.group2().zxyx() * other.group0().yzx().with_w(other[e23]))
                + (self.group1().zw().with_zw(self[e4235], self[e35]) * other.group1().yyy().with_w(other[e12]))
                - (Simd32x4::from([self[scalar], self[e12], self[e4315], self[e4125]]) * other.group1().xxx().with_w(other[e35]))
                - (Simd32x4::from([self[e25], self[e3215], self[e3215], self[e4315]]) * other.group0().zyz().with_w(other[e25]))
                - (Simd32x4::from([self[e3215], self[e35], self[e15], self[e4235]]) * other.group0().xxy().with_w(other[e15])),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e35] * self[e42]) - (other[e31] * self[e4125]) - (other[e25] * self[e43]),
                (other[e25] * self[e1234]) - (other[e12] * self[e4235]) - (other[e35] * self[e41]),
                (other[e35] * self[e1234]) - (other[e23] * self[e4315]) - (other[e15] * self[e42]),
                0.0,
            ]) + (Simd32x4::from([self[e45], self[e4125], self[e4235], self[e41]]) * other.group0().xxy().with_w(other[e23]))
                + (Simd32x4::from([self[e1234], self[e43], self[e41], self[e43]]) * other.group1().xxy().with_w(other[e12]))
                + (Simd32x4::from([self[e4315], self[e45], self[e45], self[e42]]) * other.group0().zyz().with_w(other[e31])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiMotor> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       49       91        0
    //    simd3        0       12        0
    //    simd4       76       68        0
    // Totals...
    // yes simd      125      171        0
    //  no simd      353      399        0
    fn anti_sandwich(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                other[scalar] * self[e41] * -1.0,
                other[scalar] * self[e42] * -1.0,
                other[scalar] * self[e43] * -1.0,
                (other[e31] * self[e31]) + (other[e12] * self[e12]) + (other[e15] * self[e41]) + (other[e25] * self[e42]) + (other[e35] * self[e43]),
            ]) + (other.group0().yzxx() * self.group0().zxy().with_w(self[e23]))
                - (Simd32x4::from([self[e42], self[e1234], self[e1234], self[e1234]]) * other.group0().zyz().with_w(other[e3215]))
                - (Simd32x4::from([self[e1234], self[e43], self[e41], self[scalar]]) * other.group0().xxyw()),
            // e415, e425, e435, e321
            (other.group0().yzxw() * self.group1().zxyw()) + (other.group1().yzxw() * self.group0().zxy().with_w(self[e1234]))
                - (Simd32x4::from([self[e42], self[e1234], self[e1234], self[e42]]) * other.group1().zyzy())
                - (Simd32x4::from([self[scalar], self[e12], self[e23], self[e4235]]) * other.group0().xxyx())
                - (Simd32x4::from([self[e31], self[scalar], self[scalar], self[e4315]]) * other.group0().zyzy())
                - (Simd32x4::from([self[e1234], self[e43], self[e41], self[e41]]) * other.group1().xxyx())
                - (other.group0().wwwz() * self.group1().xyz().with_w(self[e4125]))
                - (other.group1().wwwz() * self.group0().xyzz()),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(other[e35] * self[e31]) - (other[e3215] * self[e23]),
                -(other[e35] * self[e4235]) - (other[e3215] * self[e31]),
                -(other[e35] * self[scalar]) - (other[e3215] * self[e12]),
                (other[e35] * self[e12]) + (other[e3215] * self[e45]),
            ]) + (Simd32x4::from([self[e45], self[e4125], self[e31], self[e25]]) * other.group1().xxx().with_w(other[e31]))
                + (Simd32x4::from([self[e4315], self[e23], self[e45], self[e23]]) * other.group1().zzzx())
                + (other.group0().yzxx() * self.group2().zxyx())
                + (other.group1().wwwy() * self.group3().xyz().with_w(self[e31]))
                + (self.group1().zw().with_zw(self[e4235], self[e35]) * other.group1().yyy().with_w(other[e12]))
                - (Simd32x4::from([self[scalar], self[e12], self[e4315], self[e4125]]) * other.group1().xxxz())
                - (Simd32x4::from([self[e25], self[e3215], self[e3215], self[e4235]]) * other.group0().zyz().with_w(other[e15]))
                - (Simd32x4::from([self[e4125], self[scalar], self[e23], self[scalar]]) * other.group1().yyyw())
                - (Simd32x4::from([self[e3215], self[e35], self[e15], self[e3215]]) * other.group0().xxyw())
                - (other.group0().www() * self.group2().xyz()).with_w(other[e25] * self[e4315]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e15] * self[e1234]) + (other[e35] * self[e42]) + (other[e3215] * self[e41]) - (other[e25] * self[e43]),
                (other[e15] * self[e43]) + (other[e25] * self[e1234]) + (other[e3215] * self[e42]) - (other[e35] * self[e41]),
                (other[e25] * self[e41]) + (other[e35] * self[e1234]) + (other[e3215] * self[e43]) - (other[e15] * self[e42]),
                0.0,
            ]) + (Simd32x4::from([self[e45], self[e4125], self[e4235], self[e41]]) * other.group0().xxyx())
                + (Simd32x4::from([self[e4315], self[e45], self[e45], self[e42]]) * other.group0().zyzy())
                + (other.group0().wwwz() * self.group3().xyz().with_w(self[e43]))
                - (other.group0().yzxw() * self.group3().zxy().with_w(self[e1234])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiPlane> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       45       91        0
    //    simd3        0       13        0
    //    simd4       61       52        0
    // Totals...
    // yes simd      106      156        0
    //  no simd      289      338        0
    fn anti_sandwich(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                other[e2] * self[e43] * -1.0,
                other[e3] * self[e41] * -1.0,
                other[e1] * self[e42] * -1.0,
                (other[e3] * self[e4125]) + (other[e5] * self[e1234]),
            ]) + (Simd32x4::from([self[e42], self[e1234], self[e1234], self[e4315]]) * other.group0().zyzy())
                + (Simd32x4::from([self[e1234], self[e43], self[e41], self[e4235]]) * other.group0().xxyx()),
            // e23, e31, e12, e45
            Simd32x4::from([
                -(other[e1] * self[e45]) - (other[e3] * self[e4315]),
                -(other[e1] * self[e4125]) - (other[e2] * self[e45]),
                -(other[e2] * self[e4235]) - (other[e3] * self[e45]),
                (other[e3] * self[e12]) + (other[e5] * self[e1234]),
            ]) + (other.group0().yzxx() * self.group3().zxy().with_w(self[e23]))
                + (other.group0().wwwy() * self.group0().xyz().with_w(self[e31])),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e2] * self[e35]) + (other[e5] * self[e23]),
                (other[e3] * self[e15]) + (other[e5] * self[e31]),
                (other[e1] * self[e25]) + (other[e5] * self[e12]),
                0.0,
            ]) - (Simd32x4::from([self[e25], self[e3215], self[e3215], self[e42]]) * other.group0().zyzy())
                - (Simd32x4::from([self[e3215], self[e35], self[e15], self[e41]]) * other.group0().xxyx())
                - (other.group0().wwwz() * self.group3().xyz().with_w(self[e43])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e3] * self[e31] * -1.0,
                other[e2] * self[scalar] * -1.0,
                other[e3] * self[scalar] * -1.0,
                (other[e3] * self[e35]) + (other[e5] * self[scalar]),
            ]) + (other.group0().yzxx() * self.group1().zxy().with_w(self[e15]))
                + (other.group0().wwwy() * self.group0().xyz().with_w(self[e25]))
                - (Simd32x4::from([self[scalar], self[e12], self[e23], self[e45]]) * other.group0().xxyw()),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<AntiScalar> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       36       61        0
    //    simd3        0       13        0
    //    simd4       51       46        0
    // Totals...
    // yes simd       87      120        0
    //  no simd      240      284        0
    fn anti_sandwich(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from(other[e12345]) * self.group0(),
            // e23, e31, e12, e45
            Simd32x4::from(other[e12345]) * self.group1(),
            // e15, e25, e35, e1234
            Simd32x4::from(other[e12345]) * self.group2(),
            // e4235, e4315, e4125, e3215
            Simd32x4::from(other[e12345]) * self.group3(),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Circle> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       84      134        0
    //    simd3        0       22        0
    //    simd4       75       57        0
    // Totals...
    // yes simd      159      213        0
    //  no simd      384      428        0
    fn anti_sandwich(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e423] * self[scalar])
                    + (other[e423] * self[e45])
                    + (other[e412] * self[e31])
                    + (other[e412] * self[e4315])
                    + (other[e415] * self[e1234])
                    + (other[e435] * self[e42])
                    + (other[e321] * self[e41]),
                (other[e423] * self[e12])
                    + (other[e423] * self[e4125])
                    + (other[e431] * self[scalar])
                    + (other[e431] * self[e45])
                    + (other[e415] * self[e43])
                    + (other[e425] * self[e1234])
                    + (other[e321] * self[e42]),
                (other[e431] * self[e23])
                    + (other[e431] * self[e4235])
                    + (other[e412] * self[scalar])
                    + (other[e412] * self[e45])
                    + (other[e425] * self[e41])
                    + (other[e435] * self[e1234])
                    + (other[e321] * self[e43]),
                -(other[e415] * self[e23])
                    - (other[e425] * self[e31])
                    - (other[e435] * self[e12])
                    - (other[e321] * self[e45])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]) - (other.group0().yzx() * self.group1().zxy()).with_w(other[e423] * self[e15])
                - (other.group0().yzx() * self.group3().zxy()).with_w(other[e431] * self[e25])
                - (other.group1().yzx() * self.group0().zxy()).with_w(other[e412] * self[e35]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e415] * self[scalar]) + (other[e435] * self[e31]) + (other[e125] * self[e42]),
                (other[e415] * self[e12]) + (other[e425] * self[scalar]) + (other[e315] * self[e1234]),
                (other[e425] * self[e23]) + (other[e435] * self[scalar]) + (other[e125] * self[e1234]),
                -(other[e425] * self[e4315]) - (other[e435] * self[e4125]) - (other[e321] * self[scalar]),
            ]) + (Simd32x4::from([self[e25], self[e3215], self[e3215], self[e25]]) * other.group0().zyz().with_w(other[e431]))
                + (Simd32x4::from([self[e1234], self[e43], self[e41], self[e35]]) * other.group2().xxy().with_w(other[e412]))
                + (Simd32x4::from([self[e3215], self[e35], self[e15], self[e15]]) * other.group0().xxy().with_w(other[e423]))
                - (other.group1().wwwx() * self.group3().xyzx())
                - (self.group0().zxyy() * other.group2().yzx().with_w(other[e315]))
                - (other.group0().yzx() * self.group2().zxy()).with_w(other[e235] * self[e41])
                - (other.group1().yzx() * self.group1().zxy()).with_w(other[e125] * self[e43]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e415] * self[e3215]) + (other[e435] * self[e25]) + (other[e315] * self[e4125]) + (other[e125] * self[e31]),
                (other[e415] * self[e35]) + (other[e425] * self[e3215]) + (other[e315] * self[scalar]) + (other[e125] * self[e4235]),
                (other[e425] * self[e15]) + (other[e435] * self[e3215]) + (other[e315] * self[e23]) + (other[e125] * self[scalar]),
                -(other[e412] * self[e4125]) - (other[e415] * self[e41]) - (other[e425] * self[e42]) - (other[e435] * self[e43]),
            ]) + (Simd32x4::from([self[scalar], self[e12], self[e4315], self[e1234]]) * other.group2().xxx().with_w(other[e321]))
                - (Simd32x4::from([self[e45], self[e4125], self[e31], self[e23]]) * other.group2().xxx().with_w(other[e423]))
                - (Simd32x4::from([self[e4315], self[e23], self[e45], self[e31]]) * other.group2().zzz().with_w(other[e431]))
                - (self.group1().zw().with_zw(self[e4235], self[e4235]) * other.group2().yyy().with_w(other[e423]))
                - (other.group1().yzx() * self.group2().zxy()).with_w(other[e431] * self[e4315])
                - (other.group1().www() * self.group2().xyz()).with_w(other[e412] * self[e12]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e415] * self[e45]) + (other[e435] * self[e4315]),
                (other[e415] * self[e4125]) + (other[e425] * self[e45]),
                (other[e425] * self[e4235]) + (other[e435] * self[e45]),
                -(other[e435] * self[e35]) - (other[e321] * self[e3215]),
            ]) + (Simd32x4::from([self[e42], self[e1234], self[e1234], self[e4125]]) * other.group2().zyz().with_w(other[e125]))
                + (Simd32x4::from([self[e1234], self[e43], self[e41], self[e4315]]) * other.group2().xxy().with_w(other[e315]))
                + (other.group0().yzx() * self.group2().zxy()).with_w(other[e235] * self[e4235])
                - (Simd32x4::from([self[e25], self[e3215], self[e3215], self[e31]]) * other.group0().zyz().with_w(other[e315]))
                - (Simd32x4::from([self[e3215], self[e35], self[e15], self[e23]]) * other.group0().xxy().with_w(other[e235]))
                - (other.group1().yzxx() * self.group3().zxy().with_w(self[e15]))
                - (other.group1().wwwy() * self.group1().xyz().with_w(self[e25]))
                - (other.group2().yzx() * self.group0().zxy()).with_w(other[e125] * self[e12]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<CircleRotor> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       84      132        0
    //    simd3        0       20        0
    //    simd4       79       63        0
    // Totals...
    // yes simd      163      215        0
    //  no simd      400      444        0
    fn anti_sandwich(self, other: CircleRotor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e423] * self[e45])
                    + (other[e412] * self[e31])
                    + (other[e412] * self[e4315])
                    + (other[e415] * self[e1234])
                    + (other[e435] * self[e42])
                    + (other[e321] * self[e41])
                    + (other[e12345] * self[e41]),
                (other[e423] * self[e4125])
                    + (other[e431] * self[scalar])
                    + (other[e431] * self[e45])
                    + (other[e415] * self[e43])
                    + (other[e425] * self[e1234])
                    + (other[e321] * self[e42])
                    + (other[e12345] * self[e42]),
                (other[e431] * self[e4235])
                    + (other[e412] * self[scalar])
                    + (other[e412] * self[e45])
                    + (other[e425] * self[e41])
                    + (other[e435] * self[e1234])
                    + (other[e321] * self[e43])
                    + (other[e12345] * self[e43]),
                -(other[e415] * self[e23])
                    - (other[e425] * self[e31])
                    - (other[e435] * self[e12])
                    - (other[e321] * self[e45])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]) + (Simd32x4::from([self[scalar], self[e12], self[e23], self[scalar]]) * other.group0().xxy().with_w(other[e12345]))
                - (other.group0().yzx() * self.group1().zxy()).with_w(other[e423] * self[e15])
                - (other.group0().yzx() * self.group3().zxy()).with_w(other[e431] * self[e25])
                - (other.group1().yzx() * self.group0().zxy()).with_w(other[e412] * self[e35]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e235] * self[e1234]) + (other[e125] * self[e42]) + (other[e12345] * self[e23]),
                (other[e235] * self[e43]) + (other[e315] * self[e1234]) + (other[e12345] * self[e31]),
                (other[e315] * self[e41]) + (other[e125] * self[e1234]) + (other[e12345] * self[e12]),
                -(other[e235] * self[e41]) - (other[e315] * self[e42]) - (other[e125] * self[e43]),
            ]) + (Simd32x4::from([self[scalar], self[e12], self[e23], self[e35]]) * other.group1().xxy().with_w(other[e412]))
                + (Simd32x4::from([self[e31], self[scalar], self[scalar], self[e45]]) * other.group1().zyz().with_w(other[e12345]))
                + (Simd32x4::from([self[e25], self[e3215], self[e3215], self[e25]]) * other.group0().zyz().with_w(other[e431]))
                + (Simd32x4::from([self[e3215], self[e35], self[e15], self[e15]]) * other.group0().xxy().with_w(other[e423]))
                - (other.group1().yzxy() * self.group1().zxy().with_w(self[e4315]))
                - (other.group1().wwwz() * self.group3().xyzz())
                - (self.group0().zxyw() * other.group2().yzx().with_w(other[e321]))
                - (other.group0().yzx() * self.group2().zxy()).with_w(other[e415] * self[e4235]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e235] * self[scalar]) + (other[e315] * self[e4125]) + (other[e125] * self[e31]) + (other[e12345] * self[e15]),
                (other[e235] * self[e12]) + (other[e315] * self[scalar]) + (other[e125] * self[e4235]) + (other[e12345] * self[e25]),
                (other[e235] * self[e4315]) + (other[e315] * self[e23]) + (other[e125] * self[scalar]) + (other[e12345] * self[e35]),
                -(other[e412] * self[e4125]) - (other[e415] * self[e41]) - (other[e425] * self[e42]) - (other[e435] * self[e43]),
            ]) + (Simd32x4::from([self[e25], self[e3215], self[e3215], self[e1234]]) * other.group1().zyz().with_w(other[e12345]))
                + (Simd32x4::from([self[e3215], self[e35], self[e15], self[e1234]]) * other.group1().xxyw())
                - (Simd32x4::from([self[e45], self[e4125], self[e31], self[e31]]) * other.group2().xxx().with_w(other[e431]))
                - (Simd32x4::from([self[e4315], self[e23], self[e45], self[e12]]) * other.group2().zzz().with_w(other[e412]))
                - (self.group1().zw().with_zw(self[e4235], self[e4315]) * other.group2().yyy().with_w(other[e431]))
                - (other.group1().yzx() * self.group2().zxy()).with_w(other[e423] * self[e23])
                - (other.group1().www() * self.group2().xyz()).with_w(other[e423] * self[e4235]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (other[e125] * self[e42]) + (other[e12345] * self[e4235]),
                (other[e315] * self[e1234]) + (other[e12345] * self[e4315]),
                (other[e125] * self[e1234]) + (other[e12345] * self[e4125]),
                -(other[e315] * self[e31]) - (other[e125] * self[e12]),
            ]) + (Simd32x4::from([self[e45], self[e4125], self[e4235], self[e4315]]) * other.group1().xxy().with_w(other[e315]))
                + (Simd32x4::from([self[e1234], self[e43], self[e41], self[e3215]]) * other.group2().xxyw())
                + (Simd32x4::from([self[e4315], self[e45], self[e45], self[e4125]]) * other.group1().zyz().with_w(other[e125]))
                + (other.group0().yzx() * self.group2().zxy()).with_w(other[e235] * self[e4235])
                - (Simd32x4::from(other[e321]) * self.group1().xyz().with_w(self[e3215]))
                - (Simd32x4::from([self[e25], self[e3215], self[e3215], self[e25]]) * other.group0().zyz().with_w(other[e425]))
                - (Simd32x4::from([self[e3215], self[e35], self[e15], self[e15]]) * other.group0().xxy().with_w(other[e415]))
                - (other.group1().yzxz() * self.group3().zxy().with_w(self[e35]))
                - (other.group2().yzxx() * self.group0().zxy().with_w(self[e23])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Dipole> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       64      117        0
    //    simd3        0       18        0
    //    simd4       80       65        0
    // Totals...
    // yes simd      144      200        0
    //  no simd      384      431        0
    fn anti_sandwich(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                -(other[e41] * self[e45]) - (other[e43] * self[e31]) - (other[e43] * self[e4315]) - (other[e23] * self[e1234]) - (other[e12] * self[e42]),
                -(other[e41] * self[e4125]) - (other[e42] * self[scalar]) - (other[e42] * self[e45]) - (other[e23] * self[e43]) - (other[e31] * self[e1234]),
                -(other[e42] * self[e4235]) - (other[e43] * self[scalar]) - (other[e43] * self[e45]) - (other[e31] * self[e41]) - (other[e12] * self[e1234]),
                (other[e23] * self[e23]) + (other[e31] * self[e31]) + (other[e12] * self[e12]) + (other[e25] * self[e42]) + (other[e35] * self[e43]),
            ]) + (self.group0().xyzx() * other.group1().www().with_w(other[e15]))
                + (other.group0().yzx() * self.group1().zxy()).with_w(other[e41] * self[e15])
                + (other.group0().yzx() * self.group3().zxy()).with_w(other[e42] * self[e25])
                + (other.group1().yzx() * self.group0().zxy()).with_w(other[e43] * self[e35])
                - (Simd32x4::from([self[scalar], self[e12], self[e23], self[e45]]) * other.group0().xxy().with_w(other[e45])),
            // e415, e425, e435, e321
            Simd32x4::from([
                other[e45] * self[e4235] * -1.0,
                other[e45] * self[e4315] * -1.0,
                other[e45] * self[e4125] * -1.0,
                other[e45] * self[scalar],
            ]) + (self.group2().zxyx() * other.group0().yzx().with_w(other[e41]))
                + (other.group2().yzx() * self.group0().zxy()).with_w(other[e42] * self[e25])
                + (other.group1().yzx() * self.group1().zxy()).with_w(other[e43] * self[e35])
                - (Simd32x4::from([self[e42], self[e1234], self[e1234], self[e4235]]) * other.group2().zyz().with_w(other[e23]))
                - (Simd32x4::from([self[scalar], self[e12], self[e23], self[e4315]]) * other.group1().xxyy())
                - (Simd32x4::from([self[e31], self[scalar], self[scalar], self[e4125]]) * other.group1().zyzz())
                - (Simd32x4::from([self[e25], self[e3215], self[e3215], self[e42]]) * other.group0().zyz().with_w(other[e25]))
                - (Simd32x4::from([self[e1234], self[e43], self[e41], self[e43]]) * other.group2().xxy().with_w(other[e35]))
                - (Simd32x4::from([self[e3215], self[e35], self[e15], self[e41]]) * other.group0().xxy().with_w(other[e15])),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(other[e12] * self[e25]) - (other[e45] * self[e15]),
                -(other[e31] * self[e3215]) - (other[e45] * self[e25]),
                -(other[e12] * self[e3215]) - (other[e45] * self[e35]),
                (other[e31] * self[e25]) + (other[e12] * self[e35]),
            ]) + (Simd32x4::from(other[e15]) * Simd32x4::from([self[e45], self[e4125], self[e31], self[e23]]))
                + (Simd32x4::from(other[e25]) * self.group1().zw().with_zw(self[e4235], self[e31]))
                + (Simd32x4::from(other[e35]) * Simd32x4::from([self[e4315], self[e23], self[e45], self[e12]]))
                + (other.group1().yzxx() * self.group2().zxyx())
                - (Simd32x4::from(other[e15]) * Simd32x4::from([self[scalar], self[e12], self[e4315], self[e4235]]))
                - (Simd32x4::from(other[e25]) * Simd32x4::from([self[e4125], self[scalar], self[e23], self[e4315]]))
                - (Simd32x4::from(other[e35]) * Simd32x4::from([self[e31], self[e4235], self[scalar], self[e4125]]))
                - (Simd32x4::from([self[e3215], self[e35], self[e15], self[e3215]]) * other.group1().xxyw()),
            // e1, e2, e3, e4
            Simd32x4::from([
                -(other[e41] * self[e3215]) - (other[e43] * self[e25]) - (other[e31] * self[e4125]) - (other[e25] * self[e43]),
                -(other[e41] * self[e35]) - (other[e42] * self[e3215]) - (other[e12] * self[e4235]) - (other[e35] * self[e41]),
                -(other[e42] * self[e15]) - (other[e43] * self[e3215]) - (other[e23] * self[e4315]) - (other[e15] * self[e42]),
                (other[e23] * self[e41]) + (other[e31] * self[e42]) + (other[e12] * self[e43]) + (other[e45] * self[e1234]),
            ]) + (Simd32x4::from([self[e42], self[e1234], self[e1234], self[e31]]) * other.group2().zyz().with_w(other[e42]))
                + (Simd32x4::from([self[e45], self[e4125], self[e4235], self[e4315]]) * other.group1().xxy().with_w(other[e42]))
                + (Simd32x4::from([self[e1234], self[e43], self[e41], self[e4235]]) * other.group2().xxy().with_w(other[e41]))
                + (Simd32x4::from([self[e4315], self[e45], self[e45], self[e12]]) * other.group1().zyz().with_w(other[e43]))
                + (other.group0().yzx() * self.group2().zxy()).with_w(other[e41] * self[e23])
                + (other.group1().www() * self.group1().xyz()).with_w(other[e43] * self[e4125]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DipoleInversion> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       64      128        0
    //    simd3        0       26        0
    //    simd4      100       77        0
    // Totals...
    // yes simd      164      231        0
    //  no simd      464      514        0
    fn anti_sandwich(self, other: DipoleInversion) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                -(other[e43] * self[e4315])
                    - (other[e23] * self[e1234])
                    - (other[e12] * self[e42])
                    - (other[e1234] * self[e23])
                    - (other[e1234] * self[e4235])
                    - (other[e4315] * self[e43]),
                -(other[e42] * self[e45])
                    - (other[e23] * self[e43])
                    - (other[e31] * self[e1234])
                    - (other[e1234] * self[e31])
                    - (other[e1234] * self[e4315])
                    - (other[e4125] * self[e41]),
                -(other[e43] * self[e45])
                    - (other[e31] * self[e41])
                    - (other[e12] * self[e1234])
                    - (other[e1234] * self[e12])
                    - (other[e1234] * self[e4125])
                    - (other[e4235] * self[e42]),
                (other[e15] * self[e41])
                    + (other[e25] * self[e42])
                    + (other[e35] * self[e43])
                    + (other[e4235] * self[e4235])
                    + (other[e4315] * self[e4315])
                    + (other[e4125] * self[e4125]),
            ]) + (Simd32x4::from([self[e42], self[e1234], self[e1234], self[e12]]) * other.group3().zyz().with_w(other[e12]))
                + (Simd32x4::from([self[e1234], self[e43], self[e41], self[e31]]) * other.group3().xxy().with_w(other[e31]))
                + (other.group1().wwwx() * self.group0().xyz().with_w(self[e23]))
                + (other.group0().yzx() * self.group1().zxy()).with_w(other[e41] * self[e15])
                + (other.group0().yzx() * self.group3().zxy()).with_w(other[e42] * self[e25])
                + (other.group1().yzx() * self.group0().zxy()).with_w(other[e43] * self[e35])
                - (Simd32x4::from([self[scalar], self[e12], self[e23], self[e45]]) * other.group0().xxy().with_w(other[e45]))
                - (Simd32x4::from([self[e31], self[scalar], self[scalar], self[e1234]]) * other.group0().zyz().with_w(other[e3215]))
                - (Simd32x4::from([self[e45], self[e4125], self[e4235], self[e3215]]) * other.group0().xxy().with_w(other[e1234])),
            // e415, e425, e435, e321
            Simd32x4::from([
                other[e3215] * self[e41] * -1.0,
                other[e3215] * self[e42] * -1.0,
                other[e3215] * self[e43] * -1.0,
                other[e3215] * self[e1234],
            ]) + (self.group2().zxyx() * other.group0().yzx().with_w(other[e41]))
                + (other.group1().yzx() * self.group1().zxy()).with_w(other[e42] * self[e25])
                + (other.group2().yzx() * self.group0().zxy()).with_w(other[e43] * self[e35])
                + (other.group3().yzx() * self.group3().zxy()).with_w(other[e45] * self[scalar])
                - (Simd32x4::from([self[e42], self[e1234], self[e1234], self[e3215]]) * other.group2().zyzw())
                - (Simd32x4::from([self[scalar], self[e12], self[e23], self[e4125]]) * other.group1().xxyz())
                - (Simd32x4::from([self[e31], self[scalar], self[scalar], self[e41]]) * other.group1().zyz().with_w(other[e15]))
                - (Simd32x4::from([self[e45], self[e4125], self[e4235], self[e31]]) * other.group3().xxyy())
                - (Simd32x4::from([self[e25], self[e3215], self[e3215], self[e4315]]) * other.group0().zyz().with_w(other[e31]))
                - (Simd32x4::from([self[e1234], self[e43], self[e41], self[e43]]) * other.group2().xxyz())
                - (Simd32x4::from([self[e4315], self[e45], self[e45], self[e12]]) * other.group3().zyzz())
                - (Simd32x4::from([self[e3215], self[e35], self[e15], self[e4235]]) * other.group0().xxy().with_w(other[e23]))
                - (other.group1().www() * self.group3().xyz()).with_w(other[e25] * self[e42])
                - (other.group2().www() * self.group2().xyz()).with_w(other[e4235] * self[e23]),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(other[e35] * self[e31]) - (other[e4235] * self[e3215]) - (other[e4125] * self[e25]) - (other[e3215] * self[e23]),
                -(other[e35] * self[e4235]) - (other[e4235] * self[e35]) - (other[e4315] * self[e3215]) - (other[e3215] * self[e31]),
                -(other[e35] * self[scalar]) - (other[e4315] * self[e15]) - (other[e4125] * self[e3215]) - (other[e3215] * self[e12]),
                (other[e4235] * self[e15]) + (other[e4315] * self[e25]) + (other[e4125] * self[e35]) + (other[e3215] * self[e45]),
            ]) + (Simd32x4::from([self[e45], self[e4125], self[e31], self[e25]]) * other.group2().xxx().with_w(other[e31]))
                + (Simd32x4::from([self[e4315], self[e23], self[e45], self[e23]]) * other.group2().zzzx())
                + (other.group1().yzxx() * self.group2().zxyx())
                + (self.group1().zw().with_zw(self[e4235], self[e35]) * other.group2().yyy().with_w(other[e12]))
                + (other.group3().yzx() * self.group2().zxy()).with_w(other[e25] * self[e31])
                + (other.group3().www() * self.group3().xyz()).with_w(other[e35] * self[e12])
                - (Simd32x4::from([self[scalar], self[e12], self[e4315], self[e4125]]) * other.group2().xxxz())
                - (Simd32x4::from([self[e25], self[e3215], self[e3215], self[e4235]]) * other.group1().zyz().with_w(other[e15]))
                - (Simd32x4::from([self[e4125], self[scalar], self[e23], self[scalar]]) * other.group2().yyy().with_w(other[e3215]))
                - (Simd32x4::from([self[e3215], self[e35], self[e15], self[e3215]]) * other.group1().xxyw())
                - (other.group1().www() * self.group2().xyz()).with_w(other[e25] * self[e4315]),
            // e1, e2, e3, e4
            Simd32x4::from([
                other[e4315] * self[e12] * -1.0,
                other[e4125] * self[e23] * -1.0,
                other[e4235] * self[e31] * -1.0,
                other[e45] * self[e1234],
            ]) + (Simd32x4::from([self[e42], self[e1234], self[e1234], self[e4125]]) * other.group2().zyz().with_w(other[e43]))
                + (Simd32x4::from([self[scalar], self[e12], self[e23], self[e41]]) * other.group3().xxy().with_w(other[e23]))
                + (Simd32x4::from([self[e31], self[scalar], self[scalar], self[e42]]) * other.group3().zyz().with_w(other[e31]))
                + (Simd32x4::from([self[e45], self[e4125], self[e4235], self[e4235]]) * other.group1().xxy().with_w(other[e41]))
                + (Simd32x4::from([self[e1234], self[e43], self[e41], self[e12]]) * other.group2().xxy().with_w(other[e43]))
                + (Simd32x4::from([self[e4315], self[e45], self[e45], self[e31]]) * other.group1().zyz().with_w(other[e42]))
                + (self.group0().xyzz() * other.group3().www().with_w(other[e12]))
                + (other.group0().yzx() * self.group2().zxy()).with_w(other[e41] * self[e23])
                + (other.group1().www() * self.group1().xyz()).with_w(other[e42] * self[e4315])
                - (Simd32x4::from([self[e25], self[e3215], self[e3215], self[e45]]) * other.group0().zyz().with_w(other[e1234]))
                - (Simd32x4::from([self[e3215], self[e35], self[e15], self[scalar]]) * other.group0().xxy().with_w(other[e1234]))
                - (self.group0().zxyy() * other.group2().yzx().with_w(other[e4315]))
                - (other.group1().yzx() * self.group3().zxy()).with_w(other[e4235] * self[e41])
                - (other.group2().www() * self.group2().xyz()).with_w(other[e4125] * self[e43]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<DualNum> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       37       66        0
    //    simd3        2       16        0
    //    simd4       54       47        0
    // Totals...
    // yes simd       93      129        0
    //  no simd      259      302        0
    fn anti_sandwich(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([self[e41], self[e42], self[e43], 1.0]) * other.group0().yy().with_zw(other[e12345], (other[e5] * self[e1234]) + (other[e12345] * self[scalar])),
            // e23, e31, e12, e45
            (Simd32x4::from(other[e5]) * self.group0().xyz().with_w(self[e1234])) + (Simd32x4::from(other[e12345]) * self.group1()),
            // e15, e25, e35, e1234
            ((Simd32x3::from(other[e5]) * self.group1().xyz()) + (Simd32x3::from(other[e12345]) * self.group2().xyz()) - (Simd32x3::from(other[e5]) * self.group3().xyz()))
                .with_w(other[e12345] * self[e1234]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other[e5]) * self.group0()) + (Simd32x4::from(other[e12345]) * self.group3()) + Simd32x3::from(0.0).with_w(other[e5] * self[e45] * -1.0),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<FlatPoint> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       35       64        0
    //    simd3        3       15        0
    //    simd4       61       56        0
    // Totals...
    // yes simd       99      135        0
    //  no simd      288      333        0
    fn anti_sandwich(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([self[e41], self[e42], self[e43], 1.0])
                * other
                    .group0()
                    .www()
                    .with_w((other[e15] * self[e41]) + (other[e25] * self[e42]) + (other[e35] * self[e43]) - (other[e45] * self[e45])),
            // e415, e425, e435, e321
            (other.group0().yzxw() * self.group0().zxyw())
                - (Simd32x4::from([self[e42], self[e1234], self[e1234], self[e42]]) * other.group0().zyzy())
                - (Simd32x4::from([self[e1234], self[e43], self[e41], self[e41]]) * other.group0().xxyx())
                - (other.group0().wwwz() * self.group3().xyz().with_w(self[e43])),
            // e235, e315, e125, e5
            (Simd32x4::from(other[e15]) * Simd32x4::from([self[e45], self[e4125], self[e31], self[e23]]))
                + (Simd32x4::from(other[e25]) * self.group1().zw().with_zw(self[e4235], self[e31]))
                + (Simd32x4::from(other[e35]) * Simd32x4::from([self[e4315], self[e23], self[e45], self[e12]]))
                - (Simd32x4::from(other[e15]) * Simd32x4::from([self[scalar], self[e12], self[e4315], self[e4235]]))
                - (Simd32x4::from(other[e25]) * Simd32x4::from([self[e4125], self[scalar], self[e23], self[e4315]]))
                - (Simd32x4::from(other[e35]) * Simd32x4::from([self[e31], self[e4235], self[scalar], self[e4125]]))
                - (Simd32x4::from(other[e45]) * self.group2().xyz().with_w(self[e3215])),
            // e1, e2, e3, e4
            ((Simd32x3::from(other[e45]) * self.group1().xyz())
                + (Simd32x3::from([self[e42], self[e1234], self[e1234]]) * other.group0().zyz())
                + (Simd32x3::from([self[e1234], self[e43], self[e41]]) * other.group0().xxy())
                - (other.group0().yzx() * self.group0().zxy()))
            .with_w(other[e45] * self[e1234]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Flector> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       51       89        0
    //    simd3        0       12        0
    //    simd4       76       68        0
    // Totals...
    // yes simd      127      169        0
    //  no simd      355      397        0
    fn anti_sandwich(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([self[e42], self[e1234], self[e1234], self[e43]]) * other.group1().zyz().with_w(other[e35]))
                + (Simd32x4::from([self[e1234], self[e43], self[e41], self[e42]]) * other.group1().xxy().with_w(other[e25]))
                + (other.group0().wwwx() * self.group0().xyzx())
                + Simd32x3::from(0.0).with_w((other[e4235] * self[e4235]) + (other[e4315] * self[e4315]) + (other[e4125] * self[e4125]) - (other[e3215] * self[e1234]))
                - (other.group1().yzx() * self.group0().zxy()).with_w(other[e45] * self[e45]),
            // e415, e425, e435, e321
            (other.group0().yzxw() * self.group0().zxyw()) + (other.group1().yzxw() * self.group3().zxy().with_w(self[e1234]))
                - (Simd32x4::from([self[e42], self[e1234], self[e1234], self[e42]]) * other.group0().zyzy())
                - (Simd32x4::from([self[e45], self[e4125], self[e4235], self[e23]]) * other.group1().xxyx())
                - (Simd32x4::from([self[e1234], self[e43], self[e41], self[e41]]) * other.group0().xxyx())
                - (Simd32x4::from([self[e4315], self[e45], self[e45], self[e31]]) * other.group1().zyzy())
                - (other.group0().wwwz() * self.group3().xyz().with_w(self[e43]))
                - (other.group1().wwwz() * self.group0().xyz().with_w(self[e12])),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(other[e4125] * self[e25]) - (other[e3215] * self[e23]),
                -(other[e4315] * self[e3215]) - (other[e3215] * self[e31]),
                -(other[e4125] * self[e3215]) - (other[e3215] * self[e12]),
                (other[e4125] * self[e35]) + (other[e3215] * self[e45]),
            ]) + (Simd32x4::from(other[e15]) * Simd32x4::from([self[e45], self[e4125], self[e31], self[e23]]))
                + (Simd32x4::from(other[e25]) * self.group1().zw().with_zw(self[e4235], self[e31]))
                + (Simd32x4::from(other[e35]) * Simd32x4::from([self[e4315], self[e23], self[e45], self[e12]]))
                + (other.group1().yzxx() * self.group2().zxyx())
                + (other.group1().wwwy() * self.group3().xyz().with_w(self[e25]))
                - (Simd32x4::from(other[e15]) * Simd32x4::from([self[scalar], self[e12], self[e4315], self[e4235]]))
                - (Simd32x4::from(other[e25]) * Simd32x4::from([self[e4125], self[scalar], self[e23], self[e4315]]))
                - (Simd32x4::from(other[e35]) * Simd32x4::from([self[e31], self[e4235], self[scalar], self[e4125]]))
                - (Simd32x4::from(other[e45]) * self.group2().xyz().with_w(self[e3215]))
                - (Simd32x4::from([self[e3215], self[e35], self[e15], self[scalar]]) * other.group1().xxyw()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e35] * self[e42]) + (other[e45] * self[e23]) + (other[e4235] * self[scalar]) + (other[e4125] * self[e31]) + (other[e3215] * self[e41]),
                (other[e25] * self[e1234]) + (other[e45] * self[e31]) + (other[e4235] * self[e12]) + (other[e4315] * self[scalar]) + (other[e3215] * self[e42]),
                (other[e35] * self[e1234]) + (other[e45] * self[e12]) + (other[e4315] * self[e23]) + (other[e4125] * self[scalar]) + (other[e3215] * self[e43]),
                other[e4125] * self[e43] * -1.0,
            ]) + (Simd32x4::from([self[e1234], self[e43], self[e41], self[e1234]]) * other.group0().xxyw())
                - (other.group1().yzxy() * self.group1().zxy().with_w(self[e42]))
                - (self.group0().zxyx() * other.group0().yzx().with_w(other[e4235])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Line> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       73      119        0
    //    simd3        0       19        0
    //    simd4       62       47        0
    // Totals...
    // yes simd      135      185        0
    //  no simd      321      364        0
    fn anti_sandwich(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e415] * self[e1234]) + (other[e435] * self[e42]),
                (other[e415] * self[e43]) + (other[e425] * self[e1234]),
                (other[e425] * self[e41]) + (other[e435] * self[e1234]),
                -(other[e425] * self[e31]) - (other[e435] * self[e12]) - (other[e235] * self[e41]) - (other[e315] * self[e42]) - (other[e125] * self[e43]),
            ]) - (other.group0().yzx() * self.group0().zxy()).with_w(other[e415] * self[e23]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e415] * self[scalar]) + (other[e435] * self[e31]) + (other[e235] * self[e1234]) + (other[e125] * self[e42]),
                (other[e415] * self[e12]) + (other[e425] * self[scalar]) + (other[e235] * self[e43]) + (other[e315] * self[e1234]),
                (other[e425] * self[e23]) + (other[e435] * self[scalar]) + (other[e315] * self[e41]) + (other[e125] * self[e1234]),
                -(other[e435] * self[e4125]) - (other[e235] * self[e41]) - (other[e315] * self[e42]) - (other[e125] * self[e43]),
            ]) - (other.group0().yzx() * self.group1().zxy()).with_w(other[e415] * self[e4235])
                - (other.group1().yzx() * self.group0().zxy()).with_w(other[e425] * self[e4315]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e415] * self[e3215]) + (other[e435] * self[e25]) + (other[e235] * self[scalar]) + (other[e315] * self[e4125]) + (other[e125] * self[e31])
                    - (other[e125] * self[e4315]),
                (other[e415] * self[e35]) + (other[e425] * self[e3215]) + (other[e235] * self[e12]) + (other[e315] * self[scalar]) + (other[e125] * self[e4235])
                    - (other[e125] * self[e23]),
                (other[e425] * self[e15]) + (other[e435] * self[e3215]) + (other[e235] * self[e4315]) + (other[e315] * self[e23]) + (other[e125] * self[scalar])
                    - (other[e125] * self[e45]),
                0.0,
            ]) - (Simd32x4::from([self[e45], self[e4125], self[e31], self[e42]]) * other.group1().xxx().with_w(other[e425]))
                - (self.group1().zw().with_zw(self[e4235], self[e43]) * other.group1().yyy().with_w(other[e435]))
                - (other.group0().yzx() * self.group2().zxy()).with_w(other[e415] * self[e41]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e125] * self[e42],
                other[e315] * self[e1234],
                other[e125] * self[e1234],
                -(other[e435] * self[e35]) - (other[e235] * self[e23]) - (other[e315] * self[e31]) - (other[e125] * self[e12]),
            ]) + (Simd32x4::from([self[e45], self[e4125], self[e4235], self[e4235]]) * other.group0().xxy().with_w(other[e235]))
                + (Simd32x4::from([self[e1234], self[e43], self[e41], self[e4125]]) * other.group1().xxy().with_w(other[e125]))
                + (Simd32x4::from([self[e4315], self[e45], self[e45], self[e4315]]) * other.group0().zyz().with_w(other[e315]))
                - (other.group0().yzx() * self.group3().zxy()).with_w(other[e415] * self[e15])
                - (other.group1().yzx() * self.group0().zxy()).with_w(other[e425] * self[e25]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Motor> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       77      119        0
    //    simd3        0       15        0
    //    simd4       69       58        0
    // Totals...
    // yes simd      146      192        0
    //  no simd      353      396        0
    fn anti_sandwich(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                other[e12345] * self[e41],
                other[e12345] * self[e42],
                other[e12345] * self[e43],
                -(other[e425] * self[e31]) - (other[e435] * self[e12]) - (other[e235] * self[e41]) - (other[e315] * self[e42]) - (other[e125] * self[e43]),
            ]) + (Simd32x4::from([self[e42], self[e1234], self[e1234], self[e1234]]) * other.group0().zyz().with_w(other[e5]))
                + (Simd32x4::from([self[e1234], self[e43], self[e41], self[scalar]]) * other.group0().xxyw())
                - (other.group0().yzxx() * self.group0().zxy().with_w(self[e23])),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e12345] * self[e23]) + (other[e235] * self[e1234]) + (other[e125] * self[e42]) + (other[e5] * self[e41]),
                (other[e12345] * self[e31]) + (other[e235] * self[e43]) + (other[e315] * self[e1234]) + (other[e5] * self[e42]),
                (other[e12345] * self[e12]) + (other[e315] * self[e41]) + (other[e125] * self[e1234]) + (other[e5] * self[e43]),
                -(other[e435] * self[e4125]) - (other[e235] * self[e41]) - (other[e315] * self[e42]) - (other[e125] * self[e43]),
            ]) + (Simd32x4::from([self[scalar], self[e12], self[e23], self[e45]]) * other.group0().xxyw())
                + (Simd32x4::from([self[e31], self[scalar], self[scalar], self[e1234]]) * other.group0().zyz().with_w(other[e5]))
                - (other.group0().yzxx() * self.group1().zxy().with_w(self[e4235]))
                - (other.group1().yzx() * self.group0().zxy()).with_w(other[e425] * self[e4315]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e435] * self[e25])
                    + (other[e12345] * self[e15])
                    + (other[e235] * self[scalar])
                    + (other[e315] * self[e4125])
                    + (other[e125] * self[e31])
                    + (other[e5] * self[e23])
                    - (other[e125] * self[e4315])
                    - (other[e5] * self[e4235]),
                (other[e425] * self[e3215])
                    + (other[e12345] * self[e25])
                    + (other[e235] * self[e12])
                    + (other[e315] * self[scalar])
                    + (other[e125] * self[e4235])
                    + (other[e5] * self[e31])
                    - (other[e125] * self[e23])
                    - (other[e5] * self[e4315]),
                (other[e435] * self[e3215])
                    + (other[e12345] * self[e35])
                    + (other[e235] * self[e4315])
                    + (other[e315] * self[e23])
                    + (other[e125] * self[scalar])
                    + (other[e5] * self[e12])
                    - (other[e125] * self[e45])
                    - (other[e5] * self[e4125]),
                0.0,
            ]) + (Simd32x4::from([self[e3215], self[e35], self[e15], self[e1234]]) * other.group0().xxyw())
                - (Simd32x4::from([self[e45], self[e4125], self[e31], self[e42]]) * other.group1().xxx().with_w(other[e425]))
                - (other.group0().yzxx() * self.group2().zxy().with_w(self[e41]))
                - (self.group1().zw().with_zw(self[e4235], self[e43]) * other.group1().yyy().with_w(other[e435])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                other[e5] * self[e41],
                other[e5] * self[e42],
                other[e5] * self[e43],
                -(other[e435] * self[e35]) - (other[e235] * self[e23]) - (other[e315] * self[e31]) - (other[e125] * self[e12]) - (other[e5] * self[e45]),
            ]) + (Simd32x4::from([self[e42], self[e1234], self[e1234], self[scalar]]) * other.group1().zyzw())
                + (Simd32x4::from([self[e45], self[e4125], self[e4235], self[e3215]]) * other.group0().xxyw())
                + (Simd32x4::from([self[e1234], self[e43], self[e41], self[e4125]]) * other.group1().xxyz())
                + (Simd32x4::from([self[e4315], self[e45], self[e45], self[e4235]]) * other.group0().zyz().with_w(other[e235]))
                + (self.group3().xyzy() * other.group0().www().with_w(other[e315]))
                - (other.group0().yzxx() * self.group3().zxy().with_w(self[e15]))
                - (other.group1().yzx() * self.group0().zxy()).with_w(other[e425] * self[e25]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<MultiVector> for VersorOdd {
    type Output = MultiVector;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32      120      169        0
    //    simd2       16       16        0
    //    simd3      120      153        0
    //    simd4      112       94        0
    // Totals...
    // yes simd      368      432        0
    //  no simd      960     1036        0
    fn anti_sandwich(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (other[e4] * self[e3215])
                    - (other[e425] * self[e31])
                    - (other[e435] * self[e12])
                    - (other[e321] * self[e45])
                    - (other[e431] * self[e25])
                    - (other[e412] * self[e35])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
                (other[e25] * self[e42])
                    + (other[e35] * self[e43])
                    + (other[e42] * self[e25])
                    + (other[e43] * self[e35])
                    + (other[e23] * self[e23])
                    + (other[e31] * self[e31])
                    + (other[e12] * self[e12])
                    - (other[e1234] * self[e3215]),
            ]) + (Simd32x2::from(self[e4235]) * Simd32x2::from([other[e1], other[e4235]]))
                + (Simd32x2::from(self[e4315]) * Simd32x2::from([other[e2], other[e4315]]))
                + (Simd32x2::from(self[e4125]) * Simd32x2::from([other[e3], other[e4125]]))
                + (Simd32x2::from([other[e12345], other[e15]]) * self.group0().wx())
                + (Simd32x2::from([other[e5], other[e41]]) * self.group2().wx())
                - (Simd32x2::from([other[e415], other[e45]]) * self.group1().xw())
                - (Simd32x2::from([other[e423], other[e3215]]) * self.group2().xw())
                - (Simd32x2::from([other[e235], other[scalar]]) * self.group0().xw()),
            // e1, e2, e3, e4
            (Simd32x4::from([self[e42], self[e1234], self[e1234], self[e4125]]) * other.group3().zyz().with_w(other[e43]))
                + (Simd32x4::from([self[scalar], self[e12], self[e23], self[e42]]) * other.group9().xxy().with_w(other[e31]))
                + (Simd32x4::from([self[e31], self[scalar], self[scalar], self[e43]]) * other.group9().zyz().with_w(other[e12]))
                + (Simd32x4::from([self[e45], self[e4125], self[e4235], self[e31]]) * other.group5().xxy().with_w(other[e42]))
                + (Simd32x4::from([self[e1234], self[e43], self[e41], self[e12]]) * other.group3().xxy().with_w(other[e43]))
                + (Simd32x4::from([self[e4315], self[e45], self[e45], self[e4315]]) * other.group5().zyz().with_w(other[e42]))
                + (other.group0().xx().with_zw(other[scalar], other[e41]) * self.group3().xyz().with_w(self[e23]))
                + (other.group4().yzx() * self.group2().zxy()).with_w(other[e41] * self[e4235])
                + (other.group3().www() * self.group1().xyz()).with_w(other[e23] * self[e41])
                + (other.group9().www() * self.group0().xyz()).with_w(other[e45] * self[e1234])
                - (Simd32x4::from(other[e1234]) * self.group2().xyz().with_w(self[e45]))
                - (Simd32x4::from([self[e25], self[e3215], self[e3215], self[e41]]) * other.group4().zyz().with_w(other[e4235]))
                - (Simd32x4::from([self[e3215], self[e35], self[e15], self[e1234]]) * other.group4().xxy().with_w(other[scalar]))
                - (self.group0().zxyz() * other.group3().yzx().with_w(other[e4125]))
                - (other.group5().yzx() * self.group3().zxy()).with_w(other[e4315] * self[e42])
                - (other.group9().yzx() * self.group1().zxy()).with_w(other[e1234] * self[scalar]),
            // e5
            (other[e15] * self[e23])
                + (other[e25] * self[e31])
                + (other[e35] * self[e12])
                + (other[e23] * self[e15])
                + (other[e31] * self[e25])
                + (other[e12] * self[e35])
                + (other[e4235] * self[e15])
                + (other[e4315] * self[e25])
                + (other[e4125] * self[e35])
                + (other[e3215] * self[e45])
                - (other[scalar] * self[e3215])
                - (other[e15] * self[e4235])
                - (other[e25] * self[e4315])
                - (other[e35] * self[e4125])
                - (other[e45] * self[e3215])
                - (other[e3215] * self[scalar]),
            // e15, e25, e35, e45
            (Simd32x4::from(other[e12345]) * self.group2().xyz().with_w(self[e45]))
                + (Simd32x4::from(other[e5]) * self.group1().xyz().with_w(self[e1234]))
                + (Simd32x4::from([self[scalar], self[e12], self[e4315], self[e15]]) * other.group8().xxx().with_w(other[e423]))
                + (Simd32x4::from([self[e31], self[e4235], self[scalar], self[e35]]) * other.group8().zzz().with_w(other[e412]))
                + (Simd32x4::from([self[e25], self[e3215], self[e3215], self[e12]]) * other.group6().zyz().with_w(other[e3]))
                + (Simd32x4::from([self[e4125], self[scalar], self[e23], self[e25]]) * other.group8().yyy().with_w(other[e431]))
                + (Simd32x4::from([self[e3215], self[e35], self[e15], self[e31]]) * other.group6().xxy().with_w(other[e2]))
                + (other.group1().yzxx() * self.group2().zxy().with_w(self[e23]))
                - (Simd32x4::from(other[e235]) * Simd32x4::from([self[e45], self[e4125], self[e31], self[e41]]))
                - (Simd32x4::from(other[e315]) * self.group1().zw().with_zw(self[e4235], self[e42]))
                - (Simd32x4::from(other[e125]) * Simd32x4::from([self[e4315], self[e23], self[e45], self[e43]]))
                - (Simd32x4::from([other[e5], other[e5], other[e5], self[scalar]]) * self.group3().xyz().with_w(other[e321]))
                - (Simd32x4::from([self[e25], self[e3215], self[e3215], self[e4235]]) * other.group1().zyz().with_w(other[e415]))
                - (Simd32x4::from([self[e3215], self[e35], self[e15], self[e3215]]) * other.group1().xxyw())
                - (other.group6().yzxy() * self.group2().zxy().with_w(self[e4315]))
                - (other.group6().wwwz() * self.group2().xyz().with_w(self[e4125])),
            // e41, e42, e43
            (Simd32x3::from(other[e12345]) * self.group0().xyz())
                + (Simd32x3::from(other[e4]) * self.group1().xyz())
                + (Simd32x3::from(other[e4]) * self.group3().xyz())
                + (Simd32x3::from(other[e321]) * self.group0().xyz())
                + (Simd32x3::from([self[e42], self[e1234], self[e1234]]) * other.group1().zyz())
                + (Simd32x3::from([self[e42], self[e1234], self[e1234]]) * other.group6().zyz())
                + (Simd32x3::from([self[scalar], self[e12], self[e23]]) * other.group7().xxy())
                + (Simd32x3::from([self[e31], self[scalar], self[scalar]]) * other.group7().zyz())
                + (Simd32x3::from([self[e45], self[e4125], self[e4235]]) * other.group7().xxy())
                + (Simd32x3::from([self[e1234], self[e43], self[e41]]) * other.group1().xxy())
                + (Simd32x3::from([self[e1234], self[e43], self[e41]]) * other.group6().xxy())
                + (Simd32x3::from([self[e4315], self[e45], self[e45]]) * other.group7().zyz())
                - (other.group7().yzx() * self.group1().zxy())
                - (other.group7().yzx() * self.group3().zxy())
                - (other.group1().yzx() * self.group0().zxy())
                - (other.group6().yzx() * self.group0().zxy()),
            // e23, e31, e12
            (Simd32x3::from(other[e12345]) * self.group1().xyz())
                + (Simd32x3::from(other[e4]) * self.group2().xyz())
                + (Simd32x3::from(other[e5]) * self.group0().xyz())
                + (Simd32x3::from([self[e42], self[e1234], self[e1234]]) * other.group8().zyz())
                + (Simd32x3::from([self[scalar], self[e12], self[e23]]) * other.group6().xxy())
                + (Simd32x3::from([self[e31], self[scalar], self[scalar]]) * other.group6().zyz())
                + (Simd32x3::from([self[e25], self[e3215], self[e3215]]) * other.group7().zyz())
                + (Simd32x3::from([self[e1234], self[e43], self[e41]]) * other.group8().xxy())
                + (Simd32x3::from([self[e3215], self[e35], self[e15]]) * other.group7().xxy())
                + (other.group1().yzx() * self.group3().zxy())
                - (Simd32x3::from(other[e321]) * self.group3().xyz())
                - (Simd32x3::from([self[e45], self[e4125], self[e4235]]) * other.group1().xxy())
                - (Simd32x3::from([self[e4315], self[e45], self[e45]]) * other.group1().zyz())
                - (other.group7().yzx() * self.group2().zxy())
                - (other.group8().yzx() * self.group0().zxy())
                - (other.group6().yzx() * self.group1().zxy()),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(other[e3215] * self[e41]) - (other[e1234] * self[e15]),
                -(other[e3215] * self[e42]) - (other[e1234] * self[e25]),
                -(other[e3215] * self[e43]) - (other[e1234] * self[e35]),
                (other[e45] * self[scalar]) + (other[e3215] * self[e1234]),
            ]) + (other.group4().yzx() * self.group2().zxy()).with_w(other[scalar] * self[e45])
                + (other.group5().yzx() * self.group1().zxy()).with_w(other[e41] * self[e15])
                + (other.group3().yzx() * self.group0().zxy()).with_w(other[e42] * self[e25])
                + (other.group9().yzx() * self.group3().zxy()).with_w(other[e43] * self[e35])
                - (Simd32x4::from([self[e42], self[e1234], self[e1234], self[e23]]) * other.group3().zyz().with_w(other[e4235]))
                - (Simd32x4::from([self[scalar], self[e12], self[e23], self[e41]]) * other.group5().xxy().with_w(other[e15]))
                - (Simd32x4::from([self[e31], self[scalar], self[scalar], self[e42]]) * other.group5().zyz().with_w(other[e25]))
                - (Simd32x4::from([self[e45], self[e4125], self[e4235], self[e12]]) * other.group9().xxyz())
                - (Simd32x4::from([self[e25], self[e3215], self[e3215], self[e4125]]) * other.group4().zyz().with_w(other[e12]))
                - (Simd32x4::from([self[e1234], self[e43], self[e41], self[e43]]) * other.group3().xxyz())
                - (Simd32x4::from([self[e4315], self[e45], self[e45], other[e1234]]) * other.group9().zyz().with_w(self[e3215]))
                - (Simd32x4::from([self[e3215], self[e35], self[e15], self[e4315]]) * other.group4().xxy().with_w(other[e31]))
                - (other.group0().xx().with_zw(other[scalar], other[e23]) * self.group1().xyz().with_w(self[e4235]))
                - (other.group3().www() * self.group3().xyz()).with_w(other[e4315] * self[e31]),
            // e423, e431, e412
            (Simd32x3::from(other[e45]) * self.group0().xyz())
                + (Simd32x3::from([self[e42], self[e1234], self[e1234]]) * other.group9().zyz())
                + (Simd32x3::from([self[e1234], self[e43], self[e41]]) * other.group9().xxy())
                + (other.group4().yzx() * self.group1().zxy())
                + (other.group4().yzx() * self.group3().zxy())
                + (other.group5().yzx() * self.group0().zxy())
                - (Simd32x3::from(other[scalar]) * self.group0().xyz())
                - (Simd32x3::from(other[e1234]) * self.group1().xyz())
                - (Simd32x3::from(other[e1234]) * self.group3().xyz())
                - (Simd32x3::from([self[e42], self[e1234], self[e1234]]) * other.group5().zyz())
                - (Simd32x3::from([self[scalar], self[e12], self[e23]]) * other.group4().xxy())
                - (Simd32x3::from([self[e31], self[scalar], self[scalar]]) * other.group4().zyz())
                - (Simd32x3::from([self[e45], self[e4125], self[e4235]]) * other.group4().xxy())
                - (Simd32x3::from([self[e1234], self[e43], self[e41]]) * other.group5().xxy())
                - (Simd32x3::from([self[e4315], self[e45], self[e45]]) * other.group4().zyz())
                - (other.group9().yzx() * self.group0().zxy()),
            // e235, e315, e125
            (Simd32x3::from(other[e15]) * Simd32x3::from([self[e45], self[e4125], self[e31]]))
                + (Simd32x3::from(other[e25]) * Simd32x3::from([self[e12], self[e45], self[e4235]]))
                + (Simd32x3::from(other[e35]) * Simd32x3::from([self[e4315], self[e23], self[e45]]))
                + (Simd32x3::from(other[e3215]) * self.group3().xyz())
                + (other.group5().yzx() * self.group2().zxy())
                + (other.group9().yzx() * self.group2().zxy())
                - (Simd32x3::from(other[scalar]) * self.group2().xyz())
                - (Simd32x3::from(other[e15]) * Simd32x3::from([self[scalar], self[e12], self[e4315]]))
                - (Simd32x3::from(other[e25]) * Simd32x3::from([self[e4125], self[scalar], self[e23]]))
                - (Simd32x3::from(other[e35]) * Simd32x3::from([self[e31], self[e4235], self[scalar]]))
                - (Simd32x3::from(other[e45]) * self.group2().xyz())
                - (Simd32x3::from(other[e3215]) * self.group1().xyz())
                - (Simd32x3::from([self[e25], self[e3215], self[e3215]]) * other.group5().zyz())
                - (Simd32x3::from([self[e25], self[e3215], self[e3215]]) * other.group9().zyz())
                - (Simd32x3::from([self[e3215], self[e35], self[e15]]) * other.group5().xxy())
                - (Simd32x3::from([self[e3215], self[e35], self[e15]]) * other.group9().xxy()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(other[e12345]) * self.group3())
                + (Simd32x4::from(other[e5]) * self.group0())
                + (Simd32x4::from([self[e42], self[e1234], self[e1234], self[e4125]]) * other.group8().zyz().with_w(other[e125]))
                + (Simd32x4::from([self[e45], self[e4125], self[e4235], self[e25]]) * other.group6().xxy().with_w(other[e2]))
                + (Simd32x4::from([self[e1234], self[e43], self[e41], self[e4315]]) * other.group8().xxy().with_w(other[e315]))
                + (Simd32x4::from([self[e4315], self[e45], self[e45], self[e35]]) * other.group6().zyz().with_w(other[e3]))
                + (other.group1().yzxx() * self.group1().zxy().with_w(self[e15]))
                + (other.group7().yzx() * self.group2().zxy()).with_w(other[e235] * self[e4235])
                - (Simd32x4::from([self[scalar], self[e12], self[e23], self[e15]]) * other.group1().xxy().with_w(other[e415]))
                - (Simd32x4::from([self[e31], self[scalar], self[scalar], self[e25]]) * other.group1().zyz().with_w(other[e425]))
                - (Simd32x4::from([self[e25], self[e3215], self[e3215], self[e31]]) * other.group7().zyz().with_w(other[e315]))
                - (Simd32x4::from([self[e3215], self[e35], self[e15], self[e23]]) * other.group7().xxy().with_w(other[e235]))
                - (other.group6().yzxw() * self.group3().zxyw())
                - (self.group2().xyzz() * other.group1().www().with_w(other[e435]))
                - (other.group8().yzx() * self.group0().zxy()).with_w(other[e125] * self[e12])
                - (other.group6().www() * self.group1().xyz()).with_w(other[e5] * self[e45]),
            // e1234
            (other[e12345] * self[e1234]) + (other[e4] * self[scalar]) + (other[e4] * self[e45]) + (other[e321] * self[e1234])
                - (other[e1] * self[e41])
                - (other[e2] * self[e42])
                - (other[e3] * self[e43])
                - (other[e415] * self[e41])
                - (other[e425] * self[e42])
                - (other[e435] * self[e43])
                - (other[e423] * self[e23])
                - (other[e423] * self[e4235])
                - (other[e431] * self[e31])
                - (other[e431] * self[e4315])
                - (other[e412] * self[e12])
                - (other[e412] * self[e4125]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Plane> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       43       79        0
    //    simd3        0       11        0
    //    simd4       62       55        0
    // Totals...
    // yes simd      105      145        0
    //  no simd      291      332        0
    fn anti_sandwich(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            (Simd32x4::from([self[e42], self[e1234], self[e1234], self[e4315]]) * other.group0().zyzy())
                + (Simd32x4::from([self[e1234], self[e43], self[e41], self[e4235]]) * other.group0().xxyx())
                + Simd32x3::from(0.0).with_w(other[e4125] * self[e4125])
                - (other.group0().yzxw() * self.group0().zxy().with_w(self[e1234])),
            // e415, e425, e435, e321
            (other.group0().yzxw() * self.group3().zxy().with_w(self[e1234]))
                - (Simd32x4::from([self[e45], self[e4125], self[e4235], self[e23]]) * other.group0().xxyx())
                - (Simd32x4::from([self[e4315], self[e45], self[e45], self[e31]]) * other.group0().zyzy())
                - (other.group0().wwwz() * self.group0().xyz().with_w(self[e12])),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(other[e4125] * self[e25]) - (other[e3215] * self[e23]),
                -(other[e4315] * self[e3215]) - (other[e3215] * self[e31]),
                -(other[e4125] * self[e3215]) - (other[e3215] * self[e12]),
                (other[e4125] * self[e35]) + (other[e3215] * self[e45]),
            ]) + (other.group0().yzxx() * self.group2().zxyx())
                + (other.group0().wwwy() * self.group3().xyz().with_w(self[e25]))
                - (Simd32x4::from([self[e3215], self[e35], self[e15], self[scalar]]) * other.group0().xxyw()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e4235] * self[scalar]) + (other[e4125] * self[e31]) + (other[e3215] * self[e41]),
                (other[e4235] * self[e12]) + (other[e4315] * self[scalar]) + (other[e3215] * self[e42]),
                (other[e4315] * self[e23]) + (other[e4125] * self[scalar]) + (other[e3215] * self[e43]),
                -(other[e4315] * self[e42]) - (other[e4125] * self[e43]),
            ]) - (other.group0().yzxx() * self.group1().zxy().with_w(self[e41])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<RoundPoint> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       40       83        0
    //    simd3        0       13        0
    //    simd4       66       58        0
    // Totals...
    // yes simd      106      154        0
    //  no simd      304      354        0
    fn anti_sandwich(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([other[e2] * self[e43] * -1.0, other[e3] * self[e41] * -1.0, other[e1] * self[e42] * -1.0, other[e5] * self[e1234]])
                + (Simd32x4::from(other[e4]) * self.group3())
                + (Simd32x4::from([self[e42], self[e1234], self[e1234], self[e4315]]) * other.group0().zyzy())
                + (Simd32x4::from([self[e1234], self[e43], self[e41], self[e4235]]) * other.group0().xxyx())
                + (other.group0().wwwz() * self.group1().xyz().with_w(self[e4125])),
            // e23, e31, e12, e45
            Simd32x4::from([other[e3] * self[e4315] * -1.0, other[e2] * self[e45] * -1.0, other[e3] * self[e45] * -1.0, other[e5] * self[e1234]])
                + (Simd32x4::from([other[e5], other[e5], other[e5], self[e12]]) * self.group0().xyz().with_w(other[e3]))
                + (other.group0().yzxx() * self.group3().zxy().with_w(self[e23]))
                + (other.group0().wwwy() * self.group2().xyz().with_w(self[e31]))
                - (Simd32x4::from([self[e45], self[e4125], self[e4235], self[e3215]]) * other.group0().xxyw()),
            // e15, e25, e35, e1234
            (Simd32x4::from([other[e5], other[e5], other[e5], self[e45]]) * self.group1().xyz().with_w(other[e4]))
                + (other.group0().yzxw() * self.group2().zxy().with_w(self[scalar]))
                - (Simd32x4::from([other[e5], other[e5], other[e5], self[e43]]) * self.group3().xyz().with_w(other[e3]))
                - (Simd32x4::from([self[e25], self[e3215], self[e3215], self[e42]]) * other.group0().zyzy())
                - (Simd32x4::from([self[e3215], self[e35], self[e15], self[e41]]) * other.group0().xxyx()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                -(other[e3] * self[e31]) - (other[e4] * self[e15]),
                -(other[e2] * self[scalar]) - (other[e4] * self[e25]),
                -(other[e3] * self[scalar]) - (other[e4] * self[e35]),
                (other[e3] * self[e35]) + (other[e5] * self[scalar]),
            ]) + (Simd32x4::from([other[e5], other[e5], other[e5], self[e25]]) * self.group0().xyz().with_w(other[e2]))
                + (other.group0().yzxx() * self.group1().zxy().with_w(self[e15]))
                - (Simd32x4::from([self[scalar], self[e12], self[e23], other[e5]]) * other.group0().xxy().with_w(self[e45])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Scalar> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       32       59        0
    //    simd3        0       11        0
    //    simd4       52       52        0
    // Totals...
    // yes simd       84      122        0
    //  no simd      240      300        0
    fn anti_sandwich(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from(other[scalar]) * self.group0() * Simd32x4::from(-1.0),
            // e415, e425, e435, e321
            Simd32x4::from(other[scalar]) * self.group1() * Simd32x4::from([-1.0, -1.0, -1.0, 1.0]),
            // e235, e315, e125, e5
            Simd32x4::from(other[scalar]) * self.group2().xyz().with_w(self[e3215]) * Simd32x4::from(-1.0),
            // e1, e2, e3, e4
            Simd32x4::from(other[scalar]) * self.group3().xyz().with_w(self[e1234]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<Sphere> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       44       86        0
    //    simd3        0       11        0
    //    simd4       65       58        0
    // Totals...
    // yes simd      109      155        0
    //  no simd      304      351        0
    fn anti_sandwich(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                other[e1234] * self[e4235] * -1.0,
                other[e1234] * self[e4315] * -1.0,
                other[e1234] * self[e4125] * -1.0,
                other[e4125] * self[e4125],
            ]) + (Simd32x4::from([self[e42], self[e1234], self[e1234], self[e4315]]) * other.group0().zyzy())
                + (Simd32x4::from([self[e1234], self[e43], self[e41], self[e4235]]) * other.group0().xxyx())
                - (Simd32x4::from(other[e1234]) * self.group1().xyz().with_w(self[e3215]))
                - (other.group0().yzxw() * self.group0().zxy().with_w(self[e1234])),
            // e415, e425, e435, e321
            (other.group0().yzxw() * self.group3().zxy().with_w(self[e1234]))
                - (Simd32x4::from(other[e1234]) * self.group2().xyz().with_w(self[e3215]))
                - (Simd32x4::from([self[e45], self[e4125], self[e4235], self[e23]]) * other.group0().xxyx())
                - (Simd32x4::from([self[e4315], self[e45], self[e45], self[e31]]) * other.group0().zyzy())
                - (other.group0().wwwz() * self.group0().xyz().with_w(self[e12])),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(other[e4125] * self[e25]) - (other[e3215] * self[e23]),
                -(other[e4315] * self[e3215]) - (other[e3215] * self[e31]),
                -(other[e4125] * self[e3215]) - (other[e3215] * self[e12]),
                (other[e4125] * self[e35]) + (other[e3215] * self[e45]),
            ]) + (other.group0().yzxx() * self.group2().zxyx())
                + (other.group0().wwwy() * self.group3().xyz().with_w(self[e25]))
                - (Simd32x4::from([self[e3215], self[e35], self[e15], self[scalar]]) * other.group0().xxyw()),
            // e1, e2, e3, e4
            Simd32x4::from([
                (other[e4235] * self[scalar]) + (other[e4125] * self[e31]) + (other[e3215] * self[e41]),
                (other[e4235] * self[e12]) + (other[e4315] * self[scalar]) + (other[e3215] * self[e42]),
                (other[e4315] * self[e23]) + (other[e4125] * self[scalar]) + (other[e3215] * self[e43]),
                -(other[e4125] * self[e43]) - (other[e1234] * self[scalar]) - (other[e1234] * self[e45]),
            ]) - (Simd32x4::from([other[e1234], other[e1234], other[e1234], self[e42]]) * self.group2().xyz().with_w(other[e4315]))
                - (other.group0().yzxx() * self.group1().zxy().with_w(self[e41])),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorEven> for VersorOdd {
    type Output = VersorEven;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       72      118        0
    //    simd3        0       22        0
    //    simd4      102       85        0
    // Totals...
    // yes simd      174      225        0
    //  no simd      480      524        0
    fn anti_sandwich(self, other: VersorEven) -> Self::Output {
        use crate::elements::*;
        return VersorOdd::from_groups(
            // e41, e42, e43, scalar
            Simd32x4::from([
                (other[e435] * self[e42]) + (other[e321] * self[e41]) + (other[e1] * self[e1234]) + (other[e3] * self[e42]) + (other[e4] * self[e23]) + (other[e4] * self[e4235]),
                (other[e425] * self[e1234]) + (other[e321] * self[e42]) + (other[e1] * self[e43]) + (other[e2] * self[e1234]) + (other[e4] * self[e31]) + (other[e4] * self[e4315]),
                (other[e435] * self[e1234]) + (other[e321] * self[e43]) + (other[e2] * self[e41]) + (other[e3] * self[e1234]) + (other[e4] * self[e12]) + (other[e4] * self[e4125]),
                -(other[e425] * self[e31])
                    - (other[e435] * self[e12])
                    - (other[e321] * self[e45])
                    - (other[e235] * self[e41])
                    - (other[e315] * self[e42])
                    - (other[e125] * self[e43]),
            ]) + (Simd32x4::from([self[scalar], self[e12], self[e23], self[scalar]]) * other.group0().xxyw())
                + (Simd32x4::from([self[e31], self[scalar], self[scalar], self[e4235]]) * other.group0().zyz().with_w(other[e1]))
                + (Simd32x4::from([self[e45], self[e4125], self[e4235], self[e1234]]) * other.group0().xxy().with_w(other[e5]))
                + (Simd32x4::from([self[e1234], self[e43], self[e41], self[e3215]]) * other.group1().xxy().with_w(other[e4]))
                + (Simd32x4::from([self[e4315], self[e45], self[e45], self[e4315]]) * other.group0().zyz().with_w(other[e2]))
                + (other.group0().www() * self.group0().xyz()).with_w(other[e3] * self[e4125])
                - (other.group0().yzxx() * self.group1().zxy().with_w(self[e15]))
                - (other.group0().yzxy() * self.group3().zxy().with_w(self[e25]))
                - (other.group1().yzx() * self.group0().zxy()).with_w(other[e412] * self[e35])
                - (other.group3().yzx() * self.group0().zxy()).with_w(other[e415] * self[e23]),
            // e23, e31, e12, e45
            Simd32x4::from([
                (other[e2] * self[e4125]) + (other[e4] * self[e15]),
                (other[e3] * self[e4235]) + (other[e4] * self[e25]),
                (other[e1] * self[e4315]) + (other[e4] * self[e35]),
                -(other[e125] * self[e43]) - (other[e4] * self[e3215]),
            ]) + (Simd32x4::from([self[e42], self[e1234], self[e1234], self[e31]]) * other.group2().zyz().with_w(other[e2]))
                + (Simd32x4::from([self[scalar], self[e12], self[e23], self[e45]]) * other.group1().xxy().with_w(other[e12345]))
                + (Simd32x4::from([self[e31], self[scalar], self[scalar], self[e1234]]) * other.group1().zyz().with_w(other[e5]))
                + (Simd32x4::from([self[e25], self[e3215], self[e3215], self[e25]]) * other.group0().zyzy())
                + (Simd32x4::from([self[e1234], self[e43], self[e41], self[e23]]) * other.group2().xxy().with_w(other[e1]))
                + (Simd32x4::from([self[e3215], self[e35], self[e15], self[e15]]) * other.group0().xxyx())
                + (other.group0().wwwz() * self.group1().xyz().with_w(self[e35]))
                + (other.group2().www() * self.group0().xyz()).with_w(other[e3] * self[e12])
                - (Simd32x4::from([self[e45], self[e4125], self[e4235], self[e41]]) * other.group3().xxy().with_w(other[e235]))
                - (Simd32x4::from([self[e4315], self[e45], self[e45], self[e42]]) * other.group3().zyz().with_w(other[e315]))
                - (other.group1().yzxy() * self.group1().zxy().with_w(self[e4315]))
                - (other.group1().wwwz() * self.group3().xyzz())
                - (self.group0().zxyw() * other.group2().yzx().with_w(other[e321]))
                - (other.group0().yzx() * self.group2().zxy()).with_w(other[e415] * self[e4235]),
            // e15, e25, e35, e1234
            Simd32x4::from([
                (other[e315] * self[e4125]) + (other[e125] * self[e31]) + (other[e5] * self[e23]) + (other[e2] * self[e35]),
                (other[e315] * self[scalar]) + (other[e125] * self[e4235]) + (other[e5] * self[e31]) + (other[e3] * self[e15]),
                (other[e315] * self[e23]) + (other[e125] * self[scalar]) + (other[e5] * self[e12]) + (other[e1] * self[e25]),
                -(other[e435] * self[e43]) - (other[e1] * self[e41]) - (other[e2] * self[e42]) - (other[e3] * self[e43]),
            ]) + (Simd32x4::from(other[e12345]) * self.group2())
                + (Simd32x4::from([self[scalar], self[e12], self[e4315], self[e45]]) * other.group2().xxx().with_w(other[e4]))
                + (Simd32x4::from([self[e25], self[e3215], self[e3215], self[scalar]]) * other.group1().zyz().with_w(other[e4]))
                + (Simd32x4::from([self[e3215], self[e35], self[e15], self[e1234]]) * other.group1().xxyw())
                - (Simd32x4::from([self[e45], self[e4125], self[e31], self[e31]]) * other.group2().xxx().with_w(other[e431]))
                - (Simd32x4::from([self[e25], self[e3215], self[e3215], self[e42]]) * other.group3().zyz().with_w(other[e425]))
                - (Simd32x4::from([self[e4315], self[e23], self[e45], self[e12]]) * other.group2().zzz().with_w(other[e412]))
                - (Simd32x4::from([self[e3215], self[e35], self[e15], self[e41]]) * other.group3().xxy().with_w(other[e415]))
                - (self.group3().xyzz() * other.group2().www().with_w(other[e412]))
                - (self.group1().zw().with_zw(self[e4235], self[e4315]) * other.group2().yyy().with_w(other[e431]))
                - (other.group1().yzx() * self.group2().zxy()).with_w(other[e423] * self[e23])
                - (other.group1().www() * self.group2().xyz()).with_w(other[e423] * self[e4235]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([self[e42], self[e1234], self[e1234], self[e15]]) * other.group2().zyz().with_w(other[e1]))
                + (Simd32x4::from([self[e45], self[e4125], self[e4235], self[e4315]]) * other.group1().xxy().with_w(other[e315]))
                + (Simd32x4::from([self[e1234], self[e43], self[e41], self[scalar]]) * other.group2().xxyw())
                + (Simd32x4::from([self[e4315], self[e45], self[e45], self[e4125]]) * other.group1().zyz().with_w(other[e125]))
                + (other.group0().yzxw() * self.group2().zxy().with_w(self[e3215]))
                + (other.group3().yzxz() * self.group1().zxy().with_w(self[e35]))
                + (self.group3().xyzx() * other.group0().www().with_w(other[e235]))
                + (other.group2().www() * self.group0().xyz()).with_w(other[e2] * self[e25])
                - (Simd32x4::from(other[e321]) * self.group1().xyz().with_w(self[e3215]))
                - (Simd32x4::from([self[scalar], self[e12], self[e23], self[e31]]) * other.group3().xxy().with_w(other[e315]))
                - (Simd32x4::from([self[e31], self[scalar], self[scalar], self[e12]]) * other.group3().zyz().with_w(other[e125]))
                - (Simd32x4::from([self[e25], self[e3215], self[e3215], self[e25]]) * other.group0().zyz().with_w(other[e425]))
                - (Simd32x4::from([self[e3215], self[e35], self[e15], self[e15]]) * other.group0().xxy().with_w(other[e415]))
                - (other.group1().yzxz() * self.group3().zxy().with_w(self[e35]))
                - (other.group2().yzxx() * self.group0().zxy().with_w(self[e23]))
                - (other.group3().www() * self.group2().xyz()).with_w(other[e5] * self[e45]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
impl AntiSandwich<VersorOdd> for VersorOdd {
    type Output = VersorOdd;
    // Operative Statistics for this implementation:
    //           add/sub      mul      div
    //      f32       68      120        0
    //    simd3        0       24        0
    //    simd4      103       83        0
    // Totals...
    // yes simd      171      227        0
    //  no simd      480      524        0
    fn anti_sandwich(self, other: VersorOdd) -> Self::Output {
        use crate::elements::*;
        return VersorEven::from_groups(
            // e423, e431, e412, e12345
            Simd32x4::from([
                -(other[scalar] * self[e41])
                    - (other[e23] * self[e1234])
                    - (other[e12] * self[e42])
                    - (other[e1234] * self[e23])
                    - (other[e1234] * self[e4235])
                    - (other[e4315] * self[e43]),
                -(other[scalar] * self[e42])
                    - (other[e23] * self[e43])
                    - (other[e31] * self[e1234])
                    - (other[e1234] * self[e31])
                    - (other[e1234] * self[e4315])
                    - (other[e4125] * self[e41]),
                -(other[scalar] * self[e43])
                    - (other[e31] * self[e41])
                    - (other[e12] * self[e1234])
                    - (other[e1234] * self[e12])
                    - (other[e1234] * self[e4125])
                    - (other[e4235] * self[e42]),
                (other[e15] * self[e41])
                    + (other[e25] * self[e42])
                    + (other[e35] * self[e43])
                    + (other[e4235] * self[e4235])
                    + (other[e4315] * self[e4315])
                    + (other[e4125] * self[e4125]),
            ]) + (Simd32x4::from([self[e42], self[e1234], self[e1234], self[e12]]) * other.group3().zyz().with_w(other[e12]))
                + (Simd32x4::from([self[e1234], self[e43], self[e41], self[e31]]) * other.group3().xxy().with_w(other[e31]))
                + (other.group0().yzxx() * self.group1().zxy().with_w(self[e15]))
                + (other.group0().yzxy() * self.group3().zxy().with_w(self[e25]))
                + (other.group1().wwwx() * self.group0().xyz().with_w(self[e23]))
                + (other.group1().yzx() * self.group0().zxy()).with_w(other[e43] * self[e35])
                - (Simd32x4::from([self[scalar], self[e12], self[e23], self[scalar]]) * other.group0().xxyw())
                - (Simd32x4::from([self[e31], self[scalar], self[scalar], self[e3215]]) * other.group0().zyz().with_w(other[e1234]))
                - (Simd32x4::from([self[e45], self[e4125], self[e4235], self[e45]]) * other.group0().xxy().with_w(other[e45]))
                - (Simd32x4::from([self[e4315], self[e45], self[e45], self[e1234]]) * other.group0().zyz().with_w(other[e3215])),
            // e415, e425, e435, e321
            Simd32x4::from([
                -(other[e4125] * self[e4315]) - (other[e3215] * self[e41]),
                -(other[e4315] * self[e45]) - (other[e3215] * self[e42]),
                -(other[e4125] * self[e45]) - (other[e3215] * self[e43]),
                (other[e45] * self[scalar]) + (other[e3215] * self[e1234]),
            ]) + (other.group0().yzxx() * self.group2().zxyx())
                + (other.group1().yzx() * self.group1().zxy()).with_w(other[e42] * self[e25])
                + (other.group2().yzx() * self.group0().zxy()).with_w(other[e43] * self[e35])
                + (other.group3().yzx() * self.group3().zxy()).with_w(other[scalar] * self[e45])
                - (Simd32x4::from([self[e42], self[e1234], self[e1234], self[e23]]) * other.group2().zyz().with_w(other[e4235]))
                - (Simd32x4::from([self[scalar], self[e12], self[e23], self[e41]]) * other.group1().xxy().with_w(other[e15]))
                - (Simd32x4::from([self[e31], self[scalar], self[scalar], self[e42]]) * other.group1().zyz().with_w(other[e25]))
                - (Simd32x4::from([self[e45], self[e4125], self[e4235], self[e12]]) * other.group3().xxyz())
                - (Simd32x4::from([self[e25], self[e3215], self[e3215], self[e4315]]) * other.group0().zyz().with_w(other[e31]))
                - (Simd32x4::from([self[e1234], self[e43], self[e41], self[e3215]]) * other.group2().xxyw())
                - (Simd32x4::from([self[e3215], self[e35], self[e15], self[e4235]]) * other.group0().xxy().with_w(other[e23]))
                - (other.group0().www() * self.group1().xyz()).with_w(other[e12] * self[e4125])
                - (other.group1().www() * self.group3().xyz()).with_w(other[e35] * self[e43])
                - (other.group2().www() * self.group2().xyz()).with_w(other[e4315] * self[e31]),
            // e235, e315, e125, e5
            Simd32x4::from([
                -(other[e35] * self[e31]) - (other[e4235] * self[e3215]) - (other[e4125] * self[e25]) - (other[e3215] * self[e23]),
                -(other[e35] * self[e4235]) - (other[e4235] * self[e35]) - (other[e4315] * self[e3215]) - (other[e3215] * self[e31]),
                -(other[e35] * self[scalar]) - (other[e4315] * self[e15]) - (other[e4125] * self[e3215]) - (other[e3215] * self[e12]),
                (other[e4235] * self[e15]) + (other[e4315] * self[e25]) + (other[e4125] * self[e35]) + (other[e3215] * self[e45]),
            ]) + (Simd32x4::from([self[e45], self[e4125], self[e31], self[e25]]) * other.group2().xxx().with_w(other[e31]))
                + (Simd32x4::from([self[e4315], self[e23], self[e45], self[e23]]) * other.group2().zzzx())
                + (other.group1().yzxx() * self.group2().zxyx())
                + (self.group1().zw().with_zw(self[e4235], self[e35]) * other.group2().yyy().with_w(other[e12]))
                + (other.group3().yzx() * self.group2().zxy()).with_w(other[e25] * self[e31])
                + (other.group3().www() * self.group3().xyz()).with_w(other[e35] * self[e12])
                - (Simd32x4::from(other[scalar]) * self.group2().xyz().with_w(self[e3215]))
                - (Simd32x4::from([self[scalar], self[e12], self[e4315], self[e4125]]) * other.group2().xxxz())
                - (Simd32x4::from([self[e25], self[e3215], self[e3215], self[e4235]]) * other.group1().zyz().with_w(other[e15]))
                - (Simd32x4::from([self[e4125], self[scalar], self[e23], self[scalar]]) * other.group2().yyy().with_w(other[e3215]))
                - (Simd32x4::from([self[e3215], self[e35], self[e15], self[e3215]]) * other.group1().xxyw())
                - (other.group1().www() * self.group2().xyz()).with_w(other[e25] * self[e4315]),
            // e1, e2, e3, e4
            (Simd32x4::from([self[e42], self[e1234], self[e1234], self[e41]]) * other.group2().zyz().with_w(other[e23]))
                + (Simd32x4::from([self[scalar], self[e12], self[e23], self[e42]]) * other.group3().xxy().with_w(other[e31]))
                + (Simd32x4::from([self[e31], self[scalar], self[scalar], self[e43]]) * other.group3().zyz().with_w(other[e12]))
                + (Simd32x4::from([self[e45], self[e4125], self[e4235], self[e31]]) * other.group1().xxy().with_w(other[e42]))
                + (Simd32x4::from([self[e1234], self[e43], self[e41], self[e4125]]) * other.group2().xxy().with_w(other[e43]))
                + (Simd32x4::from([self[e4315], self[e45], self[e45], self[e4315]]) * other.group1().zyz().with_w(other[e42]))
                + (other.group0().yzxx() * self.group2().zxy().with_w(self[e23]))
                + (other.group0().wwwx() * self.group3().xyzx())
                + (self.group1().xyzz() * other.group1().www().with_w(other[e43]))
                + (other.group3().www() * self.group0().xyz()).with_w(other[e45] * self[e1234])
                - (Simd32x4::from([self[e25], self[e3215], self[e3215], self[scalar]]) * other.group0().zyz().with_w(other[e1234]))
                - (Simd32x4::from([self[e3215], self[e35], self[e15], self[e1234]]) * other.group0().xxyw())
                - (other.group3().yzxz() * self.group1().zxy().with_w(self[e43]))
                - (self.group0().zxyx() * other.group2().yzx().with_w(other[e4235]))
                - (other.group1().yzx() * self.group3().zxy()).with_w(other[e1234] * self[e45])
                - (other.group2().www() * self.group2().xyz()).with_w(other[e4315] * self[e42]),
        )
        .geometric_anti_product(self.anti_reverse());
    }
}
